
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d584  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800d71c  0800d71c  0000e71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d794  0800d794  0000f130  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d794  0800d794  0000e794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d79c  0800d79c  0000f130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d79c  0800d79c  0000e79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d7a0  0800d7a0  0000e7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000130  20000000  0800d7a4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000188c  20000130  0800d8d4  0000f130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019bc  0800d8d4  0000f9bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad78  00000000  00000000  0000f160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004278  00000000  00000000  00029ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  0002e150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001262  00000000  00000000  0002f920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000061f9  00000000  00000000  00030b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ed67  00000000  00000000  00036d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f97c  00000000  00000000  00055ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f545e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000659c  00000000  00000000  000f54a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000fba40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000130 	.word	0x20000130
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800d704 	.word	0x0800d704

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000134 	.word	0x20000134
 80001d4:	0800d704 	.word	0x0800d704

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b988 	b.w	8000cec <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9d08      	ldr	r5, [sp, #32]
 80009fa:	468e      	mov	lr, r1
 80009fc:	4604      	mov	r4, r0
 80009fe:	4688      	mov	r8, r1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d14a      	bne.n	8000a9a <__udivmoddi4+0xa6>
 8000a04:	428a      	cmp	r2, r1
 8000a06:	4617      	mov	r7, r2
 8000a08:	d962      	bls.n	8000ad0 <__udivmoddi4+0xdc>
 8000a0a:	fab2 f682 	clz	r6, r2
 8000a0e:	b14e      	cbz	r6, 8000a24 <__udivmoddi4+0x30>
 8000a10:	f1c6 0320 	rsb	r3, r6, #32
 8000a14:	fa01 f806 	lsl.w	r8, r1, r6
 8000a18:	fa20 f303 	lsr.w	r3, r0, r3
 8000a1c:	40b7      	lsls	r7, r6
 8000a1e:	ea43 0808 	orr.w	r8, r3, r8
 8000a22:	40b4      	lsls	r4, r6
 8000a24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a28:	fa1f fc87 	uxth.w	ip, r7
 8000a2c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a30:	0c23      	lsrs	r3, r4, #16
 8000a32:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a3a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d909      	bls.n	8000a56 <__udivmoddi4+0x62>
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a48:	f080 80ea 	bcs.w	8000c20 <__udivmoddi4+0x22c>
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	f240 80e7 	bls.w	8000c20 <__udivmoddi4+0x22c>
 8000a52:	3902      	subs	r1, #2
 8000a54:	443b      	add	r3, r7
 8000a56:	1a9a      	subs	r2, r3, r2
 8000a58:	b2a3      	uxth	r3, r4
 8000a5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a66:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a6a:	459c      	cmp	ip, r3
 8000a6c:	d909      	bls.n	8000a82 <__udivmoddi4+0x8e>
 8000a6e:	18fb      	adds	r3, r7, r3
 8000a70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a74:	f080 80d6 	bcs.w	8000c24 <__udivmoddi4+0x230>
 8000a78:	459c      	cmp	ip, r3
 8000a7a:	f240 80d3 	bls.w	8000c24 <__udivmoddi4+0x230>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3802      	subs	r0, #2
 8000a82:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a86:	eba3 030c 	sub.w	r3, r3, ip
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	b11d      	cbz	r5, 8000a96 <__udivmoddi4+0xa2>
 8000a8e:	40f3      	lsrs	r3, r6
 8000a90:	2200      	movs	r2, #0
 8000a92:	e9c5 3200 	strd	r3, r2, [r5]
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d905      	bls.n	8000aaa <__udivmoddi4+0xb6>
 8000a9e:	b10d      	cbz	r5, 8000aa4 <__udivmoddi4+0xb0>
 8000aa0:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4608      	mov	r0, r1
 8000aa8:	e7f5      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000aaa:	fab3 f183 	clz	r1, r3
 8000aae:	2900      	cmp	r1, #0
 8000ab0:	d146      	bne.n	8000b40 <__udivmoddi4+0x14c>
 8000ab2:	4573      	cmp	r3, lr
 8000ab4:	d302      	bcc.n	8000abc <__udivmoddi4+0xc8>
 8000ab6:	4282      	cmp	r2, r0
 8000ab8:	f200 8105 	bhi.w	8000cc6 <__udivmoddi4+0x2d2>
 8000abc:	1a84      	subs	r4, r0, r2
 8000abe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	4690      	mov	r8, r2
 8000ac6:	2d00      	cmp	r5, #0
 8000ac8:	d0e5      	beq.n	8000a96 <__udivmoddi4+0xa2>
 8000aca:	e9c5 4800 	strd	r4, r8, [r5]
 8000ace:	e7e2      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	f000 8090 	beq.w	8000bf6 <__udivmoddi4+0x202>
 8000ad6:	fab2 f682 	clz	r6, r2
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	f040 80a4 	bne.w	8000c28 <__udivmoddi4+0x234>
 8000ae0:	1a8a      	subs	r2, r1, r2
 8000ae2:	0c03      	lsrs	r3, r0, #16
 8000ae4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae8:	b280      	uxth	r0, r0
 8000aea:	b2bc      	uxth	r4, r7
 8000aec:	2101      	movs	r1, #1
 8000aee:	fbb2 fcfe 	udiv	ip, r2, lr
 8000af2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000af6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000afa:	fb04 f20c 	mul.w	r2, r4, ip
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d907      	bls.n	8000b12 <__udivmoddi4+0x11e>
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b08:	d202      	bcs.n	8000b10 <__udivmoddi4+0x11c>
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	f200 80e0 	bhi.w	8000cd0 <__udivmoddi4+0x2dc>
 8000b10:	46c4      	mov	ip, r8
 8000b12:	1a9b      	subs	r3, r3, r2
 8000b14:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b18:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b1c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b20:	fb02 f404 	mul.w	r4, r2, r4
 8000b24:	429c      	cmp	r4, r3
 8000b26:	d907      	bls.n	8000b38 <__udivmoddi4+0x144>
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b2e:	d202      	bcs.n	8000b36 <__udivmoddi4+0x142>
 8000b30:	429c      	cmp	r4, r3
 8000b32:	f200 80ca 	bhi.w	8000cca <__udivmoddi4+0x2d6>
 8000b36:	4602      	mov	r2, r0
 8000b38:	1b1b      	subs	r3, r3, r4
 8000b3a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b3e:	e7a5      	b.n	8000a8c <__udivmoddi4+0x98>
 8000b40:	f1c1 0620 	rsb	r6, r1, #32
 8000b44:	408b      	lsls	r3, r1
 8000b46:	fa22 f706 	lsr.w	r7, r2, r6
 8000b4a:	431f      	orrs	r7, r3
 8000b4c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b50:	fa20 f306 	lsr.w	r3, r0, r6
 8000b54:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b58:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b5c:	4323      	orrs	r3, r4
 8000b5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b62:	fa1f fc87 	uxth.w	ip, r7
 8000b66:	fbbe f0f9 	udiv	r0, lr, r9
 8000b6a:	0c1c      	lsrs	r4, r3, #16
 8000b6c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b70:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b74:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b78:	45a6      	cmp	lr, r4
 8000b7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x1a0>
 8000b80:	193c      	adds	r4, r7, r4
 8000b82:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b86:	f080 809c 	bcs.w	8000cc2 <__udivmoddi4+0x2ce>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	f240 8099 	bls.w	8000cc2 <__udivmoddi4+0x2ce>
 8000b90:	3802      	subs	r0, #2
 8000b92:	443c      	add	r4, r7
 8000b94:	eba4 040e 	sub.w	r4, r4, lr
 8000b98:	fa1f fe83 	uxth.w	lr, r3
 8000b9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ba0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ba8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bac:	45a4      	cmp	ip, r4
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x1ce>
 8000bb0:	193c      	adds	r4, r7, r4
 8000bb2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000bb6:	f080 8082 	bcs.w	8000cbe <__udivmoddi4+0x2ca>
 8000bba:	45a4      	cmp	ip, r4
 8000bbc:	d97f      	bls.n	8000cbe <__udivmoddi4+0x2ca>
 8000bbe:	3b02      	subs	r3, #2
 8000bc0:	443c      	add	r4, r7
 8000bc2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bc6:	eba4 040c 	sub.w	r4, r4, ip
 8000bca:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bce:	4564      	cmp	r4, ip
 8000bd0:	4673      	mov	r3, lr
 8000bd2:	46e1      	mov	r9, ip
 8000bd4:	d362      	bcc.n	8000c9c <__udivmoddi4+0x2a8>
 8000bd6:	d05f      	beq.n	8000c98 <__udivmoddi4+0x2a4>
 8000bd8:	b15d      	cbz	r5, 8000bf2 <__udivmoddi4+0x1fe>
 8000bda:	ebb8 0203 	subs.w	r2, r8, r3
 8000bde:	eb64 0409 	sbc.w	r4, r4, r9
 8000be2:	fa04 f606 	lsl.w	r6, r4, r6
 8000be6:	fa22 f301 	lsr.w	r3, r2, r1
 8000bea:	431e      	orrs	r6, r3
 8000bec:	40cc      	lsrs	r4, r1
 8000bee:	e9c5 6400 	strd	r6, r4, [r5]
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	e74f      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000bf6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bfa:	0c01      	lsrs	r1, r0, #16
 8000bfc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c00:	b280      	uxth	r0, r0
 8000c02:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c06:	463b      	mov	r3, r7
 8000c08:	4638      	mov	r0, r7
 8000c0a:	463c      	mov	r4, r7
 8000c0c:	46b8      	mov	r8, r7
 8000c0e:	46be      	mov	lr, r7
 8000c10:	2620      	movs	r6, #32
 8000c12:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c16:	eba2 0208 	sub.w	r2, r2, r8
 8000c1a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c1e:	e766      	b.n	8000aee <__udivmoddi4+0xfa>
 8000c20:	4601      	mov	r1, r0
 8000c22:	e718      	b.n	8000a56 <__udivmoddi4+0x62>
 8000c24:	4610      	mov	r0, r2
 8000c26:	e72c      	b.n	8000a82 <__udivmoddi4+0x8e>
 8000c28:	f1c6 0220 	rsb	r2, r6, #32
 8000c2c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c30:	40b7      	lsls	r7, r6
 8000c32:	40b1      	lsls	r1, r6
 8000c34:	fa20 f202 	lsr.w	r2, r0, r2
 8000c38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c42:	b2bc      	uxth	r4, r7
 8000c44:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c48:	0c11      	lsrs	r1, r2, #16
 8000c4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4e:	fb08 f904 	mul.w	r9, r8, r4
 8000c52:	40b0      	lsls	r0, r6
 8000c54:	4589      	cmp	r9, r1
 8000c56:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c5a:	b280      	uxth	r0, r0
 8000c5c:	d93e      	bls.n	8000cdc <__udivmoddi4+0x2e8>
 8000c5e:	1879      	adds	r1, r7, r1
 8000c60:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c64:	d201      	bcs.n	8000c6a <__udivmoddi4+0x276>
 8000c66:	4589      	cmp	r9, r1
 8000c68:	d81f      	bhi.n	8000caa <__udivmoddi4+0x2b6>
 8000c6a:	eba1 0109 	sub.w	r1, r1, r9
 8000c6e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c72:	fb09 f804 	mul.w	r8, r9, r4
 8000c76:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c7a:	b292      	uxth	r2, r2
 8000c7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c80:	4542      	cmp	r2, r8
 8000c82:	d229      	bcs.n	8000cd8 <__udivmoddi4+0x2e4>
 8000c84:	18ba      	adds	r2, r7, r2
 8000c86:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c8a:	d2c4      	bcs.n	8000c16 <__udivmoddi4+0x222>
 8000c8c:	4542      	cmp	r2, r8
 8000c8e:	d2c2      	bcs.n	8000c16 <__udivmoddi4+0x222>
 8000c90:	f1a9 0102 	sub.w	r1, r9, #2
 8000c94:	443a      	add	r2, r7
 8000c96:	e7be      	b.n	8000c16 <__udivmoddi4+0x222>
 8000c98:	45f0      	cmp	r8, lr
 8000c9a:	d29d      	bcs.n	8000bd8 <__udivmoddi4+0x1e4>
 8000c9c:	ebbe 0302 	subs.w	r3, lr, r2
 8000ca0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ca4:	3801      	subs	r0, #1
 8000ca6:	46e1      	mov	r9, ip
 8000ca8:	e796      	b.n	8000bd8 <__udivmoddi4+0x1e4>
 8000caa:	eba7 0909 	sub.w	r9, r7, r9
 8000cae:	4449      	add	r1, r9
 8000cb0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cb4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cb8:	fb09 f804 	mul.w	r8, r9, r4
 8000cbc:	e7db      	b.n	8000c76 <__udivmoddi4+0x282>
 8000cbe:	4673      	mov	r3, lr
 8000cc0:	e77f      	b.n	8000bc2 <__udivmoddi4+0x1ce>
 8000cc2:	4650      	mov	r0, sl
 8000cc4:	e766      	b.n	8000b94 <__udivmoddi4+0x1a0>
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e6fd      	b.n	8000ac6 <__udivmoddi4+0xd2>
 8000cca:	443b      	add	r3, r7
 8000ccc:	3a02      	subs	r2, #2
 8000cce:	e733      	b.n	8000b38 <__udivmoddi4+0x144>
 8000cd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cd4:	443b      	add	r3, r7
 8000cd6:	e71c      	b.n	8000b12 <__udivmoddi4+0x11e>
 8000cd8:	4649      	mov	r1, r9
 8000cda:	e79c      	b.n	8000c16 <__udivmoddi4+0x222>
 8000cdc:	eba1 0109 	sub.w	r1, r1, r9
 8000ce0:	46c4      	mov	ip, r8
 8000ce2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ce6:	fb09 f804 	mul.w	r8, r9, r4
 8000cea:	e7c4      	b.n	8000c76 <__udivmoddi4+0x282>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++) {
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	e00a      	b.n	8000d14 <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <HAL_ADC_ConvCpltCallback+0x38>)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d06:	4a09      	ldr	r2, [pc, #36]	@ (8000d2c <HAL_ADC_ConvCpltCallback+0x3c>)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	3301      	adds	r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b07      	cmp	r3, #7
 8000d18:	ddf1      	ble.n	8000cfe <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	20000354 	.word	0x20000354
 8000d2c:	20000364 	.word	0x20000364

08000d30 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
    ssd1306_TxCplt = 1;
 8000d38:	4b04      	ldr	r3, [pc, #16]	@ (8000d4c <HAL_I2C_MemTxCpltCallback+0x1c>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000591 	.word	0x20000591

08000d50 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = 1;
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <HAL_I2C_MemRxCpltCallback+0x1c>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000592 	.word	0x20000592

08000d70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0e      	ldr	r2, [pc, #56]	@ (8000db8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d116      	bne.n	8000db0 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	3301      	adds	r3, #1
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000d8c:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b28      	cmp	r3, #40	@ 0x28
 8000d94:	d107      	bne.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 8000d96:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
			IS10MS=TRUE;
 8000d9c:	4a08      	ldr	r2, [pc, #32]	@ (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000d9e:	7813      	ldrb	r3, [r2, #0]
 8000da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000da4:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 8000da6:	2208      	movs	r2, #8
 8000da8:	4906      	ldr	r1, [pc, #24]	@ (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000daa:	4807      	ldr	r0, [pc, #28]	@ (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000dac:	f001 fe4c 	bl	8002a48 <HAL_ADC_Start_DMA>
	}
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40010000 	.word	0x40010000
 8000dbc:	20000350 	.word	0x20000350
 8000dc0:	20000590 	.word	0x20000590
 8000dc4:	20000354 	.word	0x20000354
 8000dc8:	2000014c 	.word	0x2000014c

08000dcc <USBRxData>:

void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 8000dcc:	b490      	push	{r4, r7}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	73fb      	strb	r3, [r7, #15]
 8000dda:	e018      	b.n	8000e0e <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	441a      	add	r2, r3
 8000de2:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <USBRxData+0x58>)
 8000de4:	6819      	ldr	r1, [r3, #0]
 8000de6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <USBRxData+0x58>)
 8000de8:	795b      	ldrb	r3, [r3, #5]
 8000dea:	1c58      	adds	r0, r3, #1
 8000dec:	b2c4      	uxtb	r4, r0
 8000dee:	480d      	ldr	r0, [pc, #52]	@ (8000e24 <USBRxData+0x58>)
 8000df0:	7144      	strb	r4, [r0, #5]
 8000df2:	440b      	add	r3, r1
 8000df4:	7812      	ldrb	r2, [r2, #0]
 8000df6:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 8000df8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <USBRxData+0x58>)
 8000dfa:	795a      	ldrb	r2, [r3, #5]
 8000dfc:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <USBRxData+0x58>)
 8000dfe:	799b      	ldrb	r3, [r3, #6]
 8000e00:	4013      	ands	r3, r2
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <USBRxData+0x58>)
 8000e06:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	73fb      	strb	r3, [r7, #15]
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	683a      	ldr	r2, [r7, #0]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d8e2      	bhi.n	8000ddc <USBRxData+0x10>
	}

}
 8000e16:	bf00      	nop
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc90      	pop	{r4, r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000380 	.word	0x20000380

08000e28 <USBTask>:

void USBTask() {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b0c2      	sub	sp, #264	@ 0x108
 8000e2c:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 8000e2e:	4b22      	ldr	r3, [pc, #136]	@ (8000eb8 <USBTask+0x90>)
 8000e30:	791a      	ldrb	r2, [r3, #4]
 8000e32:	4b21      	ldr	r3, [pc, #132]	@ (8000eb8 <USBTask+0x90>)
 8000e34:	795b      	ldrb	r3, [r3, #5]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	d039      	beq.n	8000eae <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (unerPrtcl_DecodeHeader(&USBRx))
 8000e3a:	481f      	ldr	r0, [pc, #124]	@ (8000eb8 <USBTask+0x90>)
 8000e3c:	f001 faba 	bl	80023b4 <unerPrtcl_DecodeHeader>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 8000e46:	491d      	ldr	r1, [pc, #116]	@ (8000ebc <USBTask+0x94>)
 8000e48:	481b      	ldr	r0, [pc, #108]	@ (8000eb8 <USBTask+0x90>)
 8000e4a:	f000 f839 	bl	8000ec0 <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000e54:	e01d      	b.n	8000e92 <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 8000e56:	4b19      	ldr	r3, [pc, #100]	@ (8000ebc <USBTask+0x94>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4b18      	ldr	r3, [pc, #96]	@ (8000ebc <USBTask+0x94>)
 8000e5c:	7a1b      	ldrb	r3, [r3, #8]
 8000e5e:	1c59      	adds	r1, r3, #1
 8000e60:	b2c8      	uxtb	r0, r1
 8000e62:	4916      	ldr	r1, [pc, #88]	@ (8000ebc <USBTask+0x94>)
 8000e64:	7208      	strb	r0, [r1, #8]
 8000e66:	441a      	add	r2, r3
 8000e68:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000e6c:	7811      	ldrb	r1, [r2, #0]
 8000e6e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000e72:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000e76:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 8000e78:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <USBTask+0x94>)
 8000e7a:	7a1a      	ldrb	r2, [r3, #8]
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ebc <USBTask+0x94>)
 8000e7e:	799b      	ldrb	r3, [r3, #6]
 8000e80:	4013      	ands	r3, r2
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <USBTask+0x94>)
 8000e86:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000e88:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000e92:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <USBTask+0x94>)
 8000e94:	79db      	ldrb	r3, [r3, #7]
 8000e96:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d3db      	bcc.n	8000e56 <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 8000e9e:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <USBTask+0x94>)
 8000ea0:	79db      	ldrb	r3, [r3, #7]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f00b ff9d 	bl	800cde8 <CDC_Transmit_FS>
	}

}
 8000eae:	bf00      	nop
 8000eb0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000380 	.word	0x20000380
 8000ebc:	20000374 	.word	0x20000374

08000ec0 <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	7a12      	ldrb	r2, [r2, #8]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2bf2      	cmp	r3, #242	@ 0xf2
 8000ed8:	d027      	beq.n	8000f2a <decodeCommand+0x6a>
 8000eda:	2bf2      	cmp	r3, #242	@ 0xf2
 8000edc:	f300 809d 	bgt.w	800101a <decodeCommand+0x15a>
 8000ee0:	2bf0      	cmp	r3, #240	@ 0xf0
 8000ee2:	d002      	beq.n	8000eea <decodeCommand+0x2a>
 8000ee4:	2bf1      	cmp	r3, #241	@ 0xf1
 8000ee6:	d010      	beq.n	8000f0a <decodeCommand+0x4a>
 8000ee8:	e097      	b.n	800101a <decodeCommand+0x15a>
	case ALIVE:
		unerPrtcl_PutHeaderOnTx(dataTx, ALIVE, 2);
 8000eea:	2202      	movs	r2, #2
 8000eec:	21f0      	movs	r1, #240	@ 0xf0
 8000eee:	6838      	ldr	r0, [r7, #0]
 8000ef0:	f001 f93e 	bl	8002170 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, ACK);
 8000ef4:	210d      	movs	r1, #13
 8000ef6:	6838      	ldr	r0, [r7, #0]
 8000ef8:	f001 f9e9 	bl	80022ce <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	7a5b      	ldrb	r3, [r3, #9]
 8000f00:	4619      	mov	r1, r3
 8000f02:	6838      	ldr	r0, [r7, #0]
 8000f04:	f001 f9e3 	bl	80022ce <unerPrtcl_PutByteOnTx>
		break;
 8000f08:	e09d      	b.n	8001046 <decodeCommand+0x186>
	case FIRMWARE:
		unerPrtcl_PutHeaderOnTx(dataTx, FIRMWARE, 13);
 8000f0a:	220d      	movs	r2, #13
 8000f0c:	21f1      	movs	r1, #241	@ 0xf1
 8000f0e:	6838      	ldr	r0, [r7, #0]
 8000f10:	f001 f92e 	bl	8002170 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutStrOntx(dataTx, firmware);
 8000f14:	494e      	ldr	r1, [pc, #312]	@ (8001050 <decodeCommand+0x190>)
 8000f16:	6838      	ldr	r0, [r7, #0]
 8000f18:	f001 fa07 	bl	800232a <unerPrtcl_PutStrOntx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	7a5b      	ldrb	r3, [r3, #9]
 8000f20:	4619      	mov	r1, r3
 8000f22:	6838      	ldr	r0, [r7, #0]
 8000f24:	f001 f9d3 	bl	80022ce <unerPrtcl_PutByteOnTx>
		break;
 8000f28:	e08d      	b.n	8001046 <decodeCommand+0x186>
	case GETMPU:
		unerPrtcl_PutHeaderOnTx(dataTx, GETMPU, 13);
 8000f2a:	220d      	movs	r2, #13
 8000f2c:	21f2      	movs	r1, #242	@ 0xf2
 8000f2e:	6838      	ldr	r0, [r7, #0]
 8000f30:	f001 f91e 	bl	8002170 <unerPrtcl_PutHeaderOnTx>
		myWord.ui16[0] = ax_real;
 8000f34:	4b47      	ldr	r3, [pc, #284]	@ (8001054 <decodeCommand+0x194>)
 8000f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	4b46      	ldr	r3, [pc, #280]	@ (8001058 <decodeCommand+0x198>)
 8000f3e:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000f40:	4b45      	ldr	r3, [pc, #276]	@ (8001058 <decodeCommand+0x198>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	6838      	ldr	r0, [r7, #0]
 8000f48:	f001 f9c1 	bl	80022ce <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000f4c:	4b42      	ldr	r3, [pc, #264]	@ (8001058 <decodeCommand+0x198>)
 8000f4e:	785b      	ldrb	r3, [r3, #1]
 8000f50:	4619      	mov	r1, r3
 8000f52:	6838      	ldr	r0, [r7, #0]
 8000f54:	f001 f9bb 	bl	80022ce <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = ay_real;
 8000f58:	4b40      	ldr	r3, [pc, #256]	@ (800105c <decodeCommand+0x19c>)
 8000f5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b3d      	ldr	r3, [pc, #244]	@ (8001058 <decodeCommand+0x198>)
 8000f62:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000f64:	4b3c      	ldr	r3, [pc, #240]	@ (8001058 <decodeCommand+0x198>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	6838      	ldr	r0, [r7, #0]
 8000f6c:	f001 f9af 	bl	80022ce <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000f70:	4b39      	ldr	r3, [pc, #228]	@ (8001058 <decodeCommand+0x198>)
 8000f72:	785b      	ldrb	r3, [r3, #1]
 8000f74:	4619      	mov	r1, r3
 8000f76:	6838      	ldr	r0, [r7, #0]
 8000f78:	f001 f9a9 	bl	80022ce <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = az_real;
 8000f7c:	4b38      	ldr	r3, [pc, #224]	@ (8001060 <decodeCommand+0x1a0>)
 8000f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b34      	ldr	r3, [pc, #208]	@ (8001058 <decodeCommand+0x198>)
 8000f86:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000f88:	4b33      	ldr	r3, [pc, #204]	@ (8001058 <decodeCommand+0x198>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	6838      	ldr	r0, [r7, #0]
 8000f90:	f001 f99d 	bl	80022ce <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000f94:	4b30      	ldr	r3, [pc, #192]	@ (8001058 <decodeCommand+0x198>)
 8000f96:	785b      	ldrb	r3, [r3, #1]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	6838      	ldr	r0, [r7, #0]
 8000f9c:	f001 f997 	bl	80022ce <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = gx_real;
 8000fa0:	4b30      	ldr	r3, [pc, #192]	@ (8001064 <decodeCommand+0x1a4>)
 8000fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8001058 <decodeCommand+0x198>)
 8000faa:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000fac:	4b2a      	ldr	r3, [pc, #168]	@ (8001058 <decodeCommand+0x198>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	6838      	ldr	r0, [r7, #0]
 8000fb4:	f001 f98b 	bl	80022ce <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000fb8:	4b27      	ldr	r3, [pc, #156]	@ (8001058 <decodeCommand+0x198>)
 8000fba:	785b      	ldrb	r3, [r3, #1]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6838      	ldr	r0, [r7, #0]
 8000fc0:	f001 f985 	bl	80022ce <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = gy_real;
 8000fc4:	4b28      	ldr	r3, [pc, #160]	@ (8001068 <decodeCommand+0x1a8>)
 8000fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	4b22      	ldr	r3, [pc, #136]	@ (8001058 <decodeCommand+0x198>)
 8000fce:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000fd0:	4b21      	ldr	r3, [pc, #132]	@ (8001058 <decodeCommand+0x198>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	6838      	ldr	r0, [r7, #0]
 8000fd8:	f001 f979 	bl	80022ce <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001058 <decodeCommand+0x198>)
 8000fde:	785b      	ldrb	r3, [r3, #1]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	6838      	ldr	r0, [r7, #0]
 8000fe4:	f001 f973 	bl	80022ce <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = gz_real;
 8000fe8:	4b20      	ldr	r3, [pc, #128]	@ (800106c <decodeCommand+0x1ac>)
 8000fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	4b19      	ldr	r3, [pc, #100]	@ (8001058 <decodeCommand+0x198>)
 8000ff2:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000ff4:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <decodeCommand+0x198>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6838      	ldr	r0, [r7, #0]
 8000ffc:	f001 f967 	bl	80022ce <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001000:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <decodeCommand+0x198>)
 8001002:	785b      	ldrb	r3, [r3, #1]
 8001004:	4619      	mov	r1, r3
 8001006:	6838      	ldr	r0, [r7, #0]
 8001008:	f001 f961 	bl	80022ce <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	7a5b      	ldrb	r3, [r3, #9]
 8001010:	4619      	mov	r1, r3
 8001012:	6838      	ldr	r0, [r7, #0]
 8001014:	f001 f95b 	bl	80022ce <unerPrtcl_PutByteOnTx>
		break;
 8001018:	e015      	b.n	8001046 <decodeCommand+0x186>
	default:
		unerPrtcl_PutHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	7a12      	ldrb	r2, [r2, #8]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2202      	movs	r2, #2
 8001028:	4619      	mov	r1, r3
 800102a:	6838      	ldr	r0, [r7, #0]
 800102c:	f001 f8a0 	bl	8002170 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, UNKNOWN);
 8001030:	21ff      	movs	r1, #255	@ 0xff
 8001032:	6838      	ldr	r0, [r7, #0]
 8001034:	f001 f94b 	bl	80022ce <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	7a5b      	ldrb	r3, [r3, #9]
 800103c:	4619      	mov	r1, r3
 800103e:	6838      	ldr	r0, [r7, #0]
 8001040:	f001 f945 	bl	80022ce <unerPrtcl_PutByteOnTx>
		break;
 8001044:	bf00      	nop
	}
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	0800d764 	.word	0x0800d764
 8001054:	20000594 	.word	0x20000594
 8001058:	2000058c 	.word	0x2000058c
 800105c:	20000596 	.word	0x20000596
 8001060:	20000598 	.word	0x20000598
 8001064:	2000059a 	.word	0x2000059a
 8001068:	2000059c 	.word	0x2000059c
 800106c:	2000059e 	.word	0x2000059e

08001070 <do10ms>:

void do10ms() {
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	if(IS10MS){
 8001074:	4b10      	ldr	r3, [pc, #64]	@ (80010b8 <do10ms+0x48>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d017      	beq.n	80010b2 <do10ms+0x42>
		IS10MS=FALSE;
 8001082:	4a0d      	ldr	r2, [pc, #52]	@ (80010b8 <do10ms+0x48>)
 8001084:	7813      	ldrb	r3, [r2, #0]
 8001086:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800108a:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <do10ms+0x4c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	3b01      	subs	r3, #1
 8001092:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <do10ms+0x4c>)
 8001094:	6013      	str	r3, [r2, #0]
		if (tmo100ms == 0) {
 8001096:	4b09      	ldr	r3, [pc, #36]	@ (80010bc <do10ms+0x4c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d109      	bne.n	80010b2 <do10ms+0x42>
			tmo100ms = 10;
 800109e:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <do10ms+0x4c>)
 80010a0:	220a      	movs	r2, #10
 80010a2:	601a      	str	r2, [r3, #0]
			IS100MS=TRUE;
 80010a4:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <do10ms+0x48>)
 80010a6:	7813      	ldrb	r3, [r2, #0]
 80010a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ac:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 80010ae:	f000 f807 	bl	80010c0 <heartBeatTask>
		}
	}
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000590 	.word	0x20000590
 80010bc:	20000028 	.word	0x20000028

080010c0 <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <heartBeatTask+0x44>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001108 <heartBeatTask+0x48>)
 80010cc:	7812      	ldrb	r2, [r2, #0]
 80010ce:	4611      	mov	r1, r2
 80010d0:	2201      	movs	r2, #1
 80010d2:	408a      	lsls	r2, r1
 80010d4:	4013      	ands	r3, r2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d004      	beq.n	80010e4 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 80010da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010de:	480b      	ldr	r0, [pc, #44]	@ (800110c <heartBeatTask+0x4c>)
 80010e0:	f002 fed9 	bl	8003e96 <HAL_GPIO_TogglePin>

	times++;
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <heartBeatTask+0x48>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <heartBeatTask+0x48>)
 80010ee:	701a      	strb	r2, [r3, #0]
	times &= 31;
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <heartBeatTask+0x48>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	f003 031f 	and.w	r3, r3, #31
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <heartBeatTask+0x48>)
 80010fc:	701a      	strb	r2, [r3, #0]
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000000 	.word	0x20000000
 8001108:	200005a0 	.word	0x200005a0
 800110c:	40020800 	.word	0x40020800

08001110 <mpuTask>:
	    ssd1306_WriteString(data, Font_6x8, Black);
	}
}


void mpuTask(){
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	if (IS100MS) {
 8001114:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <mpuTask+0x28>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d008      	beq.n	8001134 <mpuTask+0x24>
		IS100MS = FALSE;
 8001122:	4a05      	ldr	r2, [pc, #20]	@ (8001138 <mpuTask+0x28>)
 8001124:	7813      	ldrb	r3, [r2, #0]
 8001126:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800112a:	7013      	strb	r3, [r2, #0]
		mpu6050_Read_Accel();
 800112c:	f000 fae4 	bl	80016f8 <mpu6050_Read_Accel>
		mpu6050_Read_Gyro();
 8001130:	f000 fbce 	bl	80018d0 <mpu6050_Read_Gyro>
	}
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000590 	.word	0x20000590

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001140:	f001 fa98 	bl	8002674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001144:	f000 f84c 	bl	80011e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001148:	f000 fa38 	bl	80015bc <MX_GPIO_Init>
  MX_DMA_Init();
 800114c:	f000 f9f8 	bl	8001540 <MX_DMA_Init>
  MX_ADC1_Init();
 8001150:	f000 f8ae 	bl	80012b0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001154:	f000 f960 	bl	8001418 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001158:	f000 f98c 	bl	8001474 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 800115c:	f00b fd2a 	bl	800cbb4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 8001160:	4814      	ldr	r0, [pc, #80]	@ (80011b4 <main+0x78>)
 8001162:	f00b fe79 	bl	800ce58 <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1); //timer
 8001166:	4814      	ldr	r0, [pc, #80]	@ (80011b8 <main+0x7c>)
 8001168:	f007 fd2e 	bl	8008bc8 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001172:	4812      	ldr	r0, [pc, #72]	@ (80011bc <main+0x80>)
 8001174:	f002 fe76 	bl	8003e64 <HAL_GPIO_WritePin>

	//Display
	ssd1306_ADC_ConfCpltCallback(&ssd1306_TxCplt);
 8001178:	4811      	ldr	r0, [pc, #68]	@ (80011c0 <main+0x84>)
 800117a:	f000 fcbb 	bl	8001af4 <ssd1306_ADC_ConfCpltCallback>
	ssd1306_Attach_MemWrite(HAL_I2C_Mem_Write);
 800117e:	4811      	ldr	r0, [pc, #68]	@ (80011c4 <main+0x88>)
 8001180:	f000 fca8 	bl	8001ad4 <ssd1306_Attach_MemWrite>
	ssd1306_Attach_MemWriteDMA(HAL_I2C_Mem_Write_DMA);
 8001184:	4810      	ldr	r0, [pc, #64]	@ (80011c8 <main+0x8c>)
 8001186:	f000 fc95 	bl	8001ab4 <ssd1306_Attach_MemWriteDMA>
	ssd1306_Init();
 800118a:	f000 fcc3 	bl	8001b14 <ssd1306_Init>
	//mpu6050
	mpu6050_Init();
 800118e:	f000 fa7b 	bl	8001688 <mpu6050_Init>

	//Inicializacion de protocolo
	unerPrtcl_Init(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <main+0x90>)
 8001194:	4a0e      	ldr	r2, [pc, #56]	@ (80011d0 <main+0x94>)
 8001196:	490f      	ldr	r1, [pc, #60]	@ (80011d4 <main+0x98>)
 8001198:	480f      	ldr	r0, [pc, #60]	@ (80011d8 <main+0x9c>)
 800119a:	f001 fa09 	bl	80025b0 <unerPrtcl_Init>

	//Variables
	ALLFLAGS = RESET;
 800119e:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <main+0xa0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		do10ms();
 80011a4:	f7ff ff64 	bl	8001070 <do10ms>
		USBTask();
 80011a8:	f7ff fe3e 	bl	8000e28 <USBTask>

		mpuTask();
 80011ac:	f7ff ffb0 	bl	8001110 <mpuTask>
		do10ms();
 80011b0:	bf00      	nop
 80011b2:	e7f7      	b.n	80011a4 <main+0x68>
 80011b4:	08000dcd 	.word	0x08000dcd
 80011b8:	20000308 	.word	0x20000308
 80011bc:	40020800 	.word	0x40020800
 80011c0:	20000591 	.word	0x20000591
 80011c4:	08004181 	.word	0x08004181
 80011c8:	080047d9 	.word	0x080047d9
 80011cc:	2000038c 	.word	0x2000038c
 80011d0:	2000048c 	.word	0x2000048c
 80011d4:	20000374 	.word	0x20000374
 80011d8:	20000380 	.word	0x20000380
 80011dc:	20000590 	.word	0x20000590

080011e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b094      	sub	sp, #80	@ 0x50
 80011e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011e6:	f107 0320 	add.w	r3, r7, #32
 80011ea:	2230      	movs	r2, #48	@ 0x30
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f00c fa5c 	bl	800d6ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	4b27      	ldr	r3, [pc, #156]	@ (80012a8 <SystemClock_Config+0xc8>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120c:	4a26      	ldr	r2, [pc, #152]	@ (80012a8 <SystemClock_Config+0xc8>)
 800120e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001212:	6413      	str	r3, [r2, #64]	@ 0x40
 8001214:	4b24      	ldr	r3, [pc, #144]	@ (80012a8 <SystemClock_Config+0xc8>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001220:	2300      	movs	r3, #0
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <SystemClock_Config+0xcc>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a20      	ldr	r2, [pc, #128]	@ (80012ac <SystemClock_Config+0xcc>)
 800122a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <SystemClock_Config+0xcc>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800123c:	2301      	movs	r3, #1
 800123e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001240:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001244:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001246:	2302      	movs	r3, #2
 8001248:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800124a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800124e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001250:	2319      	movs	r3, #25
 8001252:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001254:	23c0      	movs	r3, #192	@ 0xc0
 8001256:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001258:	2302      	movs	r3, #2
 800125a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800125c:	2304      	movs	r3, #4
 800125e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001260:	f107 0320 	add.w	r3, r7, #32
 8001264:	4618      	mov	r0, r3
 8001266:	f007 f81b 	bl	80082a0 <HAL_RCC_OscConfig>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001270:	f000 fa04 	bl	800167c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001274:	230f      	movs	r3, #15
 8001276:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001278:	2302      	movs	r3, #2
 800127a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001280:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001284:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	2103      	movs	r1, #3
 8001290:	4618      	mov	r0, r3
 8001292:	f007 fa7d 	bl	8008790 <HAL_RCC_ClockConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800129c:	f000 f9ee 	bl	800167c <Error_Handler>
  }
}
 80012a0:	bf00      	nop
 80012a2:	3750      	adds	r7, #80	@ 0x50
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40007000 	.word	0x40007000

080012b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012b6:	463b      	mov	r3, r7
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012c2:	4b52      	ldr	r3, [pc, #328]	@ (800140c <MX_ADC1_Init+0x15c>)
 80012c4:	4a52      	ldr	r2, [pc, #328]	@ (8001410 <MX_ADC1_Init+0x160>)
 80012c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012c8:	4b50      	ldr	r3, [pc, #320]	@ (800140c <MX_ADC1_Init+0x15c>)
 80012ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80012ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012d0:	4b4e      	ldr	r3, [pc, #312]	@ (800140c <MX_ADC1_Init+0x15c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012d6:	4b4d      	ldr	r3, [pc, #308]	@ (800140c <MX_ADC1_Init+0x15c>)
 80012d8:	2201      	movs	r2, #1
 80012da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012dc:	4b4b      	ldr	r3, [pc, #300]	@ (800140c <MX_ADC1_Init+0x15c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012e2:	4b4a      	ldr	r3, [pc, #296]	@ (800140c <MX_ADC1_Init+0x15c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ea:	4b48      	ldr	r3, [pc, #288]	@ (800140c <MX_ADC1_Init+0x15c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f0:	4b46      	ldr	r3, [pc, #280]	@ (800140c <MX_ADC1_Init+0x15c>)
 80012f2:	4a48      	ldr	r2, [pc, #288]	@ (8001414 <MX_ADC1_Init+0x164>)
 80012f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012f6:	4b45      	ldr	r3, [pc, #276]	@ (800140c <MX_ADC1_Init+0x15c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80012fc:	4b43      	ldr	r3, [pc, #268]	@ (800140c <MX_ADC1_Init+0x15c>)
 80012fe:	2208      	movs	r2, #8
 8001300:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001302:	4b42      	ldr	r3, [pc, #264]	@ (800140c <MX_ADC1_Init+0x15c>)
 8001304:	2201      	movs	r2, #1
 8001306:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800130a:	4b40      	ldr	r3, [pc, #256]	@ (800140c <MX_ADC1_Init+0x15c>)
 800130c:	2201      	movs	r2, #1
 800130e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001310:	483e      	ldr	r0, [pc, #248]	@ (800140c <MX_ADC1_Init+0x15c>)
 8001312:	f001 fa45 	bl	80027a0 <HAL_ADC_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800131c:	f000 f9ae 	bl	800167c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001320:	2300      	movs	r3, #0
 8001322:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001324:	2301      	movs	r3, #1
 8001326:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132c:	463b      	mov	r3, r7
 800132e:	4619      	mov	r1, r3
 8001330:	4836      	ldr	r0, [pc, #216]	@ (800140c <MX_ADC1_Init+0x15c>)
 8001332:	f001 fc9b 	bl	8002c6c <HAL_ADC_ConfigChannel>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800133c:	f000 f99e 	bl	800167c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001340:	2301      	movs	r3, #1
 8001342:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001344:	2302      	movs	r3, #2
 8001346:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	482f      	ldr	r0, [pc, #188]	@ (800140c <MX_ADC1_Init+0x15c>)
 800134e:	f001 fc8d 	bl	8002c6c <HAL_ADC_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001358:	f000 f990 	bl	800167c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800135c:	2302      	movs	r3, #2
 800135e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001360:	2303      	movs	r3, #3
 8001362:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	4619      	mov	r1, r3
 8001368:	4828      	ldr	r0, [pc, #160]	@ (800140c <MX_ADC1_Init+0x15c>)
 800136a:	f001 fc7f 	bl	8002c6c <HAL_ADC_ConfigChannel>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001374:	f000 f982 	bl	800167c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001378:	2303      	movs	r3, #3
 800137a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800137c:	2304      	movs	r3, #4
 800137e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4821      	ldr	r0, [pc, #132]	@ (800140c <MX_ADC1_Init+0x15c>)
 8001386:	f001 fc71 	bl	8002c6c <HAL_ADC_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001390:	f000 f974 	bl	800167c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001394:	2304      	movs	r3, #4
 8001396:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001398:	2305      	movs	r3, #5
 800139a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139c:	463b      	mov	r3, r7
 800139e:	4619      	mov	r1, r3
 80013a0:	481a      	ldr	r0, [pc, #104]	@ (800140c <MX_ADC1_Init+0x15c>)
 80013a2:	f001 fc63 	bl	8002c6c <HAL_ADC_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80013ac:	f000 f966 	bl	800167c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80013b0:	2305      	movs	r3, #5
 80013b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80013b4:	2306      	movs	r3, #6
 80013b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	4619      	mov	r1, r3
 80013bc:	4813      	ldr	r0, [pc, #76]	@ (800140c <MX_ADC1_Init+0x15c>)
 80013be:	f001 fc55 	bl	8002c6c <HAL_ADC_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80013c8:	f000 f958 	bl	800167c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80013cc:	2306      	movs	r3, #6
 80013ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80013d0:	2307      	movs	r3, #7
 80013d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d4:	463b      	mov	r3, r7
 80013d6:	4619      	mov	r1, r3
 80013d8:	480c      	ldr	r0, [pc, #48]	@ (800140c <MX_ADC1_Init+0x15c>)
 80013da:	f001 fc47 	bl	8002c6c <HAL_ADC_ConfigChannel>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80013e4:	f000 f94a 	bl	800167c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013e8:	2307      	movs	r3, #7
 80013ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80013ec:	2308      	movs	r3, #8
 80013ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f0:	463b      	mov	r3, r7
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_ADC1_Init+0x15c>)
 80013f6:	f001 fc39 	bl	8002c6c <HAL_ADC_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001400:	f000 f93c 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2000014c 	.word	0x2000014c
 8001410:	40012000 	.word	0x40012000
 8001414:	0f000001 	.word	0x0f000001

08001418 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800141c:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <MX_I2C1_Init+0x50>)
 800141e:	4a13      	ldr	r2, [pc, #76]	@ (800146c <MX_I2C1_Init+0x54>)
 8001420:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001422:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <MX_I2C1_Init+0x50>)
 8001424:	4a12      	ldr	r2, [pc, #72]	@ (8001470 <MX_I2C1_Init+0x58>)
 8001426:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001428:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <MX_I2C1_Init+0x50>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800142e:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <MX_I2C1_Init+0x50>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001434:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <MX_I2C1_Init+0x50>)
 8001436:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800143a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800143c:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <MX_I2C1_Init+0x50>)
 800143e:	2200      	movs	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001442:	4b09      	ldr	r3, [pc, #36]	@ (8001468 <MX_I2C1_Init+0x50>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001448:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <MX_I2C1_Init+0x50>)
 800144a:	2200      	movs	r2, #0
 800144c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800144e:	4b06      	ldr	r3, [pc, #24]	@ (8001468 <MX_I2C1_Init+0x50>)
 8001450:	2200      	movs	r2, #0
 8001452:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001454:	4804      	ldr	r0, [pc, #16]	@ (8001468 <MX_I2C1_Init+0x50>)
 8001456:	f002 fd39 	bl	8003ecc <HAL_I2C_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001460:	f000 f90c 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}
 8001468:	200001f4 	.word	0x200001f4
 800146c:	40005400 	.word	0x40005400
 8001470:	00061a80 	.word	0x00061a80

08001474 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08c      	sub	sp, #48	@ 0x30
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147a:	f107 0320 	add.w	r3, r7, #32
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001488:	f107 030c 	add.w	r3, r7, #12
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014a0:	4b25      	ldr	r3, [pc, #148]	@ (8001538 <MX_TIM1_Init+0xc4>)
 80014a2:	4a26      	ldr	r2, [pc, #152]	@ (800153c <MX_TIM1_Init+0xc8>)
 80014a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 80014a6:	4b24      	ldr	r3, [pc, #144]	@ (8001538 <MX_TIM1_Init+0xc4>)
 80014a8:	225f      	movs	r2, #95	@ 0x5f
 80014aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ac:	4b22      	ldr	r3, [pc, #136]	@ (8001538 <MX_TIM1_Init+0xc4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 80014b2:	4b21      	ldr	r3, [pc, #132]	@ (8001538 <MX_TIM1_Init+0xc4>)
 80014b4:	22f9      	movs	r2, #249	@ 0xf9
 80014b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001538 <MX_TIM1_Init+0xc4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014be:	4b1e      	ldr	r3, [pc, #120]	@ (8001538 <MX_TIM1_Init+0xc4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001538 <MX_TIM1_Init+0xc4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014ca:	481b      	ldr	r0, [pc, #108]	@ (8001538 <MX_TIM1_Init+0xc4>)
 80014cc:	f007 fb2c 	bl	8008b28 <HAL_TIM_Base_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80014d6:	f000 f8d1 	bl	800167c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014de:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014e0:	f107 0320 	add.w	r3, r7, #32
 80014e4:	4619      	mov	r1, r3
 80014e6:	4814      	ldr	r0, [pc, #80]	@ (8001538 <MX_TIM1_Init+0xc4>)
 80014e8:	f007 fcc0 	bl	8008e6c <HAL_TIM_ConfigClockSource>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80014f2:	f000 f8c3 	bl	800167c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	4619      	mov	r1, r3
 8001504:	480c      	ldr	r0, [pc, #48]	@ (8001538 <MX_TIM1_Init+0xc4>)
 8001506:	f007 fd78 	bl	8008ffa <HAL_TIM_SlaveConfigSynchro>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8001510:	f000 f8b4 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	@ (8001538 <MX_TIM1_Init+0xc4>)
 8001522:	f007 ff87 	bl	8009434 <HAL_TIMEx_MasterConfigSynchronization>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800152c:	f000 f8a6 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	3730      	adds	r7, #48	@ 0x30
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000308 	.word	0x20000308
 800153c:	40010000 	.word	0x40010000

08001540 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	4b1b      	ldr	r3, [pc, #108]	@ (80015b8 <MX_DMA_Init+0x78>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	4a1a      	ldr	r2, [pc, #104]	@ (80015b8 <MX_DMA_Init+0x78>)
 8001550:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001554:	6313      	str	r3, [r2, #48]	@ 0x30
 8001556:	4b18      	ldr	r3, [pc, #96]	@ (80015b8 <MX_DMA_Init+0x78>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <MX_DMA_Init+0x78>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a13      	ldr	r2, [pc, #76]	@ (80015b8 <MX_DMA_Init+0x78>)
 800156c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <MX_DMA_Init+0x78>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	200b      	movs	r0, #11
 8001584:	f001 ff07 	bl	8003396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001588:	200b      	movs	r0, #11
 800158a:	f001 ff20 	bl	80033ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	200c      	movs	r0, #12
 8001594:	f001 feff 	bl	8003396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001598:	200c      	movs	r0, #12
 800159a:	f001 ff18 	bl	80033ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	2038      	movs	r0, #56	@ 0x38
 80015a4:	f001 fef7 	bl	8003396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015a8:	2038      	movs	r0, #56	@ 0x38
 80015aa:	f001 ff10 	bl	80033ce <HAL_NVIC_EnableIRQ>

}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800

080015bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	@ 0x28
 80015c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	4b27      	ldr	r3, [pc, #156]	@ (8001674 <MX_GPIO_Init+0xb8>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	4a26      	ldr	r2, [pc, #152]	@ (8001674 <MX_GPIO_Init+0xb8>)
 80015dc:	f043 0304 	orr.w	r3, r3, #4
 80015e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015e2:	4b24      	ldr	r3, [pc, #144]	@ (8001674 <MX_GPIO_Init+0xb8>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <MX_GPIO_Init+0xb8>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001674 <MX_GPIO_Init+0xb8>)
 80015f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001674 <MX_GPIO_Init+0xb8>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	60bb      	str	r3, [r7, #8]
 800160e:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <MX_GPIO_Init+0xb8>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a18      	ldr	r2, [pc, #96]	@ (8001674 <MX_GPIO_Init+0xb8>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b16      	ldr	r3, [pc, #88]	@ (8001674 <MX_GPIO_Init+0xb8>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
 800162a:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <MX_GPIO_Init+0xb8>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a11      	ldr	r2, [pc, #68]	@ (8001674 <MX_GPIO_Init+0xb8>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <MX_GPIO_Init+0xb8>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001648:	480b      	ldr	r0, [pc, #44]	@ (8001678 <MX_GPIO_Init+0xbc>)
 800164a:	f002 fc0b 	bl	8003e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800164e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	4804      	ldr	r0, [pc, #16]	@ (8001678 <MX_GPIO_Init+0xbc>)
 8001668:	f002 fa78 	bl	8003b5c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800166c:	bf00      	nop
 800166e:	3728      	adds	r7, #40	@ 0x28
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40023800 	.word	0x40023800
 8001678:	40020800 	.word	0x40020800

0800167c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001680:	b672      	cpsid	i
}
 8001682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <Error_Handler+0x8>

08001688 <mpu6050_Init>:

// Variables RAW leídas directamente del sensor (int16_t = complemento a dos)
int32_t ax, ay, az, gx, gy, gz;

void mpu6050_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af04      	add	r7, sp, #16
    uint8_t data;

    // Salir del modo de bajo consumo (modo sleep)
    // Escritura en el registro PWR_MGMT_1 (0x6B)
    data = 0x00;
 800168e:	2300      	movs	r3, #0
 8001690:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
 8001696:	9302      	str	r3, [sp, #8]
 8001698:	2301      	movs	r3, #1
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	1dfb      	adds	r3, r7, #7
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2301      	movs	r3, #1
 80016a2:	226b      	movs	r2, #107	@ 0x6b
 80016a4:	21d0      	movs	r1, #208	@ 0xd0
 80016a6:	4812      	ldr	r0, [pc, #72]	@ (80016f0 <mpu6050_Init+0x68>)
 80016a8:	f002 fd6a 	bl	8004180 <HAL_I2C_Mem_Write>

    // Configurar acelerómetro con rango ±2g (registro ACCEL_CONFIG = 0x1C, valor 0x00)
    data = 0x00;
 80016ac:	2300      	movs	r3, #0
 80016ae:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
 80016b0:	f04f 33ff 	mov.w	r3, #4294967295
 80016b4:	9302      	str	r3, [sp, #8]
 80016b6:	2301      	movs	r3, #1
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	1dfb      	adds	r3, r7, #7
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2301      	movs	r3, #1
 80016c0:	221c      	movs	r2, #28
 80016c2:	21d0      	movs	r1, #208	@ 0xd0
 80016c4:	480a      	ldr	r0, [pc, #40]	@ (80016f0 <mpu6050_Init+0x68>)
 80016c6:	f002 fd5b 	bl	8004180 <HAL_I2C_Mem_Write>

    // Configurar giroscopio con rango ±250°/s (registro GYRO_CONFIG = 0x1B, valor 0x00)
    data = 0x00;
 80016ca:	2300      	movs	r3, #0
 80016cc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	2301      	movs	r3, #1
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	1dfb      	adds	r3, r7, #7
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2301      	movs	r3, #1
 80016de:	221b      	movs	r2, #27
 80016e0:	21d0      	movs	r1, #208	@ 0xd0
 80016e2:	4803      	ldr	r0, [pc, #12]	@ (80016f0 <mpu6050_Init+0x68>)
 80016e4:	f002 fd4c 	bl	8004180 <HAL_I2C_Mem_Write>
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200001f4 	.word	0x200001f4
 80016f4:	00000000 	.word	0x00000000

080016f8 <mpu6050_Read_Accel>:

void mpu6050_Read_Accel(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af04      	add	r7, sp, #16
    uint8_t Rec_Data[6];

    // Leer 6 bytes desde ACCEL_XOUT_H (registro 0x3B)
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, HAL_MAX_DELAY);
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	9302      	str	r3, [sp, #8]
 8001704:	2306      	movs	r3, #6
 8001706:	9301      	str	r3, [sp, #4]
 8001708:	463b      	mov	r3, r7
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	2301      	movs	r3, #1
 800170e:	223b      	movs	r2, #59	@ 0x3b
 8001710:	21d0      	movs	r1, #208	@ 0xd0
 8001712:	4865      	ldr	r0, [pc, #404]	@ (80018a8 <mpu6050_Read_Accel+0x1b0>)
 8001714:	f002 fe2e 	bl	8004374 <HAL_I2C_Mem_Read>

    // Combinar bytes altos y bajos en variables de 16 bits con signo
    ax = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001718:	783b      	ldrb	r3, [r7, #0]
 800171a:	b21b      	sxth	r3, r3
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	b21a      	sxth	r2, r3
 8001720:	787b      	ldrb	r3, [r7, #1]
 8001722:	b21b      	sxth	r3, r3
 8001724:	4313      	orrs	r3, r2
 8001726:	b21b      	sxth	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	4b60      	ldr	r3, [pc, #384]	@ (80018ac <mpu6050_Read_Accel+0x1b4>)
 800172c:	601a      	str	r2, [r3, #0]
    ay = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800172e:	78bb      	ldrb	r3, [r7, #2]
 8001730:	b21b      	sxth	r3, r3
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	b21a      	sxth	r2, r3
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	b21b      	sxth	r3, r3
 800173a:	4313      	orrs	r3, r2
 800173c:	b21b      	sxth	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	4b5b      	ldr	r3, [pc, #364]	@ (80018b0 <mpu6050_Read_Accel+0x1b8>)
 8001742:	601a      	str	r2, [r3, #0]
    az = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001744:	793b      	ldrb	r3, [r7, #4]
 8001746:	b21b      	sxth	r3, r3
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	b21a      	sxth	r2, r3
 800174c:	797b      	ldrb	r3, [r7, #5]
 800174e:	b21b      	sxth	r3, r3
 8001750:	4313      	orrs	r3, r2
 8001752:	b21b      	sxth	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	4b57      	ldr	r3, [pc, #348]	@ (80018b4 <mpu6050_Read_Accel+0x1bc>)
 8001758:	601a      	str	r2, [r3, #0]

    // Aplicar offset y escalar a m/s² (con 2 decimales fijos)
    if (abs(ax) <= OFFSET_AX)
 800175a:	4b54      	ldr	r3, [pc, #336]	@ (80018ac <mpu6050_Read_Accel+0x1b4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8001762:	db08      	blt.n	8001776 <mpu6050_Read_Accel+0x7e>
 8001764:	4b51      	ldr	r3, [pc, #324]	@ (80018ac <mpu6050_Read_Accel+0x1b4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 800176c:	dc03      	bgt.n	8001776 <mpu6050_Read_Accel+0x7e>
        ax_real = 0;
 800176e:	4b52      	ldr	r3, [pc, #328]	@ (80018b8 <mpu6050_Read_Accel+0x1c0>)
 8001770:	2200      	movs	r2, #0
 8001772:	801a      	strh	r2, [r3, #0]
 8001774:	e025      	b.n	80017c2 <mpu6050_Read_Accel+0xca>
    else
        ax_real = (ax / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 8001776:	4b4d      	ldr	r3, [pc, #308]	@ (80018ac <mpu6050_Read_Accel+0x1b4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	ee07 3a90 	vmov	s15, r3
 800177e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001782:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80018bc <mpu6050_Read_Accel+0x1c4>
 8001786:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800178a:	ee16 0a90 	vmov	r0, s13
 800178e:	f7fe fe87 	bl	80004a0 <__aeabi_f2d>
 8001792:	a343      	add	r3, pc, #268	@ (adr r3, 80018a0 <mpu6050_Read_Accel+0x1a8>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7fe feda 	bl	8000550 <__aeabi_dmul>
 800179c:	4602      	mov	r2, r0
 800179e:	460b      	mov	r3, r1
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b45      	ldr	r3, [pc, #276]	@ (80018c0 <mpu6050_Read_Accel+0x1c8>)
 80017aa:	f7fe fed1 	bl	8000550 <__aeabi_dmul>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4610      	mov	r0, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	f7ff f8dd 	bl	8000974 <__aeabi_d2iz>
 80017ba:	4603      	mov	r3, r0
 80017bc:	b21a      	sxth	r2, r3
 80017be:	4b3e      	ldr	r3, [pc, #248]	@ (80018b8 <mpu6050_Read_Accel+0x1c0>)
 80017c0:	801a      	strh	r2, [r3, #0]

    if (abs(ay) <= OFFSET_AY)
 80017c2:	4b3b      	ldr	r3, [pc, #236]	@ (80018b0 <mpu6050_Read_Accel+0x1b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 80017ca:	db08      	blt.n	80017de <mpu6050_Read_Accel+0xe6>
 80017cc:	4b38      	ldr	r3, [pc, #224]	@ (80018b0 <mpu6050_Read_Accel+0x1b8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 80017d4:	dc03      	bgt.n	80017de <mpu6050_Read_Accel+0xe6>
        ay_real = 0;
 80017d6:	4b3b      	ldr	r3, [pc, #236]	@ (80018c4 <mpu6050_Read_Accel+0x1cc>)
 80017d8:	2200      	movs	r2, #0
 80017da:	801a      	strh	r2, [r3, #0]
 80017dc:	e025      	b.n	800182a <mpu6050_Read_Accel+0x132>
    else
        ay_real = (ay / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 80017de:	4b34      	ldr	r3, [pc, #208]	@ (80018b0 <mpu6050_Read_Accel+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ea:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80018bc <mpu6050_Read_Accel+0x1c4>
 80017ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017f2:	ee16 0a90 	vmov	r0, s13
 80017f6:	f7fe fe53 	bl	80004a0 <__aeabi_f2d>
 80017fa:	a329      	add	r3, pc, #164	@ (adr r3, 80018a0 <mpu6050_Read_Accel+0x1a8>)
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	f7fe fea6 	bl	8000550 <__aeabi_dmul>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4610      	mov	r0, r2
 800180a:	4619      	mov	r1, r3
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	4b2b      	ldr	r3, [pc, #172]	@ (80018c0 <mpu6050_Read_Accel+0x1c8>)
 8001812:	f7fe fe9d 	bl	8000550 <__aeabi_dmul>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	f7ff f8a9 	bl	8000974 <__aeabi_d2iz>
 8001822:	4603      	mov	r3, r0
 8001824:	b21a      	sxth	r2, r3
 8001826:	4b27      	ldr	r3, [pc, #156]	@ (80018c4 <mpu6050_Read_Accel+0x1cc>)
 8001828:	801a      	strh	r2, [r3, #0]

    if (abs(az) <= OFFSET_AZ)
 800182a:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <mpu6050_Read_Accel+0x1bc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a26      	ldr	r2, [pc, #152]	@ (80018c8 <mpu6050_Read_Accel+0x1d0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	db0a      	blt.n	800184a <mpu6050_Read_Accel+0x152>
 8001834:	4b1f      	ldr	r3, [pc, #124]	@ (80018b4 <mpu6050_Read_Accel+0x1bc>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800183c:	4293      	cmp	r3, r2
 800183e:	dc04      	bgt.n	800184a <mpu6050_Read_Accel+0x152>
        az_real = 9.81 * MULTIPLICADORFLOAT;  // en reposo debería medir ~1g hacia Z
 8001840:	4b22      	ldr	r3, [pc, #136]	@ (80018cc <mpu6050_Read_Accel+0x1d4>)
 8001842:	f240 32d5 	movw	r2, #981	@ 0x3d5
 8001846:	801a      	strh	r2, [r3, #0]
 8001848:	e026      	b.n	8001898 <mpu6050_Read_Accel+0x1a0>
    else
        az_real = (az / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 800184a:	4b1a      	ldr	r3, [pc, #104]	@ (80018b4 <mpu6050_Read_Accel+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001856:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80018bc <mpu6050_Read_Accel+0x1c4>
 800185a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800185e:	ee16 0a90 	vmov	r0, s13
 8001862:	f7fe fe1d 	bl	80004a0 <__aeabi_f2d>
 8001866:	a30e      	add	r3, pc, #56	@ (adr r3, 80018a0 <mpu6050_Read_Accel+0x1a8>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe fe70 	bl	8000550 <__aeabi_dmul>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <mpu6050_Read_Accel+0x1c8>)
 800187e:	f7fe fe67 	bl	8000550 <__aeabi_dmul>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f7ff f873 	bl	8000974 <__aeabi_d2iz>
 800188e:	4603      	mov	r3, r0
 8001890:	b21a      	sxth	r2, r3
 8001892:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <mpu6050_Read_Accel+0x1d4>)
 8001894:	801a      	strh	r2, [r3, #0]
}
 8001896:	bf00      	nop
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	51eb851f 	.word	0x51eb851f
 80018a4:	40239eb8 	.word	0x40239eb8
 80018a8:	200001f4 	.word	0x200001f4
 80018ac:	200005a4 	.word	0x200005a4
 80018b0:	200005a8 	.word	0x200005a8
 80018b4:	200005ac 	.word	0x200005ac
 80018b8:	20000594 	.word	0x20000594
 80018bc:	46800000 	.word	0x46800000
 80018c0:	40590000 	.word	0x40590000
 80018c4:	20000596 	.word	0x20000596
 80018c8:	ffffb1e0 	.word	0xffffb1e0
 80018cc:	20000598 	.word	0x20000598

080018d0 <mpu6050_Read_Gyro>:

void mpu6050_Read_Gyro(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af04      	add	r7, sp, #16
    uint8_t Rec_Data[6];

    // Leer 6 bytes desde GYRO_XOUT_H (registro 0x43)
    HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 80018d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018da:	9302      	str	r3, [sp, #8]
 80018dc:	2306      	movs	r3, #6
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	463b      	mov	r3, r7
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2301      	movs	r3, #1
 80018e6:	2243      	movs	r2, #67	@ 0x43
 80018e8:	21d0      	movs	r1, #208	@ 0xd0
 80018ea:	4849      	ldr	r0, [pc, #292]	@ (8001a10 <mpu6050_Read_Gyro+0x140>)
 80018ec:	f002 fd42 	bl	8004374 <HAL_I2C_Mem_Read>

    // Combinar bytes altos y bajos
    gx = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80018f0:	783b      	ldrb	r3, [r7, #0]
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	021b      	lsls	r3, r3, #8
 80018f6:	b21a      	sxth	r2, r3
 80018f8:	787b      	ldrb	r3, [r7, #1]
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b21b      	sxth	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	4b44      	ldr	r3, [pc, #272]	@ (8001a14 <mpu6050_Read_Gyro+0x144>)
 8001904:	601a      	str	r2, [r3, #0]
    gy = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001906:	78bb      	ldrb	r3, [r7, #2]
 8001908:	b21b      	sxth	r3, r3
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	b21a      	sxth	r2, r3
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	b21b      	sxth	r3, r3
 8001912:	4313      	orrs	r3, r2
 8001914:	b21b      	sxth	r3, r3
 8001916:	461a      	mov	r2, r3
 8001918:	4b3f      	ldr	r3, [pc, #252]	@ (8001a18 <mpu6050_Read_Gyro+0x148>)
 800191a:	601a      	str	r2, [r3, #0]
    gz = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800191c:	793b      	ldrb	r3, [r7, #4]
 800191e:	b21b      	sxth	r3, r3
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	b21a      	sxth	r2, r3
 8001924:	797b      	ldrb	r3, [r7, #5]
 8001926:	b21b      	sxth	r3, r3
 8001928:	4313      	orrs	r3, r2
 800192a:	b21b      	sxth	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a1c <mpu6050_Read_Gyro+0x14c>)
 8001930:	601a      	str	r2, [r3, #0]

    // Aplicar offset y escalar a grados/segundo (centésimas)
    if (abs(gx) <= OFFSET_GX)
 8001932:	4b38      	ldr	r3, [pc, #224]	@ (8001a14 <mpu6050_Read_Gyro+0x144>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 800193a:	db08      	blt.n	800194e <mpu6050_Read_Gyro+0x7e>
 800193c:	4b35      	ldr	r3, [pc, #212]	@ (8001a14 <mpu6050_Read_Gyro+0x144>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001944:	dc03      	bgt.n	800194e <mpu6050_Read_Gyro+0x7e>
        gx_real = 0;
 8001946:	4b36      	ldr	r3, [pc, #216]	@ (8001a20 <mpu6050_Read_Gyro+0x150>)
 8001948:	2200      	movs	r2, #0
 800194a:	801a      	strh	r2, [r3, #0]
 800194c:	e014      	b.n	8001978 <mpu6050_Read_Gyro+0xa8>
    else
        gx_real = (gx / 131.0f) * MULTIPLICADORFLOAT;
 800194e:	4b31      	ldr	r3, [pc, #196]	@ (8001a14 <mpu6050_Read_Gyro+0x144>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800195a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8001a24 <mpu6050_Read_Gyro+0x154>
 800195e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001962:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001a28 <mpu6050_Read_Gyro+0x158>
 8001966:	ee67 7a87 	vmul.f32	s15, s15, s14
 800196a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800196e:	ee17 3a90 	vmov	r3, s15
 8001972:	b21a      	sxth	r2, r3
 8001974:	4b2a      	ldr	r3, [pc, #168]	@ (8001a20 <mpu6050_Read_Gyro+0x150>)
 8001976:	801a      	strh	r2, [r3, #0]

    if (abs(gy) <= OFFSET_GY)
 8001978:	4b27      	ldr	r3, [pc, #156]	@ (8001a18 <mpu6050_Read_Gyro+0x148>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 8001980:	db08      	blt.n	8001994 <mpu6050_Read_Gyro+0xc4>
 8001982:	4b25      	ldr	r3, [pc, #148]	@ (8001a18 <mpu6050_Read_Gyro+0x148>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 800198a:	dc03      	bgt.n	8001994 <mpu6050_Read_Gyro+0xc4>
        gy_real = 0;
 800198c:	4b27      	ldr	r3, [pc, #156]	@ (8001a2c <mpu6050_Read_Gyro+0x15c>)
 800198e:	2200      	movs	r2, #0
 8001990:	801a      	strh	r2, [r3, #0]
 8001992:	e014      	b.n	80019be <mpu6050_Read_Gyro+0xee>
    else
        gy_real = (gy / 131.0f) * MULTIPLICADORFLOAT;
 8001994:	4b20      	ldr	r3, [pc, #128]	@ (8001a18 <mpu6050_Read_Gyro+0x148>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a0:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001a24 <mpu6050_Read_Gyro+0x154>
 80019a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019a8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001a28 <mpu6050_Read_Gyro+0x158>
 80019ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019b4:	ee17 3a90 	vmov	r3, s15
 80019b8:	b21a      	sxth	r2, r3
 80019ba:	4b1c      	ldr	r3, [pc, #112]	@ (8001a2c <mpu6050_Read_Gyro+0x15c>)
 80019bc:	801a      	strh	r2, [r3, #0]

    if (abs(gz) <= OFFSET_GZ)
 80019be:	4b17      	ldr	r3, [pc, #92]	@ (8001a1c <mpu6050_Read_Gyro+0x14c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 80019c6:	db08      	blt.n	80019da <mpu6050_Read_Gyro+0x10a>
 80019c8:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <mpu6050_Read_Gyro+0x14c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 80019d0:	dc03      	bgt.n	80019da <mpu6050_Read_Gyro+0x10a>
        gz_real = 0;
 80019d2:	4b17      	ldr	r3, [pc, #92]	@ (8001a30 <mpu6050_Read_Gyro+0x160>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	801a      	strh	r2, [r3, #0]
 80019d8:	e015      	b.n	8001a06 <mpu6050_Read_Gyro+0x136>
    else
        gz_real = (gz / 131.0f) * MULTIPLICADORFLOAT;
 80019da:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <mpu6050_Read_Gyro+0x14c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e6:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001a24 <mpu6050_Read_Gyro+0x154>
 80019ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ee:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001a28 <mpu6050_Read_Gyro+0x158>
 80019f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019fa:	ee17 3a90 	vmov	r3, s15
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <mpu6050_Read_Gyro+0x160>)
 8001a02:	801a      	strh	r2, [r3, #0]
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200001f4 	.word	0x200001f4
 8001a14:	200005b0 	.word	0x200005b0
 8001a18:	200005b4 	.word	0x200005b4
 8001a1c:	200005b8 	.word	0x200005b8
 8001a20:	2000059a 	.word	0x2000059a
 8001a24:	43030000 	.word	0x43030000
 8001a28:	42c80000 	.word	0x42c80000
 8001a2c:	2000059c 	.word	0x2000059c
 8001a30:	2000059e 	.word	0x2000059e

08001a34 <ssd1306_Reset>:
static HAL_StatusTypeDef (*memWrite)(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout) = NULL;
static HAL_StatusTypeDef (*memWriteDMA)(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size) = NULL;

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
	...

08001a44 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001a44:	b590      	push	{r4, r7, lr}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af04      	add	r7, sp, #16
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
	memWrite(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001a4e:	4b09      	ldr	r3, [pc, #36]	@ (8001a74 <ssd1306_WriteCommand+0x30>)
 8001a50:	681c      	ldr	r4, [r3, #0]
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	2301      	movs	r3, #1
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	1dfb      	adds	r3, r7, #7
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2301      	movs	r3, #1
 8001a62:	2200      	movs	r2, #0
 8001a64:	2178      	movs	r1, #120	@ 0x78
 8001a66:	4804      	ldr	r0, [pc, #16]	@ (8001a78 <ssd1306_WriteCommand+0x34>)
 8001a68:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd90      	pop	{r4, r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200005c0 	.word	0x200005c0
 8001a78:	200001f4 	.word	0x200001f4

08001a7c <ssd1306_WriteData>:
	memWriteDMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
}

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b087      	sub	sp, #28
 8001a80:	af04      	add	r7, sp, #16
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
    memWrite(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001a86:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <ssd1306_WriteData+0x30>)
 8001a88:	681c      	ldr	r4, [r3, #0]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a92:	9202      	str	r2, [sp, #8]
 8001a94:	9301      	str	r3, [sp, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	2240      	movs	r2, #64	@ 0x40
 8001a9e:	2178      	movs	r1, #120	@ 0x78
 8001aa0:	4803      	ldr	r0, [pc, #12]	@ (8001ab0 <ssd1306_WriteData+0x34>)
 8001aa2:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd90      	pop	{r4, r7, pc}
 8001aac:	200005c0 	.word	0x200005c0
 8001ab0:	200001f4 	.word	0x200001f4

08001ab4 <ssd1306_Attach_MemWriteDMA>:
        ret = SSD1306_OK;
    }
    return ret;
}

void ssd1306_Attach_MemWriteDMA(HAL_StatusTypeDef(*PtrRx)(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)){
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	memWriteDMA = PtrRx;
 8001abc:	4a04      	ldr	r2, [pc, #16]	@ (8001ad0 <ssd1306_Attach_MemWriteDMA+0x1c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	200005c4 	.word	0x200005c4

08001ad4 <ssd1306_Attach_MemWrite>:

void ssd1306_Attach_MemWrite(HAL_StatusTypeDef(*PtrRx)(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)){
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 8001adc:	4a04      	ldr	r2, [pc, #16]	@ (8001af0 <ssd1306_Attach_MemWrite+0x1c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6013      	str	r3, [r2, #0]
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	200005c0 	.word	0x200005c0

08001af4 <ssd1306_ADC_ConfCpltCallback>:

void ssd1306_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	SSD1306_TxCplt = (uint8_t *)PtrRx;
 8001afc:	4a04      	ldr	r2, [pc, #16]	@ (8001b10 <ssd1306_ADC_ConfCpltCallback+0x1c>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6013      	str	r3, [r2, #0]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	200005bc 	.word	0x200005bc

08001b14 <ssd1306_Init>:

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001b18:	f7ff ff8c 	bl	8001a34 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001b1c:	2064      	movs	r0, #100	@ 0x64
 8001b1e:	f000 fe1b 	bl	8002758 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001b22:	2000      	movs	r0, #0
 8001b24:	f000 f8b4 	bl	8001c90 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001b28:	2020      	movs	r0, #32
 8001b2a:	f7ff ff8b 	bl	8001a44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f7ff ff88 	bl	8001a44 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001b34:	20b0      	movs	r0, #176	@ 0xb0
 8001b36:	f7ff ff85 	bl	8001a44 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001b3a:	20c8      	movs	r0, #200	@ 0xc8
 8001b3c:	f7ff ff82 	bl	8001a44 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001b40:	2000      	movs	r0, #0
 8001b42:	f7ff ff7f 	bl	8001a44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001b46:	2010      	movs	r0, #16
 8001b48:	f7ff ff7c 	bl	8001a44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001b4c:	2040      	movs	r0, #64	@ 0x40
 8001b4e:	f7ff ff79 	bl	8001a44 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001b52:	20ff      	movs	r0, #255	@ 0xff
 8001b54:	f000 f888 	bl	8001c68 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001b58:	20a1      	movs	r0, #161	@ 0xa1
 8001b5a:	f7ff ff73 	bl	8001a44 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001b5e:	20a6      	movs	r0, #166	@ 0xa6
 8001b60:	f7ff ff70 	bl	8001a44 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001b64:	20a8      	movs	r0, #168	@ 0xa8
 8001b66:	f7ff ff6d 	bl	8001a44 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001b6a:	203f      	movs	r0, #63	@ 0x3f
 8001b6c:	f7ff ff6a 	bl	8001a44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b70:	20a4      	movs	r0, #164	@ 0xa4
 8001b72:	f7ff ff67 	bl	8001a44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001b76:	20d3      	movs	r0, #211	@ 0xd3
 8001b78:	f7ff ff64 	bl	8001a44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f7ff ff61 	bl	8001a44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b82:	20d5      	movs	r0, #213	@ 0xd5
 8001b84:	f7ff ff5e 	bl	8001a44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001b88:	20f0      	movs	r0, #240	@ 0xf0
 8001b8a:	f7ff ff5b 	bl	8001a44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001b8e:	20d9      	movs	r0, #217	@ 0xd9
 8001b90:	f7ff ff58 	bl	8001a44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001b94:	2022      	movs	r0, #34	@ 0x22
 8001b96:	f7ff ff55 	bl	8001a44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001b9a:	20da      	movs	r0, #218	@ 0xda
 8001b9c:	f7ff ff52 	bl	8001a44 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001ba0:	2012      	movs	r0, #18
 8001ba2:	f7ff ff4f 	bl	8001a44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ba6:	20db      	movs	r0, #219	@ 0xdb
 8001ba8:	f7ff ff4c 	bl	8001a44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001bac:	2020      	movs	r0, #32
 8001bae:	f7ff ff49 	bl	8001a44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001bb2:	208d      	movs	r0, #141	@ 0x8d
 8001bb4:	f7ff ff46 	bl	8001a44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001bb8:	2014      	movs	r0, #20
 8001bba:	f7ff ff43 	bl	8001a44 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001bbe:	2001      	movs	r0, #1
 8001bc0:	f000 f866 	bl	8001c90 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f000 f80f 	bl	8001be8 <ssd1306_Fill>
    //ssd1306_Fill(White);

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001bca:	f000 f825 	bl	8001c18 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001bce:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <ssd1306_Init+0xd0>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	@ (8001be4 <ssd1306_Init+0xd0>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001bda:	4b02      	ldr	r3, [pc, #8]	@ (8001be4 <ssd1306_Init+0xd0>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	711a      	strb	r2, [r3, #4]
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200009c8 	.word	0x200009c8

08001be8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <ssd1306_Fill+0x14>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	e000      	b.n	8001bfe <ssd1306_Fill+0x16>
 8001bfc:	23ff      	movs	r3, #255	@ 0xff
 8001bfe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c02:	4619      	mov	r1, r3
 8001c04:	4803      	ldr	r0, [pc, #12]	@ (8001c14 <ssd1306_Fill+0x2c>)
 8001c06:	f00b fd51 	bl	800d6ac <memset>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200005c8 	.word	0x200005c8

08001c18 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001c1e:	2300      	movs	r3, #0
 8001c20:	71fb      	strb	r3, [r7, #7]
 8001c22:	e016      	b.n	8001c52 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	3b50      	subs	r3, #80	@ 0x50
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ff0a 	bl	8001a44 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7ff ff07 	bl	8001a44 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001c36:	2010      	movs	r0, #16
 8001c38:	f7ff ff04 	bl	8001a44 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	01db      	lsls	r3, r3, #7
 8001c40:	4a08      	ldr	r2, [pc, #32]	@ (8001c64 <ssd1306_UpdateScreen+0x4c>)
 8001c42:	4413      	add	r3, r2
 8001c44:	2180      	movs	r1, #128	@ 0x80
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff18 	bl	8001a7c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	71fb      	strb	r3, [r7, #7]
 8001c52:	79fb      	ldrb	r3, [r7, #7]
 8001c54:	2b07      	cmp	r3, #7
 8001c56:	d9e5      	bls.n	8001c24 <ssd1306_UpdateScreen+0xc>
    }
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200005c8 	.word	0x200005c8

08001c68 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001c72:	2381      	movs	r3, #129	@ 0x81
 8001c74:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fee3 	bl	8001a44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff fedf 	bl	8001a44 <ssd1306_WriteCommand>
}
 8001c86:	bf00      	nop
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001ca0:	23af      	movs	r3, #175	@ 0xaf
 8001ca2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <ssd1306_SetDisplayOn+0x38>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	715a      	strb	r2, [r3, #5]
 8001caa:	e004      	b.n	8001cb6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001cac:	23ae      	movs	r3, #174	@ 0xae
 8001cae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001cb0:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <ssd1306_SetDisplayOn+0x38>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fec3 	bl	8001a44 <ssd1306_WriteCommand>
}
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200009c8 	.word	0x200009c8

08001ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <HAL_MspInit+0x4c>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	4a0f      	ldr	r2, [pc, #60]	@ (8001d18 <HAL_MspInit+0x4c>)
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8001d18 <HAL_MspInit+0x4c>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	603b      	str	r3, [r7, #0]
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <HAL_MspInit+0x4c>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	4a08      	ldr	r2, [pc, #32]	@ (8001d18 <HAL_MspInit+0x4c>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cfe:	4b06      	ldr	r3, [pc, #24]	@ (8001d18 <HAL_MspInit+0x4c>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800

08001d1c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	@ 0x28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a32      	ldr	r2, [pc, #200]	@ (8001e04 <HAL_ADC_MspInit+0xe8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d15e      	bne.n	8001dfc <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	4b31      	ldr	r3, [pc, #196]	@ (8001e08 <HAL_ADC_MspInit+0xec>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d46:	4a30      	ldr	r2, [pc, #192]	@ (8001e08 <HAL_ADC_MspInit+0xec>)
 8001d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e08 <HAL_ADC_MspInit+0xec>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e08 <HAL_ADC_MspInit+0xec>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	4a29      	ldr	r2, [pc, #164]	@ (8001e08 <HAL_ADC_MspInit+0xec>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6a:	4b27      	ldr	r3, [pc, #156]	@ (8001e08 <HAL_ADC_MspInit+0xec>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001d76:	23ff      	movs	r3, #255	@ 0xff
 8001d78:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4619      	mov	r1, r3
 8001d88:	4820      	ldr	r0, [pc, #128]	@ (8001e0c <HAL_ADC_MspInit+0xf0>)
 8001d8a:	f001 fee7 	bl	8003b5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001d8e:	4b20      	ldr	r3, [pc, #128]	@ (8001e10 <HAL_ADC_MspInit+0xf4>)
 8001d90:	4a20      	ldr	r2, [pc, #128]	@ (8001e14 <HAL_ADC_MspInit+0xf8>)
 8001d92:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001d94:	4b1e      	ldr	r3, [pc, #120]	@ (8001e10 <HAL_ADC_MspInit+0xf4>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e10 <HAL_ADC_MspInit+0xf4>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001da0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <HAL_ADC_MspInit+0xf4>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001da6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <HAL_ADC_MspInit+0xf4>)
 8001da8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001dae:	4b18      	ldr	r3, [pc, #96]	@ (8001e10 <HAL_ADC_MspInit+0xf4>)
 8001db0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001db4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001db6:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <HAL_ADC_MspInit+0xf4>)
 8001db8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dbc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001dbe:	4b14      	ldr	r3, [pc, #80]	@ (8001e10 <HAL_ADC_MspInit+0xf4>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <HAL_ADC_MspInit+0xf4>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dca:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <HAL_ADC_MspInit+0xf4>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001dd0:	480f      	ldr	r0, [pc, #60]	@ (8001e10 <HAL_ADC_MspInit+0xf4>)
 8001dd2:	f001 fb17 	bl	8003404 <HAL_DMA_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001ddc:	f7ff fc4e 	bl	800167c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a0b      	ldr	r2, [pc, #44]	@ (8001e10 <HAL_ADC_MspInit+0xf4>)
 8001de4:	639a      	str	r2, [r3, #56]	@ 0x38
 8001de6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e10 <HAL_ADC_MspInit+0xf4>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2100      	movs	r1, #0
 8001df0:	2012      	movs	r0, #18
 8001df2:	f001 fad0 	bl	8003396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001df6:	2012      	movs	r0, #18
 8001df8:	f001 fae9 	bl	80033ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001dfc:	bf00      	nop
 8001dfe:	3728      	adds	r7, #40	@ 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40012000 	.word	0x40012000
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	20000194 	.word	0x20000194
 8001e14:	40026410 	.word	0x40026410

08001e18 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	@ 0x28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a4f      	ldr	r2, [pc, #316]	@ (8001f74 <HAL_I2C_MspInit+0x15c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	f040 8097 	bne.w	8001f6a <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	4b4d      	ldr	r3, [pc, #308]	@ (8001f78 <HAL_I2C_MspInit+0x160>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e44:	4a4c      	ldr	r2, [pc, #304]	@ (8001f78 <HAL_I2C_MspInit+0x160>)
 8001e46:	f043 0302 	orr.w	r3, r3, #2
 8001e4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f78 <HAL_I2C_MspInit+0x160>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e58:	23c0      	movs	r3, #192	@ 0xc0
 8001e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e5c:	2312      	movs	r3, #18
 8001e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e68:	2304      	movs	r3, #4
 8001e6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	4842      	ldr	r0, [pc, #264]	@ (8001f7c <HAL_I2C_MspInit+0x164>)
 8001e74:	f001 fe72 	bl	8003b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f78 <HAL_I2C_MspInit+0x160>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e80:	4a3d      	ldr	r2, [pc, #244]	@ (8001f78 <HAL_I2C_MspInit+0x160>)
 8001e82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e86:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e88:	4b3b      	ldr	r3, [pc, #236]	@ (8001f78 <HAL_I2C_MspInit+0x160>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001e94:	4b3a      	ldr	r3, [pc, #232]	@ (8001f80 <HAL_I2C_MspInit+0x168>)
 8001e96:	4a3b      	ldr	r2, [pc, #236]	@ (8001f84 <HAL_I2C_MspInit+0x16c>)
 8001e98:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001e9a:	4b39      	ldr	r3, [pc, #228]	@ (8001f80 <HAL_I2C_MspInit+0x168>)
 8001e9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ea0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ea2:	4b37      	ldr	r3, [pc, #220]	@ (8001f80 <HAL_I2C_MspInit+0x168>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ea8:	4b35      	ldr	r3, [pc, #212]	@ (8001f80 <HAL_I2C_MspInit+0x168>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001eae:	4b34      	ldr	r3, [pc, #208]	@ (8001f80 <HAL_I2C_MspInit+0x168>)
 8001eb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eb4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eb6:	4b32      	ldr	r3, [pc, #200]	@ (8001f80 <HAL_I2C_MspInit+0x168>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ebc:	4b30      	ldr	r3, [pc, #192]	@ (8001f80 <HAL_I2C_MspInit+0x168>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f80 <HAL_I2C_MspInit+0x168>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f80 <HAL_I2C_MspInit+0x168>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ece:	4b2c      	ldr	r3, [pc, #176]	@ (8001f80 <HAL_I2C_MspInit+0x168>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001ed4:	482a      	ldr	r0, [pc, #168]	@ (8001f80 <HAL_I2C_MspInit+0x168>)
 8001ed6:	f001 fa95 	bl	8003404 <HAL_DMA_Init>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001ee0:	f7ff fbcc 	bl	800167c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a26      	ldr	r2, [pc, #152]	@ (8001f80 <HAL_I2C_MspInit+0x168>)
 8001ee8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001eea:	4a25      	ldr	r2, [pc, #148]	@ (8001f80 <HAL_I2C_MspInit+0x168>)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001ef0:	4b25      	ldr	r3, [pc, #148]	@ (8001f88 <HAL_I2C_MspInit+0x170>)
 8001ef2:	4a26      	ldr	r2, [pc, #152]	@ (8001f8c <HAL_I2C_MspInit+0x174>)
 8001ef4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001ef6:	4b24      	ldr	r3, [pc, #144]	@ (8001f88 <HAL_I2C_MspInit+0x170>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001efc:	4b22      	ldr	r3, [pc, #136]	@ (8001f88 <HAL_I2C_MspInit+0x170>)
 8001efe:	2240      	movs	r2, #64	@ 0x40
 8001f00:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f02:	4b21      	ldr	r3, [pc, #132]	@ (8001f88 <HAL_I2C_MspInit+0x170>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f08:	4b1f      	ldr	r3, [pc, #124]	@ (8001f88 <HAL_I2C_MspInit+0x170>)
 8001f0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f0e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f10:	4b1d      	ldr	r3, [pc, #116]	@ (8001f88 <HAL_I2C_MspInit+0x170>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f16:	4b1c      	ldr	r3, [pc, #112]	@ (8001f88 <HAL_I2C_MspInit+0x170>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001f88 <HAL_I2C_MspInit+0x170>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f22:	4b19      	ldr	r3, [pc, #100]	@ (8001f88 <HAL_I2C_MspInit+0x170>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f28:	4b17      	ldr	r3, [pc, #92]	@ (8001f88 <HAL_I2C_MspInit+0x170>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001f2e:	4816      	ldr	r0, [pc, #88]	@ (8001f88 <HAL_I2C_MspInit+0x170>)
 8001f30:	f001 fa68 	bl	8003404 <HAL_DMA_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8001f3a:	f7ff fb9f 	bl	800167c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a11      	ldr	r2, [pc, #68]	@ (8001f88 <HAL_I2C_MspInit+0x170>)
 8001f42:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f44:	4a10      	ldr	r2, [pc, #64]	@ (8001f88 <HAL_I2C_MspInit+0x170>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	201f      	movs	r0, #31
 8001f50:	f001 fa21 	bl	8003396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001f54:	201f      	movs	r0, #31
 8001f56:	f001 fa3a 	bl	80033ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2020      	movs	r0, #32
 8001f60:	f001 fa19 	bl	8003396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001f64:	2020      	movs	r0, #32
 8001f66:	f001 fa32 	bl	80033ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f6a:	bf00      	nop
 8001f6c:	3728      	adds	r7, #40	@ 0x28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40005400 	.word	0x40005400
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020400 	.word	0x40020400
 8001f80:	20000248 	.word	0x20000248
 8001f84:	40026010 	.word	0x40026010
 8001f88:	200002a8 	.word	0x200002a8
 8001f8c:	40026028 	.word	0x40026028

08001f90 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a1a      	ldr	r2, [pc, #104]	@ (8002008 <HAL_TIM_Base_MspInit+0x78>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d12d      	bne.n	8001ffe <HAL_TIM_Base_MspInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b19      	ldr	r3, [pc, #100]	@ (800200c <HAL_TIM_Base_MspInit+0x7c>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	4a18      	ldr	r2, [pc, #96]	@ (800200c <HAL_TIM_Base_MspInit+0x7c>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fb2:	4b16      	ldr	r3, [pc, #88]	@ (800200c <HAL_TIM_Base_MspInit+0x7c>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	2018      	movs	r0, #24
 8001fc4:	f001 f9e7 	bl	8003396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001fc8:	2018      	movs	r0, #24
 8001fca:	f001 fa00 	bl	80033ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	2019      	movs	r0, #25
 8001fd4:	f001 f9df 	bl	8003396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fd8:	2019      	movs	r0, #25
 8001fda:	f001 f9f8 	bl	80033ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	201a      	movs	r0, #26
 8001fe4:	f001 f9d7 	bl	8003396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001fe8:	201a      	movs	r0, #26
 8001fea:	f001 f9f0 	bl	80033ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	201b      	movs	r0, #27
 8001ff4:	f001 f9cf 	bl	8003396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ff8:	201b      	movs	r0, #27
 8001ffa:	f001 f9e8 	bl	80033ce <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40010000 	.word	0x40010000
 800200c:	40023800 	.word	0x40023800

08002010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <NMI_Handler+0x4>

08002018 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <HardFault_Handler+0x4>

08002020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <MemManage_Handler+0x4>

08002028 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <BusFault_Handler+0x4>

08002030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <UsageFault_Handler+0x4>

08002038 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002066:	f000 fb57 	bl	8002718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
	...

08002070 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002074:	4802      	ldr	r0, [pc, #8]	@ (8002080 <DMA1_Stream0_IRQHandler+0x10>)
 8002076:	f001 faed 	bl	8003654 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000248 	.word	0x20000248

08002084 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002088:	4802      	ldr	r0, [pc, #8]	@ (8002094 <DMA1_Stream1_IRQHandler+0x10>)
 800208a:	f001 fae3 	bl	8003654 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200002a8 	.word	0x200002a8

08002098 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800209c:	4802      	ldr	r0, [pc, #8]	@ (80020a8 <ADC_IRQHandler+0x10>)
 800209e:	f000 fbc2 	bl	8002826 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2000014c 	.word	0x2000014c

080020ac <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020b0:	4802      	ldr	r0, [pc, #8]	@ (80020bc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80020b2:	f006 fdeb 	bl	8008c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000308 	.word	0x20000308

080020c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020c4:	4802      	ldr	r0, [pc, #8]	@ (80020d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80020c6:	f006 fde1 	bl	8008c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000308 	.word	0x20000308

080020d4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020d8:	4802      	ldr	r0, [pc, #8]	@ (80020e4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80020da:	f006 fdd7 	bl	8008c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000308 	.word	0x20000308

080020e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020ec:	4802      	ldr	r0, [pc, #8]	@ (80020f8 <TIM1_CC_IRQHandler+0x10>)
 80020ee:	f006 fdcd 	bl	8008c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000308 	.word	0x20000308

080020fc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002100:	4802      	ldr	r0, [pc, #8]	@ (800210c <I2C1_EV_IRQHandler+0x10>)
 8002102:	f002 fcc7 	bl	8004a94 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	200001f4 	.word	0x200001f4

08002110 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002114:	4802      	ldr	r0, [pc, #8]	@ (8002120 <I2C1_ER_IRQHandler+0x10>)
 8002116:	f002 fe2e 	bl	8004d76 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200001f4 	.word	0x200001f4

08002124 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002128:	4802      	ldr	r0, [pc, #8]	@ (8002134 <DMA2_Stream0_IRQHandler+0x10>)
 800212a:	f001 fa93 	bl	8003654 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000194 	.word	0x20000194

08002138 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800213c:	4802      	ldr	r0, [pc, #8]	@ (8002148 <OTG_FS_IRQHandler+0x10>)
 800213e:	f004 ffa0 	bl	8007082 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200012b8 	.word	0x200012b8

0800214c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002150:	4b06      	ldr	r3, [pc, #24]	@ (800216c <SystemInit+0x20>)
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002156:	4a05      	ldr	r2, [pc, #20]	@ (800216c <SystemInit+0x20>)
 8002158:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800215c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <unerPrtcl_PutHeaderOnTx>:


//Function definitions

uint8_t unerPrtcl_PutHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	70fb      	strb	r3, [r7, #3]
 800217c:	4613      	mov	r3, r2
 800217e:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 8002180:	78bb      	ldrb	r3, [r7, #2]
 8002182:	3301      	adds	r3, #1
 8002184:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	795a      	ldrb	r2, [r3, #5]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	795b      	ldrb	r3, [r3, #5]
 800219c:	1c59      	adds	r1, r3, #1
 800219e:	b2c8      	uxtb	r0, r1
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	7148      	strb	r0, [r1, #5]
 80021a4:	4413      	add	r3, r2
 80021a6:	2255      	movs	r2, #85	@ 0x55
 80021a8:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	795a      	ldrb	r2, [r3, #5]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	799b      	ldrb	r3, [r3, #6]
 80021b2:	4013      	ands	r3, r2
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	795b      	ldrb	r3, [r3, #5]
 80021c2:	1c59      	adds	r1, r3, #1
 80021c4:	b2c8      	uxtb	r0, r1
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	7148      	strb	r0, [r1, #5]
 80021ca:	4413      	add	r3, r2
 80021cc:	224e      	movs	r2, #78	@ 0x4e
 80021ce:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	795a      	ldrb	r2, [r3, #5]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	799b      	ldrb	r3, [r3, #6]
 80021d8:	4013      	ands	r3, r2
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	795b      	ldrb	r3, [r3, #5]
 80021e8:	1c59      	adds	r1, r3, #1
 80021ea:	b2c8      	uxtb	r0, r1
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	7148      	strb	r0, [r1, #5]
 80021f0:	4413      	add	r3, r2
 80021f2:	2245      	movs	r2, #69	@ 0x45
 80021f4:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	795a      	ldrb	r2, [r3, #5]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	799b      	ldrb	r3, [r3, #6]
 80021fe:	4013      	ands	r3, r2
 8002200:	b2da      	uxtb	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	795b      	ldrb	r3, [r3, #5]
 800220e:	1c59      	adds	r1, r3, #1
 8002210:	b2c8      	uxtb	r0, r1
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	7148      	strb	r0, [r1, #5]
 8002216:	4413      	add	r3, r2
 8002218:	2252      	movs	r2, #82	@ 0x52
 800221a:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	795a      	ldrb	r2, [r3, #5]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	799b      	ldrb	r3, [r3, #6]
 8002224:	4013      	ands	r3, r2
 8002226:	b2da      	uxtb	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	795b      	ldrb	r3, [r3, #5]
 8002234:	1c59      	adds	r1, r3, #1
 8002236:	b2c8      	uxtb	r0, r1
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	7148      	strb	r0, [r1, #5]
 800223c:	4413      	add	r3, r2
 800223e:	78ba      	ldrb	r2, [r7, #2]
 8002240:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	795a      	ldrb	r2, [r3, #5]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	799b      	ldrb	r3, [r3, #6]
 800224a:	4013      	ands	r3, r2
 800224c:	b2da      	uxtb	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	795b      	ldrb	r3, [r3, #5]
 800225a:	1c59      	adds	r1, r3, #1
 800225c:	b2c8      	uxtb	r0, r1
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	7148      	strb	r0, [r1, #5]
 8002262:	4413      	add	r3, r2
 8002264:	223a      	movs	r2, #58	@ 0x3a
 8002266:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	795a      	ldrb	r2, [r3, #5]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	799b      	ldrb	r3, [r3, #6]
 8002270:	4013      	ands	r3, r2
 8002272:	b2da      	uxtb	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	795b      	ldrb	r3, [r3, #5]
 8002280:	1c59      	adds	r1, r3, #1
 8002282:	b2c8      	uxtb	r0, r1
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	7148      	strb	r0, [r1, #5]
 8002288:	4413      	add	r3, r2
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	795a      	ldrb	r2, [r3, #5]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	799b      	ldrb	r3, [r3, #6]
 8002296:	4013      	ands	r3, r2
 8002298:	b2da      	uxtb	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2207      	movs	r2, #7
 80022a2:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7a5a      	ldrb	r2, [r3, #9]
 80022a8:	78b9      	ldrb	r1, [r7, #2]
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	404b      	eors	r3, r1
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	4053      	eors	r3, r2
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	7a5b      	ldrb	r3, [r3, #9]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <unerPrtcl_PutByteOnTx>:

uint8_t unerPrtcl_PutByteOnTx(_sTx *dataTx, uint8_t byte)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	79db      	ldrb	r3, [r3, #7]
 80022de:	3301      	adds	r3, #1
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	795b      	ldrb	r3, [r3, #5]
 80022ee:	1c59      	adds	r1, r3, #1
 80022f0:	b2c8      	uxtb	r0, r1
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	7148      	strb	r0, [r1, #5]
 80022f6:	4413      	add	r3, r2
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	795a      	ldrb	r2, [r3, #5]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	799b      	ldrb	r3, [r3, #6]
 8002304:	4013      	ands	r3, r2
 8002306:	b2da      	uxtb	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	7a5a      	ldrb	r2, [r3, #9]
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	4053      	eors	r3, r2
 8002314:	b2da      	uxtb	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	7a5b      	ldrb	r3, [r3, #9]
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <unerPrtcl_PutStrOntx>:

uint8_t unerPrtcl_PutStrOntx(_sTx *dataTx, const char *str)
{
 800232a:	b490      	push	{r4, r7}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 8002334:	2300      	movs	r3, #0
 8002336:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 8002338:	e02c      	b.n	8002394 <unerPrtcl_PutStrOntx+0x6a>
    	dataTx->bytes++;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	79db      	ldrb	r3, [r3, #7]
 800233e:	3301      	adds	r3, #1
 8002340:	b2da      	uxtb	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	441a      	add	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6819      	ldr	r1, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	795b      	ldrb	r3, [r3, #5]
 8002358:	1c58      	adds	r0, r3, #1
 800235a:	b2c4      	uxtb	r4, r0
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	7144      	strb	r4, [r0, #5]
 8002360:	440b      	add	r3, r1
 8002362:	7812      	ldrb	r2, [r2, #0]
 8002364:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	795a      	ldrb	r2, [r3, #5]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	799b      	ldrb	r3, [r3, #6]
 800236e:	4013      	ands	r3, r2
 8002370:	b2da      	uxtb	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	b2db      	uxtb	r3, r3
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	73fa      	strb	r2, [r7, #15]
 8002380:	461a      	mov	r2, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	4413      	add	r3, r2
 8002386:	781a      	ldrb	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7a5b      	ldrb	r3, [r3, #9]
 800238c:	4053      	eors	r3, r2
 800238e:	b2da      	uxtb	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 8002394:	7bfb      	ldrb	r3, [r7, #15]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	4413      	add	r3, r2
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1ca      	bne.n	800233a <unerPrtcl_PutStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7a5b      	ldrb	r3, [r3, #9]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc90      	pop	{r4, r7}
 80023b0:	4770      	bx	lr
	...

080023b4 <unerPrtcl_DecodeHeader>:
	return getByte;
}


uint8_t unerPrtcl_DecodeHeader(_sTx *dataRx)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	795b      	ldrb	r3, [r3, #5]
 80023c4:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 80023c6:	e0e4      	b.n	8002592 <unerPrtcl_DecodeHeader+0x1de>
        switch(header)
 80023c8:	4b78      	ldr	r3, [pc, #480]	@ (80025ac <unerPrtcl_DecodeHeader+0x1f8>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b07      	cmp	r3, #7
 80023ce:	f200 80c9 	bhi.w	8002564 <unerPrtcl_DecodeHeader+0x1b0>
 80023d2:	a201      	add	r2, pc, #4	@ (adr r2, 80023d8 <unerPrtcl_DecodeHeader+0x24>)
 80023d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d8:	080023f9 	.word	0x080023f9
 80023dc:	08002413 	.word	0x08002413
 80023e0:	08002451 	.word	0x08002451
 80023e4:	0800247d 	.word	0x0800247d
 80023e8:	080024a9 	.word	0x080024a9
 80023ec:	080024bf 	.word	0x080024bf
 80023f0:	08002565 	.word	0x08002565
 80023f4:	08002521 	.word	0x08002521
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	7912      	ldrb	r2, [r2, #4]
 8002400:	4413      	add	r3, r2
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b55      	cmp	r3, #85	@ 0x55
 8002406:	f040 80b1 	bne.w	800256c <unerPrtcl_DecodeHeader+0x1b8>
                   header = HEADER_N;
 800240a:	4b68      	ldr	r3, [pc, #416]	@ (80025ac <unerPrtcl_DecodeHeader+0x1f8>)
 800240c:	2201      	movs	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]
                }
            break;
 8002410:	e0ac      	b.n	800256c <unerPrtcl_DecodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	7912      	ldrb	r2, [r2, #4]
 800241a:	4413      	add	r3, r2
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002420:	d103      	bne.n	800242a <unerPrtcl_DecodeHeader+0x76>
                    header = HEADER_E;
 8002422:	4b62      	ldr	r3, [pc, #392]	@ (80025ac <unerPrtcl_DecodeHeader+0x1f8>)
 8002424:	2202      	movs	r2, #2
 8002426:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 8002428:	e0a2      	b.n	8002570 <unerPrtcl_DecodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	7912      	ldrb	r2, [r2, #4]
 8002432:	4413      	add	r3, r2
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b55      	cmp	r3, #85	@ 0x55
 8002438:	f000 809a 	beq.w	8002570 <unerPrtcl_DecodeHeader+0x1bc>
                    	header = HEADER_U;
 800243c:	4b5b      	ldr	r3, [pc, #364]	@ (80025ac <unerPrtcl_DecodeHeader+0x1f8>)
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	791b      	ldrb	r3, [r3, #4]
 8002446:	3b01      	subs	r3, #1
 8002448:	b2da      	uxtb	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	711a      	strb	r2, [r3, #4]
            break;
 800244e:	e08f      	b.n	8002570 <unerPrtcl_DecodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	7912      	ldrb	r2, [r2, #4]
 8002458:	4413      	add	r3, r2
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b45      	cmp	r3, #69	@ 0x45
 800245e:	d103      	bne.n	8002468 <unerPrtcl_DecodeHeader+0xb4>
                    header = HEADER_R;
 8002460:	4b52      	ldr	r3, [pc, #328]	@ (80025ac <unerPrtcl_DecodeHeader+0x1f8>)
 8002462:	2203      	movs	r2, #3
 8002464:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8002466:	e086      	b.n	8002576 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8002468:	4b50      	ldr	r3, [pc, #320]	@ (80025ac <unerPrtcl_DecodeHeader+0x1f8>)
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	791b      	ldrb	r3, [r3, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	b2da      	uxtb	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	711a      	strb	r2, [r3, #4]
            break;
 800247a:	e07c      	b.n	8002576 <unerPrtcl_DecodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	7912      	ldrb	r2, [r2, #4]
 8002484:	4413      	add	r3, r2
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b52      	cmp	r3, #82	@ 0x52
 800248a:	d103      	bne.n	8002494 <unerPrtcl_DecodeHeader+0xe0>
                    header = NBYTES;
 800248c:	4b47      	ldr	r3, [pc, #284]	@ (80025ac <unerPrtcl_DecodeHeader+0x1f8>)
 800248e:	2204      	movs	r2, #4
 8002490:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8002492:	e070      	b.n	8002576 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8002494:	4b45      	ldr	r3, [pc, #276]	@ (80025ac <unerPrtcl_DecodeHeader+0x1f8>)
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	791b      	ldrb	r3, [r3, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	711a      	strb	r2, [r3, #4]
            break;
 80024a6:	e066      	b.n	8002576 <unerPrtcl_DecodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	7912      	ldrb	r2, [r2, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 80024b6:	4b3d      	ldr	r3, [pc, #244]	@ (80025ac <unerPrtcl_DecodeHeader+0x1f8>)
 80024b8:	2205      	movs	r2, #5
 80024ba:	701a      	strb	r2, [r3, #0]
            break;
 80024bc:	e05b      	b.n	8002576 <unerPrtcl_DecodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	7912      	ldrb	r2, [r2, #4]
 80024c6:	4413      	add	r3, r2
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b3a      	cmp	r3, #58	@ 0x3a
 80024cc:	d11e      	bne.n	800250c <unerPrtcl_DecodeHeader+0x158>
                    header = PAYLOAD;
 80024ce:	4b37      	ldr	r3, [pc, #220]	@ (80025ac <unerPrtcl_DecodeHeader+0x1f8>)
 80024d0:	2207      	movs	r2, #7
 80024d2:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	791b      	ldrb	r3, [r3, #4]
 80024d8:	3301      	adds	r3, #1
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7a1a      	ldrb	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	799b      	ldrb	r3, [r3, #6]
 80024e8:	4013      	ands	r3, r2
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	7a5a      	ldrb	r2, [r3, #9]
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	4053      	eors	r3, r2
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8002504:	b2da      	uxtb	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 800250a:	e034      	b.n	8002576 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 800250c:	4b27      	ldr	r3, [pc, #156]	@ (80025ac <unerPrtcl_DecodeHeader+0x1f8>)
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	791b      	ldrb	r3, [r3, #4]
 8002516:	3b01      	subs	r3, #1
 8002518:	b2da      	uxtb	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	711a      	strb	r2, [r3, #4]
            break;
 800251e:	e02a      	b.n	8002576 <unerPrtcl_DecodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	3b01      	subs	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00c      	beq.n	8002546 <unerPrtcl_DecodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7a5a      	ldrb	r2, [r3, #9]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	7909      	ldrb	r1, [r1, #4]
 8002538:	440b      	add	r3, r1
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4053      	eors	r3, r2
 800253e:	b2da      	uxtb	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 8002544:	e016      	b.n	8002574 <unerPrtcl_DecodeHeader+0x1c0>
                    header = HEADER_U;
 8002546:	4b19      	ldr	r3, [pc, #100]	@ (80025ac <unerPrtcl_DecodeHeader+0x1f8>)
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	7912      	ldrb	r2, [r2, #4]
 8002554:	4413      	add	r3, r2
 8002556:	781a      	ldrb	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	7a5b      	ldrb	r3, [r3, #9]
 800255c:	429a      	cmp	r2, r3
 800255e:	d109      	bne.n	8002574 <unerPrtcl_DecodeHeader+0x1c0>
                        return TRUE;
 8002560:	2301      	movs	r3, #1
 8002562:	e01d      	b.n	80025a0 <unerPrtcl_DecodeHeader+0x1ec>
            default:
                header = HEADER_U;
 8002564:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <unerPrtcl_DecodeHeader+0x1f8>)
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
            break;
 800256a:	e004      	b.n	8002576 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 800256c:	bf00      	nop
 800256e:	e002      	b.n	8002576 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8002570:	bf00      	nop
 8002572:	e000      	b.n	8002576 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8002574:	bf00      	nop
        }
        dataRx->indexR++;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	791b      	ldrb	r3, [r3, #4]
 800257a:	3301      	adds	r3, #1
 800257c:	b2da      	uxtb	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	791a      	ldrb	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	799b      	ldrb	r3, [r3, #6]
 800258a:	4013      	ands	r3, r2
 800258c:	b2da      	uxtb	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	791b      	ldrb	r3, [r3, #4]
 8002596:	7bba      	ldrb	r2, [r7, #14]
 8002598:	429a      	cmp	r2, r3
 800259a:	f47f af15 	bne.w	80023c8 <unerPrtcl_DecodeHeader+0x14>
    }
    return FALSE;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	200009ce 	.word	0x200009ce

080025b0 <unerPrtcl_Init>:

void unerPrtcl_Init(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	603b      	str	r3, [r7, #0]
	Rx->buff = (uint8_t *)buffRx;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	22ff      	movs	r2, #255	@ 0xff
 80025e0:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2200      	movs	r2, #0
 80025f2:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2200      	movs	r2, #0
 80025f8:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2200      	movs	r2, #0
 80025fe:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2200      	movs	r2, #0
 8002604:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	22ff      	movs	r2, #255	@ 0xff
 800260a:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2200      	movs	r2, #0
 8002610:	725a      	strb	r2, [r3, #9]

}
 8002612:	bf00      	nop
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
	...

08002620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002620:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002658 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002624:	f7ff fd92 	bl	800214c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002628:	480c      	ldr	r0, [pc, #48]	@ (800265c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800262a:	490d      	ldr	r1, [pc, #52]	@ (8002660 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800262c:	4a0d      	ldr	r2, [pc, #52]	@ (8002664 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800262e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002630:	e002      	b.n	8002638 <LoopCopyDataInit>

08002632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002636:	3304      	adds	r3, #4

08002638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800263a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800263c:	d3f9      	bcc.n	8002632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800263e:	4a0a      	ldr	r2, [pc, #40]	@ (8002668 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002640:	4c0a      	ldr	r4, [pc, #40]	@ (800266c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002644:	e001      	b.n	800264a <LoopFillZerobss>

08002646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002648:	3204      	adds	r2, #4

0800264a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800264a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800264c:	d3fb      	bcc.n	8002646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800264e:	f00b f835 	bl	800d6bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002652:	f7fe fd73 	bl	800113c <main>
  bx  lr    
 8002656:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002658:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800265c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002660:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8002664:	0800d7a4 	.word	0x0800d7a4
  ldr r2, =_sbss
 8002668:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 800266c:	200019bc 	.word	0x200019bc

08002670 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002670:	e7fe      	b.n	8002670 <DMA1_Stream2_IRQHandler>
	...

08002674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002678:	4b0e      	ldr	r3, [pc, #56]	@ (80026b4 <HAL_Init+0x40>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0d      	ldr	r2, [pc, #52]	@ (80026b4 <HAL_Init+0x40>)
 800267e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002684:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <HAL_Init+0x40>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0a      	ldr	r2, [pc, #40]	@ (80026b4 <HAL_Init+0x40>)
 800268a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800268e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002690:	4b08      	ldr	r3, [pc, #32]	@ (80026b4 <HAL_Init+0x40>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a07      	ldr	r2, [pc, #28]	@ (80026b4 <HAL_Init+0x40>)
 8002696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800269c:	2003      	movs	r0, #3
 800269e:	f000 fe6f 	bl	8003380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026a2:	200f      	movs	r0, #15
 80026a4:	f000 f808 	bl	80026b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a8:	f7ff fb10 	bl	8001ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023c00 	.word	0x40023c00

080026b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c0:	4b12      	ldr	r3, [pc, #72]	@ (800270c <HAL_InitTick+0x54>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b12      	ldr	r3, [pc, #72]	@ (8002710 <HAL_InitTick+0x58>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	4619      	mov	r1, r3
 80026ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fe87 	bl	80033ea <HAL_SYSTICK_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e00e      	b.n	8002704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b0f      	cmp	r3, #15
 80026ea:	d80a      	bhi.n	8002702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ec:	2200      	movs	r2, #0
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	f04f 30ff 	mov.w	r0, #4294967295
 80026f4:	f000 fe4f 	bl	8003396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f8:	4a06      	ldr	r2, [pc, #24]	@ (8002714 <HAL_InitTick+0x5c>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	e000      	b.n	8002704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	2000002c 	.word	0x2000002c
 8002710:	20000034 	.word	0x20000034
 8002714:	20000030 	.word	0x20000030

08002718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800271c:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <HAL_IncTick+0x20>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	4b06      	ldr	r3, [pc, #24]	@ (800273c <HAL_IncTick+0x24>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4413      	add	r3, r2
 8002728:	4a04      	ldr	r2, [pc, #16]	@ (800273c <HAL_IncTick+0x24>)
 800272a:	6013      	str	r3, [r2, #0]
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000034 	.word	0x20000034
 800273c:	200009d0 	.word	0x200009d0

08002740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return uwTick;
 8002744:	4b03      	ldr	r3, [pc, #12]	@ (8002754 <HAL_GetTick+0x14>)
 8002746:	681b      	ldr	r3, [r3, #0]
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	200009d0 	.word	0x200009d0

08002758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002760:	f7ff ffee 	bl	8002740 <HAL_GetTick>
 8002764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002770:	d005      	beq.n	800277e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002772:	4b0a      	ldr	r3, [pc, #40]	@ (800279c <HAL_Delay+0x44>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4413      	add	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800277e:	bf00      	nop
 8002780:	f7ff ffde 	bl	8002740 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	429a      	cmp	r2, r3
 800278e:	d8f7      	bhi.n	8002780 <HAL_Delay+0x28>
  {
  }
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000034 	.word	0x20000034

080027a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027a8:	2300      	movs	r3, #0
 80027aa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e033      	b.n	800281e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d109      	bne.n	80027d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff faac 	bl	8001d1c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d118      	bne.n	8002810 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80027e6:	f023 0302 	bic.w	r3, r3, #2
 80027ea:	f043 0202 	orr.w	r2, r3, #2
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fb6c 	bl	8002ed0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	f023 0303 	bic.w	r3, r3, #3
 8002806:	f043 0201 	orr.w	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	641a      	str	r2, [r3, #64]	@ 0x40
 800280e:	e001      	b.n	8002814 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800281c:	7bfb      	ldrb	r3, [r7, #15]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	2300      	movs	r3, #0
 8002834:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f003 0320 	and.w	r3, r3, #32
 8002854:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d049      	beq.n	80028f0 <HAL_ADC_IRQHandler+0xca>
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d046      	beq.n	80028f0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b00      	cmp	r3, #0
 800286c:	d105      	bne.n	800287a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002872:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d12b      	bne.n	80028e0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800288c:	2b00      	cmp	r3, #0
 800288e:	d127      	bne.n	80028e0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002896:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800289a:	2b00      	cmp	r3, #0
 800289c:	d006      	beq.n	80028ac <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d119      	bne.n	80028e0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0220 	bic.w	r2, r2, #32
 80028ba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d105      	bne.n	80028e0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	f043 0201 	orr.w	r2, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7fe fa05 	bl	8000cf0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f06f 0212 	mvn.w	r2, #18
 80028ee:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 0304 	and.w	r3, r3, #4
 80028f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028fe:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d057      	beq.n	80029b6 <HAL_ADC_IRQHandler+0x190>
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d054      	beq.n	80029b6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b00      	cmp	r3, #0
 8002916:	d105      	bne.n	8002924 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d139      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002938:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800293c:	2b00      	cmp	r3, #0
 800293e:	d006      	beq.n	800294e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800294a:	2b00      	cmp	r3, #0
 800294c:	d12b      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002958:	2b00      	cmp	r3, #0
 800295a:	d124      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002966:	2b00      	cmp	r3, #0
 8002968:	d11d      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800296e:	2b00      	cmp	r3, #0
 8002970:	d119      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002980:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d105      	bne.n	80029a6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	f043 0201 	orr.w	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fc10 	bl	80031cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 020c 	mvn.w	r2, #12
 80029b4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d017      	beq.n	80029fc <HAL_ADC_IRQHandler+0x1d6>
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d014      	beq.n	80029fc <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d10d      	bne.n	80029fc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f929 	bl	8002c44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f06f 0201 	mvn.w	r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a0a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d015      	beq.n	8002a3e <HAL_ADC_IRQHandler+0x218>
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d012      	beq.n	8002a3e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1c:	f043 0202 	orr.w	r2, r3, #2
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0220 	mvn.w	r2, #32
 8002a2c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f912 	bl	8002c58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0220 	mvn.w	r2, #32
 8002a3c:	601a      	str	r2, [r3, #0]
  }
}
 8002a3e:	bf00      	nop
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b088      	sub	sp, #32
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_Start_DMA+0x22>
 8002a66:	2302      	movs	r3, #2
 8002a68:	e0d0      	b.n	8002c0c <HAL_ADC_Start_DMA+0x1c4>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d018      	beq.n	8002ab2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a90:	4b60      	ldr	r3, [pc, #384]	@ (8002c14 <HAL_ADC_Start_DMA+0x1cc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a60      	ldr	r2, [pc, #384]	@ (8002c18 <HAL_ADC_Start_DMA+0x1d0>)
 8002a96:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9a:	0c9a      	lsrs	r2, r3, #18
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	4413      	add	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002aa4:	e002      	b.n	8002aac <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f9      	bne.n	8002aa6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002abc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ac0:	d107      	bne.n	8002ad2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ad0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	f040 8088 	bne.w	8002bf2 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002aea:	f023 0301 	bic.w	r3, r3, #1
 8002aee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d007      	beq.n	8002b14 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b0c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b20:	d106      	bne.n	8002b30 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b26:	f023 0206 	bic.w	r2, r3, #6
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b2e:	e002      	b.n	8002b36 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b3e:	4b37      	ldr	r3, [pc, #220]	@ (8002c1c <HAL_ADC_Start_DMA+0x1d4>)
 8002b40:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b46:	4a36      	ldr	r2, [pc, #216]	@ (8002c20 <HAL_ADC_Start_DMA+0x1d8>)
 8002b48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4e:	4a35      	ldr	r2, [pc, #212]	@ (8002c24 <HAL_ADC_Start_DMA+0x1dc>)
 8002b50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b56:	4a34      	ldr	r2, [pc, #208]	@ (8002c28 <HAL_ADC_Start_DMA+0x1e0>)
 8002b58:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002b62:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002b72:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b82:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	334c      	adds	r3, #76	@ 0x4c
 8002b8e:	4619      	mov	r1, r3
 8002b90:	68ba      	ldr	r2, [r7, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f000 fce4 	bl	8003560 <HAL_DMA_Start_IT>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10f      	bne.n	8002bc8 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d129      	bne.n	8002c0a <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bc4:	609a      	str	r2, [r3, #8]
 8002bc6:	e020      	b.n	8002c0a <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a17      	ldr	r2, [pc, #92]	@ (8002c2c <HAL_ADC_Start_DMA+0x1e4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d11b      	bne.n	8002c0a <HAL_ADC_Start_DMA+0x1c2>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d114      	bne.n	8002c0a <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	e00b      	b.n	8002c0a <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	f043 0210 	orr.w	r2, r3, #16
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c02:	f043 0201 	orr.w	r2, r3, #1
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002c0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3720      	adds	r7, #32
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	2000002c 	.word	0x2000002c
 8002c18:	431bde83 	.word	0x431bde83
 8002c1c:	40012300 	.word	0x40012300
 8002c20:	080030c9 	.word	0x080030c9
 8002c24:	08003183 	.word	0x08003183
 8002c28:	0800319f 	.word	0x0800319f
 8002c2c:	40012000 	.word	0x40012000

08002c30 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x1c>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e113      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x244>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b09      	cmp	r3, #9
 8002c96:	d925      	bls.n	8002ce4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68d9      	ldr	r1, [r3, #12]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4413      	add	r3, r2
 8002cac:	3b1e      	subs	r3, #30
 8002cae:	2207      	movs	r2, #7
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	43da      	mvns	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	400a      	ands	r2, r1
 8002cbc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68d9      	ldr	r1, [r3, #12]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	4618      	mov	r0, r3
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4403      	add	r3, r0
 8002cd6:	3b1e      	subs	r3, #30
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	e022      	b.n	8002d2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6919      	ldr	r1, [r3, #16]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	4413      	add	r3, r2
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	400a      	ands	r2, r1
 8002d06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6919      	ldr	r1, [r3, #16]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	4618      	mov	r0, r3
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	4403      	add	r3, r0
 8002d20:	409a      	lsls	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b06      	cmp	r3, #6
 8002d30:	d824      	bhi.n	8002d7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	3b05      	subs	r3, #5
 8002d44:	221f      	movs	r2, #31
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	400a      	ands	r2, r1
 8002d52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	4618      	mov	r0, r3
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3b05      	subs	r3, #5
 8002d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d7a:	e04c      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b0c      	cmp	r3, #12
 8002d82:	d824      	bhi.n	8002dce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	3b23      	subs	r3, #35	@ 0x23
 8002d96:	221f      	movs	r2, #31
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43da      	mvns	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	400a      	ands	r2, r1
 8002da4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	4618      	mov	r0, r3
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3b23      	subs	r3, #35	@ 0x23
 8002dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dcc:	e023      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	3b41      	subs	r3, #65	@ 0x41
 8002de0:	221f      	movs	r2, #31
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43da      	mvns	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	400a      	ands	r2, r1
 8002dee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	3b41      	subs	r3, #65	@ 0x41
 8002e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e16:	4b29      	ldr	r3, [pc, #164]	@ (8002ebc <HAL_ADC_ConfigChannel+0x250>)
 8002e18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a28      	ldr	r2, [pc, #160]	@ (8002ec0 <HAL_ADC_ConfigChannel+0x254>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d10f      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x1d8>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2b12      	cmp	r3, #18
 8002e2a:	d10b      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec0 <HAL_ADC_ConfigChannel+0x254>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d12b      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x23a>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1c      	ldr	r2, [pc, #112]	@ (8002ec4 <HAL_ADC_ConfigChannel+0x258>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d003      	beq.n	8002e60 <HAL_ADC_ConfigChannel+0x1f4>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b11      	cmp	r3, #17
 8002e5e:	d122      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a11      	ldr	r2, [pc, #68]	@ (8002ec4 <HAL_ADC_ConfigChannel+0x258>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d111      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e82:	4b11      	ldr	r3, [pc, #68]	@ (8002ec8 <HAL_ADC_ConfigChannel+0x25c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a11      	ldr	r2, [pc, #68]	@ (8002ecc <HAL_ADC_ConfigChannel+0x260>)
 8002e88:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8c:	0c9a      	lsrs	r2, r3, #18
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e98:	e002      	b.n	8002ea0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f9      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	40012300 	.word	0x40012300
 8002ec0:	40012000 	.word	0x40012000
 8002ec4:	10000012 	.word	0x10000012
 8002ec8:	2000002c 	.word	0x2000002c
 8002ecc:	431bde83 	.word	0x431bde83

08002ed0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ed8:	4b79      	ldr	r3, [pc, #484]	@ (80030c0 <ADC_Init+0x1f0>)
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	431a      	orrs	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6859      	ldr	r1, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	021a      	lsls	r2, r3, #8
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6859      	ldr	r1, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6899      	ldr	r1, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f62:	4a58      	ldr	r2, [pc, #352]	@ (80030c4 <ADC_Init+0x1f4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d022      	beq.n	8002fae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6899      	ldr	r1, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6899      	ldr	r1, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	e00f      	b.n	8002fce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fcc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0202 	bic.w	r2, r2, #2
 8002fdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6899      	ldr	r1, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	7e1b      	ldrb	r3, [r3, #24]
 8002fe8:	005a      	lsls	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01b      	beq.n	8003034 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800300a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800301a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6859      	ldr	r1, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	3b01      	subs	r3, #1
 8003028:	035a      	lsls	r2, r3, #13
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	e007      	b.n	8003044 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003042:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003052:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	3b01      	subs	r3, #1
 8003060:	051a      	lsls	r2, r3, #20
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003078:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6899      	ldr	r1, [r3, #8]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003086:	025a      	lsls	r2, r3, #9
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800309e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6899      	ldr	r1, [r3, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	029a      	lsls	r2, r3, #10
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	609a      	str	r2, [r3, #8]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	40012300 	.word	0x40012300
 80030c4:	0f000001 	.word	0x0f000001

080030c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d13c      	bne.n	800315c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d12b      	bne.n	8003154 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003100:	2b00      	cmp	r3, #0
 8003102:	d127      	bne.n	8003154 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800310a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800310e:	2b00      	cmp	r3, #0
 8003110:	d006      	beq.n	8003120 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800311c:	2b00      	cmp	r3, #0
 800311e:	d119      	bne.n	8003154 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0220 	bic.w	r2, r2, #32
 800312e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003140:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314c:	f043 0201 	orr.w	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f7fd fdcb 	bl	8000cf0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800315a:	e00e      	b.n	800317a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f7ff fd75 	bl	8002c58 <HAL_ADC_ErrorCallback>
}
 800316e:	e004      	b.n	800317a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	4798      	blx	r3
}
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f7ff fd4d 	bl	8002c30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031aa:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2240      	movs	r2, #64	@ 0x40
 80031b0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b6:	f043 0204 	orr.w	r2, r3, #4
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f7ff fd4a 	bl	8002c58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003224 <__NVIC_SetPriorityGrouping+0x44>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031fc:	4013      	ands	r3, r2
 80031fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800320c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003212:	4a04      	ldr	r2, [pc, #16]	@ (8003224 <__NVIC_SetPriorityGrouping+0x44>)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	60d3      	str	r3, [r2, #12]
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800322c:	4b04      	ldr	r3, [pc, #16]	@ (8003240 <__NVIC_GetPriorityGrouping+0x18>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	f003 0307 	and.w	r3, r3, #7
}
 8003236:	4618      	mov	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003252:	2b00      	cmp	r3, #0
 8003254:	db0b      	blt.n	800326e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	f003 021f 	and.w	r2, r3, #31
 800325c:	4907      	ldr	r1, [pc, #28]	@ (800327c <__NVIC_EnableIRQ+0x38>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2001      	movs	r0, #1
 8003266:	fa00 f202 	lsl.w	r2, r0, r2
 800326a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	e000e100 	.word	0xe000e100

08003280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	6039      	str	r1, [r7, #0]
 800328a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003290:	2b00      	cmp	r3, #0
 8003292:	db0a      	blt.n	80032aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	b2da      	uxtb	r2, r3
 8003298:	490c      	ldr	r1, [pc, #48]	@ (80032cc <__NVIC_SetPriority+0x4c>)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	0112      	lsls	r2, r2, #4
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	440b      	add	r3, r1
 80032a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a8:	e00a      	b.n	80032c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	4908      	ldr	r1, [pc, #32]	@ (80032d0 <__NVIC_SetPriority+0x50>)
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	3b04      	subs	r3, #4
 80032b8:	0112      	lsls	r2, r2, #4
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	440b      	add	r3, r1
 80032be:	761a      	strb	r2, [r3, #24]
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	e000e100 	.word	0xe000e100
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b089      	sub	sp, #36	@ 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f1c3 0307 	rsb	r3, r3, #7
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	bf28      	it	cs
 80032f2:	2304      	movcs	r3, #4
 80032f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3304      	adds	r3, #4
 80032fa:	2b06      	cmp	r3, #6
 80032fc:	d902      	bls.n	8003304 <NVIC_EncodePriority+0x30>
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3b03      	subs	r3, #3
 8003302:	e000      	b.n	8003306 <NVIC_EncodePriority+0x32>
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003308:	f04f 32ff 	mov.w	r2, #4294967295
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43da      	mvns	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	401a      	ands	r2, r3
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800331c:	f04f 31ff 	mov.w	r1, #4294967295
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	43d9      	mvns	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	4313      	orrs	r3, r2
         );
}
 800332e:	4618      	mov	r0, r3
 8003330:	3724      	adds	r7, #36	@ 0x24
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3b01      	subs	r3, #1
 8003348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800334c:	d301      	bcc.n	8003352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800334e:	2301      	movs	r3, #1
 8003350:	e00f      	b.n	8003372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003352:	4a0a      	ldr	r2, [pc, #40]	@ (800337c <SysTick_Config+0x40>)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3b01      	subs	r3, #1
 8003358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800335a:	210f      	movs	r1, #15
 800335c:	f04f 30ff 	mov.w	r0, #4294967295
 8003360:	f7ff ff8e 	bl	8003280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003364:	4b05      	ldr	r3, [pc, #20]	@ (800337c <SysTick_Config+0x40>)
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800336a:	4b04      	ldr	r3, [pc, #16]	@ (800337c <SysTick_Config+0x40>)
 800336c:	2207      	movs	r2, #7
 800336e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	e000e010 	.word	0xe000e010

08003380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff ff29 	bl	80031e0 <__NVIC_SetPriorityGrouping>
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003396:	b580      	push	{r7, lr}
 8003398:	b086      	sub	sp, #24
 800339a:	af00      	add	r7, sp, #0
 800339c:	4603      	mov	r3, r0
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
 80033a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033a8:	f7ff ff3e 	bl	8003228 <__NVIC_GetPriorityGrouping>
 80033ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	6978      	ldr	r0, [r7, #20]
 80033b4:	f7ff ff8e 	bl	80032d4 <NVIC_EncodePriority>
 80033b8:	4602      	mov	r2, r0
 80033ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff ff5d 	bl	8003280 <__NVIC_SetPriority>
}
 80033c6:	bf00      	nop
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b082      	sub	sp, #8
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4603      	mov	r3, r0
 80033d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff ff31 	bl	8003244 <__NVIC_EnableIRQ>
}
 80033e2:	bf00      	nop
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b082      	sub	sp, #8
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff ffa2 	bl	800333c <SysTick_Config>
 80033f8:	4603      	mov	r3, r0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003410:	f7ff f996 	bl	8002740 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e099      	b.n	8003554 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0201 	bic.w	r2, r2, #1
 800343e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003440:	e00f      	b.n	8003462 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003442:	f7ff f97d 	bl	8002740 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b05      	cmp	r3, #5
 800344e:	d908      	bls.n	8003462 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2203      	movs	r2, #3
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e078      	b.n	8003554 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1e8      	bne.n	8003442 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	4b38      	ldr	r3, [pc, #224]	@ (800355c <HAL_DMA_Init+0x158>)
 800347c:	4013      	ands	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800348e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800349a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d107      	bne.n	80034cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c4:	4313      	orrs	r3, r2
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f023 0307 	bic.w	r3, r3, #7
 80034e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d117      	bne.n	8003526 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00e      	beq.n	8003526 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 faab 	bl	8003a64 <DMA_CheckFifoParam>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2240      	movs	r2, #64	@ 0x40
 8003518:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003522:	2301      	movs	r3, #1
 8003524:	e016      	b.n	8003554 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fa62 	bl	80039f8 <DMA_CalcBaseAndBitshift>
 8003534:	4603      	mov	r3, r0
 8003536:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353c:	223f      	movs	r2, #63	@ 0x3f
 800353e:	409a      	lsls	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	f010803f 	.word	0xf010803f

08003560 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
 800356c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003576:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_DMA_Start_IT+0x26>
 8003582:	2302      	movs	r3, #2
 8003584:	e040      	b.n	8003608 <HAL_DMA_Start_IT+0xa8>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b01      	cmp	r3, #1
 8003598:	d12f      	bne.n	80035fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2202      	movs	r2, #2
 800359e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f9f4 	bl	800399c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b8:	223f      	movs	r2, #63	@ 0x3f
 80035ba:	409a      	lsls	r2, r3
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f042 0216 	orr.w	r2, r2, #22
 80035ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0208 	orr.w	r2, r2, #8
 80035e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	e005      	b.n	8003606 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003602:	2302      	movs	r3, #2
 8003604:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003606:	7dfb      	ldrb	r3, [r7, #23]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d004      	beq.n	800362e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2280      	movs	r2, #128	@ 0x80
 8003628:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e00c      	b.n	8003648 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2205      	movs	r2, #5
 8003632:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0201 	bic.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003660:	4b8e      	ldr	r3, [pc, #568]	@ (800389c <HAL_DMA_IRQHandler+0x248>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a8e      	ldr	r2, [pc, #568]	@ (80038a0 <HAL_DMA_IRQHandler+0x24c>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	0a9b      	lsrs	r3, r3, #10
 800366c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003672:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800367e:	2208      	movs	r2, #8
 8003680:	409a      	lsls	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4013      	ands	r3, r2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d01a      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	d013      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0204 	bic.w	r2, r2, #4
 80036a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ac:	2208      	movs	r2, #8
 80036ae:	409a      	lsls	r2, r3
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b8:	f043 0201 	orr.w	r2, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c4:	2201      	movs	r2, #1
 80036c6:	409a      	lsls	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d012      	beq.n	80036f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00b      	beq.n	80036f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e2:	2201      	movs	r2, #1
 80036e4:	409a      	lsls	r2, r3
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ee:	f043 0202 	orr.w	r2, r3, #2
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036fa:	2204      	movs	r2, #4
 80036fc:	409a      	lsls	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4013      	ands	r3, r2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d012      	beq.n	800372c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00b      	beq.n	800372c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003718:	2204      	movs	r2, #4
 800371a:	409a      	lsls	r2, r3
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003724:	f043 0204 	orr.w	r2, r3, #4
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003730:	2210      	movs	r2, #16
 8003732:	409a      	lsls	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4013      	ands	r3, r2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d043      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d03c      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374e:	2210      	movs	r2, #16
 8003750:	409a      	lsls	r2, r3
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d018      	beq.n	8003796 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d108      	bne.n	8003784 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d024      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	4798      	blx	r3
 8003782:	e01f      	b.n	80037c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01b      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4798      	blx	r3
 8003794:	e016      	b.n	80037c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d107      	bne.n	80037b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0208 	bic.w	r2, r2, #8
 80037b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c8:	2220      	movs	r2, #32
 80037ca:	409a      	lsls	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 808f 	beq.w	80038f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 8087 	beq.w	80038f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ea:	2220      	movs	r2, #32
 80037ec:	409a      	lsls	r2, r3
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b05      	cmp	r3, #5
 80037fc:	d136      	bne.n	800386c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0216 	bic.w	r2, r2, #22
 800380c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695a      	ldr	r2, [r3, #20]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800381c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d103      	bne.n	800382e <HAL_DMA_IRQHandler+0x1da>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0208 	bic.w	r2, r2, #8
 800383c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003842:	223f      	movs	r2, #63	@ 0x3f
 8003844:	409a      	lsls	r2, r3
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800385e:	2b00      	cmp	r3, #0
 8003860:	d07e      	beq.n	8003960 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	4798      	blx	r3
        }
        return;
 800386a:	e079      	b.n	8003960 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d01d      	beq.n	80038b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10d      	bne.n	80038a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388c:	2b00      	cmp	r3, #0
 800388e:	d031      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	4798      	blx	r3
 8003898:	e02c      	b.n	80038f4 <HAL_DMA_IRQHandler+0x2a0>
 800389a:	bf00      	nop
 800389c:	2000002c 	.word	0x2000002c
 80038a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d023      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	4798      	blx	r3
 80038b4:	e01e      	b.n	80038f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10f      	bne.n	80038e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 0210 	bic.w	r2, r2, #16
 80038d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d032      	beq.n	8003962 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d022      	beq.n	800394e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2205      	movs	r2, #5
 800390c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	3301      	adds	r3, #1
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	429a      	cmp	r2, r3
 800392a:	d307      	bcc.n	800393c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f2      	bne.n	8003920 <HAL_DMA_IRQHandler+0x2cc>
 800393a:	e000      	b.n	800393e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800393c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	4798      	blx	r3
 800395e:	e000      	b.n	8003962 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003960:	bf00      	nop
    }
  }
}
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003976:	b2db      	uxtb	r3, r3
}
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80039b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2b40      	cmp	r3, #64	@ 0x40
 80039c8:	d108      	bne.n	80039dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039da:	e007      	b.n	80039ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68ba      	ldr	r2, [r7, #8]
 80039e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	60da      	str	r2, [r3, #12]
}
 80039ec:	bf00      	nop
 80039ee:	3714      	adds	r7, #20
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	3b10      	subs	r3, #16
 8003a08:	4a14      	ldr	r2, [pc, #80]	@ (8003a5c <DMA_CalcBaseAndBitshift+0x64>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a12:	4a13      	ldr	r2, [pc, #76]	@ (8003a60 <DMA_CalcBaseAndBitshift+0x68>)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d909      	bls.n	8003a3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003a2e:	f023 0303 	bic.w	r3, r3, #3
 8003a32:	1d1a      	adds	r2, r3, #4
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a38:	e007      	b.n	8003a4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003a42:	f023 0303 	bic.w	r3, r3, #3
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	aaaaaaab 	.word	0xaaaaaaab
 8003a60:	0800d78c 	.word	0x0800d78c

08003a64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d11f      	bne.n	8003abe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d856      	bhi.n	8003b32 <DMA_CheckFifoParam+0xce>
 8003a84:	a201      	add	r2, pc, #4	@ (adr r2, 8003a8c <DMA_CheckFifoParam+0x28>)
 8003a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8a:	bf00      	nop
 8003a8c:	08003a9d 	.word	0x08003a9d
 8003a90:	08003aaf 	.word	0x08003aaf
 8003a94:	08003a9d 	.word	0x08003a9d
 8003a98:	08003b33 	.word	0x08003b33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d046      	beq.n	8003b36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aac:	e043      	b.n	8003b36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ab6:	d140      	bne.n	8003b3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003abc:	e03d      	b.n	8003b3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ac6:	d121      	bne.n	8003b0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d837      	bhi.n	8003b3e <DMA_CheckFifoParam+0xda>
 8003ace:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad4 <DMA_CheckFifoParam+0x70>)
 8003ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad4:	08003ae5 	.word	0x08003ae5
 8003ad8:	08003aeb 	.word	0x08003aeb
 8003adc:	08003ae5 	.word	0x08003ae5
 8003ae0:	08003afd 	.word	0x08003afd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae8:	e030      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d025      	beq.n	8003b42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003afa:	e022      	b.n	8003b42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b00:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b04:	d11f      	bne.n	8003b46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b0a:	e01c      	b.n	8003b46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d903      	bls.n	8003b1a <DMA_CheckFifoParam+0xb6>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d003      	beq.n	8003b20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b18:	e018      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8003b1e:	e015      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00e      	beq.n	8003b4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b30:	e00b      	b.n	8003b4a <DMA_CheckFifoParam+0xe6>
      break;
 8003b32:	bf00      	nop
 8003b34:	e00a      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b36:	bf00      	nop
 8003b38:	e008      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e006      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b3e:	bf00      	nop
 8003b40:	e004      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b42:	bf00      	nop
 8003b44:	e002      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;   
 8003b46:	bf00      	nop
 8003b48:	e000      	b.n	8003b4c <DMA_CheckFifoParam+0xe8>
      break;
 8003b4a:	bf00      	nop
    }
  } 
  
  return status; 
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop

08003b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b089      	sub	sp, #36	@ 0x24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b72:	2300      	movs	r3, #0
 8003b74:	61fb      	str	r3, [r7, #28]
 8003b76:	e159      	b.n	8003e2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b78:	2201      	movs	r2, #1
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	f040 8148 	bne.w	8003e26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d005      	beq.n	8003bae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d130      	bne.n	8003c10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	2203      	movs	r2, #3
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003be4:	2201      	movs	r2, #1
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	091b      	lsrs	r3, r3, #4
 8003bfa:	f003 0201 	and.w	r2, r3, #1
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d017      	beq.n	8003c4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	2203      	movs	r2, #3
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	4013      	ands	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d123      	bne.n	8003ca0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	08da      	lsrs	r2, r3, #3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3208      	adds	r2, #8
 8003c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	220f      	movs	r2, #15
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	08da      	lsrs	r2, r3, #3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3208      	adds	r2, #8
 8003c9a:	69b9      	ldr	r1, [r7, #24]
 8003c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	2203      	movs	r2, #3
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 0203 	and.w	r2, r3, #3
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 80a2 	beq.w	8003e26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	4b57      	ldr	r3, [pc, #348]	@ (8003e44 <HAL_GPIO_Init+0x2e8>)
 8003ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cea:	4a56      	ldr	r2, [pc, #344]	@ (8003e44 <HAL_GPIO_Init+0x2e8>)
 8003cec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cf2:	4b54      	ldr	r3, [pc, #336]	@ (8003e44 <HAL_GPIO_Init+0x2e8>)
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cfe:	4a52      	ldr	r2, [pc, #328]	@ (8003e48 <HAL_GPIO_Init+0x2ec>)
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	089b      	lsrs	r3, r3, #2
 8003d04:	3302      	adds	r3, #2
 8003d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	220f      	movs	r2, #15
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a49      	ldr	r2, [pc, #292]	@ (8003e4c <HAL_GPIO_Init+0x2f0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d019      	beq.n	8003d5e <HAL_GPIO_Init+0x202>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a48      	ldr	r2, [pc, #288]	@ (8003e50 <HAL_GPIO_Init+0x2f4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <HAL_GPIO_Init+0x1fe>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a47      	ldr	r2, [pc, #284]	@ (8003e54 <HAL_GPIO_Init+0x2f8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00d      	beq.n	8003d56 <HAL_GPIO_Init+0x1fa>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a46      	ldr	r2, [pc, #280]	@ (8003e58 <HAL_GPIO_Init+0x2fc>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <HAL_GPIO_Init+0x1f6>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a45      	ldr	r2, [pc, #276]	@ (8003e5c <HAL_GPIO_Init+0x300>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <HAL_GPIO_Init+0x1f2>
 8003d4a:	2304      	movs	r3, #4
 8003d4c:	e008      	b.n	8003d60 <HAL_GPIO_Init+0x204>
 8003d4e:	2307      	movs	r3, #7
 8003d50:	e006      	b.n	8003d60 <HAL_GPIO_Init+0x204>
 8003d52:	2303      	movs	r3, #3
 8003d54:	e004      	b.n	8003d60 <HAL_GPIO_Init+0x204>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e002      	b.n	8003d60 <HAL_GPIO_Init+0x204>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <HAL_GPIO_Init+0x204>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	f002 0203 	and.w	r2, r2, #3
 8003d66:	0092      	lsls	r2, r2, #2
 8003d68:	4093      	lsls	r3, r2
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d70:	4935      	ldr	r1, [pc, #212]	@ (8003e48 <HAL_GPIO_Init+0x2ec>)
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	3302      	adds	r3, #2
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d7e:	4b38      	ldr	r3, [pc, #224]	@ (8003e60 <HAL_GPIO_Init+0x304>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003da2:	4a2f      	ldr	r2, [pc, #188]	@ (8003e60 <HAL_GPIO_Init+0x304>)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003da8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e60 <HAL_GPIO_Init+0x304>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4013      	ands	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dcc:	4a24      	ldr	r2, [pc, #144]	@ (8003e60 <HAL_GPIO_Init+0x304>)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dd2:	4b23      	ldr	r3, [pc, #140]	@ (8003e60 <HAL_GPIO_Init+0x304>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003df6:	4a1a      	ldr	r2, [pc, #104]	@ (8003e60 <HAL_GPIO_Init+0x304>)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dfc:	4b18      	ldr	r3, [pc, #96]	@ (8003e60 <HAL_GPIO_Init+0x304>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e20:	4a0f      	ldr	r2, [pc, #60]	@ (8003e60 <HAL_GPIO_Init+0x304>)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	61fb      	str	r3, [r7, #28]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	2b0f      	cmp	r3, #15
 8003e30:	f67f aea2 	bls.w	8003b78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e34:	bf00      	nop
 8003e36:	bf00      	nop
 8003e38:	3724      	adds	r7, #36	@ 0x24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40013800 	.word	0x40013800
 8003e4c:	40020000 	.word	0x40020000
 8003e50:	40020400 	.word	0x40020400
 8003e54:	40020800 	.word	0x40020800
 8003e58:	40020c00 	.word	0x40020c00
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40013c00 	.word	0x40013c00

08003e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	807b      	strh	r3, [r7, #2]
 8003e70:	4613      	mov	r3, r2
 8003e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e74:	787b      	ldrb	r3, [r7, #1]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e7a:	887a      	ldrh	r2, [r7, #2]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e80:	e003      	b.n	8003e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e82:	887b      	ldrh	r3, [r7, #2]
 8003e84:	041a      	lsls	r2, r3, #16
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	619a      	str	r2, [r3, #24]
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b085      	sub	sp, #20
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ea8:	887a      	ldrh	r2, [r7, #2]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4013      	ands	r3, r2
 8003eae:	041a      	lsls	r2, r3, #16
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	43d9      	mvns	r1, r3
 8003eb4:	887b      	ldrh	r3, [r7, #2]
 8003eb6:	400b      	ands	r3, r1
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	619a      	str	r2, [r3, #24]
}
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e12b      	b.n	8004136 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fd ff90 	bl	8001e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2224      	movs	r2, #36	@ 0x24
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f30:	f004 fde6 	bl	8008b00 <HAL_RCC_GetPCLK1Freq>
 8003f34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4a81      	ldr	r2, [pc, #516]	@ (8004140 <HAL_I2C_Init+0x274>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d807      	bhi.n	8003f50 <HAL_I2C_Init+0x84>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4a80      	ldr	r2, [pc, #512]	@ (8004144 <HAL_I2C_Init+0x278>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	bf94      	ite	ls
 8003f48:	2301      	movls	r3, #1
 8003f4a:	2300      	movhi	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	e006      	b.n	8003f5e <HAL_I2C_Init+0x92>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4a7d      	ldr	r2, [pc, #500]	@ (8004148 <HAL_I2C_Init+0x27c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	bf94      	ite	ls
 8003f58:	2301      	movls	r3, #1
 8003f5a:	2300      	movhi	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e0e7      	b.n	8004136 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4a78      	ldr	r2, [pc, #480]	@ (800414c <HAL_I2C_Init+0x280>)
 8003f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6e:	0c9b      	lsrs	r3, r3, #18
 8003f70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4a6a      	ldr	r2, [pc, #424]	@ (8004140 <HAL_I2C_Init+0x274>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d802      	bhi.n	8003fa0 <HAL_I2C_Init+0xd4>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	e009      	b.n	8003fb4 <HAL_I2C_Init+0xe8>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003fa6:	fb02 f303 	mul.w	r3, r2, r3
 8003faa:	4a69      	ldr	r2, [pc, #420]	@ (8004150 <HAL_I2C_Init+0x284>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	099b      	lsrs	r3, r3, #6
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003fc6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	495c      	ldr	r1, [pc, #368]	@ (8004140 <HAL_I2C_Init+0x274>)
 8003fd0:	428b      	cmp	r3, r1
 8003fd2:	d819      	bhi.n	8004008 <HAL_I2C_Init+0x13c>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	1e59      	subs	r1, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fe2:	1c59      	adds	r1, r3, #1
 8003fe4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003fe8:	400b      	ands	r3, r1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_I2C_Init+0x138>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1e59      	subs	r1, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004002:	e051      	b.n	80040a8 <HAL_I2C_Init+0x1dc>
 8004004:	2304      	movs	r3, #4
 8004006:	e04f      	b.n	80040a8 <HAL_I2C_Init+0x1dc>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d111      	bne.n	8004034 <HAL_I2C_Init+0x168>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	1e58      	subs	r0, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	440b      	add	r3, r1
 800401e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004022:	3301      	adds	r3, #1
 8004024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf0c      	ite	eq
 800402c:	2301      	moveq	r3, #1
 800402e:	2300      	movne	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	e012      	b.n	800405a <HAL_I2C_Init+0x18e>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	1e58      	subs	r0, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6859      	ldr	r1, [r3, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	0099      	lsls	r1, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	fbb0 f3f3 	udiv	r3, r0, r3
 800404a:	3301      	adds	r3, #1
 800404c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004050:	2b00      	cmp	r3, #0
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_I2C_Init+0x196>
 800405e:	2301      	movs	r3, #1
 8004060:	e022      	b.n	80040a8 <HAL_I2C_Init+0x1dc>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10e      	bne.n	8004088 <HAL_I2C_Init+0x1bc>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1e58      	subs	r0, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6859      	ldr	r1, [r3, #4]
 8004072:	460b      	mov	r3, r1
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	440b      	add	r3, r1
 8004078:	fbb0 f3f3 	udiv	r3, r0, r3
 800407c:	3301      	adds	r3, #1
 800407e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004086:	e00f      	b.n	80040a8 <HAL_I2C_Init+0x1dc>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	1e58      	subs	r0, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6859      	ldr	r1, [r3, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	0099      	lsls	r1, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	fbb0 f3f3 	udiv	r3, r0, r3
 800409e:	3301      	adds	r3, #1
 80040a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	6809      	ldr	r1, [r1, #0]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69da      	ldr	r2, [r3, #28]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80040d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6911      	ldr	r1, [r2, #16]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68d2      	ldr	r2, [r2, #12]
 80040e2:	4311      	orrs	r1, r2
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	430b      	orrs	r3, r1
 80040ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	000186a0 	.word	0x000186a0
 8004144:	001e847f 	.word	0x001e847f
 8004148:	003d08ff 	.word	0x003d08ff
 800414c:	431bde83 	.word	0x431bde83
 8004150:	10624dd3 	.word	0x10624dd3

08004154 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004166:	2b80      	cmp	r3, #128	@ 0x80
 8004168:	d103      	bne.n	8004172 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2200      	movs	r2, #0
 8004170:	611a      	str	r2, [r3, #16]
  }
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
	...

08004180 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	4608      	mov	r0, r1
 800418a:	4611      	mov	r1, r2
 800418c:	461a      	mov	r2, r3
 800418e:	4603      	mov	r3, r0
 8004190:	817b      	strh	r3, [r7, #10]
 8004192:	460b      	mov	r3, r1
 8004194:	813b      	strh	r3, [r7, #8]
 8004196:	4613      	mov	r3, r2
 8004198:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800419a:	f7fe fad1 	bl	8002740 <HAL_GetTick>
 800419e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b20      	cmp	r3, #32
 80041aa:	f040 80d9 	bne.w	8004360 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	2319      	movs	r3, #25
 80041b4:	2201      	movs	r2, #1
 80041b6:	496d      	ldr	r1, [pc, #436]	@ (800436c <HAL_I2C_Mem_Write+0x1ec>)
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f002 fb9b 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80041c4:	2302      	movs	r3, #2
 80041c6:	e0cc      	b.n	8004362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d101      	bne.n	80041d6 <HAL_I2C_Mem_Write+0x56>
 80041d2:	2302      	movs	r3, #2
 80041d4:	e0c5      	b.n	8004362 <HAL_I2C_Mem_Write+0x1e2>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0301 	and.w	r3, r3, #1
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d007      	beq.n	80041fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800420a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2221      	movs	r2, #33	@ 0x21
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2240      	movs	r2, #64	@ 0x40
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a3a      	ldr	r2, [r7, #32]
 8004226:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800422c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004232:	b29a      	uxth	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4a4d      	ldr	r2, [pc, #308]	@ (8004370 <HAL_I2C_Mem_Write+0x1f0>)
 800423c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800423e:	88f8      	ldrh	r0, [r7, #6]
 8004240:	893a      	ldrh	r2, [r7, #8]
 8004242:	8979      	ldrh	r1, [r7, #10]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	9301      	str	r3, [sp, #4]
 8004248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	4603      	mov	r3, r0
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f002 f80e 	bl	8006270 <I2C_RequestMemoryWrite>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d052      	beq.n	8004300 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e081      	b.n	8004362 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f002 fc60 	bl	8006b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00d      	beq.n	800428a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004272:	2b04      	cmp	r3, #4
 8004274:	d107      	bne.n	8004286 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004284:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e06b      	b.n	8004362 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428e:	781a      	ldrb	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d11b      	bne.n	8004300 <HAL_I2C_Mem_Write+0x180>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d017      	beq.n	8004300 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d4:	781a      	ldrb	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1aa      	bne.n	800425e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f002 fc53 	bl	8006bb8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00d      	beq.n	8004334 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431c:	2b04      	cmp	r3, #4
 800431e:	d107      	bne.n	8004330 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800432e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e016      	b.n	8004362 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	e000      	b.n	8004362 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004360:	2302      	movs	r3, #2
  }
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	00100002 	.word	0x00100002
 8004370:	ffff0000 	.word	0xffff0000

08004374 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08c      	sub	sp, #48	@ 0x30
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	4608      	mov	r0, r1
 800437e:	4611      	mov	r1, r2
 8004380:	461a      	mov	r2, r3
 8004382:	4603      	mov	r3, r0
 8004384:	817b      	strh	r3, [r7, #10]
 8004386:	460b      	mov	r3, r1
 8004388:	813b      	strh	r3, [r7, #8]
 800438a:	4613      	mov	r3, r2
 800438c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800438e:	f7fe f9d7 	bl	8002740 <HAL_GetTick>
 8004392:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b20      	cmp	r3, #32
 800439e:	f040 8214 	bne.w	80047ca <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	2319      	movs	r3, #25
 80043a8:	2201      	movs	r2, #1
 80043aa:	497b      	ldr	r1, [pc, #492]	@ (8004598 <HAL_I2C_Mem_Read+0x224>)
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f002 faa1 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80043b8:	2302      	movs	r3, #2
 80043ba:	e207      	b.n	80047cc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_I2C_Mem_Read+0x56>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e200      	b.n	80047cc <HAL_I2C_Mem_Read+0x458>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d007      	beq.n	80043f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2222      	movs	r2, #34	@ 0x22
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2240      	movs	r2, #64	@ 0x40
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800441a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004420:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4a5b      	ldr	r2, [pc, #364]	@ (800459c <HAL_I2C_Mem_Read+0x228>)
 8004430:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004432:	88f8      	ldrh	r0, [r7, #6]
 8004434:	893a      	ldrh	r2, [r7, #8]
 8004436:	8979      	ldrh	r1, [r7, #10]
 8004438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800443a:	9301      	str	r3, [sp, #4]
 800443c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	4603      	mov	r3, r0
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f001 ffaa 	bl	800639c <I2C_RequestMemoryRead>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e1bc      	b.n	80047cc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004456:	2b00      	cmp	r3, #0
 8004458:	d113      	bne.n	8004482 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445a:	2300      	movs	r3, #0
 800445c:	623b      	str	r3, [r7, #32]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	623b      	str	r3, [r7, #32]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	623b      	str	r3, [r7, #32]
 800446e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	e190      	b.n	80047a4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004486:	2b01      	cmp	r3, #1
 8004488:	d11b      	bne.n	80044c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	61fb      	str	r3, [r7, #28]
 80044ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	e170      	b.n	80047a4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d11b      	bne.n	8004502 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ea:	2300      	movs	r3, #0
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	e150      	b.n	80047a4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004502:	2300      	movs	r3, #0
 8004504:	617b      	str	r3, [r7, #20]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004518:	e144      	b.n	80047a4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800451e:	2b03      	cmp	r3, #3
 8004520:	f200 80f1 	bhi.w	8004706 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004528:	2b01      	cmp	r3, #1
 800452a:	d123      	bne.n	8004574 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800452c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800452e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f002 fbbb 	bl	8006cac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e145      	b.n	80047cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004572:	e117      	b.n	80047a4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004578:	2b02      	cmp	r3, #2
 800457a:	d14e      	bne.n	800461a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800457c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004582:	2200      	movs	r2, #0
 8004584:	4906      	ldr	r1, [pc, #24]	@ (80045a0 <HAL_I2C_Mem_Read+0x22c>)
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f002 f9b4 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d008      	beq.n	80045a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e11a      	b.n	80047cc <HAL_I2C_Mem_Read+0x458>
 8004596:	bf00      	nop
 8004598:	00100002 	.word	0x00100002
 800459c:	ffff0000 	.word	0xffff0000
 80045a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004602:	3b01      	subs	r3, #1
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004618:	e0c4      	b.n	80047a4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004620:	2200      	movs	r2, #0
 8004622:	496c      	ldr	r1, [pc, #432]	@ (80047d4 <HAL_I2C_Mem_Read+0x460>)
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f002 f965 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e0cb      	b.n	80047cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004642:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004660:	3b01      	subs	r3, #1
 8004662:	b29a      	uxth	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466c:	b29b      	uxth	r3, r3
 800466e:	3b01      	subs	r3, #1
 8004670:	b29a      	uxth	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800467c:	2200      	movs	r2, #0
 800467e:	4955      	ldr	r1, [pc, #340]	@ (80047d4 <HAL_I2C_Mem_Read+0x460>)
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f002 f937 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e09d      	b.n	80047cc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800469e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	1c5a      	adds	r2, r3, #1
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	691a      	ldr	r2, [r3, #16]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046dc:	b2d2      	uxtb	r2, r2
 80046de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004704:	e04e      	b.n	80047a4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004708:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f002 face 	bl	8006cac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e058      	b.n	80047cc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	2b04      	cmp	r3, #4
 8004758:	d124      	bne.n	80047a4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475e:	2b03      	cmp	r3, #3
 8004760:	d107      	bne.n	8004772 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004770:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	b2d2      	uxtb	r2, r2
 800477e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800478e:	3b01      	subs	r3, #1
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479a:	b29b      	uxth	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f47f aeb6 	bne.w	800451a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	e000      	b.n	80047cc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80047ca:	2302      	movs	r3, #2
  }
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3728      	adds	r7, #40	@ 0x28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	00010004 	.word	0x00010004

080047d8 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08a      	sub	sp, #40	@ 0x28
 80047dc:	af02      	add	r7, sp, #8
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	4608      	mov	r0, r1
 80047e2:	4611      	mov	r1, r2
 80047e4:	461a      	mov	r2, r3
 80047e6:	4603      	mov	r3, r0
 80047e8:	817b      	strh	r3, [r7, #10]
 80047ea:	460b      	mov	r3, r1
 80047ec:	813b      	strh	r3, [r7, #8]
 80047ee:	4613      	mov	r3, r2
 80047f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047f6:	f7fd ffa3 	bl	8002740 <HAL_GetTick>
 80047fa:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b20      	cmp	r3, #32
 8004806:	f040 8136 	bne.w	8004a76 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800480a:	4b9d      	ldr	r3, [pc, #628]	@ (8004a80 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	08db      	lsrs	r3, r3, #3
 8004810:	4a9c      	ldr	r2, [pc, #624]	@ (8004a84 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	0a1a      	lsrs	r2, r3, #8
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	009a      	lsls	r2, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	3b01      	subs	r3, #1
 8004828:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d112      	bne.n	8004856 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	f043 0220 	orr.w	r2, r3, #32
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004852:	2302      	movs	r3, #2
 8004854:	e110      	b.n	8004a78 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b02      	cmp	r3, #2
 8004862:	d0df      	beq.n	8004824 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <HAL_I2C_Mem_Write_DMA+0x9a>
 800486e:	2302      	movs	r3, #2
 8004870:	e102      	b.n	8004a78 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b01      	cmp	r3, #1
 8004886:	d007      	beq.n	8004898 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2221      	movs	r2, #33	@ 0x21
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2240      	movs	r2, #64	@ 0x40
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80048c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4a6c      	ldr	r2, [pc, #432]	@ (8004a88 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80048d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80048da:	897a      	ldrh	r2, [r7, #10]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80048e0:	893a      	ldrh	r2, [r7, #8]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80048e6:	88fa      	ldrh	r2, [r7, #6]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f000 80a9 	beq.w	8004a4e <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004900:	2b00      	cmp	r3, #0
 8004902:	d02a      	beq.n	800495a <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004908:	4a60      	ldr	r2, [pc, #384]	@ (8004a8c <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800490a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004910:	4a5f      	ldr	r2, [pc, #380]	@ (8004a90 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8004912:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004918:	2200      	movs	r2, #0
 800491a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004920:	2200      	movs	r2, #0
 8004922:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004928:	2200      	movs	r2, #0
 800492a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004930:	2200      	movs	r2, #0
 8004932:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	4619      	mov	r1, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3310      	adds	r3, #16
 8004944:	461a      	mov	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800494a:	f7fe fe09 	bl	8003560 <HAL_DMA_Start_IT>
 800494e:	4603      	mov	r3, r0
 8004950:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004952:	7efb      	ldrb	r3, [r7, #27]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d166      	bne.n	8004a26 <HAL_I2C_Mem_Write_DMA+0x24e>
 8004958:	e013      	b.n	8004982 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e07a      	b.n	8004a78 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004982:	88f8      	ldrh	r0, [r7, #6]
 8004984:	893a      	ldrh	r2, [r7, #8]
 8004986:	8979      	ldrh	r1, [r7, #10]
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	2323      	movs	r3, #35	@ 0x23
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	4603      	mov	r3, r0
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f001 fc6c 	bl	8006270 <I2C_RequestMemoryWrite>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d022      	beq.n	80049e4 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fe fe34 	bl	8003610 <HAL_DMA_Abort_IT>
 80049a8:	4603      	mov	r3, r0
 80049aa:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b0:	2200      	movs	r2, #0
 80049b2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049c2:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0201 	bic.w	r2, r2, #1
 80049de:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e049      	b.n	8004a78 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e4:	2300      	movs	r3, #0
 80049e6:	613b      	str	r3, [r7, #16]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a10:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a20:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	e028      	b.n	8004a78 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3a:	f043 0210 	orr.w	r2, r3, #16
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e014      	b.n	8004a78 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004a76:	2302      	movs	r3, #2
  }
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3720      	adds	r7, #32
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	2000002c 	.word	0x2000002c
 8004a84:	14f8b589 	.word	0x14f8b589
 8004a88:	ffff0000 	.word	0xffff0000
 8004a8c:	0800656d 	.word	0x0800656d
 8004a90:	0800672b 	.word	0x0800672b

08004a94 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aac:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ab4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004abc:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004abe:	7bfb      	ldrb	r3, [r7, #15]
 8004ac0:	2b10      	cmp	r3, #16
 8004ac2:	d003      	beq.n	8004acc <HAL_I2C_EV_IRQHandler+0x38>
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	2b40      	cmp	r3, #64	@ 0x40
 8004ac8:	f040 80c1 	bne.w	8004c4e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f003 0301 	and.w	r3, r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10d      	bne.n	8004b02 <HAL_I2C_EV_IRQHandler+0x6e>
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004aec:	d003      	beq.n	8004af6 <HAL_I2C_EV_IRQHandler+0x62>
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004af4:	d101      	bne.n	8004afa <HAL_I2C_EV_IRQHandler+0x66>
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <HAL_I2C_EV_IRQHandler+0x68>
 8004afa:	2300      	movs	r3, #0
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	f000 8132 	beq.w	8004d66 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00c      	beq.n	8004b26 <HAL_I2C_EV_IRQHandler+0x92>
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	0a5b      	lsrs	r3, r3, #9
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d006      	beq.n	8004b26 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f002 f953 	bl	8006dc4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fd87 	bl	8005632 <I2C_Master_SB>
 8004b24:	e092      	b.n	8004c4c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	08db      	lsrs	r3, r3, #3
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d009      	beq.n	8004b46 <HAL_I2C_EV_IRQHandler+0xb2>
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	0a5b      	lsrs	r3, r3, #9
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fdfd 	bl	800573e <I2C_Master_ADD10>
 8004b44:	e082      	b.n	8004c4c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	085b      	lsrs	r3, r3, #1
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <HAL_I2C_EV_IRQHandler+0xd2>
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	0a5b      	lsrs	r3, r3, #9
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fe17 	bl	8005792 <I2C_Master_ADDR>
 8004b64:	e072      	b.n	8004c4c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	089b      	lsrs	r3, r3, #2
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d03b      	beq.n	8004bea <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b80:	f000 80f3 	beq.w	8004d6a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	09db      	lsrs	r3, r3, #7
 8004b88:	f003 0301 	and.w	r3, r3, #1
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00f      	beq.n	8004bb0 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	0a9b      	lsrs	r3, r3, #10
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d009      	beq.n	8004bb0 <HAL_I2C_EV_IRQHandler+0x11c>
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	089b      	lsrs	r3, r3, #2
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d103      	bne.n	8004bb0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f9df 	bl	8004f6c <I2C_MasterTransmit_TXE>
 8004bae:	e04d      	b.n	8004c4c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	089b      	lsrs	r3, r3, #2
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 80d6 	beq.w	8004d6a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	0a5b      	lsrs	r3, r3, #9
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 80cf 	beq.w	8004d6a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004bcc:	7bbb      	ldrb	r3, [r7, #14]
 8004bce:	2b21      	cmp	r3, #33	@ 0x21
 8004bd0:	d103      	bne.n	8004bda <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fa66 	bl	80050a4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bd8:	e0c7      	b.n	8004d6a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	2b40      	cmp	r3, #64	@ 0x40
 8004bde:	f040 80c4 	bne.w	8004d6a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fad4 	bl	8005190 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004be8:	e0bf      	b.n	8004d6a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bf8:	f000 80b7 	beq.w	8004d6a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	099b      	lsrs	r3, r3, #6
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00f      	beq.n	8004c28 <HAL_I2C_EV_IRQHandler+0x194>
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	0a9b      	lsrs	r3, r3, #10
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d009      	beq.n	8004c28 <HAL_I2C_EV_IRQHandler+0x194>
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	089b      	lsrs	r3, r3, #2
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d103      	bne.n	8004c28 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fb4d 	bl	80052c0 <I2C_MasterReceive_RXNE>
 8004c26:	e011      	b.n	8004c4c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	089b      	lsrs	r3, r3, #2
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 809a 	beq.w	8004d6a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	0a5b      	lsrs	r3, r3, #9
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 8093 	beq.w	8004d6a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 fc03 	bl	8005450 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c4a:	e08e      	b.n	8004d6a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004c4c:	e08d      	b.n	8004d6a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d004      	beq.n	8004c60 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	61fb      	str	r3, [r7, #28]
 8004c5e:	e007      	b.n	8004c70 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	085b      	lsrs	r3, r3, #1
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d012      	beq.n	8004ca2 <HAL_I2C_EV_IRQHandler+0x20e>
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	0a5b      	lsrs	r3, r3, #9
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00c      	beq.n	8004ca2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d003      	beq.n	8004c98 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004c98:	69b9      	ldr	r1, [r7, #24]
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 ffc8 	bl	8005c30 <I2C_Slave_ADDR>
 8004ca0:	e066      	b.n	8004d70 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	091b      	lsrs	r3, r3, #4
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d009      	beq.n	8004cc2 <HAL_I2C_EV_IRQHandler+0x22e>
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	0a5b      	lsrs	r3, r3, #9
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f001 f802 	bl	8005cc4 <I2C_Slave_STOPF>
 8004cc0:	e056      	b.n	8004d70 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004cc2:	7bbb      	ldrb	r3, [r7, #14]
 8004cc4:	2b21      	cmp	r3, #33	@ 0x21
 8004cc6:	d002      	beq.n	8004cce <HAL_I2C_EV_IRQHandler+0x23a>
 8004cc8:	7bbb      	ldrb	r3, [r7, #14]
 8004cca:	2b29      	cmp	r3, #41	@ 0x29
 8004ccc:	d125      	bne.n	8004d1a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	09db      	lsrs	r3, r3, #7
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00f      	beq.n	8004cfa <HAL_I2C_EV_IRQHandler+0x266>
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	0a9b      	lsrs	r3, r3, #10
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d009      	beq.n	8004cfa <HAL_I2C_EV_IRQHandler+0x266>
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	089b      	lsrs	r3, r3, #2
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d103      	bne.n	8004cfa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fede 	bl	8005ab4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cf8:	e039      	b.n	8004d6e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	089b      	lsrs	r3, r3, #2
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d033      	beq.n	8004d6e <HAL_I2C_EV_IRQHandler+0x2da>
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	0a5b      	lsrs	r3, r3, #9
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d02d      	beq.n	8004d6e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 ff0b 	bl	8005b2e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d18:	e029      	b.n	8004d6e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	099b      	lsrs	r3, r3, #6
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00f      	beq.n	8004d46 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	0a9b      	lsrs	r3, r3, #10
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d009      	beq.n	8004d46 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	089b      	lsrs	r3, r3, #2
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d103      	bne.n	8004d46 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 ff16 	bl	8005b70 <I2C_SlaveReceive_RXNE>
 8004d44:	e014      	b.n	8004d70 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	089b      	lsrs	r3, r3, #2
 8004d4a:	f003 0301 	and.w	r3, r3, #1
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00e      	beq.n	8004d70 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	0a5b      	lsrs	r3, r3, #9
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d008      	beq.n	8004d70 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 ff44 	bl	8005bec <I2C_SlaveReceive_BTF>
 8004d64:	e004      	b.n	8004d70 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004d66:	bf00      	nop
 8004d68:	e002      	b.n	8004d70 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d6a:	bf00      	nop
 8004d6c:	e000      	b.n	8004d70 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004d6e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004d70:	3720      	adds	r7, #32
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b08a      	sub	sp, #40	@ 0x28
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d98:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	0a1b      	lsrs	r3, r3, #8
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00e      	beq.n	8004dc4 <HAL_I2C_ER_IRQHandler+0x4e>
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	0a1b      	lsrs	r3, r3, #8
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d008      	beq.n	8004dc4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	f043 0301 	orr.w	r3, r3, #1
 8004db8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004dc2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	0a5b      	lsrs	r3, r3, #9
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00e      	beq.n	8004dee <HAL_I2C_ER_IRQHandler+0x78>
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	0a1b      	lsrs	r3, r3, #8
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d008      	beq.n	8004dee <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dde:	f043 0302 	orr.w	r3, r3, #2
 8004de2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004dec:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	0a9b      	lsrs	r3, r3, #10
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d03f      	beq.n	8004e7a <HAL_I2C_ER_IRQHandler+0x104>
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	0a1b      	lsrs	r3, r3, #8
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d039      	beq.n	8004e7a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004e06:	7efb      	ldrb	r3, [r7, #27]
 8004e08:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e18:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004e20:	7ebb      	ldrb	r3, [r7, #26]
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d112      	bne.n	8004e4c <HAL_I2C_ER_IRQHandler+0xd6>
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10f      	bne.n	8004e4c <HAL_I2C_ER_IRQHandler+0xd6>
 8004e2c:	7cfb      	ldrb	r3, [r7, #19]
 8004e2e:	2b21      	cmp	r3, #33	@ 0x21
 8004e30:	d008      	beq.n	8004e44 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004e32:	7cfb      	ldrb	r3, [r7, #19]
 8004e34:	2b29      	cmp	r3, #41	@ 0x29
 8004e36:	d005      	beq.n	8004e44 <HAL_I2C_ER_IRQHandler+0xce>
 8004e38:	7cfb      	ldrb	r3, [r7, #19]
 8004e3a:	2b28      	cmp	r3, #40	@ 0x28
 8004e3c:	d106      	bne.n	8004e4c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b21      	cmp	r3, #33	@ 0x21
 8004e42:	d103      	bne.n	8004e4c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f001 f86d 	bl	8005f24 <I2C_Slave_AF>
 8004e4a:	e016      	b.n	8004e7a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e54:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	f043 0304 	orr.w	r3, r3, #4
 8004e5c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e5e:	7efb      	ldrb	r3, [r7, #27]
 8004e60:	2b10      	cmp	r3, #16
 8004e62:	d002      	beq.n	8004e6a <HAL_I2C_ER_IRQHandler+0xf4>
 8004e64:	7efb      	ldrb	r3, [r7, #27]
 8004e66:	2b40      	cmp	r3, #64	@ 0x40
 8004e68:	d107      	bne.n	8004e7a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e78:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	0adb      	lsrs	r3, r3, #11
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00e      	beq.n	8004ea4 <HAL_I2C_ER_IRQHandler+0x12e>
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	0a1b      	lsrs	r3, r3, #8
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d008      	beq.n	8004ea4 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e94:	f043 0308 	orr.w	r3, r3, #8
 8004e98:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004ea2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d008      	beq.n	8004ebc <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f001 f8a8 	bl	800600c <I2C_ITError>
  }
}
 8004ebc:	bf00      	nop
 8004ebe:	3728      	adds	r7, #40	@ 0x28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004ee0:	bf00      	nop
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	70fb      	strb	r3, [r7, #3]
 8004f20:	4613      	mov	r3, r2
 8004f22:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f7a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f82:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f88:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d150      	bne.n	8005034 <I2C_MasterTransmit_TXE+0xc8>
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	2b21      	cmp	r3, #33	@ 0x21
 8004f96:	d14d      	bne.n	8005034 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d01d      	beq.n	8004fda <I2C_MasterTransmit_TXE+0x6e>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d01a      	beq.n	8004fda <I2C_MasterTransmit_TXE+0x6e>
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004faa:	d016      	beq.n	8004fda <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004fba:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2211      	movs	r2, #17
 8004fc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff ff76 	bl	8004ec4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fd8:	e060      	b.n	800509c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004fe8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ff8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b40      	cmp	r3, #64	@ 0x40
 8005012:	d107      	bne.n	8005024 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7fb fe87 	bl	8000d30 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005022:	e03b      	b.n	800509c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7ff ff49 	bl	8004ec4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005032:	e033      	b.n	800509c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005034:	7bfb      	ldrb	r3, [r7, #15]
 8005036:	2b21      	cmp	r3, #33	@ 0x21
 8005038:	d005      	beq.n	8005046 <I2C_MasterTransmit_TXE+0xda>
 800503a:	7bbb      	ldrb	r3, [r7, #14]
 800503c:	2b40      	cmp	r3, #64	@ 0x40
 800503e:	d12d      	bne.n	800509c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	2b22      	cmp	r3, #34	@ 0x22
 8005044:	d12a      	bne.n	800509c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d108      	bne.n	8005062 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800505e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005060:	e01c      	b.n	800509c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b40      	cmp	r3, #64	@ 0x40
 800506c:	d103      	bne.n	8005076 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f88e 	bl	8005190 <I2C_MemoryTransmit_TXE_BTF>
}
 8005074:	e012      	b.n	800509c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507a:	781a      	ldrb	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005090:	b29b      	uxth	r3, r3
 8005092:	3b01      	subs	r3, #1
 8005094:	b29a      	uxth	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800509a:	e7ff      	b.n	800509c <I2C_MasterTransmit_TXE+0x130>
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b21      	cmp	r3, #33	@ 0x21
 80050bc:	d164      	bne.n	8005188 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d012      	beq.n	80050ee <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050cc:	781a      	ldrb	r2, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80050ec:	e04c      	b.n	8005188 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d01d      	beq.n	8005130 <I2C_MasterTransmit_BTF+0x8c>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b20      	cmp	r3, #32
 80050f8:	d01a      	beq.n	8005130 <I2C_MasterTransmit_BTF+0x8c>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005100:	d016      	beq.n	8005130 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005110:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2211      	movs	r2, #17
 8005116:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff fecb 	bl	8004ec4 <HAL_I2C_MasterTxCpltCallback>
}
 800512e:	e02b      	b.n	8005188 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800513e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800514e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2220      	movs	r2, #32
 800515a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b40      	cmp	r3, #64	@ 0x40
 8005168:	d107      	bne.n	800517a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7fb fddc 	bl	8000d30 <HAL_I2C_MemTxCpltCallback>
}
 8005178:	e006      	b.n	8005188 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff fe9e 	bl	8004ec4 <HAL_I2C_MasterTxCpltCallback>
}
 8005188:	bf00      	nop
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}

08005190 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800519e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d11d      	bne.n	80051e4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d10b      	bne.n	80051c8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051c0:	1c9a      	adds	r2, r3, #2
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80051c6:	e077      	b.n	80052b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	121b      	asrs	r3, r3, #8
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051dc:	1c5a      	adds	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80051e2:	e069      	b.n	80052b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d10b      	bne.n	8005204 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005202:	e059      	b.n	80052b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005208:	2b02      	cmp	r3, #2
 800520a:	d152      	bne.n	80052b2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800520c:	7bfb      	ldrb	r3, [r7, #15]
 800520e:	2b22      	cmp	r3, #34	@ 0x22
 8005210:	d10d      	bne.n	800522e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005220:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800522c:	e044      	b.n	80052b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005232:	b29b      	uxth	r3, r3
 8005234:	2b00      	cmp	r3, #0
 8005236:	d015      	beq.n	8005264 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005238:	7bfb      	ldrb	r3, [r7, #15]
 800523a:	2b21      	cmp	r3, #33	@ 0x21
 800523c:	d112      	bne.n	8005264 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	781a      	ldrb	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005258:	b29b      	uxth	r3, r3
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005262:	e029      	b.n	80052b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005268:	b29b      	uxth	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d124      	bne.n	80052b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	2b21      	cmp	r3, #33	@ 0x21
 8005272:	d121      	bne.n	80052b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005282:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005292:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fb fd40 	bl	8000d30 <HAL_I2C_MemTxCpltCallback>
}
 80052b0:	e002      	b.n	80052b8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7fe ff4e 	bl	8004154 <I2C_Flush_DR>
}
 80052b8:	bf00      	nop
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b22      	cmp	r3, #34	@ 0x22
 80052d2:	f040 80b9 	bne.w	8005448 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052da:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	d921      	bls.n	800532e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	691a      	ldr	r2, [r3, #16]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f4:	b2d2      	uxtb	r2, r2
 80052f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fc:	1c5a      	adds	r2, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b03      	cmp	r3, #3
 8005318:	f040 8096 	bne.w	8005448 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800532a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800532c:	e08c      	b.n	8005448 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005332:	2b02      	cmp	r3, #2
 8005334:	d07f      	beq.n	8005436 <I2C_MasterReceive_RXNE+0x176>
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d002      	beq.n	8005342 <I2C_MasterReceive_RXNE+0x82>
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d179      	bne.n	8005436 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f001 fc80 	bl	8006c48 <I2C_WaitOnSTOPRequestThroughIT>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d14c      	bne.n	80053e8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800535c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800536c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b40      	cmp	r3, #64	@ 0x40
 80053a6:	d10a      	bne.n	80053be <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f7fb fcca 	bl	8000d50 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80053bc:	e044      	b.n	8005448 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d002      	beq.n	80053d2 <I2C_MasterReceive_RXNE+0x112>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2b20      	cmp	r3, #32
 80053d0:	d103      	bne.n	80053da <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80053d8:	e002      	b.n	80053e0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2212      	movs	r2, #18
 80053de:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff fd79 	bl	8004ed8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80053e6:	e02f      	b.n	8005448 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80053f6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691a      	ldr	r2, [r3, #16]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff fd88 	bl	8004f44 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005434:	e008      	b.n	8005448 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005444:	605a      	str	r2, [r3, #4]
}
 8005446:	e7ff      	b.n	8005448 <I2C_MasterReceive_RXNE+0x188>
 8005448:	bf00      	nop
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	2b04      	cmp	r3, #4
 8005466:	d11b      	bne.n	80054a0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005476:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	b29a      	uxth	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800549e:	e0c4      	b.n	800562a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d129      	bne.n	80054fe <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	685a      	ldr	r2, [r3, #4]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054b8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d00a      	beq.n	80054d6 <I2C_MasterReceive_BTF+0x86>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d007      	beq.n	80054d6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054d4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e0:	b2d2      	uxtb	r2, r2
 80054e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	3b01      	subs	r3, #1
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80054fc:	e095      	b.n	800562a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005502:	b29b      	uxth	r3, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d17d      	bne.n	8005604 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d002      	beq.n	8005514 <I2C_MasterReceive_BTF+0xc4>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2b10      	cmp	r3, #16
 8005512:	d108      	bne.n	8005526 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	e016      	b.n	8005554 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b04      	cmp	r3, #4
 800552a:	d002      	beq.n	8005532 <I2C_MasterReceive_BTF+0xe2>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d108      	bne.n	8005544 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	e007      	b.n	8005554 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005552:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	691a      	ldr	r2, [r3, #16]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	691a      	ldr	r2, [r3, #16]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005584:	b2d2      	uxtb	r2, r2
 8005586:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80055ae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b40      	cmp	r3, #64	@ 0x40
 80055c2:	d10a      	bne.n	80055da <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7fb fbbc 	bl	8000d50 <HAL_I2C_MemRxCpltCallback>
}
 80055d8:	e027      	b.n	800562a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d002      	beq.n	80055ee <I2C_MasterReceive_BTF+0x19e>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d103      	bne.n	80055f6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80055f4:	e002      	b.n	80055fc <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2212      	movs	r2, #18
 80055fa:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff fc6b 	bl	8004ed8 <HAL_I2C_MasterRxCpltCallback>
}
 8005602:	e012      	b.n	800562a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800562a:	bf00      	nop
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b40      	cmp	r3, #64	@ 0x40
 8005644:	d117      	bne.n	8005676 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005652:	b2db      	uxtb	r3, r3
 8005654:	461a      	mov	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800565e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005660:	e067      	b.n	8005732 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005666:	b2db      	uxtb	r3, r3
 8005668:	f043 0301 	orr.w	r3, r3, #1
 800566c:	b2da      	uxtb	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	611a      	str	r2, [r3, #16]
}
 8005674:	e05d      	b.n	8005732 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800567e:	d133      	bne.n	80056e8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b21      	cmp	r3, #33	@ 0x21
 800568a:	d109      	bne.n	80056a0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005690:	b2db      	uxtb	r3, r3
 8005692:	461a      	mov	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800569c:	611a      	str	r2, [r3, #16]
 800569e:	e008      	b.n	80056b2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	f043 0301 	orr.w	r3, r3, #1
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d004      	beq.n	80056c4 <I2C_Master_SB+0x92>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d108      	bne.n	80056d6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d032      	beq.n	8005732 <I2C_Master_SB+0x100>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d02d      	beq.n	8005732 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056e4:	605a      	str	r2, [r3, #4]
}
 80056e6:	e024      	b.n	8005732 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10e      	bne.n	800570e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	11db      	asrs	r3, r3, #7
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	f003 0306 	and.w	r3, r3, #6
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	f063 030f 	orn	r3, r3, #15
 8005704:	b2da      	uxtb	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	611a      	str	r2, [r3, #16]
}
 800570c:	e011      	b.n	8005732 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005712:	2b01      	cmp	r3, #1
 8005714:	d10d      	bne.n	8005732 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800571a:	b29b      	uxth	r3, r3
 800571c:	11db      	asrs	r3, r3, #7
 800571e:	b2db      	uxtb	r3, r3
 8005720:	f003 0306 	and.w	r3, r3, #6
 8005724:	b2db      	uxtb	r3, r3
 8005726:	f063 030e 	orn	r3, r3, #14
 800572a:	b2da      	uxtb	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	611a      	str	r2, [r3, #16]
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574a:	b2da      	uxtb	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005756:	2b00      	cmp	r3, #0
 8005758:	d004      	beq.n	8005764 <I2C_Master_ADD10+0x26>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800575e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005760:	2b00      	cmp	r3, #0
 8005762:	d108      	bne.n	8005776 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00c      	beq.n	8005786 <I2C_Master_ADD10+0x48>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005772:	2b00      	cmp	r3, #0
 8005774:	d007      	beq.n	8005786 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005784:	605a      	str	r2, [r3, #4]
  }
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005792:	b480      	push	{r7}
 8005794:	b091      	sub	sp, #68	@ 0x44
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80057a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ae:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b22      	cmp	r3, #34	@ 0x22
 80057ba:	f040 8169 	bne.w	8005a90 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10f      	bne.n	80057e6 <I2C_Master_ADDR+0x54>
 80057c6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80057ca:	2b40      	cmp	r3, #64	@ 0x40
 80057cc:	d10b      	bne.n	80057e6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ce:	2300      	movs	r3, #0
 80057d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80057e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e4:	e160      	b.n	8005aa8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d11d      	bne.n	800582a <I2C_Master_ADDR+0x98>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80057f6:	d118      	bne.n	800582a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057f8:	2300      	movs	r3, #0
 80057fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800580c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800581c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	651a      	str	r2, [r3, #80]	@ 0x50
 8005828:	e13e      	b.n	8005aa8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	2b00      	cmp	r3, #0
 8005832:	d113      	bne.n	800585c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005834:	2300      	movs	r3, #0
 8005836:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005848:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	e115      	b.n	8005a88 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005860:	b29b      	uxth	r3, r3
 8005862:	2b01      	cmp	r3, #1
 8005864:	f040 808a 	bne.w	800597c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800586e:	d137      	bne.n	80058e0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800587e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800588a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800588e:	d113      	bne.n	80058b8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800589e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058a0:	2300      	movs	r3, #0
 80058a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	e0e7      	b.n	8005a88 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058b8:	2300      	movs	r3, #0
 80058ba:	623b      	str	r3, [r7, #32]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	623b      	str	r3, [r7, #32]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	623b      	str	r3, [r7, #32]
 80058cc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	e0d3      	b.n	8005a88 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80058e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e2:	2b08      	cmp	r3, #8
 80058e4:	d02e      	beq.n	8005944 <I2C_Master_ADDR+0x1b2>
 80058e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e8:	2b20      	cmp	r3, #32
 80058ea:	d02b      	beq.n	8005944 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80058ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ee:	2b12      	cmp	r3, #18
 80058f0:	d102      	bne.n	80058f8 <I2C_Master_ADDR+0x166>
 80058f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d125      	bne.n	8005944 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80058f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d00e      	beq.n	800591c <I2C_Master_ADDR+0x18a>
 80058fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005900:	2b02      	cmp	r3, #2
 8005902:	d00b      	beq.n	800591c <I2C_Master_ADDR+0x18a>
 8005904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005906:	2b10      	cmp	r3, #16
 8005908:	d008      	beq.n	800591c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	e007      	b.n	800592c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800592a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800592c:	2300      	movs	r3, #0
 800592e:	61fb      	str	r3, [r7, #28]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	61fb      	str	r3, [r7, #28]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	e0a1      	b.n	8005a88 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005952:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005954:	2300      	movs	r3, #0
 8005956:	61bb      	str	r3, [r7, #24]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	61bb      	str	r3, [r7, #24]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	61bb      	str	r3, [r7, #24]
 8005968:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	e085      	b.n	8005a88 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d14d      	bne.n	8005a22 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005988:	2b04      	cmp	r3, #4
 800598a:	d016      	beq.n	80059ba <I2C_Master_ADDR+0x228>
 800598c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598e:	2b02      	cmp	r3, #2
 8005990:	d013      	beq.n	80059ba <I2C_Master_ADDR+0x228>
 8005992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005994:	2b10      	cmp	r3, #16
 8005996:	d010      	beq.n	80059ba <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059a6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	e007      	b.n	80059ca <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059c8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059d8:	d117      	bne.n	8005a0a <I2C_Master_ADDR+0x278>
 80059da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80059e0:	d00b      	beq.n	80059fa <I2C_Master_ADDR+0x268>
 80059e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d008      	beq.n	80059fa <I2C_Master_ADDR+0x268>
 80059e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ea:	2b08      	cmp	r3, #8
 80059ec:	d005      	beq.n	80059fa <I2C_Master_ADDR+0x268>
 80059ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f0:	2b10      	cmp	r3, #16
 80059f2:	d002      	beq.n	80059fa <I2C_Master_ADDR+0x268>
 80059f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d107      	bne.n	8005a0a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a08:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	617b      	str	r3, [r7, #20]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	e032      	b.n	8005a88 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a30:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a40:	d117      	bne.n	8005a72 <I2C_Master_ADDR+0x2e0>
 8005a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a48:	d00b      	beq.n	8005a62 <I2C_Master_ADDR+0x2d0>
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d008      	beq.n	8005a62 <I2C_Master_ADDR+0x2d0>
 8005a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d005      	beq.n	8005a62 <I2C_Master_ADDR+0x2d0>
 8005a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a58:	2b10      	cmp	r3, #16
 8005a5a:	d002      	beq.n	8005a62 <I2C_Master_ADDR+0x2d0>
 8005a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	d107      	bne.n	8005a72 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005a70:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a72:	2300      	movs	r3, #0
 8005a74:	613b      	str	r3, [r7, #16]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	613b      	str	r3, [r7, #16]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	613b      	str	r3, [r7, #16]
 8005a86:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005a8e:	e00b      	b.n	8005aa8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
}
 8005aa6:	e7ff      	b.n	8005aa8 <I2C_Master_ADDR+0x316>
 8005aa8:	bf00      	nop
 8005aaa:	3744      	adds	r7, #68	@ 0x44
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ac2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d02b      	beq.n	8005b26 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad2:	781a      	ldrb	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d114      	bne.n	8005b26 <I2C_SlaveTransmit_TXE+0x72>
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
 8005afe:	2b29      	cmp	r3, #41	@ 0x29
 8005b00:	d111      	bne.n	8005b26 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b10:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2221      	movs	r2, #33	@ 0x21
 8005b16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2228      	movs	r2, #40	@ 0x28
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7ff f9e3 	bl	8004eec <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b26:	bf00      	nop
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d011      	beq.n	8005b64 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b44:	781a      	ldrb	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b50:	1c5a      	adds	r2, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b7e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d02c      	beq.n	8005be4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d114      	bne.n	8005be4 <I2C_SlaveReceive_RXNE+0x74>
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
 8005bbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bbe:	d111      	bne.n	8005be4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bce:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2222      	movs	r2, #34	@ 0x22
 8005bd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2228      	movs	r2, #40	@ 0x28
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff f98e 	bl	8004f00 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005be4:	bf00      	nop
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d012      	beq.n	8005c24 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005c4a:	2b28      	cmp	r3, #40	@ 0x28
 8005c4c:	d127      	bne.n	8005c9e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c5c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	089b      	lsrs	r3, r3, #2
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	09db      	lsrs	r3, r3, #7
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d103      	bne.n	8005c82 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	81bb      	strh	r3, [r7, #12]
 8005c80:	e002      	b.n	8005c88 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	699b      	ldr	r3, [r3, #24]
 8005c86:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005c90:	89ba      	ldrh	r2, [r7, #12]
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
 8005c94:	4619      	mov	r1, r3
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7ff f93c 	bl	8004f14 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005c9c:	e00e      	b.n	8005cbc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60bb      	str	r3, [r7, #8]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	60bb      	str	r3, [r7, #8]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	699b      	ldr	r3, [r3, #24]
 8005cb0:	60bb      	str	r3, [r7, #8]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005cbc:	bf00      	nop
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cd2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ce2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	60bb      	str	r3, [r7, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	60bb      	str	r3, [r7, #8]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d10:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d20:	d172      	bne.n	8005e08 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	2b22      	cmp	r3, #34	@ 0x22
 8005d26:	d002      	beq.n	8005d2e <I2C_Slave_STOPF+0x6a>
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d2c:	d135      	bne.n	8005d9a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d005      	beq.n	8005d52 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4a:	f043 0204 	orr.w	r2, r3, #4
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d60:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fd fdfe 	bl	8003968 <HAL_DMA_GetState>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d049      	beq.n	8005e06 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d76:	4a69      	ldr	r2, [pc, #420]	@ (8005f1c <I2C_Slave_STOPF+0x258>)
 8005d78:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7fd fc46 	bl	8003610 <HAL_DMA_Abort_IT>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d03d      	beq.n	8005e06 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005d94:	4610      	mov	r0, r2
 8005d96:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d98:	e035      	b.n	8005e06 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	b29a      	uxth	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d005      	beq.n	8005dbe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db6:	f043 0204 	orr.w	r2, r3, #4
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dcc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fd fdc8 	bl	8003968 <HAL_DMA_GetState>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d014      	beq.n	8005e08 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005de2:	4a4e      	ldr	r2, [pc, #312]	@ (8005f1c <I2C_Slave_STOPF+0x258>)
 8005de4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fd fc10 	bl	8003610 <HAL_DMA_Abort_IT>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d008      	beq.n	8005e08 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005e00:	4610      	mov	r0, r2
 8005e02:	4798      	blx	r3
 8005e04:	e000      	b.n	8005e08 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e06:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d03e      	beq.n	8005e90 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d112      	bne.n	8005e46 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e50:	2b40      	cmp	r3, #64	@ 0x40
 8005e52:	d112      	bne.n	8005e7a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691a      	ldr	r2, [r3, #16]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e66:	1c5a      	adds	r2, r3, #1
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	3b01      	subs	r3, #1
 8005e74:	b29a      	uxth	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d005      	beq.n	8005e90 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e88:	f043 0204 	orr.w	r2, r3, #4
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d003      	beq.n	8005ea0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f8b7 	bl	800600c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005e9e:	e039      	b.n	8005f14 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
 8005ea2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ea4:	d109      	bne.n	8005eba <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2228      	movs	r2, #40	@ 0x28
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7ff f823 	bl	8004f00 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	2b28      	cmp	r3, #40	@ 0x28
 8005ec4:	d111      	bne.n	8005eea <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a15      	ldr	r2, [pc, #84]	@ (8005f20 <I2C_Slave_STOPF+0x25c>)
 8005eca:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff f824 	bl	8004f30 <HAL_I2C_ListenCpltCallback>
}
 8005ee8:	e014      	b.n	8005f14 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eee:	2b22      	cmp	r3, #34	@ 0x22
 8005ef0:	d002      	beq.n	8005ef8 <I2C_Slave_STOPF+0x234>
 8005ef2:	7bfb      	ldrb	r3, [r7, #15]
 8005ef4:	2b22      	cmp	r3, #34	@ 0x22
 8005ef6:	d10d      	bne.n	8005f14 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2220      	movs	r2, #32
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7fe fff6 	bl	8004f00 <HAL_I2C_SlaveRxCpltCallback>
}
 8005f14:	bf00      	nop
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}
 8005f1c:	080067a5 	.word	0x080067a5
 8005f20:	ffff0000 	.word	0xffff0000

08005f24 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f32:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f38:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d002      	beq.n	8005f46 <I2C_Slave_AF+0x22>
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b20      	cmp	r3, #32
 8005f44:	d129      	bne.n	8005f9a <I2C_Slave_AF+0x76>
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
 8005f48:	2b28      	cmp	r3, #40	@ 0x28
 8005f4a:	d126      	bne.n	8005f9a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a2e      	ldr	r2, [pc, #184]	@ (8006008 <I2C_Slave_AF+0xe4>)
 8005f50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685a      	ldr	r2, [r3, #4]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f60:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f6a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f7a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fe ffcc 	bl	8004f30 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005f98:	e031      	b.n	8005ffe <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
 8005f9c:	2b21      	cmp	r3, #33	@ 0x21
 8005f9e:	d129      	bne.n	8005ff4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a19      	ldr	r2, [pc, #100]	@ (8006008 <I2C_Slave_AF+0xe4>)
 8005fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2221      	movs	r2, #33	@ 0x21
 8005faa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685a      	ldr	r2, [r3, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005fca:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005fd4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fe4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f7fe f8b4 	bl	8004154 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f7fe ff7d 	bl	8004eec <HAL_I2C_SlaveTxCpltCallback>
}
 8005ff2:	e004      	b.n	8005ffe <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ffc:	615a      	str	r2, [r3, #20]
}
 8005ffe:	bf00      	nop
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	ffff0000 	.word	0xffff0000

0800600c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800601a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006022:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006024:	7bbb      	ldrb	r3, [r7, #14]
 8006026:	2b10      	cmp	r3, #16
 8006028:	d002      	beq.n	8006030 <I2C_ITError+0x24>
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	2b40      	cmp	r3, #64	@ 0x40
 800602e:	d10a      	bne.n	8006046 <I2C_ITError+0x3a>
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	2b22      	cmp	r3, #34	@ 0x22
 8006034:	d107      	bne.n	8006046 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006044:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800604c:	2b28      	cmp	r3, #40	@ 0x28
 800604e:	d107      	bne.n	8006060 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2228      	movs	r2, #40	@ 0x28
 800605a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800605e:	e015      	b.n	800608c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800606a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800606e:	d00a      	beq.n	8006086 <I2C_ITError+0x7a>
 8006070:	7bfb      	ldrb	r3, [r7, #15]
 8006072:	2b60      	cmp	r3, #96	@ 0x60
 8006074:	d007      	beq.n	8006086 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2220      	movs	r2, #32
 800607a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006096:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800609a:	d162      	bne.n	8006162 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060aa:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d020      	beq.n	80060fc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060be:	4a6a      	ldr	r2, [pc, #424]	@ (8006268 <I2C_ITError+0x25c>)
 80060c0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fd faa2 	bl	8003610 <HAL_DMA_Abort_IT>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f000 8089 	beq.w	80061e6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0201 	bic.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80060f6:	4610      	mov	r0, r2
 80060f8:	4798      	blx	r3
 80060fa:	e074      	b.n	80061e6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006100:	4a59      	ldr	r2, [pc, #356]	@ (8006268 <I2C_ITError+0x25c>)
 8006102:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006108:	4618      	mov	r0, r3
 800610a:	f7fd fa81 	bl	8003610 <HAL_DMA_Abort_IT>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d068      	beq.n	80061e6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611e:	2b40      	cmp	r3, #64	@ 0x40
 8006120:	d10b      	bne.n	800613a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	691a      	ldr	r2, [r3, #16]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006134:	1c5a      	adds	r2, r3, #1
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0201 	bic.w	r2, r2, #1
 8006148:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2220      	movs	r2, #32
 800614e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800615c:	4610      	mov	r0, r2
 800615e:	4798      	blx	r3
 8006160:	e041      	b.n	80061e6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006168:	b2db      	uxtb	r3, r3
 800616a:	2b60      	cmp	r3, #96	@ 0x60
 800616c:	d125      	bne.n	80061ba <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2220      	movs	r2, #32
 8006172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006186:	2b40      	cmp	r3, #64	@ 0x40
 8006188:	d10b      	bne.n	80061a2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	691a      	ldr	r2, [r3, #16]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0201 	bic.w	r2, r2, #1
 80061b0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7fe fed0 	bl	8004f58 <HAL_I2C_AbortCpltCallback>
 80061b8:	e015      	b.n	80061e6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c4:	2b40      	cmp	r3, #64	@ 0x40
 80061c6:	d10b      	bne.n	80061e0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7fe feaf 	bl	8004f44 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ea:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10e      	bne.n	8006214 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d109      	bne.n	8006214 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006206:	2b00      	cmp	r3, #0
 8006208:	d104      	bne.n	8006214 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006210:	2b00      	cmp	r3, #0
 8006212:	d007      	beq.n	8006224 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006222:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800622a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006230:	f003 0304 	and.w	r3, r3, #4
 8006234:	2b04      	cmp	r3, #4
 8006236:	d113      	bne.n	8006260 <I2C_ITError+0x254>
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	2b28      	cmp	r3, #40	@ 0x28
 800623c:	d110      	bne.n	8006260 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a0a      	ldr	r2, [pc, #40]	@ (800626c <I2C_ITError+0x260>)
 8006242:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2220      	movs	r2, #32
 800624e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f7fe fe68 	bl	8004f30 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006260:	bf00      	nop
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	080067a5 	.word	0x080067a5
 800626c:	ffff0000 	.word	0xffff0000

08006270 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af02      	add	r7, sp, #8
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	4608      	mov	r0, r1
 800627a:	4611      	mov	r1, r2
 800627c:	461a      	mov	r2, r3
 800627e:	4603      	mov	r3, r0
 8006280:	817b      	strh	r3, [r7, #10]
 8006282:	460b      	mov	r3, r1
 8006284:	813b      	strh	r3, [r7, #8]
 8006286:	4613      	mov	r3, r2
 8006288:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006298:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 fb24 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00d      	beq.n	80062ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062c0:	d103      	bne.n	80062ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e05f      	b.n	800638e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062ce:	897b      	ldrh	r3, [r7, #10]
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	461a      	mov	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80062dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e0:	6a3a      	ldr	r2, [r7, #32]
 80062e2:	492d      	ldr	r1, [pc, #180]	@ (8006398 <I2C_RequestMemoryWrite+0x128>)
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 fb7f 	bl	80069e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e04c      	b.n	800638e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062f4:	2300      	movs	r3, #0
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	617b      	str	r3, [r7, #20]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800630a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800630c:	6a39      	ldr	r1, [r7, #32]
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 fc0a 	bl	8006b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00d      	beq.n	8006336 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800631e:	2b04      	cmp	r3, #4
 8006320:	d107      	bne.n	8006332 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006330:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e02b      	b.n	800638e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006336:	88fb      	ldrh	r3, [r7, #6]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d105      	bne.n	8006348 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800633c:	893b      	ldrh	r3, [r7, #8]
 800633e:	b2da      	uxtb	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	611a      	str	r2, [r3, #16]
 8006346:	e021      	b.n	800638c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006348:	893b      	ldrh	r3, [r7, #8]
 800634a:	0a1b      	lsrs	r3, r3, #8
 800634c:	b29b      	uxth	r3, r3
 800634e:	b2da      	uxtb	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006358:	6a39      	ldr	r1, [r7, #32]
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 fbe4 	bl	8006b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00d      	beq.n	8006382 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636a:	2b04      	cmp	r3, #4
 800636c:	d107      	bne.n	800637e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800637c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e005      	b.n	800638e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006382:	893b      	ldrh	r3, [r7, #8]
 8006384:	b2da      	uxtb	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	00010002 	.word	0x00010002

0800639c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b088      	sub	sp, #32
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	4608      	mov	r0, r1
 80063a6:	4611      	mov	r1, r2
 80063a8:	461a      	mov	r2, r3
 80063aa:	4603      	mov	r3, r0
 80063ac:	817b      	strh	r3, [r7, #10]
 80063ae:	460b      	mov	r3, r1
 80063b0:	813b      	strh	r3, [r7, #8]
 80063b2:	4613      	mov	r3, r2
 80063b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	9300      	str	r3, [sp, #0]
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	2200      	movs	r2, #0
 80063de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 fa86 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00d      	beq.n	800640a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063fc:	d103      	bne.n	8006406 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006404:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e0aa      	b.n	8006560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800640a:	897b      	ldrh	r3, [r7, #10]
 800640c:	b2db      	uxtb	r3, r3
 800640e:	461a      	mov	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006418:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	6a3a      	ldr	r2, [r7, #32]
 800641e:	4952      	ldr	r1, [pc, #328]	@ (8006568 <I2C_RequestMemoryRead+0x1cc>)
 8006420:	68f8      	ldr	r0, [r7, #12]
 8006422:	f000 fae1 	bl	80069e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d001      	beq.n	8006430 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e097      	b.n	8006560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006430:	2300      	movs	r3, #0
 8006432:	617b      	str	r3, [r7, #20]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	617b      	str	r3, [r7, #20]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	617b      	str	r3, [r7, #20]
 8006444:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006448:	6a39      	ldr	r1, [r7, #32]
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 fb6c 	bl	8006b28 <I2C_WaitOnTXEFlagUntilTimeout>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00d      	beq.n	8006472 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645a:	2b04      	cmp	r3, #4
 800645c:	d107      	bne.n	800646e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800646c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e076      	b.n	8006560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006472:	88fb      	ldrh	r3, [r7, #6]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d105      	bne.n	8006484 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006478:	893b      	ldrh	r3, [r7, #8]
 800647a:	b2da      	uxtb	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	611a      	str	r2, [r3, #16]
 8006482:	e021      	b.n	80064c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006484:	893b      	ldrh	r3, [r7, #8]
 8006486:	0a1b      	lsrs	r3, r3, #8
 8006488:	b29b      	uxth	r3, r3
 800648a:	b2da      	uxtb	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006494:	6a39      	ldr	r1, [r7, #32]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 fb46 	bl	8006b28 <I2C_WaitOnTXEFlagUntilTimeout>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d00d      	beq.n	80064be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d107      	bne.n	80064ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e050      	b.n	8006560 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064be:	893b      	ldrh	r3, [r7, #8]
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064ca:	6a39      	ldr	r1, [r7, #32]
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 fb2b 	bl	8006b28 <I2C_WaitOnTXEFlagUntilTimeout>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00d      	beq.n	80064f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d107      	bne.n	80064f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e035      	b.n	8006560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006502:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	6a3b      	ldr	r3, [r7, #32]
 800650a:	2200      	movs	r2, #0
 800650c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f9ef 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00d      	beq.n	8006538 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800652a:	d103      	bne.n	8006534 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006532:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e013      	b.n	8006560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006538:	897b      	ldrh	r3, [r7, #10]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	f043 0301 	orr.w	r3, r3, #1
 8006540:	b2da      	uxtb	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654a:	6a3a      	ldr	r2, [r7, #32]
 800654c:	4906      	ldr	r1, [pc, #24]	@ (8006568 <I2C_RequestMemoryRead+0x1cc>)
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 fa4a 	bl	80069e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3718      	adds	r7, #24
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	00010002 	.word	0x00010002

0800656c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006578:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006580:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006588:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800659e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d003      	beq.n	80065b0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065ac:	2200      	movs	r2, #0
 80065ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d003      	beq.n	80065c0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065bc:	2200      	movs	r2, #0
 80065be:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80065c0:	7cfb      	ldrb	r3, [r7, #19]
 80065c2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80065c6:	2b21      	cmp	r3, #33	@ 0x21
 80065c8:	d007      	beq.n	80065da <I2C_DMAXferCplt+0x6e>
 80065ca:	7cfb      	ldrb	r3, [r7, #19]
 80065cc:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80065d0:	2b22      	cmp	r3, #34	@ 0x22
 80065d2:	d131      	bne.n	8006638 <I2C_DMAXferCplt+0xcc>
 80065d4:	7cbb      	ldrb	r3, [r7, #18]
 80065d6:	2b20      	cmp	r3, #32
 80065d8:	d12e      	bne.n	8006638 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	685a      	ldr	r2, [r3, #4]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80065e8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2200      	movs	r2, #0
 80065ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80065f0:	7cfb      	ldrb	r3, [r7, #19]
 80065f2:	2b29      	cmp	r3, #41	@ 0x29
 80065f4:	d10a      	bne.n	800660c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2221      	movs	r2, #33	@ 0x21
 80065fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2228      	movs	r2, #40	@ 0x28
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006604:	6978      	ldr	r0, [r7, #20]
 8006606:	f7fe fc71 	bl	8004eec <HAL_I2C_SlaveTxCpltCallback>
 800660a:	e00c      	b.n	8006626 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800660c:	7cfb      	ldrb	r3, [r7, #19]
 800660e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006610:	d109      	bne.n	8006626 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2222      	movs	r2, #34	@ 0x22
 8006616:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	2228      	movs	r2, #40	@ 0x28
 800661c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006620:	6978      	ldr	r0, [r7, #20]
 8006622:	f7fe fc6d 	bl	8004f00 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006634:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006636:	e074      	b.n	8006722 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d06e      	beq.n	8006722 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006648:	b29b      	uxth	r3, r3
 800664a:	2b01      	cmp	r3, #1
 800664c:	d107      	bne.n	800665e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800665c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800666c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006674:	d009      	beq.n	800668a <I2C_DMAXferCplt+0x11e>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2b08      	cmp	r3, #8
 800667a:	d006      	beq.n	800668a <I2C_DMAXferCplt+0x11e>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006682:	d002      	beq.n	800668a <I2C_DMAXferCplt+0x11e>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b20      	cmp	r3, #32
 8006688:	d107      	bne.n	800669a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006698:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066a8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066b8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2200      	movs	r2, #0
 80066be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d003      	beq.n	80066d0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80066c8:	6978      	ldr	r0, [r7, #20]
 80066ca:	f7fe fc3b 	bl	8004f44 <HAL_I2C_ErrorCallback>
}
 80066ce:	e028      	b.n	8006722 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b40      	cmp	r3, #64	@ 0x40
 80066e2:	d10a      	bne.n	80066fa <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2200      	movs	r2, #0
 80066f0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80066f2:	6978      	ldr	r0, [r7, #20]
 80066f4:	f7fa fb2c 	bl	8000d50 <HAL_I2C_MemRxCpltCallback>
}
 80066f8:	e013      	b.n	8006722 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2b08      	cmp	r3, #8
 8006706:	d002      	beq.n	800670e <I2C_DMAXferCplt+0x1a2>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2b20      	cmp	r3, #32
 800670c:	d103      	bne.n	8006716 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2200      	movs	r2, #0
 8006712:	631a      	str	r2, [r3, #48]	@ 0x30
 8006714:	e002      	b.n	800671c <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	2212      	movs	r2, #18
 800671a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800671c:	6978      	ldr	r0, [r7, #20]
 800671e:	f7fe fbdb 	bl	8004ed8 <HAL_I2C_MasterRxCpltCallback>
}
 8006722:	bf00      	nop
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b084      	sub	sp, #16
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006736:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800673c:	2b00      	cmp	r3, #0
 800673e:	d003      	beq.n	8006748 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006744:	2200      	movs	r2, #0
 8006746:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006754:	2200      	movs	r2, #0
 8006756:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7fd f913 	bl	8003984 <HAL_DMA_GetError>
 800675e:	4603      	mov	r3, r0
 8006760:	2b02      	cmp	r3, #2
 8006762:	d01b      	beq.n	800679c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006772:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2220      	movs	r2, #32
 800677e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678e:	f043 0210 	orr.w	r2, r3, #16
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f7fe fbd4 	bl	8004f44 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800679c:	bf00      	nop
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067bc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80067be:	4b4b      	ldr	r3, [pc, #300]	@ (80068ec <I2C_DMAAbort+0x148>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	08db      	lsrs	r3, r3, #3
 80067c4:	4a4a      	ldr	r2, [pc, #296]	@ (80068f0 <I2C_DMAAbort+0x14c>)
 80067c6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ca:	0a1a      	lsrs	r2, r3, #8
 80067cc:	4613      	mov	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	00da      	lsls	r2, r3, #3
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d106      	bne.n	80067ec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e2:	f043 0220 	orr.w	r2, r3, #32
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80067ea:	e00a      	b.n	8006802 <I2C_DMAAbort+0x5e>
    }
    count--;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006800:	d0ea      	beq.n	80067d8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800680e:	2200      	movs	r2, #0
 8006810:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800681e:	2200      	movs	r2, #0
 8006820:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006830:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2200      	movs	r2, #0
 8006836:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800683c:	2b00      	cmp	r3, #0
 800683e:	d003      	beq.n	8006848 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006844:	2200      	movs	r2, #0
 8006846:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684c:	2b00      	cmp	r3, #0
 800684e:	d003      	beq.n	8006858 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006854:	2200      	movs	r2, #0
 8006856:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0201 	bic.w	r2, r2, #1
 8006866:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b60      	cmp	r3, #96	@ 0x60
 8006872:	d10e      	bne.n	8006892 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	2220      	movs	r2, #32
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	2200      	movs	r2, #0
 8006888:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800688a:	6978      	ldr	r0, [r7, #20]
 800688c:	f7fe fb64 	bl	8004f58 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006890:	e027      	b.n	80068e2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006892:	7cfb      	ldrb	r3, [r7, #19]
 8006894:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006898:	2b28      	cmp	r3, #40	@ 0x28
 800689a:	d117      	bne.n	80068cc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80068ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	2200      	movs	r2, #0
 80068c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	2228      	movs	r2, #40	@ 0x28
 80068c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80068ca:	e007      	b.n	80068dc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	2220      	movs	r2, #32
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80068dc:	6978      	ldr	r0, [r7, #20]
 80068de:	f7fe fb31 	bl	8004f44 <HAL_I2C_ErrorCallback>
}
 80068e2:	bf00      	nop
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	2000002c 	.word	0x2000002c
 80068f0:	14f8b589 	.word	0x14f8b589

080068f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	603b      	str	r3, [r7, #0]
 8006900:	4613      	mov	r3, r2
 8006902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006904:	e048      	b.n	8006998 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690c:	d044      	beq.n	8006998 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800690e:	f7fb ff17 	bl	8002740 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	429a      	cmp	r2, r3
 800691c:	d302      	bcc.n	8006924 <I2C_WaitOnFlagUntilTimeout+0x30>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d139      	bne.n	8006998 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	0c1b      	lsrs	r3, r3, #16
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b01      	cmp	r3, #1
 800692c:	d10d      	bne.n	800694a <I2C_WaitOnFlagUntilTimeout+0x56>
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	43da      	mvns	r2, r3
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	4013      	ands	r3, r2
 800693a:	b29b      	uxth	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	bf0c      	ite	eq
 8006940:	2301      	moveq	r3, #1
 8006942:	2300      	movne	r3, #0
 8006944:	b2db      	uxtb	r3, r3
 8006946:	461a      	mov	r2, r3
 8006948:	e00c      	b.n	8006964 <I2C_WaitOnFlagUntilTimeout+0x70>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	699b      	ldr	r3, [r3, #24]
 8006950:	43da      	mvns	r2, r3
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	4013      	ands	r3, r2
 8006956:	b29b      	uxth	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	bf0c      	ite	eq
 800695c:	2301      	moveq	r3, #1
 800695e:	2300      	movne	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	461a      	mov	r2, r3
 8006964:	79fb      	ldrb	r3, [r7, #7]
 8006966:	429a      	cmp	r2, r3
 8006968:	d116      	bne.n	8006998 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2220      	movs	r2, #32
 8006974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006984:	f043 0220 	orr.w	r2, r3, #32
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e023      	b.n	80069e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	0c1b      	lsrs	r3, r3, #16
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d10d      	bne.n	80069be <I2C_WaitOnFlagUntilTimeout+0xca>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	43da      	mvns	r2, r3
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	4013      	ands	r3, r2
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bf0c      	ite	eq
 80069b4:	2301      	moveq	r3, #1
 80069b6:	2300      	movne	r3, #0
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	461a      	mov	r2, r3
 80069bc:	e00c      	b.n	80069d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	43da      	mvns	r2, r3
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	4013      	ands	r3, r2
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	bf0c      	ite	eq
 80069d0:	2301      	moveq	r3, #1
 80069d2:	2300      	movne	r3, #0
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	461a      	mov	r2, r3
 80069d8:	79fb      	ldrb	r3, [r7, #7]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d093      	beq.n	8006906 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069f6:	e071      	b.n	8006adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a06:	d123      	bne.n	8006a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006a16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3c:	f043 0204 	orr.w	r2, r3, #4
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e067      	b.n	8006b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a56:	d041      	beq.n	8006adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a58:	f7fb fe72 	bl	8002740 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d302      	bcc.n	8006a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d136      	bne.n	8006adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	0c1b      	lsrs	r3, r3, #16
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d10c      	bne.n	8006a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	43da      	mvns	r2, r3
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4013      	ands	r3, r2
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	bf14      	ite	ne
 8006a8a:	2301      	movne	r3, #1
 8006a8c:	2300      	moveq	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	e00b      	b.n	8006aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	699b      	ldr	r3, [r3, #24]
 8006a98:	43da      	mvns	r2, r3
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	bf14      	ite	ne
 8006aa4:	2301      	movne	r3, #1
 8006aa6:	2300      	moveq	r3, #0
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d016      	beq.n	8006adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac8:	f043 0220 	orr.w	r2, r3, #32
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e021      	b.n	8006b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	0c1b      	lsrs	r3, r3, #16
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d10c      	bne.n	8006b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	43da      	mvns	r2, r3
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	4013      	ands	r3, r2
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	bf14      	ite	ne
 8006af8:	2301      	movne	r3, #1
 8006afa:	2300      	moveq	r3, #0
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	e00b      	b.n	8006b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	43da      	mvns	r2, r3
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	4013      	ands	r3, r2
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	bf14      	ite	ne
 8006b12:	2301      	movne	r3, #1
 8006b14:	2300      	moveq	r3, #0
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f47f af6d 	bne.w	80069f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b34:	e034      	b.n	8006ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f000 f915 	bl	8006d66 <I2C_IsAcknowledgeFailed>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e034      	b.n	8006bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4c:	d028      	beq.n	8006ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b4e:	f7fb fdf7 	bl	8002740 <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d302      	bcc.n	8006b64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d11d      	bne.n	8006ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b6e:	2b80      	cmp	r3, #128	@ 0x80
 8006b70:	d016      	beq.n	8006ba0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8c:	f043 0220 	orr.w	r2, r3, #32
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e007      	b.n	8006bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006baa:	2b80      	cmp	r3, #128	@ 0x80
 8006bac:	d1c3      	bne.n	8006b36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	60b9      	str	r1, [r7, #8]
 8006bc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bc4:	e034      	b.n	8006c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f000 f8cd 	bl	8006d66 <I2C_IsAcknowledgeFailed>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d001      	beq.n	8006bd6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e034      	b.n	8006c40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bdc:	d028      	beq.n	8006c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bde:	f7fb fdaf 	bl	8002740 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d302      	bcc.n	8006bf4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d11d      	bne.n	8006c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	f003 0304 	and.w	r3, r3, #4
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	d016      	beq.n	8006c30 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c1c:	f043 0220 	orr.w	r2, r3, #32
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e007      	b.n	8006c40 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	f003 0304 	and.w	r3, r3, #4
 8006c3a:	2b04      	cmp	r3, #4
 8006c3c:	d1c3      	bne.n	8006bc6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c54:	4b13      	ldr	r3, [pc, #76]	@ (8006ca4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	08db      	lsrs	r3, r3, #3
 8006c5a:	4a13      	ldr	r2, [pc, #76]	@ (8006ca8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c60:	0a1a      	lsrs	r2, r3, #8
 8006c62:	4613      	mov	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d107      	bne.n	8006c86 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7a:	f043 0220 	orr.w	r2, r3, #32
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e008      	b.n	8006c98 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c94:	d0e9      	beq.n	8006c6a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	2000002c 	.word	0x2000002c
 8006ca8:	14f8b589 	.word	0x14f8b589

08006cac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cb8:	e049      	b.n	8006d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	f003 0310 	and.w	r3, r3, #16
 8006cc4:	2b10      	cmp	r3, #16
 8006cc6:	d119      	bne.n	8006cfc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f06f 0210 	mvn.w	r2, #16
 8006cd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e030      	b.n	8006d5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cfc:	f7fb fd20 	bl	8002740 <HAL_GetTick>
 8006d00:	4602      	mov	r2, r0
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d302      	bcc.n	8006d12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d11d      	bne.n	8006d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d1c:	2b40      	cmp	r3, #64	@ 0x40
 8006d1e:	d016      	beq.n	8006d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d3a:	f043 0220 	orr.w	r2, r3, #32
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e007      	b.n	8006d5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d58:	2b40      	cmp	r3, #64	@ 0x40
 8006d5a:	d1ae      	bne.n	8006cba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d7c:	d11b      	bne.n	8006db6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d86:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da2:	f043 0204 	orr.w	r2, r3, #4
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e000      	b.n	8006db8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006dd4:	d103      	bne.n	8006dde <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ddc:	e007      	b.n	8006dee <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006de6:	d102      	bne.n	8006dee <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2208      	movs	r2, #8
 8006dec:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b086      	sub	sp, #24
 8006dfe:	af02      	add	r7, sp, #8
 8006e00:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e101      	b.n	8007010 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d106      	bne.n	8006e2c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f006 f936 	bl	800d098 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2203      	movs	r2, #3
 8006e30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e3a:	d102      	bne.n	8006e42 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f002 fc8d 	bl	8009766 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6818      	ldr	r0, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	7c1a      	ldrb	r2, [r3, #16]
 8006e54:	f88d 2000 	strb.w	r2, [sp]
 8006e58:	3304      	adds	r3, #4
 8006e5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006e5c:	f002 fb6c 	bl	8009538 <USB_CoreInit>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d005      	beq.n	8006e72 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2202      	movs	r2, #2
 8006e6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e0ce      	b.n	8007010 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2100      	movs	r1, #0
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f002 fc85 	bl	8009788 <USB_SetCurrentMode>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d005      	beq.n	8006e90 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e0bf      	b.n	8007010 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e90:	2300      	movs	r3, #0
 8006e92:	73fb      	strb	r3, [r7, #15]
 8006e94:	e04a      	b.n	8006f2c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006e96:	7bfa      	ldrb	r2, [r7, #15]
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	00db      	lsls	r3, r3, #3
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	440b      	add	r3, r1
 8006ea4:	3315      	adds	r3, #21
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006eaa:	7bfa      	ldrb	r2, [r7, #15]
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	00db      	lsls	r3, r3, #3
 8006eb2:	4413      	add	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	440b      	add	r3, r1
 8006eb8:	3314      	adds	r3, #20
 8006eba:	7bfa      	ldrb	r2, [r7, #15]
 8006ebc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006ebe:	7bfa      	ldrb	r2, [r7, #15]
 8006ec0:	7bfb      	ldrb	r3, [r7, #15]
 8006ec2:	b298      	uxth	r0, r3
 8006ec4:	6879      	ldr	r1, [r7, #4]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	00db      	lsls	r3, r3, #3
 8006eca:	4413      	add	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	440b      	add	r3, r1
 8006ed0:	332e      	adds	r3, #46	@ 0x2e
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006ed6:	7bfa      	ldrb	r2, [r7, #15]
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	4613      	mov	r3, r2
 8006edc:	00db      	lsls	r3, r3, #3
 8006ede:	4413      	add	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	440b      	add	r3, r1
 8006ee4:	3318      	adds	r3, #24
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006eea:	7bfa      	ldrb	r2, [r7, #15]
 8006eec:	6879      	ldr	r1, [r7, #4]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	00db      	lsls	r3, r3, #3
 8006ef2:	4413      	add	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	440b      	add	r3, r1
 8006ef8:	331c      	adds	r3, #28
 8006efa:	2200      	movs	r2, #0
 8006efc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006efe:	7bfa      	ldrb	r2, [r7, #15]
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	4613      	mov	r3, r2
 8006f04:	00db      	lsls	r3, r3, #3
 8006f06:	4413      	add	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	440b      	add	r3, r1
 8006f0c:	3320      	adds	r3, #32
 8006f0e:	2200      	movs	r2, #0
 8006f10:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006f12:	7bfa      	ldrb	r2, [r7, #15]
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	4613      	mov	r3, r2
 8006f18:	00db      	lsls	r3, r3, #3
 8006f1a:	4413      	add	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	440b      	add	r3, r1
 8006f20:	3324      	adds	r3, #36	@ 0x24
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	73fb      	strb	r3, [r7, #15]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	791b      	ldrb	r3, [r3, #4]
 8006f30:	7bfa      	ldrb	r2, [r7, #15]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d3af      	bcc.n	8006e96 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f36:	2300      	movs	r3, #0
 8006f38:	73fb      	strb	r3, [r7, #15]
 8006f3a:	e044      	b.n	8006fc6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006f3c:	7bfa      	ldrb	r2, [r7, #15]
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	4613      	mov	r3, r2
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	4413      	add	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	440b      	add	r3, r1
 8006f4a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006f4e:	2200      	movs	r2, #0
 8006f50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006f52:	7bfa      	ldrb	r2, [r7, #15]
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	4613      	mov	r3, r2
 8006f58:	00db      	lsls	r3, r3, #3
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	440b      	add	r3, r1
 8006f60:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006f64:	7bfa      	ldrb	r2, [r7, #15]
 8006f66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006f68:	7bfa      	ldrb	r2, [r7, #15]
 8006f6a:	6879      	ldr	r1, [r7, #4]
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	440b      	add	r3, r1
 8006f76:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006f7e:	7bfa      	ldrb	r2, [r7, #15]
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	4613      	mov	r3, r2
 8006f84:	00db      	lsls	r3, r3, #3
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	440b      	add	r3, r1
 8006f8c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006f90:	2200      	movs	r2, #0
 8006f92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006f94:	7bfa      	ldrb	r2, [r7, #15]
 8006f96:	6879      	ldr	r1, [r7, #4]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	00db      	lsls	r3, r3, #3
 8006f9c:	4413      	add	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	440b      	add	r3, r1
 8006fa2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006faa:	7bfa      	ldrb	r2, [r7, #15]
 8006fac:	6879      	ldr	r1, [r7, #4]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	00db      	lsls	r3, r3, #3
 8006fb2:	4413      	add	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	440b      	add	r3, r1
 8006fb8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006fc0:	7bfb      	ldrb	r3, [r7, #15]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	73fb      	strb	r3, [r7, #15]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	791b      	ldrb	r3, [r3, #4]
 8006fca:	7bfa      	ldrb	r2, [r7, #15]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d3b5      	bcc.n	8006f3c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	7c1a      	ldrb	r2, [r3, #16]
 8006fd8:	f88d 2000 	strb.w	r2, [sp]
 8006fdc:	3304      	adds	r3, #4
 8006fde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fe0:	f002 fc1e 	bl	8009820 <USB_DevInit>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d005      	beq.n	8006ff6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2202      	movs	r2, #2
 8006fee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	e00c      	b.n	8007010 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4618      	mov	r0, r3
 800700a:	f003 fc68 	bl	800a8de <USB_DevDisconnect>

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_PCD_Start+0x1c>
 8007030:	2302      	movs	r3, #2
 8007032:	e022      	b.n	800707a <HAL_PCD_Start+0x62>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	d009      	beq.n	800705c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800704c:	2b01      	cmp	r3, #1
 800704e:	d105      	bne.n	800705c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007054:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4618      	mov	r0, r3
 8007062:	f002 fb6f 	bl	8009744 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4618      	mov	r0, r3
 800706c:	f003 fc16 	bl	800a89c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007082:	b590      	push	{r4, r7, lr}
 8007084:	b08d      	sub	sp, #52	@ 0x34
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4618      	mov	r0, r3
 800709a:	f003 fcd4 	bl	800aa46 <USB_GetMode>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f040 848c 	bne.w	80079be <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4618      	mov	r0, r3
 80070ac:	f003 fc38 	bl	800a920 <USB_ReadInterrupts>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 8482 	beq.w	80079bc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	0a1b      	lsrs	r3, r3, #8
 80070c2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f003 fc25 	bl	800a920 <USB_ReadInterrupts>
 80070d6:	4603      	mov	r3, r0
 80070d8:	f003 0302 	and.w	r3, r3, #2
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d107      	bne.n	80070f0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	695a      	ldr	r2, [r3, #20]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f002 0202 	and.w	r2, r2, #2
 80070ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f003 fc13 	bl	800a920 <USB_ReadInterrupts>
 80070fa:	4603      	mov	r3, r0
 80070fc:	f003 0310 	and.w	r3, r3, #16
 8007100:	2b10      	cmp	r3, #16
 8007102:	d161      	bne.n	80071c8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	699a      	ldr	r2, [r3, #24]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 0210 	bic.w	r2, r2, #16
 8007112:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007114:	6a3b      	ldr	r3, [r7, #32]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	f003 020f 	and.w	r2, r3, #15
 8007120:	4613      	mov	r3, r2
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	4413      	add	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	4413      	add	r3, r2
 8007130:	3304      	adds	r3, #4
 8007132:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800713a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800713e:	d124      	bne.n	800718a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007140:	69ba      	ldr	r2, [r7, #24]
 8007142:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007146:	4013      	ands	r3, r2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d035      	beq.n	80071b8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	091b      	lsrs	r3, r3, #4
 8007154:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007156:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800715a:	b29b      	uxth	r3, r3
 800715c:	461a      	mov	r2, r3
 800715e:	6a38      	ldr	r0, [r7, #32]
 8007160:	f003 fa4a 	bl	800a5f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	68da      	ldr	r2, [r3, #12]
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	091b      	lsrs	r3, r3, #4
 800716c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007170:	441a      	add	r2, r3
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	695a      	ldr	r2, [r3, #20]
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	091b      	lsrs	r3, r3, #4
 800717e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007182:	441a      	add	r2, r3
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	615a      	str	r2, [r3, #20]
 8007188:	e016      	b.n	80071b8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007190:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007194:	d110      	bne.n	80071b8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800719c:	2208      	movs	r2, #8
 800719e:	4619      	mov	r1, r3
 80071a0:	6a38      	ldr	r0, [r7, #32]
 80071a2:	f003 fa29 	bl	800a5f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	695a      	ldr	r2, [r3, #20]
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	091b      	lsrs	r3, r3, #4
 80071ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071b2:	441a      	add	r2, r3
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	699a      	ldr	r2, [r3, #24]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f042 0210 	orr.w	r2, r2, #16
 80071c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f003 fba7 	bl	800a920 <USB_ReadInterrupts>
 80071d2:	4603      	mov	r3, r0
 80071d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80071d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80071dc:	f040 80a7 	bne.w	800732e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f003 fbac 	bl	800a946 <USB_ReadDevAllOutEpInterrupt>
 80071ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80071f0:	e099      	b.n	8007326 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80071f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f4:	f003 0301 	and.w	r3, r3, #1
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 808e 	beq.w	800731a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	4611      	mov	r1, r2
 8007208:	4618      	mov	r0, r3
 800720a:	f003 fbd0 	bl	800a9ae <USB_ReadDevOutEPInterrupt>
 800720e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00c      	beq.n	8007234 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800721a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721c:	015a      	lsls	r2, r3, #5
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	4413      	add	r3, r2
 8007222:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007226:	461a      	mov	r2, r3
 8007228:	2301      	movs	r3, #1
 800722a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800722c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fea4 	bl	8007f7c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f003 0308 	and.w	r3, r3, #8
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00c      	beq.n	8007258 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800723e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	4413      	add	r3, r2
 8007246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800724a:	461a      	mov	r2, r3
 800724c:	2308      	movs	r3, #8
 800724e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007250:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 ff7a 	bl	800814c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f003 0310 	and.w	r3, r3, #16
 800725e:	2b00      	cmp	r3, #0
 8007260:	d008      	beq.n	8007274 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007264:	015a      	lsls	r2, r3, #5
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	4413      	add	r3, r2
 800726a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800726e:	461a      	mov	r2, r3
 8007270:	2310      	movs	r3, #16
 8007272:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b00      	cmp	r3, #0
 800727c:	d030      	beq.n	80072e0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007286:	2b80      	cmp	r3, #128	@ 0x80
 8007288:	d109      	bne.n	800729e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	69fa      	ldr	r2, [r7, #28]
 8007294:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007298:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800729c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800729e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072a0:	4613      	mov	r3, r2
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	4413      	add	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	4413      	add	r3, r2
 80072b0:	3304      	adds	r3, #4
 80072b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	78db      	ldrb	r3, [r3, #3]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d108      	bne.n	80072ce <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	2200      	movs	r2, #0
 80072c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80072c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f005 ffe1 	bl	800d290 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80072ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072da:	461a      	mov	r2, r3
 80072dc:	2302      	movs	r3, #2
 80072de:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f003 0320 	and.w	r3, r3, #32
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d008      	beq.n	80072fc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80072ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f6:	461a      	mov	r2, r3
 80072f8:	2320      	movs	r3, #32
 80072fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d009      	beq.n	800731a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	015a      	lsls	r2, r3, #5
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	4413      	add	r3, r2
 800730e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007312:	461a      	mov	r2, r3
 8007314:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007318:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800731a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731c:	3301      	adds	r3, #1
 800731e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007328:	2b00      	cmp	r3, #0
 800732a:	f47f af62 	bne.w	80071f2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4618      	mov	r0, r3
 8007334:	f003 faf4 	bl	800a920 <USB_ReadInterrupts>
 8007338:	4603      	mov	r3, r0
 800733a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800733e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007342:	f040 80db 	bne.w	80074fc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4618      	mov	r0, r3
 800734c:	f003 fb15 	bl	800a97a <USB_ReadDevAllInEpInterrupt>
 8007350:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007352:	2300      	movs	r3, #0
 8007354:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007356:	e0cd      	b.n	80074f4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 80c2 	beq.w	80074e8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	4611      	mov	r1, r2
 800736e:	4618      	mov	r0, r3
 8007370:	f003 fb3b 	bl	800a9ea <USB_ReadDevInEPInterrupt>
 8007374:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	d057      	beq.n	8007430 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007382:	f003 030f 	and.w	r3, r3, #15
 8007386:	2201      	movs	r2, #1
 8007388:	fa02 f303 	lsl.w	r3, r2, r3
 800738c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007394:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	43db      	mvns	r3, r3
 800739a:	69f9      	ldr	r1, [r7, #28]
 800739c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073a0:	4013      	ands	r3, r2
 80073a2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80073a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073b0:	461a      	mov	r2, r3
 80073b2:	2301      	movs	r3, #1
 80073b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	799b      	ldrb	r3, [r3, #6]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d132      	bne.n	8007424 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80073be:	6879      	ldr	r1, [r7, #4]
 80073c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073c2:	4613      	mov	r3, r2
 80073c4:	00db      	lsls	r3, r3, #3
 80073c6:	4413      	add	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	440b      	add	r3, r1
 80073cc:	3320      	adds	r3, #32
 80073ce:	6819      	ldr	r1, [r3, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073d4:	4613      	mov	r3, r2
 80073d6:	00db      	lsls	r3, r3, #3
 80073d8:	4413      	add	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	4403      	add	r3, r0
 80073de:	331c      	adds	r3, #28
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4419      	add	r1, r3
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073e8:	4613      	mov	r3, r2
 80073ea:	00db      	lsls	r3, r3, #3
 80073ec:	4413      	add	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4403      	add	r3, r0
 80073f2:	3320      	adds	r3, #32
 80073f4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80073f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d113      	bne.n	8007424 <HAL_PCD_IRQHandler+0x3a2>
 80073fc:	6879      	ldr	r1, [r7, #4]
 80073fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007400:	4613      	mov	r3, r2
 8007402:	00db      	lsls	r3, r3, #3
 8007404:	4413      	add	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	440b      	add	r3, r1
 800740a:	3324      	adds	r3, #36	@ 0x24
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d108      	bne.n	8007424 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6818      	ldr	r0, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800741c:	461a      	mov	r2, r3
 800741e:	2101      	movs	r1, #1
 8007420:	f003 fb42 	bl	800aaa8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007426:	b2db      	uxtb	r3, r3
 8007428:	4619      	mov	r1, r3
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f005 feb5 	bl	800d19a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b00      	cmp	r3, #0
 8007438:	d008      	beq.n	800744c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007446:	461a      	mov	r2, r3
 8007448:	2308      	movs	r3, #8
 800744a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f003 0310 	and.w	r3, r3, #16
 8007452:	2b00      	cmp	r3, #0
 8007454:	d008      	beq.n	8007468 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	4413      	add	r3, r2
 800745e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007462:	461a      	mov	r2, r3
 8007464:	2310      	movs	r3, #16
 8007466:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800746e:	2b00      	cmp	r3, #0
 8007470:	d008      	beq.n	8007484 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	4413      	add	r3, r2
 800747a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800747e:	461a      	mov	r2, r3
 8007480:	2340      	movs	r3, #64	@ 0x40
 8007482:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d023      	beq.n	80074d6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800748e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007490:	6a38      	ldr	r0, [r7, #32]
 8007492:	f002 fb29 	bl	8009ae8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007498:	4613      	mov	r3, r2
 800749a:	00db      	lsls	r3, r3, #3
 800749c:	4413      	add	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	3310      	adds	r3, #16
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	4413      	add	r3, r2
 80074a6:	3304      	adds	r3, #4
 80074a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	78db      	ldrb	r3, [r3, #3]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d108      	bne.n	80074c4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	2200      	movs	r2, #0
 80074b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80074b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f005 fef8 	bl	800d2b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80074c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d0:	461a      	mov	r2, r3
 80074d2:	2302      	movs	r3, #2
 80074d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80074e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fcbd 	bl	8007e62 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80074e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ea:	3301      	adds	r3, #1
 80074ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80074ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f0:	085b      	lsrs	r3, r3, #1
 80074f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80074f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f47f af2e 	bne.w	8007358 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4618      	mov	r0, r3
 8007502:	f003 fa0d 	bl	800a920 <USB_ReadInterrupts>
 8007506:	4603      	mov	r3, r0
 8007508:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800750c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007510:	d122      	bne.n	8007558 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	69fa      	ldr	r2, [r7, #28]
 800751c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007520:	f023 0301 	bic.w	r3, r3, #1
 8007524:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800752c:	2b01      	cmp	r3, #1
 800752e:	d108      	bne.n	8007542 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007538:	2100      	movs	r1, #0
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fea4 	bl	8008288 <HAL_PCDEx_LPM_Callback>
 8007540:	e002      	b.n	8007548 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f005 fe96 	bl	800d274 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	695a      	ldr	r2, [r3, #20]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007556:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4618      	mov	r0, r3
 800755e:	f003 f9df 	bl	800a920 <USB_ReadInterrupts>
 8007562:	4603      	mov	r3, r0
 8007564:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007568:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800756c:	d112      	bne.n	8007594 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b01      	cmp	r3, #1
 800757c:	d102      	bne.n	8007584 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f005 fe52 	bl	800d228 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	695a      	ldr	r2, [r3, #20]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007592:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4618      	mov	r0, r3
 800759a:	f003 f9c1 	bl	800a920 <USB_ReadInterrupts>
 800759e:	4603      	mov	r3, r0
 80075a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075a8:	f040 80b7 	bne.w	800771a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	69fa      	ldr	r2, [r7, #28]
 80075b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075ba:	f023 0301 	bic.w	r3, r3, #1
 80075be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2110      	movs	r1, #16
 80075c6:	4618      	mov	r0, r3
 80075c8:	f002 fa8e 	bl	8009ae8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075cc:	2300      	movs	r3, #0
 80075ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075d0:	e046      	b.n	8007660 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80075d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d4:	015a      	lsls	r2, r3, #5
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	4413      	add	r3, r2
 80075da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075de:	461a      	mov	r2, r3
 80075e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80075e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80075e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075f6:	0151      	lsls	r1, r2, #5
 80075f8:	69fa      	ldr	r2, [r7, #28]
 80075fa:	440a      	add	r2, r1
 80075fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007600:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007604:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	4413      	add	r3, r2
 800760e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007612:	461a      	mov	r2, r3
 8007614:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007618:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800761a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800762a:	0151      	lsls	r1, r2, #5
 800762c:	69fa      	ldr	r2, [r7, #28]
 800762e:	440a      	add	r2, r1
 8007630:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007634:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007638:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800763a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800764a:	0151      	lsls	r1, r2, #5
 800764c:	69fa      	ldr	r2, [r7, #28]
 800764e:	440a      	add	r2, r1
 8007650:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007654:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007658:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800765a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800765c:	3301      	adds	r3, #1
 800765e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	791b      	ldrb	r3, [r3, #4]
 8007664:	461a      	mov	r2, r3
 8007666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007668:	4293      	cmp	r3, r2
 800766a:	d3b2      	bcc.n	80075d2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	69fa      	ldr	r2, [r7, #28]
 8007676:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800767a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800767e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	7bdb      	ldrb	r3, [r3, #15]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d016      	beq.n	80076b6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800768e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007692:	69fa      	ldr	r2, [r7, #28]
 8007694:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007698:	f043 030b 	orr.w	r3, r3, #11
 800769c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076a8:	69fa      	ldr	r2, [r7, #28]
 80076aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076ae:	f043 030b 	orr.w	r3, r3, #11
 80076b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80076b4:	e015      	b.n	80076e2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80076c8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80076cc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	69fa      	ldr	r2, [r7, #28]
 80076d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076dc:	f043 030b 	orr.w	r3, r3, #11
 80076e0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	69fa      	ldr	r2, [r7, #28]
 80076ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076f0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80076f4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6818      	ldr	r0, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007704:	461a      	mov	r2, r3
 8007706:	f003 f9cf 	bl	800aaa8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	695a      	ldr	r2, [r3, #20]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007718:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4618      	mov	r0, r3
 8007720:	f003 f8fe 	bl	800a920 <USB_ReadInterrupts>
 8007724:	4603      	mov	r3, r0
 8007726:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800772a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800772e:	d123      	bne.n	8007778 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4618      	mov	r0, r3
 8007736:	f003 f994 	bl	800aa62 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f002 fa4b 	bl	8009bda <USB_GetDevSpeed>
 8007744:	4603      	mov	r3, r0
 8007746:	461a      	mov	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681c      	ldr	r4, [r3, #0]
 8007750:	f001 f9ca 	bl	8008ae8 <HAL_RCC_GetHCLKFreq>
 8007754:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800775a:	461a      	mov	r2, r3
 800775c:	4620      	mov	r0, r4
 800775e:	f001 ff4f 	bl	8009600 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f005 fd41 	bl	800d1ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	695a      	ldr	r2, [r3, #20]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007776:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4618      	mov	r0, r3
 800777e:	f003 f8cf 	bl	800a920 <USB_ReadInterrupts>
 8007782:	4603      	mov	r3, r0
 8007784:	f003 0308 	and.w	r3, r3, #8
 8007788:	2b08      	cmp	r3, #8
 800778a:	d10a      	bne.n	80077a2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f005 fd1e 	bl	800d1ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	695a      	ldr	r2, [r3, #20]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f002 0208 	and.w	r2, r2, #8
 80077a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f003 f8ba 	bl	800a920 <USB_ReadInterrupts>
 80077ac:	4603      	mov	r3, r0
 80077ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077b2:	2b80      	cmp	r3, #128	@ 0x80
 80077b4:	d123      	bne.n	80077fe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80077b6:	6a3b      	ldr	r3, [r7, #32]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80077c2:	2301      	movs	r3, #1
 80077c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80077c6:	e014      	b.n	80077f2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80077c8:	6879      	ldr	r1, [r7, #4]
 80077ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077cc:	4613      	mov	r3, r2
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	4413      	add	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	440b      	add	r3, r1
 80077d6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d105      	bne.n	80077ec <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80077e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	4619      	mov	r1, r3
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fb0a 	bl	8007e00 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80077ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ee:	3301      	adds	r3, #1
 80077f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	791b      	ldrb	r3, [r3, #4]
 80077f6:	461a      	mov	r2, r3
 80077f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d3e4      	bcc.n	80077c8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4618      	mov	r0, r3
 8007804:	f003 f88c 	bl	800a920 <USB_ReadInterrupts>
 8007808:	4603      	mov	r3, r0
 800780a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800780e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007812:	d13c      	bne.n	800788e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007814:	2301      	movs	r3, #1
 8007816:	627b      	str	r3, [r7, #36]	@ 0x24
 8007818:	e02b      	b.n	8007872 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800781a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781c:	015a      	lsls	r2, r3, #5
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	4413      	add	r3, r2
 8007822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800782e:	4613      	mov	r3, r2
 8007830:	00db      	lsls	r3, r3, #3
 8007832:	4413      	add	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	440b      	add	r3, r1
 8007838:	3318      	adds	r3, #24
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d115      	bne.n	800786c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007840:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007842:	2b00      	cmp	r3, #0
 8007844:	da12      	bge.n	800786c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007846:	6879      	ldr	r1, [r7, #4]
 8007848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800784a:	4613      	mov	r3, r2
 800784c:	00db      	lsls	r3, r3, #3
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	440b      	add	r3, r1
 8007854:	3317      	adds	r3, #23
 8007856:	2201      	movs	r2, #1
 8007858:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800785a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785c:	b2db      	uxtb	r3, r3
 800785e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007862:	b2db      	uxtb	r3, r3
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 faca 	bl	8007e00 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800786c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786e:	3301      	adds	r3, #1
 8007870:	627b      	str	r3, [r7, #36]	@ 0x24
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	791b      	ldrb	r3, [r3, #4]
 8007876:	461a      	mov	r2, r3
 8007878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787a:	4293      	cmp	r3, r2
 800787c:	d3cd      	bcc.n	800781a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	695a      	ldr	r2, [r3, #20]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800788c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4618      	mov	r0, r3
 8007894:	f003 f844 	bl	800a920 <USB_ReadInterrupts>
 8007898:	4603      	mov	r3, r0
 800789a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800789e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80078a2:	d156      	bne.n	8007952 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80078a4:	2301      	movs	r3, #1
 80078a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80078a8:	e045      	b.n	8007936 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80078ba:	6879      	ldr	r1, [r7, #4]
 80078bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078be:	4613      	mov	r3, r2
 80078c0:	00db      	lsls	r3, r3, #3
 80078c2:	4413      	add	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	440b      	add	r3, r1
 80078c8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d12e      	bne.n	8007930 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80078d2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	da2b      	bge.n	8007930 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	0c1a      	lsrs	r2, r3, #16
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80078e2:	4053      	eors	r3, r2
 80078e4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d121      	bne.n	8007930 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078f0:	4613      	mov	r3, r2
 80078f2:	00db      	lsls	r3, r3, #3
 80078f4:	4413      	add	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	440b      	add	r3, r1
 80078fa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80078fe:	2201      	movs	r2, #1
 8007900:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10a      	bne.n	8007930 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	69fa      	ldr	r2, [r7, #28]
 8007924:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007928:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800792c:	6053      	str	r3, [r2, #4]
            break;
 800792e:	e008      	b.n	8007942 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007932:	3301      	adds	r3, #1
 8007934:	627b      	str	r3, [r7, #36]	@ 0x24
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	791b      	ldrb	r3, [r3, #4]
 800793a:	461a      	mov	r2, r3
 800793c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793e:	4293      	cmp	r3, r2
 8007940:	d3b3      	bcc.n	80078aa <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	695a      	ldr	r2, [r3, #20]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007950:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4618      	mov	r0, r3
 8007958:	f002 ffe2 	bl	800a920 <USB_ReadInterrupts>
 800795c:	4603      	mov	r3, r0
 800795e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007962:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007966:	d10a      	bne.n	800797e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f005 fcb5 	bl	800d2d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	695a      	ldr	r2, [r3, #20]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800797c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f002 ffcc 	bl	800a920 <USB_ReadInterrupts>
 8007988:	4603      	mov	r3, r0
 800798a:	f003 0304 	and.w	r3, r3, #4
 800798e:	2b04      	cmp	r3, #4
 8007990:	d115      	bne.n	80079be <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	f003 0304 	and.w	r3, r3, #4
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f005 fca5 	bl	800d2f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6859      	ldr	r1, [r3, #4]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	605a      	str	r2, [r3, #4]
 80079ba:	e000      	b.n	80079be <HAL_PCD_IRQHandler+0x93c>
      return;
 80079bc:	bf00      	nop
    }
  }
}
 80079be:	3734      	adds	r7, #52	@ 0x34
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd90      	pop	{r4, r7, pc}

080079c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d101      	bne.n	80079de <HAL_PCD_SetAddress+0x1a>
 80079da:	2302      	movs	r3, #2
 80079dc:	e012      	b.n	8007a04 <HAL_PCD_SetAddress+0x40>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	78fa      	ldrb	r2, [r7, #3]
 80079ea:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	78fa      	ldrb	r2, [r7, #3]
 80079f2:	4611      	mov	r1, r2
 80079f4:	4618      	mov	r0, r3
 80079f6:	f002 ff2b 	bl	800a850 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	4608      	mov	r0, r1
 8007a16:	4611      	mov	r1, r2
 8007a18:	461a      	mov	r2, r3
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	70fb      	strb	r3, [r7, #3]
 8007a1e:	460b      	mov	r3, r1
 8007a20:	803b      	strh	r3, [r7, #0]
 8007a22:	4613      	mov	r3, r2
 8007a24:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007a2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	da0f      	bge.n	8007a52 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a32:	78fb      	ldrb	r3, [r7, #3]
 8007a34:	f003 020f 	and.w	r2, r3, #15
 8007a38:	4613      	mov	r3, r2
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	4413      	add	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	3310      	adds	r3, #16
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	4413      	add	r3, r2
 8007a46:	3304      	adds	r3, #4
 8007a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	705a      	strb	r2, [r3, #1]
 8007a50:	e00f      	b.n	8007a72 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a52:	78fb      	ldrb	r3, [r7, #3]
 8007a54:	f003 020f 	and.w	r2, r3, #15
 8007a58:	4613      	mov	r3, r2
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	4413      	add	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	4413      	add	r3, r2
 8007a68:	3304      	adds	r3, #4
 8007a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007a72:	78fb      	ldrb	r3, [r7, #3]
 8007a74:	f003 030f 	and.w	r3, r3, #15
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007a7e:	883b      	ldrh	r3, [r7, #0]
 8007a80:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	78ba      	ldrb	r2, [r7, #2]
 8007a8c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	785b      	ldrb	r3, [r3, #1]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d004      	beq.n	8007aa0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007aa0:	78bb      	ldrb	r3, [r7, #2]
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d102      	bne.n	8007aac <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d101      	bne.n	8007aba <HAL_PCD_EP_Open+0xae>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e00e      	b.n	8007ad8 <HAL_PCD_EP_Open+0xcc>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68f9      	ldr	r1, [r7, #12]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f002 f8ab 	bl	8009c24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007ad6:	7afb      	ldrb	r3, [r7, #11]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007aec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	da0f      	bge.n	8007b14 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007af4:	78fb      	ldrb	r3, [r7, #3]
 8007af6:	f003 020f 	and.w	r2, r3, #15
 8007afa:	4613      	mov	r3, r2
 8007afc:	00db      	lsls	r3, r3, #3
 8007afe:	4413      	add	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	3310      	adds	r3, #16
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	4413      	add	r3, r2
 8007b08:	3304      	adds	r3, #4
 8007b0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	705a      	strb	r2, [r3, #1]
 8007b12:	e00f      	b.n	8007b34 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b14:	78fb      	ldrb	r3, [r7, #3]
 8007b16:	f003 020f 	and.w	r2, r3, #15
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	00db      	lsls	r3, r3, #3
 8007b1e:	4413      	add	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	4413      	add	r3, r2
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b34:	78fb      	ldrb	r3, [r7, #3]
 8007b36:	f003 030f 	and.w	r3, r3, #15
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d101      	bne.n	8007b4e <HAL_PCD_EP_Close+0x6e>
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	e00e      	b.n	8007b6c <HAL_PCD_EP_Close+0x8c>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68f9      	ldr	r1, [r7, #12]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f002 f8e9 	bl	8009d34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	607a      	str	r2, [r7, #4]
 8007b7e:	603b      	str	r3, [r7, #0]
 8007b80:	460b      	mov	r3, r1
 8007b82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b84:	7afb      	ldrb	r3, [r7, #11]
 8007b86:	f003 020f 	and.w	r2, r3, #15
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	00db      	lsls	r3, r3, #3
 8007b8e:	4413      	add	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	4413      	add	r3, r2
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	2200      	movs	r2, #0
 8007bae:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007bb6:	7afb      	ldrb	r3, [r7, #11]
 8007bb8:	f003 030f 	and.w	r3, r3, #15
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	799b      	ldrb	r3, [r3, #6]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d102      	bne.n	8007bd0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6818      	ldr	r0, [r3, #0]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	799b      	ldrb	r3, [r3, #6]
 8007bd8:	461a      	mov	r2, r3
 8007bda:	6979      	ldr	r1, [r7, #20]
 8007bdc:	f002 f986 	bl	8009eec <USB_EPStartXfer>

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007bf6:	78fb      	ldrb	r3, [r7, #3]
 8007bf8:	f003 020f 	and.w	r2, r3, #15
 8007bfc:	6879      	ldr	r1, [r7, #4]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	00db      	lsls	r3, r3, #3
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	440b      	add	r3, r1
 8007c08:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007c0c:	681b      	ldr	r3, [r3, #0]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b086      	sub	sp, #24
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	607a      	str	r2, [r7, #4]
 8007c24:	603b      	str	r3, [r7, #0]
 8007c26:	460b      	mov	r3, r1
 8007c28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c2a:	7afb      	ldrb	r3, [r7, #11]
 8007c2c:	f003 020f 	and.w	r2, r3, #15
 8007c30:	4613      	mov	r3, r2
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	4413      	add	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	3310      	adds	r3, #16
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	3304      	adds	r3, #4
 8007c40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2200      	movs	r2, #0
 8007c52:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	2201      	movs	r2, #1
 8007c58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007c5a:	7afb      	ldrb	r3, [r7, #11]
 8007c5c:	f003 030f 	and.w	r3, r3, #15
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	799b      	ldrb	r3, [r3, #6]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d102      	bne.n	8007c74 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6818      	ldr	r0, [r3, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	799b      	ldrb	r3, [r3, #6]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	6979      	ldr	r1, [r7, #20]
 8007c80:	f002 f934 	bl	8009eec <USB_EPStartXfer>

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3718      	adds	r7, #24
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b084      	sub	sp, #16
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	460b      	mov	r3, r1
 8007c98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007c9a:	78fb      	ldrb	r3, [r7, #3]
 8007c9c:	f003 030f 	and.w	r3, r3, #15
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	7912      	ldrb	r2, [r2, #4]
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d901      	bls.n	8007cac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e04f      	b.n	8007d4c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007cac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	da0f      	bge.n	8007cd4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007cb4:	78fb      	ldrb	r3, [r7, #3]
 8007cb6:	f003 020f 	and.w	r2, r3, #15
 8007cba:	4613      	mov	r3, r2
 8007cbc:	00db      	lsls	r3, r3, #3
 8007cbe:	4413      	add	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	3310      	adds	r3, #16
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	3304      	adds	r3, #4
 8007cca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	705a      	strb	r2, [r3, #1]
 8007cd2:	e00d      	b.n	8007cf0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007cd4:	78fa      	ldrb	r2, [r7, #3]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	00db      	lsls	r3, r3, #3
 8007cda:	4413      	add	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007cf6:	78fb      	ldrb	r3, [r7, #3]
 8007cf8:	f003 030f 	and.w	r3, r3, #15
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d101      	bne.n	8007d10 <HAL_PCD_EP_SetStall+0x82>
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	e01d      	b.n	8007d4c <HAL_PCD_EP_SetStall+0xbe>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68f9      	ldr	r1, [r7, #12]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f002 fcc2 	bl	800a6a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	f003 030f 	and.w	r3, r3, #15
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d109      	bne.n	8007d42 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6818      	ldr	r0, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	7999      	ldrb	r1, [r3, #6]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	f002 feb3 	bl	800aaa8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	f003 030f 	and.w	r3, r3, #15
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	7912      	ldrb	r2, [r2, #4]
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d901      	bls.n	8007d72 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e042      	b.n	8007df8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007d72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	da0f      	bge.n	8007d9a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d7a:	78fb      	ldrb	r3, [r7, #3]
 8007d7c:	f003 020f 	and.w	r2, r3, #15
 8007d80:	4613      	mov	r3, r2
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	4413      	add	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	3310      	adds	r3, #16
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	3304      	adds	r3, #4
 8007d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2201      	movs	r2, #1
 8007d96:	705a      	strb	r2, [r3, #1]
 8007d98:	e00f      	b.n	8007dba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d9a:	78fb      	ldrb	r3, [r7, #3]
 8007d9c:	f003 020f 	and.w	r2, r3, #15
 8007da0:	4613      	mov	r3, r2
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	4413      	add	r3, r2
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	4413      	add	r3, r2
 8007db0:	3304      	adds	r3, #4
 8007db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007dc0:	78fb      	ldrb	r3, [r7, #3]
 8007dc2:	f003 030f 	and.w	r3, r3, #15
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d101      	bne.n	8007dda <HAL_PCD_EP_ClrStall+0x86>
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	e00e      	b.n	8007df8 <HAL_PCD_EP_ClrStall+0xa4>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	68f9      	ldr	r1, [r7, #12]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f002 fccb 	bl	800a784 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007e0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	da0c      	bge.n	8007e2e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e14:	78fb      	ldrb	r3, [r7, #3]
 8007e16:	f003 020f 	and.w	r2, r3, #15
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	00db      	lsls	r3, r3, #3
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	3310      	adds	r3, #16
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	4413      	add	r3, r2
 8007e28:	3304      	adds	r3, #4
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	e00c      	b.n	8007e48 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e2e:	78fb      	ldrb	r3, [r7, #3]
 8007e30:	f003 020f 	and.w	r2, r3, #15
 8007e34:	4613      	mov	r3, r2
 8007e36:	00db      	lsls	r3, r3, #3
 8007e38:	4413      	add	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	4413      	add	r3, r2
 8007e44:	3304      	adds	r3, #4
 8007e46:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68f9      	ldr	r1, [r7, #12]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f002 faea 	bl	800a428 <USB_EPStopXfer>
 8007e54:	4603      	mov	r3, r0
 8007e56:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007e58:	7afb      	ldrb	r3, [r7, #11]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b08a      	sub	sp, #40	@ 0x28
 8007e66:	af02      	add	r7, sp, #8
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	4613      	mov	r3, r2
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	4413      	add	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	3310      	adds	r3, #16
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	4413      	add	r3, r2
 8007e86:	3304      	adds	r3, #4
 8007e88:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	695a      	ldr	r2, [r3, #20]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d901      	bls.n	8007e9a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e06b      	b.n	8007f72 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	691a      	ldr	r2, [r3, #16]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d902      	bls.n	8007eb6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	3303      	adds	r3, #3
 8007eba:	089b      	lsrs	r3, r3, #2
 8007ebc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ebe:	e02a      	b.n	8007f16 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	691a      	ldr	r2, [r3, #16]
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	69fa      	ldr	r2, [r7, #28]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d902      	bls.n	8007edc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007edc:	69fb      	ldr	r3, [r7, #28]
 8007ede:	3303      	adds	r3, #3
 8007ee0:	089b      	lsrs	r3, r3, #2
 8007ee2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	68d9      	ldr	r1, [r3, #12]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007ef4:	9300      	str	r3, [sp, #0]
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	6978      	ldr	r0, [r7, #20]
 8007efa:	f002 fb3f 	bl	800a57c <USB_WritePacket>

    ep->xfer_buff  += len;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	68da      	ldr	r2, [r3, #12]
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	441a      	add	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	695a      	ldr	r2, [r3, #20]
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	441a      	add	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007f26:	69ba      	ldr	r2, [r7, #24]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d809      	bhi.n	8007f40 <PCD_WriteEmptyTxFifo+0xde>
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	695a      	ldr	r2, [r3, #20]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d203      	bcs.n	8007f40 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1bf      	bne.n	8007ec0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	691a      	ldr	r2, [r3, #16]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	695b      	ldr	r3, [r3, #20]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d811      	bhi.n	8007f70 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	f003 030f 	and.w	r3, r3, #15
 8007f52:	2201      	movs	r2, #1
 8007f54:	fa02 f303 	lsl.w	r3, r2, r3
 8007f58:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	43db      	mvns	r3, r3
 8007f66:	6939      	ldr	r1, [r7, #16]
 8007f68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3720      	adds	r7, #32
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
	...

08007f7c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b088      	sub	sp, #32
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	333c      	adds	r3, #60	@ 0x3c
 8007f94:	3304      	adds	r3, #4
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	015a      	lsls	r2, r3, #5
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	799b      	ldrb	r3, [r3, #6]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d17b      	bne.n	80080aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	f003 0308 	and.w	r3, r3, #8
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d015      	beq.n	8007fe8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	4a61      	ldr	r2, [pc, #388]	@ (8008144 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	f240 80b9 	bls.w	8008138 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 80b3 	beq.w	8008138 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fe4:	6093      	str	r3, [r2, #8]
 8007fe6:	e0a7      	b.n	8008138 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	f003 0320 	and.w	r3, r3, #32
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d009      	beq.n	8008006 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ffe:	461a      	mov	r2, r3
 8008000:	2320      	movs	r3, #32
 8008002:	6093      	str	r3, [r2, #8]
 8008004:	e098      	b.n	8008138 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800800c:	2b00      	cmp	r3, #0
 800800e:	f040 8093 	bne.w	8008138 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	4a4b      	ldr	r2, [pc, #300]	@ (8008144 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d90f      	bls.n	800803a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00a      	beq.n	800803a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008030:	461a      	mov	r2, r3
 8008032:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008036:	6093      	str	r3, [r2, #8]
 8008038:	e07e      	b.n	8008138 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	4613      	mov	r3, r2
 800803e:	00db      	lsls	r3, r3, #3
 8008040:	4413      	add	r3, r2
 8008042:	009b      	lsls	r3, r3, #2
 8008044:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	4413      	add	r3, r2
 800804c:	3304      	adds	r3, #4
 800804e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6a1a      	ldr	r2, [r3, #32]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	0159      	lsls	r1, r3, #5
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	440b      	add	r3, r1
 800805c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008066:	1ad2      	subs	r2, r2, r3
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d114      	bne.n	800809c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	691b      	ldr	r3, [r3, #16]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d109      	bne.n	800808e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6818      	ldr	r0, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008084:	461a      	mov	r2, r3
 8008086:	2101      	movs	r1, #1
 8008088:	f002 fd0e 	bl	800aaa8 <USB_EP0_OutStart>
 800808c:	e006      	b.n	800809c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	68da      	ldr	r2, [r3, #12]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	441a      	add	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f005 f85e 	bl	800d164 <HAL_PCD_DataOutStageCallback>
 80080a8:	e046      	b.n	8008138 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	4a26      	ldr	r2, [pc, #152]	@ (8008148 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d124      	bne.n	80080fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00a      	beq.n	80080d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080c8:	461a      	mov	r2, r3
 80080ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080ce:	6093      	str	r3, [r2, #8]
 80080d0:	e032      	b.n	8008138 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	f003 0320 	and.w	r3, r3, #32
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d008      	beq.n	80080ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080e8:	461a      	mov	r2, r3
 80080ea:	2320      	movs	r3, #32
 80080ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f005 f835 	bl	800d164 <HAL_PCD_DataOutStageCallback>
 80080fa:	e01d      	b.n	8008138 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d114      	bne.n	800812c <PCD_EP_OutXfrComplete_int+0x1b0>
 8008102:	6879      	ldr	r1, [r7, #4]
 8008104:	683a      	ldr	r2, [r7, #0]
 8008106:	4613      	mov	r3, r2
 8008108:	00db      	lsls	r3, r3, #3
 800810a:	4413      	add	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	440b      	add	r3, r1
 8008110:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d108      	bne.n	800812c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6818      	ldr	r0, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008124:	461a      	mov	r2, r3
 8008126:	2100      	movs	r1, #0
 8008128:	f002 fcbe 	bl	800aaa8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	b2db      	uxtb	r3, r3
 8008130:	4619      	mov	r1, r3
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f005 f816 	bl	800d164 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3720      	adds	r7, #32
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	4f54300a 	.word	0x4f54300a
 8008148:	4f54310a 	.word	0x4f54310a

0800814c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	333c      	adds	r3, #60	@ 0x3c
 8008164:	3304      	adds	r3, #4
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	4413      	add	r3, r2
 8008172:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	4a15      	ldr	r2, [pc, #84]	@ (80081d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d90e      	bls.n	80081a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008188:	2b00      	cmp	r3, #0
 800818a:	d009      	beq.n	80081a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	015a      	lsls	r2, r3, #5
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	4413      	add	r3, r2
 8008194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008198:	461a      	mov	r2, r3
 800819a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800819e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f004 ffcd 	bl	800d140 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	4a0a      	ldr	r2, [pc, #40]	@ (80081d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d90c      	bls.n	80081c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	799b      	ldrb	r3, [r3, #6]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d108      	bne.n	80081c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6818      	ldr	r0, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80081c0:	461a      	mov	r2, r3
 80081c2:	2101      	movs	r1, #1
 80081c4:	f002 fc70 	bl	800aaa8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	4f54300a 	.word	0x4f54300a

080081d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70fb      	strb	r3, [r7, #3]
 80081e4:	4613      	mov	r3, r2
 80081e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80081f0:	78fb      	ldrb	r3, [r7, #3]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d107      	bne.n	8008206 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80081f6:	883b      	ldrh	r3, [r7, #0]
 80081f8:	0419      	lsls	r1, r3, #16
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	430a      	orrs	r2, r1
 8008202:	629a      	str	r2, [r3, #40]	@ 0x28
 8008204:	e028      	b.n	8008258 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800820c:	0c1b      	lsrs	r3, r3, #16
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	4413      	add	r3, r2
 8008212:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008214:	2300      	movs	r3, #0
 8008216:	73fb      	strb	r3, [r7, #15]
 8008218:	e00d      	b.n	8008236 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	7bfb      	ldrb	r3, [r7, #15]
 8008220:	3340      	adds	r3, #64	@ 0x40
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	0c1b      	lsrs	r3, r3, #16
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	4413      	add	r3, r2
 800822e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	3301      	adds	r3, #1
 8008234:	73fb      	strb	r3, [r7, #15]
 8008236:	7bfa      	ldrb	r2, [r7, #15]
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	3b01      	subs	r3, #1
 800823c:	429a      	cmp	r2, r3
 800823e:	d3ec      	bcc.n	800821a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008240:	883b      	ldrh	r3, [r7, #0]
 8008242:	0418      	lsls	r0, r3, #16
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6819      	ldr	r1, [r3, #0]
 8008248:	78fb      	ldrb	r3, [r7, #3]
 800824a:	3b01      	subs	r3, #1
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	4302      	orrs	r2, r0
 8008250:	3340      	adds	r3, #64	@ 0x40
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	440b      	add	r3, r1
 8008256:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3714      	adds	r7, #20
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr

08008266 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008266:	b480      	push	{r7}
 8008268:	b083      	sub	sp, #12
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	460b      	mov	r3, r1
 8008270:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	887a      	ldrh	r2, [r7, #2]
 8008278:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	460b      	mov	r3, r1
 8008292:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d101      	bne.n	80082b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e267      	b.n	8008782 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d075      	beq.n	80083aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80082be:	4b88      	ldr	r3, [pc, #544]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f003 030c 	and.w	r3, r3, #12
 80082c6:	2b04      	cmp	r3, #4
 80082c8:	d00c      	beq.n	80082e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082ca:	4b85      	ldr	r3, [pc, #532]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80082d2:	2b08      	cmp	r3, #8
 80082d4:	d112      	bne.n	80082fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082d6:	4b82      	ldr	r3, [pc, #520]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80082de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80082e2:	d10b      	bne.n	80082fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082e4:	4b7e      	ldr	r3, [pc, #504]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d05b      	beq.n	80083a8 <HAL_RCC_OscConfig+0x108>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d157      	bne.n	80083a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e242      	b.n	8008782 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008304:	d106      	bne.n	8008314 <HAL_RCC_OscConfig+0x74>
 8008306:	4b76      	ldr	r3, [pc, #472]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a75      	ldr	r2, [pc, #468]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 800830c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008310:	6013      	str	r3, [r2, #0]
 8008312:	e01d      	b.n	8008350 <HAL_RCC_OscConfig+0xb0>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800831c:	d10c      	bne.n	8008338 <HAL_RCC_OscConfig+0x98>
 800831e:	4b70      	ldr	r3, [pc, #448]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a6f      	ldr	r2, [pc, #444]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 8008324:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008328:	6013      	str	r3, [r2, #0]
 800832a:	4b6d      	ldr	r3, [pc, #436]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a6c      	ldr	r2, [pc, #432]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 8008330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008334:	6013      	str	r3, [r2, #0]
 8008336:	e00b      	b.n	8008350 <HAL_RCC_OscConfig+0xb0>
 8008338:	4b69      	ldr	r3, [pc, #420]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a68      	ldr	r2, [pc, #416]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 800833e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	4b66      	ldr	r3, [pc, #408]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a65      	ldr	r2, [pc, #404]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 800834a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800834e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d013      	beq.n	8008380 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008358:	f7fa f9f2 	bl	8002740 <HAL_GetTick>
 800835c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800835e:	e008      	b.n	8008372 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008360:	f7fa f9ee 	bl	8002740 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	2b64      	cmp	r3, #100	@ 0x64
 800836c:	d901      	bls.n	8008372 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e207      	b.n	8008782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008372:	4b5b      	ldr	r3, [pc, #364]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d0f0      	beq.n	8008360 <HAL_RCC_OscConfig+0xc0>
 800837e:	e014      	b.n	80083aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008380:	f7fa f9de 	bl	8002740 <HAL_GetTick>
 8008384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008386:	e008      	b.n	800839a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008388:	f7fa f9da 	bl	8002740 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b64      	cmp	r3, #100	@ 0x64
 8008394:	d901      	bls.n	800839a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e1f3      	b.n	8008782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800839a:	4b51      	ldr	r3, [pc, #324]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1f0      	bne.n	8008388 <HAL_RCC_OscConfig+0xe8>
 80083a6:	e000      	b.n	80083aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 0302 	and.w	r3, r3, #2
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d063      	beq.n	800847e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80083b6:	4b4a      	ldr	r3, [pc, #296]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f003 030c 	and.w	r3, r3, #12
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00b      	beq.n	80083da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083c2:	4b47      	ldr	r3, [pc, #284]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80083ca:	2b08      	cmp	r3, #8
 80083cc:	d11c      	bne.n	8008408 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083ce:	4b44      	ldr	r3, [pc, #272]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d116      	bne.n	8008408 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083da:	4b41      	ldr	r3, [pc, #260]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0302 	and.w	r3, r3, #2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d005      	beq.n	80083f2 <HAL_RCC_OscConfig+0x152>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d001      	beq.n	80083f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e1c7      	b.n	8008782 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083f2:	4b3b      	ldr	r3, [pc, #236]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	00db      	lsls	r3, r3, #3
 8008400:	4937      	ldr	r1, [pc, #220]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 8008402:	4313      	orrs	r3, r2
 8008404:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008406:	e03a      	b.n	800847e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d020      	beq.n	8008452 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008410:	4b34      	ldr	r3, [pc, #208]	@ (80084e4 <HAL_RCC_OscConfig+0x244>)
 8008412:	2201      	movs	r2, #1
 8008414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008416:	f7fa f993 	bl	8002740 <HAL_GetTick>
 800841a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800841c:	e008      	b.n	8008430 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800841e:	f7fa f98f 	bl	8002740 <HAL_GetTick>
 8008422:	4602      	mov	r2, r0
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	2b02      	cmp	r3, #2
 800842a:	d901      	bls.n	8008430 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e1a8      	b.n	8008782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008430:	4b2b      	ldr	r3, [pc, #172]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b00      	cmp	r3, #0
 800843a:	d0f0      	beq.n	800841e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800843c:	4b28      	ldr	r3, [pc, #160]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	00db      	lsls	r3, r3, #3
 800844a:	4925      	ldr	r1, [pc, #148]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 800844c:	4313      	orrs	r3, r2
 800844e:	600b      	str	r3, [r1, #0]
 8008450:	e015      	b.n	800847e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008452:	4b24      	ldr	r3, [pc, #144]	@ (80084e4 <HAL_RCC_OscConfig+0x244>)
 8008454:	2200      	movs	r2, #0
 8008456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008458:	f7fa f972 	bl	8002740 <HAL_GetTick>
 800845c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800845e:	e008      	b.n	8008472 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008460:	f7fa f96e 	bl	8002740 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	2b02      	cmp	r3, #2
 800846c:	d901      	bls.n	8008472 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e187      	b.n	8008782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008472:	4b1b      	ldr	r3, [pc, #108]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1f0      	bne.n	8008460 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0308 	and.w	r3, r3, #8
 8008486:	2b00      	cmp	r3, #0
 8008488:	d036      	beq.n	80084f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d016      	beq.n	80084c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008492:	4b15      	ldr	r3, [pc, #84]	@ (80084e8 <HAL_RCC_OscConfig+0x248>)
 8008494:	2201      	movs	r2, #1
 8008496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008498:	f7fa f952 	bl	8002740 <HAL_GetTick>
 800849c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800849e:	e008      	b.n	80084b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084a0:	f7fa f94e 	bl	8002740 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d901      	bls.n	80084b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e167      	b.n	8008782 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084b2:	4b0b      	ldr	r3, [pc, #44]	@ (80084e0 <HAL_RCC_OscConfig+0x240>)
 80084b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084b6:	f003 0302 	and.w	r3, r3, #2
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d0f0      	beq.n	80084a0 <HAL_RCC_OscConfig+0x200>
 80084be:	e01b      	b.n	80084f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084c0:	4b09      	ldr	r3, [pc, #36]	@ (80084e8 <HAL_RCC_OscConfig+0x248>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80084c6:	f7fa f93b 	bl	8002740 <HAL_GetTick>
 80084ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084cc:	e00e      	b.n	80084ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084ce:	f7fa f937 	bl	8002740 <HAL_GetTick>
 80084d2:	4602      	mov	r2, r0
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d907      	bls.n	80084ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80084dc:	2303      	movs	r3, #3
 80084de:	e150      	b.n	8008782 <HAL_RCC_OscConfig+0x4e2>
 80084e0:	40023800 	.word	0x40023800
 80084e4:	42470000 	.word	0x42470000
 80084e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084ec:	4b88      	ldr	r3, [pc, #544]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 80084ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80084f0:	f003 0302 	and.w	r3, r3, #2
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1ea      	bne.n	80084ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0304 	and.w	r3, r3, #4
 8008500:	2b00      	cmp	r3, #0
 8008502:	f000 8097 	beq.w	8008634 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008506:	2300      	movs	r3, #0
 8008508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800850a:	4b81      	ldr	r3, [pc, #516]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 800850c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800850e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10f      	bne.n	8008536 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008516:	2300      	movs	r3, #0
 8008518:	60bb      	str	r3, [r7, #8]
 800851a:	4b7d      	ldr	r3, [pc, #500]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 800851c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800851e:	4a7c      	ldr	r2, [pc, #496]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 8008520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008524:	6413      	str	r3, [r2, #64]	@ 0x40
 8008526:	4b7a      	ldr	r3, [pc, #488]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 8008528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800852a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800852e:	60bb      	str	r3, [r7, #8]
 8008530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008532:	2301      	movs	r3, #1
 8008534:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008536:	4b77      	ldr	r3, [pc, #476]	@ (8008714 <HAL_RCC_OscConfig+0x474>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800853e:	2b00      	cmp	r3, #0
 8008540:	d118      	bne.n	8008574 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008542:	4b74      	ldr	r3, [pc, #464]	@ (8008714 <HAL_RCC_OscConfig+0x474>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a73      	ldr	r2, [pc, #460]	@ (8008714 <HAL_RCC_OscConfig+0x474>)
 8008548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800854c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800854e:	f7fa f8f7 	bl	8002740 <HAL_GetTick>
 8008552:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008554:	e008      	b.n	8008568 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008556:	f7fa f8f3 	bl	8002740 <HAL_GetTick>
 800855a:	4602      	mov	r2, r0
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	1ad3      	subs	r3, r2, r3
 8008560:	2b02      	cmp	r3, #2
 8008562:	d901      	bls.n	8008568 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e10c      	b.n	8008782 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008568:	4b6a      	ldr	r3, [pc, #424]	@ (8008714 <HAL_RCC_OscConfig+0x474>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008570:	2b00      	cmp	r3, #0
 8008572:	d0f0      	beq.n	8008556 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	689b      	ldr	r3, [r3, #8]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d106      	bne.n	800858a <HAL_RCC_OscConfig+0x2ea>
 800857c:	4b64      	ldr	r3, [pc, #400]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 800857e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008580:	4a63      	ldr	r2, [pc, #396]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 8008582:	f043 0301 	orr.w	r3, r3, #1
 8008586:	6713      	str	r3, [r2, #112]	@ 0x70
 8008588:	e01c      	b.n	80085c4 <HAL_RCC_OscConfig+0x324>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	2b05      	cmp	r3, #5
 8008590:	d10c      	bne.n	80085ac <HAL_RCC_OscConfig+0x30c>
 8008592:	4b5f      	ldr	r3, [pc, #380]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 8008594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008596:	4a5e      	ldr	r2, [pc, #376]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 8008598:	f043 0304 	orr.w	r3, r3, #4
 800859c:	6713      	str	r3, [r2, #112]	@ 0x70
 800859e:	4b5c      	ldr	r3, [pc, #368]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 80085a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085a2:	4a5b      	ldr	r2, [pc, #364]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 80085a4:	f043 0301 	orr.w	r3, r3, #1
 80085a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80085aa:	e00b      	b.n	80085c4 <HAL_RCC_OscConfig+0x324>
 80085ac:	4b58      	ldr	r3, [pc, #352]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 80085ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085b0:	4a57      	ldr	r2, [pc, #348]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 80085b2:	f023 0301 	bic.w	r3, r3, #1
 80085b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80085b8:	4b55      	ldr	r3, [pc, #340]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 80085ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085bc:	4a54      	ldr	r2, [pc, #336]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 80085be:	f023 0304 	bic.w	r3, r3, #4
 80085c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d015      	beq.n	80085f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085cc:	f7fa f8b8 	bl	8002740 <HAL_GetTick>
 80085d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085d2:	e00a      	b.n	80085ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085d4:	f7fa f8b4 	bl	8002740 <HAL_GetTick>
 80085d8:	4602      	mov	r2, r0
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d901      	bls.n	80085ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e0cb      	b.n	8008782 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085ea:	4b49      	ldr	r3, [pc, #292]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 80085ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ee:	f003 0302 	and.w	r3, r3, #2
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0ee      	beq.n	80085d4 <HAL_RCC_OscConfig+0x334>
 80085f6:	e014      	b.n	8008622 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80085f8:	f7fa f8a2 	bl	8002740 <HAL_GetTick>
 80085fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80085fe:	e00a      	b.n	8008616 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008600:	f7fa f89e 	bl	8002740 <HAL_GetTick>
 8008604:	4602      	mov	r2, r0
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800860e:	4293      	cmp	r3, r2
 8008610:	d901      	bls.n	8008616 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e0b5      	b.n	8008782 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008616:	4b3e      	ldr	r3, [pc, #248]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 8008618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800861a:	f003 0302 	and.w	r3, r3, #2
 800861e:	2b00      	cmp	r3, #0
 8008620:	d1ee      	bne.n	8008600 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008622:	7dfb      	ldrb	r3, [r7, #23]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d105      	bne.n	8008634 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008628:	4b39      	ldr	r3, [pc, #228]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 800862a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800862c:	4a38      	ldr	r2, [pc, #224]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 800862e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008632:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 80a1 	beq.w	8008780 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800863e:	4b34      	ldr	r3, [pc, #208]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f003 030c 	and.w	r3, r3, #12
 8008646:	2b08      	cmp	r3, #8
 8008648:	d05c      	beq.n	8008704 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	2b02      	cmp	r3, #2
 8008650:	d141      	bne.n	80086d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008652:	4b31      	ldr	r3, [pc, #196]	@ (8008718 <HAL_RCC_OscConfig+0x478>)
 8008654:	2200      	movs	r2, #0
 8008656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008658:	f7fa f872 	bl	8002740 <HAL_GetTick>
 800865c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800865e:	e008      	b.n	8008672 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008660:	f7fa f86e 	bl	8002740 <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	2b02      	cmp	r3, #2
 800866c:	d901      	bls.n	8008672 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e087      	b.n	8008782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008672:	4b27      	ldr	r3, [pc, #156]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1f0      	bne.n	8008660 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	69da      	ldr	r2, [r3, #28]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a1b      	ldr	r3, [r3, #32]
 8008686:	431a      	orrs	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800868c:	019b      	lsls	r3, r3, #6
 800868e:	431a      	orrs	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008694:	085b      	lsrs	r3, r3, #1
 8008696:	3b01      	subs	r3, #1
 8008698:	041b      	lsls	r3, r3, #16
 800869a:	431a      	orrs	r2, r3
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a0:	061b      	lsls	r3, r3, #24
 80086a2:	491b      	ldr	r1, [pc, #108]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008718 <HAL_RCC_OscConfig+0x478>)
 80086aa:	2201      	movs	r2, #1
 80086ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086ae:	f7fa f847 	bl	8002740 <HAL_GetTick>
 80086b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086b4:	e008      	b.n	80086c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086b6:	f7fa f843 	bl	8002740 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d901      	bls.n	80086c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e05c      	b.n	8008782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086c8:	4b11      	ldr	r3, [pc, #68]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d0f0      	beq.n	80086b6 <HAL_RCC_OscConfig+0x416>
 80086d4:	e054      	b.n	8008780 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086d6:	4b10      	ldr	r3, [pc, #64]	@ (8008718 <HAL_RCC_OscConfig+0x478>)
 80086d8:	2200      	movs	r2, #0
 80086da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086dc:	f7fa f830 	bl	8002740 <HAL_GetTick>
 80086e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086e2:	e008      	b.n	80086f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086e4:	f7fa f82c 	bl	8002740 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d901      	bls.n	80086f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e045      	b.n	8008782 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086f6:	4b06      	ldr	r3, [pc, #24]	@ (8008710 <HAL_RCC_OscConfig+0x470>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1f0      	bne.n	80086e4 <HAL_RCC_OscConfig+0x444>
 8008702:	e03d      	b.n	8008780 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d107      	bne.n	800871c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e038      	b.n	8008782 <HAL_RCC_OscConfig+0x4e2>
 8008710:	40023800 	.word	0x40023800
 8008714:	40007000 	.word	0x40007000
 8008718:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800871c:	4b1b      	ldr	r3, [pc, #108]	@ (800878c <HAL_RCC_OscConfig+0x4ec>)
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d028      	beq.n	800877c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008734:	429a      	cmp	r2, r3
 8008736:	d121      	bne.n	800877c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008742:	429a      	cmp	r2, r3
 8008744:	d11a      	bne.n	800877c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800874c:	4013      	ands	r3, r2
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008752:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008754:	4293      	cmp	r3, r2
 8008756:	d111      	bne.n	800877c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008762:	085b      	lsrs	r3, r3, #1
 8008764:	3b01      	subs	r3, #1
 8008766:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008768:	429a      	cmp	r2, r3
 800876a:	d107      	bne.n	800877c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008776:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008778:	429a      	cmp	r2, r3
 800877a:	d001      	beq.n	8008780 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e000      	b.n	8008782 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	40023800 	.word	0x40023800

08008790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d101      	bne.n	80087a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	e0cc      	b.n	800893e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80087a4:	4b68      	ldr	r3, [pc, #416]	@ (8008948 <HAL_RCC_ClockConfig+0x1b8>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f003 0307 	and.w	r3, r3, #7
 80087ac:	683a      	ldr	r2, [r7, #0]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d90c      	bls.n	80087cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087b2:	4b65      	ldr	r3, [pc, #404]	@ (8008948 <HAL_RCC_ClockConfig+0x1b8>)
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	b2d2      	uxtb	r2, r2
 80087b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087ba:	4b63      	ldr	r3, [pc, #396]	@ (8008948 <HAL_RCC_ClockConfig+0x1b8>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0307 	and.w	r3, r3, #7
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d001      	beq.n	80087cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e0b8      	b.n	800893e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 0302 	and.w	r3, r3, #2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d020      	beq.n	800881a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 0304 	and.w	r3, r3, #4
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d005      	beq.n	80087f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80087e4:	4b59      	ldr	r3, [pc, #356]	@ (800894c <HAL_RCC_ClockConfig+0x1bc>)
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	4a58      	ldr	r2, [pc, #352]	@ (800894c <HAL_RCC_ClockConfig+0x1bc>)
 80087ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80087ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0308 	and.w	r3, r3, #8
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d005      	beq.n	8008808 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80087fc:	4b53      	ldr	r3, [pc, #332]	@ (800894c <HAL_RCC_ClockConfig+0x1bc>)
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	4a52      	ldr	r2, [pc, #328]	@ (800894c <HAL_RCC_ClockConfig+0x1bc>)
 8008802:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008806:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008808:	4b50      	ldr	r3, [pc, #320]	@ (800894c <HAL_RCC_ClockConfig+0x1bc>)
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	494d      	ldr	r1, [pc, #308]	@ (800894c <HAL_RCC_ClockConfig+0x1bc>)
 8008816:	4313      	orrs	r3, r2
 8008818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0301 	and.w	r3, r3, #1
 8008822:	2b00      	cmp	r3, #0
 8008824:	d044      	beq.n	80088b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d107      	bne.n	800883e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800882e:	4b47      	ldr	r3, [pc, #284]	@ (800894c <HAL_RCC_ClockConfig+0x1bc>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d119      	bne.n	800886e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e07f      	b.n	800893e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	2b02      	cmp	r3, #2
 8008844:	d003      	beq.n	800884e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800884a:	2b03      	cmp	r3, #3
 800884c:	d107      	bne.n	800885e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800884e:	4b3f      	ldr	r3, [pc, #252]	@ (800894c <HAL_RCC_ClockConfig+0x1bc>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008856:	2b00      	cmp	r3, #0
 8008858:	d109      	bne.n	800886e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e06f      	b.n	800893e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800885e:	4b3b      	ldr	r3, [pc, #236]	@ (800894c <HAL_RCC_ClockConfig+0x1bc>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 0302 	and.w	r3, r3, #2
 8008866:	2b00      	cmp	r3, #0
 8008868:	d101      	bne.n	800886e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e067      	b.n	800893e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800886e:	4b37      	ldr	r3, [pc, #220]	@ (800894c <HAL_RCC_ClockConfig+0x1bc>)
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	f023 0203 	bic.w	r2, r3, #3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	4934      	ldr	r1, [pc, #208]	@ (800894c <HAL_RCC_ClockConfig+0x1bc>)
 800887c:	4313      	orrs	r3, r2
 800887e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008880:	f7f9 ff5e 	bl	8002740 <HAL_GetTick>
 8008884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008886:	e00a      	b.n	800889e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008888:	f7f9 ff5a 	bl	8002740 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008896:	4293      	cmp	r3, r2
 8008898:	d901      	bls.n	800889e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e04f      	b.n	800893e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800889e:	4b2b      	ldr	r3, [pc, #172]	@ (800894c <HAL_RCC_ClockConfig+0x1bc>)
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f003 020c 	and.w	r2, r3, #12
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d1eb      	bne.n	8008888 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80088b0:	4b25      	ldr	r3, [pc, #148]	@ (8008948 <HAL_RCC_ClockConfig+0x1b8>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0307 	and.w	r3, r3, #7
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d20c      	bcs.n	80088d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088be:	4b22      	ldr	r3, [pc, #136]	@ (8008948 <HAL_RCC_ClockConfig+0x1b8>)
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	b2d2      	uxtb	r2, r2
 80088c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088c6:	4b20      	ldr	r3, [pc, #128]	@ (8008948 <HAL_RCC_ClockConfig+0x1b8>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 0307 	and.w	r3, r3, #7
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d001      	beq.n	80088d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	e032      	b.n	800893e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 0304 	and.w	r3, r3, #4
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d008      	beq.n	80088f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80088e4:	4b19      	ldr	r3, [pc, #100]	@ (800894c <HAL_RCC_ClockConfig+0x1bc>)
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	4916      	ldr	r1, [pc, #88]	@ (800894c <HAL_RCC_ClockConfig+0x1bc>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0308 	and.w	r3, r3, #8
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d009      	beq.n	8008916 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008902:	4b12      	ldr	r3, [pc, #72]	@ (800894c <HAL_RCC_ClockConfig+0x1bc>)
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	00db      	lsls	r3, r3, #3
 8008910:	490e      	ldr	r1, [pc, #56]	@ (800894c <HAL_RCC_ClockConfig+0x1bc>)
 8008912:	4313      	orrs	r3, r2
 8008914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008916:	f000 f821 	bl	800895c <HAL_RCC_GetSysClockFreq>
 800891a:	4602      	mov	r2, r0
 800891c:	4b0b      	ldr	r3, [pc, #44]	@ (800894c <HAL_RCC_ClockConfig+0x1bc>)
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	091b      	lsrs	r3, r3, #4
 8008922:	f003 030f 	and.w	r3, r3, #15
 8008926:	490a      	ldr	r1, [pc, #40]	@ (8008950 <HAL_RCC_ClockConfig+0x1c0>)
 8008928:	5ccb      	ldrb	r3, [r1, r3]
 800892a:	fa22 f303 	lsr.w	r3, r2, r3
 800892e:	4a09      	ldr	r2, [pc, #36]	@ (8008954 <HAL_RCC_ClockConfig+0x1c4>)
 8008930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008932:	4b09      	ldr	r3, [pc, #36]	@ (8008958 <HAL_RCC_ClockConfig+0x1c8>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4618      	mov	r0, r3
 8008938:	f7f9 febe 	bl	80026b8 <HAL_InitTick>

  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	40023c00 	.word	0x40023c00
 800894c:	40023800 	.word	0x40023800
 8008950:	0800d774 	.word	0x0800d774
 8008954:	2000002c 	.word	0x2000002c
 8008958:	20000030 	.word	0x20000030

0800895c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800895c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008960:	b090      	sub	sp, #64	@ 0x40
 8008962:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008964:	2300      	movs	r3, #0
 8008966:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008968:	2300      	movs	r3, #0
 800896a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800896c:	2300      	movs	r3, #0
 800896e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008970:	2300      	movs	r3, #0
 8008972:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008974:	4b59      	ldr	r3, [pc, #356]	@ (8008adc <HAL_RCC_GetSysClockFreq+0x180>)
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	f003 030c 	and.w	r3, r3, #12
 800897c:	2b08      	cmp	r3, #8
 800897e:	d00d      	beq.n	800899c <HAL_RCC_GetSysClockFreq+0x40>
 8008980:	2b08      	cmp	r3, #8
 8008982:	f200 80a1 	bhi.w	8008ac8 <HAL_RCC_GetSysClockFreq+0x16c>
 8008986:	2b00      	cmp	r3, #0
 8008988:	d002      	beq.n	8008990 <HAL_RCC_GetSysClockFreq+0x34>
 800898a:	2b04      	cmp	r3, #4
 800898c:	d003      	beq.n	8008996 <HAL_RCC_GetSysClockFreq+0x3a>
 800898e:	e09b      	b.n	8008ac8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008990:	4b53      	ldr	r3, [pc, #332]	@ (8008ae0 <HAL_RCC_GetSysClockFreq+0x184>)
 8008992:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008994:	e09b      	b.n	8008ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008996:	4b53      	ldr	r3, [pc, #332]	@ (8008ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 8008998:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800899a:	e098      	b.n	8008ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800899c:	4b4f      	ldr	r3, [pc, #316]	@ (8008adc <HAL_RCC_GetSysClockFreq+0x180>)
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80089a6:	4b4d      	ldr	r3, [pc, #308]	@ (8008adc <HAL_RCC_GetSysClockFreq+0x180>)
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d028      	beq.n	8008a04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089b2:	4b4a      	ldr	r3, [pc, #296]	@ (8008adc <HAL_RCC_GetSysClockFreq+0x180>)
 80089b4:	685b      	ldr	r3, [r3, #4]
 80089b6:	099b      	lsrs	r3, r3, #6
 80089b8:	2200      	movs	r2, #0
 80089ba:	623b      	str	r3, [r7, #32]
 80089bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80089c4:	2100      	movs	r1, #0
 80089c6:	4b47      	ldr	r3, [pc, #284]	@ (8008ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 80089c8:	fb03 f201 	mul.w	r2, r3, r1
 80089cc:	2300      	movs	r3, #0
 80089ce:	fb00 f303 	mul.w	r3, r0, r3
 80089d2:	4413      	add	r3, r2
 80089d4:	4a43      	ldr	r2, [pc, #268]	@ (8008ae4 <HAL_RCC_GetSysClockFreq+0x188>)
 80089d6:	fba0 1202 	umull	r1, r2, r0, r2
 80089da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089dc:	460a      	mov	r2, r1
 80089de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80089e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089e2:	4413      	add	r3, r2
 80089e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089e8:	2200      	movs	r2, #0
 80089ea:	61bb      	str	r3, [r7, #24]
 80089ec:	61fa      	str	r2, [r7, #28]
 80089ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80089f6:	f7f7 ffe5 	bl	80009c4 <__aeabi_uldivmod>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	4613      	mov	r3, r2
 8008a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a02:	e053      	b.n	8008aac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a04:	4b35      	ldr	r3, [pc, #212]	@ (8008adc <HAL_RCC_GetSysClockFreq+0x180>)
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	099b      	lsrs	r3, r3, #6
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	613b      	str	r3, [r7, #16]
 8008a0e:	617a      	str	r2, [r7, #20]
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008a16:	f04f 0b00 	mov.w	fp, #0
 8008a1a:	4652      	mov	r2, sl
 8008a1c:	465b      	mov	r3, fp
 8008a1e:	f04f 0000 	mov.w	r0, #0
 8008a22:	f04f 0100 	mov.w	r1, #0
 8008a26:	0159      	lsls	r1, r3, #5
 8008a28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a2c:	0150      	lsls	r0, r2, #5
 8008a2e:	4602      	mov	r2, r0
 8008a30:	460b      	mov	r3, r1
 8008a32:	ebb2 080a 	subs.w	r8, r2, sl
 8008a36:	eb63 090b 	sbc.w	r9, r3, fp
 8008a3a:	f04f 0200 	mov.w	r2, #0
 8008a3e:	f04f 0300 	mov.w	r3, #0
 8008a42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008a46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008a4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008a4e:	ebb2 0408 	subs.w	r4, r2, r8
 8008a52:	eb63 0509 	sbc.w	r5, r3, r9
 8008a56:	f04f 0200 	mov.w	r2, #0
 8008a5a:	f04f 0300 	mov.w	r3, #0
 8008a5e:	00eb      	lsls	r3, r5, #3
 8008a60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a64:	00e2      	lsls	r2, r4, #3
 8008a66:	4614      	mov	r4, r2
 8008a68:	461d      	mov	r5, r3
 8008a6a:	eb14 030a 	adds.w	r3, r4, sl
 8008a6e:	603b      	str	r3, [r7, #0]
 8008a70:	eb45 030b 	adc.w	r3, r5, fp
 8008a74:	607b      	str	r3, [r7, #4]
 8008a76:	f04f 0200 	mov.w	r2, #0
 8008a7a:	f04f 0300 	mov.w	r3, #0
 8008a7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008a82:	4629      	mov	r1, r5
 8008a84:	028b      	lsls	r3, r1, #10
 8008a86:	4621      	mov	r1, r4
 8008a88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	028a      	lsls	r2, r1, #10
 8008a90:	4610      	mov	r0, r2
 8008a92:	4619      	mov	r1, r3
 8008a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a96:	2200      	movs	r2, #0
 8008a98:	60bb      	str	r3, [r7, #8]
 8008a9a:	60fa      	str	r2, [r7, #12]
 8008a9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008aa0:	f7f7 ff90 	bl	80009c4 <__aeabi_uldivmod>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008aac:	4b0b      	ldr	r3, [pc, #44]	@ (8008adc <HAL_RCC_GetSysClockFreq+0x180>)
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	0c1b      	lsrs	r3, r3, #16
 8008ab2:	f003 0303 	and.w	r3, r3, #3
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	005b      	lsls	r3, r3, #1
 8008aba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008abc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ac6:	e002      	b.n	8008ace <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ac8:	4b05      	ldr	r3, [pc, #20]	@ (8008ae0 <HAL_RCC_GetSysClockFreq+0x184>)
 8008aca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3740      	adds	r7, #64	@ 0x40
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ada:	bf00      	nop
 8008adc:	40023800 	.word	0x40023800
 8008ae0:	00f42400 	.word	0x00f42400
 8008ae4:	017d7840 	.word	0x017d7840

08008ae8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008aec:	4b03      	ldr	r3, [pc, #12]	@ (8008afc <HAL_RCC_GetHCLKFreq+0x14>)
 8008aee:	681b      	ldr	r3, [r3, #0]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	2000002c 	.word	0x2000002c

08008b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008b04:	f7ff fff0 	bl	8008ae8 <HAL_RCC_GetHCLKFreq>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	4b05      	ldr	r3, [pc, #20]	@ (8008b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	0a9b      	lsrs	r3, r3, #10
 8008b10:	f003 0307 	and.w	r3, r3, #7
 8008b14:	4903      	ldr	r1, [pc, #12]	@ (8008b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b16:	5ccb      	ldrb	r3, [r1, r3]
 8008b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	40023800 	.word	0x40023800
 8008b24:	0800d784 	.word	0x0800d784

08008b28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d101      	bne.n	8008b3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e041      	b.n	8008bbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d106      	bne.n	8008b54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f7f9 fa1e 	bl	8001f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2202      	movs	r2, #2
 8008b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	3304      	adds	r3, #4
 8008b64:	4619      	mov	r1, r3
 8008b66:	4610      	mov	r0, r2
 8008b68:	f000 fab2 	bl	80090d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
	...

08008bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d001      	beq.n	8008be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e044      	b.n	8008c6a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2202      	movs	r2, #2
 8008be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68da      	ldr	r2, [r3, #12]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f042 0201 	orr.w	r2, r2, #1
 8008bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8008c78 <HAL_TIM_Base_Start_IT+0xb0>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d018      	beq.n	8008c34 <HAL_TIM_Base_Start_IT+0x6c>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c0a:	d013      	beq.n	8008c34 <HAL_TIM_Base_Start_IT+0x6c>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a1a      	ldr	r2, [pc, #104]	@ (8008c7c <HAL_TIM_Base_Start_IT+0xb4>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d00e      	beq.n	8008c34 <HAL_TIM_Base_Start_IT+0x6c>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a19      	ldr	r2, [pc, #100]	@ (8008c80 <HAL_TIM_Base_Start_IT+0xb8>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d009      	beq.n	8008c34 <HAL_TIM_Base_Start_IT+0x6c>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a17      	ldr	r2, [pc, #92]	@ (8008c84 <HAL_TIM_Base_Start_IT+0xbc>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d004      	beq.n	8008c34 <HAL_TIM_Base_Start_IT+0x6c>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a16      	ldr	r2, [pc, #88]	@ (8008c88 <HAL_TIM_Base_Start_IT+0xc0>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d111      	bne.n	8008c58 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	f003 0307 	and.w	r3, r3, #7
 8008c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2b06      	cmp	r3, #6
 8008c44:	d010      	beq.n	8008c68 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f042 0201 	orr.w	r2, r2, #1
 8008c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c56:	e007      	b.n	8008c68 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681a      	ldr	r2, [r3, #0]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f042 0201 	orr.w	r2, r2, #1
 8008c66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	40010000 	.word	0x40010000
 8008c7c:	40000400 	.word	0x40000400
 8008c80:	40000800 	.word	0x40000800
 8008c84:	40000c00 	.word	0x40000c00
 8008c88:	40014000 	.word	0x40014000

08008c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d020      	beq.n	8008cf0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f003 0302 	and.w	r3, r3, #2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d01b      	beq.n	8008cf0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f06f 0202 	mvn.w	r2, #2
 8008cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	f003 0303 	and.w	r3, r3, #3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d003      	beq.n	8008cde <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f9db 	bl	8009092 <HAL_TIM_IC_CaptureCallback>
 8008cdc:	e005      	b.n	8008cea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f9cd 	bl	800907e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f9de 	bl	80090a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	f003 0304 	and.w	r3, r3, #4
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d020      	beq.n	8008d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f003 0304 	and.w	r3, r3, #4
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d01b      	beq.n	8008d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f06f 0204 	mvn.w	r2, #4
 8008d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2202      	movs	r2, #2
 8008d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	699b      	ldr	r3, [r3, #24]
 8008d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f9b5 	bl	8009092 <HAL_TIM_IC_CaptureCallback>
 8008d28:	e005      	b.n	8008d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f9a7 	bl	800907e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f9b8 	bl	80090a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	f003 0308 	and.w	r3, r3, #8
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d020      	beq.n	8008d88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f003 0308 	and.w	r3, r3, #8
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d01b      	beq.n	8008d88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f06f 0208 	mvn.w	r2, #8
 8008d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2204      	movs	r2, #4
 8008d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	69db      	ldr	r3, [r3, #28]
 8008d66:	f003 0303 	and.w	r3, r3, #3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d003      	beq.n	8008d76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 f98f 	bl	8009092 <HAL_TIM_IC_CaptureCallback>
 8008d74:	e005      	b.n	8008d82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f981 	bl	800907e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 f992 	bl	80090a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	f003 0310 	and.w	r3, r3, #16
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d020      	beq.n	8008dd4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	f003 0310 	and.w	r3, r3, #16
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d01b      	beq.n	8008dd4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f06f 0210 	mvn.w	r2, #16
 8008da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2208      	movs	r2, #8
 8008daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f969 	bl	8009092 <HAL_TIM_IC_CaptureCallback>
 8008dc0:	e005      	b.n	8008dce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f95b 	bl	800907e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 f96c 	bl	80090a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d00c      	beq.n	8008df8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d007      	beq.n	8008df8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f06f 0201 	mvn.w	r2, #1
 8008df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7f7 ffbc 	bl	8000d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00c      	beq.n	8008e1c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d007      	beq.n	8008e1c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fb84 	bl	8009524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00c      	beq.n	8008e40 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d007      	beq.n	8008e40 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f93d 	bl	80090ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	f003 0320 	and.w	r3, r3, #32
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00c      	beq.n	8008e64 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f003 0320 	and.w	r3, r3, #32
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d007      	beq.n	8008e64 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f06f 0220 	mvn.w	r2, #32
 8008e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fb56 	bl	8009510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e64:	bf00      	nop
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b084      	sub	sp, #16
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d101      	bne.n	8008e88 <HAL_TIM_ConfigClockSource+0x1c>
 8008e84:	2302      	movs	r3, #2
 8008e86:	e0b4      	b.n	8008ff2 <HAL_TIM_ConfigClockSource+0x186>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2202      	movs	r2, #2
 8008e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008eae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ec0:	d03e      	beq.n	8008f40 <HAL_TIM_ConfigClockSource+0xd4>
 8008ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ec6:	f200 8087 	bhi.w	8008fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8008eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ece:	f000 8086 	beq.w	8008fde <HAL_TIM_ConfigClockSource+0x172>
 8008ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ed6:	d87f      	bhi.n	8008fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ed8:	2b70      	cmp	r3, #112	@ 0x70
 8008eda:	d01a      	beq.n	8008f12 <HAL_TIM_ConfigClockSource+0xa6>
 8008edc:	2b70      	cmp	r3, #112	@ 0x70
 8008ede:	d87b      	bhi.n	8008fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ee0:	2b60      	cmp	r3, #96	@ 0x60
 8008ee2:	d050      	beq.n	8008f86 <HAL_TIM_ConfigClockSource+0x11a>
 8008ee4:	2b60      	cmp	r3, #96	@ 0x60
 8008ee6:	d877      	bhi.n	8008fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ee8:	2b50      	cmp	r3, #80	@ 0x50
 8008eea:	d03c      	beq.n	8008f66 <HAL_TIM_ConfigClockSource+0xfa>
 8008eec:	2b50      	cmp	r3, #80	@ 0x50
 8008eee:	d873      	bhi.n	8008fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ef0:	2b40      	cmp	r3, #64	@ 0x40
 8008ef2:	d058      	beq.n	8008fa6 <HAL_TIM_ConfigClockSource+0x13a>
 8008ef4:	2b40      	cmp	r3, #64	@ 0x40
 8008ef6:	d86f      	bhi.n	8008fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ef8:	2b30      	cmp	r3, #48	@ 0x30
 8008efa:	d064      	beq.n	8008fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8008efc:	2b30      	cmp	r3, #48	@ 0x30
 8008efe:	d86b      	bhi.n	8008fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8008f00:	2b20      	cmp	r3, #32
 8008f02:	d060      	beq.n	8008fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8008f04:	2b20      	cmp	r3, #32
 8008f06:	d867      	bhi.n	8008fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d05c      	beq.n	8008fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8008f0c:	2b10      	cmp	r3, #16
 8008f0e:	d05a      	beq.n	8008fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8008f10:	e062      	b.n	8008fd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f22:	f000 fa66 	bl	80093f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008f34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68ba      	ldr	r2, [r7, #8]
 8008f3c:	609a      	str	r2, [r3, #8]
      break;
 8008f3e:	e04f      	b.n	8008fe0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f50:	f000 fa4f 	bl	80093f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	689a      	ldr	r2, [r3, #8]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008f62:	609a      	str	r2, [r3, #8]
      break;
 8008f64:	e03c      	b.n	8008fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f72:	461a      	mov	r2, r3
 8008f74:	f000 f9c3 	bl	80092fe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2150      	movs	r1, #80	@ 0x50
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f000 fa1c 	bl	80093bc <TIM_ITRx_SetConfig>
      break;
 8008f84:	e02c      	b.n	8008fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f92:	461a      	mov	r2, r3
 8008f94:	f000 f9e2 	bl	800935c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2160      	movs	r1, #96	@ 0x60
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 fa0c 	bl	80093bc <TIM_ITRx_SetConfig>
      break;
 8008fa4:	e01c      	b.n	8008fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	f000 f9a3 	bl	80092fe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2140      	movs	r1, #64	@ 0x40
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f000 f9fc 	bl	80093bc <TIM_ITRx_SetConfig>
      break;
 8008fc4:	e00c      	b.n	8008fe0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	f000 f9f3 	bl	80093bc <TIM_ITRx_SetConfig>
      break;
 8008fd6:	e003      	b.n	8008fe0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	73fb      	strb	r3, [r7, #15]
      break;
 8008fdc:	e000      	b.n	8008fe0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008fde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b082      	sub	sp, #8
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800900a:	2b01      	cmp	r3, #1
 800900c:	d101      	bne.n	8009012 <HAL_TIM_SlaveConfigSynchro+0x18>
 800900e:	2302      	movs	r3, #2
 8009010:	e031      	b.n	8009076 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2202      	movs	r2, #2
 800901e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009022:	6839      	ldr	r1, [r7, #0]
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 f8d9 	bl	80091dc <TIM_SlaveTimer_SetConfig>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d009      	beq.n	8009044 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e018      	b.n	8009076 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68da      	ldr	r2, [r3, #12]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009052:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	68da      	ldr	r2, [r3, #12]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009062:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800907e:	b480      	push	{r7}
 8009080:	b083      	sub	sp, #12
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009086:	bf00      	nop
 8009088:	370c      	adds	r7, #12
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr

08009092 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009092:	b480      	push	{r7}
 8009094:	b083      	sub	sp, #12
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800909a:	bf00      	nop
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b083      	sub	sp, #12
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090ae:	bf00      	nop
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b083      	sub	sp, #12
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090c2:	bf00      	nop
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
	...

080090d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a37      	ldr	r2, [pc, #220]	@ (80091c0 <TIM_Base_SetConfig+0xf0>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d00f      	beq.n	8009108 <TIM_Base_SetConfig+0x38>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090ee:	d00b      	beq.n	8009108 <TIM_Base_SetConfig+0x38>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	4a34      	ldr	r2, [pc, #208]	@ (80091c4 <TIM_Base_SetConfig+0xf4>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d007      	beq.n	8009108 <TIM_Base_SetConfig+0x38>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	4a33      	ldr	r2, [pc, #204]	@ (80091c8 <TIM_Base_SetConfig+0xf8>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d003      	beq.n	8009108 <TIM_Base_SetConfig+0x38>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4a32      	ldr	r2, [pc, #200]	@ (80091cc <TIM_Base_SetConfig+0xfc>)
 8009104:	4293      	cmp	r3, r2
 8009106:	d108      	bne.n	800911a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800910e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	4313      	orrs	r3, r2
 8009118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a28      	ldr	r2, [pc, #160]	@ (80091c0 <TIM_Base_SetConfig+0xf0>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d01b      	beq.n	800915a <TIM_Base_SetConfig+0x8a>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009128:	d017      	beq.n	800915a <TIM_Base_SetConfig+0x8a>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a25      	ldr	r2, [pc, #148]	@ (80091c4 <TIM_Base_SetConfig+0xf4>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d013      	beq.n	800915a <TIM_Base_SetConfig+0x8a>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a24      	ldr	r2, [pc, #144]	@ (80091c8 <TIM_Base_SetConfig+0xf8>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d00f      	beq.n	800915a <TIM_Base_SetConfig+0x8a>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a23      	ldr	r2, [pc, #140]	@ (80091cc <TIM_Base_SetConfig+0xfc>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d00b      	beq.n	800915a <TIM_Base_SetConfig+0x8a>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a22      	ldr	r2, [pc, #136]	@ (80091d0 <TIM_Base_SetConfig+0x100>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d007      	beq.n	800915a <TIM_Base_SetConfig+0x8a>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a21      	ldr	r2, [pc, #132]	@ (80091d4 <TIM_Base_SetConfig+0x104>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d003      	beq.n	800915a <TIM_Base_SetConfig+0x8a>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a20      	ldr	r2, [pc, #128]	@ (80091d8 <TIM_Base_SetConfig+0x108>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d108      	bne.n	800916c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	4313      	orrs	r3, r2
 800916a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	695b      	ldr	r3, [r3, #20]
 8009176:	4313      	orrs	r3, r2
 8009178:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	689a      	ldr	r2, [r3, #8]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a0c      	ldr	r2, [pc, #48]	@ (80091c0 <TIM_Base_SetConfig+0xf0>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d103      	bne.n	800919a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	691a      	ldr	r2, [r3, #16]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f043 0204 	orr.w	r2, r3, #4
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	601a      	str	r2, [r3, #0]
}
 80091b2:	bf00      	nop
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	40010000 	.word	0x40010000
 80091c4:	40000400 	.word	0x40000400
 80091c8:	40000800 	.word	0x40000800
 80091cc:	40000c00 	.word	0x40000c00
 80091d0:	40014000 	.word	0x40014000
 80091d4:	40014400 	.word	0x40014400
 80091d8:	40014800 	.word	0x40014800

080091dc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091f8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	693a      	ldr	r2, [r7, #16]
 8009200:	4313      	orrs	r3, r2
 8009202:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	f023 0307 	bic.w	r3, r3, #7
 800920a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	4313      	orrs	r3, r2
 8009214:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	2b70      	cmp	r3, #112	@ 0x70
 8009224:	d01a      	beq.n	800925c <TIM_SlaveTimer_SetConfig+0x80>
 8009226:	2b70      	cmp	r3, #112	@ 0x70
 8009228:	d860      	bhi.n	80092ec <TIM_SlaveTimer_SetConfig+0x110>
 800922a:	2b60      	cmp	r3, #96	@ 0x60
 800922c:	d054      	beq.n	80092d8 <TIM_SlaveTimer_SetConfig+0xfc>
 800922e:	2b60      	cmp	r3, #96	@ 0x60
 8009230:	d85c      	bhi.n	80092ec <TIM_SlaveTimer_SetConfig+0x110>
 8009232:	2b50      	cmp	r3, #80	@ 0x50
 8009234:	d046      	beq.n	80092c4 <TIM_SlaveTimer_SetConfig+0xe8>
 8009236:	2b50      	cmp	r3, #80	@ 0x50
 8009238:	d858      	bhi.n	80092ec <TIM_SlaveTimer_SetConfig+0x110>
 800923a:	2b40      	cmp	r3, #64	@ 0x40
 800923c:	d019      	beq.n	8009272 <TIM_SlaveTimer_SetConfig+0x96>
 800923e:	2b40      	cmp	r3, #64	@ 0x40
 8009240:	d854      	bhi.n	80092ec <TIM_SlaveTimer_SetConfig+0x110>
 8009242:	2b30      	cmp	r3, #48	@ 0x30
 8009244:	d055      	beq.n	80092f2 <TIM_SlaveTimer_SetConfig+0x116>
 8009246:	2b30      	cmp	r3, #48	@ 0x30
 8009248:	d850      	bhi.n	80092ec <TIM_SlaveTimer_SetConfig+0x110>
 800924a:	2b20      	cmp	r3, #32
 800924c:	d051      	beq.n	80092f2 <TIM_SlaveTimer_SetConfig+0x116>
 800924e:	2b20      	cmp	r3, #32
 8009250:	d84c      	bhi.n	80092ec <TIM_SlaveTimer_SetConfig+0x110>
 8009252:	2b00      	cmp	r3, #0
 8009254:	d04d      	beq.n	80092f2 <TIM_SlaveTimer_SetConfig+0x116>
 8009256:	2b10      	cmp	r3, #16
 8009258:	d04b      	beq.n	80092f2 <TIM_SlaveTimer_SetConfig+0x116>
 800925a:	e047      	b.n	80092ec <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800926c:	f000 f8c1 	bl	80093f2 <TIM_ETR_SetConfig>
      break;
 8009270:	e040      	b.n	80092f4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2b05      	cmp	r3, #5
 8009278:	d101      	bne.n	800927e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e03b      	b.n	80092f6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	6a1b      	ldr	r3, [r3, #32]
 8009284:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	6a1a      	ldr	r2, [r3, #32]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0201 	bic.w	r2, r2, #1
 8009294:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80092a4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	011b      	lsls	r3, r3, #4
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	68ba      	ldr	r2, [r7, #8]
 80092b8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	621a      	str	r2, [r3, #32]
      break;
 80092c2:	e017      	b.n	80092f4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092d0:	461a      	mov	r2, r3
 80092d2:	f000 f814 	bl	80092fe <TIM_TI1_ConfigInputStage>
      break;
 80092d6:	e00d      	b.n	80092f4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80092e4:	461a      	mov	r2, r3
 80092e6:	f000 f839 	bl	800935c <TIM_TI2_ConfigInputStage>
      break;
 80092ea:	e003      	b.n	80092f4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80092ec:	2301      	movs	r3, #1
 80092ee:	75fb      	strb	r3, [r7, #23]
      break;
 80092f0:	e000      	b.n	80092f4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80092f2:	bf00      	nop
  }

  return status;
 80092f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092fe:	b480      	push	{r7}
 8009300:	b087      	sub	sp, #28
 8009302:	af00      	add	r7, sp, #0
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6a1b      	ldr	r3, [r3, #32]
 8009314:	f023 0201 	bic.w	r2, r3, #1
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	699b      	ldr	r3, [r3, #24]
 8009320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009328:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	011b      	lsls	r3, r3, #4
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	4313      	orrs	r3, r2
 8009332:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	f023 030a 	bic.w	r3, r3, #10
 800933a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800933c:	697a      	ldr	r2, [r7, #20]
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	4313      	orrs	r3, r2
 8009342:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	693a      	ldr	r2, [r7, #16]
 8009348:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	621a      	str	r2, [r3, #32]
}
 8009350:	bf00      	nop
 8009352:	371c      	adds	r7, #28
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800935c:	b480      	push	{r7}
 800935e:	b087      	sub	sp, #28
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6a1b      	ldr	r3, [r3, #32]
 800936c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	f023 0210 	bic.w	r2, r3, #16
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	031b      	lsls	r3, r3, #12
 800938c:	693a      	ldr	r2, [r7, #16]
 800938e:	4313      	orrs	r3, r2
 8009390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009398:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	011b      	lsls	r3, r3, #4
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	693a      	ldr	r2, [r7, #16]
 80093a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	621a      	str	r2, [r3, #32]
}
 80093b0:	bf00      	nop
 80093b2:	371c      	adds	r7, #28
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093bc:	b480      	push	{r7}
 80093be:	b085      	sub	sp, #20
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	689b      	ldr	r3, [r3, #8]
 80093ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093d4:	683a      	ldr	r2, [r7, #0]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	4313      	orrs	r3, r2
 80093da:	f043 0307 	orr.w	r3, r3, #7
 80093de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	68fa      	ldr	r2, [r7, #12]
 80093e4:	609a      	str	r2, [r3, #8]
}
 80093e6:	bf00      	nop
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b087      	sub	sp, #28
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	60b9      	str	r1, [r7, #8]
 80093fc:	607a      	str	r2, [r7, #4]
 80093fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800940c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	021a      	lsls	r2, r3, #8
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	431a      	orrs	r2, r3
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	4313      	orrs	r3, r2
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	4313      	orrs	r3, r2
 800941e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	697a      	ldr	r2, [r7, #20]
 8009424:	609a      	str	r2, [r3, #8]
}
 8009426:	bf00      	nop
 8009428:	371c      	adds	r7, #28
 800942a:	46bd      	mov	sp, r7
 800942c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009430:	4770      	bx	lr
	...

08009434 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009444:	2b01      	cmp	r3, #1
 8009446:	d101      	bne.n	800944c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009448:	2302      	movs	r3, #2
 800944a:	e050      	b.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2202      	movs	r2, #2
 8009458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009472:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	4313      	orrs	r3, r2
 800947c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a1c      	ldr	r2, [pc, #112]	@ (80094fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d018      	beq.n	80094c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009498:	d013      	beq.n	80094c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a18      	ldr	r2, [pc, #96]	@ (8009500 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d00e      	beq.n	80094c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a16      	ldr	r2, [pc, #88]	@ (8009504 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d009      	beq.n	80094c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a15      	ldr	r2, [pc, #84]	@ (8009508 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d004      	beq.n	80094c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a13      	ldr	r2, [pc, #76]	@ (800950c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d10c      	bne.n	80094dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	68ba      	ldr	r2, [r7, #8]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68ba      	ldr	r2, [r7, #8]
 80094da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3714      	adds	r7, #20
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	40010000 	.word	0x40010000
 8009500:	40000400 	.word	0x40000400
 8009504:	40000800 	.word	0x40000800
 8009508:	40000c00 	.word	0x40000c00
 800950c:	40014000 	.word	0x40014000

08009510 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009538:	b084      	sub	sp, #16
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	f107 001c 	add.w	r0, r7, #28
 8009546:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800954a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800954e:	2b01      	cmp	r3, #1
 8009550:	d123      	bne.n	800959a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009556:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009566:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800957a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800957e:	2b01      	cmp	r3, #1
 8009580:	d105      	bne.n	800958e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f001 fae8 	bl	800ab64 <USB_CoreReset>
 8009594:	4603      	mov	r3, r0
 8009596:	73fb      	strb	r3, [r7, #15]
 8009598:	e01b      	b.n	80095d2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f001 fadc 	bl	800ab64 <USB_CoreReset>
 80095ac:	4603      	mov	r3, r0
 80095ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80095b0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d106      	bne.n	80095c6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	639a      	str	r2, [r3, #56]	@ 0x38
 80095c4:	e005      	b.n	80095d2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80095d2:	7fbb      	ldrb	r3, [r7, #30]
 80095d4:	2b01      	cmp	r3, #1
 80095d6:	d10b      	bne.n	80095f0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	f043 0206 	orr.w	r2, r3, #6
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	f043 0220 	orr.w	r2, r3, #32
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80095fc:	b004      	add	sp, #16
 80095fe:	4770      	bx	lr

08009600 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009600:	b480      	push	{r7}
 8009602:	b087      	sub	sp, #28
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	4613      	mov	r3, r2
 800960c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800960e:	79fb      	ldrb	r3, [r7, #7]
 8009610:	2b02      	cmp	r3, #2
 8009612:	d165      	bne.n	80096e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	4a41      	ldr	r2, [pc, #260]	@ (800971c <USB_SetTurnaroundTime+0x11c>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d906      	bls.n	800962a <USB_SetTurnaroundTime+0x2a>
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	4a40      	ldr	r2, [pc, #256]	@ (8009720 <USB_SetTurnaroundTime+0x120>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d202      	bcs.n	800962a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009624:	230f      	movs	r3, #15
 8009626:	617b      	str	r3, [r7, #20]
 8009628:	e062      	b.n	80096f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	4a3c      	ldr	r2, [pc, #240]	@ (8009720 <USB_SetTurnaroundTime+0x120>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d306      	bcc.n	8009640 <USB_SetTurnaroundTime+0x40>
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	4a3b      	ldr	r2, [pc, #236]	@ (8009724 <USB_SetTurnaroundTime+0x124>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d202      	bcs.n	8009640 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800963a:	230e      	movs	r3, #14
 800963c:	617b      	str	r3, [r7, #20]
 800963e:	e057      	b.n	80096f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	4a38      	ldr	r2, [pc, #224]	@ (8009724 <USB_SetTurnaroundTime+0x124>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d306      	bcc.n	8009656 <USB_SetTurnaroundTime+0x56>
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	4a37      	ldr	r2, [pc, #220]	@ (8009728 <USB_SetTurnaroundTime+0x128>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d202      	bcs.n	8009656 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009650:	230d      	movs	r3, #13
 8009652:	617b      	str	r3, [r7, #20]
 8009654:	e04c      	b.n	80096f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	4a33      	ldr	r2, [pc, #204]	@ (8009728 <USB_SetTurnaroundTime+0x128>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d306      	bcc.n	800966c <USB_SetTurnaroundTime+0x6c>
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	4a32      	ldr	r2, [pc, #200]	@ (800972c <USB_SetTurnaroundTime+0x12c>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d802      	bhi.n	800966c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009666:	230c      	movs	r3, #12
 8009668:	617b      	str	r3, [r7, #20]
 800966a:	e041      	b.n	80096f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	4a2f      	ldr	r2, [pc, #188]	@ (800972c <USB_SetTurnaroundTime+0x12c>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d906      	bls.n	8009682 <USB_SetTurnaroundTime+0x82>
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	4a2e      	ldr	r2, [pc, #184]	@ (8009730 <USB_SetTurnaroundTime+0x130>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d802      	bhi.n	8009682 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800967c:	230b      	movs	r3, #11
 800967e:	617b      	str	r3, [r7, #20]
 8009680:	e036      	b.n	80096f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	4a2a      	ldr	r2, [pc, #168]	@ (8009730 <USB_SetTurnaroundTime+0x130>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d906      	bls.n	8009698 <USB_SetTurnaroundTime+0x98>
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	4a29      	ldr	r2, [pc, #164]	@ (8009734 <USB_SetTurnaroundTime+0x134>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d802      	bhi.n	8009698 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009692:	230a      	movs	r3, #10
 8009694:	617b      	str	r3, [r7, #20]
 8009696:	e02b      	b.n	80096f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	4a26      	ldr	r2, [pc, #152]	@ (8009734 <USB_SetTurnaroundTime+0x134>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d906      	bls.n	80096ae <USB_SetTurnaroundTime+0xae>
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	4a25      	ldr	r2, [pc, #148]	@ (8009738 <USB_SetTurnaroundTime+0x138>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d202      	bcs.n	80096ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80096a8:	2309      	movs	r3, #9
 80096aa:	617b      	str	r3, [r7, #20]
 80096ac:	e020      	b.n	80096f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	4a21      	ldr	r2, [pc, #132]	@ (8009738 <USB_SetTurnaroundTime+0x138>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d306      	bcc.n	80096c4 <USB_SetTurnaroundTime+0xc4>
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	4a20      	ldr	r2, [pc, #128]	@ (800973c <USB_SetTurnaroundTime+0x13c>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d802      	bhi.n	80096c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80096be:	2308      	movs	r3, #8
 80096c0:	617b      	str	r3, [r7, #20]
 80096c2:	e015      	b.n	80096f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	4a1d      	ldr	r2, [pc, #116]	@ (800973c <USB_SetTurnaroundTime+0x13c>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d906      	bls.n	80096da <USB_SetTurnaroundTime+0xda>
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	4a1c      	ldr	r2, [pc, #112]	@ (8009740 <USB_SetTurnaroundTime+0x140>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d202      	bcs.n	80096da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80096d4:	2307      	movs	r3, #7
 80096d6:	617b      	str	r3, [r7, #20]
 80096d8:	e00a      	b.n	80096f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80096da:	2306      	movs	r3, #6
 80096dc:	617b      	str	r3, [r7, #20]
 80096de:	e007      	b.n	80096f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80096e0:	79fb      	ldrb	r3, [r7, #7]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d102      	bne.n	80096ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80096e6:	2309      	movs	r3, #9
 80096e8:	617b      	str	r3, [r7, #20]
 80096ea:	e001      	b.n	80096f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80096ec:	2309      	movs	r3, #9
 80096ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	68da      	ldr	r2, [r3, #12]
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	029b      	lsls	r3, r3, #10
 8009704:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009708:	431a      	orrs	r2, r3
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	371c      	adds	r7, #28
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr
 800971c:	00d8acbf 	.word	0x00d8acbf
 8009720:	00e4e1c0 	.word	0x00e4e1c0
 8009724:	00f42400 	.word	0x00f42400
 8009728:	01067380 	.word	0x01067380
 800972c:	011a499f 	.word	0x011a499f
 8009730:	01312cff 	.word	0x01312cff
 8009734:	014ca43f 	.word	0x014ca43f
 8009738:	016e3600 	.word	0x016e3600
 800973c:	01a6ab1f 	.word	0x01a6ab1f
 8009740:	01e84800 	.word	0x01e84800

08009744 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	f043 0201 	orr.w	r2, r3, #1
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	370c      	adds	r7, #12
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009766:	b480      	push	{r7}
 8009768:	b083      	sub	sp, #12
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	f023 0201 	bic.w	r2, r3, #1
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	460b      	mov	r3, r1
 8009792:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009794:	2300      	movs	r3, #0
 8009796:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80097a4:	78fb      	ldrb	r3, [r7, #3]
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d115      	bne.n	80097d6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80097b6:	200a      	movs	r0, #10
 80097b8:	f7f8 ffce 	bl	8002758 <HAL_Delay>
      ms += 10U;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	330a      	adds	r3, #10
 80097c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f001 f93f 	bl	800aa46 <USB_GetMode>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d01e      	beq.n	800980c <USB_SetCurrentMode+0x84>
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80097d2:	d9f0      	bls.n	80097b6 <USB_SetCurrentMode+0x2e>
 80097d4:	e01a      	b.n	800980c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80097d6:	78fb      	ldrb	r3, [r7, #3]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d115      	bne.n	8009808 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80097e8:	200a      	movs	r0, #10
 80097ea:	f7f8 ffb5 	bl	8002758 <HAL_Delay>
      ms += 10U;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	330a      	adds	r3, #10
 80097f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f001 f926 	bl	800aa46 <USB_GetMode>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d005      	beq.n	800980c <USB_SetCurrentMode+0x84>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2bc7      	cmp	r3, #199	@ 0xc7
 8009804:	d9f0      	bls.n	80097e8 <USB_SetCurrentMode+0x60>
 8009806:	e001      	b.n	800980c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e005      	b.n	8009818 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2bc8      	cmp	r3, #200	@ 0xc8
 8009810:	d101      	bne.n	8009816 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e000      	b.n	8009818 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009816:	2300      	movs	r3, #0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009820:	b084      	sub	sp, #16
 8009822:	b580      	push	{r7, lr}
 8009824:	b086      	sub	sp, #24
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800982e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800983a:	2300      	movs	r3, #0
 800983c:	613b      	str	r3, [r7, #16]
 800983e:	e009      	b.n	8009854 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	3340      	adds	r3, #64	@ 0x40
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	4413      	add	r3, r2
 800984a:	2200      	movs	r2, #0
 800984c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	3301      	adds	r3, #1
 8009852:	613b      	str	r3, [r7, #16]
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	2b0e      	cmp	r3, #14
 8009858:	d9f2      	bls.n	8009840 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800985a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800985e:	2b00      	cmp	r3, #0
 8009860:	d11c      	bne.n	800989c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009870:	f043 0302 	orr.w	r3, r3, #2
 8009874:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800987a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009886:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009892:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	639a      	str	r2, [r3, #56]	@ 0x38
 800989a:	e00b      	b.n	80098b4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80098ba:	461a      	mov	r2, r3
 80098bc:	2300      	movs	r3, #0
 80098be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80098c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d10d      	bne.n	80098e4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80098c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d104      	bne.n	80098da <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80098d0:	2100      	movs	r1, #0
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 f968 	bl	8009ba8 <USB_SetDevSpeed>
 80098d8:	e008      	b.n	80098ec <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80098da:	2101      	movs	r1, #1
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f963 	bl	8009ba8 <USB_SetDevSpeed>
 80098e2:	e003      	b.n	80098ec <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80098e4:	2103      	movs	r1, #3
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 f95e 	bl	8009ba8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80098ec:	2110      	movs	r1, #16
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f8fa 	bl	8009ae8 <USB_FlushTxFifo>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d001      	beq.n	80098fe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f924 	bl	8009b4c <USB_FlushRxFifo>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009914:	461a      	mov	r2, r3
 8009916:	2300      	movs	r3, #0
 8009918:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009920:	461a      	mov	r2, r3
 8009922:	2300      	movs	r3, #0
 8009924:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800992c:	461a      	mov	r2, r3
 800992e:	2300      	movs	r3, #0
 8009930:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009932:	2300      	movs	r3, #0
 8009934:	613b      	str	r3, [r7, #16]
 8009936:	e043      	b.n	80099c0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	015a      	lsls	r2, r3, #5
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	4413      	add	r3, r2
 8009940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800994a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800994e:	d118      	bne.n	8009982 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d10a      	bne.n	800996c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	4413      	add	r3, r2
 800995e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009962:	461a      	mov	r2, r3
 8009964:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009968:	6013      	str	r3, [r2, #0]
 800996a:	e013      	b.n	8009994 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	015a      	lsls	r2, r3, #5
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	4413      	add	r3, r2
 8009974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009978:	461a      	mov	r2, r3
 800997a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	e008      	b.n	8009994 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	015a      	lsls	r2, r3, #5
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	4413      	add	r3, r2
 800998a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800998e:	461a      	mov	r2, r3
 8009990:	2300      	movs	r3, #0
 8009992:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009994:	693b      	ldr	r3, [r7, #16]
 8009996:	015a      	lsls	r2, r3, #5
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	4413      	add	r3, r2
 800999c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099a0:	461a      	mov	r2, r3
 80099a2:	2300      	movs	r3, #0
 80099a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	015a      	lsls	r2, r3, #5
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099b2:	461a      	mov	r2, r3
 80099b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80099b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	3301      	adds	r3, #1
 80099be:	613b      	str	r3, [r7, #16]
 80099c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80099c4:	461a      	mov	r2, r3
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d3b5      	bcc.n	8009938 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099cc:	2300      	movs	r3, #0
 80099ce:	613b      	str	r3, [r7, #16]
 80099d0:	e043      	b.n	8009a5a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	015a      	lsls	r2, r3, #5
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	4413      	add	r3, r2
 80099da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099e8:	d118      	bne.n	8009a1c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d10a      	bne.n	8009a06 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	015a      	lsls	r2, r3, #5
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	4413      	add	r3, r2
 80099f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099fc:	461a      	mov	r2, r3
 80099fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009a02:	6013      	str	r3, [r2, #0]
 8009a04:	e013      	b.n	8009a2e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a12:	461a      	mov	r2, r3
 8009a14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009a18:	6013      	str	r3, [r2, #0]
 8009a1a:	e008      	b.n	8009a2e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	015a      	lsls	r2, r3, #5
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4413      	add	r3, r2
 8009a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a28:	461a      	mov	r2, r3
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	015a      	lsls	r2, r3, #5
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4413      	add	r3, r2
 8009a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009a52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	3301      	adds	r3, #1
 8009a58:	613b      	str	r3, [r7, #16]
 8009a5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009a5e:	461a      	mov	r2, r3
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d3b5      	bcc.n	80099d2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a78:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009a86:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d105      	bne.n	8009a9c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	f043 0210 	orr.w	r2, r3, #16
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	699a      	ldr	r2, [r3, #24]
 8009aa0:	4b10      	ldr	r3, [pc, #64]	@ (8009ae4 <USB_DevInit+0x2c4>)
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009aa8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d005      	beq.n	8009abc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	f043 0208 	orr.w	r2, r3, #8
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009abc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d107      	bne.n	8009ad4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	699b      	ldr	r3, [r3, #24]
 8009ac8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009acc:	f043 0304 	orr.w	r3, r3, #4
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3718      	adds	r7, #24
 8009ada:	46bd      	mov	sp, r7
 8009adc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ae0:	b004      	add	sp, #16
 8009ae2:	4770      	bx	lr
 8009ae4:	803c3800 	.word	0x803c3800

08009ae8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b085      	sub	sp, #20
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009af2:	2300      	movs	r3, #0
 8009af4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3301      	adds	r3, #1
 8009afa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b02:	d901      	bls.n	8009b08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009b04:	2303      	movs	r3, #3
 8009b06:	e01b      	b.n	8009b40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	daf2      	bge.n	8009af6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009b10:	2300      	movs	r3, #0
 8009b12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	019b      	lsls	r3, r3, #6
 8009b18:	f043 0220 	orr.w	r2, r3, #32
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3301      	adds	r3, #1
 8009b24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b2c:	d901      	bls.n	8009b32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	e006      	b.n	8009b40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	f003 0320 	and.w	r3, r3, #32
 8009b3a:	2b20      	cmp	r3, #32
 8009b3c:	d0f0      	beq.n	8009b20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3714      	adds	r7, #20
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b54:	2300      	movs	r3, #0
 8009b56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	3301      	adds	r3, #1
 8009b5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b64:	d901      	bls.n	8009b6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e018      	b.n	8009b9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	daf2      	bge.n	8009b58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009b72:	2300      	movs	r3, #0
 8009b74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2210      	movs	r2, #16
 8009b7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b88:	d901      	bls.n	8009b8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e006      	b.n	8009b9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	f003 0310 	and.w	r3, r3, #16
 8009b96:	2b10      	cmp	r3, #16
 8009b98:	d0f0      	beq.n	8009b7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3714      	adds	r7, #20
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	78fb      	ldrb	r3, [r7, #3]
 8009bc2:	68f9      	ldr	r1, [r7, #12]
 8009bc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3714      	adds	r7, #20
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009bda:	b480      	push	{r7}
 8009bdc:	b087      	sub	sp, #28
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f003 0306 	and.w	r3, r3, #6
 8009bf2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d102      	bne.n	8009c00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	75fb      	strb	r3, [r7, #23]
 8009bfe:	e00a      	b.n	8009c16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d002      	beq.n	8009c0c <USB_GetDevSpeed+0x32>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2b06      	cmp	r3, #6
 8009c0a:	d102      	bne.n	8009c12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	75fb      	strb	r3, [r7, #23]
 8009c10:	e001      	b.n	8009c16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009c12:	230f      	movs	r3, #15
 8009c14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	371c      	adds	r7, #28
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	785b      	ldrb	r3, [r3, #1]
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d13a      	bne.n	8009cb6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c46:	69da      	ldr	r2, [r3, #28]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	f003 030f 	and.w	r3, r3, #15
 8009c50:	2101      	movs	r1, #1
 8009c52:	fa01 f303 	lsl.w	r3, r1, r3
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	68f9      	ldr	r1, [r7, #12]
 8009c5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	015a      	lsls	r2, r3, #5
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	4413      	add	r3, r2
 8009c6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d155      	bne.n	8009d24 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	015a      	lsls	r2, r3, #5
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	4413      	add	r3, r2
 8009c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	791b      	ldrb	r3, [r3, #4]
 8009c92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	059b      	lsls	r3, r3, #22
 8009c9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	0151      	lsls	r1, r2, #5
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	440a      	add	r2, r1
 8009ca6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cb2:	6013      	str	r3, [r2, #0]
 8009cb4:	e036      	b.n	8009d24 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009cbc:	69da      	ldr	r2, [r3, #28]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	f003 030f 	and.w	r3, r3, #15
 8009cc6:	2101      	movs	r1, #1
 8009cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ccc:	041b      	lsls	r3, r3, #16
 8009cce:	68f9      	ldr	r1, [r7, #12]
 8009cd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	015a      	lsls	r2, r3, #5
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4413      	add	r3, r2
 8009ce0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d11a      	bne.n	8009d24 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	015a      	lsls	r2, r3, #5
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	4413      	add	r3, r2
 8009cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	791b      	ldrb	r3, [r3, #4]
 8009d08:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d0a:	430b      	orrs	r3, r1
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	68ba      	ldr	r2, [r7, #8]
 8009d10:	0151      	lsls	r1, r2, #5
 8009d12:	68fa      	ldr	r2, [r7, #12]
 8009d14:	440a      	add	r2, r1
 8009d16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d22:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
	...

08009d34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	785b      	ldrb	r3, [r3, #1]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d161      	bne.n	8009e14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	015a      	lsls	r2, r3, #5
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	4413      	add	r3, r2
 8009d58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d62:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d66:	d11f      	bne.n	8009da8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	015a      	lsls	r2, r3, #5
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4413      	add	r3, r2
 8009d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	0151      	lsls	r1, r2, #5
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	440a      	add	r2, r1
 8009d7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	015a      	lsls	r2, r3, #5
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	4413      	add	r3, r2
 8009d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	0151      	lsls	r1, r2, #5
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	440a      	add	r2, r1
 8009d9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009da2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009da6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	f003 030f 	and.w	r3, r3, #15
 8009db8:	2101      	movs	r1, #1
 8009dba:	fa01 f303 	lsl.w	r3, r1, r3
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	43db      	mvns	r3, r3
 8009dc2:	68f9      	ldr	r1, [r7, #12]
 8009dc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009dc8:	4013      	ands	r3, r2
 8009dca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009dd2:	69da      	ldr	r2, [r3, #28]
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	f003 030f 	and.w	r3, r3, #15
 8009ddc:	2101      	movs	r1, #1
 8009dde:	fa01 f303 	lsl.w	r3, r1, r3
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	43db      	mvns	r3, r3
 8009de6:	68f9      	ldr	r1, [r7, #12]
 8009de8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009dec:	4013      	ands	r3, r2
 8009dee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	015a      	lsls	r2, r3, #5
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	4413      	add	r3, r2
 8009df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	0159      	lsls	r1, r3, #5
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	440b      	add	r3, r1
 8009e06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	4b35      	ldr	r3, [pc, #212]	@ (8009ee4 <USB_DeactivateEndpoint+0x1b0>)
 8009e0e:	4013      	ands	r3, r2
 8009e10:	600b      	str	r3, [r1, #0]
 8009e12:	e060      	b.n	8009ed6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	015a      	lsls	r2, r3, #5
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e2a:	d11f      	bne.n	8009e6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	015a      	lsls	r2, r3, #5
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4413      	add	r3, r2
 8009e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	0151      	lsls	r1, r2, #5
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	440a      	add	r2, r1
 8009e42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009e4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	015a      	lsls	r2, r3, #5
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	4413      	add	r3, r2
 8009e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	0151      	lsls	r1, r2, #5
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	440a      	add	r2, r1
 8009e62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e66:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	f003 030f 	and.w	r3, r3, #15
 8009e7c:	2101      	movs	r1, #1
 8009e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e82:	041b      	lsls	r3, r3, #16
 8009e84:	43db      	mvns	r3, r3
 8009e86:	68f9      	ldr	r1, [r7, #12]
 8009e88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e96:	69da      	ldr	r2, [r3, #28]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	f003 030f 	and.w	r3, r3, #15
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ea6:	041b      	lsls	r3, r3, #16
 8009ea8:	43db      	mvns	r3, r3
 8009eaa:	68f9      	ldr	r1, [r7, #12]
 8009eac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	015a      	lsls	r2, r3, #5
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	4413      	add	r3, r2
 8009ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	0159      	lsls	r1, r3, #5
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	440b      	add	r3, r1
 8009eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ece:	4619      	mov	r1, r3
 8009ed0:	4b05      	ldr	r3, [pc, #20]	@ (8009ee8 <USB_DeactivateEndpoint+0x1b4>)
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3714      	adds	r7, #20
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	ec337800 	.word	0xec337800
 8009ee8:	eff37800 	.word	0xeff37800

08009eec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b08a      	sub	sp, #40	@ 0x28
 8009ef0:	af02      	add	r7, sp, #8
 8009ef2:	60f8      	str	r0, [r7, #12]
 8009ef4:	60b9      	str	r1, [r7, #8]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	785b      	ldrb	r3, [r3, #1]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	f040 817f 	bne.w	800a20c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d132      	bne.n	8009f7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	015a      	lsls	r2, r3, #5
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	69ba      	ldr	r2, [r7, #24]
 8009f26:	0151      	lsls	r1, r2, #5
 8009f28:	69fa      	ldr	r2, [r7, #28]
 8009f2a:	440a      	add	r2, r1
 8009f2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f30:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009f34:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009f38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f3a:	69bb      	ldr	r3, [r7, #24]
 8009f3c:	015a      	lsls	r2, r3, #5
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	4413      	add	r3, r2
 8009f42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f46:	691b      	ldr	r3, [r3, #16]
 8009f48:	69ba      	ldr	r2, [r7, #24]
 8009f4a:	0151      	lsls	r1, r2, #5
 8009f4c:	69fa      	ldr	r2, [r7, #28]
 8009f4e:	440a      	add	r2, r1
 8009f50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	015a      	lsls	r2, r3, #5
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	4413      	add	r3, r2
 8009f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	69ba      	ldr	r2, [r7, #24]
 8009f6a:	0151      	lsls	r1, r2, #5
 8009f6c:	69fa      	ldr	r2, [r7, #28]
 8009f6e:	440a      	add	r2, r1
 8009f70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f74:	0cdb      	lsrs	r3, r3, #19
 8009f76:	04db      	lsls	r3, r3, #19
 8009f78:	6113      	str	r3, [r2, #16]
 8009f7a:	e097      	b.n	800a0ac <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	015a      	lsls	r2, r3, #5
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	4413      	add	r3, r2
 8009f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f88:	691b      	ldr	r3, [r3, #16]
 8009f8a:	69ba      	ldr	r2, [r7, #24]
 8009f8c:	0151      	lsls	r1, r2, #5
 8009f8e:	69fa      	ldr	r2, [r7, #28]
 8009f90:	440a      	add	r2, r1
 8009f92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f96:	0cdb      	lsrs	r3, r3, #19
 8009f98:	04db      	lsls	r3, r3, #19
 8009f9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	69ba      	ldr	r2, [r7, #24]
 8009fac:	0151      	lsls	r1, r2, #5
 8009fae:	69fa      	ldr	r2, [r7, #28]
 8009fb0:	440a      	add	r2, r1
 8009fb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fb6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009fba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009fbe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d11a      	bne.n	8009ffc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	691a      	ldr	r2, [r3, #16]
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d903      	bls.n	8009fda <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	689a      	ldr	r2, [r3, #8]
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	015a      	lsls	r2, r3, #5
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	0151      	lsls	r1, r2, #5
 8009fec:	69fa      	ldr	r2, [r7, #28]
 8009fee:	440a      	add	r2, r1
 8009ff0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ff4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009ff8:	6113      	str	r3, [r2, #16]
 8009ffa:	e044      	b.n	800a086 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	691a      	ldr	r2, [r3, #16]
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	4413      	add	r3, r2
 800a006:	1e5a      	subs	r2, r3, #1
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a010:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	015a      	lsls	r2, r3, #5
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	4413      	add	r3, r2
 800a01a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a01e:	691a      	ldr	r2, [r3, #16]
 800a020:	8afb      	ldrh	r3, [r7, #22]
 800a022:	04d9      	lsls	r1, r3, #19
 800a024:	4ba4      	ldr	r3, [pc, #656]	@ (800a2b8 <USB_EPStartXfer+0x3cc>)
 800a026:	400b      	ands	r3, r1
 800a028:	69b9      	ldr	r1, [r7, #24]
 800a02a:	0148      	lsls	r0, r1, #5
 800a02c:	69f9      	ldr	r1, [r7, #28]
 800a02e:	4401      	add	r1, r0
 800a030:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a034:	4313      	orrs	r3, r2
 800a036:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	791b      	ldrb	r3, [r3, #4]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d122      	bne.n	800a086 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	4413      	add	r3, r2
 800a048:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	69ba      	ldr	r2, [r7, #24]
 800a050:	0151      	lsls	r1, r2, #5
 800a052:	69fa      	ldr	r2, [r7, #28]
 800a054:	440a      	add	r2, r1
 800a056:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a05a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a05e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	015a      	lsls	r2, r3, #5
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	4413      	add	r3, r2
 800a068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a06c:	691a      	ldr	r2, [r3, #16]
 800a06e:	8afb      	ldrh	r3, [r7, #22]
 800a070:	075b      	lsls	r3, r3, #29
 800a072:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a076:	69b9      	ldr	r1, [r7, #24]
 800a078:	0148      	lsls	r0, r1, #5
 800a07a:	69f9      	ldr	r1, [r7, #28]
 800a07c:	4401      	add	r1, r0
 800a07e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a082:	4313      	orrs	r3, r2
 800a084:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	015a      	lsls	r2, r3, #5
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	4413      	add	r3, r2
 800a08e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a092:	691a      	ldr	r2, [r3, #16]
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a09c:	69b9      	ldr	r1, [r7, #24]
 800a09e:	0148      	lsls	r0, r1, #5
 800a0a0:	69f9      	ldr	r1, [r7, #28]
 800a0a2:	4401      	add	r1, r0
 800a0a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a0ac:	79fb      	ldrb	r3, [r7, #7]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d14b      	bne.n	800a14a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	69db      	ldr	r3, [r3, #28]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d009      	beq.n	800a0ce <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	015a      	lsls	r2, r3, #5
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	69db      	ldr	r3, [r3, #28]
 800a0cc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	791b      	ldrb	r3, [r3, #4]
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d128      	bne.n	800a128 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d110      	bne.n	800a108 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	015a      	lsls	r2, r3, #5
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	69ba      	ldr	r2, [r7, #24]
 800a0f6:	0151      	lsls	r1, r2, #5
 800a0f8:	69fa      	ldr	r2, [r7, #28]
 800a0fa:	440a      	add	r2, r1
 800a0fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a100:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a104:	6013      	str	r3, [r2, #0]
 800a106:	e00f      	b.n	800a128 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	015a      	lsls	r2, r3, #5
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	4413      	add	r3, r2
 800a110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	69ba      	ldr	r2, [r7, #24]
 800a118:	0151      	lsls	r1, r2, #5
 800a11a:	69fa      	ldr	r2, [r7, #28]
 800a11c:	440a      	add	r2, r1
 800a11e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a122:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a126:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	015a      	lsls	r2, r3, #5
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	4413      	add	r3, r2
 800a130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	69ba      	ldr	r2, [r7, #24]
 800a138:	0151      	lsls	r1, r2, #5
 800a13a:	69fa      	ldr	r2, [r7, #28]
 800a13c:	440a      	add	r2, r1
 800a13e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a142:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a146:	6013      	str	r3, [r2, #0]
 800a148:	e166      	b.n	800a418 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	015a      	lsls	r2, r3, #5
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	4413      	add	r3, r2
 800a152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	69ba      	ldr	r2, [r7, #24]
 800a15a:	0151      	lsls	r1, r2, #5
 800a15c:	69fa      	ldr	r2, [r7, #28]
 800a15e:	440a      	add	r2, r1
 800a160:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a164:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a168:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	791b      	ldrb	r3, [r3, #4]
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d015      	beq.n	800a19e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	691b      	ldr	r3, [r3, #16]
 800a176:	2b00      	cmp	r3, #0
 800a178:	f000 814e 	beq.w	800a418 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a182:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	f003 030f 	and.w	r3, r3, #15
 800a18c:	2101      	movs	r1, #1
 800a18e:	fa01 f303 	lsl.w	r3, r1, r3
 800a192:	69f9      	ldr	r1, [r7, #28]
 800a194:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a198:	4313      	orrs	r3, r2
 800a19a:	634b      	str	r3, [r1, #52]	@ 0x34
 800a19c:	e13c      	b.n	800a418 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d110      	bne.n	800a1d0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	015a      	lsls	r2, r3, #5
 800a1b2:	69fb      	ldr	r3, [r7, #28]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	69ba      	ldr	r2, [r7, #24]
 800a1be:	0151      	lsls	r1, r2, #5
 800a1c0:	69fa      	ldr	r2, [r7, #28]
 800a1c2:	440a      	add	r2, r1
 800a1c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a1cc:	6013      	str	r3, [r2, #0]
 800a1ce:	e00f      	b.n	800a1f0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	015a      	lsls	r2, r3, #5
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	69ba      	ldr	r2, [r7, #24]
 800a1e0:	0151      	lsls	r1, r2, #5
 800a1e2:	69fa      	ldr	r2, [r7, #28]
 800a1e4:	440a      	add	r2, r1
 800a1e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1ee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	68d9      	ldr	r1, [r3, #12]
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	781a      	ldrb	r2, [r3, #0]
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	691b      	ldr	r3, [r3, #16]
 800a1fc:	b298      	uxth	r0, r3
 800a1fe:	79fb      	ldrb	r3, [r7, #7]
 800a200:	9300      	str	r3, [sp, #0]
 800a202:	4603      	mov	r3, r0
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f000 f9b9 	bl	800a57c <USB_WritePacket>
 800a20a:	e105      	b.n	800a418 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	015a      	lsls	r2, r3, #5
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	4413      	add	r3, r2
 800a214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	69ba      	ldr	r2, [r7, #24]
 800a21c:	0151      	lsls	r1, r2, #5
 800a21e:	69fa      	ldr	r2, [r7, #28]
 800a220:	440a      	add	r2, r1
 800a222:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a226:	0cdb      	lsrs	r3, r3, #19
 800a228:	04db      	lsls	r3, r3, #19
 800a22a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	015a      	lsls	r2, r3, #5
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	4413      	add	r3, r2
 800a234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a238:	691b      	ldr	r3, [r3, #16]
 800a23a:	69ba      	ldr	r2, [r7, #24]
 800a23c:	0151      	lsls	r1, r2, #5
 800a23e:	69fa      	ldr	r2, [r7, #28]
 800a240:	440a      	add	r2, r1
 800a242:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a246:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a24a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a24e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d132      	bne.n	800a2bc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d003      	beq.n	800a266 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a25e:	68bb      	ldr	r3, [r7, #8]
 800a260:	689a      	ldr	r2, [r3, #8]
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	689a      	ldr	r2, [r3, #8]
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	015a      	lsls	r2, r3, #5
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	4413      	add	r3, r2
 800a276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a27a:	691a      	ldr	r2, [r3, #16]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	6a1b      	ldr	r3, [r3, #32]
 800a280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a284:	69b9      	ldr	r1, [r7, #24]
 800a286:	0148      	lsls	r0, r1, #5
 800a288:	69f9      	ldr	r1, [r7, #28]
 800a28a:	4401      	add	r1, r0
 800a28c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a290:	4313      	orrs	r3, r2
 800a292:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a294:	69bb      	ldr	r3, [r7, #24]
 800a296:	015a      	lsls	r2, r3, #5
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	4413      	add	r3, r2
 800a29c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	69ba      	ldr	r2, [r7, #24]
 800a2a4:	0151      	lsls	r1, r2, #5
 800a2a6:	69fa      	ldr	r2, [r7, #28]
 800a2a8:	440a      	add	r2, r1
 800a2aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a2b2:	6113      	str	r3, [r2, #16]
 800a2b4:	e062      	b.n	800a37c <USB_EPStartXfer+0x490>
 800a2b6:	bf00      	nop
 800a2b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d123      	bne.n	800a30c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a2c4:	69bb      	ldr	r3, [r7, #24]
 800a2c6:	015a      	lsls	r2, r3, #5
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2d0:	691a      	ldr	r2, [r3, #16]
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2da:	69b9      	ldr	r1, [r7, #24]
 800a2dc:	0148      	lsls	r0, r1, #5
 800a2de:	69f9      	ldr	r1, [r7, #28]
 800a2e0:	4401      	add	r1, r0
 800a2e2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	015a      	lsls	r2, r3, #5
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	69ba      	ldr	r2, [r7, #24]
 800a2fa:	0151      	lsls	r1, r2, #5
 800a2fc:	69fa      	ldr	r2, [r7, #28]
 800a2fe:	440a      	add	r2, r1
 800a300:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a304:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a308:	6113      	str	r3, [r2, #16]
 800a30a:	e037      	b.n	800a37c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	691a      	ldr	r2, [r3, #16]
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	4413      	add	r3, r2
 800a316:	1e5a      	subs	r2, r3, #1
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a320:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	8afa      	ldrh	r2, [r7, #22]
 800a328:	fb03 f202 	mul.w	r2, r3, r2
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	015a      	lsls	r2, r3, #5
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	4413      	add	r3, r2
 800a338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a33c:	691a      	ldr	r2, [r3, #16]
 800a33e:	8afb      	ldrh	r3, [r7, #22]
 800a340:	04d9      	lsls	r1, r3, #19
 800a342:	4b38      	ldr	r3, [pc, #224]	@ (800a424 <USB_EPStartXfer+0x538>)
 800a344:	400b      	ands	r3, r1
 800a346:	69b9      	ldr	r1, [r7, #24]
 800a348:	0148      	lsls	r0, r1, #5
 800a34a:	69f9      	ldr	r1, [r7, #28]
 800a34c:	4401      	add	r1, r0
 800a34e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a352:	4313      	orrs	r3, r2
 800a354:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	015a      	lsls	r2, r3, #5
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	4413      	add	r3, r2
 800a35e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a362:	691a      	ldr	r2, [r3, #16]
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	6a1b      	ldr	r3, [r3, #32]
 800a368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a36c:	69b9      	ldr	r1, [r7, #24]
 800a36e:	0148      	lsls	r0, r1, #5
 800a370:	69f9      	ldr	r1, [r7, #28]
 800a372:	4401      	add	r1, r0
 800a374:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a378:	4313      	orrs	r3, r2
 800a37a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a37c:	79fb      	ldrb	r3, [r7, #7]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d10d      	bne.n	800a39e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d009      	beq.n	800a39e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	68d9      	ldr	r1, [r3, #12]
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	015a      	lsls	r2, r3, #5
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	4413      	add	r3, r2
 800a396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a39a:	460a      	mov	r2, r1
 800a39c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	791b      	ldrb	r3, [r3, #4]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d128      	bne.n	800a3f8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d110      	bne.n	800a3d8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	015a      	lsls	r2, r3, #5
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	4413      	add	r3, r2
 800a3be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	69ba      	ldr	r2, [r7, #24]
 800a3c6:	0151      	lsls	r1, r2, #5
 800a3c8:	69fa      	ldr	r2, [r7, #28]
 800a3ca:	440a      	add	r2, r1
 800a3cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a3d4:	6013      	str	r3, [r2, #0]
 800a3d6:	e00f      	b.n	800a3f8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	015a      	lsls	r2, r3, #5
 800a3dc:	69fb      	ldr	r3, [r7, #28]
 800a3de:	4413      	add	r3, r2
 800a3e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	69ba      	ldr	r2, [r7, #24]
 800a3e8:	0151      	lsls	r1, r2, #5
 800a3ea:	69fa      	ldr	r2, [r7, #28]
 800a3ec:	440a      	add	r2, r1
 800a3ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a3f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	015a      	lsls	r2, r3, #5
 800a3fc:	69fb      	ldr	r3, [r7, #28]
 800a3fe:	4413      	add	r3, r2
 800a400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	69ba      	ldr	r2, [r7, #24]
 800a408:	0151      	lsls	r1, r2, #5
 800a40a:	69fa      	ldr	r2, [r7, #28]
 800a40c:	440a      	add	r2, r1
 800a40e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a412:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a416:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3720      	adds	r7, #32
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	1ff80000 	.word	0x1ff80000

0800a428 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a428:	b480      	push	{r7}
 800a42a:	b087      	sub	sp, #28
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a432:	2300      	movs	r3, #0
 800a434:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	785b      	ldrb	r3, [r3, #1]
 800a442:	2b01      	cmp	r3, #1
 800a444:	d14a      	bne.n	800a4dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	015a      	lsls	r2, r3, #5
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	4413      	add	r3, r2
 800a450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a45a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a45e:	f040 8086 	bne.w	800a56e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	015a      	lsls	r2, r3, #5
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	4413      	add	r3, r2
 800a46c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	7812      	ldrb	r2, [r2, #0]
 800a476:	0151      	lsls	r1, r2, #5
 800a478:	693a      	ldr	r2, [r7, #16]
 800a47a:	440a      	add	r2, r1
 800a47c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a480:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a484:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	015a      	lsls	r2, r3, #5
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	4413      	add	r3, r2
 800a490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	7812      	ldrb	r2, [r2, #0]
 800a49a:	0151      	lsls	r1, r2, #5
 800a49c:	693a      	ldr	r2, [r7, #16]
 800a49e:	440a      	add	r2, r1
 800a4a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d902      	bls.n	800a4c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	75fb      	strb	r3, [r7, #23]
          break;
 800a4be:	e056      	b.n	800a56e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	015a      	lsls	r2, r3, #5
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	4413      	add	r3, r2
 800a4ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4d8:	d0e7      	beq.n	800a4aa <USB_EPStopXfer+0x82>
 800a4da:	e048      	b.n	800a56e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	015a      	lsls	r2, r3, #5
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4f4:	d13b      	bne.n	800a56e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	015a      	lsls	r2, r3, #5
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	4413      	add	r3, r2
 800a500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	7812      	ldrb	r2, [r2, #0]
 800a50a:	0151      	lsls	r1, r2, #5
 800a50c:	693a      	ldr	r2, [r7, #16]
 800a50e:	440a      	add	r2, r1
 800a510:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a514:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a518:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	015a      	lsls	r2, r3, #5
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	4413      	add	r3, r2
 800a524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	683a      	ldr	r2, [r7, #0]
 800a52c:	7812      	ldrb	r2, [r2, #0]
 800a52e:	0151      	lsls	r1, r2, #5
 800a530:	693a      	ldr	r2, [r7, #16]
 800a532:	440a      	add	r2, r1
 800a534:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a538:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a53c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	3301      	adds	r3, #1
 800a542:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d902      	bls.n	800a554 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	75fb      	strb	r3, [r7, #23]
          break;
 800a552:	e00c      	b.n	800a56e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	015a      	lsls	r2, r3, #5
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	4413      	add	r3, r2
 800a55e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a568:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a56c:	d0e7      	beq.n	800a53e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a56e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a570:	4618      	mov	r0, r3
 800a572:	371c      	adds	r7, #28
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b089      	sub	sp, #36	@ 0x24
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	60b9      	str	r1, [r7, #8]
 800a586:	4611      	mov	r1, r2
 800a588:	461a      	mov	r2, r3
 800a58a:	460b      	mov	r3, r1
 800a58c:	71fb      	strb	r3, [r7, #7]
 800a58e:	4613      	mov	r3, r2
 800a590:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a59a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d123      	bne.n	800a5ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a5a2:	88bb      	ldrh	r3, [r7, #4]
 800a5a4:	3303      	adds	r3, #3
 800a5a6:	089b      	lsrs	r3, r3, #2
 800a5a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	61bb      	str	r3, [r7, #24]
 800a5ae:	e018      	b.n	800a5e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a5b0:	79fb      	ldrb	r3, [r7, #7]
 800a5b2:	031a      	lsls	r2, r3, #12
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5bc:	461a      	mov	r2, r3
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a5dc:	69bb      	ldr	r3, [r7, #24]
 800a5de:	3301      	adds	r3, #1
 800a5e0:	61bb      	str	r3, [r7, #24]
 800a5e2:	69ba      	ldr	r2, [r7, #24]
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d3e2      	bcc.n	800a5b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a5ea:	2300      	movs	r3, #0
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3724      	adds	r7, #36	@ 0x24
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b08b      	sub	sp, #44	@ 0x2c
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	4613      	mov	r3, r2
 800a604:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a60e:	88fb      	ldrh	r3, [r7, #6]
 800a610:	089b      	lsrs	r3, r3, #2
 800a612:	b29b      	uxth	r3, r3
 800a614:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a616:	88fb      	ldrh	r3, [r7, #6]
 800a618:	f003 0303 	and.w	r3, r3, #3
 800a61c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a61e:	2300      	movs	r3, #0
 800a620:	623b      	str	r3, [r7, #32]
 800a622:	e014      	b.n	800a64e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a624:	69bb      	ldr	r3, [r7, #24]
 800a626:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a632:	3301      	adds	r3, #1
 800a634:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a638:	3301      	adds	r3, #1
 800a63a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a63c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63e:	3301      	adds	r3, #1
 800a640:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a644:	3301      	adds	r3, #1
 800a646:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a648:	6a3b      	ldr	r3, [r7, #32]
 800a64a:	3301      	adds	r3, #1
 800a64c:	623b      	str	r3, [r7, #32]
 800a64e:	6a3a      	ldr	r2, [r7, #32]
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	429a      	cmp	r2, r3
 800a654:	d3e6      	bcc.n	800a624 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a656:	8bfb      	ldrh	r3, [r7, #30]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d01e      	beq.n	800a69a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a65c:	2300      	movs	r3, #0
 800a65e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a666:	461a      	mov	r2, r3
 800a668:	f107 0310 	add.w	r3, r7, #16
 800a66c:	6812      	ldr	r2, [r2, #0]
 800a66e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a670:	693a      	ldr	r2, [r7, #16]
 800a672:	6a3b      	ldr	r3, [r7, #32]
 800a674:	b2db      	uxtb	r3, r3
 800a676:	00db      	lsls	r3, r3, #3
 800a678:	fa22 f303 	lsr.w	r3, r2, r3
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a680:	701a      	strb	r2, [r3, #0]
      i++;
 800a682:	6a3b      	ldr	r3, [r7, #32]
 800a684:	3301      	adds	r3, #1
 800a686:	623b      	str	r3, [r7, #32]
      pDest++;
 800a688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68a:	3301      	adds	r3, #1
 800a68c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a68e:	8bfb      	ldrh	r3, [r7, #30]
 800a690:	3b01      	subs	r3, #1
 800a692:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a694:	8bfb      	ldrh	r3, [r7, #30]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1ea      	bne.n	800a670 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	372c      	adds	r7, #44	@ 0x2c
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	785b      	ldrb	r3, [r3, #1]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d12c      	bne.n	800a71e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	015a      	lsls	r2, r3, #5
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	db12      	blt.n	800a6fc <USB_EPSetStall+0x54>
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d00f      	beq.n	800a6fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	0151      	lsls	r1, r2, #5
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	440a      	add	r2, r1
 800a6f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a6f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a6fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	015a      	lsls	r2, r3, #5
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	4413      	add	r3, r2
 800a704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	0151      	lsls	r1, r2, #5
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	440a      	add	r2, r1
 800a712:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a716:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a71a:	6013      	str	r3, [r2, #0]
 800a71c:	e02b      	b.n	800a776 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	015a      	lsls	r2, r3, #5
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	4413      	add	r3, r2
 800a726:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	db12      	blt.n	800a756 <USB_EPSetStall+0xae>
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00f      	beq.n	800a756 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	015a      	lsls	r2, r3, #5
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	4413      	add	r3, r2
 800a73e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	0151      	lsls	r1, r2, #5
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	440a      	add	r2, r1
 800a74c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a750:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a754:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	015a      	lsls	r2, r3, #5
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	4413      	add	r3, r2
 800a75e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68ba      	ldr	r2, [r7, #8]
 800a766:	0151      	lsls	r1, r2, #5
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	440a      	add	r2, r1
 800a76c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a770:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a774:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3714      	adds	r7, #20
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a784:	b480      	push	{r7}
 800a786:	b085      	sub	sp, #20
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	785b      	ldrb	r3, [r3, #1]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d128      	bne.n	800a7f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	015a      	lsls	r2, r3, #5
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	68ba      	ldr	r2, [r7, #8]
 800a7b0:	0151      	lsls	r1, r2, #5
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	440a      	add	r2, r1
 800a7b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a7be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	791b      	ldrb	r3, [r3, #4]
 800a7c4:	2b03      	cmp	r3, #3
 800a7c6:	d003      	beq.n	800a7d0 <USB_EPClearStall+0x4c>
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	791b      	ldrb	r3, [r3, #4]
 800a7cc:	2b02      	cmp	r3, #2
 800a7ce:	d138      	bne.n	800a842 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	015a      	lsls	r2, r3, #5
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	68ba      	ldr	r2, [r7, #8]
 800a7e0:	0151      	lsls	r1, r2, #5
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	440a      	add	r2, r1
 800a7e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a7ee:	6013      	str	r3, [r2, #0]
 800a7f0:	e027      	b.n	800a842 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	015a      	lsls	r2, r3, #5
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	0151      	lsls	r1, r2, #5
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	440a      	add	r2, r1
 800a808:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a80c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a810:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	791b      	ldrb	r3, [r3, #4]
 800a816:	2b03      	cmp	r3, #3
 800a818:	d003      	beq.n	800a822 <USB_EPClearStall+0x9e>
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	791b      	ldrb	r3, [r3, #4]
 800a81e:	2b02      	cmp	r3, #2
 800a820:	d10f      	bne.n	800a842 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	015a      	lsls	r2, r3, #5
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	4413      	add	r3, r2
 800a82a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	0151      	lsls	r1, r2, #5
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	440a      	add	r2, r1
 800a838:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a83c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a840:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a842:	2300      	movs	r3, #0
}
 800a844:	4618      	mov	r0, r3
 800a846:	3714      	adds	r7, #20
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	460b      	mov	r3, r1
 800a85a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a86e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a872:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	78fb      	ldrb	r3, [r7, #3]
 800a87e:	011b      	lsls	r3, r3, #4
 800a880:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a884:	68f9      	ldr	r1, [r7, #12]
 800a886:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a88a:	4313      	orrs	r3, r2
 800a88c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3714      	adds	r7, #20
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a8b6:	f023 0303 	bic.w	r3, r3, #3
 800a8ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8ca:	f023 0302 	bic.w	r3, r3, #2
 800a8ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3714      	adds	r7, #20
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr

0800a8de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8de:	b480      	push	{r7}
 800a8e0:	b085      	sub	sp, #20
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68fa      	ldr	r2, [r7, #12]
 800a8f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a8f8:	f023 0303 	bic.w	r3, r3, #3
 800a8fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a90c:	f043 0302 	orr.w	r3, r3, #2
 800a910:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3714      	adds	r7, #20
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	695b      	ldr	r3, [r3, #20]
 800a92c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	699b      	ldr	r3, [r3, #24]
 800a932:	68fa      	ldr	r2, [r7, #12]
 800a934:	4013      	ands	r3, r2
 800a936:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a938:	68fb      	ldr	r3, [r7, #12]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3714      	adds	r7, #20
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a946:	b480      	push	{r7}
 800a948:	b085      	sub	sp, #20
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a958:	699b      	ldr	r3, [r3, #24]
 800a95a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a962:	69db      	ldr	r3, [r3, #28]
 800a964:	68ba      	ldr	r2, [r7, #8]
 800a966:	4013      	ands	r3, r2
 800a968:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	0c1b      	lsrs	r3, r3, #16
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr

0800a97a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a97a:	b480      	push	{r7}
 800a97c:	b085      	sub	sp, #20
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a98c:	699b      	ldr	r3, [r3, #24]
 800a98e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a996:	69db      	ldr	r3, [r3, #28]
 800a998:	68ba      	ldr	r2, [r7, #8]
 800a99a:	4013      	ands	r3, r2
 800a99c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	b29b      	uxth	r3, r3
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3714      	adds	r7, #20
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr

0800a9ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9ae:	b480      	push	{r7}
 800a9b0:	b085      	sub	sp, #20
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	460b      	mov	r3, r1
 800a9b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a9be:	78fb      	ldrb	r3, [r7, #3]
 800a9c0:	015a      	lsls	r2, r3, #5
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9d4:	695b      	ldr	r3, [r3, #20]
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	4013      	ands	r3, r2
 800a9da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a9dc:	68bb      	ldr	r3, [r7, #8]
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3714      	adds	r7, #20
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b087      	sub	sp, #28
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa0c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aa0e:	78fb      	ldrb	r3, [r7, #3]
 800aa10:	f003 030f 	and.w	r3, r3, #15
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	fa22 f303 	lsr.w	r3, r2, r3
 800aa1a:	01db      	lsls	r3, r3, #7
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	693a      	ldr	r2, [r7, #16]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aa24:	78fb      	ldrb	r3, [r7, #3]
 800aa26:	015a      	lsls	r2, r3, #5
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	4413      	add	r3, r2
 800aa2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	693a      	ldr	r2, [r7, #16]
 800aa34:	4013      	ands	r3, r2
 800aa36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa38:	68bb      	ldr	r3, [r7, #8]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	371c      	adds	r7, #28
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa46:	b480      	push	{r7}
 800aa48:	b083      	sub	sp, #12
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	695b      	ldr	r3, [r3, #20]
 800aa52:	f003 0301 	and.w	r3, r3, #1
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	370c      	adds	r7, #12
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr

0800aa62 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800aa62:	b480      	push	{r7}
 800aa64:	b085      	sub	sp, #20
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa7c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800aa80:	f023 0307 	bic.w	r3, r3, #7
 800aa84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aa94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aa98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3714      	adds	r7, #20
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b087      	sub	sp, #28
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	460b      	mov	r3, r1
 800aab2:	607a      	str	r2, [r7, #4]
 800aab4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	333c      	adds	r3, #60	@ 0x3c
 800aabe:	3304      	adds	r3, #4
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	4a26      	ldr	r2, [pc, #152]	@ (800ab60 <USB_EP0_OutStart+0xb8>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d90a      	bls.n	800aae2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aad8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aadc:	d101      	bne.n	800aae2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800aade:	2300      	movs	r3, #0
 800aae0:	e037      	b.n	800ab52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aae8:	461a      	mov	r2, r3
 800aaea:	2300      	movs	r3, #0
 800aaec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaf4:	691b      	ldr	r3, [r3, #16]
 800aaf6:	697a      	ldr	r2, [r7, #20]
 800aaf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aafc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab10:	f043 0318 	orr.w	r3, r3, #24
 800ab14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	697a      	ldr	r2, [r7, #20]
 800ab20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab24:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ab28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ab2a:	7afb      	ldrb	r3, [r7, #11]
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d10f      	bne.n	800ab50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab36:	461a      	mov	r2, r3
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	697a      	ldr	r2, [r7, #20]
 800ab46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab4a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800ab4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	371c      	adds	r7, #28
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
 800ab5e:	bf00      	nop
 800ab60:	4f54300a 	.word	0x4f54300a

0800ab64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	3301      	adds	r3, #1
 800ab74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ab7c:	d901      	bls.n	800ab82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	e022      	b.n	800abc8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	daf2      	bge.n	800ab70 <USB_CoreReset+0xc>

  count = 10U;
 800ab8a:	230a      	movs	r3, #10
 800ab8c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800ab8e:	e002      	b.n	800ab96 <USB_CoreReset+0x32>
  {
    count--;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	3b01      	subs	r3, #1
 800ab94:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d1f9      	bne.n	800ab90 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	f043 0201 	orr.w	r2, r3, #1
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	3301      	adds	r3, #1
 800abac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abb4:	d901      	bls.n	800abba <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800abb6:	2303      	movs	r3, #3
 800abb8:	e006      	b.n	800abc8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	f003 0301 	and.w	r3, r3, #1
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d0f0      	beq.n	800aba8 <USB_CoreReset+0x44>

  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3714      	adds	r7, #20
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	460b      	mov	r3, r1
 800abde:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800abe0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800abe4:	f002 fd1e 	bl	800d624 <USBD_static_malloc>
 800abe8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d109      	bne.n	800ac04 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	32b0      	adds	r2, #176	@ 0xb0
 800abfa:	2100      	movs	r1, #0
 800abfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ac00:	2302      	movs	r3, #2
 800ac02:	e0d4      	b.n	800adae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ac04:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ac08:	2100      	movs	r1, #0
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f002 fd4e 	bl	800d6ac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	32b0      	adds	r2, #176	@ 0xb0
 800ac1a:	68f9      	ldr	r1, [r7, #12]
 800ac1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	32b0      	adds	r2, #176	@ 0xb0
 800ac2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	7c1b      	ldrb	r3, [r3, #16]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d138      	bne.n	800acae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac3c:	4b5e      	ldr	r3, [pc, #376]	@ (800adb8 <USBD_CDC_Init+0x1e4>)
 800ac3e:	7819      	ldrb	r1, [r3, #0]
 800ac40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac44:	2202      	movs	r2, #2
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f002 fbc9 	bl	800d3de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac4c:	4b5a      	ldr	r3, [pc, #360]	@ (800adb8 <USBD_CDC_Init+0x1e4>)
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	f003 020f 	and.w	r2, r3, #15
 800ac54:	6879      	ldr	r1, [r7, #4]
 800ac56:	4613      	mov	r3, r2
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	4413      	add	r3, r2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	440b      	add	r3, r1
 800ac60:	3323      	adds	r3, #35	@ 0x23
 800ac62:	2201      	movs	r2, #1
 800ac64:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac66:	4b55      	ldr	r3, [pc, #340]	@ (800adbc <USBD_CDC_Init+0x1e8>)
 800ac68:	7819      	ldrb	r1, [r3, #0]
 800ac6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac6e:	2202      	movs	r2, #2
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f002 fbb4 	bl	800d3de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac76:	4b51      	ldr	r3, [pc, #324]	@ (800adbc <USBD_CDC_Init+0x1e8>)
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	f003 020f 	and.w	r2, r3, #15
 800ac7e:	6879      	ldr	r1, [r7, #4]
 800ac80:	4613      	mov	r3, r2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	4413      	add	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	440b      	add	r3, r1
 800ac8a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ac8e:	2201      	movs	r2, #1
 800ac90:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac92:	4b4b      	ldr	r3, [pc, #300]	@ (800adc0 <USBD_CDC_Init+0x1ec>)
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	f003 020f 	and.w	r2, r3, #15
 800ac9a:	6879      	ldr	r1, [r7, #4]
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	4413      	add	r3, r2
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	440b      	add	r3, r1
 800aca6:	331c      	adds	r3, #28
 800aca8:	2210      	movs	r2, #16
 800acaa:	601a      	str	r2, [r3, #0]
 800acac:	e035      	b.n	800ad1a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800acae:	4b42      	ldr	r3, [pc, #264]	@ (800adb8 <USBD_CDC_Init+0x1e4>)
 800acb0:	7819      	ldrb	r1, [r3, #0]
 800acb2:	2340      	movs	r3, #64	@ 0x40
 800acb4:	2202      	movs	r2, #2
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f002 fb91 	bl	800d3de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800acbc:	4b3e      	ldr	r3, [pc, #248]	@ (800adb8 <USBD_CDC_Init+0x1e4>)
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	f003 020f 	and.w	r2, r3, #15
 800acc4:	6879      	ldr	r1, [r7, #4]
 800acc6:	4613      	mov	r3, r2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4413      	add	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	440b      	add	r3, r1
 800acd0:	3323      	adds	r3, #35	@ 0x23
 800acd2:	2201      	movs	r2, #1
 800acd4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800acd6:	4b39      	ldr	r3, [pc, #228]	@ (800adbc <USBD_CDC_Init+0x1e8>)
 800acd8:	7819      	ldrb	r1, [r3, #0]
 800acda:	2340      	movs	r3, #64	@ 0x40
 800acdc:	2202      	movs	r2, #2
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f002 fb7d 	bl	800d3de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ace4:	4b35      	ldr	r3, [pc, #212]	@ (800adbc <USBD_CDC_Init+0x1e8>)
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	f003 020f 	and.w	r2, r3, #15
 800acec:	6879      	ldr	r1, [r7, #4]
 800acee:	4613      	mov	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4413      	add	r3, r2
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	440b      	add	r3, r1
 800acf8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800acfc:	2201      	movs	r2, #1
 800acfe:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ad00:	4b2f      	ldr	r3, [pc, #188]	@ (800adc0 <USBD_CDC_Init+0x1ec>)
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	f003 020f 	and.w	r2, r3, #15
 800ad08:	6879      	ldr	r1, [r7, #4]
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	009b      	lsls	r3, r3, #2
 800ad0e:	4413      	add	r3, r2
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	440b      	add	r3, r1
 800ad14:	331c      	adds	r3, #28
 800ad16:	2210      	movs	r2, #16
 800ad18:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ad1a:	4b29      	ldr	r3, [pc, #164]	@ (800adc0 <USBD_CDC_Init+0x1ec>)
 800ad1c:	7819      	ldrb	r1, [r3, #0]
 800ad1e:	2308      	movs	r3, #8
 800ad20:	2203      	movs	r2, #3
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f002 fb5b 	bl	800d3de <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ad28:	4b25      	ldr	r3, [pc, #148]	@ (800adc0 <USBD_CDC_Init+0x1ec>)
 800ad2a:	781b      	ldrb	r3, [r3, #0]
 800ad2c:	f003 020f 	and.w	r2, r3, #15
 800ad30:	6879      	ldr	r1, [r7, #4]
 800ad32:	4613      	mov	r3, r2
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	4413      	add	r3, r2
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	440b      	add	r3, r1
 800ad3c:	3323      	adds	r3, #35	@ 0x23
 800ad3e:	2201      	movs	r2, #1
 800ad40:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	33b0      	adds	r3, #176	@ 0xb0
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d101      	bne.n	800ad7c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ad78:	2302      	movs	r3, #2
 800ad7a:	e018      	b.n	800adae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	7c1b      	ldrb	r3, [r3, #16]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d10a      	bne.n	800ad9a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad84:	4b0d      	ldr	r3, [pc, #52]	@ (800adbc <USBD_CDC_Init+0x1e8>)
 800ad86:	7819      	ldrb	r1, [r3, #0]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f002 fc12 	bl	800d5bc <USBD_LL_PrepareReceive>
 800ad98:	e008      	b.n	800adac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad9a:	4b08      	ldr	r3, [pc, #32]	@ (800adbc <USBD_CDC_Init+0x1e8>)
 800ad9c:	7819      	ldrb	r1, [r3, #0]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ada4:	2340      	movs	r3, #64	@ 0x40
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f002 fc08 	bl	800d5bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	200000bf 	.word	0x200000bf
 800adbc:	200000c0 	.word	0x200000c0
 800adc0:	200000c1 	.word	0x200000c1

0800adc4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	460b      	mov	r3, r1
 800adce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800add0:	4b3a      	ldr	r3, [pc, #232]	@ (800aebc <USBD_CDC_DeInit+0xf8>)
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	4619      	mov	r1, r3
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f002 fb27 	bl	800d42a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800addc:	4b37      	ldr	r3, [pc, #220]	@ (800aebc <USBD_CDC_DeInit+0xf8>)
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	f003 020f 	and.w	r2, r3, #15
 800ade4:	6879      	ldr	r1, [r7, #4]
 800ade6:	4613      	mov	r3, r2
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4413      	add	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	440b      	add	r3, r1
 800adf0:	3323      	adds	r3, #35	@ 0x23
 800adf2:	2200      	movs	r2, #0
 800adf4:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800adf6:	4b32      	ldr	r3, [pc, #200]	@ (800aec0 <USBD_CDC_DeInit+0xfc>)
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	4619      	mov	r1, r3
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f002 fb14 	bl	800d42a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ae02:	4b2f      	ldr	r3, [pc, #188]	@ (800aec0 <USBD_CDC_DeInit+0xfc>)
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	f003 020f 	and.w	r2, r3, #15
 800ae0a:	6879      	ldr	r1, [r7, #4]
 800ae0c:	4613      	mov	r3, r2
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	4413      	add	r3, r2
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	440b      	add	r3, r1
 800ae16:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ae1e:	4b29      	ldr	r3, [pc, #164]	@ (800aec4 <USBD_CDC_DeInit+0x100>)
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	4619      	mov	r1, r3
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f002 fb00 	bl	800d42a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ae2a:	4b26      	ldr	r3, [pc, #152]	@ (800aec4 <USBD_CDC_DeInit+0x100>)
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	f003 020f 	and.w	r2, r3, #15
 800ae32:	6879      	ldr	r1, [r7, #4]
 800ae34:	4613      	mov	r3, r2
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	4413      	add	r3, r2
 800ae3a:	009b      	lsls	r3, r3, #2
 800ae3c:	440b      	add	r3, r1
 800ae3e:	3323      	adds	r3, #35	@ 0x23
 800ae40:	2200      	movs	r2, #0
 800ae42:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ae44:	4b1f      	ldr	r3, [pc, #124]	@ (800aec4 <USBD_CDC_DeInit+0x100>)
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	f003 020f 	and.w	r2, r3, #15
 800ae4c:	6879      	ldr	r1, [r7, #4]
 800ae4e:	4613      	mov	r3, r2
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	4413      	add	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	440b      	add	r3, r1
 800ae58:	331c      	adds	r3, #28
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	32b0      	adds	r2, #176	@ 0xb0
 800ae68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d01f      	beq.n	800aeb0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	33b0      	adds	r3, #176	@ 0xb0
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	4413      	add	r3, r2
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	32b0      	adds	r2, #176	@ 0xb0
 800ae8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae92:	4618      	mov	r0, r3
 800ae94:	f002 fbd4 	bl	800d640 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	32b0      	adds	r2, #176	@ 0xb0
 800aea2:	2100      	movs	r1, #0
 800aea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
 800aeba:	bf00      	nop
 800aebc:	200000bf 	.word	0x200000bf
 800aec0:	200000c0 	.word	0x200000c0
 800aec4:	200000c1 	.word	0x200000c1

0800aec8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	32b0      	adds	r2, #176	@ 0xb0
 800aedc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aee2:	2300      	movs	r3, #0
 800aee4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aee6:	2300      	movs	r3, #0
 800aee8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aeea:	2300      	movs	r3, #0
 800aeec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aeee:	693b      	ldr	r3, [r7, #16]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d101      	bne.n	800aef8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800aef4:	2303      	movs	r3, #3
 800aef6:	e0bf      	b.n	800b078 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af00:	2b00      	cmp	r3, #0
 800af02:	d050      	beq.n	800afa6 <USBD_CDC_Setup+0xde>
 800af04:	2b20      	cmp	r3, #32
 800af06:	f040 80af 	bne.w	800b068 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	88db      	ldrh	r3, [r3, #6]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d03a      	beq.n	800af88 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	b25b      	sxtb	r3, r3
 800af18:	2b00      	cmp	r3, #0
 800af1a:	da1b      	bge.n	800af54 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	33b0      	adds	r3, #176	@ 0xb0
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	4413      	add	r3, r2
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	683a      	ldr	r2, [r7, #0]
 800af30:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800af32:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af34:	683a      	ldr	r2, [r7, #0]
 800af36:	88d2      	ldrh	r2, [r2, #6]
 800af38:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	88db      	ldrh	r3, [r3, #6]
 800af3e:	2b07      	cmp	r3, #7
 800af40:	bf28      	it	cs
 800af42:	2307      	movcs	r3, #7
 800af44:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	89fa      	ldrh	r2, [r7, #14]
 800af4a:	4619      	mov	r1, r3
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f001 fda9 	bl	800caa4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800af52:	e090      	b.n	800b076 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	785a      	ldrb	r2, [r3, #1]
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	88db      	ldrh	r3, [r3, #6]
 800af62:	2b3f      	cmp	r3, #63	@ 0x3f
 800af64:	d803      	bhi.n	800af6e <USBD_CDC_Setup+0xa6>
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	88db      	ldrh	r3, [r3, #6]
 800af6a:	b2da      	uxtb	r2, r3
 800af6c:	e000      	b.n	800af70 <USBD_CDC_Setup+0xa8>
 800af6e:	2240      	movs	r2, #64	@ 0x40
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800af76:	6939      	ldr	r1, [r7, #16]
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800af7e:	461a      	mov	r2, r3
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f001 fdbe 	bl	800cb02 <USBD_CtlPrepareRx>
      break;
 800af86:	e076      	b.n	800b076 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	33b0      	adds	r3, #176	@ 0xb0
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	4413      	add	r3, r2
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	683a      	ldr	r2, [r7, #0]
 800af9c:	7850      	ldrb	r0, [r2, #1]
 800af9e:	2200      	movs	r2, #0
 800afa0:	6839      	ldr	r1, [r7, #0]
 800afa2:	4798      	blx	r3
      break;
 800afa4:	e067      	b.n	800b076 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	785b      	ldrb	r3, [r3, #1]
 800afaa:	2b0b      	cmp	r3, #11
 800afac:	d851      	bhi.n	800b052 <USBD_CDC_Setup+0x18a>
 800afae:	a201      	add	r2, pc, #4	@ (adr r2, 800afb4 <USBD_CDC_Setup+0xec>)
 800afb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb4:	0800afe5 	.word	0x0800afe5
 800afb8:	0800b061 	.word	0x0800b061
 800afbc:	0800b053 	.word	0x0800b053
 800afc0:	0800b053 	.word	0x0800b053
 800afc4:	0800b053 	.word	0x0800b053
 800afc8:	0800b053 	.word	0x0800b053
 800afcc:	0800b053 	.word	0x0800b053
 800afd0:	0800b053 	.word	0x0800b053
 800afd4:	0800b053 	.word	0x0800b053
 800afd8:	0800b053 	.word	0x0800b053
 800afdc:	0800b00f 	.word	0x0800b00f
 800afe0:	0800b039 	.word	0x0800b039
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b03      	cmp	r3, #3
 800afee:	d107      	bne.n	800b000 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aff0:	f107 030a 	add.w	r3, r7, #10
 800aff4:	2202      	movs	r2, #2
 800aff6:	4619      	mov	r1, r3
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f001 fd53 	bl	800caa4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800affe:	e032      	b.n	800b066 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b000:	6839      	ldr	r1, [r7, #0]
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f001 fcd1 	bl	800c9aa <USBD_CtlError>
            ret = USBD_FAIL;
 800b008:	2303      	movs	r3, #3
 800b00a:	75fb      	strb	r3, [r7, #23]
          break;
 800b00c:	e02b      	b.n	800b066 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b03      	cmp	r3, #3
 800b018:	d107      	bne.n	800b02a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b01a:	f107 030d 	add.w	r3, r7, #13
 800b01e:	2201      	movs	r2, #1
 800b020:	4619      	mov	r1, r3
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f001 fd3e 	bl	800caa4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b028:	e01d      	b.n	800b066 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b02a:	6839      	ldr	r1, [r7, #0]
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f001 fcbc 	bl	800c9aa <USBD_CtlError>
            ret = USBD_FAIL;
 800b032:	2303      	movs	r3, #3
 800b034:	75fb      	strb	r3, [r7, #23]
          break;
 800b036:	e016      	b.n	800b066 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	2b03      	cmp	r3, #3
 800b042:	d00f      	beq.n	800b064 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b044:	6839      	ldr	r1, [r7, #0]
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f001 fcaf 	bl	800c9aa <USBD_CtlError>
            ret = USBD_FAIL;
 800b04c:	2303      	movs	r3, #3
 800b04e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b050:	e008      	b.n	800b064 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b052:	6839      	ldr	r1, [r7, #0]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f001 fca8 	bl	800c9aa <USBD_CtlError>
          ret = USBD_FAIL;
 800b05a:	2303      	movs	r3, #3
 800b05c:	75fb      	strb	r3, [r7, #23]
          break;
 800b05e:	e002      	b.n	800b066 <USBD_CDC_Setup+0x19e>
          break;
 800b060:	bf00      	nop
 800b062:	e008      	b.n	800b076 <USBD_CDC_Setup+0x1ae>
          break;
 800b064:	bf00      	nop
      }
      break;
 800b066:	e006      	b.n	800b076 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b068:	6839      	ldr	r1, [r7, #0]
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f001 fc9d 	bl	800c9aa <USBD_CtlError>
      ret = USBD_FAIL;
 800b070:	2303      	movs	r3, #3
 800b072:	75fb      	strb	r3, [r7, #23]
      break;
 800b074:	bf00      	nop
  }

  return (uint8_t)ret;
 800b076:	7dfb      	ldrb	r3, [r7, #23]
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3718      	adds	r7, #24
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	460b      	mov	r3, r1
 800b08a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b092:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	32b0      	adds	r2, #176	@ 0xb0
 800b09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d101      	bne.n	800b0aa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	e065      	b.n	800b176 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	32b0      	adds	r2, #176	@ 0xb0
 800b0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b0ba:	78fb      	ldrb	r3, [r7, #3]
 800b0bc:	f003 020f 	and.w	r2, r3, #15
 800b0c0:	6879      	ldr	r1, [r7, #4]
 800b0c2:	4613      	mov	r3, r2
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	4413      	add	r3, r2
 800b0c8:	009b      	lsls	r3, r3, #2
 800b0ca:	440b      	add	r3, r1
 800b0cc:	3314      	adds	r3, #20
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d02f      	beq.n	800b134 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b0d4:	78fb      	ldrb	r3, [r7, #3]
 800b0d6:	f003 020f 	and.w	r2, r3, #15
 800b0da:	6879      	ldr	r1, [r7, #4]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	4413      	add	r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	440b      	add	r3, r1
 800b0e6:	3314      	adds	r3, #20
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	78fb      	ldrb	r3, [r7, #3]
 800b0ec:	f003 010f 	and.w	r1, r3, #15
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	00db      	lsls	r3, r3, #3
 800b0f6:	440b      	add	r3, r1
 800b0f8:	009b      	lsls	r3, r3, #2
 800b0fa:	4403      	add	r3, r0
 800b0fc:	331c      	adds	r3, #28
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	fbb2 f1f3 	udiv	r1, r2, r3
 800b104:	fb01 f303 	mul.w	r3, r1, r3
 800b108:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d112      	bne.n	800b134 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b10e:	78fb      	ldrb	r3, [r7, #3]
 800b110:	f003 020f 	and.w	r2, r3, #15
 800b114:	6879      	ldr	r1, [r7, #4]
 800b116:	4613      	mov	r3, r2
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	440b      	add	r3, r1
 800b120:	3314      	adds	r3, #20
 800b122:	2200      	movs	r2, #0
 800b124:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b126:	78f9      	ldrb	r1, [r7, #3]
 800b128:	2300      	movs	r3, #0
 800b12a:	2200      	movs	r2, #0
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f002 fa24 	bl	800d57a <USBD_LL_Transmit>
 800b132:	e01f      	b.n	800b174 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	2200      	movs	r2, #0
 800b138:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b142:	687a      	ldr	r2, [r7, #4]
 800b144:	33b0      	adds	r3, #176	@ 0xb0
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	4413      	add	r3, r2
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	691b      	ldr	r3, [r3, #16]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d010      	beq.n	800b174 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	33b0      	adds	r3, #176	@ 0xb0
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4413      	add	r3, r2
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	691b      	ldr	r3, [r3, #16]
 800b164:	68ba      	ldr	r2, [r7, #8]
 800b166:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b16a:	68ba      	ldr	r2, [r7, #8]
 800b16c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b170:	78fa      	ldrb	r2, [r7, #3]
 800b172:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b084      	sub	sp, #16
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	460b      	mov	r3, r1
 800b188:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	32b0      	adds	r2, #176	@ 0xb0
 800b194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b198:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	32b0      	adds	r2, #176	@ 0xb0
 800b1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d101      	bne.n	800b1b0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b1ac:	2303      	movs	r3, #3
 800b1ae:	e01a      	b.n	800b1e6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b1b0:	78fb      	ldrb	r3, [r7, #3]
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	6878      	ldr	r0, [r7, #4]
 800b1b6:	f002 fa22 	bl	800d5fe <USBD_LL_GetRxDataSize>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	33b0      	adds	r3, #176	@ 0xb0
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	4413      	add	r3, r2
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	68fa      	ldr	r2, [r7, #12]
 800b1d6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b1e0:	4611      	mov	r1, r2
 800b1e2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3710      	adds	r7, #16
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}

0800b1ee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b1ee:	b580      	push	{r7, lr}
 800b1f0:	b084      	sub	sp, #16
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	32b0      	adds	r2, #176	@ 0xb0
 800b200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b204:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d101      	bne.n	800b210 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b20c:	2303      	movs	r3, #3
 800b20e:	e024      	b.n	800b25a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	33b0      	adds	r3, #176	@ 0xb0
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	4413      	add	r3, r2
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d019      	beq.n	800b258 <USBD_CDC_EP0_RxReady+0x6a>
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b22a:	2bff      	cmp	r3, #255	@ 0xff
 800b22c:	d014      	beq.n	800b258 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	33b0      	adds	r3, #176	@ 0xb0
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	68fa      	ldr	r2, [r7, #12]
 800b242:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b246:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b24e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	22ff      	movs	r2, #255	@ 0xff
 800b254:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
	...

0800b264 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b086      	sub	sp, #24
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b26c:	2182      	movs	r1, #130	@ 0x82
 800b26e:	4818      	ldr	r0, [pc, #96]	@ (800b2d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b270:	f000 fd62 	bl	800bd38 <USBD_GetEpDesc>
 800b274:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b276:	2101      	movs	r1, #1
 800b278:	4815      	ldr	r0, [pc, #84]	@ (800b2d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b27a:	f000 fd5d 	bl	800bd38 <USBD_GetEpDesc>
 800b27e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b280:	2181      	movs	r1, #129	@ 0x81
 800b282:	4813      	ldr	r0, [pc, #76]	@ (800b2d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b284:	f000 fd58 	bl	800bd38 <USBD_GetEpDesc>
 800b288:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d002      	beq.n	800b296 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	2210      	movs	r2, #16
 800b294:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d006      	beq.n	800b2aa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b2a4:	711a      	strb	r2, [r3, #4]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d006      	beq.n	800b2be <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b2b8:	711a      	strb	r2, [r3, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2243      	movs	r2, #67	@ 0x43
 800b2c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2c4:	4b02      	ldr	r3, [pc, #8]	@ (800b2d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3718      	adds	r7, #24
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	2000007c 	.word	0x2000007c

0800b2d4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b086      	sub	sp, #24
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2dc:	2182      	movs	r1, #130	@ 0x82
 800b2de:	4818      	ldr	r0, [pc, #96]	@ (800b340 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2e0:	f000 fd2a 	bl	800bd38 <USBD_GetEpDesc>
 800b2e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2e6:	2101      	movs	r1, #1
 800b2e8:	4815      	ldr	r0, [pc, #84]	@ (800b340 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2ea:	f000 fd25 	bl	800bd38 <USBD_GetEpDesc>
 800b2ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2f0:	2181      	movs	r1, #129	@ 0x81
 800b2f2:	4813      	ldr	r0, [pc, #76]	@ (800b340 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b2f4:	f000 fd20 	bl	800bd38 <USBD_GetEpDesc>
 800b2f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	2210      	movs	r2, #16
 800b304:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d006      	beq.n	800b31a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	2200      	movs	r2, #0
 800b310:	711a      	strb	r2, [r3, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	f042 0202 	orr.w	r2, r2, #2
 800b318:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d006      	beq.n	800b32e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2200      	movs	r2, #0
 800b324:	711a      	strb	r2, [r3, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	f042 0202 	orr.w	r2, r2, #2
 800b32c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2243      	movs	r2, #67	@ 0x43
 800b332:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b334:	4b02      	ldr	r3, [pc, #8]	@ (800b340 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b336:	4618      	mov	r0, r3
 800b338:	3718      	adds	r7, #24
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	2000007c 	.word	0x2000007c

0800b344 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b086      	sub	sp, #24
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b34c:	2182      	movs	r1, #130	@ 0x82
 800b34e:	4818      	ldr	r0, [pc, #96]	@ (800b3b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b350:	f000 fcf2 	bl	800bd38 <USBD_GetEpDesc>
 800b354:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b356:	2101      	movs	r1, #1
 800b358:	4815      	ldr	r0, [pc, #84]	@ (800b3b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b35a:	f000 fced 	bl	800bd38 <USBD_GetEpDesc>
 800b35e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b360:	2181      	movs	r1, #129	@ 0x81
 800b362:	4813      	ldr	r0, [pc, #76]	@ (800b3b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b364:	f000 fce8 	bl	800bd38 <USBD_GetEpDesc>
 800b368:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d002      	beq.n	800b376 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	2210      	movs	r2, #16
 800b374:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d006      	beq.n	800b38a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	2200      	movs	r2, #0
 800b380:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b384:	711a      	strb	r2, [r3, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d006      	beq.n	800b39e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2200      	movs	r2, #0
 800b394:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b398:	711a      	strb	r2, [r3, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2243      	movs	r2, #67	@ 0x43
 800b3a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b3a4:	4b02      	ldr	r3, [pc, #8]	@ (800b3b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3718      	adds	r7, #24
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	2000007c 	.word	0x2000007c

0800b3b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	220a      	movs	r2, #10
 800b3c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b3c2:	4b03      	ldr	r3, [pc, #12]	@ (800b3d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr
 800b3d0:	20000038 	.word	0x20000038

0800b3d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d101      	bne.n	800b3e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	e009      	b.n	800b3fc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	33b0      	adds	r3, #176	@ 0xb0
 800b3f2:	009b      	lsls	r3, r3, #2
 800b3f4:	4413      	add	r3, r2
 800b3f6:	683a      	ldr	r2, [r7, #0]
 800b3f8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b408:	b480      	push	{r7}
 800b40a:	b087      	sub	sp, #28
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	32b0      	adds	r2, #176	@ 0xb0
 800b41e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b422:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d101      	bne.n	800b42e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b42a:	2303      	movs	r3, #3
 800b42c:	e008      	b.n	800b440 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	68ba      	ldr	r2, [r7, #8]
 800b432:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	371c      	adds	r7, #28
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	32b0      	adds	r2, #176	@ 0xb0
 800b460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b464:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d101      	bne.n	800b470 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b46c:	2303      	movs	r3, #3
 800b46e:	e004      	b.n	800b47a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	683a      	ldr	r2, [r7, #0]
 800b474:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b478:	2300      	movs	r3, #0
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3714      	adds	r7, #20
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
	...

0800b488 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	32b0      	adds	r2, #176	@ 0xb0
 800b49a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b49e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d101      	bne.n	800b4ae <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b4aa:	2303      	movs	r3, #3
 800b4ac:	e025      	b.n	800b4fa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d11f      	bne.n	800b4f8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b4c0:	4b10      	ldr	r3, [pc, #64]	@ (800b504 <USBD_CDC_TransmitPacket+0x7c>)
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	f003 020f 	and.w	r2, r3, #15
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	009b      	lsls	r3, r3, #2
 800b4d4:	4413      	add	r3, r2
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	4403      	add	r3, r0
 800b4da:	3314      	adds	r3, #20
 800b4dc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b4de:	4b09      	ldr	r3, [pc, #36]	@ (800b504 <USBD_CDC_TransmitPacket+0x7c>)
 800b4e0:	7819      	ldrb	r1, [r3, #0]
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f002 f843 	bl	800d57a <USBD_LL_Transmit>

    ret = USBD_OK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3710      	adds	r7, #16
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	200000bf 	.word	0x200000bf

0800b508 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	32b0      	adds	r2, #176	@ 0xb0
 800b51a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b51e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	32b0      	adds	r2, #176	@ 0xb0
 800b52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d101      	bne.n	800b536 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b532:	2303      	movs	r3, #3
 800b534:	e018      	b.n	800b568 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	7c1b      	ldrb	r3, [r3, #16]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d10a      	bne.n	800b554 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b53e:	4b0c      	ldr	r3, [pc, #48]	@ (800b570 <USBD_CDC_ReceivePacket+0x68>)
 800b540:	7819      	ldrb	r1, [r3, #0]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b548:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f002 f835 	bl	800d5bc <USBD_LL_PrepareReceive>
 800b552:	e008      	b.n	800b566 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b554:	4b06      	ldr	r3, [pc, #24]	@ (800b570 <USBD_CDC_ReceivePacket+0x68>)
 800b556:	7819      	ldrb	r1, [r3, #0]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b55e:	2340      	movs	r3, #64	@ 0x40
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f002 f82b 	bl	800d5bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3710      	adds	r7, #16
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	200000c0 	.word	0x200000c0

0800b574 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b086      	sub	sp, #24
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	4613      	mov	r3, r2
 800b580:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d101      	bne.n	800b58c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b588:	2303      	movs	r3, #3
 800b58a:	e01f      	b.n	800b5cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2200      	movs	r2, #0
 800b598:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d003      	beq.n	800b5b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	68ba      	ldr	r2, [r7, #8]
 800b5ae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	79fa      	ldrb	r2, [r7, #7]
 800b5be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	f001 fea5 	bl	800d310 <USBD_LL_Init>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b5ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3718      	adds	r7, #24
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d101      	bne.n	800b5ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5e8:	2303      	movs	r3, #3
 800b5ea:	e025      	b.n	800b638 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	32ae      	adds	r2, #174	@ 0xae
 800b5fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00f      	beq.n	800b628 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	32ae      	adds	r2, #174	@ 0xae
 800b612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b618:	f107 020e 	add.w	r2, r7, #14
 800b61c:	4610      	mov	r0, r2
 800b61e:	4798      	blx	r3
 800b620:	4602      	mov	r2, r0
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b62e:	1c5a      	adds	r2, r3, #1
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b636:	2300      	movs	r3, #0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3710      	adds	r7, #16
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f001 fead 	bl	800d3a8 <USBD_LL_Start>
 800b64e:	4603      	mov	r3, r0
}
 800b650:	4618      	mov	r0, r3
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b660:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b662:	4618      	mov	r0, r3
 800b664:	370c      	adds	r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr

0800b66e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b084      	sub	sp, #16
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
 800b676:	460b      	mov	r3, r1
 800b678:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b67a:	2300      	movs	r3, #0
 800b67c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b684:	2b00      	cmp	r3, #0
 800b686:	d009      	beq.n	800b69c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	78fa      	ldrb	r2, [r7, #3]
 800b692:	4611      	mov	r1, r2
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	4798      	blx	r3
 800b698:	4603      	mov	r3, r0
 800b69a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b084      	sub	sp, #16
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	78fa      	ldrb	r2, [r7, #3]
 800b6c0:	4611      	mov	r1, r2
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	4798      	blx	r3
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d001      	beq.n	800b6d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b6cc:	2303      	movs	r3, #3
 800b6ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b084      	sub	sp, #16
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
 800b6e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6ea:	6839      	ldr	r1, [r7, #0]
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f001 f922 	bl	800c936 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b700:	461a      	mov	r2, r3
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b70e:	f003 031f 	and.w	r3, r3, #31
 800b712:	2b02      	cmp	r3, #2
 800b714:	d01a      	beq.n	800b74c <USBD_LL_SetupStage+0x72>
 800b716:	2b02      	cmp	r3, #2
 800b718:	d822      	bhi.n	800b760 <USBD_LL_SetupStage+0x86>
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d002      	beq.n	800b724 <USBD_LL_SetupStage+0x4a>
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d00a      	beq.n	800b738 <USBD_LL_SetupStage+0x5e>
 800b722:	e01d      	b.n	800b760 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b72a:	4619      	mov	r1, r3
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 fb77 	bl	800be20 <USBD_StdDevReq>
 800b732:	4603      	mov	r3, r0
 800b734:	73fb      	strb	r3, [r7, #15]
      break;
 800b736:	e020      	b.n	800b77a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b73e:	4619      	mov	r1, r3
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 fbdf 	bl	800bf04 <USBD_StdItfReq>
 800b746:	4603      	mov	r3, r0
 800b748:	73fb      	strb	r3, [r7, #15]
      break;
 800b74a:	e016      	b.n	800b77a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b752:	4619      	mov	r1, r3
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 fc41 	bl	800bfdc <USBD_StdEPReq>
 800b75a:	4603      	mov	r3, r0
 800b75c:	73fb      	strb	r3, [r7, #15]
      break;
 800b75e:	e00c      	b.n	800b77a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b766:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	4619      	mov	r1, r3
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f001 fe7a 	bl	800d468 <USBD_LL_StallEP>
 800b774:	4603      	mov	r3, r0
 800b776:	73fb      	strb	r3, [r7, #15]
      break;
 800b778:	bf00      	nop
  }

  return ret;
 800b77a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	460b      	mov	r3, r1
 800b78e:	607a      	str	r2, [r7, #4]
 800b790:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b792:	2300      	movs	r3, #0
 800b794:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800b796:	7afb      	ldrb	r3, [r7, #11]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d177      	bne.n	800b88c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b7a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b7aa:	2b03      	cmp	r3, #3
 800b7ac:	f040 80a1 	bne.w	800b8f2 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	693a      	ldr	r2, [r7, #16]
 800b7b6:	8992      	ldrh	r2, [r2, #12]
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d91c      	bls.n	800b7f6 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	693a      	ldr	r2, [r7, #16]
 800b7c2:	8992      	ldrh	r2, [r2, #12]
 800b7c4:	1a9a      	subs	r2, r3, r2
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	691b      	ldr	r3, [r3, #16]
 800b7ce:	693a      	ldr	r2, [r7, #16]
 800b7d0:	8992      	ldrh	r2, [r2, #12]
 800b7d2:	441a      	add	r2, r3
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	6919      	ldr	r1, [r3, #16]
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	899b      	ldrh	r3, [r3, #12]
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	bf38      	it	cc
 800b7ea:	4613      	movcc	r3, r2
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f001 f9a8 	bl	800cb44 <USBD_CtlContinueRx>
 800b7f4:	e07d      	b.n	800b8f2 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b7fc:	f003 031f 	and.w	r3, r3, #31
 800b800:	2b02      	cmp	r3, #2
 800b802:	d014      	beq.n	800b82e <USBD_LL_DataOutStage+0xaa>
 800b804:	2b02      	cmp	r3, #2
 800b806:	d81d      	bhi.n	800b844 <USBD_LL_DataOutStage+0xc0>
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d002      	beq.n	800b812 <USBD_LL_DataOutStage+0x8e>
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d003      	beq.n	800b818 <USBD_LL_DataOutStage+0x94>
 800b810:	e018      	b.n	800b844 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b812:	2300      	movs	r3, #0
 800b814:	75bb      	strb	r3, [r7, #22]
            break;
 800b816:	e018      	b.n	800b84a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	4619      	mov	r1, r3
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f000 fa6e 	bl	800bd04 <USBD_CoreFindIF>
 800b828:	4603      	mov	r3, r0
 800b82a:	75bb      	strb	r3, [r7, #22]
            break;
 800b82c:	e00d      	b.n	800b84a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b834:	b2db      	uxtb	r3, r3
 800b836:	4619      	mov	r1, r3
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f000 fa70 	bl	800bd1e <USBD_CoreFindEP>
 800b83e:	4603      	mov	r3, r0
 800b840:	75bb      	strb	r3, [r7, #22]
            break;
 800b842:	e002      	b.n	800b84a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b844:	2300      	movs	r3, #0
 800b846:	75bb      	strb	r3, [r7, #22]
            break;
 800b848:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b84a:	7dbb      	ldrb	r3, [r7, #22]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d119      	bne.n	800b884 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b856:	b2db      	uxtb	r3, r3
 800b858:	2b03      	cmp	r3, #3
 800b85a:	d113      	bne.n	800b884 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b85c:	7dba      	ldrb	r2, [r7, #22]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	32ae      	adds	r2, #174	@ 0xae
 800b862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b866:	691b      	ldr	r3, [r3, #16]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d00b      	beq.n	800b884 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800b86c:	7dba      	ldrb	r2, [r7, #22]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b874:	7dba      	ldrb	r2, [r7, #22]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	32ae      	adds	r2, #174	@ 0xae
 800b87a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b87e:	691b      	ldr	r3, [r3, #16]
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	f001 f96e 	bl	800cb66 <USBD_CtlSendStatus>
 800b88a:	e032      	b.n	800b8f2 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b88c:	7afb      	ldrb	r3, [r7, #11]
 800b88e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b892:	b2db      	uxtb	r3, r3
 800b894:	4619      	mov	r1, r3
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f000 fa41 	bl	800bd1e <USBD_CoreFindEP>
 800b89c:	4603      	mov	r3, r0
 800b89e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8a0:	7dbb      	ldrb	r3, [r7, #22]
 800b8a2:	2bff      	cmp	r3, #255	@ 0xff
 800b8a4:	d025      	beq.n	800b8f2 <USBD_LL_DataOutStage+0x16e>
 800b8a6:	7dbb      	ldrb	r3, [r7, #22]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d122      	bne.n	800b8f2 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	2b03      	cmp	r3, #3
 800b8b6:	d117      	bne.n	800b8e8 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b8b8:	7dba      	ldrb	r2, [r7, #22]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	32ae      	adds	r2, #174	@ 0xae
 800b8be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8c2:	699b      	ldr	r3, [r3, #24]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00f      	beq.n	800b8e8 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800b8c8:	7dba      	ldrb	r2, [r7, #22]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b8d0:	7dba      	ldrb	r2, [r7, #22]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	32ae      	adds	r2, #174	@ 0xae
 800b8d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8da:	699b      	ldr	r3, [r3, #24]
 800b8dc:	7afa      	ldrb	r2, [r7, #11]
 800b8de:	4611      	mov	r1, r2
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	4798      	blx	r3
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b8e8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d001      	beq.n	800b8f2 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800b8ee:	7dfb      	ldrb	r3, [r7, #23]
 800b8f0:	e000      	b.n	800b8f4 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800b8f2:	2300      	movs	r3, #0
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3718      	adds	r7, #24
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b086      	sub	sp, #24
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	460b      	mov	r3, r1
 800b906:	607a      	str	r2, [r7, #4]
 800b908:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800b90a:	7afb      	ldrb	r3, [r7, #11]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d178      	bne.n	800ba02 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	3314      	adds	r3, #20
 800b914:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	d163      	bne.n	800b9e8 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	693a      	ldr	r2, [r7, #16]
 800b926:	8992      	ldrh	r2, [r2, #12]
 800b928:	4293      	cmp	r3, r2
 800b92a:	d91c      	bls.n	800b966 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	693a      	ldr	r2, [r7, #16]
 800b932:	8992      	ldrh	r2, [r2, #12]
 800b934:	1a9a      	subs	r2, r3, r2
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	691b      	ldr	r3, [r3, #16]
 800b93e:	693a      	ldr	r2, [r7, #16]
 800b940:	8992      	ldrh	r2, [r2, #12]
 800b942:	441a      	add	r2, r3
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	6919      	ldr	r1, [r3, #16]
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	461a      	mov	r2, r3
 800b952:	68f8      	ldr	r0, [r7, #12]
 800b954:	f001 f8c4 	bl	800cae0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b958:	2300      	movs	r3, #0
 800b95a:	2200      	movs	r2, #0
 800b95c:	2100      	movs	r1, #0
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f001 fe2c 	bl	800d5bc <USBD_LL_PrepareReceive>
 800b964:	e040      	b.n	800b9e8 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	899b      	ldrh	r3, [r3, #12]
 800b96a:	461a      	mov	r2, r3
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	429a      	cmp	r2, r3
 800b972:	d11c      	bne.n	800b9ae <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	693a      	ldr	r2, [r7, #16]
 800b97a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d316      	bcc.n	800b9ae <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d20f      	bcs.n	800b9ae <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b98e:	2200      	movs	r2, #0
 800b990:	2100      	movs	r1, #0
 800b992:	68f8      	ldr	r0, [r7, #12]
 800b994:	f001 f8a4 	bl	800cae0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	2100      	movs	r1, #0
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	f001 fe08 	bl	800d5bc <USBD_LL_PrepareReceive>
 800b9ac:	e01c      	b.n	800b9e8 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	2b03      	cmp	r3, #3
 800b9b8:	d10f      	bne.n	800b9da <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d009      	beq.n	800b9da <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	68f8      	ldr	r0, [r7, #12]
 800b9d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9da:	2180      	movs	r1, #128	@ 0x80
 800b9dc:	68f8      	ldr	r0, [r7, #12]
 800b9de:	f001 fd43 	bl	800d468 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b9e2:	68f8      	ldr	r0, [r7, #12]
 800b9e4:	f001 f8d2 	bl	800cb8c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d03a      	beq.n	800ba68 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f7ff fe30 	bl	800b658 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ba00:	e032      	b.n	800ba68 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ba02:	7afb      	ldrb	r3, [r7, #11]
 800ba04:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f000 f986 	bl	800bd1e <USBD_CoreFindEP>
 800ba12:	4603      	mov	r3, r0
 800ba14:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba16:	7dfb      	ldrb	r3, [r7, #23]
 800ba18:	2bff      	cmp	r3, #255	@ 0xff
 800ba1a:	d025      	beq.n	800ba68 <USBD_LL_DataInStage+0x16c>
 800ba1c:	7dfb      	ldrb	r3, [r7, #23]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d122      	bne.n	800ba68 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba28:	b2db      	uxtb	r3, r3
 800ba2a:	2b03      	cmp	r3, #3
 800ba2c:	d11c      	bne.n	800ba68 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ba2e:	7dfa      	ldrb	r2, [r7, #23]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	32ae      	adds	r2, #174	@ 0xae
 800ba34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba38:	695b      	ldr	r3, [r3, #20]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d014      	beq.n	800ba68 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800ba3e:	7dfa      	ldrb	r2, [r7, #23]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ba46:	7dfa      	ldrb	r2, [r7, #23]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	32ae      	adds	r2, #174	@ 0xae
 800ba4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba50:	695b      	ldr	r3, [r3, #20]
 800ba52:	7afa      	ldrb	r2, [r7, #11]
 800ba54:	4611      	mov	r1, r2
 800ba56:	68f8      	ldr	r0, [r7, #12]
 800ba58:	4798      	blx	r3
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ba5e:	7dbb      	ldrb	r3, [r7, #22]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d001      	beq.n	800ba68 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800ba64:	7dbb      	ldrb	r3, [r7, #22]
 800ba66:	e000      	b.n	800ba6a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3718      	adds	r7, #24
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b084      	sub	sp, #16
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2201      	movs	r2, #1
 800ba82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2200      	movs	r2, #0
 800ba92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d014      	beq.n	800bad8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d00e      	beq.n	800bad8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bac0:	685b      	ldr	r3, [r3, #4]
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	6852      	ldr	r2, [r2, #4]
 800bac6:	b2d2      	uxtb	r2, r2
 800bac8:	4611      	mov	r1, r2
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	4798      	blx	r3
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d001      	beq.n	800bad8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bad4:	2303      	movs	r3, #3
 800bad6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bad8:	2340      	movs	r3, #64	@ 0x40
 800bada:	2200      	movs	r2, #0
 800badc:	2100      	movs	r1, #0
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f001 fc7d 	bl	800d3de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2240      	movs	r2, #64	@ 0x40
 800baf0:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800baf4:	2340      	movs	r3, #64	@ 0x40
 800baf6:	2200      	movs	r2, #0
 800baf8:	2180      	movs	r1, #128	@ 0x80
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f001 fc6f 	bl	800d3de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2240      	movs	r2, #64	@ 0x40
 800bb0c:	841a      	strh	r2, [r3, #32]

  return ret;
 800bb0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	460b      	mov	r3, r1
 800bb22:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	78fa      	ldrb	r2, [r7, #3]
 800bb28:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bb2a:	2300      	movs	r3, #0
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	2b04      	cmp	r3, #4
 800bb4a:	d006      	beq.n	800bb5a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb52:	b2da      	uxtb	r2, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	2204      	movs	r2, #4
 800bb5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bb62:	2300      	movs	r3, #0
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	2b04      	cmp	r3, #4
 800bb82:	d106      	bne.n	800bb92 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bb92:	2300      	movs	r3, #0
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	370c      	adds	r7, #12
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	2b03      	cmp	r3, #3
 800bbb2:	d110      	bne.n	800bbd6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d00b      	beq.n	800bbd6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbc4:	69db      	ldr	r3, [r3, #28]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d005      	beq.n	800bbd6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbd0:	69db      	ldr	r3, [r3, #28]
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bbd6:	2300      	movs	r3, #0
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3708      	adds	r7, #8
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	460b      	mov	r3, r1
 800bbea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	32ae      	adds	r2, #174	@ 0xae
 800bbf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d101      	bne.n	800bc02 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbfe:	2303      	movs	r3, #3
 800bc00:	e01c      	b.n	800bc3c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	2b03      	cmp	r3, #3
 800bc0c:	d115      	bne.n	800bc3a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	32ae      	adds	r2, #174	@ 0xae
 800bc18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc1c:	6a1b      	ldr	r3, [r3, #32]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d00b      	beq.n	800bc3a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	32ae      	adds	r2, #174	@ 0xae
 800bc2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc30:	6a1b      	ldr	r3, [r3, #32]
 800bc32:	78fa      	ldrb	r2, [r7, #3]
 800bc34:	4611      	mov	r1, r2
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	460b      	mov	r3, r1
 800bc4e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	32ae      	adds	r2, #174	@ 0xae
 800bc5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d101      	bne.n	800bc66 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc62:	2303      	movs	r3, #3
 800bc64:	e01c      	b.n	800bca0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	2b03      	cmp	r3, #3
 800bc70:	d115      	bne.n	800bc9e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	32ae      	adds	r2, #174	@ 0xae
 800bc7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d00b      	beq.n	800bc9e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	32ae      	adds	r2, #174	@ 0xae
 800bc90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc96:	78fa      	ldrb	r2, [r7, #3]
 800bc98:	4611      	mov	r1, r2
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc9e:	2300      	movs	r3, #0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3708      	adds	r7, #8
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	370c      	adds	r7, #12
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr

0800bcbe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b084      	sub	sp, #16
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2201      	movs	r2, #1
 800bcce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00e      	beq.n	800bcfa <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	6852      	ldr	r2, [r2, #4]
 800bce8:	b2d2      	uxtb	r2, r2
 800bcea:	4611      	mov	r1, r2
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	4798      	blx	r3
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d001      	beq.n	800bcfa <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bcf6:	2303      	movs	r3, #3
 800bcf8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bcfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3710      	adds	r7, #16
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	460b      	mov	r3, r1
 800bd0e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd10:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	370c      	adds	r7, #12
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr

0800bd1e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bd1e:	b480      	push	{r7}
 800bd20:	b083      	sub	sp, #12
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
 800bd26:	460b      	mov	r3, r1
 800bd28:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bd2a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	370c      	adds	r7, #12
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b086      	sub	sp, #24
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	460b      	mov	r3, r1
 800bd42:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	885b      	ldrh	r3, [r3, #2]
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	7812      	ldrb	r2, [r2, #0]
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d91f      	bls.n	800bd9e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd64:	e013      	b.n	800bd8e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd66:	f107 030a 	add.w	r3, r7, #10
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	6978      	ldr	r0, [r7, #20]
 800bd6e:	f000 f81b 	bl	800bda8 <USBD_GetNextDesc>
 800bd72:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	785b      	ldrb	r3, [r3, #1]
 800bd78:	2b05      	cmp	r3, #5
 800bd7a:	d108      	bne.n	800bd8e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	789b      	ldrb	r3, [r3, #2]
 800bd84:	78fa      	ldrb	r2, [r7, #3]
 800bd86:	429a      	cmp	r2, r3
 800bd88:	d008      	beq.n	800bd9c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	885b      	ldrh	r3, [r3, #2]
 800bd92:	b29a      	uxth	r2, r3
 800bd94:	897b      	ldrh	r3, [r7, #10]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d8e5      	bhi.n	800bd66 <USBD_GetEpDesc+0x2e>
 800bd9a:	e000      	b.n	800bd9e <USBD_GetEpDesc+0x66>
          break;
 800bd9c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd9e:	693b      	ldr	r3, [r7, #16]
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3718      	adds	r7, #24
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bda8:	b480      	push	{r7}
 800bdaa:	b085      	sub	sp, #20
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	881b      	ldrh	r3, [r3, #0]
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	7812      	ldrb	r2, [r2, #0]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	b29a      	uxth	r2, r3
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	461a      	mov	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4413      	add	r3, r2
 800bdd0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3714      	adds	r7, #20
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b087      	sub	sp, #28
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bdfe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800be02:	021b      	lsls	r3, r3, #8
 800be04:	b21a      	sxth	r2, r3
 800be06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	b21b      	sxth	r3, r3
 800be0e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be10:	89fb      	ldrh	r3, [r7, #14]
}
 800be12:	4618      	mov	r0, r3
 800be14:	371c      	adds	r7, #28
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr
	...

0800be20 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be2a:	2300      	movs	r3, #0
 800be2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be36:	2b40      	cmp	r3, #64	@ 0x40
 800be38:	d005      	beq.n	800be46 <USBD_StdDevReq+0x26>
 800be3a:	2b40      	cmp	r3, #64	@ 0x40
 800be3c:	d857      	bhi.n	800beee <USBD_StdDevReq+0xce>
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00f      	beq.n	800be62 <USBD_StdDevReq+0x42>
 800be42:	2b20      	cmp	r3, #32
 800be44:	d153      	bne.n	800beee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	32ae      	adds	r2, #174	@ 0xae
 800be50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	6839      	ldr	r1, [r7, #0]
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	4798      	blx	r3
 800be5c:	4603      	mov	r3, r0
 800be5e:	73fb      	strb	r3, [r7, #15]
      break;
 800be60:	e04a      	b.n	800bef8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	785b      	ldrb	r3, [r3, #1]
 800be66:	2b09      	cmp	r3, #9
 800be68:	d83b      	bhi.n	800bee2 <USBD_StdDevReq+0xc2>
 800be6a:	a201      	add	r2, pc, #4	@ (adr r2, 800be70 <USBD_StdDevReq+0x50>)
 800be6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be70:	0800bec5 	.word	0x0800bec5
 800be74:	0800bed9 	.word	0x0800bed9
 800be78:	0800bee3 	.word	0x0800bee3
 800be7c:	0800becf 	.word	0x0800becf
 800be80:	0800bee3 	.word	0x0800bee3
 800be84:	0800bea3 	.word	0x0800bea3
 800be88:	0800be99 	.word	0x0800be99
 800be8c:	0800bee3 	.word	0x0800bee3
 800be90:	0800bebb 	.word	0x0800bebb
 800be94:	0800bead 	.word	0x0800bead
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be98:	6839      	ldr	r1, [r7, #0]
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 fa3e 	bl	800c31c <USBD_GetDescriptor>
          break;
 800bea0:	e024      	b.n	800beec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bea2:	6839      	ldr	r1, [r7, #0]
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f000 fba3 	bl	800c5f0 <USBD_SetAddress>
          break;
 800beaa:	e01f      	b.n	800beec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800beac:	6839      	ldr	r1, [r7, #0]
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	f000 fbe2 	bl	800c678 <USBD_SetConfig>
 800beb4:	4603      	mov	r3, r0
 800beb6:	73fb      	strb	r3, [r7, #15]
          break;
 800beb8:	e018      	b.n	800beec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800beba:	6839      	ldr	r1, [r7, #0]
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f000 fc85 	bl	800c7cc <USBD_GetConfig>
          break;
 800bec2:	e013      	b.n	800beec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bec4:	6839      	ldr	r1, [r7, #0]
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fcb6 	bl	800c838 <USBD_GetStatus>
          break;
 800becc:	e00e      	b.n	800beec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bece:	6839      	ldr	r1, [r7, #0]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f000 fce5 	bl	800c8a0 <USBD_SetFeature>
          break;
 800bed6:	e009      	b.n	800beec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bed8:	6839      	ldr	r1, [r7, #0]
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 fd09 	bl	800c8f2 <USBD_ClrFeature>
          break;
 800bee0:	e004      	b.n	800beec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bee2:	6839      	ldr	r1, [r7, #0]
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 fd60 	bl	800c9aa <USBD_CtlError>
          break;
 800beea:	bf00      	nop
      }
      break;
 800beec:	e004      	b.n	800bef8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800beee:	6839      	ldr	r1, [r7, #0]
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 fd5a 	bl	800c9aa <USBD_CtlError>
      break;
 800bef6:	bf00      	nop
  }

  return ret;
 800bef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3710      	adds	r7, #16
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop

0800bf04 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf1a:	2b40      	cmp	r3, #64	@ 0x40
 800bf1c:	d005      	beq.n	800bf2a <USBD_StdItfReq+0x26>
 800bf1e:	2b40      	cmp	r3, #64	@ 0x40
 800bf20:	d852      	bhi.n	800bfc8 <USBD_StdItfReq+0xc4>
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d001      	beq.n	800bf2a <USBD_StdItfReq+0x26>
 800bf26:	2b20      	cmp	r3, #32
 800bf28:	d14e      	bne.n	800bfc8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	3b01      	subs	r3, #1
 800bf34:	2b02      	cmp	r3, #2
 800bf36:	d840      	bhi.n	800bfba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	889b      	ldrh	r3, [r3, #4]
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d836      	bhi.n	800bfb0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	889b      	ldrh	r3, [r3, #4]
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	4619      	mov	r1, r3
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7ff feda 	bl	800bd04 <USBD_CoreFindIF>
 800bf50:	4603      	mov	r3, r0
 800bf52:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf54:	7bbb      	ldrb	r3, [r7, #14]
 800bf56:	2bff      	cmp	r3, #255	@ 0xff
 800bf58:	d01d      	beq.n	800bf96 <USBD_StdItfReq+0x92>
 800bf5a:	7bbb      	ldrb	r3, [r7, #14]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d11a      	bne.n	800bf96 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf60:	7bba      	ldrb	r2, [r7, #14]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	32ae      	adds	r2, #174	@ 0xae
 800bf66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf6a:	689b      	ldr	r3, [r3, #8]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00f      	beq.n	800bf90 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf70:	7bba      	ldrb	r2, [r7, #14]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf78:	7bba      	ldrb	r2, [r7, #14]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	32ae      	adds	r2, #174	@ 0xae
 800bf7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	6839      	ldr	r1, [r7, #0]
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	4798      	blx	r3
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf8e:	e004      	b.n	800bf9a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf90:	2303      	movs	r3, #3
 800bf92:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf94:	e001      	b.n	800bf9a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf96:	2303      	movs	r3, #3
 800bf98:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	88db      	ldrh	r3, [r3, #6]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d110      	bne.n	800bfc4 <USBD_StdItfReq+0xc0>
 800bfa2:	7bfb      	ldrb	r3, [r7, #15]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d10d      	bne.n	800bfc4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 fddc 	bl	800cb66 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bfae:	e009      	b.n	800bfc4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bfb0:	6839      	ldr	r1, [r7, #0]
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 fcf9 	bl	800c9aa <USBD_CtlError>
          break;
 800bfb8:	e004      	b.n	800bfc4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bfba:	6839      	ldr	r1, [r7, #0]
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f000 fcf4 	bl	800c9aa <USBD_CtlError>
          break;
 800bfc2:	e000      	b.n	800bfc6 <USBD_StdItfReq+0xc2>
          break;
 800bfc4:	bf00      	nop
      }
      break;
 800bfc6:	e004      	b.n	800bfd2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bfc8:	6839      	ldr	r1, [r7, #0]
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 fced 	bl	800c9aa <USBD_CtlError>
      break;
 800bfd0:	bf00      	nop
  }

  return ret;
 800bfd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3710      	adds	r7, #16
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	889b      	ldrh	r3, [r3, #4]
 800bfee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bff8:	2b40      	cmp	r3, #64	@ 0x40
 800bffa:	d007      	beq.n	800c00c <USBD_StdEPReq+0x30>
 800bffc:	2b40      	cmp	r3, #64	@ 0x40
 800bffe:	f200 8181 	bhi.w	800c304 <USBD_StdEPReq+0x328>
 800c002:	2b00      	cmp	r3, #0
 800c004:	d02a      	beq.n	800c05c <USBD_StdEPReq+0x80>
 800c006:	2b20      	cmp	r3, #32
 800c008:	f040 817c 	bne.w	800c304 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c00c:	7bbb      	ldrb	r3, [r7, #14]
 800c00e:	4619      	mov	r1, r3
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f7ff fe84 	bl	800bd1e <USBD_CoreFindEP>
 800c016:	4603      	mov	r3, r0
 800c018:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c01a:	7b7b      	ldrb	r3, [r7, #13]
 800c01c:	2bff      	cmp	r3, #255	@ 0xff
 800c01e:	f000 8176 	beq.w	800c30e <USBD_StdEPReq+0x332>
 800c022:	7b7b      	ldrb	r3, [r7, #13]
 800c024:	2b00      	cmp	r3, #0
 800c026:	f040 8172 	bne.w	800c30e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800c02a:	7b7a      	ldrb	r2, [r7, #13]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c032:	7b7a      	ldrb	r2, [r7, #13]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	32ae      	adds	r2, #174	@ 0xae
 800c038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c03c:	689b      	ldr	r3, [r3, #8]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f000 8165 	beq.w	800c30e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c044:	7b7a      	ldrb	r2, [r7, #13]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	32ae      	adds	r2, #174	@ 0xae
 800c04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c04e:	689b      	ldr	r3, [r3, #8]
 800c050:	6839      	ldr	r1, [r7, #0]
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	4798      	blx	r3
 800c056:	4603      	mov	r3, r0
 800c058:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c05a:	e158      	b.n	800c30e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	785b      	ldrb	r3, [r3, #1]
 800c060:	2b03      	cmp	r3, #3
 800c062:	d008      	beq.n	800c076 <USBD_StdEPReq+0x9a>
 800c064:	2b03      	cmp	r3, #3
 800c066:	f300 8147 	bgt.w	800c2f8 <USBD_StdEPReq+0x31c>
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	f000 809b 	beq.w	800c1a6 <USBD_StdEPReq+0x1ca>
 800c070:	2b01      	cmp	r3, #1
 800c072:	d03c      	beq.n	800c0ee <USBD_StdEPReq+0x112>
 800c074:	e140      	b.n	800c2f8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	2b02      	cmp	r3, #2
 800c080:	d002      	beq.n	800c088 <USBD_StdEPReq+0xac>
 800c082:	2b03      	cmp	r3, #3
 800c084:	d016      	beq.n	800c0b4 <USBD_StdEPReq+0xd8>
 800c086:	e02c      	b.n	800c0e2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c088:	7bbb      	ldrb	r3, [r7, #14]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d00d      	beq.n	800c0aa <USBD_StdEPReq+0xce>
 800c08e:	7bbb      	ldrb	r3, [r7, #14]
 800c090:	2b80      	cmp	r3, #128	@ 0x80
 800c092:	d00a      	beq.n	800c0aa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c094:	7bbb      	ldrb	r3, [r7, #14]
 800c096:	4619      	mov	r1, r3
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f001 f9e5 	bl	800d468 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c09e:	2180      	movs	r1, #128	@ 0x80
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f001 f9e1 	bl	800d468 <USBD_LL_StallEP>
 800c0a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0a8:	e020      	b.n	800c0ec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c0aa:	6839      	ldr	r1, [r7, #0]
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 fc7c 	bl	800c9aa <USBD_CtlError>
              break;
 800c0b2:	e01b      	b.n	800c0ec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	885b      	ldrh	r3, [r3, #2]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d10e      	bne.n	800c0da <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c0bc:	7bbb      	ldrb	r3, [r7, #14]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d00b      	beq.n	800c0da <USBD_StdEPReq+0xfe>
 800c0c2:	7bbb      	ldrb	r3, [r7, #14]
 800c0c4:	2b80      	cmp	r3, #128	@ 0x80
 800c0c6:	d008      	beq.n	800c0da <USBD_StdEPReq+0xfe>
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	88db      	ldrh	r3, [r3, #6]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d104      	bne.n	800c0da <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0d0:	7bbb      	ldrb	r3, [r7, #14]
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f001 f9c7 	bl	800d468 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 fd43 	bl	800cb66 <USBD_CtlSendStatus>

              break;
 800c0e0:	e004      	b.n	800c0ec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c0e2:	6839      	ldr	r1, [r7, #0]
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 fc60 	bl	800c9aa <USBD_CtlError>
              break;
 800c0ea:	bf00      	nop
          }
          break;
 800c0ec:	e109      	b.n	800c302 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0f4:	b2db      	uxtb	r3, r3
 800c0f6:	2b02      	cmp	r3, #2
 800c0f8:	d002      	beq.n	800c100 <USBD_StdEPReq+0x124>
 800c0fa:	2b03      	cmp	r3, #3
 800c0fc:	d016      	beq.n	800c12c <USBD_StdEPReq+0x150>
 800c0fe:	e04b      	b.n	800c198 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c100:	7bbb      	ldrb	r3, [r7, #14]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00d      	beq.n	800c122 <USBD_StdEPReq+0x146>
 800c106:	7bbb      	ldrb	r3, [r7, #14]
 800c108:	2b80      	cmp	r3, #128	@ 0x80
 800c10a:	d00a      	beq.n	800c122 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c10c:	7bbb      	ldrb	r3, [r7, #14]
 800c10e:	4619      	mov	r1, r3
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f001 f9a9 	bl	800d468 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c116:	2180      	movs	r1, #128	@ 0x80
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f001 f9a5 	bl	800d468 <USBD_LL_StallEP>
 800c11e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c120:	e040      	b.n	800c1a4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c122:	6839      	ldr	r1, [r7, #0]
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f000 fc40 	bl	800c9aa <USBD_CtlError>
              break;
 800c12a:	e03b      	b.n	800c1a4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	885b      	ldrh	r3, [r3, #2]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d136      	bne.n	800c1a2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c134:	7bbb      	ldrb	r3, [r7, #14]
 800c136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d004      	beq.n	800c148 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c13e:	7bbb      	ldrb	r3, [r7, #14]
 800c140:	4619      	mov	r1, r3
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f001 f9af 	bl	800d4a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 fd0c 	bl	800cb66 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c14e:	7bbb      	ldrb	r3, [r7, #14]
 800c150:	4619      	mov	r1, r3
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f7ff fde3 	bl	800bd1e <USBD_CoreFindEP>
 800c158:	4603      	mov	r3, r0
 800c15a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c15c:	7b7b      	ldrb	r3, [r7, #13]
 800c15e:	2bff      	cmp	r3, #255	@ 0xff
 800c160:	d01f      	beq.n	800c1a2 <USBD_StdEPReq+0x1c6>
 800c162:	7b7b      	ldrb	r3, [r7, #13]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d11c      	bne.n	800c1a2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c168:	7b7a      	ldrb	r2, [r7, #13]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c170:	7b7a      	ldrb	r2, [r7, #13]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	32ae      	adds	r2, #174	@ 0xae
 800c176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d010      	beq.n	800c1a2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c180:	7b7a      	ldrb	r2, [r7, #13]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	32ae      	adds	r2, #174	@ 0xae
 800c186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c18a:	689b      	ldr	r3, [r3, #8]
 800c18c:	6839      	ldr	r1, [r7, #0]
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	4798      	blx	r3
 800c192:	4603      	mov	r3, r0
 800c194:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c196:	e004      	b.n	800c1a2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c198:	6839      	ldr	r1, [r7, #0]
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f000 fc05 	bl	800c9aa <USBD_CtlError>
              break;
 800c1a0:	e000      	b.n	800c1a4 <USBD_StdEPReq+0x1c8>
              break;
 800c1a2:	bf00      	nop
          }
          break;
 800c1a4:	e0ad      	b.n	800c302 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	2b02      	cmp	r3, #2
 800c1b0:	d002      	beq.n	800c1b8 <USBD_StdEPReq+0x1dc>
 800c1b2:	2b03      	cmp	r3, #3
 800c1b4:	d033      	beq.n	800c21e <USBD_StdEPReq+0x242>
 800c1b6:	e099      	b.n	800c2ec <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1b8:	7bbb      	ldrb	r3, [r7, #14]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d007      	beq.n	800c1ce <USBD_StdEPReq+0x1f2>
 800c1be:	7bbb      	ldrb	r3, [r7, #14]
 800c1c0:	2b80      	cmp	r3, #128	@ 0x80
 800c1c2:	d004      	beq.n	800c1ce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c1c4:	6839      	ldr	r1, [r7, #0]
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 fbef 	bl	800c9aa <USBD_CtlError>
                break;
 800c1cc:	e093      	b.n	800c2f6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	da0b      	bge.n	800c1ee <USBD_StdEPReq+0x212>
 800c1d6:	7bbb      	ldrb	r3, [r7, #14]
 800c1d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c1dc:	4613      	mov	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	4413      	add	r3, r2
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	3310      	adds	r3, #16
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	4413      	add	r3, r2
 800c1ea:	3304      	adds	r3, #4
 800c1ec:	e00b      	b.n	800c206 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1ee:	7bbb      	ldrb	r3, [r7, #14]
 800c1f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	4413      	add	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	4413      	add	r3, r2
 800c204:	3304      	adds	r3, #4
 800c206:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c208:	68bb      	ldr	r3, [r7, #8]
 800c20a:	2200      	movs	r2, #0
 800c20c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c20e:	68bb      	ldr	r3, [r7, #8]
 800c210:	330e      	adds	r3, #14
 800c212:	2202      	movs	r2, #2
 800c214:	4619      	mov	r1, r3
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 fc44 	bl	800caa4 <USBD_CtlSendData>
              break;
 800c21c:	e06b      	b.n	800c2f6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c21e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c222:	2b00      	cmp	r3, #0
 800c224:	da11      	bge.n	800c24a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c226:	7bbb      	ldrb	r3, [r7, #14]
 800c228:	f003 020f 	and.w	r2, r3, #15
 800c22c:	6879      	ldr	r1, [r7, #4]
 800c22e:	4613      	mov	r3, r2
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	4413      	add	r3, r2
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	440b      	add	r3, r1
 800c238:	3323      	adds	r3, #35	@ 0x23
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d117      	bne.n	800c270 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c240:	6839      	ldr	r1, [r7, #0]
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 fbb1 	bl	800c9aa <USBD_CtlError>
                  break;
 800c248:	e055      	b.n	800c2f6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c24a:	7bbb      	ldrb	r3, [r7, #14]
 800c24c:	f003 020f 	and.w	r2, r3, #15
 800c250:	6879      	ldr	r1, [r7, #4]
 800c252:	4613      	mov	r3, r2
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	4413      	add	r3, r2
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	440b      	add	r3, r1
 800c25c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d104      	bne.n	800c270 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c266:	6839      	ldr	r1, [r7, #0]
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 fb9e 	bl	800c9aa <USBD_CtlError>
                  break;
 800c26e:	e042      	b.n	800c2f6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c270:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c274:	2b00      	cmp	r3, #0
 800c276:	da0b      	bge.n	800c290 <USBD_StdEPReq+0x2b4>
 800c278:	7bbb      	ldrb	r3, [r7, #14]
 800c27a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c27e:	4613      	mov	r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4413      	add	r3, r2
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	3310      	adds	r3, #16
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	4413      	add	r3, r2
 800c28c:	3304      	adds	r3, #4
 800c28e:	e00b      	b.n	800c2a8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c290:	7bbb      	ldrb	r3, [r7, #14]
 800c292:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c296:	4613      	mov	r3, r2
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	4413      	add	r3, r2
 800c29c:	009b      	lsls	r3, r3, #2
 800c29e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	3304      	adds	r3, #4
 800c2a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c2aa:	7bbb      	ldrb	r3, [r7, #14]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d002      	beq.n	800c2b6 <USBD_StdEPReq+0x2da>
 800c2b0:	7bbb      	ldrb	r3, [r7, #14]
 800c2b2:	2b80      	cmp	r3, #128	@ 0x80
 800c2b4:	d103      	bne.n	800c2be <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	739a      	strb	r2, [r3, #14]
 800c2bc:	e00e      	b.n	800c2dc <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c2be:	7bbb      	ldrb	r3, [r7, #14]
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f001 f90e 	bl	800d4e4 <USBD_LL_IsStallEP>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d003      	beq.n	800c2d6 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	739a      	strb	r2, [r3, #14]
 800c2d4:	e002      	b.n	800c2dc <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	2200      	movs	r2, #0
 800c2da:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	330e      	adds	r3, #14
 800c2e0:	2202      	movs	r2, #2
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 fbdd 	bl	800caa4 <USBD_CtlSendData>
              break;
 800c2ea:	e004      	b.n	800c2f6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fb5b 	bl	800c9aa <USBD_CtlError>
              break;
 800c2f4:	bf00      	nop
          }
          break;
 800c2f6:	e004      	b.n	800c302 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800c2f8:	6839      	ldr	r1, [r7, #0]
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 fb55 	bl	800c9aa <USBD_CtlError>
          break;
 800c300:	bf00      	nop
      }
      break;
 800c302:	e005      	b.n	800c310 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 fb4f 	bl	800c9aa <USBD_CtlError>
      break;
 800c30c:	e000      	b.n	800c310 <USBD_StdEPReq+0x334>
      break;
 800c30e:	bf00      	nop
  }

  return ret;
 800c310:	7bfb      	ldrb	r3, [r7, #15]
}
 800c312:	4618      	mov	r0, r3
 800c314:	3710      	adds	r7, #16
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
	...

0800c31c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c326:	2300      	movs	r3, #0
 800c328:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c32a:	2300      	movs	r3, #0
 800c32c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c32e:	2300      	movs	r3, #0
 800c330:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	885b      	ldrh	r3, [r3, #2]
 800c336:	0a1b      	lsrs	r3, r3, #8
 800c338:	b29b      	uxth	r3, r3
 800c33a:	3b01      	subs	r3, #1
 800c33c:	2b06      	cmp	r3, #6
 800c33e:	f200 8128 	bhi.w	800c592 <USBD_GetDescriptor+0x276>
 800c342:	a201      	add	r2, pc, #4	@ (adr r2, 800c348 <USBD_GetDescriptor+0x2c>)
 800c344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c348:	0800c365 	.word	0x0800c365
 800c34c:	0800c37d 	.word	0x0800c37d
 800c350:	0800c3bd 	.word	0x0800c3bd
 800c354:	0800c593 	.word	0x0800c593
 800c358:	0800c593 	.word	0x0800c593
 800c35c:	0800c533 	.word	0x0800c533
 800c360:	0800c55f 	.word	0x0800c55f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	7c12      	ldrb	r2, [r2, #16]
 800c370:	f107 0108 	add.w	r1, r7, #8
 800c374:	4610      	mov	r0, r2
 800c376:	4798      	blx	r3
 800c378:	60f8      	str	r0, [r7, #12]
      break;
 800c37a:	e112      	b.n	800c5a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	7c1b      	ldrb	r3, [r3, #16]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d10d      	bne.n	800c3a0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c38c:	f107 0208 	add.w	r2, r7, #8
 800c390:	4610      	mov	r0, r2
 800c392:	4798      	blx	r3
 800c394:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	3301      	adds	r3, #1
 800c39a:	2202      	movs	r2, #2
 800c39c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c39e:	e100      	b.n	800c5a2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c3a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3a8:	f107 0208 	add.w	r2, r7, #8
 800c3ac:	4610      	mov	r0, r2
 800c3ae:	4798      	blx	r3
 800c3b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	2202      	movs	r2, #2
 800c3b8:	701a      	strb	r2, [r3, #0]
      break;
 800c3ba:	e0f2      	b.n	800c5a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	885b      	ldrh	r3, [r3, #2]
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	2b05      	cmp	r3, #5
 800c3c4:	f200 80ac 	bhi.w	800c520 <USBD_GetDescriptor+0x204>
 800c3c8:	a201      	add	r2, pc, #4	@ (adr r2, 800c3d0 <USBD_GetDescriptor+0xb4>)
 800c3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ce:	bf00      	nop
 800c3d0:	0800c3e9 	.word	0x0800c3e9
 800c3d4:	0800c41d 	.word	0x0800c41d
 800c3d8:	0800c451 	.word	0x0800c451
 800c3dc:	0800c485 	.word	0x0800c485
 800c3e0:	0800c4b9 	.word	0x0800c4b9
 800c3e4:	0800c4ed 	.word	0x0800c4ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d00b      	beq.n	800c40c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	7c12      	ldrb	r2, [r2, #16]
 800c400:	f107 0108 	add.w	r1, r7, #8
 800c404:	4610      	mov	r0, r2
 800c406:	4798      	blx	r3
 800c408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c40a:	e091      	b.n	800c530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c40c:	6839      	ldr	r1, [r7, #0]
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 facb 	bl	800c9aa <USBD_CtlError>
            err++;
 800c414:	7afb      	ldrb	r3, [r7, #11]
 800c416:	3301      	adds	r3, #1
 800c418:	72fb      	strb	r3, [r7, #11]
          break;
 800c41a:	e089      	b.n	800c530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c422:	689b      	ldr	r3, [r3, #8]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d00b      	beq.n	800c440 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	7c12      	ldrb	r2, [r2, #16]
 800c434:	f107 0108 	add.w	r1, r7, #8
 800c438:	4610      	mov	r0, r2
 800c43a:	4798      	blx	r3
 800c43c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c43e:	e077      	b.n	800c530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c440:	6839      	ldr	r1, [r7, #0]
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f000 fab1 	bl	800c9aa <USBD_CtlError>
            err++;
 800c448:	7afb      	ldrb	r3, [r7, #11]
 800c44a:	3301      	adds	r3, #1
 800c44c:	72fb      	strb	r3, [r7, #11]
          break;
 800c44e:	e06f      	b.n	800c530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c456:	68db      	ldr	r3, [r3, #12]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d00b      	beq.n	800c474 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	7c12      	ldrb	r2, [r2, #16]
 800c468:	f107 0108 	add.w	r1, r7, #8
 800c46c:	4610      	mov	r0, r2
 800c46e:	4798      	blx	r3
 800c470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c472:	e05d      	b.n	800c530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c474:	6839      	ldr	r1, [r7, #0]
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 fa97 	bl	800c9aa <USBD_CtlError>
            err++;
 800c47c:	7afb      	ldrb	r3, [r7, #11]
 800c47e:	3301      	adds	r3, #1
 800c480:	72fb      	strb	r3, [r7, #11]
          break;
 800c482:	e055      	b.n	800c530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c48a:	691b      	ldr	r3, [r3, #16]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d00b      	beq.n	800c4a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c496:	691b      	ldr	r3, [r3, #16]
 800c498:	687a      	ldr	r2, [r7, #4]
 800c49a:	7c12      	ldrb	r2, [r2, #16]
 800c49c:	f107 0108 	add.w	r1, r7, #8
 800c4a0:	4610      	mov	r0, r2
 800c4a2:	4798      	blx	r3
 800c4a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4a6:	e043      	b.n	800c530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4a8:	6839      	ldr	r1, [r7, #0]
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 fa7d 	bl	800c9aa <USBD_CtlError>
            err++;
 800c4b0:	7afb      	ldrb	r3, [r7, #11]
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c4b6:	e03b      	b.n	800c530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4be:	695b      	ldr	r3, [r3, #20]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d00b      	beq.n	800c4dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4ca:	695b      	ldr	r3, [r3, #20]
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	7c12      	ldrb	r2, [r2, #16]
 800c4d0:	f107 0108 	add.w	r1, r7, #8
 800c4d4:	4610      	mov	r0, r2
 800c4d6:	4798      	blx	r3
 800c4d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4da:	e029      	b.n	800c530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4dc:	6839      	ldr	r1, [r7, #0]
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 fa63 	bl	800c9aa <USBD_CtlError>
            err++;
 800c4e4:	7afb      	ldrb	r3, [r7, #11]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c4ea:	e021      	b.n	800c530 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4f2:	699b      	ldr	r3, [r3, #24]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00b      	beq.n	800c510 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4fe:	699b      	ldr	r3, [r3, #24]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	7c12      	ldrb	r2, [r2, #16]
 800c504:	f107 0108 	add.w	r1, r7, #8
 800c508:	4610      	mov	r0, r2
 800c50a:	4798      	blx	r3
 800c50c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c50e:	e00f      	b.n	800c530 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c510:	6839      	ldr	r1, [r7, #0]
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 fa49 	bl	800c9aa <USBD_CtlError>
            err++;
 800c518:	7afb      	ldrb	r3, [r7, #11]
 800c51a:	3301      	adds	r3, #1
 800c51c:	72fb      	strb	r3, [r7, #11]
          break;
 800c51e:	e007      	b.n	800c530 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c520:	6839      	ldr	r1, [r7, #0]
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 fa41 	bl	800c9aa <USBD_CtlError>
          err++;
 800c528:	7afb      	ldrb	r3, [r7, #11]
 800c52a:	3301      	adds	r3, #1
 800c52c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c52e:	bf00      	nop
      }
      break;
 800c530:	e037      	b.n	800c5a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	7c1b      	ldrb	r3, [r3, #16]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d109      	bne.n	800c54e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c542:	f107 0208 	add.w	r2, r7, #8
 800c546:	4610      	mov	r0, r2
 800c548:	4798      	blx	r3
 800c54a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c54c:	e029      	b.n	800c5a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c54e:	6839      	ldr	r1, [r7, #0]
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 fa2a 	bl	800c9aa <USBD_CtlError>
        err++;
 800c556:	7afb      	ldrb	r3, [r7, #11]
 800c558:	3301      	adds	r3, #1
 800c55a:	72fb      	strb	r3, [r7, #11]
      break;
 800c55c:	e021      	b.n	800c5a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	7c1b      	ldrb	r3, [r3, #16]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d10d      	bne.n	800c582 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c56c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c56e:	f107 0208 	add.w	r2, r7, #8
 800c572:	4610      	mov	r0, r2
 800c574:	4798      	blx	r3
 800c576:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	3301      	adds	r3, #1
 800c57c:	2207      	movs	r2, #7
 800c57e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c580:	e00f      	b.n	800c5a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c582:	6839      	ldr	r1, [r7, #0]
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f000 fa10 	bl	800c9aa <USBD_CtlError>
        err++;
 800c58a:	7afb      	ldrb	r3, [r7, #11]
 800c58c:	3301      	adds	r3, #1
 800c58e:	72fb      	strb	r3, [r7, #11]
      break;
 800c590:	e007      	b.n	800c5a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c592:	6839      	ldr	r1, [r7, #0]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 fa08 	bl	800c9aa <USBD_CtlError>
      err++;
 800c59a:	7afb      	ldrb	r3, [r7, #11]
 800c59c:	3301      	adds	r3, #1
 800c59e:	72fb      	strb	r3, [r7, #11]
      break;
 800c5a0:	bf00      	nop
  }

  if (err != 0U)
 800c5a2:	7afb      	ldrb	r3, [r7, #11]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d11e      	bne.n	800c5e6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	88db      	ldrh	r3, [r3, #6]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d016      	beq.n	800c5de <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c5b0:	893b      	ldrh	r3, [r7, #8]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d00e      	beq.n	800c5d4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	88da      	ldrh	r2, [r3, #6]
 800c5ba:	893b      	ldrh	r3, [r7, #8]
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	bf28      	it	cs
 800c5c0:	4613      	movcs	r3, r2
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5c6:	893b      	ldrh	r3, [r7, #8]
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	68f9      	ldr	r1, [r7, #12]
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 fa69 	bl	800caa4 <USBD_CtlSendData>
 800c5d2:	e009      	b.n	800c5e8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5d4:	6839      	ldr	r1, [r7, #0]
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 f9e7 	bl	800c9aa <USBD_CtlError>
 800c5dc:	e004      	b.n	800c5e8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 fac1 	bl	800cb66 <USBD_CtlSendStatus>
 800c5e4:	e000      	b.n	800c5e8 <USBD_GetDescriptor+0x2cc>
    return;
 800c5e6:	bf00      	nop
  }
}
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop

0800c5f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	889b      	ldrh	r3, [r3, #4]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d131      	bne.n	800c666 <USBD_SetAddress+0x76>
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	88db      	ldrh	r3, [r3, #6]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d12d      	bne.n	800c666 <USBD_SetAddress+0x76>
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	885b      	ldrh	r3, [r3, #2]
 800c60e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c610:	d829      	bhi.n	800c666 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	885b      	ldrh	r3, [r3, #2]
 800c616:	b2db      	uxtb	r3, r3
 800c618:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c61c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c624:	b2db      	uxtb	r3, r3
 800c626:	2b03      	cmp	r3, #3
 800c628:	d104      	bne.n	800c634 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c62a:	6839      	ldr	r1, [r7, #0]
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f000 f9bc 	bl	800c9aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c632:	e01d      	b.n	800c670 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	7bfa      	ldrb	r2, [r7, #15]
 800c638:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c63c:	7bfb      	ldrb	r3, [r7, #15]
 800c63e:	4619      	mov	r1, r3
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 ff7b 	bl	800d53c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f000 fa8d 	bl	800cb66 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c64c:	7bfb      	ldrb	r3, [r7, #15]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d004      	beq.n	800c65c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2202      	movs	r2, #2
 800c656:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c65a:	e009      	b.n	800c670 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2201      	movs	r2, #1
 800c660:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c664:	e004      	b.n	800c670 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c666:	6839      	ldr	r1, [r7, #0]
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 f99e 	bl	800c9aa <USBD_CtlError>
  }
}
 800c66e:	bf00      	nop
 800c670:	bf00      	nop
 800c672:	3710      	adds	r7, #16
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c682:	2300      	movs	r3, #0
 800c684:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	885b      	ldrh	r3, [r3, #2]
 800c68a:	b2da      	uxtb	r2, r3
 800c68c:	4b4e      	ldr	r3, [pc, #312]	@ (800c7c8 <USBD_SetConfig+0x150>)
 800c68e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c690:	4b4d      	ldr	r3, [pc, #308]	@ (800c7c8 <USBD_SetConfig+0x150>)
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	2b01      	cmp	r3, #1
 800c696:	d905      	bls.n	800c6a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c698:	6839      	ldr	r1, [r7, #0]
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 f985 	bl	800c9aa <USBD_CtlError>
    return USBD_FAIL;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	e08c      	b.n	800c7be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d002      	beq.n	800c6b6 <USBD_SetConfig+0x3e>
 800c6b0:	2b03      	cmp	r3, #3
 800c6b2:	d029      	beq.n	800c708 <USBD_SetConfig+0x90>
 800c6b4:	e075      	b.n	800c7a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c6b6:	4b44      	ldr	r3, [pc, #272]	@ (800c7c8 <USBD_SetConfig+0x150>)
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d020      	beq.n	800c700 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c6be:	4b42      	ldr	r3, [pc, #264]	@ (800c7c8 <USBD_SetConfig+0x150>)
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6c8:	4b3f      	ldr	r3, [pc, #252]	@ (800c7c8 <USBD_SetConfig+0x150>)
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f7fe ffcd 	bl	800b66e <USBD_SetClassConfig>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6d8:	7bfb      	ldrb	r3, [r7, #15]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d008      	beq.n	800c6f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c6de:	6839      	ldr	r1, [r7, #0]
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 f962 	bl	800c9aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2202      	movs	r2, #2
 800c6ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6ee:	e065      	b.n	800c7bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 fa38 	bl	800cb66 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2203      	movs	r2, #3
 800c6fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c6fe:	e05d      	b.n	800c7bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 fa30 	bl	800cb66 <USBD_CtlSendStatus>
      break;
 800c706:	e059      	b.n	800c7bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c708:	4b2f      	ldr	r3, [pc, #188]	@ (800c7c8 <USBD_SetConfig+0x150>)
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d112      	bne.n	800c736 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2202      	movs	r2, #2
 800c714:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c718:	4b2b      	ldr	r3, [pc, #172]	@ (800c7c8 <USBD_SetConfig+0x150>)
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	461a      	mov	r2, r3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c722:	4b29      	ldr	r3, [pc, #164]	@ (800c7c8 <USBD_SetConfig+0x150>)
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	4619      	mov	r1, r3
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f7fe ffbc 	bl	800b6a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 fa19 	bl	800cb66 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c734:	e042      	b.n	800c7bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c736:	4b24      	ldr	r3, [pc, #144]	@ (800c7c8 <USBD_SetConfig+0x150>)
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	461a      	mov	r2, r3
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	429a      	cmp	r2, r3
 800c742:	d02a      	beq.n	800c79a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	4619      	mov	r1, r3
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f7fe ffaa 	bl	800b6a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c752:	4b1d      	ldr	r3, [pc, #116]	@ (800c7c8 <USBD_SetConfig+0x150>)
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	461a      	mov	r2, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c75c:	4b1a      	ldr	r3, [pc, #104]	@ (800c7c8 <USBD_SetConfig+0x150>)
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	4619      	mov	r1, r3
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f7fe ff83 	bl	800b66e <USBD_SetClassConfig>
 800c768:	4603      	mov	r3, r0
 800c76a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c76c:	7bfb      	ldrb	r3, [r7, #15]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00f      	beq.n	800c792 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c772:	6839      	ldr	r1, [r7, #0]
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f000 f918 	bl	800c9aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	4619      	mov	r1, r3
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f7fe ff8f 	bl	800b6a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2202      	movs	r2, #2
 800c78c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c790:	e014      	b.n	800c7bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f9e7 	bl	800cb66 <USBD_CtlSendStatus>
      break;
 800c798:	e010      	b.n	800c7bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 f9e3 	bl	800cb66 <USBD_CtlSendStatus>
      break;
 800c7a0:	e00c      	b.n	800c7bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c7a2:	6839      	ldr	r1, [r7, #0]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f000 f900 	bl	800c9aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7aa:	4b07      	ldr	r3, [pc, #28]	@ (800c7c8 <USBD_SetConfig+0x150>)
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f7fe ff78 	bl	800b6a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7b6:	2303      	movs	r3, #3
 800c7b8:	73fb      	strb	r3, [r7, #15]
      break;
 800c7ba:	bf00      	nop
  }

  return ret;
 800c7bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	3710      	adds	r7, #16
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	200009d4 	.word	0x200009d4

0800c7cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	88db      	ldrh	r3, [r3, #6]
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d004      	beq.n	800c7e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7de:	6839      	ldr	r1, [r7, #0]
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 f8e2 	bl	800c9aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7e6:	e023      	b.n	800c830 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	2b02      	cmp	r3, #2
 800c7f2:	dc02      	bgt.n	800c7fa <USBD_GetConfig+0x2e>
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	dc03      	bgt.n	800c800 <USBD_GetConfig+0x34>
 800c7f8:	e015      	b.n	800c826 <USBD_GetConfig+0x5a>
 800c7fa:	2b03      	cmp	r3, #3
 800c7fc:	d00b      	beq.n	800c816 <USBD_GetConfig+0x4a>
 800c7fe:	e012      	b.n	800c826 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	3308      	adds	r3, #8
 800c80a:	2201      	movs	r2, #1
 800c80c:	4619      	mov	r1, r3
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 f948 	bl	800caa4 <USBD_CtlSendData>
        break;
 800c814:	e00c      	b.n	800c830 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	3304      	adds	r3, #4
 800c81a:	2201      	movs	r2, #1
 800c81c:	4619      	mov	r1, r3
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 f940 	bl	800caa4 <USBD_CtlSendData>
        break;
 800c824:	e004      	b.n	800c830 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c826:	6839      	ldr	r1, [r7, #0]
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 f8be 	bl	800c9aa <USBD_CtlError>
        break;
 800c82e:	bf00      	nop
}
 800c830:	bf00      	nop
 800c832:	3708      	adds	r7, #8
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c848:	b2db      	uxtb	r3, r3
 800c84a:	3b01      	subs	r3, #1
 800c84c:	2b02      	cmp	r3, #2
 800c84e:	d81e      	bhi.n	800c88e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	88db      	ldrh	r3, [r3, #6]
 800c854:	2b02      	cmp	r3, #2
 800c856:	d004      	beq.n	800c862 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c858:	6839      	ldr	r1, [r7, #0]
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 f8a5 	bl	800c9aa <USBD_CtlError>
        break;
 800c860:	e01a      	b.n	800c898 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2201      	movs	r2, #1
 800c866:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d005      	beq.n	800c87e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	68db      	ldr	r3, [r3, #12]
 800c876:	f043 0202 	orr.w	r2, r3, #2
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	330c      	adds	r3, #12
 800c882:	2202      	movs	r2, #2
 800c884:	4619      	mov	r1, r3
 800c886:	6878      	ldr	r0, [r7, #4]
 800c888:	f000 f90c 	bl	800caa4 <USBD_CtlSendData>
      break;
 800c88c:	e004      	b.n	800c898 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c88e:	6839      	ldr	r1, [r7, #0]
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f000 f88a 	bl	800c9aa <USBD_CtlError>
      break;
 800c896:	bf00      	nop
  }
}
 800c898:	bf00      	nop
 800c89a:	3708      	adds	r7, #8
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	885b      	ldrh	r3, [r3, #2]
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d107      	bne.n	800c8c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 f953 	bl	800cb66 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c8c0:	e013      	b.n	800c8ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	885b      	ldrh	r3, [r3, #2]
 800c8c6:	2b02      	cmp	r3, #2
 800c8c8:	d10b      	bne.n	800c8e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	889b      	ldrh	r3, [r3, #4]
 800c8ce:	0a1b      	lsrs	r3, r3, #8
 800c8d0:	b29b      	uxth	r3, r3
 800c8d2:	b2da      	uxtb	r2, r3
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 f943 	bl	800cb66 <USBD_CtlSendStatus>
}
 800c8e0:	e003      	b.n	800c8ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c8e2:	6839      	ldr	r1, [r7, #0]
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f000 f860 	bl	800c9aa <USBD_CtlError>
}
 800c8ea:	bf00      	nop
 800c8ec:	3708      	adds	r7, #8
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b082      	sub	sp, #8
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
 800c8fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c902:	b2db      	uxtb	r3, r3
 800c904:	3b01      	subs	r3, #1
 800c906:	2b02      	cmp	r3, #2
 800c908:	d80b      	bhi.n	800c922 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	885b      	ldrh	r3, [r3, #2]
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d10c      	bne.n	800c92c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 f923 	bl	800cb66 <USBD_CtlSendStatus>
      }
      break;
 800c920:	e004      	b.n	800c92c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c922:	6839      	ldr	r1, [r7, #0]
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 f840 	bl	800c9aa <USBD_CtlError>
      break;
 800c92a:	e000      	b.n	800c92e <USBD_ClrFeature+0x3c>
      break;
 800c92c:	bf00      	nop
  }
}
 800c92e:	bf00      	nop
 800c930:	3708      	adds	r7, #8
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}

0800c936 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c936:	b580      	push	{r7, lr}
 800c938:	b084      	sub	sp, #16
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	6078      	str	r0, [r7, #4]
 800c93e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	781a      	ldrb	r2, [r3, #0]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	3301      	adds	r3, #1
 800c950:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	781a      	ldrb	r2, [r3, #0]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	3301      	adds	r3, #1
 800c95e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f7ff fa3d 	bl	800bde0 <SWAPBYTE>
 800c966:	4603      	mov	r3, r0
 800c968:	461a      	mov	r2, r3
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	3301      	adds	r3, #1
 800c972:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	3301      	adds	r3, #1
 800c978:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c97a:	68f8      	ldr	r0, [r7, #12]
 800c97c:	f7ff fa30 	bl	800bde0 <SWAPBYTE>
 800c980:	4603      	mov	r3, r0
 800c982:	461a      	mov	r2, r3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	3301      	adds	r3, #1
 800c98c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	3301      	adds	r3, #1
 800c992:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c994:	68f8      	ldr	r0, [r7, #12]
 800c996:	f7ff fa23 	bl	800bde0 <SWAPBYTE>
 800c99a:	4603      	mov	r3, r0
 800c99c:	461a      	mov	r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	80da      	strh	r2, [r3, #6]
}
 800c9a2:	bf00      	nop
 800c9a4:	3710      	adds	r7, #16
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}

0800c9aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9aa:	b580      	push	{r7, lr}
 800c9ac:	b082      	sub	sp, #8
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
 800c9b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c9b4:	2180      	movs	r1, #128	@ 0x80
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f000 fd56 	bl	800d468 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c9bc:	2100      	movs	r1, #0
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f000 fd52 	bl	800d468 <USBD_LL_StallEP>
}
 800c9c4:	bf00      	nop
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b086      	sub	sp, #24
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	60f8      	str	r0, [r7, #12]
 800c9d4:	60b9      	str	r1, [r7, #8]
 800c9d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d042      	beq.n	800ca68 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c9e6:	6938      	ldr	r0, [r7, #16]
 800c9e8:	f000 f842 	bl	800ca70 <USBD_GetLen>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	005b      	lsls	r3, r3, #1
 800c9f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9f6:	d808      	bhi.n	800ca0a <USBD_GetString+0x3e>
 800c9f8:	6938      	ldr	r0, [r7, #16]
 800c9fa:	f000 f839 	bl	800ca70 <USBD_GetLen>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	3301      	adds	r3, #1
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	005b      	lsls	r3, r3, #1
 800ca06:	b29a      	uxth	r2, r3
 800ca08:	e001      	b.n	800ca0e <USBD_GetString+0x42>
 800ca0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
 800ca14:	68ba      	ldr	r2, [r7, #8]
 800ca16:	4413      	add	r3, r2
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	7812      	ldrb	r2, [r2, #0]
 800ca1c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca1e:	7dfb      	ldrb	r3, [r7, #23]
 800ca20:	3301      	adds	r3, #1
 800ca22:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ca24:	7dfb      	ldrb	r3, [r7, #23]
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	4413      	add	r3, r2
 800ca2a:	2203      	movs	r2, #3
 800ca2c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ca2e:	7dfb      	ldrb	r3, [r7, #23]
 800ca30:	3301      	adds	r3, #1
 800ca32:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ca34:	e013      	b.n	800ca5e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ca36:	7dfb      	ldrb	r3, [r7, #23]
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	693a      	ldr	r2, [r7, #16]
 800ca3e:	7812      	ldrb	r2, [r2, #0]
 800ca40:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	3301      	adds	r3, #1
 800ca46:	613b      	str	r3, [r7, #16]
    idx++;
 800ca48:	7dfb      	ldrb	r3, [r7, #23]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca4e:	7dfb      	ldrb	r3, [r7, #23]
 800ca50:	68ba      	ldr	r2, [r7, #8]
 800ca52:	4413      	add	r3, r2
 800ca54:	2200      	movs	r2, #0
 800ca56:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca58:	7dfb      	ldrb	r3, [r7, #23]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d1e7      	bne.n	800ca36 <USBD_GetString+0x6a>
 800ca66:	e000      	b.n	800ca6a <USBD_GetString+0x9e>
    return;
 800ca68:	bf00      	nop
  }
}
 800ca6a:	3718      	adds	r7, #24
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}

0800ca70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b085      	sub	sp, #20
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca80:	e005      	b.n	800ca8e <USBD_GetLen+0x1e>
  {
    len++;
 800ca82:	7bfb      	ldrb	r3, [r7, #15]
 800ca84:	3301      	adds	r3, #1
 800ca86:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	781b      	ldrb	r3, [r3, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d1f5      	bne.n	800ca82 <USBD_GetLen+0x12>
  }

  return len;
 800ca96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3714      	adds	r7, #20
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2202      	movs	r2, #2
 800cab4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	68ba      	ldr	r2, [r7, #8]
 800cac2:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	68ba      	ldr	r2, [r7, #8]
 800cace:	2100      	movs	r1, #0
 800cad0:	68f8      	ldr	r0, [r7, #12]
 800cad2:	f000 fd52 	bl	800d57a <USBD_LL_Transmit>

  return USBD_OK;
 800cad6:	2300      	movs	r3, #0
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3710      	adds	r7, #16
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	2100      	movs	r1, #0
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f000 fd41 	bl	800d57a <USBD_LL_Transmit>

  return USBD_OK;
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b084      	sub	sp, #16
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	60f8      	str	r0, [r7, #12]
 800cb0a:	60b9      	str	r1, [r7, #8]
 800cb0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	2203      	movs	r2, #3
 800cb12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	68ba      	ldr	r2, [r7, #8]
 800cb22:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	2100      	movs	r1, #0
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f000 fd41 	bl	800d5bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb3a:	2300      	movs	r3, #0
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3710      	adds	r7, #16
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	68ba      	ldr	r2, [r7, #8]
 800cb54:	2100      	movs	r1, #0
 800cb56:	68f8      	ldr	r0, [r7, #12]
 800cb58:	f000 fd30 	bl	800d5bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb5c:	2300      	movs	r3, #0
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3710      	adds	r7, #16
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}

0800cb66 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb66:	b580      	push	{r7, lr}
 800cb68:	b082      	sub	sp, #8
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2204      	movs	r2, #4
 800cb72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb76:	2300      	movs	r3, #0
 800cb78:	2200      	movs	r2, #0
 800cb7a:	2100      	movs	r1, #0
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 fcfc 	bl	800d57a <USBD_LL_Transmit>

  return USBD_OK;
 800cb82:	2300      	movs	r3, #0
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3708      	adds	r7, #8
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2205      	movs	r2, #5
 800cb98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	2200      	movs	r2, #0
 800cba0:	2100      	movs	r1, #0
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 fd0a 	bl	800d5bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3708      	adds	r7, #8
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
	...

0800cbb4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cbb8:	2200      	movs	r2, #0
 800cbba:	4912      	ldr	r1, [pc, #72]	@ (800cc04 <MX_USB_DEVICE_Init+0x50>)
 800cbbc:	4812      	ldr	r0, [pc, #72]	@ (800cc08 <MX_USB_DEVICE_Init+0x54>)
 800cbbe:	f7fe fcd9 	bl	800b574 <USBD_Init>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cbc8:	f7f4 fd58 	bl	800167c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cbcc:	490f      	ldr	r1, [pc, #60]	@ (800cc0c <MX_USB_DEVICE_Init+0x58>)
 800cbce:	480e      	ldr	r0, [pc, #56]	@ (800cc08 <MX_USB_DEVICE_Init+0x54>)
 800cbd0:	f7fe fd00 	bl	800b5d4 <USBD_RegisterClass>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d001      	beq.n	800cbde <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cbda:	f7f4 fd4f 	bl	800167c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cbde:	490c      	ldr	r1, [pc, #48]	@ (800cc10 <MX_USB_DEVICE_Init+0x5c>)
 800cbe0:	4809      	ldr	r0, [pc, #36]	@ (800cc08 <MX_USB_DEVICE_Init+0x54>)
 800cbe2:	f7fe fbf7 	bl	800b3d4 <USBD_CDC_RegisterInterface>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d001      	beq.n	800cbf0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cbec:	f7f4 fd46 	bl	800167c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cbf0:	4805      	ldr	r0, [pc, #20]	@ (800cc08 <MX_USB_DEVICE_Init+0x54>)
 800cbf2:	f7fe fd25 	bl	800b640 <USBD_Start>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d001      	beq.n	800cc00 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cbfc:	f7f4 fd3e 	bl	800167c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cc00:	bf00      	nop
 800cc02:	bd80      	pop	{r7, pc}
 800cc04:	200000e0 	.word	0x200000e0
 800cc08:	200009d8 	.word	0x200009d8
 800cc0c:	20000044 	.word	0x20000044
 800cc10:	200000cc 	.word	0x200000cc

0800cc14 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cc18:	2200      	movs	r2, #0
 800cc1a:	4905      	ldr	r1, [pc, #20]	@ (800cc30 <CDC_Init_FS+0x1c>)
 800cc1c:	4805      	ldr	r0, [pc, #20]	@ (800cc34 <CDC_Init_FS+0x20>)
 800cc1e:	f7fe fbf3 	bl	800b408 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cc22:	4905      	ldr	r1, [pc, #20]	@ (800cc38 <CDC_Init_FS+0x24>)
 800cc24:	4803      	ldr	r0, [pc, #12]	@ (800cc34 <CDC_Init_FS+0x20>)
 800cc26:	f7fe fc11 	bl	800b44c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cc2a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	20000eb4 	.word	0x20000eb4
 800cc34:	200009d8 	.word	0x200009d8
 800cc38:	20000cb4 	.word	0x20000cb4

0800cc3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	4603      	mov	r3, r0
 800cc54:	6039      	str	r1, [r7, #0]
 800cc56:	71fb      	strb	r3, [r7, #7]
 800cc58:	4613      	mov	r3, r2
 800cc5a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc5c:	79fb      	ldrb	r3, [r7, #7]
 800cc5e:	2b23      	cmp	r3, #35	@ 0x23
 800cc60:	f200 8098 	bhi.w	800cd94 <CDC_Control_FS+0x148>
 800cc64:	a201      	add	r2, pc, #4	@ (adr r2, 800cc6c <CDC_Control_FS+0x20>)
 800cc66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc6a:	bf00      	nop
 800cc6c:	0800cd95 	.word	0x0800cd95
 800cc70:	0800cd95 	.word	0x0800cd95
 800cc74:	0800cd95 	.word	0x0800cd95
 800cc78:	0800cd95 	.word	0x0800cd95
 800cc7c:	0800cd95 	.word	0x0800cd95
 800cc80:	0800cd95 	.word	0x0800cd95
 800cc84:	0800cd95 	.word	0x0800cd95
 800cc88:	0800cd95 	.word	0x0800cd95
 800cc8c:	0800cd95 	.word	0x0800cd95
 800cc90:	0800cd95 	.word	0x0800cd95
 800cc94:	0800cd95 	.word	0x0800cd95
 800cc98:	0800cd95 	.word	0x0800cd95
 800cc9c:	0800cd95 	.word	0x0800cd95
 800cca0:	0800cd95 	.word	0x0800cd95
 800cca4:	0800cd95 	.word	0x0800cd95
 800cca8:	0800cd95 	.word	0x0800cd95
 800ccac:	0800cd95 	.word	0x0800cd95
 800ccb0:	0800cd95 	.word	0x0800cd95
 800ccb4:	0800cd95 	.word	0x0800cd95
 800ccb8:	0800cd95 	.word	0x0800cd95
 800ccbc:	0800cd95 	.word	0x0800cd95
 800ccc0:	0800cd95 	.word	0x0800cd95
 800ccc4:	0800cd95 	.word	0x0800cd95
 800ccc8:	0800cd95 	.word	0x0800cd95
 800cccc:	0800cd95 	.word	0x0800cd95
 800ccd0:	0800cd95 	.word	0x0800cd95
 800ccd4:	0800cd95 	.word	0x0800cd95
 800ccd8:	0800cd95 	.word	0x0800cd95
 800ccdc:	0800cd95 	.word	0x0800cd95
 800cce0:	0800cd95 	.word	0x0800cd95
 800cce4:	0800cd95 	.word	0x0800cd95
 800cce8:	0800cd95 	.word	0x0800cd95
 800ccec:	0800ccfd 	.word	0x0800ccfd
 800ccf0:	0800cd41 	.word	0x0800cd41
 800ccf4:	0800cd95 	.word	0x0800cd95
 800ccf8:	0800cd95 	.word	0x0800cd95
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	461a      	mov	r2, r3
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	3301      	adds	r3, #1
 800cd06:	781b      	ldrb	r3, [r3, #0]
 800cd08:	021b      	lsls	r3, r3, #8
 800cd0a:	431a      	orrs	r2, r3
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	3302      	adds	r3, #2
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	041b      	lsls	r3, r3, #16
 800cd14:	431a      	orrs	r2, r3
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	3303      	adds	r3, #3
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	061b      	lsls	r3, r3, #24
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	461a      	mov	r2, r3
 800cd22:	4b20      	ldr	r3, [pc, #128]	@ (800cda4 <CDC_Control_FS+0x158>)
 800cd24:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	791a      	ldrb	r2, [r3, #4]
 800cd2a:	4b1e      	ldr	r3, [pc, #120]	@ (800cda4 <CDC_Control_FS+0x158>)
 800cd2c:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	795a      	ldrb	r2, [r3, #5]
 800cd32:	4b1c      	ldr	r3, [pc, #112]	@ (800cda4 <CDC_Control_FS+0x158>)
 800cd34:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	799a      	ldrb	r2, [r3, #6]
 800cd3a:	4b1a      	ldr	r3, [pc, #104]	@ (800cda4 <CDC_Control_FS+0x158>)
 800cd3c:	719a      	strb	r2, [r3, #6]
    break;
 800cd3e:	e02a      	b.n	800cd96 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800cd40:	4b18      	ldr	r3, [pc, #96]	@ (800cda4 <CDC_Control_FS+0x158>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	b2da      	uxtb	r2, r3
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800cd4a:	4b16      	ldr	r3, [pc, #88]	@ (800cda4 <CDC_Control_FS+0x158>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	0a1a      	lsrs	r2, r3, #8
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	3301      	adds	r3, #1
 800cd54:	b2d2      	uxtb	r2, r2
 800cd56:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800cd58:	4b12      	ldr	r3, [pc, #72]	@ (800cda4 <CDC_Control_FS+0x158>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	0c1a      	lsrs	r2, r3, #16
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	3302      	adds	r3, #2
 800cd62:	b2d2      	uxtb	r2, r2
 800cd64:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800cd66:	4b0f      	ldr	r3, [pc, #60]	@ (800cda4 <CDC_Control_FS+0x158>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	0e1a      	lsrs	r2, r3, #24
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	3303      	adds	r3, #3
 800cd70:	b2d2      	uxtb	r2, r2
 800cd72:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	3304      	adds	r3, #4
 800cd78:	4a0a      	ldr	r2, [pc, #40]	@ (800cda4 <CDC_Control_FS+0x158>)
 800cd7a:	7912      	ldrb	r2, [r2, #4]
 800cd7c:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	3305      	adds	r3, #5
 800cd82:	4a08      	ldr	r2, [pc, #32]	@ (800cda4 <CDC_Control_FS+0x158>)
 800cd84:	7952      	ldrb	r2, [r2, #5]
 800cd86:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	3306      	adds	r3, #6
 800cd8c:	4a05      	ldr	r2, [pc, #20]	@ (800cda4 <CDC_Control_FS+0x158>)
 800cd8e:	7992      	ldrb	r2, [r2, #6]
 800cd90:	701a      	strb	r2, [r3, #0]
    break;
 800cd92:	e000      	b.n	800cd96 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cd94:	bf00      	nop
  }

  return (USBD_OK);
 800cd96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	370c      	adds	r7, #12
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr
 800cda4:	200000c4 	.word	0x200000c4

0800cda8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
 800cdb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800cdb2:	4b0b      	ldr	r3, [pc, #44]	@ (800cde0 <CDC_Receive_FS+0x38>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d006      	beq.n	800cdc8 <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800cdba:	4b09      	ldr	r3, [pc, #36]	@ (800cde0 <CDC_Receive_FS+0x38>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	683a      	ldr	r2, [r7, #0]
 800cdc0:	6812      	ldr	r2, [r2, #0]
 800cdc2:	4611      	mov	r1, r2
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cdc8:	6879      	ldr	r1, [r7, #4]
 800cdca:	4806      	ldr	r0, [pc, #24]	@ (800cde4 <CDC_Receive_FS+0x3c>)
 800cdcc:	f7fe fb3e 	bl	800b44c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cdd0:	4804      	ldr	r0, [pc, #16]	@ (800cde4 <CDC_Receive_FS+0x3c>)
 800cdd2:	f7fe fb99 	bl	800b508 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800cdd6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	200010b4 	.word	0x200010b4
 800cde4:	200009d8 	.word	0x200009d8

0800cde8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cdf8:	4b0d      	ldr	r3, [pc, #52]	@ (800ce30 <CDC_Transmit_FS+0x48>)
 800cdfa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cdfe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d001      	beq.n	800ce0e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e00b      	b.n	800ce26 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ce0e:	887b      	ldrh	r3, [r7, #2]
 800ce10:	461a      	mov	r2, r3
 800ce12:	6879      	ldr	r1, [r7, #4]
 800ce14:	4806      	ldr	r0, [pc, #24]	@ (800ce30 <CDC_Transmit_FS+0x48>)
 800ce16:	f7fe faf7 	bl	800b408 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ce1a:	4805      	ldr	r0, [pc, #20]	@ (800ce30 <CDC_Transmit_FS+0x48>)
 800ce1c:	f7fe fb34 	bl	800b488 <USBD_CDC_TransmitPacket>
 800ce20:	4603      	mov	r3, r0
 800ce22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ce24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	200009d8 	.word	0x200009d8

0800ce34 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ce34:	b480      	push	{r7}
 800ce36:	b087      	sub	sp, #28
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	60b9      	str	r1, [r7, #8]
 800ce3e:	4613      	mov	r3, r2
 800ce40:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ce42:	2300      	movs	r3, #0
 800ce44:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ce46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	371c      	adds	r7, #28
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr
	...

0800ce58 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800ce60:	4a04      	ldr	r2, [pc, #16]	@ (800ce74 <CDC_Attach_Rx+0x1c>)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6013      	str	r3, [r2, #0]
}
 800ce66:	bf00      	nop
 800ce68:	370c      	adds	r7, #12
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	200010b4 	.word	0x200010b4

0800ce78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b083      	sub	sp, #12
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	4603      	mov	r3, r0
 800ce80:	6039      	str	r1, [r7, #0]
 800ce82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	2212      	movs	r2, #18
 800ce88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ce8a:	4b03      	ldr	r3, [pc, #12]	@ (800ce98 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	370c      	adds	r7, #12
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr
 800ce98:	200000fc 	.word	0x200000fc

0800ce9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	4603      	mov	r3, r0
 800cea4:	6039      	str	r1, [r7, #0]
 800cea6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	2204      	movs	r2, #4
 800ceac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ceae:	4b03      	ldr	r3, [pc, #12]	@ (800cebc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	370c      	adds	r7, #12
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr
 800cebc:	20000110 	.word	0x20000110

0800cec0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	4603      	mov	r3, r0
 800cec8:	6039      	str	r1, [r7, #0]
 800ceca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cecc:	79fb      	ldrb	r3, [r7, #7]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d105      	bne.n	800cede <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	4907      	ldr	r1, [pc, #28]	@ (800cef4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ced6:	4808      	ldr	r0, [pc, #32]	@ (800cef8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ced8:	f7ff fd78 	bl	800c9cc <USBD_GetString>
 800cedc:	e004      	b.n	800cee8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cede:	683a      	ldr	r2, [r7, #0]
 800cee0:	4904      	ldr	r1, [pc, #16]	@ (800cef4 <USBD_FS_ProductStrDescriptor+0x34>)
 800cee2:	4805      	ldr	r0, [pc, #20]	@ (800cef8 <USBD_FS_ProductStrDescriptor+0x38>)
 800cee4:	f7ff fd72 	bl	800c9cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cee8:	4b02      	ldr	r3, [pc, #8]	@ (800cef4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3708      	adds	r7, #8
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	200010b8 	.word	0x200010b8
 800cef8:	0800d71c 	.word	0x0800d71c

0800cefc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	4603      	mov	r3, r0
 800cf04:	6039      	str	r1, [r7, #0]
 800cf06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cf08:	683a      	ldr	r2, [r7, #0]
 800cf0a:	4904      	ldr	r1, [pc, #16]	@ (800cf1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cf0c:	4804      	ldr	r0, [pc, #16]	@ (800cf20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cf0e:	f7ff fd5d 	bl	800c9cc <USBD_GetString>
  return USBD_StrDesc;
 800cf12:	4b02      	ldr	r3, [pc, #8]	@ (800cf1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3708      	adds	r7, #8
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	200010b8 	.word	0x200010b8
 800cf20:	0800d734 	.word	0x0800d734

0800cf24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	6039      	str	r1, [r7, #0]
 800cf2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	221a      	movs	r2, #26
 800cf34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cf36:	f000 f843 	bl	800cfc0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cf3a:	4b02      	ldr	r3, [pc, #8]	@ (800cf44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3708      	adds	r7, #8
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	20000114 	.word	0x20000114

0800cf48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	4603      	mov	r3, r0
 800cf50:	6039      	str	r1, [r7, #0]
 800cf52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cf54:	79fb      	ldrb	r3, [r7, #7]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d105      	bne.n	800cf66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf5a:	683a      	ldr	r2, [r7, #0]
 800cf5c:	4907      	ldr	r1, [pc, #28]	@ (800cf7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf5e:	4808      	ldr	r0, [pc, #32]	@ (800cf80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf60:	f7ff fd34 	bl	800c9cc <USBD_GetString>
 800cf64:	e004      	b.n	800cf70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf66:	683a      	ldr	r2, [r7, #0]
 800cf68:	4904      	ldr	r1, [pc, #16]	@ (800cf7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf6a:	4805      	ldr	r0, [pc, #20]	@ (800cf80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf6c:	f7ff fd2e 	bl	800c9cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf70:	4b02      	ldr	r3, [pc, #8]	@ (800cf7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3708      	adds	r7, #8
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	200010b8 	.word	0x200010b8
 800cf80:	0800d748 	.word	0x0800d748

0800cf84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b082      	sub	sp, #8
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	6039      	str	r1, [r7, #0]
 800cf8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf90:	79fb      	ldrb	r3, [r7, #7]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d105      	bne.n	800cfa2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf96:	683a      	ldr	r2, [r7, #0]
 800cf98:	4907      	ldr	r1, [pc, #28]	@ (800cfb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf9a:	4808      	ldr	r0, [pc, #32]	@ (800cfbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf9c:	f7ff fd16 	bl	800c9cc <USBD_GetString>
 800cfa0:	e004      	b.n	800cfac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cfa2:	683a      	ldr	r2, [r7, #0]
 800cfa4:	4904      	ldr	r1, [pc, #16]	@ (800cfb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cfa6:	4805      	ldr	r0, [pc, #20]	@ (800cfbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cfa8:	f7ff fd10 	bl	800c9cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800cfac:	4b02      	ldr	r3, [pc, #8]	@ (800cfb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cfae:	4618      	mov	r0, r3
 800cfb0:	3708      	adds	r7, #8
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
 800cfb6:	bf00      	nop
 800cfb8:	200010b8 	.word	0x200010b8
 800cfbc:	0800d754 	.word	0x0800d754

0800cfc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b084      	sub	sp, #16
 800cfc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cfc6:	4b0f      	ldr	r3, [pc, #60]	@ (800d004 <Get_SerialNum+0x44>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cfcc:	4b0e      	ldr	r3, [pc, #56]	@ (800d008 <Get_SerialNum+0x48>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cfd2:	4b0e      	ldr	r3, [pc, #56]	@ (800d00c <Get_SerialNum+0x4c>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cfd8:	68fa      	ldr	r2, [r7, #12]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	4413      	add	r3, r2
 800cfde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d009      	beq.n	800cffa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cfe6:	2208      	movs	r2, #8
 800cfe8:	4909      	ldr	r1, [pc, #36]	@ (800d010 <Get_SerialNum+0x50>)
 800cfea:	68f8      	ldr	r0, [r7, #12]
 800cfec:	f000 f814 	bl	800d018 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cff0:	2204      	movs	r2, #4
 800cff2:	4908      	ldr	r1, [pc, #32]	@ (800d014 <Get_SerialNum+0x54>)
 800cff4:	68b8      	ldr	r0, [r7, #8]
 800cff6:	f000 f80f 	bl	800d018 <IntToUnicode>
  }
}
 800cffa:	bf00      	nop
 800cffc:	3710      	adds	r7, #16
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
 800d002:	bf00      	nop
 800d004:	1fff7a10 	.word	0x1fff7a10
 800d008:	1fff7a14 	.word	0x1fff7a14
 800d00c:	1fff7a18 	.word	0x1fff7a18
 800d010:	20000116 	.word	0x20000116
 800d014:	20000126 	.word	0x20000126

0800d018 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d018:	b480      	push	{r7}
 800d01a:	b087      	sub	sp, #28
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	4613      	mov	r3, r2
 800d024:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d026:	2300      	movs	r3, #0
 800d028:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d02a:	2300      	movs	r3, #0
 800d02c:	75fb      	strb	r3, [r7, #23]
 800d02e:	e027      	b.n	800d080 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	0f1b      	lsrs	r3, r3, #28
 800d034:	2b09      	cmp	r3, #9
 800d036:	d80b      	bhi.n	800d050 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	0f1b      	lsrs	r3, r3, #28
 800d03c:	b2da      	uxtb	r2, r3
 800d03e:	7dfb      	ldrb	r3, [r7, #23]
 800d040:	005b      	lsls	r3, r3, #1
 800d042:	4619      	mov	r1, r3
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	440b      	add	r3, r1
 800d048:	3230      	adds	r2, #48	@ 0x30
 800d04a:	b2d2      	uxtb	r2, r2
 800d04c:	701a      	strb	r2, [r3, #0]
 800d04e:	e00a      	b.n	800d066 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	0f1b      	lsrs	r3, r3, #28
 800d054:	b2da      	uxtb	r2, r3
 800d056:	7dfb      	ldrb	r3, [r7, #23]
 800d058:	005b      	lsls	r3, r3, #1
 800d05a:	4619      	mov	r1, r3
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	440b      	add	r3, r1
 800d060:	3237      	adds	r2, #55	@ 0x37
 800d062:	b2d2      	uxtb	r2, r2
 800d064:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	011b      	lsls	r3, r3, #4
 800d06a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d06c:	7dfb      	ldrb	r3, [r7, #23]
 800d06e:	005b      	lsls	r3, r3, #1
 800d070:	3301      	adds	r3, #1
 800d072:	68ba      	ldr	r2, [r7, #8]
 800d074:	4413      	add	r3, r2
 800d076:	2200      	movs	r2, #0
 800d078:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d07a:	7dfb      	ldrb	r3, [r7, #23]
 800d07c:	3301      	adds	r3, #1
 800d07e:	75fb      	strb	r3, [r7, #23]
 800d080:	7dfa      	ldrb	r2, [r7, #23]
 800d082:	79fb      	ldrb	r3, [r7, #7]
 800d084:	429a      	cmp	r2, r3
 800d086:	d3d3      	bcc.n	800d030 <IntToUnicode+0x18>
  }
}
 800d088:	bf00      	nop
 800d08a:	bf00      	nop
 800d08c:	371c      	adds	r7, #28
 800d08e:	46bd      	mov	sp, r7
 800d090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d094:	4770      	bx	lr
	...

0800d098 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b08a      	sub	sp, #40	@ 0x28
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d0a0:	f107 0314 	add.w	r3, r7, #20
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	601a      	str	r2, [r3, #0]
 800d0a8:	605a      	str	r2, [r3, #4]
 800d0aa:	609a      	str	r2, [r3, #8]
 800d0ac:	60da      	str	r2, [r3, #12]
 800d0ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d0b8:	d13a      	bne.n	800d130 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	613b      	str	r3, [r7, #16]
 800d0be:	4b1e      	ldr	r3, [pc, #120]	@ (800d138 <HAL_PCD_MspInit+0xa0>)
 800d0c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0c2:	4a1d      	ldr	r2, [pc, #116]	@ (800d138 <HAL_PCD_MspInit+0xa0>)
 800d0c4:	f043 0301 	orr.w	r3, r3, #1
 800d0c8:	6313      	str	r3, [r2, #48]	@ 0x30
 800d0ca:	4b1b      	ldr	r3, [pc, #108]	@ (800d138 <HAL_PCD_MspInit+0xa0>)
 800d0cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0ce:	f003 0301 	and.w	r3, r3, #1
 800d0d2:	613b      	str	r3, [r7, #16]
 800d0d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d0d6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d0da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0dc:	2302      	movs	r3, #2
 800d0de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d0e4:	2303      	movs	r3, #3
 800d0e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d0e8:	230a      	movs	r3, #10
 800d0ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d0ec:	f107 0314 	add.w	r3, r7, #20
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	4812      	ldr	r0, [pc, #72]	@ (800d13c <HAL_PCD_MspInit+0xa4>)
 800d0f4:	f7f6 fd32 	bl	8003b5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d0f8:	4b0f      	ldr	r3, [pc, #60]	@ (800d138 <HAL_PCD_MspInit+0xa0>)
 800d0fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0fc:	4a0e      	ldr	r2, [pc, #56]	@ (800d138 <HAL_PCD_MspInit+0xa0>)
 800d0fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d102:	6353      	str	r3, [r2, #52]	@ 0x34
 800d104:	2300      	movs	r3, #0
 800d106:	60fb      	str	r3, [r7, #12]
 800d108:	4b0b      	ldr	r3, [pc, #44]	@ (800d138 <HAL_PCD_MspInit+0xa0>)
 800d10a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d10c:	4a0a      	ldr	r2, [pc, #40]	@ (800d138 <HAL_PCD_MspInit+0xa0>)
 800d10e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d112:	6453      	str	r3, [r2, #68]	@ 0x44
 800d114:	4b08      	ldr	r3, [pc, #32]	@ (800d138 <HAL_PCD_MspInit+0xa0>)
 800d116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d118:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d11c:	60fb      	str	r3, [r7, #12]
 800d11e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d120:	2200      	movs	r2, #0
 800d122:	2100      	movs	r1, #0
 800d124:	2043      	movs	r0, #67	@ 0x43
 800d126:	f7f6 f936 	bl	8003396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d12a:	2043      	movs	r0, #67	@ 0x43
 800d12c:	f7f6 f94f 	bl	80033ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d130:	bf00      	nop
 800d132:	3728      	adds	r7, #40	@ 0x28
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	40023800 	.word	0x40023800
 800d13c:	40020000 	.word	0x40020000

0800d140 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b082      	sub	sp, #8
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d154:	4619      	mov	r1, r3
 800d156:	4610      	mov	r0, r2
 800d158:	f7fe fabf 	bl	800b6da <USBD_LL_SetupStage>
}
 800d15c:	bf00      	nop
 800d15e:	3708      	adds	r7, #8
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b082      	sub	sp, #8
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	460b      	mov	r3, r1
 800d16e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d176:	78fa      	ldrb	r2, [r7, #3]
 800d178:	6879      	ldr	r1, [r7, #4]
 800d17a:	4613      	mov	r3, r2
 800d17c:	00db      	lsls	r3, r3, #3
 800d17e:	4413      	add	r3, r2
 800d180:	009b      	lsls	r3, r3, #2
 800d182:	440b      	add	r3, r1
 800d184:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	78fb      	ldrb	r3, [r7, #3]
 800d18c:	4619      	mov	r1, r3
 800d18e:	f7fe faf9 	bl	800b784 <USBD_LL_DataOutStage>
}
 800d192:	bf00      	nop
 800d194:	3708      	adds	r7, #8
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b082      	sub	sp, #8
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d1ac:	78fa      	ldrb	r2, [r7, #3]
 800d1ae:	6879      	ldr	r1, [r7, #4]
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	00db      	lsls	r3, r3, #3
 800d1b4:	4413      	add	r3, r2
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	440b      	add	r3, r1
 800d1ba:	3320      	adds	r3, #32
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	78fb      	ldrb	r3, [r7, #3]
 800d1c0:	4619      	mov	r1, r3
 800d1c2:	f7fe fb9b 	bl	800b8fc <USBD_LL_DataInStage>
}
 800d1c6:	bf00      	nop
 800d1c8:	3708      	adds	r7, #8
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b082      	sub	sp, #8
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7fe fcdf 	bl	800bba0 <USBD_LL_SOF>
}
 800d1e2:	bf00      	nop
 800d1e4:	3708      	adds	r7, #8
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b084      	sub	sp, #16
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	79db      	ldrb	r3, [r3, #7]
 800d1fa:	2b02      	cmp	r3, #2
 800d1fc:	d001      	beq.n	800d202 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d1fe:	f7f4 fa3d 	bl	800167c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d208:	7bfa      	ldrb	r2, [r7, #15]
 800d20a:	4611      	mov	r1, r2
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7fe fc83 	bl	800bb18 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d218:	4618      	mov	r0, r3
 800d21a:	f7fe fc2a 	bl	800ba72 <USBD_LL_Reset>
}
 800d21e:	bf00      	nop
 800d220:	3710      	adds	r7, #16
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
	...

0800d228 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d236:	4618      	mov	r0, r3
 800d238:	f7fe fc7e 	bl	800bb38 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	6812      	ldr	r2, [r2, #0]
 800d24a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d24e:	f043 0301 	orr.w	r3, r3, #1
 800d252:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	7adb      	ldrb	r3, [r3, #11]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d005      	beq.n	800d268 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d25c:	4b04      	ldr	r3, [pc, #16]	@ (800d270 <HAL_PCD_SuspendCallback+0x48>)
 800d25e:	691b      	ldr	r3, [r3, #16]
 800d260:	4a03      	ldr	r2, [pc, #12]	@ (800d270 <HAL_PCD_SuspendCallback+0x48>)
 800d262:	f043 0306 	orr.w	r3, r3, #6
 800d266:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d268:	bf00      	nop
 800d26a:	3708      	adds	r7, #8
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	e000ed00 	.word	0xe000ed00

0800d274 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d282:	4618      	mov	r0, r3
 800d284:	f7fe fc74 	bl	800bb70 <USBD_LL_Resume>
}
 800d288:	bf00      	nop
 800d28a:	3708      	adds	r7, #8
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	460b      	mov	r3, r1
 800d29a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d2a2:	78fa      	ldrb	r2, [r7, #3]
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7fe fccc 	bl	800bc44 <USBD_LL_IsoOUTIncomplete>
}
 800d2ac:	bf00      	nop
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	460b      	mov	r3, r1
 800d2be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d2c6:	78fa      	ldrb	r2, [r7, #3]
 800d2c8:	4611      	mov	r1, r2
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f7fe fc88 	bl	800bbe0 <USBD_LL_IsoINIncomplete>
}
 800d2d0:	bf00      	nop
 800d2d2:	3708      	adds	r7, #8
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7fe fcde 	bl	800bca8 <USBD_LL_DevConnected>
}
 800d2ec:	bf00      	nop
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d302:	4618      	mov	r0, r3
 800d304:	f7fe fcdb 	bl	800bcbe <USBD_LL_DevDisconnected>
}
 800d308:	bf00      	nop
 800d30a:	3708      	adds	r7, #8
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}

0800d310 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d13c      	bne.n	800d39a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d320:	4a20      	ldr	r2, [pc, #128]	@ (800d3a4 <USBD_LL_Init+0x94>)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	4a1e      	ldr	r2, [pc, #120]	@ (800d3a4 <USBD_LL_Init+0x94>)
 800d32c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d330:	4b1c      	ldr	r3, [pc, #112]	@ (800d3a4 <USBD_LL_Init+0x94>)
 800d332:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d336:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d338:	4b1a      	ldr	r3, [pc, #104]	@ (800d3a4 <USBD_LL_Init+0x94>)
 800d33a:	2204      	movs	r2, #4
 800d33c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d33e:	4b19      	ldr	r3, [pc, #100]	@ (800d3a4 <USBD_LL_Init+0x94>)
 800d340:	2202      	movs	r2, #2
 800d342:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d344:	4b17      	ldr	r3, [pc, #92]	@ (800d3a4 <USBD_LL_Init+0x94>)
 800d346:	2200      	movs	r2, #0
 800d348:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d34a:	4b16      	ldr	r3, [pc, #88]	@ (800d3a4 <USBD_LL_Init+0x94>)
 800d34c:	2202      	movs	r2, #2
 800d34e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d350:	4b14      	ldr	r3, [pc, #80]	@ (800d3a4 <USBD_LL_Init+0x94>)
 800d352:	2200      	movs	r2, #0
 800d354:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d356:	4b13      	ldr	r3, [pc, #76]	@ (800d3a4 <USBD_LL_Init+0x94>)
 800d358:	2200      	movs	r2, #0
 800d35a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d35c:	4b11      	ldr	r3, [pc, #68]	@ (800d3a4 <USBD_LL_Init+0x94>)
 800d35e:	2200      	movs	r2, #0
 800d360:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d362:	4b10      	ldr	r3, [pc, #64]	@ (800d3a4 <USBD_LL_Init+0x94>)
 800d364:	2200      	movs	r2, #0
 800d366:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d368:	4b0e      	ldr	r3, [pc, #56]	@ (800d3a4 <USBD_LL_Init+0x94>)
 800d36a:	2200      	movs	r2, #0
 800d36c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d36e:	480d      	ldr	r0, [pc, #52]	@ (800d3a4 <USBD_LL_Init+0x94>)
 800d370:	f7f9 fd43 	bl	8006dfa <HAL_PCD_Init>
 800d374:	4603      	mov	r3, r0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d001      	beq.n	800d37e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d37a:	f7f4 f97f 	bl	800167c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d37e:	2180      	movs	r1, #128	@ 0x80
 800d380:	4808      	ldr	r0, [pc, #32]	@ (800d3a4 <USBD_LL_Init+0x94>)
 800d382:	f7fa ff70 	bl	8008266 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d386:	2240      	movs	r2, #64	@ 0x40
 800d388:	2100      	movs	r1, #0
 800d38a:	4806      	ldr	r0, [pc, #24]	@ (800d3a4 <USBD_LL_Init+0x94>)
 800d38c:	f7fa ff24 	bl	80081d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d390:	2280      	movs	r2, #128	@ 0x80
 800d392:	2101      	movs	r1, #1
 800d394:	4803      	ldr	r0, [pc, #12]	@ (800d3a4 <USBD_LL_Init+0x94>)
 800d396:	f7fa ff1f 	bl	80081d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d39a:	2300      	movs	r3, #0
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3708      	adds	r7, #8
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	200012b8 	.word	0x200012b8

0800d3a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7f9 fe2a 	bl	8007018 <HAL_PCD_Start>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3c8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f000 f942 	bl	800d654 <USBD_Get_USB_Status>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d3de:	b580      	push	{r7, lr}
 800d3e0:	b084      	sub	sp, #16
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
 800d3e6:	4608      	mov	r0, r1
 800d3e8:	4611      	mov	r1, r2
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	70fb      	strb	r3, [r7, #3]
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	70bb      	strb	r3, [r7, #2]
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d406:	78bb      	ldrb	r3, [r7, #2]
 800d408:	883a      	ldrh	r2, [r7, #0]
 800d40a:	78f9      	ldrb	r1, [r7, #3]
 800d40c:	f7fa fafe 	bl	8007a0c <HAL_PCD_EP_Open>
 800d410:	4603      	mov	r3, r0
 800d412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d414:	7bfb      	ldrb	r3, [r7, #15]
 800d416:	4618      	mov	r0, r3
 800d418:	f000 f91c 	bl	800d654 <USBD_Get_USB_Status>
 800d41c:	4603      	mov	r3, r0
 800d41e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d420:	7bbb      	ldrb	r3, [r7, #14]
}
 800d422:	4618      	mov	r0, r3
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}

0800d42a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b084      	sub	sp, #16
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
 800d432:	460b      	mov	r3, r1
 800d434:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d436:	2300      	movs	r3, #0
 800d438:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d43a:	2300      	movs	r3, #0
 800d43c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d444:	78fa      	ldrb	r2, [r7, #3]
 800d446:	4611      	mov	r1, r2
 800d448:	4618      	mov	r0, r3
 800d44a:	f7fa fb49 	bl	8007ae0 <HAL_PCD_EP_Close>
 800d44e:	4603      	mov	r3, r0
 800d450:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d452:	7bfb      	ldrb	r3, [r7, #15]
 800d454:	4618      	mov	r0, r3
 800d456:	f000 f8fd 	bl	800d654 <USBD_Get_USB_Status>
 800d45a:	4603      	mov	r3, r0
 800d45c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d45e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d460:	4618      	mov	r0, r3
 800d462:	3710      	adds	r7, #16
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	460b      	mov	r3, r1
 800d472:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d474:	2300      	movs	r3, #0
 800d476:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d478:	2300      	movs	r3, #0
 800d47a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d482:	78fa      	ldrb	r2, [r7, #3]
 800d484:	4611      	mov	r1, r2
 800d486:	4618      	mov	r0, r3
 800d488:	f7fa fc01 	bl	8007c8e <HAL_PCD_EP_SetStall>
 800d48c:	4603      	mov	r3, r0
 800d48e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d490:	7bfb      	ldrb	r3, [r7, #15]
 800d492:	4618      	mov	r0, r3
 800d494:	f000 f8de 	bl	800d654 <USBD_Get_USB_Status>
 800d498:	4603      	mov	r3, r0
 800d49a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d49c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}

0800d4a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4a6:	b580      	push	{r7, lr}
 800d4a8:	b084      	sub	sp, #16
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	6078      	str	r0, [r7, #4]
 800d4ae:	460b      	mov	r3, r1
 800d4b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d4c0:	78fa      	ldrb	r2, [r7, #3]
 800d4c2:	4611      	mov	r1, r2
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7fa fc45 	bl	8007d54 <HAL_PCD_EP_ClrStall>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4ce:	7bfb      	ldrb	r3, [r7, #15]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f000 f8bf 	bl	800d654 <USBD_Get_USB_Status>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4da:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3710      	adds	r7, #16
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b085      	sub	sp, #20
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d4f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d4f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	da0b      	bge.n	800d518 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d500:	78fb      	ldrb	r3, [r7, #3]
 800d502:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d506:	68f9      	ldr	r1, [r7, #12]
 800d508:	4613      	mov	r3, r2
 800d50a:	00db      	lsls	r3, r3, #3
 800d50c:	4413      	add	r3, r2
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	440b      	add	r3, r1
 800d512:	3316      	adds	r3, #22
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	e00b      	b.n	800d530 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d518:	78fb      	ldrb	r3, [r7, #3]
 800d51a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d51e:	68f9      	ldr	r1, [r7, #12]
 800d520:	4613      	mov	r3, r2
 800d522:	00db      	lsls	r3, r3, #3
 800d524:	4413      	add	r3, r2
 800d526:	009b      	lsls	r3, r3, #2
 800d528:	440b      	add	r3, r1
 800d52a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d52e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d530:	4618      	mov	r0, r3
 800d532:	3714      	adds	r7, #20
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b084      	sub	sp, #16
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	460b      	mov	r3, r1
 800d546:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d548:	2300      	movs	r3, #0
 800d54a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d54c:	2300      	movs	r3, #0
 800d54e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d556:	78fa      	ldrb	r2, [r7, #3]
 800d558:	4611      	mov	r1, r2
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7fa fa32 	bl	80079c4 <HAL_PCD_SetAddress>
 800d560:	4603      	mov	r3, r0
 800d562:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d564:	7bfb      	ldrb	r3, [r7, #15]
 800d566:	4618      	mov	r0, r3
 800d568:	f000 f874 	bl	800d654 <USBD_Get_USB_Status>
 800d56c:	4603      	mov	r3, r0
 800d56e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d570:	7bbb      	ldrb	r3, [r7, #14]
}
 800d572:	4618      	mov	r0, r3
 800d574:	3710      	adds	r7, #16
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}

0800d57a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d57a:	b580      	push	{r7, lr}
 800d57c:	b086      	sub	sp, #24
 800d57e:	af00      	add	r7, sp, #0
 800d580:	60f8      	str	r0, [r7, #12]
 800d582:	607a      	str	r2, [r7, #4]
 800d584:	603b      	str	r3, [r7, #0]
 800d586:	460b      	mov	r3, r1
 800d588:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d58a:	2300      	movs	r3, #0
 800d58c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d58e:	2300      	movs	r3, #0
 800d590:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d598:	7af9      	ldrb	r1, [r7, #11]
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	f7fa fb3c 	bl	8007c1a <HAL_PCD_EP_Transmit>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5a6:	7dfb      	ldrb	r3, [r7, #23]
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f000 f853 	bl	800d654 <USBD_Get_USB_Status>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d5b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3718      	adds	r7, #24
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b086      	sub	sp, #24
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	607a      	str	r2, [r7, #4]
 800d5c6:	603b      	str	r3, [r7, #0]
 800d5c8:	460b      	mov	r3, r1
 800d5ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d5da:	7af9      	ldrb	r1, [r7, #11]
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	f7fa fac8 	bl	8007b74 <HAL_PCD_EP_Receive>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5e8:	7dfb      	ldrb	r3, [r7, #23]
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f000 f832 	bl	800d654 <USBD_Get_USB_Status>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d5f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3718      	adds	r7, #24
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b082      	sub	sp, #8
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
 800d606:	460b      	mov	r3, r1
 800d608:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d610:	78fa      	ldrb	r2, [r7, #3]
 800d612:	4611      	mov	r1, r2
 800d614:	4618      	mov	r0, r3
 800d616:	f7fa fae8 	bl	8007bea <HAL_PCD_EP_GetRxCount>
 800d61a:	4603      	mov	r3, r0
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3708      	adds	r7, #8
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d62c:	4b03      	ldr	r3, [pc, #12]	@ (800d63c <USBD_static_malloc+0x18>)
}
 800d62e:	4618      	mov	r0, r3
 800d630:	370c      	adds	r7, #12
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr
 800d63a:	bf00      	nop
 800d63c:	2000179c 	.word	0x2000179c

0800d640 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]

}
 800d648:	bf00      	nop
 800d64a:	370c      	adds	r7, #12
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d654:	b480      	push	{r7}
 800d656:	b085      	sub	sp, #20
 800d658:	af00      	add	r7, sp, #0
 800d65a:	4603      	mov	r3, r0
 800d65c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d65e:	2300      	movs	r3, #0
 800d660:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d662:	79fb      	ldrb	r3, [r7, #7]
 800d664:	2b03      	cmp	r3, #3
 800d666:	d817      	bhi.n	800d698 <USBD_Get_USB_Status+0x44>
 800d668:	a201      	add	r2, pc, #4	@ (adr r2, 800d670 <USBD_Get_USB_Status+0x1c>)
 800d66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d66e:	bf00      	nop
 800d670:	0800d681 	.word	0x0800d681
 800d674:	0800d687 	.word	0x0800d687
 800d678:	0800d68d 	.word	0x0800d68d
 800d67c:	0800d693 	.word	0x0800d693
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d680:	2300      	movs	r3, #0
 800d682:	73fb      	strb	r3, [r7, #15]
    break;
 800d684:	e00b      	b.n	800d69e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d686:	2303      	movs	r3, #3
 800d688:	73fb      	strb	r3, [r7, #15]
    break;
 800d68a:	e008      	b.n	800d69e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d68c:	2301      	movs	r3, #1
 800d68e:	73fb      	strb	r3, [r7, #15]
    break;
 800d690:	e005      	b.n	800d69e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d692:	2303      	movs	r3, #3
 800d694:	73fb      	strb	r3, [r7, #15]
    break;
 800d696:	e002      	b.n	800d69e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d698:	2303      	movs	r3, #3
 800d69a:	73fb      	strb	r3, [r7, #15]
    break;
 800d69c:	bf00      	nop
  }
  return usb_status;
 800d69e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3714      	adds	r7, #20
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <memset>:
 800d6ac:	4402      	add	r2, r0
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d100      	bne.n	800d6b6 <memset+0xa>
 800d6b4:	4770      	bx	lr
 800d6b6:	f803 1b01 	strb.w	r1, [r3], #1
 800d6ba:	e7f9      	b.n	800d6b0 <memset+0x4>

0800d6bc <__libc_init_array>:
 800d6bc:	b570      	push	{r4, r5, r6, lr}
 800d6be:	4d0d      	ldr	r5, [pc, #52]	@ (800d6f4 <__libc_init_array+0x38>)
 800d6c0:	4c0d      	ldr	r4, [pc, #52]	@ (800d6f8 <__libc_init_array+0x3c>)
 800d6c2:	1b64      	subs	r4, r4, r5
 800d6c4:	10a4      	asrs	r4, r4, #2
 800d6c6:	2600      	movs	r6, #0
 800d6c8:	42a6      	cmp	r6, r4
 800d6ca:	d109      	bne.n	800d6e0 <__libc_init_array+0x24>
 800d6cc:	4d0b      	ldr	r5, [pc, #44]	@ (800d6fc <__libc_init_array+0x40>)
 800d6ce:	4c0c      	ldr	r4, [pc, #48]	@ (800d700 <__libc_init_array+0x44>)
 800d6d0:	f000 f818 	bl	800d704 <_init>
 800d6d4:	1b64      	subs	r4, r4, r5
 800d6d6:	10a4      	asrs	r4, r4, #2
 800d6d8:	2600      	movs	r6, #0
 800d6da:	42a6      	cmp	r6, r4
 800d6dc:	d105      	bne.n	800d6ea <__libc_init_array+0x2e>
 800d6de:	bd70      	pop	{r4, r5, r6, pc}
 800d6e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6e4:	4798      	blx	r3
 800d6e6:	3601      	adds	r6, #1
 800d6e8:	e7ee      	b.n	800d6c8 <__libc_init_array+0xc>
 800d6ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6ee:	4798      	blx	r3
 800d6f0:	3601      	adds	r6, #1
 800d6f2:	e7f2      	b.n	800d6da <__libc_init_array+0x1e>
 800d6f4:	0800d79c 	.word	0x0800d79c
 800d6f8:	0800d79c 	.word	0x0800d79c
 800d6fc:	0800d79c 	.word	0x0800d79c
 800d700:	0800d7a0 	.word	0x0800d7a0

0800d704 <_init>:
 800d704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d706:	bf00      	nop
 800d708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d70a:	bc08      	pop	{r3}
 800d70c:	469e      	mov	lr, r3
 800d70e:	4770      	bx	lr

0800d710 <_fini>:
 800d710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d712:	bf00      	nop
 800d714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d716:	bc08      	pop	{r3}
 800d718:	469e      	mov	lr, r3
 800d71a:	4770      	bx	lr
