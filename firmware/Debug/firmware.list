
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9ac  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800db44  0800db44  0000eb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbbc  0800dbbc  0000f130  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dbbc  0800dbbc  0000ebbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbc4  0800dbc4  0000f130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbc4  0800dbc4  0000ebc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dbc8  0800dbc8  0000ebc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000130  20000000  0800dbcc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001944  20000130  0800dcfc  0000f130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a74  0800dcfc  0000fa74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a660  00000000  00000000  0000f160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041c1  00000000  00000000  000297c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001838  00000000  00000000  0002d988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012b4  00000000  00000000  0002f1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000620b  00000000  00000000  00030474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f09f  00000000  00000000  0003667f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fac6  00000000  00000000  0005571e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f51e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006774  00000000  00000000  000f5228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000fb99c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000130 	.word	0x20000130
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800db2c 	.word	0x0800db2c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000134 	.word	0x20000134
 80001d4:	0800db2c 	.word	0x0800db2c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b988 	b.w	8000cec <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9d08      	ldr	r5, [sp, #32]
 80009fa:	468e      	mov	lr, r1
 80009fc:	4604      	mov	r4, r0
 80009fe:	4688      	mov	r8, r1
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d14a      	bne.n	8000a9a <__udivmoddi4+0xa6>
 8000a04:	428a      	cmp	r2, r1
 8000a06:	4617      	mov	r7, r2
 8000a08:	d962      	bls.n	8000ad0 <__udivmoddi4+0xdc>
 8000a0a:	fab2 f682 	clz	r6, r2
 8000a0e:	b14e      	cbz	r6, 8000a24 <__udivmoddi4+0x30>
 8000a10:	f1c6 0320 	rsb	r3, r6, #32
 8000a14:	fa01 f806 	lsl.w	r8, r1, r6
 8000a18:	fa20 f303 	lsr.w	r3, r0, r3
 8000a1c:	40b7      	lsls	r7, r6
 8000a1e:	ea43 0808 	orr.w	r8, r3, r8
 8000a22:	40b4      	lsls	r4, r6
 8000a24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a28:	fa1f fc87 	uxth.w	ip, r7
 8000a2c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a30:	0c23      	lsrs	r3, r4, #16
 8000a32:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a3a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d909      	bls.n	8000a56 <__udivmoddi4+0x62>
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a48:	f080 80ea 	bcs.w	8000c20 <__udivmoddi4+0x22c>
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	f240 80e7 	bls.w	8000c20 <__udivmoddi4+0x22c>
 8000a52:	3902      	subs	r1, #2
 8000a54:	443b      	add	r3, r7
 8000a56:	1a9a      	subs	r2, r3, r2
 8000a58:	b2a3      	uxth	r3, r4
 8000a5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a66:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a6a:	459c      	cmp	ip, r3
 8000a6c:	d909      	bls.n	8000a82 <__udivmoddi4+0x8e>
 8000a6e:	18fb      	adds	r3, r7, r3
 8000a70:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a74:	f080 80d6 	bcs.w	8000c24 <__udivmoddi4+0x230>
 8000a78:	459c      	cmp	ip, r3
 8000a7a:	f240 80d3 	bls.w	8000c24 <__udivmoddi4+0x230>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3802      	subs	r0, #2
 8000a82:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a86:	eba3 030c 	sub.w	r3, r3, ip
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	b11d      	cbz	r5, 8000a96 <__udivmoddi4+0xa2>
 8000a8e:	40f3      	lsrs	r3, r6
 8000a90:	2200      	movs	r2, #0
 8000a92:	e9c5 3200 	strd	r3, r2, [r5]
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d905      	bls.n	8000aaa <__udivmoddi4+0xb6>
 8000a9e:	b10d      	cbz	r5, 8000aa4 <__udivmoddi4+0xb0>
 8000aa0:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4608      	mov	r0, r1
 8000aa8:	e7f5      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000aaa:	fab3 f183 	clz	r1, r3
 8000aae:	2900      	cmp	r1, #0
 8000ab0:	d146      	bne.n	8000b40 <__udivmoddi4+0x14c>
 8000ab2:	4573      	cmp	r3, lr
 8000ab4:	d302      	bcc.n	8000abc <__udivmoddi4+0xc8>
 8000ab6:	4282      	cmp	r2, r0
 8000ab8:	f200 8105 	bhi.w	8000cc6 <__udivmoddi4+0x2d2>
 8000abc:	1a84      	subs	r4, r0, r2
 8000abe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	4690      	mov	r8, r2
 8000ac6:	2d00      	cmp	r5, #0
 8000ac8:	d0e5      	beq.n	8000a96 <__udivmoddi4+0xa2>
 8000aca:	e9c5 4800 	strd	r4, r8, [r5]
 8000ace:	e7e2      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	f000 8090 	beq.w	8000bf6 <__udivmoddi4+0x202>
 8000ad6:	fab2 f682 	clz	r6, r2
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	f040 80a4 	bne.w	8000c28 <__udivmoddi4+0x234>
 8000ae0:	1a8a      	subs	r2, r1, r2
 8000ae2:	0c03      	lsrs	r3, r0, #16
 8000ae4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ae8:	b280      	uxth	r0, r0
 8000aea:	b2bc      	uxth	r4, r7
 8000aec:	2101      	movs	r1, #1
 8000aee:	fbb2 fcfe 	udiv	ip, r2, lr
 8000af2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000af6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000afa:	fb04 f20c 	mul.w	r2, r4, ip
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d907      	bls.n	8000b12 <__udivmoddi4+0x11e>
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000b08:	d202      	bcs.n	8000b10 <__udivmoddi4+0x11c>
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	f200 80e0 	bhi.w	8000cd0 <__udivmoddi4+0x2dc>
 8000b10:	46c4      	mov	ip, r8
 8000b12:	1a9b      	subs	r3, r3, r2
 8000b14:	fbb3 f2fe 	udiv	r2, r3, lr
 8000b18:	fb0e 3312 	mls	r3, lr, r2, r3
 8000b1c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000b20:	fb02 f404 	mul.w	r4, r2, r4
 8000b24:	429c      	cmp	r4, r3
 8000b26:	d907      	bls.n	8000b38 <__udivmoddi4+0x144>
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000b2e:	d202      	bcs.n	8000b36 <__udivmoddi4+0x142>
 8000b30:	429c      	cmp	r4, r3
 8000b32:	f200 80ca 	bhi.w	8000cca <__udivmoddi4+0x2d6>
 8000b36:	4602      	mov	r2, r0
 8000b38:	1b1b      	subs	r3, r3, r4
 8000b3a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b3e:	e7a5      	b.n	8000a8c <__udivmoddi4+0x98>
 8000b40:	f1c1 0620 	rsb	r6, r1, #32
 8000b44:	408b      	lsls	r3, r1
 8000b46:	fa22 f706 	lsr.w	r7, r2, r6
 8000b4a:	431f      	orrs	r7, r3
 8000b4c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b50:	fa20 f306 	lsr.w	r3, r0, r6
 8000b54:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b58:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b5c:	4323      	orrs	r3, r4
 8000b5e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b62:	fa1f fc87 	uxth.w	ip, r7
 8000b66:	fbbe f0f9 	udiv	r0, lr, r9
 8000b6a:	0c1c      	lsrs	r4, r3, #16
 8000b6c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b70:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b74:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b78:	45a6      	cmp	lr, r4
 8000b7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x1a0>
 8000b80:	193c      	adds	r4, r7, r4
 8000b82:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b86:	f080 809c 	bcs.w	8000cc2 <__udivmoddi4+0x2ce>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	f240 8099 	bls.w	8000cc2 <__udivmoddi4+0x2ce>
 8000b90:	3802      	subs	r0, #2
 8000b92:	443c      	add	r4, r7
 8000b94:	eba4 040e 	sub.w	r4, r4, lr
 8000b98:	fa1f fe83 	uxth.w	lr, r3
 8000b9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ba0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ba8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bac:	45a4      	cmp	ip, r4
 8000bae:	d908      	bls.n	8000bc2 <__udivmoddi4+0x1ce>
 8000bb0:	193c      	adds	r4, r7, r4
 8000bb2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000bb6:	f080 8082 	bcs.w	8000cbe <__udivmoddi4+0x2ca>
 8000bba:	45a4      	cmp	ip, r4
 8000bbc:	d97f      	bls.n	8000cbe <__udivmoddi4+0x2ca>
 8000bbe:	3b02      	subs	r3, #2
 8000bc0:	443c      	add	r4, r7
 8000bc2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000bc6:	eba4 040c 	sub.w	r4, r4, ip
 8000bca:	fba0 ec02 	umull	lr, ip, r0, r2
 8000bce:	4564      	cmp	r4, ip
 8000bd0:	4673      	mov	r3, lr
 8000bd2:	46e1      	mov	r9, ip
 8000bd4:	d362      	bcc.n	8000c9c <__udivmoddi4+0x2a8>
 8000bd6:	d05f      	beq.n	8000c98 <__udivmoddi4+0x2a4>
 8000bd8:	b15d      	cbz	r5, 8000bf2 <__udivmoddi4+0x1fe>
 8000bda:	ebb8 0203 	subs.w	r2, r8, r3
 8000bde:	eb64 0409 	sbc.w	r4, r4, r9
 8000be2:	fa04 f606 	lsl.w	r6, r4, r6
 8000be6:	fa22 f301 	lsr.w	r3, r2, r1
 8000bea:	431e      	orrs	r6, r3
 8000bec:	40cc      	lsrs	r4, r1
 8000bee:	e9c5 6400 	strd	r6, r4, [r5]
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	e74f      	b.n	8000a96 <__udivmoddi4+0xa2>
 8000bf6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bfa:	0c01      	lsrs	r1, r0, #16
 8000bfc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000c00:	b280      	uxth	r0, r0
 8000c02:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000c06:	463b      	mov	r3, r7
 8000c08:	4638      	mov	r0, r7
 8000c0a:	463c      	mov	r4, r7
 8000c0c:	46b8      	mov	r8, r7
 8000c0e:	46be      	mov	lr, r7
 8000c10:	2620      	movs	r6, #32
 8000c12:	fbb1 f1f7 	udiv	r1, r1, r7
 8000c16:	eba2 0208 	sub.w	r2, r2, r8
 8000c1a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c1e:	e766      	b.n	8000aee <__udivmoddi4+0xfa>
 8000c20:	4601      	mov	r1, r0
 8000c22:	e718      	b.n	8000a56 <__udivmoddi4+0x62>
 8000c24:	4610      	mov	r0, r2
 8000c26:	e72c      	b.n	8000a82 <__udivmoddi4+0x8e>
 8000c28:	f1c6 0220 	rsb	r2, r6, #32
 8000c2c:	fa2e f302 	lsr.w	r3, lr, r2
 8000c30:	40b7      	lsls	r7, r6
 8000c32:	40b1      	lsls	r1, r6
 8000c34:	fa20 f202 	lsr.w	r2, r0, r2
 8000c38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c42:	b2bc      	uxth	r4, r7
 8000c44:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c48:	0c11      	lsrs	r1, r2, #16
 8000c4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4e:	fb08 f904 	mul.w	r9, r8, r4
 8000c52:	40b0      	lsls	r0, r6
 8000c54:	4589      	cmp	r9, r1
 8000c56:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c5a:	b280      	uxth	r0, r0
 8000c5c:	d93e      	bls.n	8000cdc <__udivmoddi4+0x2e8>
 8000c5e:	1879      	adds	r1, r7, r1
 8000c60:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c64:	d201      	bcs.n	8000c6a <__udivmoddi4+0x276>
 8000c66:	4589      	cmp	r9, r1
 8000c68:	d81f      	bhi.n	8000caa <__udivmoddi4+0x2b6>
 8000c6a:	eba1 0109 	sub.w	r1, r1, r9
 8000c6e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c72:	fb09 f804 	mul.w	r8, r9, r4
 8000c76:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c7a:	b292      	uxth	r2, r2
 8000c7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c80:	4542      	cmp	r2, r8
 8000c82:	d229      	bcs.n	8000cd8 <__udivmoddi4+0x2e4>
 8000c84:	18ba      	adds	r2, r7, r2
 8000c86:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c8a:	d2c4      	bcs.n	8000c16 <__udivmoddi4+0x222>
 8000c8c:	4542      	cmp	r2, r8
 8000c8e:	d2c2      	bcs.n	8000c16 <__udivmoddi4+0x222>
 8000c90:	f1a9 0102 	sub.w	r1, r9, #2
 8000c94:	443a      	add	r2, r7
 8000c96:	e7be      	b.n	8000c16 <__udivmoddi4+0x222>
 8000c98:	45f0      	cmp	r8, lr
 8000c9a:	d29d      	bcs.n	8000bd8 <__udivmoddi4+0x1e4>
 8000c9c:	ebbe 0302 	subs.w	r3, lr, r2
 8000ca0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ca4:	3801      	subs	r0, #1
 8000ca6:	46e1      	mov	r9, ip
 8000ca8:	e796      	b.n	8000bd8 <__udivmoddi4+0x1e4>
 8000caa:	eba7 0909 	sub.w	r9, r7, r9
 8000cae:	4449      	add	r1, r9
 8000cb0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000cb4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cb8:	fb09 f804 	mul.w	r8, r9, r4
 8000cbc:	e7db      	b.n	8000c76 <__udivmoddi4+0x282>
 8000cbe:	4673      	mov	r3, lr
 8000cc0:	e77f      	b.n	8000bc2 <__udivmoddi4+0x1ce>
 8000cc2:	4650      	mov	r0, sl
 8000cc4:	e766      	b.n	8000b94 <__udivmoddi4+0x1a0>
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	e6fd      	b.n	8000ac6 <__udivmoddi4+0xd2>
 8000cca:	443b      	add	r3, r7
 8000ccc:	3a02      	subs	r2, #2
 8000cce:	e733      	b.n	8000b38 <__udivmoddi4+0x144>
 8000cd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cd4:	443b      	add	r3, r7
 8000cd6:	e71c      	b.n	8000b12 <__udivmoddi4+0x11e>
 8000cd8:	4649      	mov	r1, r9
 8000cda:	e79c      	b.n	8000c16 <__udivmoddi4+0x222>
 8000cdc:	eba1 0109 	sub.w	r1, r1, r9
 8000ce0:	46c4      	mov	ip, r8
 8000ce2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ce6:	fb09 f804 	mul.w	r8, r9, r4
 8000cea:	e7c4      	b.n	8000c76 <__udivmoddi4+0x282>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	//Revisar tiempos de ejecución de esta sección con respecto a la mpu
	for (int i = 0; i < 8; i++) {
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	e00a      	b.n	8000d14 <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <HAL_ADC_ConvCpltCallback+0x38>)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d06:	4a09      	ldr	r2, [pc, #36]	@ (8000d2c <HAL_ADC_ConvCpltCallback+0x3c>)
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	3301      	adds	r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b07      	cmp	r3, #7
 8000d18:	ddf1      	ble.n	8000cfe <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	200003e4 	.word	0x200003e4
 8000d2c:	200003f4 	.word	0x200003f4

08000d30 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){ //Pantalla
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	ssd1306_TxCplt = 1;
 8000d38:	4b04      	ldr	r3, [pc, #16]	@ (8000d4c <HAL_I2C_MemTxCpltCallback+0x1c>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20000621 	.word	0x20000621

08000d50 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){ //MPU
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = 1;
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <HAL_I2C_MemRxCpltCallback+0x1c>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000622 	.word	0x20000622

08000d70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) { //250us
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a18      	ldr	r2, [pc, #96]	@ (8000de0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d116      	bne.n	8000db0 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000d82:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	3301      	adds	r3, #1
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b16      	ldr	r3, [pc, #88]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d8c:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b28      	cmp	r3, #40	@ 0x28
 8000d94:	d107      	bne.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 8000d96:	4b13      	ldr	r3, [pc, #76]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	701a      	strb	r2, [r3, #0]
			IS10MS=TRUE;
 8000d9c:	4a12      	ldr	r2, [pc, #72]	@ (8000de8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d9e:	7813      	ldrb	r3, [r2, #0]
 8000da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000da4:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 8000da6:	2208      	movs	r2, #8
 8000da8:	4910      	ldr	r1, [pc, #64]	@ (8000dec <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000daa:	4811      	ldr	r0, [pc, #68]	@ (8000df0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000dac:	f002 f960 	bl	8003070 <HAL_ADC_Start_DMA>
	}

	if(htim->Instance == TIM2){ //20ms
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000db8:	d104      	bne.n	8000dc4 <HAL_TIM_PeriodElapsedCallback+0x54>
		ONMPU=TRUE;
 8000dba:	4a0b      	ldr	r2, [pc, #44]	@ (8000de8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000dbc:	7813      	ldrb	r3, [r2, #0]
 8000dbe:	f043 0302 	orr.w	r3, r3, #2
 8000dc2:	7013      	strb	r3, [r2, #0]
	}

	if(htim->Instance ==TIM3){ //100ms
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d104      	bne.n	8000dd8 <HAL_TIM_PeriodElapsedCallback+0x68>
		ONDISPLAY=TRUE;
 8000dce:	4a06      	ldr	r2, [pc, #24]	@ (8000de8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000dd0:	7813      	ldrb	r3, [r2, #0]
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	7013      	strb	r3, [r2, #0]
	}
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40010000 	.word	0x40010000
 8000de4:	200003e0 	.word	0x200003e0
 8000de8:	20000620 	.word	0x20000620
 8000dec:	200003e4 	.word	0x200003e4
 8000df0:	2000014c 	.word	0x2000014c
 8000df4:	40000400 	.word	0x40000400

08000df8 <USBRxData>:


void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 8000df8:	b490      	push	{r4, r7}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000e02:	2300      	movs	r3, #0
 8000e04:	73fb      	strb	r3, [r7, #15]
 8000e06:	e018      	b.n	8000e3a <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	441a      	add	r2, r3
 8000e0e:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <USBRxData+0x58>)
 8000e10:	6819      	ldr	r1, [r3, #0]
 8000e12:	4b0f      	ldr	r3, [pc, #60]	@ (8000e50 <USBRxData+0x58>)
 8000e14:	795b      	ldrb	r3, [r3, #5]
 8000e16:	1c58      	adds	r0, r3, #1
 8000e18:	b2c4      	uxtb	r4, r0
 8000e1a:	480d      	ldr	r0, [pc, #52]	@ (8000e50 <USBRxData+0x58>)
 8000e1c:	7144      	strb	r4, [r0, #5]
 8000e1e:	440b      	add	r3, r1
 8000e20:	7812      	ldrb	r2, [r2, #0]
 8000e22:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 8000e24:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <USBRxData+0x58>)
 8000e26:	795a      	ldrb	r2, [r3, #5]
 8000e28:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <USBRxData+0x58>)
 8000e2a:	799b      	ldrb	r3, [r3, #6]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <USBRxData+0x58>)
 8000e32:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
 8000e36:	3301      	adds	r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	683a      	ldr	r2, [r7, #0]
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d8e2      	bhi.n	8000e08 <USBRxData+0x10>
	}

}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc90      	pop	{r4, r7}
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000410 	.word	0x20000410

08000e54 <USBTask>:

void USBTask() {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b0c2      	sub	sp, #264	@ 0x108
 8000e58:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 8000e5a:	4b22      	ldr	r3, [pc, #136]	@ (8000ee4 <USBTask+0x90>)
 8000e5c:	791a      	ldrb	r2, [r3, #4]
 8000e5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ee4 <USBTask+0x90>)
 8000e60:	795b      	ldrb	r3, [r3, #5]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d039      	beq.n	8000eda <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (unerPrtcl_DecodeHeader(&USBRx))
 8000e66:	481f      	ldr	r0, [pc, #124]	@ (8000ee4 <USBTask+0x90>)
 8000e68:	f001 fdb8 	bl	80029dc <unerPrtcl_DecodeHeader>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 8000e72:	491d      	ldr	r1, [pc, #116]	@ (8000ee8 <USBTask+0x94>)
 8000e74:	481b      	ldr	r0, [pc, #108]	@ (8000ee4 <USBTask+0x90>)
 8000e76:	f000 f839 	bl	8000eec <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000e80:	e01d      	b.n	8000ebe <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 8000e82:	4b19      	ldr	r3, [pc, #100]	@ (8000ee8 <USBTask+0x94>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b18      	ldr	r3, [pc, #96]	@ (8000ee8 <USBTask+0x94>)
 8000e88:	7a1b      	ldrb	r3, [r3, #8]
 8000e8a:	1c59      	adds	r1, r3, #1
 8000e8c:	b2c8      	uxtb	r0, r1
 8000e8e:	4916      	ldr	r1, [pc, #88]	@ (8000ee8 <USBTask+0x94>)
 8000e90:	7208      	strb	r0, [r1, #8]
 8000e92:	441a      	add	r2, r3
 8000e94:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000e98:	7811      	ldrb	r1, [r2, #0]
 8000e9a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000e9e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000ea2:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	@ (8000ee8 <USBTask+0x94>)
 8000ea6:	7a1a      	ldrb	r2, [r3, #8]
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <USBTask+0x94>)
 8000eaa:	799b      	ldrb	r3, [r3, #6]
 8000eac:	4013      	ands	r3, r2
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee8 <USBTask+0x94>)
 8000eb2:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000eb4:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000eb8:	3301      	adds	r3, #1
 8000eba:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee8 <USBTask+0x94>)
 8000ec0:	79db      	ldrb	r3, [r3, #7]
 8000ec2:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d3db      	bcc.n	8000e82 <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 8000eca:	4b07      	ldr	r3, [pc, #28]	@ (8000ee8 <USBTask+0x94>)
 8000ecc:	79db      	ldrb	r3, [r3, #7]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f00c f99b 	bl	800d210 <CDC_Transmit_FS>
	}

}
 8000eda:	bf00      	nop
 8000edc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000410 	.word	0x20000410
 8000ee8:	20000404 	.word	0x20000404

08000eec <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	687a      	ldr	r2, [r7, #4]
 8000efc:	7a12      	ldrb	r2, [r2, #8]
 8000efe:	4413      	add	r3, r2
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	3bf0      	subs	r3, #240	@ 0xf0
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	f200 8129 	bhi.w	800115c <decodeCommand+0x270>
 8000f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f10 <decodeCommand+0x24>)
 8000f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f10:	08000f21 	.word	0x08000f21
 8000f14:	08000f41 	.word	0x08000f41
 8000f18:	08000f61 	.word	0x08000f61
 8000f1c:	08001045 	.word	0x08001045
	case ALIVE:
		unerPrtcl_PutHeaderOnTx(dataTx, ALIVE, 2);
 8000f20:	2202      	movs	r2, #2
 8000f22:	21f0      	movs	r1, #240	@ 0xf0
 8000f24:	6838      	ldr	r0, [r7, #0]
 8000f26:	f001 fc37 	bl	8002798 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, ACK);
 8000f2a:	210d      	movs	r1, #13
 8000f2c:	6838      	ldr	r0, [r7, #0]
 8000f2e:	f001 fce2 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	7a5b      	ldrb	r3, [r3, #9]
 8000f36:	4619      	mov	r1, r3
 8000f38:	6838      	ldr	r0, [r7, #0]
 8000f3a:	f001 fcdc 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		break;
 8000f3e:	e123      	b.n	8001188 <decodeCommand+0x29c>
	case FIRMWARE:
		unerPrtcl_PutHeaderOnTx(dataTx, FIRMWARE, 13);
 8000f40:	220d      	movs	r2, #13
 8000f42:	21f1      	movs	r1, #241	@ 0xf1
 8000f44:	6838      	ldr	r0, [r7, #0]
 8000f46:	f001 fc27 	bl	8002798 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutStrOntx(dataTx, firmware);
 8000f4a:	4991      	ldr	r1, [pc, #580]	@ (8001190 <decodeCommand+0x2a4>)
 8000f4c:	6838      	ldr	r0, [r7, #0]
 8000f4e:	f001 fd00 	bl	8002952 <unerPrtcl_PutStrOntx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	7a5b      	ldrb	r3, [r3, #9]
 8000f56:	4619      	mov	r1, r3
 8000f58:	6838      	ldr	r0, [r7, #0]
 8000f5a:	f001 fccc 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		break;
 8000f5e:	e113      	b.n	8001188 <decodeCommand+0x29c>
	case GETMPU:
		unerPrtcl_PutHeaderOnTx(dataTx, GETMPU, 13);
 8000f60:	220d      	movs	r2, #13
 8000f62:	21f2      	movs	r1, #242	@ 0xf2
 8000f64:	6838      	ldr	r0, [r7, #0]
 8000f66:	f001 fc17 	bl	8002798 <unerPrtcl_PutHeaderOnTx>
		myWord.i16[0] = ax;
 8000f6a:	4b8a      	ldr	r3, [pc, #552]	@ (8001194 <decodeCommand+0x2a8>)
 8000f6c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f70:	4b89      	ldr	r3, [pc, #548]	@ (8001198 <decodeCommand+0x2ac>)
 8000f72:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000f74:	4b88      	ldr	r3, [pc, #544]	@ (8001198 <decodeCommand+0x2ac>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	6838      	ldr	r0, [r7, #0]
 8000f7c:	f001 fcbb 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000f80:	4b85      	ldr	r3, [pc, #532]	@ (8001198 <decodeCommand+0x2ac>)
 8000f82:	785b      	ldrb	r3, [r3, #1]
 8000f84:	4619      	mov	r1, r3
 8000f86:	6838      	ldr	r0, [r7, #0]
 8000f88:	f001 fcb5 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = ay;
 8000f8c:	4b83      	ldr	r3, [pc, #524]	@ (800119c <decodeCommand+0x2b0>)
 8000f8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f92:	4b81      	ldr	r3, [pc, #516]	@ (8001198 <decodeCommand+0x2ac>)
 8000f94:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000f96:	4b80      	ldr	r3, [pc, #512]	@ (8001198 <decodeCommand+0x2ac>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	6838      	ldr	r0, [r7, #0]
 8000f9e:	f001 fcaa 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000fa2:	4b7d      	ldr	r3, [pc, #500]	@ (8001198 <decodeCommand+0x2ac>)
 8000fa4:	785b      	ldrb	r3, [r3, #1]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	6838      	ldr	r0, [r7, #0]
 8000faa:	f001 fca4 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = az;
 8000fae:	4b7c      	ldr	r3, [pc, #496]	@ (80011a0 <decodeCommand+0x2b4>)
 8000fb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fb4:	4b78      	ldr	r3, [pc, #480]	@ (8001198 <decodeCommand+0x2ac>)
 8000fb6:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000fb8:	4b77      	ldr	r3, [pc, #476]	@ (8001198 <decodeCommand+0x2ac>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6838      	ldr	r0, [r7, #0]
 8000fc0:	f001 fc99 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000fc4:	4b74      	ldr	r3, [pc, #464]	@ (8001198 <decodeCommand+0x2ac>)
 8000fc6:	785b      	ldrb	r3, [r3, #1]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	6838      	ldr	r0, [r7, #0]
 8000fcc:	f001 fc93 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gx;
 8000fd0:	4b74      	ldr	r3, [pc, #464]	@ (80011a4 <decodeCommand+0x2b8>)
 8000fd2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000fd6:	4b70      	ldr	r3, [pc, #448]	@ (8001198 <decodeCommand+0x2ac>)
 8000fd8:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000fda:	4b6f      	ldr	r3, [pc, #444]	@ (8001198 <decodeCommand+0x2ac>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	6838      	ldr	r0, [r7, #0]
 8000fe2:	f001 fc88 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000fe6:	4b6c      	ldr	r3, [pc, #432]	@ (8001198 <decodeCommand+0x2ac>)
 8000fe8:	785b      	ldrb	r3, [r3, #1]
 8000fea:	4619      	mov	r1, r3
 8000fec:	6838      	ldr	r0, [r7, #0]
 8000fee:	f001 fc82 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gy;
 8000ff2:	4b6d      	ldr	r3, [pc, #436]	@ (80011a8 <decodeCommand+0x2bc>)
 8000ff4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ff8:	4b67      	ldr	r3, [pc, #412]	@ (8001198 <decodeCommand+0x2ac>)
 8000ffa:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000ffc:	4b66      	ldr	r3, [pc, #408]	@ (8001198 <decodeCommand+0x2ac>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	6838      	ldr	r0, [r7, #0]
 8001004:	f001 fc77 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001008:	4b63      	ldr	r3, [pc, #396]	@ (8001198 <decodeCommand+0x2ac>)
 800100a:	785b      	ldrb	r3, [r3, #1]
 800100c:	4619      	mov	r1, r3
 800100e:	6838      	ldr	r0, [r7, #0]
 8001010:	f001 fc71 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gz;
 8001014:	4b65      	ldr	r3, [pc, #404]	@ (80011ac <decodeCommand+0x2c0>)
 8001016:	f9b3 2000 	ldrsh.w	r2, [r3]
 800101a:	4b5f      	ldr	r3, [pc, #380]	@ (8001198 <decodeCommand+0x2ac>)
 800101c:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800101e:	4b5e      	ldr	r3, [pc, #376]	@ (8001198 <decodeCommand+0x2ac>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4619      	mov	r1, r3
 8001024:	6838      	ldr	r0, [r7, #0]
 8001026:	f001 fc66 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800102a:	4b5b      	ldr	r3, [pc, #364]	@ (8001198 <decodeCommand+0x2ac>)
 800102c:	785b      	ldrb	r3, [r3, #1]
 800102e:	4619      	mov	r1, r3
 8001030:	6838      	ldr	r0, [r7, #0]
 8001032:	f001 fc60 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	7a5b      	ldrb	r3, [r3, #9]
 800103a:	4619      	mov	r1, r3
 800103c:	6838      	ldr	r0, [r7, #0]
 800103e:	f001 fc5a 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		break;
 8001042:	e0a1      	b.n	8001188 <decodeCommand+0x29c>
	case GETADC:
		unerPrtcl_PutHeaderOnTx(dataTx, GETADC, 17);
 8001044:	2211      	movs	r2, #17
 8001046:	21f3      	movs	r1, #243	@ 0xf3
 8001048:	6838      	ldr	r0, [r7, #0]
 800104a:	f001 fba5 	bl	8002798 <unerPrtcl_PutHeaderOnTx>
		myWord.ui16[0] = adcDataTx[0];
 800104e:	4b58      	ldr	r3, [pc, #352]	@ (80011b0 <decodeCommand+0x2c4>)
 8001050:	881a      	ldrh	r2, [r3, #0]
 8001052:	4b51      	ldr	r3, [pc, #324]	@ (8001198 <decodeCommand+0x2ac>)
 8001054:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001056:	4b50      	ldr	r3, [pc, #320]	@ (8001198 <decodeCommand+0x2ac>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	6838      	ldr	r0, [r7, #0]
 800105e:	f001 fc4a 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001062:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <decodeCommand+0x2ac>)
 8001064:	785b      	ldrb	r3, [r3, #1]
 8001066:	4619      	mov	r1, r3
 8001068:	6838      	ldr	r0, [r7, #0]
 800106a:	f001 fc44 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[1];
 800106e:	4b50      	ldr	r3, [pc, #320]	@ (80011b0 <decodeCommand+0x2c4>)
 8001070:	885a      	ldrh	r2, [r3, #2]
 8001072:	4b49      	ldr	r3, [pc, #292]	@ (8001198 <decodeCommand+0x2ac>)
 8001074:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001076:	4b48      	ldr	r3, [pc, #288]	@ (8001198 <decodeCommand+0x2ac>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	4619      	mov	r1, r3
 800107c:	6838      	ldr	r0, [r7, #0]
 800107e:	f001 fc3a 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001082:	4b45      	ldr	r3, [pc, #276]	@ (8001198 <decodeCommand+0x2ac>)
 8001084:	785b      	ldrb	r3, [r3, #1]
 8001086:	4619      	mov	r1, r3
 8001088:	6838      	ldr	r0, [r7, #0]
 800108a:	f001 fc34 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[2];
 800108e:	4b48      	ldr	r3, [pc, #288]	@ (80011b0 <decodeCommand+0x2c4>)
 8001090:	889a      	ldrh	r2, [r3, #4]
 8001092:	4b41      	ldr	r3, [pc, #260]	@ (8001198 <decodeCommand+0x2ac>)
 8001094:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001096:	4b40      	ldr	r3, [pc, #256]	@ (8001198 <decodeCommand+0x2ac>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	4619      	mov	r1, r3
 800109c:	6838      	ldr	r0, [r7, #0]
 800109e:	f001 fc2a 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80010a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <decodeCommand+0x2ac>)
 80010a4:	785b      	ldrb	r3, [r3, #1]
 80010a6:	4619      	mov	r1, r3
 80010a8:	6838      	ldr	r0, [r7, #0]
 80010aa:	f001 fc24 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[3];
 80010ae:	4b40      	ldr	r3, [pc, #256]	@ (80011b0 <decodeCommand+0x2c4>)
 80010b0:	88da      	ldrh	r2, [r3, #6]
 80010b2:	4b39      	ldr	r3, [pc, #228]	@ (8001198 <decodeCommand+0x2ac>)
 80010b4:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80010b6:	4b38      	ldr	r3, [pc, #224]	@ (8001198 <decodeCommand+0x2ac>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	4619      	mov	r1, r3
 80010bc:	6838      	ldr	r0, [r7, #0]
 80010be:	f001 fc1a 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80010c2:	4b35      	ldr	r3, [pc, #212]	@ (8001198 <decodeCommand+0x2ac>)
 80010c4:	785b      	ldrb	r3, [r3, #1]
 80010c6:	4619      	mov	r1, r3
 80010c8:	6838      	ldr	r0, [r7, #0]
 80010ca:	f001 fc14 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[4];
 80010ce:	4b38      	ldr	r3, [pc, #224]	@ (80011b0 <decodeCommand+0x2c4>)
 80010d0:	891a      	ldrh	r2, [r3, #8]
 80010d2:	4b31      	ldr	r3, [pc, #196]	@ (8001198 <decodeCommand+0x2ac>)
 80010d4:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80010d6:	4b30      	ldr	r3, [pc, #192]	@ (8001198 <decodeCommand+0x2ac>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4619      	mov	r1, r3
 80010dc:	6838      	ldr	r0, [r7, #0]
 80010de:	f001 fc0a 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80010e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001198 <decodeCommand+0x2ac>)
 80010e4:	785b      	ldrb	r3, [r3, #1]
 80010e6:	4619      	mov	r1, r3
 80010e8:	6838      	ldr	r0, [r7, #0]
 80010ea:	f001 fc04 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[5];
 80010ee:	4b30      	ldr	r3, [pc, #192]	@ (80011b0 <decodeCommand+0x2c4>)
 80010f0:	895a      	ldrh	r2, [r3, #10]
 80010f2:	4b29      	ldr	r3, [pc, #164]	@ (8001198 <decodeCommand+0x2ac>)
 80010f4:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80010f6:	4b28      	ldr	r3, [pc, #160]	@ (8001198 <decodeCommand+0x2ac>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	4619      	mov	r1, r3
 80010fc:	6838      	ldr	r0, [r7, #0]
 80010fe:	f001 fbfa 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001102:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <decodeCommand+0x2ac>)
 8001104:	785b      	ldrb	r3, [r3, #1]
 8001106:	4619      	mov	r1, r3
 8001108:	6838      	ldr	r0, [r7, #0]
 800110a:	f001 fbf4 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[6];
 800110e:	4b28      	ldr	r3, [pc, #160]	@ (80011b0 <decodeCommand+0x2c4>)
 8001110:	899a      	ldrh	r2, [r3, #12]
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <decodeCommand+0x2ac>)
 8001114:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001116:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <decodeCommand+0x2ac>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	4619      	mov	r1, r3
 800111c:	6838      	ldr	r0, [r7, #0]
 800111e:	f001 fbea 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001122:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <decodeCommand+0x2ac>)
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	4619      	mov	r1, r3
 8001128:	6838      	ldr	r0, [r7, #0]
 800112a:	f001 fbe4 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[7];
 800112e:	4b20      	ldr	r3, [pc, #128]	@ (80011b0 <decodeCommand+0x2c4>)
 8001130:	89da      	ldrh	r2, [r3, #14]
 8001132:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <decodeCommand+0x2ac>)
 8001134:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8001136:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <decodeCommand+0x2ac>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	4619      	mov	r1, r3
 800113c:	6838      	ldr	r0, [r7, #0]
 800113e:	f001 fbda 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <decodeCommand+0x2ac>)
 8001144:	785b      	ldrb	r3, [r3, #1]
 8001146:	4619      	mov	r1, r3
 8001148:	6838      	ldr	r0, [r7, #0]
 800114a:	f001 fbd4 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	7a5b      	ldrb	r3, [r3, #9]
 8001152:	4619      	mov	r1, r3
 8001154:	6838      	ldr	r0, [r7, #0]
 8001156:	f001 fbce 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		break;
 800115a:	e015      	b.n	8001188 <decodeCommand+0x29c>
		break;
	default:
		unerPrtcl_PutHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	7a12      	ldrb	r2, [r2, #8]
 8001164:	4413      	add	r3, r2
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2202      	movs	r2, #2
 800116a:	4619      	mov	r1, r3
 800116c:	6838      	ldr	r0, [r7, #0]
 800116e:	f001 fb13 	bl	8002798 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, UNKNOWN);
 8001172:	21ff      	movs	r1, #255	@ 0xff
 8001174:	6838      	ldr	r0, [r7, #0]
 8001176:	f001 fbbe 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	7a5b      	ldrb	r3, [r3, #9]
 800117e:	4619      	mov	r1, r3
 8001180:	6838      	ldr	r0, [r7, #0]
 8001182:	f001 fbb8 	bl	80028f6 <unerPrtcl_PutByteOnTx>
		break;
 8001186:	bf00      	nop
	}
}
 8001188:	bf00      	nop
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	0800db8c 	.word	0x0800db8c
 8001194:	20000624 	.word	0x20000624
 8001198:	2000061c 	.word	0x2000061c
 800119c:	20000626 	.word	0x20000626
 80011a0:	20000628 	.word	0x20000628
 80011a4:	2000062a 	.word	0x2000062a
 80011a8:	2000062c 	.word	0x2000062c
 80011ac:	2000062e 	.word	0x2000062e
 80011b0:	200003f4 	.word	0x200003f4

080011b4 <do10ms>:

void do10ms() {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	if (IS10MS) {
 80011b8:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <do10ms+0x6c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d02a      	beq.n	800121c <do10ms+0x68>
		IS10MS = FALSE;
 80011c6:	4a16      	ldr	r2, [pc, #88]	@ (8001220 <do10ms+0x6c>)
 80011c8:	7813      	ldrb	r3, [r2, #0]
 80011ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80011ce:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 80011d0:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <do10ms+0x70>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	b2da      	uxtb	r2, r3
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <do10ms+0x70>)
 80011da:	701a      	strb	r2, [r3, #0]
		tmo20ms--;
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <do10ms+0x74>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <do10ms+0x74>)
 80011e6:	701a      	strb	r2, [r3, #0]
		if (!tmo20ms) {
 80011e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001228 <do10ms+0x74>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d107      	bne.n	8001200 <do10ms+0x4c>
			tmo20ms = 2;
 80011f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <do10ms+0x74>)
 80011f2:	2202      	movs	r2, #2
 80011f4:	701a      	strb	r2, [r3, #0]
			IS20MS = TRUE;
 80011f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <do10ms+0x6c>)
 80011f8:	7813      	ldrb	r3, [r2, #0]
 80011fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011fe:	7013      	strb	r3, [r2, #0]
		}
		if (!tmo100ms) {
 8001200:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <do10ms+0x70>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d109      	bne.n	800121c <do10ms+0x68>
			tmo100ms = 10;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <do10ms+0x70>)
 800120a:	220a      	movs	r2, #10
 800120c:	701a      	strb	r2, [r3, #0]
			IS100MS = TRUE;
 800120e:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <do10ms+0x6c>)
 8001210:	7813      	ldrb	r3, [r2, #0]
 8001212:	f043 0320 	orr.w	r3, r3, #32
 8001216:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 8001218:	f000 f808 	bl	800122c <heartBeatTask>
		}
	}
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000620 	.word	0x20000620
 8001224:	20000028 	.word	0x20000028
 8001228:	20000029 	.word	0x20000029

0800122c <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 8001230:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <heartBeatTask+0x44>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	43db      	mvns	r3, r3
 8001236:	4a0f      	ldr	r2, [pc, #60]	@ (8001274 <heartBeatTask+0x48>)
 8001238:	7812      	ldrb	r2, [r2, #0]
 800123a:	4611      	mov	r1, r2
 800123c:	2201      	movs	r2, #1
 800123e:	408a      	lsls	r2, r1
 8001240:	4013      	ands	r3, r2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d004      	beq.n	8001250 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 8001246:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800124a:	480b      	ldr	r0, [pc, #44]	@ (8001278 <heartBeatTask+0x4c>)
 800124c:	f003 f937 	bl	80044be <HAL_GPIO_TogglePin>

	times++;
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <heartBeatTask+0x48>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <heartBeatTask+0x48>)
 800125a:	701a      	strb	r2, [r3, #0]
	times &= 31;
 800125c:	4b05      	ldr	r3, [pc, #20]	@ (8001274 <heartBeatTask+0x48>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	f003 031f 	and.w	r3, r3, #31
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b03      	ldr	r3, [pc, #12]	@ (8001274 <heartBeatTask+0x48>)
 8001268:	701a      	strb	r2, [r3, #0]
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000000 	.word	0x20000000
 8001274:	20000630 	.word	0x20000630
 8001278:	40020800 	.word	0x40020800

0800127c <displayMemWrite>:

void displayMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af04      	add	r7, sp, #16
 8001282:	6039      	str	r1, [r7, #0]
 8001284:	4611      	mov	r1, r2
 8001286:	461a      	mov	r2, r3
 8001288:	4603      	mov	r3, r0
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	460b      	mov	r3, r1
 800128e:	71bb      	strb	r3, [r7, #6]
 8001290:	4613      	mov	r3, r2
 8001292:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	b299      	uxth	r1, r3
 8001298:	797b      	ldrb	r3, [r7, #5]
 800129a:	b29a      	uxth	r2, r3
 800129c:	79bb      	ldrb	r3, [r7, #6]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	9002      	str	r0, [sp, #8]
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	4803      	ldr	r0, [pc, #12]	@ (80012bc <displayMemWrite+0x40>)
 80012b0:	f003 fa7a 	bl	80047a8 <HAL_I2C_Mem_Write>
}
 80012b4:	bf00      	nop
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200001f4 	.word	0x200001f4

080012c0 <displayMemWriteDMA>:

void displayMemWriteDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af02      	add	r7, sp, #8
 80012c6:	6039      	str	r1, [r7, #0]
 80012c8:	4611      	mov	r1, r2
 80012ca:	461a      	mov	r2, r3
 80012cc:	4603      	mov	r3, r0
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	460b      	mov	r3, r1
 80012d2:	71bb      	strb	r3, [r7, #6]
 80012d4:	4613      	mov	r3, r2
 80012d6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write_DMA(&hi2c1, address , type, 1, data, size);
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	b299      	uxth	r1, r3
 80012dc:	797b      	ldrb	r3, [r7, #5]
 80012de:	b29a      	uxth	r2, r3
 80012e0:	79bb      	ldrb	r3, [r7, #6]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2301      	movs	r3, #1
 80012ec:	4803      	ldr	r0, [pc, #12]	@ (80012fc <displayMemWriteDMA+0x3c>)
 80012ee:	f003 fb55 	bl	800499c <HAL_I2C_Mem_Write_DMA>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200001f4 	.word	0x200001f4

08001300 <mpuMemWrite>:

void mpuMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af04      	add	r7, sp, #16
 8001306:	6039      	str	r1, [r7, #0]
 8001308:	4611      	mov	r1, r2
 800130a:	461a      	mov	r2, r3
 800130c:	4603      	mov	r3, r0
 800130e:	71fb      	strb	r3, [r7, #7]
 8001310:	460b      	mov	r3, r1
 8001312:	71bb      	strb	r3, [r7, #6]
 8001314:	4613      	mov	r3, r2
 8001316:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	b299      	uxth	r1, r3
 800131c:	797b      	ldrb	r3, [r7, #5]
 800131e:	b29a      	uxth	r2, r3
 8001320:	79bb      	ldrb	r3, [r7, #6]
 8001322:	b29b      	uxth	r3, r3
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	9002      	str	r0, [sp, #8]
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2301      	movs	r3, #1
 8001332:	4803      	ldr	r0, [pc, #12]	@ (8001340 <mpuMemWrite+0x40>)
 8001334:	f003 fa38 	bl	80047a8 <HAL_I2C_Mem_Write>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200001f4 	.word	0x200001f4

08001344 <mpuMemReadDMA>:

void mpuMemReadDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af02      	add	r7, sp, #8
 800134a:	6039      	str	r1, [r7, #0]
 800134c:	4611      	mov	r1, r2
 800134e:	461a      	mov	r2, r3
 8001350:	4603      	mov	r3, r0
 8001352:	71fb      	strb	r3, [r7, #7]
 8001354:	460b      	mov	r3, r1
 8001356:	71bb      	strb	r3, [r7, #6]
 8001358:	4613      	mov	r3, r2
 800135a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read_DMA(&hi2c1, address , type, 1, data, size);
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	b299      	uxth	r1, r3
 8001360:	797b      	ldrb	r3, [r7, #5]
 8001362:	b29a      	uxth	r2, r3
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	b29b      	uxth	r3, r3
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2301      	movs	r3, #1
 8001370:	4803      	ldr	r0, [pc, #12]	@ (8001380 <mpuMemReadDMA+0x3c>)
 8001372:	f003 fc71 	bl	8004c58 <HAL_I2C_Mem_Read_DMA>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200001f4 	.word	0x200001f4

08001384 <mpuTask>:
//		}
//	}
}


void mpuTask(){
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af02      	add	r7, sp, #8

//	if (IS20MS) {
//		ONMPU = TRUE;
//		IS20MS = FALSE;
//	}
	if (ONMPU) {
 800138a:	4b0f      	ldr	r3, [pc, #60]	@ (80013c8 <mpuTask+0x44>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d013      	beq.n	80013c0 <mpuTask+0x3c>
		if (mpu6050_Read()) {
 8001398:	f000 fc26 	bl	8001be8 <mpu6050_Read>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00e      	beq.n	80013c0 <mpuTask+0x3c>
			ONMPU = FALSE;
 80013a2:	4a09      	ldr	r2, [pc, #36]	@ (80013c8 <mpuTask+0x44>)
 80013a4:	7813      	ldrb	r3, [r2, #0]
 80013a6:	f023 0302 	bic.w	r3, r3, #2
 80013aa:	7013      	strb	r3, [r2, #0]
			mpu6050_GetData(&ax, &ay, &az, &gx, &gy, &gz);
 80013ac:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <mpuTask+0x48>)
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	4b07      	ldr	r3, [pc, #28]	@ (80013d0 <mpuTask+0x4c>)
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <mpuTask+0x50>)
 80013b6:	4a08      	ldr	r2, [pc, #32]	@ (80013d8 <mpuTask+0x54>)
 80013b8:	4908      	ldr	r1, [pc, #32]	@ (80013dc <mpuTask+0x58>)
 80013ba:	4809      	ldr	r0, [pc, #36]	@ (80013e0 <mpuTask+0x5c>)
 80013bc:	f000 fdc8 	bl	8001f50 <mpu6050_GetData>
		}
	}

}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000620 	.word	0x20000620
 80013cc:	2000062e 	.word	0x2000062e
 80013d0:	2000062c 	.word	0x2000062c
 80013d4:	2000062a 	.word	0x2000062a
 80013d8:	20000628 	.word	0x20000628
 80013dc:	20000626 	.word	0x20000626
 80013e0:	20000624 	.word	0x20000624

080013e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e8:	f001 fc58 	bl	8002c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ec:	f000 f86a 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f0:	f000 fb1e 	bl	8001a30 <MX_GPIO_Init>
  MX_DMA_Init();
 80013f4:	f000 fade 	bl	80019b4 <MX_DMA_Init>
  MX_ADC1_Init();
 80013f8:	f000 f8cc 	bl	8001594 <MX_ADC1_Init>
  MX_I2C1_Init();
 80013fc:	f000 f97e 	bl	80016fc <MX_I2C1_Init>
  MX_TIM1_Init();
 8001400:	f000 f9aa 	bl	8001758 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8001404:	f00b fdea 	bl	800cfdc <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001408:	f000 fa0c 	bl	8001824 <MX_TIM2_Init>
  MX_TIM3_Init();
 800140c:	f000 fa6e 	bl	80018ec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 8001410:	481c      	ldr	r0, [pc, #112]	@ (8001484 <main+0xa0>)
 8001412:	f00b ff35 	bl	800d280 <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1); //timer
 8001416:	481c      	ldr	r0, [pc, #112]	@ (8001488 <main+0xa4>)
 8001418:	f007 fdea 	bl	8008ff0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 800141c:	481b      	ldr	r0, [pc, #108]	@ (800148c <main+0xa8>)
 800141e:	f007 fde7 	bl	8008ff0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001422:	481b      	ldr	r0, [pc, #108]	@ (8001490 <main+0xac>)
 8001424:	f007 fde4 	bl	8008ff0 <HAL_TIM_Base_Start_IT>


	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 8001428:	2201      	movs	r2, #1
 800142a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800142e:	4819      	ldr	r0, [pc, #100]	@ (8001494 <main+0xb0>)
 8001430:	f003 f82c 	bl	800448c <HAL_GPIO_WritePin>

	//Display
	ssd1306_ADC_ConfCpltCallback(&ssd1306_TxCplt);
 8001434:	4818      	ldr	r0, [pc, #96]	@ (8001498 <main+0xb4>)
 8001436:	f000 fe23 	bl	8002080 <ssd1306_ADC_ConfCpltCallback>
	ssd1306_Attach_MemWrite(displayMemWrite);
 800143a:	4818      	ldr	r0, [pc, #96]	@ (800149c <main+0xb8>)
 800143c:	f000 fe10 	bl	8002060 <ssd1306_Attach_MemWrite>
	ssd1306_Attach_MemWriteDMA(displayMemWriteDMA);
 8001440:	4817      	ldr	r0, [pc, #92]	@ (80014a0 <main+0xbc>)
 8001442:	f000 fdfd 	bl	8002040 <ssd1306_Attach_MemWriteDMA>
	ssd1306_Init();
 8001446:	f000 fe2b 	bl	80020a0 <ssd1306_Init>

	//mpu6050

	mpu6050_ADC_ConfCpltCallback(&mpu6050_RxCplt);
 800144a:	4816      	ldr	r0, [pc, #88]	@ (80014a4 <main+0xc0>)
 800144c:	f000 fb56 	bl	8001afc <mpu6050_ADC_ConfCpltCallback>
	mpu6050_Attach_MemWrite(mpuMemWrite);
 8001450:	4815      	ldr	r0, [pc, #84]	@ (80014a8 <main+0xc4>)
 8001452:	f000 fb63 	bl	8001b1c <mpu6050_Attach_MemWrite>
	mpu6050_Attach_MemReadDMA(mpuMemReadDMA);
 8001456:	4815      	ldr	r0, [pc, #84]	@ (80014ac <main+0xc8>)
 8001458:	f000 fb70 	bl	8001b3c <mpu6050_Attach_MemReadDMA>
	MPU6050_Init();
 800145c:	f000 fba8 	bl	8001bb0 <MPU6050_Init>

	//Inicializacion de protocolo
	unerPrtcl_Init(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 8001460:	4b13      	ldr	r3, [pc, #76]	@ (80014b0 <main+0xcc>)
 8001462:	4a14      	ldr	r2, [pc, #80]	@ (80014b4 <main+0xd0>)
 8001464:	4914      	ldr	r1, [pc, #80]	@ (80014b8 <main+0xd4>)
 8001466:	4815      	ldr	r0, [pc, #84]	@ (80014bc <main+0xd8>)
 8001468:	f001 fbb6 	bl	8002bd8 <unerPrtcl_Init>

	//Variables
	ALLFLAGS = RESET;
 800146c:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <main+0xdc>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		do10ms();
 8001472:	f7ff fe9f 	bl	80011b4 <do10ms>
		USBTask();
 8001476:	f7ff fced 	bl	8000e54 <USBTask>

		mpuTask();
 800147a:	f7ff ff83 	bl	8001384 <mpuTask>
		do10ms();
 800147e:	bf00      	nop
 8001480:	e7f7      	b.n	8001472 <main+0x8e>
 8001482:	bf00      	nop
 8001484:	08000df9 	.word	0x08000df9
 8001488:	20000308 	.word	0x20000308
 800148c:	20000350 	.word	0x20000350
 8001490:	20000398 	.word	0x20000398
 8001494:	40020800 	.word	0x40020800
 8001498:	20000621 	.word	0x20000621
 800149c:	0800127d 	.word	0x0800127d
 80014a0:	080012c1 	.word	0x080012c1
 80014a4:	20000622 	.word	0x20000622
 80014a8:	08001301 	.word	0x08001301
 80014ac:	08001345 	.word	0x08001345
 80014b0:	2000041c 	.word	0x2000041c
 80014b4:	2000051c 	.word	0x2000051c
 80014b8:	20000404 	.word	0x20000404
 80014bc:	20000410 	.word	0x20000410
 80014c0:	20000620 	.word	0x20000620

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b094      	sub	sp, #80	@ 0x50
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	2230      	movs	r2, #48	@ 0x30
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f00c fafe 	bl	800dad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	4b27      	ldr	r3, [pc, #156]	@ (800158c <SystemClock_Config+0xc8>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f0:	4a26      	ldr	r2, [pc, #152]	@ (800158c <SystemClock_Config+0xc8>)
 80014f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f8:	4b24      	ldr	r3, [pc, #144]	@ (800158c <SystemClock_Config+0xc8>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001504:	2300      	movs	r3, #0
 8001506:	607b      	str	r3, [r7, #4]
 8001508:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <SystemClock_Config+0xcc>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a20      	ldr	r2, [pc, #128]	@ (8001590 <SystemClock_Config+0xcc>)
 800150e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b1e      	ldr	r3, [pc, #120]	@ (8001590 <SystemClock_Config+0xcc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001520:	2301      	movs	r3, #1
 8001522:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001524:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152a:	2302      	movs	r3, #2
 800152c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001532:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001534:	2319      	movs	r3, #25
 8001536:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001538:	23c0      	movs	r3, #192	@ 0xc0
 800153a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800153c:	2302      	movs	r3, #2
 800153e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001540:	2304      	movs	r3, #4
 8001542:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001544:	f107 0320 	add.w	r3, r7, #32
 8001548:	4618      	mov	r0, r3
 800154a:	f007 f8bd 	bl	80086c8 <HAL_RCC_OscConfig>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001554:	f000 facc 	bl	8001af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001558:	230f      	movs	r3, #15
 800155a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155c:	2302      	movs	r3, #2
 800155e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001564:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	2103      	movs	r1, #3
 8001574:	4618      	mov	r0, r3
 8001576:	f007 fb1f 	bl	8008bb8 <HAL_RCC_ClockConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001580:	f000 fab6 	bl	8001af0 <Error_Handler>
  }
}
 8001584:	bf00      	nop
 8001586:	3750      	adds	r7, #80	@ 0x50
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	40007000 	.word	0x40007000

08001594 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800159a:	463b      	mov	r3, r7
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015a6:	4b52      	ldr	r3, [pc, #328]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015a8:	4a52      	ldr	r2, [pc, #328]	@ (80016f4 <MX_ADC1_Init+0x160>)
 80015aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015ac:	4b50      	ldr	r3, [pc, #320]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015b4:	4b4e      	ldr	r3, [pc, #312]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015ba:	4b4d      	ldr	r3, [pc, #308]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015bc:	2201      	movs	r2, #1
 80015be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015c0:	4b4b      	ldr	r3, [pc, #300]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015c6:	4b4a      	ldr	r3, [pc, #296]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ce:	4b48      	ldr	r3, [pc, #288]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015d4:	4b46      	ldr	r3, [pc, #280]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015d6:	4a48      	ldr	r2, [pc, #288]	@ (80016f8 <MX_ADC1_Init+0x164>)
 80015d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015da:	4b45      	ldr	r3, [pc, #276]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80015e0:	4b43      	ldr	r3, [pc, #268]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015e2:	2208      	movs	r2, #8
 80015e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015e6:	4b42      	ldr	r3, [pc, #264]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015ee:	4b40      	ldr	r3, [pc, #256]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015f4:	483e      	ldr	r0, [pc, #248]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80015f6:	f001 fbe7 	bl	8002dc8 <HAL_ADC_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001600:	f000 fa76 	bl	8001af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001604:	2300      	movs	r3, #0
 8001606:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001608:	2301      	movs	r3, #1
 800160a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	4619      	mov	r1, r3
 8001614:	4836      	ldr	r0, [pc, #216]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 8001616:	f001 fe3d 	bl	8003294 <HAL_ADC_ConfigChannel>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001620:	f000 fa66 	bl	8001af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001624:	2301      	movs	r3, #1
 8001626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001628:	2302      	movs	r3, #2
 800162a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800162c:	463b      	mov	r3, r7
 800162e:	4619      	mov	r1, r3
 8001630:	482f      	ldr	r0, [pc, #188]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 8001632:	f001 fe2f 	bl	8003294 <HAL_ADC_ConfigChannel>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800163c:	f000 fa58 	bl	8001af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001640:	2302      	movs	r3, #2
 8001642:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001644:	2303      	movs	r3, #3
 8001646:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001648:	463b      	mov	r3, r7
 800164a:	4619      	mov	r1, r3
 800164c:	4828      	ldr	r0, [pc, #160]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 800164e:	f001 fe21 	bl	8003294 <HAL_ADC_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001658:	f000 fa4a 	bl	8001af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800165c:	2303      	movs	r3, #3
 800165e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001660:	2304      	movs	r3, #4
 8001662:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001664:	463b      	mov	r3, r7
 8001666:	4619      	mov	r1, r3
 8001668:	4821      	ldr	r0, [pc, #132]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 800166a:	f001 fe13 	bl	8003294 <HAL_ADC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001674:	f000 fa3c 	bl	8001af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001678:	2304      	movs	r3, #4
 800167a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800167c:	2305      	movs	r3, #5
 800167e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001680:	463b      	mov	r3, r7
 8001682:	4619      	mov	r1, r3
 8001684:	481a      	ldr	r0, [pc, #104]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 8001686:	f001 fe05 	bl	8003294 <HAL_ADC_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001690:	f000 fa2e 	bl	8001af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001694:	2305      	movs	r3, #5
 8001696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001698:	2306      	movs	r3, #6
 800169a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800169c:	463b      	mov	r3, r7
 800169e:	4619      	mov	r1, r3
 80016a0:	4813      	ldr	r0, [pc, #76]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80016a2:	f001 fdf7 	bl	8003294 <HAL_ADC_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80016ac:	f000 fa20 	bl	8001af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016b0:	2306      	movs	r3, #6
 80016b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80016b4:	2307      	movs	r3, #7
 80016b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b8:	463b      	mov	r3, r7
 80016ba:	4619      	mov	r1, r3
 80016bc:	480c      	ldr	r0, [pc, #48]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80016be:	f001 fde9 	bl	8003294 <HAL_ADC_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80016c8:	f000 fa12 	bl	8001af0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016cc:	2307      	movs	r3, #7
 80016ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80016d0:	2308      	movs	r3, #8
 80016d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d4:	463b      	mov	r3, r7
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	@ (80016f0 <MX_ADC1_Init+0x15c>)
 80016da:	f001 fddb 	bl	8003294 <HAL_ADC_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80016e4:	f000 fa04 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2000014c 	.word	0x2000014c
 80016f4:	40012000 	.word	0x40012000
 80016f8:	0f000001 	.word	0x0f000001

080016fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001700:	4b12      	ldr	r3, [pc, #72]	@ (800174c <MX_I2C1_Init+0x50>)
 8001702:	4a13      	ldr	r2, [pc, #76]	@ (8001750 <MX_I2C1_Init+0x54>)
 8001704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <MX_I2C1_Init+0x50>)
 8001708:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <MX_I2C1_Init+0x58>)
 800170a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <MX_I2C1_Init+0x50>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001712:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <MX_I2C1_Init+0x50>)
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <MX_I2C1_Init+0x50>)
 800171a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800171e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001720:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <MX_I2C1_Init+0x50>)
 8001722:	2200      	movs	r2, #0
 8001724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <MX_I2C1_Init+0x50>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800172c:	4b07      	ldr	r3, [pc, #28]	@ (800174c <MX_I2C1_Init+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001732:	4b06      	ldr	r3, [pc, #24]	@ (800174c <MX_I2C1_Init+0x50>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001738:	4804      	ldr	r0, [pc, #16]	@ (800174c <MX_I2C1_Init+0x50>)
 800173a:	f002 fedb 	bl	80044f4 <HAL_I2C_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001744:	f000 f9d4 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200001f4 	.word	0x200001f4
 8001750:	40005400 	.word	0x40005400
 8001754:	00061a80 	.word	0x00061a80

08001758 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	@ 0x30
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175e:	f107 0320 	add.w	r3, r7, #32
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001784:	4b25      	ldr	r3, [pc, #148]	@ (800181c <MX_TIM1_Init+0xc4>)
 8001786:	4a26      	ldr	r2, [pc, #152]	@ (8001820 <MX_TIM1_Init+0xc8>)
 8001788:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 800178a:	4b24      	ldr	r3, [pc, #144]	@ (800181c <MX_TIM1_Init+0xc4>)
 800178c:	225f      	movs	r2, #95	@ 0x5f
 800178e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001790:	4b22      	ldr	r3, [pc, #136]	@ (800181c <MX_TIM1_Init+0xc4>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8001796:	4b21      	ldr	r3, [pc, #132]	@ (800181c <MX_TIM1_Init+0xc4>)
 8001798:	22f9      	movs	r2, #249	@ 0xf9
 800179a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179c:	4b1f      	ldr	r3, [pc, #124]	@ (800181c <MX_TIM1_Init+0xc4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017a2:	4b1e      	ldr	r3, [pc, #120]	@ (800181c <MX_TIM1_Init+0xc4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a8:	4b1c      	ldr	r3, [pc, #112]	@ (800181c <MX_TIM1_Init+0xc4>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017ae:	481b      	ldr	r0, [pc, #108]	@ (800181c <MX_TIM1_Init+0xc4>)
 80017b0:	f007 fbce 	bl	8008f50 <HAL_TIM_Base_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80017ba:	f000 f999 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017c4:	f107 0320 	add.w	r3, r7, #32
 80017c8:	4619      	mov	r1, r3
 80017ca:	4814      	ldr	r0, [pc, #80]	@ (800181c <MX_TIM1_Init+0xc4>)
 80017cc:	f007 fd62 	bl	8009294 <HAL_TIM_ConfigClockSource>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80017d6:	f000 f98b 	bl	8001af0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	4619      	mov	r1, r3
 80017e8:	480c      	ldr	r0, [pc, #48]	@ (800181c <MX_TIM1_Init+0xc4>)
 80017ea:	f007 fe1a 	bl	8009422 <HAL_TIM_SlaveConfigSynchro>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 80017f4:	f000 f97c 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f8:	2300      	movs	r3, #0
 80017fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	@ (800181c <MX_TIM1_Init+0xc4>)
 8001806:	f008 f829 	bl	800985c <HAL_TIMEx_MasterConfigSynchronization>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001810:	f000 f96e 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001814:	bf00      	nop
 8001816:	3730      	adds	r7, #48	@ 0x30
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000308 	.word	0x20000308
 8001820:	40010000 	.word	0x40010000

08001824 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08c      	sub	sp, #48	@ 0x30
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182a:	f107 0320 	add.w	r3, r7, #32
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001850:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 8001852:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001856:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8001858:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 800185a:	225f      	movs	r2, #95	@ 0x5f
 800185c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800185e:	4b22      	ldr	r3, [pc, #136]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001864:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 8001866:	f242 720f 	movw	r2, #9999	@ 0x270f
 800186a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800186c:	4b1e      	ldr	r3, [pc, #120]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001872:	4b1d      	ldr	r3, [pc, #116]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 8001874:	2200      	movs	r2, #0
 8001876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001878:	481b      	ldr	r0, [pc, #108]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 800187a:	f007 fb69 	bl	8008f50 <HAL_TIM_Base_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001884:	f000 f934 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001888:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800188c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800188e:	f107 0320 	add.w	r3, r7, #32
 8001892:	4619      	mov	r1, r3
 8001894:	4814      	ldr	r0, [pc, #80]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 8001896:	f007 fcfd 	bl	8009294 <HAL_TIM_ConfigClockSource>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80018a0:	f000 f926 	bl	8001af0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	4619      	mov	r1, r3
 80018b2:	480d      	ldr	r0, [pc, #52]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 80018b4:	f007 fdb5 	bl	8009422 <HAL_TIM_SlaveConfigSynchro>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80018be:	f000 f917 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	4619      	mov	r1, r3
 80018ce:	4806      	ldr	r0, [pc, #24]	@ (80018e8 <MX_TIM2_Init+0xc4>)
 80018d0:	f007 ffc4 	bl	800985c <HAL_TIMEx_MasterConfigSynchronization>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80018da:	f000 f909 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	3730      	adds	r7, #48	@ 0x30
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000350 	.word	0x20000350

080018ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	@ 0x30
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f2:	f107 0320 	add.w	r3, r7, #32
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001918:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <MX_TIM3_Init+0xc0>)
 800191a:	4a25      	ldr	r2, [pc, #148]	@ (80019b0 <MX_TIM3_Init+0xc4>)
 800191c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 800191e:	4b23      	ldr	r3, [pc, #140]	@ (80019ac <MX_TIM3_Init+0xc0>)
 8001920:	225f      	movs	r2, #95	@ 0x5f
 8001922:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001924:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <MX_TIM3_Init+0xc0>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 800192a:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <MX_TIM3_Init+0xc0>)
 800192c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001930:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001932:	4b1e      	ldr	r3, [pc, #120]	@ (80019ac <MX_TIM3_Init+0xc0>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001938:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <MX_TIM3_Init+0xc0>)
 800193a:	2200      	movs	r2, #0
 800193c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800193e:	481b      	ldr	r0, [pc, #108]	@ (80019ac <MX_TIM3_Init+0xc0>)
 8001940:	f007 fb06 	bl	8008f50 <HAL_TIM_Base_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 800194a:	f000 f8d1 	bl	8001af0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800194e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001952:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001954:	f107 0320 	add.w	r3, r7, #32
 8001958:	4619      	mov	r1, r3
 800195a:	4814      	ldr	r0, [pc, #80]	@ (80019ac <MX_TIM3_Init+0xc0>)
 800195c:	f007 fc9a 	bl	8009294 <HAL_TIM_ConfigClockSource>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001966:	f000 f8c3 	bl	8001af0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	4619      	mov	r1, r3
 8001978:	480c      	ldr	r0, [pc, #48]	@ (80019ac <MX_TIM3_Init+0xc0>)
 800197a:	f007 fd52 	bl	8009422 <HAL_TIM_SlaveConfigSynchro>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001984:	f000 f8b4 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <MX_TIM3_Init+0xc0>)
 8001996:	f007 ff61 	bl	800985c <HAL_TIMEx_MasterConfigSynchronization>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80019a0:	f000 f8a6 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80019a4:	bf00      	nop
 80019a6:	3730      	adds	r7, #48	@ 0x30
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000398 	.word	0x20000398
 80019b0:	40000400 	.word	0x40000400

080019b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <MX_DMA_Init+0x78>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a2c <MX_DMA_Init+0x78>)
 80019c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ca:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <MX_DMA_Init+0x78>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	603b      	str	r3, [r7, #0]
 80019da:	4b14      	ldr	r3, [pc, #80]	@ (8001a2c <MX_DMA_Init+0x78>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	4a13      	ldr	r2, [pc, #76]	@ (8001a2c <MX_DMA_Init+0x78>)
 80019e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <MX_DMA_Init+0x78>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	200b      	movs	r0, #11
 80019f8:	f001 ffe1 	bl	80039be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80019fc:	200b      	movs	r0, #11
 80019fe:	f001 fffa 	bl	80039f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	200c      	movs	r0, #12
 8001a08:	f001 ffd9 	bl	80039be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a0c:	200c      	movs	r0, #12
 8001a0e:	f001 fff2 	bl	80039f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2038      	movs	r0, #56	@ 0x38
 8001a18:	f001 ffd1 	bl	80039be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a1c:	2038      	movs	r0, #56	@ 0x38
 8001a1e:	f001 ffea 	bl	80039f6 <HAL_NVIC_EnableIRQ>

}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800

08001a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	@ 0x28
 8001a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	4b27      	ldr	r3, [pc, #156]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	4a26      	ldr	r2, [pc, #152]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a56:	4b24      	ldr	r3, [pc, #144]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b20      	ldr	r3, [pc, #128]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	4a18      	ldr	r2, [pc, #96]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	4a11      	ldr	r2, [pc, #68]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <MX_GPIO_Init+0xb8>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001abc:	480b      	ldr	r0, [pc, #44]	@ (8001aec <MX_GPIO_Init+0xbc>)
 8001abe:	f002 fce5 	bl	800448c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001ac2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4804      	ldr	r0, [pc, #16]	@ (8001aec <MX_GPIO_Init+0xbc>)
 8001adc:	f002 fb52 	bl	8004184 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	@ 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40020800 	.word	0x40020800

08001af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <Error_Handler+0x8>

08001afc <mpu6050_ADC_ConfCpltCallback>:
int16_t gz_real;

// Variables RAW leídas directamente del sensor (int16_t = complemento a dos)
static int32_t ax, ay, az, gx, gy, gz;

void mpu6050_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = (uint8_t *)PtrRx;
 8001b04:	4a04      	ldr	r2, [pc, #16]	@ (8001b18 <mpu6050_ADC_ConfCpltCallback+0x1c>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6013      	str	r3, [r2, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000634 	.word	0x20000634

08001b1c <mpu6050_Attach_MemWrite>:

void mpu6050_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 8001b24:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <mpu6050_Attach_MemWrite+0x1c>)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6013      	str	r3, [r2, #0]
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	20000638 	.word	0x20000638

08001b3c <mpu6050_Attach_MemReadDMA>:

void mpu6050_Attach_MemReadDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	memReadDMA = PtrRx;
 8001b44:	4a04      	ldr	r2, [pc, #16]	@ (8001b58 <mpu6050_Attach_MemReadDMA+0x1c>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6013      	str	r3, [r2, #0]
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	2000063c 	.word	0x2000063c

08001b5c <mpu6050_WriteData>:


//Send init command
void mpu6050_WriteData(uint8_t *byte, uint8_t type) {
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	70fb      	strb	r3, [r7, #3]
	memWrite(MPU6050_ADDR, byte, 1, type);
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <mpu6050_WriteData+0x24>)
 8001b6a:	681c      	ldr	r4, [r3, #0]
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	20d0      	movs	r0, #208	@ 0xd0
 8001b74:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd90      	pop	{r4, r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000638 	.word	0x20000638

08001b84 <mpu6050_ReadDataDMA>:

void mpu6050_ReadDataDMA(uint8_t* buffer, size_t size, uint8_t type) {
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	71fb      	strb	r3, [r7, #7]
	memReadDMA(MPU6050_ADDR, buffer, size, type);
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <mpu6050_ReadDataDMA+0x28>)
 8001b94:	681c      	ldr	r4, [r3, #0]
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	68f9      	ldr	r1, [r7, #12]
 8001b9e:	20d0      	movs	r0, #208	@ 0xd0
 8001ba0:	47a0      	blx	r4
	//HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data,14, 1000);
}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd90      	pop	{r4, r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000063c 	.word	0x2000063c

08001bb0 <MPU6050_Init>:


void MPU6050_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
    uint8_t data;

    // Salir del modo de bajo consumo (modo sleep)
    // Escritura en el registro PWR_MGMT_1 (0x6B)
    data = 0x00;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, PWR_MGMT_1_REG);
 8001bba:	1dfb      	adds	r3, r7, #7
 8001bbc:	216b      	movs	r1, #107	@ 0x6b
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff ffcc 	bl	8001b5c <mpu6050_WriteData>

    // Configurar acelerómetro con rango ±2g (registro ACCEL_CONFIG = 0x1C, valor 0x00)
    data = 0x00;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, ACCEL_CONFIG_REG);
 8001bc8:	1dfb      	adds	r3, r7, #7
 8001bca:	211c      	movs	r1, #28
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ffc5 	bl	8001b5c <mpu6050_WriteData>

    // Configurar giroscopio con rango ±250°/s (registro GYRO_CONFIG = 0x1B, valor 0x00)
    data = 0x00;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, GYRO_CONFIG_REG);
 8001bd6:	1dfb      	adds	r3, r7, #7
 8001bd8:	211b      	movs	r1, #27
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ffbe 	bl	8001b5c <mpu6050_WriteData>

}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <mpu6050_Read>:

char mpu6050_Read(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
//		gz_real = (gz / 131.0f) * MULTIPLICADORFLOAT;
//
//	return 1;


	if (*mpu6050_RxCplt || state == 1) {
 8001bec:	4ba0      	ldr	r3, [pc, #640]	@ (8001e70 <mpu6050_Read+0x288>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d104      	bne.n	8001c00 <mpu6050_Read+0x18>
 8001bf6:	4b9f      	ldr	r3, [pc, #636]	@ (8001e74 <mpu6050_Read+0x28c>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	f040 8198 	bne.w	8001f30 <mpu6050_Read+0x348>
		*mpu6050_RxCplt = 0;  // Reset completion flag
 8001c00:	4b9b      	ldr	r3, [pc, #620]	@ (8001e70 <mpu6050_Read+0x288>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
		switch (state) {
 8001c08:	4b9a      	ldr	r3, [pc, #616]	@ (8001e74 <mpu6050_Read+0x28c>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d002      	beq.n	8001c16 <mpu6050_Read+0x2e>
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d009      	beq.n	8001c28 <mpu6050_Read+0x40>
 8001c14:	e18c      	b.n	8001f30 <mpu6050_Read+0x348>
		case 1:
			// Leer 6 bytes desde ACCEL_XOUT_H (registro 0x3B)
			state=2;
 8001c16:	4b97      	ldr	r3, [pc, #604]	@ (8001e74 <mpu6050_Read+0x28c>)
 8001c18:	2202      	movs	r2, #2
 8001c1a:	701a      	strb	r2, [r3, #0]
			mpu6050_ReadDataDMA(Rec_Data, 14, ACCEL_XOUT_H_REG);
 8001c1c:	223b      	movs	r2, #59	@ 0x3b
 8001c1e:	210e      	movs	r1, #14
 8001c20:	4895      	ldr	r0, [pc, #596]	@ (8001e78 <mpu6050_Read+0x290>)
 8001c22:	f7ff ffaf 	bl	8001b84 <mpu6050_ReadDataDMA>
			//HAL_I2C_Mem_Read_DMA(&hi2c1, MPU6050_ADDR , ACCEL_XOUT_H_REG, 1, Rec_Data, 14);

			break;
 8001c26:	e183      	b.n	8001f30 <mpu6050_Read+0x348>
		case 2:
			state=1;
 8001c28:	4b92      	ldr	r3, [pc, #584]	@ (8001e74 <mpu6050_Read+0x28c>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
			// Combinar bytes altos y bajos en variables de 16 bits con signo
			//Valores accelerometro
			ax = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]); //primer byte  es la parte alta, segundo parte baja
 8001c2e:	4b92      	ldr	r3, [pc, #584]	@ (8001e78 <mpu6050_Read+0x290>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	b21b      	sxth	r3, r3
 8001c34:	021b      	lsls	r3, r3, #8
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	4b8f      	ldr	r3, [pc, #572]	@ (8001e78 <mpu6050_Read+0x290>)
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b8d      	ldr	r3, [pc, #564]	@ (8001e7c <mpu6050_Read+0x294>)
 8001c46:	601a      	str	r2, [r3, #0]
			ay = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001c48:	4b8b      	ldr	r3, [pc, #556]	@ (8001e78 <mpu6050_Read+0x290>)
 8001c4a:	789b      	ldrb	r3, [r3, #2]
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	b21a      	sxth	r2, r3
 8001c52:	4b89      	ldr	r3, [pc, #548]	@ (8001e78 <mpu6050_Read+0x290>)
 8001c54:	78db      	ldrb	r3, [r3, #3]
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b88      	ldr	r3, [pc, #544]	@ (8001e80 <mpu6050_Read+0x298>)
 8001c60:	601a      	str	r2, [r3, #0]
			az = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001c62:	4b85      	ldr	r3, [pc, #532]	@ (8001e78 <mpu6050_Read+0x290>)
 8001c64:	791b      	ldrb	r3, [r3, #4]
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	021b      	lsls	r3, r3, #8
 8001c6a:	b21a      	sxth	r2, r3
 8001c6c:	4b82      	ldr	r3, [pc, #520]	@ (8001e78 <mpu6050_Read+0x290>)
 8001c6e:	795b      	ldrb	r3, [r3, #5]
 8001c70:	b21b      	sxth	r3, r3
 8001c72:	4313      	orrs	r3, r2
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b82      	ldr	r3, [pc, #520]	@ (8001e84 <mpu6050_Read+0x29c>)
 8001c7a:	601a      	str	r2, [r3, #0]
			//Medida temperatura
			//t = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
			//Valores del giroscopio
			gx = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001c7c:	4b7e      	ldr	r3, [pc, #504]	@ (8001e78 <mpu6050_Read+0x290>)
 8001c7e:	7a1b      	ldrb	r3, [r3, #8]
 8001c80:	b21b      	sxth	r3, r3
 8001c82:	021b      	lsls	r3, r3, #8
 8001c84:	b21a      	sxth	r2, r3
 8001c86:	4b7c      	ldr	r3, [pc, #496]	@ (8001e78 <mpu6050_Read+0x290>)
 8001c88:	7a5b      	ldrb	r3, [r3, #9]
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	b21b      	sxth	r3, r3
 8001c90:	461a      	mov	r2, r3
 8001c92:	4b7d      	ldr	r3, [pc, #500]	@ (8001e88 <mpu6050_Read+0x2a0>)
 8001c94:	601a      	str	r2, [r3, #0]
			gy = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 8001c96:	4b78      	ldr	r3, [pc, #480]	@ (8001e78 <mpu6050_Read+0x290>)
 8001c98:	7a9b      	ldrb	r3, [r3, #10]
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	b21a      	sxth	r2, r3
 8001ca0:	4b75      	ldr	r3, [pc, #468]	@ (8001e78 <mpu6050_Read+0x290>)
 8001ca2:	7adb      	ldrb	r3, [r3, #11]
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	b21b      	sxth	r3, r3
 8001caa:	461a      	mov	r2, r3
 8001cac:	4b77      	ldr	r3, [pc, #476]	@ (8001e8c <mpu6050_Read+0x2a4>)
 8001cae:	601a      	str	r2, [r3, #0]
			gz = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8001cb0:	4b71      	ldr	r3, [pc, #452]	@ (8001e78 <mpu6050_Read+0x290>)
 8001cb2:	7b1b      	ldrb	r3, [r3, #12]
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	021b      	lsls	r3, r3, #8
 8001cb8:	b21a      	sxth	r2, r3
 8001cba:	4b6f      	ldr	r3, [pc, #444]	@ (8001e78 <mpu6050_Read+0x290>)
 8001cbc:	7b5b      	ldrb	r3, [r3, #13]
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	b21b      	sxth	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b72      	ldr	r3, [pc, #456]	@ (8001e90 <mpu6050_Read+0x2a8>)
 8001cc8:	601a      	str	r2, [r3, #0]


			if (abs(ax) <= OFFSET_AX)
 8001cca:	4b6c      	ldr	r3, [pc, #432]	@ (8001e7c <mpu6050_Read+0x294>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8001cd2:	db08      	blt.n	8001ce6 <mpu6050_Read+0xfe>
 8001cd4:	4b69      	ldr	r3, [pc, #420]	@ (8001e7c <mpu6050_Read+0x294>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001cdc:	dc03      	bgt.n	8001ce6 <mpu6050_Read+0xfe>
				ax_real = 0;
 8001cde:	4b6d      	ldr	r3, [pc, #436]	@ (8001e94 <mpu6050_Read+0x2ac>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	801a      	strh	r2, [r3, #0]
 8001ce4:	e025      	b.n	8001d32 <mpu6050_Read+0x14a>
			else
				ax_real = (ax / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 8001ce6:	4b65      	ldr	r3, [pc, #404]	@ (8001e7c <mpu6050_Read+0x294>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	ee07 3a90 	vmov	s15, r3
 8001cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf2:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8001e98 <mpu6050_Read+0x2b0>
 8001cf6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001cfa:	ee16 0a90 	vmov	r0, s13
 8001cfe:	f7fe fbcf 	bl	80004a0 <__aeabi_f2d>
 8001d02:	a359      	add	r3, pc, #356	@ (adr r3, 8001e68 <mpu6050_Read+0x280>)
 8001d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d08:	f7fe fc22 	bl	8000550 <__aeabi_dmul>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	4610      	mov	r0, r2
 8001d12:	4619      	mov	r1, r3
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	4b60      	ldr	r3, [pc, #384]	@ (8001e9c <mpu6050_Read+0x2b4>)
 8001d1a:	f7fe fc19 	bl	8000550 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7fe fe25 	bl	8000974 <__aeabi_d2iz>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	b21a      	sxth	r2, r3
 8001d2e:	4b59      	ldr	r3, [pc, #356]	@ (8001e94 <mpu6050_Read+0x2ac>)
 8001d30:	801a      	strh	r2, [r3, #0]

			if (abs(ay) <= OFFSET_AY)
 8001d32:	4b53      	ldr	r3, [pc, #332]	@ (8001e80 <mpu6050_Read+0x298>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8001d3a:	db08      	blt.n	8001d4e <mpu6050_Read+0x166>
 8001d3c:	4b50      	ldr	r3, [pc, #320]	@ (8001e80 <mpu6050_Read+0x298>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001d44:	dc03      	bgt.n	8001d4e <mpu6050_Read+0x166>
				ay_real = 0;
 8001d46:	4b56      	ldr	r3, [pc, #344]	@ (8001ea0 <mpu6050_Read+0x2b8>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	801a      	strh	r2, [r3, #0]
 8001d4c:	e025      	b.n	8001d9a <mpu6050_Read+0x1b2>
			else
				ay_real = (ay / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 8001d4e:	4b4c      	ldr	r3, [pc, #304]	@ (8001e80 <mpu6050_Read+0x298>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	ee07 3a90 	vmov	s15, r3
 8001d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d5a:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8001e98 <mpu6050_Read+0x2b0>
 8001d5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d62:	ee16 0a90 	vmov	r0, s13
 8001d66:	f7fe fb9b 	bl	80004a0 <__aeabi_f2d>
 8001d6a:	a33f      	add	r3, pc, #252	@ (adr r3, 8001e68 <mpu6050_Read+0x280>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	f7fe fbee 	bl	8000550 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	4b46      	ldr	r3, [pc, #280]	@ (8001e9c <mpu6050_Read+0x2b4>)
 8001d82:	f7fe fbe5 	bl	8000550 <__aeabi_dmul>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f7fe fdf1 	bl	8000974 <__aeabi_d2iz>
 8001d92:	4603      	mov	r3, r0
 8001d94:	b21a      	sxth	r2, r3
 8001d96:	4b42      	ldr	r3, [pc, #264]	@ (8001ea0 <mpu6050_Read+0x2b8>)
 8001d98:	801a      	strh	r2, [r3, #0]

			if (abs(az) <= OFFSET_AZ)
 8001d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001e84 <mpu6050_Read+0x29c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a41      	ldr	r2, [pc, #260]	@ (8001ea4 <mpu6050_Read+0x2bc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	db0a      	blt.n	8001dba <mpu6050_Read+0x1d2>
 8001da4:	4b37      	ldr	r3, [pc, #220]	@ (8001e84 <mpu6050_Read+0x29c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001dac:	4293      	cmp	r3, r2
 8001dae:	dc04      	bgt.n	8001dba <mpu6050_Read+0x1d2>
				az_real = 9.81 * MULTIPLICADORFLOAT; // en reposo debería medir ~1g hacia Z
 8001db0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea8 <mpu6050_Read+0x2c0>)
 8001db2:	f240 32d5 	movw	r2, #981	@ 0x3d5
 8001db6:	801a      	strh	r2, [r3, #0]
 8001db8:	e025      	b.n	8001e06 <mpu6050_Read+0x21e>
			else
				az_real = (az / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 8001dba:	4b32      	ldr	r3, [pc, #200]	@ (8001e84 <mpu6050_Read+0x29c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8001e98 <mpu6050_Read+0x2b0>
 8001dca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001dce:	ee16 0a90 	vmov	r0, s13
 8001dd2:	f7fe fb65 	bl	80004a0 <__aeabi_f2d>
 8001dd6:	a324      	add	r3, pc, #144	@ (adr r3, 8001e68 <mpu6050_Read+0x280>)
 8001dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ddc:	f7fe fbb8 	bl	8000550 <__aeabi_dmul>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	4b2b      	ldr	r3, [pc, #172]	@ (8001e9c <mpu6050_Read+0x2b4>)
 8001dee:	f7fe fbaf 	bl	8000550 <__aeabi_dmul>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7fe fdbb 	bl	8000974 <__aeabi_d2iz>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	b21a      	sxth	r2, r3
 8001e02:	4b29      	ldr	r3, [pc, #164]	@ (8001ea8 <mpu6050_Read+0x2c0>)
 8001e04:	801a      	strh	r2, [r3, #0]

			// Aplicar offset y escalar a grados/segundo (centésimas)
			if (abs(gx) <= OFFSET_GX)
 8001e06:	4b20      	ldr	r3, [pc, #128]	@ (8001e88 <mpu6050_Read+0x2a0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8001e0e:	db08      	blt.n	8001e22 <mpu6050_Read+0x23a>
 8001e10:	4b1d      	ldr	r3, [pc, #116]	@ (8001e88 <mpu6050_Read+0x2a0>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8001e18:	dc03      	bgt.n	8001e22 <mpu6050_Read+0x23a>
				gx_real = 0;
 8001e1a:	4b24      	ldr	r3, [pc, #144]	@ (8001eac <mpu6050_Read+0x2c4>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	801a      	strh	r2, [r3, #0]
 8001e20:	e014      	b.n	8001e4c <mpu6050_Read+0x264>
			else
				gx_real = (gx / 131.0f) * MULTIPLICADORFLOAT;
 8001e22:	4b19      	ldr	r3, [pc, #100]	@ (8001e88 <mpu6050_Read+0x2a0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	ee07 3a90 	vmov	s15, r3
 8001e2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e2e:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001eb0 <mpu6050_Read+0x2c8>
 8001e32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e36:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001eb4 <mpu6050_Read+0x2cc>
 8001e3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e42:	ee17 3a90 	vmov	r3, s15
 8001e46:	b21a      	sxth	r2, r3
 8001e48:	4b18      	ldr	r3, [pc, #96]	@ (8001eac <mpu6050_Read+0x2c4>)
 8001e4a:	801a      	strh	r2, [r3, #0]

			if (abs(gy) <= OFFSET_GY)
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <mpu6050_Read+0x2a4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 8001e54:	db32      	blt.n	8001ebc <mpu6050_Read+0x2d4>
 8001e56:	4b0d      	ldr	r3, [pc, #52]	@ (8001e8c <mpu6050_Read+0x2a4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8001e5e:	dc2d      	bgt.n	8001ebc <mpu6050_Read+0x2d4>
				gy_real = 0;
 8001e60:	4b15      	ldr	r3, [pc, #84]	@ (8001eb8 <mpu6050_Read+0x2d0>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	801a      	strh	r2, [r3, #0]
 8001e66:	e03e      	b.n	8001ee6 <mpu6050_Read+0x2fe>
 8001e68:	51eb851f 	.word	0x51eb851f
 8001e6c:	40239eb8 	.word	0x40239eb8
 8001e70:	20000634 	.word	0x20000634
 8001e74:	2000002a 	.word	0x2000002a
 8001e78:	20000664 	.word	0x20000664
 8001e7c:	2000064c 	.word	0x2000064c
 8001e80:	20000650 	.word	0x20000650
 8001e84:	20000654 	.word	0x20000654
 8001e88:	20000658 	.word	0x20000658
 8001e8c:	2000065c 	.word	0x2000065c
 8001e90:	20000660 	.word	0x20000660
 8001e94:	20000640 	.word	0x20000640
 8001e98:	46800000 	.word	0x46800000
 8001e9c:	40590000 	.word	0x40590000
 8001ea0:	20000642 	.word	0x20000642
 8001ea4:	ffffb1e0 	.word	0xffffb1e0
 8001ea8:	20000644 	.word	0x20000644
 8001eac:	20000646 	.word	0x20000646
 8001eb0:	43030000 	.word	0x43030000
 8001eb4:	42c80000 	.word	0x42c80000
 8001eb8:	20000648 	.word	0x20000648
			else
				gy_real = (gy / 131.0f) * MULTIPLICADORFLOAT;
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8001f38 <mpu6050_Read+0x350>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	ee07 3a90 	vmov	s15, r3
 8001ec4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ec8:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8001f3c <mpu6050_Read+0x354>
 8001ecc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ed0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001f40 <mpu6050_Read+0x358>
 8001ed4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001edc:	ee17 3a90 	vmov	r3, s15
 8001ee0:	b21a      	sxth	r2, r3
 8001ee2:	4b18      	ldr	r3, [pc, #96]	@ (8001f44 <mpu6050_Read+0x35c>)
 8001ee4:	801a      	strh	r2, [r3, #0]

			if (abs(gz) <= OFFSET_GZ)
 8001ee6:	4b18      	ldr	r3, [pc, #96]	@ (8001f48 <mpu6050_Read+0x360>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 8001eee:	db08      	blt.n	8001f02 <mpu6050_Read+0x31a>
 8001ef0:	4b15      	ldr	r3, [pc, #84]	@ (8001f48 <mpu6050_Read+0x360>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8001ef8:	dc03      	bgt.n	8001f02 <mpu6050_Read+0x31a>
				gz_real = 0;
 8001efa:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <mpu6050_Read+0x364>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	801a      	strh	r2, [r3, #0]
 8001f00:	e014      	b.n	8001f2c <mpu6050_Read+0x344>
			else
				gz_real = (gz / 131.0f) * MULTIPLICADORFLOAT;
 8001f02:	4b11      	ldr	r3, [pc, #68]	@ (8001f48 <mpu6050_Read+0x360>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f0e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8001f3c <mpu6050_Read+0x354>
 8001f12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f16:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001f40 <mpu6050_Read+0x358>
 8001f1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f22:	ee17 3a90 	vmov	r3, s15
 8001f26:	b21a      	sxth	r2, r3
 8001f28:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <mpu6050_Read+0x364>)
 8001f2a:	801a      	strh	r2, [r3, #0]

			return 1;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <mpu6050_Read+0x34a>
			break;
		}
	}
	return 0;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	2000065c 	.word	0x2000065c
 8001f3c:	43030000 	.word	0x43030000
 8001f40:	42c80000 	.word	0x42c80000
 8001f44:	20000648 	.word	0x20000648
 8001f48:	20000660 	.word	0x20000660
 8001f4c:	2000064a 	.word	0x2000064a

08001f50 <mpu6050_GetData>:

void mpu6050_GetData(int16_t *ax, int16_t *ay, int16_t *az, int16_t *gx, int16_t *gy, int16_t *gz) {
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
    if (ax) *ax = ax_real;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d004      	beq.n	8001f6e <mpu6050_GetData+0x1e>
 8001f64:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <mpu6050_GetData+0x7c>)
 8001f66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	801a      	strh	r2, [r3, #0]
    if (ay) *ay = ay_real;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d004      	beq.n	8001f7e <mpu6050_GetData+0x2e>
 8001f74:	4b16      	ldr	r3, [pc, #88]	@ (8001fd0 <mpu6050_GetData+0x80>)
 8001f76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	801a      	strh	r2, [r3, #0]
    if (az) *az = az_real;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <mpu6050_GetData+0x3e>
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <mpu6050_GetData+0x84>)
 8001f86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	801a      	strh	r2, [r3, #0]

    if (gx) *gx = gx_real;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d004      	beq.n	8001f9e <mpu6050_GetData+0x4e>
 8001f94:	4b10      	ldr	r3, [pc, #64]	@ (8001fd8 <mpu6050_GetData+0x88>)
 8001f96:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	801a      	strh	r2, [r3, #0]
    if (gy) *gy = gy_real;
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d004      	beq.n	8001fae <mpu6050_GetData+0x5e>
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8001fdc <mpu6050_GetData+0x8c>)
 8001fa6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	801a      	strh	r2, [r3, #0]
    if (gz) *gz = gz_real;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d004      	beq.n	8001fbe <mpu6050_GetData+0x6e>
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe0 <mpu6050_GetData+0x90>)
 8001fb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	801a      	strh	r2, [r3, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000640 	.word	0x20000640
 8001fd0:	20000642 	.word	0x20000642
 8001fd4:	20000644 	.word	0x20000644
 8001fd8:	20000646 	.word	0x20000646
 8001fdc:	20000648 	.word	0x20000648
 8001fe0:	2000064a 	.word	0x2000064a

08001fe4 <ssd1306_Reset>:
static void (*memWrite)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;
static void (*memWriteDMA)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
	...

08001ff4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001ff4:	b590      	push	{r4, r7, lr}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
	memWrite(SSD1306_I2C_ADDR, &byte, 1, 0x00);
 8001ffe:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <ssd1306_WriteCommand+0x20>)
 8002000:	681c      	ldr	r4, [r3, #0]
 8002002:	1df9      	adds	r1, r7, #7
 8002004:	2300      	movs	r3, #0
 8002006:	2201      	movs	r2, #1
 8002008:	2078      	movs	r0, #120	@ 0x78
 800200a:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bd90      	pop	{r4, r7, pc}
 8002014:	20000678 	.word	0x20000678

08002018 <ssd1306_WriteData>:
	memWriteDMA(SSD1306_I2C_ADDR, &byte, 1, 0x00);
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
}

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
    memWrite(SSD1306_I2C_ADDR, buffer, buff_size, 0x40);
 8002022:	4b06      	ldr	r3, [pc, #24]	@ (800203c <ssd1306_WriteData+0x24>)
 8002024:	681c      	ldr	r4, [r3, #0]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	2340      	movs	r3, #64	@ 0x40
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	2078      	movs	r0, #120	@ 0x78
 8002030:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bd90      	pop	{r4, r7, pc}
 800203a:	bf00      	nop
 800203c:	20000678 	.word	0x20000678

08002040 <ssd1306_Attach_MemWriteDMA>:
        ret = SSD1306_OK;
    }
    return ret;
}

void ssd1306_Attach_MemWriteDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	memWriteDMA = PtrRx;
 8002048:	4a04      	ldr	r2, [pc, #16]	@ (800205c <ssd1306_Attach_MemWriteDMA+0x1c>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6013      	str	r3, [r2, #0]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	2000067c 	.word	0x2000067c

08002060 <ssd1306_Attach_MemWrite>:

void ssd1306_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 8002068:	4a04      	ldr	r2, [pc, #16]	@ (800207c <ssd1306_Attach_MemWrite+0x1c>)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6013      	str	r3, [r2, #0]
}
 800206e:	bf00      	nop
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000678 	.word	0x20000678

08002080 <ssd1306_ADC_ConfCpltCallback>:

void ssd1306_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	SSD1306_TxCplt = (uint8_t *)PtrRx;
 8002088:	4a04      	ldr	r2, [pc, #16]	@ (800209c <ssd1306_ADC_ConfCpltCallback+0x1c>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6013      	str	r3, [r2, #0]
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000674 	.word	0x20000674

080020a0 <ssd1306_Init>:

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80020a4:	f7ff ff9e 	bl	8001fe4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80020a8:	2064      	movs	r0, #100	@ 0x64
 80020aa:	f000 fe69 	bl	8002d80 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80020ae:	2000      	movs	r0, #0
 80020b0:	f000 f8b4 	bl	800221c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80020b4:	2020      	movs	r0, #32
 80020b6:	f7ff ff9d 	bl	8001ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80020ba:	2000      	movs	r0, #0
 80020bc:	f7ff ff9a 	bl	8001ff4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80020c0:	20b0      	movs	r0, #176	@ 0xb0
 80020c2:	f7ff ff97 	bl	8001ff4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80020c6:	20c8      	movs	r0, #200	@ 0xc8
 80020c8:	f7ff ff94 	bl	8001ff4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80020cc:	2000      	movs	r0, #0
 80020ce:	f7ff ff91 	bl	8001ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80020d2:	2010      	movs	r0, #16
 80020d4:	f7ff ff8e 	bl	8001ff4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80020d8:	2040      	movs	r0, #64	@ 0x40
 80020da:	f7ff ff8b 	bl	8001ff4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80020de:	20ff      	movs	r0, #255	@ 0xff
 80020e0:	f000 f888 	bl	80021f4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80020e4:	20a1      	movs	r0, #161	@ 0xa1
 80020e6:	f7ff ff85 	bl	8001ff4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80020ea:	20a6      	movs	r0, #166	@ 0xa6
 80020ec:	f7ff ff82 	bl	8001ff4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80020f0:	20a8      	movs	r0, #168	@ 0xa8
 80020f2:	f7ff ff7f 	bl	8001ff4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80020f6:	203f      	movs	r0, #63	@ 0x3f
 80020f8:	f7ff ff7c 	bl	8001ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80020fc:	20a4      	movs	r0, #164	@ 0xa4
 80020fe:	f7ff ff79 	bl	8001ff4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002102:	20d3      	movs	r0, #211	@ 0xd3
 8002104:	f7ff ff76 	bl	8001ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002108:	2000      	movs	r0, #0
 800210a:	f7ff ff73 	bl	8001ff4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800210e:	20d5      	movs	r0, #213	@ 0xd5
 8002110:	f7ff ff70 	bl	8001ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002114:	20f0      	movs	r0, #240	@ 0xf0
 8002116:	f7ff ff6d 	bl	8001ff4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800211a:	20d9      	movs	r0, #217	@ 0xd9
 800211c:	f7ff ff6a 	bl	8001ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002120:	2022      	movs	r0, #34	@ 0x22
 8002122:	f7ff ff67 	bl	8001ff4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002126:	20da      	movs	r0, #218	@ 0xda
 8002128:	f7ff ff64 	bl	8001ff4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 800212c:	2012      	movs	r0, #18
 800212e:	f7ff ff61 	bl	8001ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002132:	20db      	movs	r0, #219	@ 0xdb
 8002134:	f7ff ff5e 	bl	8001ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002138:	2020      	movs	r0, #32
 800213a:	f7ff ff5b 	bl	8001ff4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800213e:	208d      	movs	r0, #141	@ 0x8d
 8002140:	f7ff ff58 	bl	8001ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002144:	2014      	movs	r0, #20
 8002146:	f7ff ff55 	bl	8001ff4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800214a:	2001      	movs	r0, #1
 800214c:	f000 f866 	bl	800221c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002150:	2000      	movs	r0, #0
 8002152:	f000 f80f 	bl	8002174 <ssd1306_Fill>
    //ssd1306_Fill(White);

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002156:	f000 f825 	bl	80021a4 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800215a:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <ssd1306_Init+0xd0>)
 800215c:	2200      	movs	r2, #0
 800215e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002160:	4b03      	ldr	r3, [pc, #12]	@ (8002170 <ssd1306_Init+0xd0>)
 8002162:	2200      	movs	r2, #0
 8002164:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8002166:	4b02      	ldr	r3, [pc, #8]	@ (8002170 <ssd1306_Init+0xd0>)
 8002168:	2201      	movs	r2, #1
 800216a:	711a      	strb	r2, [r3, #4]
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	20000a80 	.word	0x20000a80

08002174 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <ssd1306_Fill+0x14>
 8002184:	2300      	movs	r3, #0
 8002186:	e000      	b.n	800218a <ssd1306_Fill+0x16>
 8002188:	23ff      	movs	r3, #255	@ 0xff
 800218a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800218e:	4619      	mov	r1, r3
 8002190:	4803      	ldr	r0, [pc, #12]	@ (80021a0 <ssd1306_Fill+0x2c>)
 8002192:	f00b fc9f 	bl	800dad4 <memset>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000680 	.word	0x20000680

080021a4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80021aa:	2300      	movs	r3, #0
 80021ac:	71fb      	strb	r3, [r7, #7]
 80021ae:	e016      	b.n	80021de <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	3b50      	subs	r3, #80	@ 0x50
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ff1c 	bl	8001ff4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80021bc:	2000      	movs	r0, #0
 80021be:	f7ff ff19 	bl	8001ff4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80021c2:	2010      	movs	r0, #16
 80021c4:	f7ff ff16 	bl	8001ff4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	01db      	lsls	r3, r3, #7
 80021cc:	4a08      	ldr	r2, [pc, #32]	@ (80021f0 <ssd1306_UpdateScreen+0x4c>)
 80021ce:	4413      	add	r3, r2
 80021d0:	2180      	movs	r1, #128	@ 0x80
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ff20 	bl	8002018 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	3301      	adds	r3, #1
 80021dc:	71fb      	strb	r3, [r7, #7]
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	2b07      	cmp	r3, #7
 80021e2:	d9e5      	bls.n	80021b0 <ssd1306_UpdateScreen+0xc>
    }
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000680 	.word	0x20000680

080021f4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80021fe:	2381      	movs	r3, #129	@ 0x81
 8002200:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002202:	7bfb      	ldrb	r3, [r7, #15]
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fef5 	bl	8001ff4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fef1 	bl	8001ff4 <ssd1306_WriteCommand>
}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002226:	79fb      	ldrb	r3, [r7, #7]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800222c:	23af      	movs	r3, #175	@ 0xaf
 800222e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002230:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <ssd1306_SetDisplayOn+0x38>)
 8002232:	2201      	movs	r2, #1
 8002234:	715a      	strb	r2, [r3, #5]
 8002236:	e004      	b.n	8002242 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002238:	23ae      	movs	r3, #174	@ 0xae
 800223a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <ssd1306_SetDisplayOn+0x38>)
 800223e:	2200      	movs	r2, #0
 8002240:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fed5 	bl	8001ff4 <ssd1306_WriteCommand>
}
 800224a:	bf00      	nop
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000a80 	.word	0x20000a80

08002258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
 8002262:	4b10      	ldr	r3, [pc, #64]	@ (80022a4 <HAL_MspInit+0x4c>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002266:	4a0f      	ldr	r2, [pc, #60]	@ (80022a4 <HAL_MspInit+0x4c>)
 8002268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800226c:	6453      	str	r3, [r2, #68]	@ 0x44
 800226e:	4b0d      	ldr	r3, [pc, #52]	@ (80022a4 <HAL_MspInit+0x4c>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002276:	607b      	str	r3, [r7, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <HAL_MspInit+0x4c>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	4a08      	ldr	r2, [pc, #32]	@ (80022a4 <HAL_MspInit+0x4c>)
 8002284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002288:	6413      	str	r3, [r2, #64]	@ 0x40
 800228a:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <HAL_MspInit+0x4c>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800

080022a8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	@ 0x28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a32      	ldr	r2, [pc, #200]	@ (8002390 <HAL_ADC_MspInit+0xe8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d15e      	bne.n	8002388 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	4b31      	ldr	r3, [pc, #196]	@ (8002394 <HAL_ADC_MspInit+0xec>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d2:	4a30      	ldr	r2, [pc, #192]	@ (8002394 <HAL_ADC_MspInit+0xec>)
 80022d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022da:	4b2e      	ldr	r3, [pc, #184]	@ (8002394 <HAL_ADC_MspInit+0xec>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002394 <HAL_ADC_MspInit+0xec>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	4a29      	ldr	r2, [pc, #164]	@ (8002394 <HAL_ADC_MspInit+0xec>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f6:	4b27      	ldr	r3, [pc, #156]	@ (8002394 <HAL_ADC_MspInit+0xec>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002302:	23ff      	movs	r3, #255	@ 0xff
 8002304:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002306:	2303      	movs	r3, #3
 8002308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230e:	f107 0314 	add.w	r3, r7, #20
 8002312:	4619      	mov	r1, r3
 8002314:	4820      	ldr	r0, [pc, #128]	@ (8002398 <HAL_ADC_MspInit+0xf0>)
 8002316:	f001 ff35 	bl	8004184 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800231a:	4b20      	ldr	r3, [pc, #128]	@ (800239c <HAL_ADC_MspInit+0xf4>)
 800231c:	4a20      	ldr	r2, [pc, #128]	@ (80023a0 <HAL_ADC_MspInit+0xf8>)
 800231e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002320:	4b1e      	ldr	r3, [pc, #120]	@ (800239c <HAL_ADC_MspInit+0xf4>)
 8002322:	2200      	movs	r2, #0
 8002324:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002326:	4b1d      	ldr	r3, [pc, #116]	@ (800239c <HAL_ADC_MspInit+0xf4>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800232c:	4b1b      	ldr	r3, [pc, #108]	@ (800239c <HAL_ADC_MspInit+0xf4>)
 800232e:	2200      	movs	r2, #0
 8002330:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002332:	4b1a      	ldr	r3, [pc, #104]	@ (800239c <HAL_ADC_MspInit+0xf4>)
 8002334:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002338:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800233a:	4b18      	ldr	r3, [pc, #96]	@ (800239c <HAL_ADC_MspInit+0xf4>)
 800233c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002340:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002342:	4b16      	ldr	r3, [pc, #88]	@ (800239c <HAL_ADC_MspInit+0xf4>)
 8002344:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002348:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800234a:	4b14      	ldr	r3, [pc, #80]	@ (800239c <HAL_ADC_MspInit+0xf4>)
 800234c:	2200      	movs	r2, #0
 800234e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002350:	4b12      	ldr	r3, [pc, #72]	@ (800239c <HAL_ADC_MspInit+0xf4>)
 8002352:	2200      	movs	r2, #0
 8002354:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002356:	4b11      	ldr	r3, [pc, #68]	@ (800239c <HAL_ADC_MspInit+0xf4>)
 8002358:	2200      	movs	r2, #0
 800235a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800235c:	480f      	ldr	r0, [pc, #60]	@ (800239c <HAL_ADC_MspInit+0xf4>)
 800235e:	f001 fb65 	bl	8003a2c <HAL_DMA_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002368:	f7ff fbc2 	bl	8001af0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a0b      	ldr	r2, [pc, #44]	@ (800239c <HAL_ADC_MspInit+0xf4>)
 8002370:	639a      	str	r2, [r3, #56]	@ 0x38
 8002372:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <HAL_ADC_MspInit+0xf4>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002378:	2200      	movs	r2, #0
 800237a:	2100      	movs	r1, #0
 800237c:	2012      	movs	r0, #18
 800237e:	f001 fb1e 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002382:	2012      	movs	r0, #18
 8002384:	f001 fb37 	bl	80039f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002388:	bf00      	nop
 800238a:	3728      	adds	r7, #40	@ 0x28
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40012000 	.word	0x40012000
 8002394:	40023800 	.word	0x40023800
 8002398:	40020000 	.word	0x40020000
 800239c:	20000194 	.word	0x20000194
 80023a0:	40026410 	.word	0x40026410

080023a4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	@ 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002500 <HAL_I2C_MspInit+0x15c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	f040 8097 	bne.w	80024f6 <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c8:	2300      	movs	r3, #0
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002504 <HAL_I2C_MspInit+0x160>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002504 <HAL_I2C_MspInit+0x160>)
 80023d2:	f043 0302 	orr.w	r3, r3, #2
 80023d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d8:	4b4a      	ldr	r3, [pc, #296]	@ (8002504 <HAL_I2C_MspInit+0x160>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023e4:	23c0      	movs	r3, #192	@ 0xc0
 80023e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023e8:	2312      	movs	r3, #18
 80023ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f0:	2303      	movs	r3, #3
 80023f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023f4:	2304      	movs	r3, #4
 80023f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	4619      	mov	r1, r3
 80023fe:	4842      	ldr	r0, [pc, #264]	@ (8002508 <HAL_I2C_MspInit+0x164>)
 8002400:	f001 fec0 	bl	8004184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	4b3e      	ldr	r3, [pc, #248]	@ (8002504 <HAL_I2C_MspInit+0x160>)
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	4a3d      	ldr	r2, [pc, #244]	@ (8002504 <HAL_I2C_MspInit+0x160>)
 800240e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002412:	6413      	str	r3, [r2, #64]	@ 0x40
 8002414:	4b3b      	ldr	r3, [pc, #236]	@ (8002504 <HAL_I2C_MspInit+0x160>)
 8002416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002418:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002420:	4b3a      	ldr	r3, [pc, #232]	@ (800250c <HAL_I2C_MspInit+0x168>)
 8002422:	4a3b      	ldr	r2, [pc, #236]	@ (8002510 <HAL_I2C_MspInit+0x16c>)
 8002424:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002426:	4b39      	ldr	r3, [pc, #228]	@ (800250c <HAL_I2C_MspInit+0x168>)
 8002428:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800242c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800242e:	4b37      	ldr	r3, [pc, #220]	@ (800250c <HAL_I2C_MspInit+0x168>)
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002434:	4b35      	ldr	r3, [pc, #212]	@ (800250c <HAL_I2C_MspInit+0x168>)
 8002436:	2200      	movs	r2, #0
 8002438:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800243a:	4b34      	ldr	r3, [pc, #208]	@ (800250c <HAL_I2C_MspInit+0x168>)
 800243c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002440:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002442:	4b32      	ldr	r3, [pc, #200]	@ (800250c <HAL_I2C_MspInit+0x168>)
 8002444:	2200      	movs	r2, #0
 8002446:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002448:	4b30      	ldr	r3, [pc, #192]	@ (800250c <HAL_I2C_MspInit+0x168>)
 800244a:	2200      	movs	r2, #0
 800244c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800244e:	4b2f      	ldr	r3, [pc, #188]	@ (800250c <HAL_I2C_MspInit+0x168>)
 8002450:	2200      	movs	r2, #0
 8002452:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002454:	4b2d      	ldr	r3, [pc, #180]	@ (800250c <HAL_I2C_MspInit+0x168>)
 8002456:	2200      	movs	r2, #0
 8002458:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800245a:	4b2c      	ldr	r3, [pc, #176]	@ (800250c <HAL_I2C_MspInit+0x168>)
 800245c:	2200      	movs	r2, #0
 800245e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002460:	482a      	ldr	r0, [pc, #168]	@ (800250c <HAL_I2C_MspInit+0x168>)
 8002462:	f001 fae3 	bl	8003a2c <HAL_DMA_Init>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800246c:	f7ff fb40 	bl	8001af0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a26      	ldr	r2, [pc, #152]	@ (800250c <HAL_I2C_MspInit+0x168>)
 8002474:	639a      	str	r2, [r3, #56]	@ 0x38
 8002476:	4a25      	ldr	r2, [pc, #148]	@ (800250c <HAL_I2C_MspInit+0x168>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800247c:	4b25      	ldr	r3, [pc, #148]	@ (8002514 <HAL_I2C_MspInit+0x170>)
 800247e:	4a26      	ldr	r2, [pc, #152]	@ (8002518 <HAL_I2C_MspInit+0x174>)
 8002480:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8002482:	4b24      	ldr	r3, [pc, #144]	@ (8002514 <HAL_I2C_MspInit+0x170>)
 8002484:	2200      	movs	r2, #0
 8002486:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002488:	4b22      	ldr	r3, [pc, #136]	@ (8002514 <HAL_I2C_MspInit+0x170>)
 800248a:	2240      	movs	r2, #64	@ 0x40
 800248c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800248e:	4b21      	ldr	r3, [pc, #132]	@ (8002514 <HAL_I2C_MspInit+0x170>)
 8002490:	2200      	movs	r2, #0
 8002492:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002494:	4b1f      	ldr	r3, [pc, #124]	@ (8002514 <HAL_I2C_MspInit+0x170>)
 8002496:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800249a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800249c:	4b1d      	ldr	r3, [pc, #116]	@ (8002514 <HAL_I2C_MspInit+0x170>)
 800249e:	2200      	movs	r2, #0
 80024a0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002514 <HAL_I2C_MspInit+0x170>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80024a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002514 <HAL_I2C_MspInit+0x170>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024ae:	4b19      	ldr	r3, [pc, #100]	@ (8002514 <HAL_I2C_MspInit+0x170>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024b4:	4b17      	ldr	r3, [pc, #92]	@ (8002514 <HAL_I2C_MspInit+0x170>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80024ba:	4816      	ldr	r0, [pc, #88]	@ (8002514 <HAL_I2C_MspInit+0x170>)
 80024bc:	f001 fab6 	bl	8003a2c <HAL_DMA_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 80024c6:	f7ff fb13 	bl	8001af0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a11      	ldr	r2, [pc, #68]	@ (8002514 <HAL_I2C_MspInit+0x170>)
 80024ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80024d0:	4a10      	ldr	r2, [pc, #64]	@ (8002514 <HAL_I2C_MspInit+0x170>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	201f      	movs	r0, #31
 80024dc:	f001 fa6f 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80024e0:	201f      	movs	r0, #31
 80024e2:	f001 fa88 	bl	80039f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2100      	movs	r1, #0
 80024ea:	2020      	movs	r0, #32
 80024ec:	f001 fa67 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80024f0:	2020      	movs	r0, #32
 80024f2:	f001 fa80 	bl	80039f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80024f6:	bf00      	nop
 80024f8:	3728      	adds	r7, #40	@ 0x28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40005400 	.word	0x40005400
 8002504:	40023800 	.word	0x40023800
 8002508:	40020400 	.word	0x40020400
 800250c:	20000248 	.word	0x20000248
 8002510:	40026010 	.word	0x40026010
 8002514:	200002a8 	.word	0x200002a8
 8002518:	40026028 	.word	0x40026028

0800251c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a36      	ldr	r2, [pc, #216]	@ (8002604 <HAL_TIM_Base_MspInit+0xe8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d12e      	bne.n	800258c <HAL_TIM_Base_MspInit+0x70>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	4b35      	ldr	r3, [pc, #212]	@ (8002608 <HAL_TIM_Base_MspInit+0xec>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002536:	4a34      	ldr	r2, [pc, #208]	@ (8002608 <HAL_TIM_Base_MspInit+0xec>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	6453      	str	r3, [r2, #68]	@ 0x44
 800253e:	4b32      	ldr	r3, [pc, #200]	@ (8002608 <HAL_TIM_Base_MspInit+0xec>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	2100      	movs	r1, #0
 800254e:	2018      	movs	r0, #24
 8002550:	f001 fa35 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002554:	2018      	movs	r0, #24
 8002556:	f001 fa4e 	bl	80039f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	2100      	movs	r1, #0
 800255e:	2019      	movs	r0, #25
 8002560:	f001 fa2d 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002564:	2019      	movs	r0, #25
 8002566:	f001 fa46 	bl	80039f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	201a      	movs	r0, #26
 8002570:	f001 fa25 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002574:	201a      	movs	r0, #26
 8002576:	f001 fa3e 	bl	80039f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	201b      	movs	r0, #27
 8002580:	f001 fa1d 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002584:	201b      	movs	r0, #27
 8002586:	f001 fa36 	bl	80039f6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800258a:	e036      	b.n	80025fa <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002594:	d116      	bne.n	80025c4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <HAL_TIM_Base_MspInit+0xec>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259e:	4a1a      	ldr	r2, [pc, #104]	@ (8002608 <HAL_TIM_Base_MspInit+0xec>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a6:	4b18      	ldr	r3, [pc, #96]	@ (8002608 <HAL_TIM_Base_MspInit+0xec>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	201c      	movs	r0, #28
 80025b8:	f001 fa01 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025bc:	201c      	movs	r0, #28
 80025be:	f001 fa1a 	bl	80039f6 <HAL_NVIC_EnableIRQ>
}
 80025c2:	e01a      	b.n	80025fa <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a10      	ldr	r2, [pc, #64]	@ (800260c <HAL_TIM_Base_MspInit+0xf0>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d115      	bne.n	80025fa <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002608 <HAL_TIM_Base_MspInit+0xec>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002608 <HAL_TIM_Base_MspInit+0xec>)
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025de:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <HAL_TIM_Base_MspInit+0xec>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	201d      	movs	r0, #29
 80025f0:	f001 f9e5 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025f4:	201d      	movs	r0, #29
 80025f6:	f001 f9fe 	bl	80039f6 <HAL_NVIC_EnableIRQ>
}
 80025fa:	bf00      	nop
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	40010000 	.word	0x40010000
 8002608:	40023800 	.word	0x40023800
 800260c:	40000400 	.word	0x40000400

08002610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002614:	bf00      	nop
 8002616:	e7fd      	b.n	8002614 <NMI_Handler+0x4>

08002618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <HardFault_Handler+0x4>

08002620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <MemManage_Handler+0x4>

08002628 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800262c:	bf00      	nop
 800262e:	e7fd      	b.n	800262c <BusFault_Handler+0x4>

08002630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <UsageFault_Handler+0x4>

08002638 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002666:	f000 fb6b 	bl	8002d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
	...

08002670 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002674:	4802      	ldr	r0, [pc, #8]	@ (8002680 <DMA1_Stream0_IRQHandler+0x10>)
 8002676:	f001 fb01 	bl	8003c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000248 	.word	0x20000248

08002684 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002688:	4802      	ldr	r0, [pc, #8]	@ (8002694 <DMA1_Stream1_IRQHandler+0x10>)
 800268a:	f001 faf7 	bl	8003c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200002a8 	.word	0x200002a8

08002698 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800269c:	4802      	ldr	r0, [pc, #8]	@ (80026a8 <ADC_IRQHandler+0x10>)
 800269e:	f000 fbd6 	bl	8002e4e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	2000014c 	.word	0x2000014c

080026ac <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026b0:	4802      	ldr	r0, [pc, #8]	@ (80026bc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80026b2:	f006 fcff 	bl	80090b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000308 	.word	0x20000308

080026c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026c4:	4802      	ldr	r0, [pc, #8]	@ (80026d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80026c6:	f006 fcf5 	bl	80090b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000308 	.word	0x20000308

080026d4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026d8:	4802      	ldr	r0, [pc, #8]	@ (80026e4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80026da:	f006 fceb 	bl	80090b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000308 	.word	0x20000308

080026e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026ec:	4802      	ldr	r0, [pc, #8]	@ (80026f8 <TIM1_CC_IRQHandler+0x10>)
 80026ee:	f006 fce1 	bl	80090b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	20000308 	.word	0x20000308

080026fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002700:	4802      	ldr	r0, [pc, #8]	@ (800270c <TIM2_IRQHandler+0x10>)
 8002702:	f006 fcd7 	bl	80090b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000350 	.word	0x20000350

08002710 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002714:	4802      	ldr	r0, [pc, #8]	@ (8002720 <TIM3_IRQHandler+0x10>)
 8002716:	f006 fccd 	bl	80090b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20000398 	.word	0x20000398

08002724 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002728:	4802      	ldr	r0, [pc, #8]	@ (8002734 <I2C1_EV_IRQHandler+0x10>)
 800272a:	f002 fc25 	bl	8004f78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	200001f4 	.word	0x200001f4

08002738 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800273c:	4802      	ldr	r0, [pc, #8]	@ (8002748 <I2C1_ER_IRQHandler+0x10>)
 800273e:	f002 fd8c 	bl	800525a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	200001f4 	.word	0x200001f4

0800274c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002750:	4802      	ldr	r0, [pc, #8]	@ (800275c <DMA2_Stream0_IRQHandler+0x10>)
 8002752:	f001 fa93 	bl	8003c7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000194 	.word	0x20000194

08002760 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002764:	4802      	ldr	r0, [pc, #8]	@ (8002770 <OTG_FS_IRQHandler+0x10>)
 8002766:	f004 fea1 	bl	80074ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20001370 	.word	0x20001370

08002774 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002778:	4b06      	ldr	r3, [pc, #24]	@ (8002794 <SystemInit+0x20>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277e:	4a05      	ldr	r2, [pc, #20]	@ (8002794 <SystemInit+0x20>)
 8002780:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002784:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <unerPrtcl_PutHeaderOnTx>:


//Function definitions

uint8_t unerPrtcl_PutHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	70fb      	strb	r3, [r7, #3]
 80027a4:	4613      	mov	r3, r2
 80027a6:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 80027a8:	78bb      	ldrb	r3, [r7, #2]
 80027aa:	3301      	adds	r3, #1
 80027ac:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	795a      	ldrb	r2, [r3, #5]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	795b      	ldrb	r3, [r3, #5]
 80027c4:	1c59      	adds	r1, r3, #1
 80027c6:	b2c8      	uxtb	r0, r1
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	7148      	strb	r0, [r1, #5]
 80027cc:	4413      	add	r3, r2
 80027ce:	2255      	movs	r2, #85	@ 0x55
 80027d0:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	795a      	ldrb	r2, [r3, #5]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	799b      	ldrb	r3, [r3, #6]
 80027da:	4013      	ands	r3, r2
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	795b      	ldrb	r3, [r3, #5]
 80027ea:	1c59      	adds	r1, r3, #1
 80027ec:	b2c8      	uxtb	r0, r1
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	7148      	strb	r0, [r1, #5]
 80027f2:	4413      	add	r3, r2
 80027f4:	224e      	movs	r2, #78	@ 0x4e
 80027f6:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	795a      	ldrb	r2, [r3, #5]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	799b      	ldrb	r3, [r3, #6]
 8002800:	4013      	ands	r3, r2
 8002802:	b2da      	uxtb	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	795b      	ldrb	r3, [r3, #5]
 8002810:	1c59      	adds	r1, r3, #1
 8002812:	b2c8      	uxtb	r0, r1
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	7148      	strb	r0, [r1, #5]
 8002818:	4413      	add	r3, r2
 800281a:	2245      	movs	r2, #69	@ 0x45
 800281c:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	795a      	ldrb	r2, [r3, #5]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	799b      	ldrb	r3, [r3, #6]
 8002826:	4013      	ands	r3, r2
 8002828:	b2da      	uxtb	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	795b      	ldrb	r3, [r3, #5]
 8002836:	1c59      	adds	r1, r3, #1
 8002838:	b2c8      	uxtb	r0, r1
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	7148      	strb	r0, [r1, #5]
 800283e:	4413      	add	r3, r2
 8002840:	2252      	movs	r2, #82	@ 0x52
 8002842:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	795a      	ldrb	r2, [r3, #5]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	799b      	ldrb	r3, [r3, #6]
 800284c:	4013      	ands	r3, r2
 800284e:	b2da      	uxtb	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	795b      	ldrb	r3, [r3, #5]
 800285c:	1c59      	adds	r1, r3, #1
 800285e:	b2c8      	uxtb	r0, r1
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	7148      	strb	r0, [r1, #5]
 8002864:	4413      	add	r3, r2
 8002866:	78ba      	ldrb	r2, [r7, #2]
 8002868:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	795a      	ldrb	r2, [r3, #5]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	799b      	ldrb	r3, [r3, #6]
 8002872:	4013      	ands	r3, r2
 8002874:	b2da      	uxtb	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	795b      	ldrb	r3, [r3, #5]
 8002882:	1c59      	adds	r1, r3, #1
 8002884:	b2c8      	uxtb	r0, r1
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	7148      	strb	r0, [r1, #5]
 800288a:	4413      	add	r3, r2
 800288c:	223a      	movs	r2, #58	@ 0x3a
 800288e:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	795a      	ldrb	r2, [r3, #5]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	799b      	ldrb	r3, [r3, #6]
 8002898:	4013      	ands	r3, r2
 800289a:	b2da      	uxtb	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	795b      	ldrb	r3, [r3, #5]
 80028a8:	1c59      	adds	r1, r3, #1
 80028aa:	b2c8      	uxtb	r0, r1
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	7148      	strb	r0, [r1, #5]
 80028b0:	4413      	add	r3, r2
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	795a      	ldrb	r2, [r3, #5]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	799b      	ldrb	r3, [r3, #6]
 80028be:	4013      	ands	r3, r2
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2207      	movs	r2, #7
 80028ca:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	7a5a      	ldrb	r2, [r3, #9]
 80028d0:	78b9      	ldrb	r1, [r7, #2]
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	404b      	eors	r3, r1
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	4053      	eors	r3, r2
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	7a5b      	ldrb	r3, [r3, #9]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <unerPrtcl_PutByteOnTx>:

uint8_t unerPrtcl_PutByteOnTx(_sTx *dataTx, uint8_t byte)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
 80028fe:	460b      	mov	r3, r1
 8002900:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	79db      	ldrb	r3, [r3, #7]
 8002906:	3301      	adds	r3, #1
 8002908:	b2da      	uxtb	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	795b      	ldrb	r3, [r3, #5]
 8002916:	1c59      	adds	r1, r3, #1
 8002918:	b2c8      	uxtb	r0, r1
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	7148      	strb	r0, [r1, #5]
 800291e:	4413      	add	r3, r2
 8002920:	78fa      	ldrb	r2, [r7, #3]
 8002922:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	795a      	ldrb	r2, [r3, #5]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	799b      	ldrb	r3, [r3, #6]
 800292c:	4013      	ands	r3, r2
 800292e:	b2da      	uxtb	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	7a5a      	ldrb	r2, [r3, #9]
 8002938:	78fb      	ldrb	r3, [r7, #3]
 800293a:	4053      	eors	r3, r2
 800293c:	b2da      	uxtb	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	7a5b      	ldrb	r3, [r3, #9]
}
 8002946:	4618      	mov	r0, r3
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <unerPrtcl_PutStrOntx>:

uint8_t unerPrtcl_PutStrOntx(_sTx *dataTx, const char *str)
{
 8002952:	b490      	push	{r4, r7}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 8002960:	e02c      	b.n	80029bc <unerPrtcl_PutStrOntx+0x6a>
    	dataTx->bytes++;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	79db      	ldrb	r3, [r3, #7]
 8002966:	3301      	adds	r3, #1
 8002968:	b2da      	uxtb	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	441a      	add	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6819      	ldr	r1, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	795b      	ldrb	r3, [r3, #5]
 8002980:	1c58      	adds	r0, r3, #1
 8002982:	b2c4      	uxtb	r4, r0
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	7144      	strb	r4, [r0, #5]
 8002988:	440b      	add	r3, r1
 800298a:	7812      	ldrb	r2, [r2, #0]
 800298c:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	795a      	ldrb	r2, [r3, #5]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	799b      	ldrb	r3, [r3, #6]
 8002996:	4013      	ands	r3, r2
 8002998:	b2da      	uxtb	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	73fa      	strb	r2, [r7, #15]
 80029a8:	461a      	mov	r2, r3
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	4413      	add	r3, r2
 80029ae:	781a      	ldrb	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	7a5b      	ldrb	r3, [r3, #9]
 80029b4:	4053      	eors	r3, r2
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	461a      	mov	r2, r3
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	4413      	add	r3, r2
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1ca      	bne.n	8002962 <unerPrtcl_PutStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7a5b      	ldrb	r3, [r3, #9]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc90      	pop	{r4, r7}
 80029d8:	4770      	bx	lr
	...

080029dc <unerPrtcl_DecodeHeader>:
	return getByte;
}


uint8_t unerPrtcl_DecodeHeader(_sTx *dataRx)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	795b      	ldrb	r3, [r3, #5]
 80029ec:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 80029ee:	e0e4      	b.n	8002bba <unerPrtcl_DecodeHeader+0x1de>
        switch(header)
 80029f0:	4b78      	ldr	r3, [pc, #480]	@ (8002bd4 <unerPrtcl_DecodeHeader+0x1f8>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b07      	cmp	r3, #7
 80029f6:	f200 80c9 	bhi.w	8002b8c <unerPrtcl_DecodeHeader+0x1b0>
 80029fa:	a201      	add	r2, pc, #4	@ (adr r2, 8002a00 <unerPrtcl_DecodeHeader+0x24>)
 80029fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a00:	08002a21 	.word	0x08002a21
 8002a04:	08002a3b 	.word	0x08002a3b
 8002a08:	08002a79 	.word	0x08002a79
 8002a0c:	08002aa5 	.word	0x08002aa5
 8002a10:	08002ad1 	.word	0x08002ad1
 8002a14:	08002ae7 	.word	0x08002ae7
 8002a18:	08002b8d 	.word	0x08002b8d
 8002a1c:	08002b49 	.word	0x08002b49
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	7912      	ldrb	r2, [r2, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b55      	cmp	r3, #85	@ 0x55
 8002a2e:	f040 80b1 	bne.w	8002b94 <unerPrtcl_DecodeHeader+0x1b8>
                   header = HEADER_N;
 8002a32:	4b68      	ldr	r3, [pc, #416]	@ (8002bd4 <unerPrtcl_DecodeHeader+0x1f8>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	701a      	strb	r2, [r3, #0]
                }
            break;
 8002a38:	e0ac      	b.n	8002b94 <unerPrtcl_DecodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	7912      	ldrb	r2, [r2, #4]
 8002a42:	4413      	add	r3, r2
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b4e      	cmp	r3, #78	@ 0x4e
 8002a48:	d103      	bne.n	8002a52 <unerPrtcl_DecodeHeader+0x76>
                    header = HEADER_E;
 8002a4a:	4b62      	ldr	r3, [pc, #392]	@ (8002bd4 <unerPrtcl_DecodeHeader+0x1f8>)
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 8002a50:	e0a2      	b.n	8002b98 <unerPrtcl_DecodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	7912      	ldrb	r2, [r2, #4]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b55      	cmp	r3, #85	@ 0x55
 8002a60:	f000 809a 	beq.w	8002b98 <unerPrtcl_DecodeHeader+0x1bc>
                    	header = HEADER_U;
 8002a64:	4b5b      	ldr	r3, [pc, #364]	@ (8002bd4 <unerPrtcl_DecodeHeader+0x1f8>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	791b      	ldrb	r3, [r3, #4]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	711a      	strb	r2, [r3, #4]
            break;
 8002a76:	e08f      	b.n	8002b98 <unerPrtcl_DecodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	7912      	ldrb	r2, [r2, #4]
 8002a80:	4413      	add	r3, r2
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b45      	cmp	r3, #69	@ 0x45
 8002a86:	d103      	bne.n	8002a90 <unerPrtcl_DecodeHeader+0xb4>
                    header = HEADER_R;
 8002a88:	4b52      	ldr	r3, [pc, #328]	@ (8002bd4 <unerPrtcl_DecodeHeader+0x1f8>)
 8002a8a:	2203      	movs	r2, #3
 8002a8c:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8002a8e:	e086      	b.n	8002b9e <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8002a90:	4b50      	ldr	r3, [pc, #320]	@ (8002bd4 <unerPrtcl_DecodeHeader+0x1f8>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	791b      	ldrb	r3, [r3, #4]
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	711a      	strb	r2, [r3, #4]
            break;
 8002aa2:	e07c      	b.n	8002b9e <unerPrtcl_DecodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	7912      	ldrb	r2, [r2, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b52      	cmp	r3, #82	@ 0x52
 8002ab2:	d103      	bne.n	8002abc <unerPrtcl_DecodeHeader+0xe0>
                    header = NBYTES;
 8002ab4:	4b47      	ldr	r3, [pc, #284]	@ (8002bd4 <unerPrtcl_DecodeHeader+0x1f8>)
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8002aba:	e070      	b.n	8002b9e <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8002abc:	4b45      	ldr	r3, [pc, #276]	@ (8002bd4 <unerPrtcl_DecodeHeader+0x1f8>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	791b      	ldrb	r3, [r3, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b2da      	uxtb	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	711a      	strb	r2, [r3, #4]
            break;
 8002ace:	e066      	b.n	8002b9e <unerPrtcl_DecodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	7912      	ldrb	r2, [r2, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 8002ade:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd4 <unerPrtcl_DecodeHeader+0x1f8>)
 8002ae0:	2205      	movs	r2, #5
 8002ae2:	701a      	strb	r2, [r3, #0]
            break;
 8002ae4:	e05b      	b.n	8002b9e <unerPrtcl_DecodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	7912      	ldrb	r2, [r2, #4]
 8002aee:	4413      	add	r3, r2
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b3a      	cmp	r3, #58	@ 0x3a
 8002af4:	d11e      	bne.n	8002b34 <unerPrtcl_DecodeHeader+0x158>
                    header = PAYLOAD;
 8002af6:	4b37      	ldr	r3, [pc, #220]	@ (8002bd4 <unerPrtcl_DecodeHeader+0x1f8>)
 8002af8:	2207      	movs	r2, #7
 8002afa:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	791b      	ldrb	r3, [r3, #4]
 8002b00:	3301      	adds	r3, #1
 8002b02:	b2da      	uxtb	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7a1a      	ldrb	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	799b      	ldrb	r3, [r3, #6]
 8002b10:	4013      	ands	r3, r2
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	7a5a      	ldrb	r2, [r3, #9]
 8002b22:	7bfb      	ldrb	r3, [r7, #15]
 8002b24:	4053      	eors	r3, r2
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8002b32:	e034      	b.n	8002b9e <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8002b34:	4b27      	ldr	r3, [pc, #156]	@ (8002bd4 <unerPrtcl_DecodeHeader+0x1f8>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	791b      	ldrb	r3, [r3, #4]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	711a      	strb	r2, [r3, #4]
            break;
 8002b46:	e02a      	b.n	8002b9e <unerPrtcl_DecodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 8002b4e:	7bfb      	ldrb	r3, [r7, #15]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00c      	beq.n	8002b6e <unerPrtcl_DecodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	7a5a      	ldrb	r2, [r3, #9]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	7909      	ldrb	r1, [r1, #4]
 8002b60:	440b      	add	r3, r1
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	4053      	eors	r3, r2
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 8002b6c:	e016      	b.n	8002b9c <unerPrtcl_DecodeHeader+0x1c0>
                    header = HEADER_U;
 8002b6e:	4b19      	ldr	r3, [pc, #100]	@ (8002bd4 <unerPrtcl_DecodeHeader+0x1f8>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	7912      	ldrb	r2, [r2, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	781a      	ldrb	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	7a5b      	ldrb	r3, [r3, #9]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d109      	bne.n	8002b9c <unerPrtcl_DecodeHeader+0x1c0>
                        return TRUE;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e01d      	b.n	8002bc8 <unerPrtcl_DecodeHeader+0x1ec>
            default:
                header = HEADER_U;
 8002b8c:	4b11      	ldr	r3, [pc, #68]	@ (8002bd4 <unerPrtcl_DecodeHeader+0x1f8>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
            break;
 8002b92:	e004      	b.n	8002b9e <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8002b94:	bf00      	nop
 8002b96:	e002      	b.n	8002b9e <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8002b98:	bf00      	nop
 8002b9a:	e000      	b.n	8002b9e <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8002b9c:	bf00      	nop
        }
        dataRx->indexR++;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	791b      	ldrb	r3, [r3, #4]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	791a      	ldrb	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	799b      	ldrb	r3, [r3, #6]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	791b      	ldrb	r3, [r3, #4]
 8002bbe:	7bba      	ldrb	r2, [r7, #14]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	f47f af15 	bne.w	80029f0 <unerPrtcl_DecodeHeader+0x14>
    }
    return FALSE;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	20000a86 	.word	0x20000a86

08002bd8 <unerPrtcl_Init>:

void unerPrtcl_Init(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	603b      	str	r3, [r7, #0]
	Rx->buff = (uint8_t *)buffRx;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	22ff      	movs	r2, #255	@ 0xff
 8002c08:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2200      	movs	r2, #0
 8002c26:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	22ff      	movs	r2, #255	@ 0xff
 8002c32:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2200      	movs	r2, #0
 8002c38:	725a      	strb	r2, [r3, #9]

}
 8002c3a:	bf00      	nop
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c4c:	f7ff fd92 	bl	8002774 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c50:	480c      	ldr	r0, [pc, #48]	@ (8002c84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c52:	490d      	ldr	r1, [pc, #52]	@ (8002c88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c54:	4a0d      	ldr	r2, [pc, #52]	@ (8002c8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c58:	e002      	b.n	8002c60 <LoopCopyDataInit>

08002c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5e:	3304      	adds	r3, #4

08002c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c64:	d3f9      	bcc.n	8002c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c66:	4a0a      	ldr	r2, [pc, #40]	@ (8002c90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c68:	4c0a      	ldr	r4, [pc, #40]	@ (8002c94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c6c:	e001      	b.n	8002c72 <LoopFillZerobss>

08002c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c70:	3204      	adds	r2, #4

08002c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c74:	d3fb      	bcc.n	8002c6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c76:	f00a ff35 	bl	800dae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c7a:	f7fe fbb3 	bl	80013e4 <main>
  bx  lr    
 8002c7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c88:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8002c8c:	0800dbcc 	.word	0x0800dbcc
  ldr r2, =_sbss
 8002c90:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8002c94:	20001a74 	.word	0x20001a74

08002c98 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c98:	e7fe      	b.n	8002c98 <DMA1_Stream2_IRQHandler>
	...

08002c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8002cdc <HAL_Init+0x40>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cdc <HAL_Init+0x40>)
 8002ca6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cac:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <HAL_Init+0x40>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cdc <HAL_Init+0x40>)
 8002cb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cb8:	4b08      	ldr	r3, [pc, #32]	@ (8002cdc <HAL_Init+0x40>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a07      	ldr	r2, [pc, #28]	@ (8002cdc <HAL_Init+0x40>)
 8002cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cc4:	2003      	movs	r0, #3
 8002cc6:	f000 fe6f 	bl	80039a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cca:	200f      	movs	r0, #15
 8002ccc:	f000 f808 	bl	8002ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cd0:	f7ff fac2 	bl	8002258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40023c00 	.word	0x40023c00

08002ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ce8:	4b12      	ldr	r3, [pc, #72]	@ (8002d34 <HAL_InitTick+0x54>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b12      	ldr	r3, [pc, #72]	@ (8002d38 <HAL_InitTick+0x58>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fe87 	bl	8003a12 <HAL_SYSTICK_Config>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e00e      	b.n	8002d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b0f      	cmp	r3, #15
 8002d12:	d80a      	bhi.n	8002d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d14:	2200      	movs	r2, #0
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1c:	f000 fe4f 	bl	80039be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d20:	4a06      	ldr	r2, [pc, #24]	@ (8002d3c <HAL_InitTick+0x5c>)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e000      	b.n	8002d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	2000002c 	.word	0x2000002c
 8002d38:	20000034 	.word	0x20000034
 8002d3c:	20000030 	.word	0x20000030

08002d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d44:	4b06      	ldr	r3, [pc, #24]	@ (8002d60 <HAL_IncTick+0x20>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <HAL_IncTick+0x24>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	4a04      	ldr	r2, [pc, #16]	@ (8002d64 <HAL_IncTick+0x24>)
 8002d52:	6013      	str	r3, [r2, #0]
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000034 	.word	0x20000034
 8002d64:	20000a88 	.word	0x20000a88

08002d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	@ (8002d7c <HAL_GetTick+0x14>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000a88 	.word	0x20000a88

08002d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d88:	f7ff ffee 	bl	8002d68 <HAL_GetTick>
 8002d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d005      	beq.n	8002da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <HAL_Delay+0x44>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4413      	add	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002da6:	bf00      	nop
 8002da8:	f7ff ffde 	bl	8002d68 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d8f7      	bhi.n	8002da8 <HAL_Delay+0x28>
  {
  }
}
 8002db8:	bf00      	nop
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000034 	.word	0x20000034

08002dc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e033      	b.n	8002e46 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff fa5e 	bl	80022a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d118      	bne.n	8002e38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002e0e:	f023 0302 	bic.w	r3, r3, #2
 8002e12:	f043 0202 	orr.w	r2, r3, #2
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fb6c 	bl	80034f8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	f023 0303 	bic.w	r3, r3, #3
 8002e2e:	f043 0201 	orr.w	r2, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e36:	e001      	b.n	8002e3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b086      	sub	sp, #24
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d049      	beq.n	8002f18 <HAL_ADC_IRQHandler+0xca>
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d046      	beq.n	8002f18 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d105      	bne.n	8002ea2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d12b      	bne.n	8002f08 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d127      	bne.n	8002f08 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d006      	beq.n	8002ed4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d119      	bne.n	8002f08 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0220 	bic.w	r2, r2, #32
 8002ee2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d105      	bne.n	8002f08 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f00:	f043 0201 	orr.w	r2, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7fd fef1 	bl	8000cf0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f06f 0212 	mvn.w	r2, #18
 8002f16:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f26:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d057      	beq.n	8002fde <HAL_ADC_IRQHandler+0x190>
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d054      	beq.n	8002fde <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d105      	bne.n	8002f4c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f44:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d139      	bne.n	8002fce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f60:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d006      	beq.n	8002f76 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d12b      	bne.n	8002fce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d124      	bne.n	8002fce <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d11d      	bne.n	8002fce <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d119      	bne.n	8002fce <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fa8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d105      	bne.n	8002fce <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	f043 0201 	orr.w	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fc10 	bl	80037f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 020c 	mvn.w	r2, #12
 8002fdc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fec:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d017      	beq.n	8003024 <HAL_ADC_IRQHandler+0x1d6>
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d014      	beq.n	8003024 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b01      	cmp	r3, #1
 8003006:	d10d      	bne.n	8003024 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f929 	bl	800326c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f06f 0201 	mvn.w	r2, #1
 8003022:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003032:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d015      	beq.n	8003066 <HAL_ADC_IRQHandler+0x218>
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d012      	beq.n	8003066 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003044:	f043 0202 	orr.w	r2, r3, #2
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0220 	mvn.w	r2, #32
 8003054:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f912 	bl	8003280 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0220 	mvn.w	r2, #32
 8003064:	601a      	str	r2, [r3, #0]
  }
}
 8003066:	bf00      	nop
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_ADC_Start_DMA+0x22>
 800308e:	2302      	movs	r3, #2
 8003090:	e0d0      	b.n	8003234 <HAL_ADC_Start_DMA+0x1c4>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d018      	beq.n	80030da <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030b8:	4b60      	ldr	r3, [pc, #384]	@ (800323c <HAL_ADC_Start_DMA+0x1cc>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a60      	ldr	r2, [pc, #384]	@ (8003240 <HAL_ADC_Start_DMA+0x1d0>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	0c9a      	lsrs	r2, r3, #18
 80030c4:	4613      	mov	r3, r2
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4413      	add	r3, r2
 80030ca:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80030cc:	e002      	b.n	80030d4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f9      	bne.n	80030ce <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030e8:	d107      	bne.n	80030fa <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030f8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b01      	cmp	r3, #1
 8003106:	f040 8088 	bne.w	800321a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003112:	f023 0301 	bic.w	r3, r3, #1
 8003116:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003128:	2b00      	cmp	r3, #0
 800312a:	d007      	beq.n	800313c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003134:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003140:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003148:	d106      	bne.n	8003158 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314e:	f023 0206 	bic.w	r2, r3, #6
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	645a      	str	r2, [r3, #68]	@ 0x44
 8003156:	e002      	b.n	800315e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003166:	4b37      	ldr	r3, [pc, #220]	@ (8003244 <HAL_ADC_Start_DMA+0x1d4>)
 8003168:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800316e:	4a36      	ldr	r2, [pc, #216]	@ (8003248 <HAL_ADC_Start_DMA+0x1d8>)
 8003170:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003176:	4a35      	ldr	r2, [pc, #212]	@ (800324c <HAL_ADC_Start_DMA+0x1dc>)
 8003178:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800317e:	4a34      	ldr	r2, [pc, #208]	@ (8003250 <HAL_ADC_Start_DMA+0x1e0>)
 8003180:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800318a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800319a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031aa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	334c      	adds	r3, #76	@ 0x4c
 80031b6:	4619      	mov	r1, r3
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f000 fce4 	bl	8003b88 <HAL_DMA_Start_IT>
 80031c0:	4603      	mov	r3, r0
 80031c2:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10f      	bne.n	80031f0 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d129      	bne.n	8003232 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80031ec:	609a      	str	r2, [r3, #8]
 80031ee:	e020      	b.n	8003232 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a17      	ldr	r2, [pc, #92]	@ (8003254 <HAL_ADC_Start_DMA+0x1e4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d11b      	bne.n	8003232 <HAL_ADC_Start_DMA+0x1c2>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d114      	bne.n	8003232 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003216:	609a      	str	r2, [r3, #8]
 8003218:	e00b      	b.n	8003232 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321e:	f043 0210 	orr.w	r2, r3, #16
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	f043 0201 	orr.w	r2, r3, #1
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003232:	7ffb      	ldrb	r3, [r7, #31]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3720      	adds	r7, #32
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	2000002c 	.word	0x2000002c
 8003240:	431bde83 	.word	0x431bde83
 8003244:	40012300 	.word	0x40012300
 8003248:	080036f1 	.word	0x080036f1
 800324c:	080037ab 	.word	0x080037ab
 8003250:	080037c7 	.word	0x080037c7
 8003254:	40012000 	.word	0x40012000

08003258 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x1c>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e113      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x244>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b09      	cmp	r3, #9
 80032be:	d925      	bls.n	800330c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68d9      	ldr	r1, [r3, #12]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	4613      	mov	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4413      	add	r3, r2
 80032d4:	3b1e      	subs	r3, #30
 80032d6:	2207      	movs	r2, #7
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43da      	mvns	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	400a      	ands	r2, r1
 80032e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68d9      	ldr	r1, [r3, #12]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	4618      	mov	r0, r3
 80032f8:	4603      	mov	r3, r0
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4403      	add	r3, r0
 80032fe:	3b1e      	subs	r3, #30
 8003300:	409a      	lsls	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	e022      	b.n	8003352 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6919      	ldr	r1, [r3, #16]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	b29b      	uxth	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	4613      	mov	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	2207      	movs	r2, #7
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43da      	mvns	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	400a      	ands	r2, r1
 800332e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6919      	ldr	r1, [r3, #16]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	b29b      	uxth	r3, r3
 8003340:	4618      	mov	r0, r3
 8003342:	4603      	mov	r3, r0
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	4403      	add	r3, r0
 8003348:	409a      	lsls	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b06      	cmp	r3, #6
 8003358:	d824      	bhi.n	80033a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	3b05      	subs	r3, #5
 800336c:	221f      	movs	r2, #31
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43da      	mvns	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	400a      	ands	r2, r1
 800337a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	4618      	mov	r0, r3
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	3b05      	subs	r3, #5
 8003396:	fa00 f203 	lsl.w	r2, r0, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80033a2:	e04c      	b.n	800343e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b0c      	cmp	r3, #12
 80033aa:	d824      	bhi.n	80033f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	3b23      	subs	r3, #35	@ 0x23
 80033be:	221f      	movs	r2, #31
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43da      	mvns	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	400a      	ands	r2, r1
 80033cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	b29b      	uxth	r3, r3
 80033da:	4618      	mov	r0, r3
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	3b23      	subs	r3, #35	@ 0x23
 80033e8:	fa00 f203 	lsl.w	r2, r0, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80033f4:	e023      	b.n	800343e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	3b41      	subs	r3, #65	@ 0x41
 8003408:	221f      	movs	r2, #31
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	43da      	mvns	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	400a      	ands	r2, r1
 8003416:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	4618      	mov	r0, r3
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	3b41      	subs	r3, #65	@ 0x41
 8003432:	fa00 f203 	lsl.w	r2, r0, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800343e:	4b29      	ldr	r3, [pc, #164]	@ (80034e4 <HAL_ADC_ConfigChannel+0x250>)
 8003440:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a28      	ldr	r2, [pc, #160]	@ (80034e8 <HAL_ADC_ConfigChannel+0x254>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d10f      	bne.n	800346c <HAL_ADC_ConfigChannel+0x1d8>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b12      	cmp	r3, #18
 8003452:	d10b      	bne.n	800346c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1d      	ldr	r2, [pc, #116]	@ (80034e8 <HAL_ADC_ConfigChannel+0x254>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d12b      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x23a>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a1c      	ldr	r2, [pc, #112]	@ (80034ec <HAL_ADC_ConfigChannel+0x258>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d003      	beq.n	8003488 <HAL_ADC_ConfigChannel+0x1f4>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b11      	cmp	r3, #17
 8003486:	d122      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a11      	ldr	r2, [pc, #68]	@ (80034ec <HAL_ADC_ConfigChannel+0x258>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d111      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034aa:	4b11      	ldr	r3, [pc, #68]	@ (80034f0 <HAL_ADC_ConfigChannel+0x25c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a11      	ldr	r2, [pc, #68]	@ (80034f4 <HAL_ADC_ConfigChannel+0x260>)
 80034b0:	fba2 2303 	umull	r2, r3, r2, r3
 80034b4:	0c9a      	lsrs	r2, r3, #18
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80034c0:	e002      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d1f9      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	40012300 	.word	0x40012300
 80034e8:	40012000 	.word	0x40012000
 80034ec:	10000012 	.word	0x10000012
 80034f0:	2000002c 	.word	0x2000002c
 80034f4:	431bde83 	.word	0x431bde83

080034f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003500:	4b79      	ldr	r3, [pc, #484]	@ (80036e8 <ADC_Init+0x1f0>)
 8003502:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	431a      	orrs	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800352c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	021a      	lsls	r2, r3, #8
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003550:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6859      	ldr	r1, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003572:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6899      	ldr	r1, [r3, #8]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358a:	4a58      	ldr	r2, [pc, #352]	@ (80036ec <ADC_Init+0x1f4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d022      	beq.n	80035d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	689a      	ldr	r2, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800359e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6899      	ldr	r1, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6899      	ldr	r1, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	e00f      	b.n	80035f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0202 	bic.w	r2, r2, #2
 8003604:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6899      	ldr	r1, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	7e1b      	ldrb	r3, [r3, #24]
 8003610:	005a      	lsls	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d01b      	beq.n	800365c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685a      	ldr	r2, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003632:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003642:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6859      	ldr	r1, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364e:	3b01      	subs	r3, #1
 8003650:	035a      	lsls	r2, r3, #13
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	e007      	b.n	800366c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800366a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800367a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	3b01      	subs	r3, #1
 8003688:	051a      	lsls	r2, r3, #20
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80036a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6899      	ldr	r1, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80036ae:	025a      	lsls	r2, r3, #9
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6899      	ldr	r1, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	029a      	lsls	r2, r3, #10
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	430a      	orrs	r2, r1
 80036da:	609a      	str	r2, [r3, #8]
}
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	40012300 	.word	0x40012300
 80036ec:	0f000001 	.word	0x0f000001

080036f0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003706:	2b00      	cmp	r3, #0
 8003708:	d13c      	bne.n	8003784 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d12b      	bne.n	800377c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003728:	2b00      	cmp	r3, #0
 800372a:	d127      	bne.n	800377c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003732:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003736:	2b00      	cmp	r3, #0
 8003738:	d006      	beq.n	8003748 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003744:	2b00      	cmp	r3, #0
 8003746:	d119      	bne.n	800377c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0220 	bic.w	r2, r2, #32
 8003756:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d105      	bne.n	800377c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	f043 0201 	orr.w	r2, r3, #1
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f7fd fab7 	bl	8000cf0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003782:	e00e      	b.n	80037a2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f7ff fd75 	bl	8003280 <HAL_ADC_ErrorCallback>
}
 8003796:	e004      	b.n	80037a2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800379c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	4798      	blx	r3
}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b084      	sub	sp, #16
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f7ff fd4d 	bl	8003258 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2240      	movs	r2, #64	@ 0x40
 80037d8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037de:	f043 0204 	orr.w	r2, r3, #4
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f7ff fd4a 	bl	8003280 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037ec:	bf00      	nop
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80037fc:	bf00      	nop
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f003 0307 	and.w	r3, r3, #7
 8003816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003818:	4b0c      	ldr	r3, [pc, #48]	@ (800384c <__NVIC_SetPriorityGrouping+0x44>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003824:	4013      	ands	r3, r2
 8003826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003830:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800383a:	4a04      	ldr	r2, [pc, #16]	@ (800384c <__NVIC_SetPriorityGrouping+0x44>)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	60d3      	str	r3, [r2, #12]
}
 8003840:	bf00      	nop
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003854:	4b04      	ldr	r3, [pc, #16]	@ (8003868 <__NVIC_GetPriorityGrouping+0x18>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	0a1b      	lsrs	r3, r3, #8
 800385a:	f003 0307 	and.w	r3, r3, #7
}
 800385e:	4618      	mov	r0, r3
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	e000ed00 	.word	0xe000ed00

0800386c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387a:	2b00      	cmp	r3, #0
 800387c:	db0b      	blt.n	8003896 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800387e:	79fb      	ldrb	r3, [r7, #7]
 8003880:	f003 021f 	and.w	r2, r3, #31
 8003884:	4907      	ldr	r1, [pc, #28]	@ (80038a4 <__NVIC_EnableIRQ+0x38>)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	2001      	movs	r0, #1
 800388e:	fa00 f202 	lsl.w	r2, r0, r2
 8003892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	e000e100 	.word	0xe000e100

080038a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	6039      	str	r1, [r7, #0]
 80038b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	db0a      	blt.n	80038d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	490c      	ldr	r1, [pc, #48]	@ (80038f4 <__NVIC_SetPriority+0x4c>)
 80038c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c6:	0112      	lsls	r2, r2, #4
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	440b      	add	r3, r1
 80038cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038d0:	e00a      	b.n	80038e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	4908      	ldr	r1, [pc, #32]	@ (80038f8 <__NVIC_SetPriority+0x50>)
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	3b04      	subs	r3, #4
 80038e0:	0112      	lsls	r2, r2, #4
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	440b      	add	r3, r1
 80038e6:	761a      	strb	r2, [r3, #24]
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	e000e100 	.word	0xe000e100
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b089      	sub	sp, #36	@ 0x24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f1c3 0307 	rsb	r3, r3, #7
 8003916:	2b04      	cmp	r3, #4
 8003918:	bf28      	it	cs
 800391a:	2304      	movcs	r3, #4
 800391c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3304      	adds	r3, #4
 8003922:	2b06      	cmp	r3, #6
 8003924:	d902      	bls.n	800392c <NVIC_EncodePriority+0x30>
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	3b03      	subs	r3, #3
 800392a:	e000      	b.n	800392e <NVIC_EncodePriority+0x32>
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003930:	f04f 32ff 	mov.w	r2, #4294967295
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43da      	mvns	r2, r3
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	401a      	ands	r2, r3
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003944:	f04f 31ff 	mov.w	r1, #4294967295
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	fa01 f303 	lsl.w	r3, r1, r3
 800394e:	43d9      	mvns	r1, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003954:	4313      	orrs	r3, r2
         );
}
 8003956:	4618      	mov	r0, r3
 8003958:	3724      	adds	r7, #36	@ 0x24
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr
	...

08003964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3b01      	subs	r3, #1
 8003970:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003974:	d301      	bcc.n	800397a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003976:	2301      	movs	r3, #1
 8003978:	e00f      	b.n	800399a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800397a:	4a0a      	ldr	r2, [pc, #40]	@ (80039a4 <SysTick_Config+0x40>)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3b01      	subs	r3, #1
 8003980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003982:	210f      	movs	r1, #15
 8003984:	f04f 30ff 	mov.w	r0, #4294967295
 8003988:	f7ff ff8e 	bl	80038a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800398c:	4b05      	ldr	r3, [pc, #20]	@ (80039a4 <SysTick_Config+0x40>)
 800398e:	2200      	movs	r2, #0
 8003990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003992:	4b04      	ldr	r3, [pc, #16]	@ (80039a4 <SysTick_Config+0x40>)
 8003994:	2207      	movs	r2, #7
 8003996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3708      	adds	r7, #8
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	e000e010 	.word	0xe000e010

080039a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff ff29 	bl	8003808 <__NVIC_SetPriorityGrouping>
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039be:	b580      	push	{r7, lr}
 80039c0:	b086      	sub	sp, #24
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	4603      	mov	r3, r0
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	607a      	str	r2, [r7, #4]
 80039ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039d0:	f7ff ff3e 	bl	8003850 <__NVIC_GetPriorityGrouping>
 80039d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68b9      	ldr	r1, [r7, #8]
 80039da:	6978      	ldr	r0, [r7, #20]
 80039dc:	f7ff ff8e 	bl	80038fc <NVIC_EncodePriority>
 80039e0:	4602      	mov	r2, r0
 80039e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039e6:	4611      	mov	r1, r2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7ff ff5d 	bl	80038a8 <__NVIC_SetPriority>
}
 80039ee:	bf00      	nop
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	4603      	mov	r3, r0
 80039fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff31 	bl	800386c <__NVIC_EnableIRQ>
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7ff ffa2 	bl	8003964 <SysTick_Config>
 8003a20:	4603      	mov	r3, r0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a38:	f7ff f996 	bl	8002d68 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e099      	b.n	8003b7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0201 	bic.w	r2, r2, #1
 8003a66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a68:	e00f      	b.n	8003a8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a6a:	f7ff f97d 	bl	8002d68 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b05      	cmp	r3, #5
 8003a76:	d908      	bls.n	8003a8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2203      	movs	r2, #3
 8003a82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e078      	b.n	8003b7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e8      	bne.n	8003a6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	4b38      	ldr	r3, [pc, #224]	@ (8003b84 <HAL_DMA_Init+0x158>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ac2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ace:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d107      	bne.n	8003af4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aec:	4313      	orrs	r3, r2
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f023 0307 	bic.w	r3, r3, #7
 8003b0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d117      	bne.n	8003b4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00e      	beq.n	8003b4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 faab 	bl	800408c <DMA_CheckFifoParam>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d008      	beq.n	8003b4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2240      	movs	r2, #64	@ 0x40
 8003b40:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e016      	b.n	8003b7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fa62 	bl	8004020 <DMA_CalcBaseAndBitshift>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b64:	223f      	movs	r2, #63	@ 0x3f
 8003b66:	409a      	lsls	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3718      	adds	r7, #24
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	f010803f 	.word	0xf010803f

08003b88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
 8003b94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d101      	bne.n	8003bae <HAL_DMA_Start_IT+0x26>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e040      	b.n	8003c30 <HAL_DMA_Start_IT+0xa8>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d12f      	bne.n	8003c22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	68b9      	ldr	r1, [r7, #8]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 f9f4 	bl	8003fc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be0:	223f      	movs	r2, #63	@ 0x3f
 8003be2:	409a      	lsls	r2, r3
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f042 0216 	orr.w	r2, r2, #22
 8003bf6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d007      	beq.n	8003c10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0208 	orr.w	r2, r2, #8
 8003c0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 0201 	orr.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	e005      	b.n	8003c2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d004      	beq.n	8003c56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2280      	movs	r2, #128	@ 0x80
 8003c50:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e00c      	b.n	8003c70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2205      	movs	r2, #5
 8003c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0201 	bic.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c88:	4b8e      	ldr	r3, [pc, #568]	@ (8003ec4 <HAL_DMA_IRQHandler+0x248>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a8e      	ldr	r2, [pc, #568]	@ (8003ec8 <HAL_DMA_IRQHandler+0x24c>)
 8003c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c92:	0a9b      	lsrs	r3, r3, #10
 8003c94:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ca6:	2208      	movs	r2, #8
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d01a      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d013      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0204 	bic.w	r2, r2, #4
 8003cce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd4:	2208      	movs	r2, #8
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce0:	f043 0201 	orr.w	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cec:	2201      	movs	r2, #1
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d012      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00b      	beq.n	8003d1e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	409a      	lsls	r2, r3
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d16:	f043 0202 	orr.w	r2, r3, #2
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d22:	2204      	movs	r2, #4
 8003d24:	409a      	lsls	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d012      	beq.n	8003d54 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00b      	beq.n	8003d54 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d40:	2204      	movs	r2, #4
 8003d42:	409a      	lsls	r2, r3
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4c:	f043 0204 	orr.w	r2, r3, #4
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d58:	2210      	movs	r2, #16
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d043      	beq.n	8003dec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d03c      	beq.n	8003dec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d76:	2210      	movs	r2, #16
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d018      	beq.n	8003dbe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d108      	bne.n	8003dac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d024      	beq.n	8003dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	4798      	blx	r3
 8003daa:	e01f      	b.n	8003dec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d01b      	beq.n	8003dec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	4798      	blx	r3
 8003dbc:	e016      	b.n	8003dec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d107      	bne.n	8003ddc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0208 	bic.w	r2, r2, #8
 8003dda:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df0:	2220      	movs	r2, #32
 8003df2:	409a      	lsls	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 808f 	beq.w	8003f1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 8087 	beq.w	8003f1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e12:	2220      	movs	r2, #32
 8003e14:	409a      	lsls	r2, r3
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b05      	cmp	r3, #5
 8003e24:	d136      	bne.n	8003e94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0216 	bic.w	r2, r2, #22
 8003e34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	695a      	ldr	r2, [r3, #20]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d103      	bne.n	8003e56 <HAL_DMA_IRQHandler+0x1da>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d007      	beq.n	8003e66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0208 	bic.w	r2, r2, #8
 8003e64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6a:	223f      	movs	r2, #63	@ 0x3f
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d07e      	beq.n	8003f88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	4798      	blx	r3
        }
        return;
 8003e92:	e079      	b.n	8003f88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d01d      	beq.n	8003ede <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10d      	bne.n	8003ecc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d031      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	4798      	blx	r3
 8003ec0:	e02c      	b.n	8003f1c <HAL_DMA_IRQHandler+0x2a0>
 8003ec2:	bf00      	nop
 8003ec4:	2000002c 	.word	0x2000002c
 8003ec8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d023      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	4798      	blx	r3
 8003edc:	e01e      	b.n	8003f1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10f      	bne.n	8003f0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 0210 	bic.w	r2, r2, #16
 8003efa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d032      	beq.n	8003f8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d022      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2205      	movs	r2, #5
 8003f34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f022 0201 	bic.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d307      	bcc.n	8003f64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1f2      	bne.n	8003f48 <HAL_DMA_IRQHandler+0x2cc>
 8003f62:	e000      	b.n	8003f66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d005      	beq.n	8003f8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	4798      	blx	r3
 8003f86:	e000      	b.n	8003f8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f88:	bf00      	nop
    }
  }
}
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f9e:	b2db      	uxtb	r3, r3
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	607a      	str	r2, [r7, #4]
 8003fd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003fe0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b40      	cmp	r3, #64	@ 0x40
 8003ff0:	d108      	bne.n	8004004 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004002:	e007      	b.n	8004014 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	60da      	str	r2, [r3, #12]
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	3b10      	subs	r3, #16
 8004030:	4a14      	ldr	r2, [pc, #80]	@ (8004084 <DMA_CalcBaseAndBitshift+0x64>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	091b      	lsrs	r3, r3, #4
 8004038:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800403a:	4a13      	ldr	r2, [pc, #76]	@ (8004088 <DMA_CalcBaseAndBitshift+0x68>)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b03      	cmp	r3, #3
 800404c:	d909      	bls.n	8004062 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004056:	f023 0303 	bic.w	r3, r3, #3
 800405a:	1d1a      	adds	r2, r3, #4
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004060:	e007      	b.n	8004072 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800406a:	f023 0303 	bic.w	r3, r3, #3
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	aaaaaaab 	.word	0xaaaaaaab
 8004088:	0800dbb4 	.word	0x0800dbb4

0800408c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d11f      	bne.n	80040e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d856      	bhi.n	800415a <DMA_CheckFifoParam+0xce>
 80040ac:	a201      	add	r2, pc, #4	@ (adr r2, 80040b4 <DMA_CheckFifoParam+0x28>)
 80040ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b2:	bf00      	nop
 80040b4:	080040c5 	.word	0x080040c5
 80040b8:	080040d7 	.word	0x080040d7
 80040bc:	080040c5 	.word	0x080040c5
 80040c0:	0800415b 	.word	0x0800415b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d046      	beq.n	800415e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d4:	e043      	b.n	800415e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040da:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040de:	d140      	bne.n	8004162 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e4:	e03d      	b.n	8004162 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ee:	d121      	bne.n	8004134 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	d837      	bhi.n	8004166 <DMA_CheckFifoParam+0xda>
 80040f6:	a201      	add	r2, pc, #4	@ (adr r2, 80040fc <DMA_CheckFifoParam+0x70>)
 80040f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fc:	0800410d 	.word	0x0800410d
 8004100:	08004113 	.word	0x08004113
 8004104:	0800410d 	.word	0x0800410d
 8004108:	08004125 	.word	0x08004125
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
      break;
 8004110:	e030      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004116:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d025      	beq.n	800416a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004122:	e022      	b.n	800416a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004128:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800412c:	d11f      	bne.n	800416e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004132:	e01c      	b.n	800416e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d903      	bls.n	8004142 <DMA_CheckFifoParam+0xb6>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	2b03      	cmp	r3, #3
 800413e:	d003      	beq.n	8004148 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004140:	e018      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	73fb      	strb	r3, [r7, #15]
      break;
 8004146:	e015      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00e      	beq.n	8004172 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	73fb      	strb	r3, [r7, #15]
      break;
 8004158:	e00b      	b.n	8004172 <DMA_CheckFifoParam+0xe6>
      break;
 800415a:	bf00      	nop
 800415c:	e00a      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      break;
 800415e:	bf00      	nop
 8004160:	e008      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      break;
 8004162:	bf00      	nop
 8004164:	e006      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      break;
 8004166:	bf00      	nop
 8004168:	e004      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      break;
 800416a:	bf00      	nop
 800416c:	e002      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      break;   
 800416e:	bf00      	nop
 8004170:	e000      	b.n	8004174 <DMA_CheckFifoParam+0xe8>
      break;
 8004172:	bf00      	nop
    }
  } 
  
  return status; 
 8004174:	7bfb      	ldrb	r3, [r7, #15]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop

08004184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004184:	b480      	push	{r7}
 8004186:	b089      	sub	sp, #36	@ 0x24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800418e:	2300      	movs	r3, #0
 8004190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004192:	2300      	movs	r3, #0
 8004194:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004196:	2300      	movs	r3, #0
 8004198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800419a:	2300      	movs	r3, #0
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	e159      	b.n	8004454 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041a0:	2201      	movs	r2, #1
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	4013      	ands	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	f040 8148 	bne.w	800444e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d005      	beq.n	80041d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d130      	bne.n	8004238 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	2203      	movs	r2, #3
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43db      	mvns	r3, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4013      	ands	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800420c:	2201      	movs	r2, #1
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	43db      	mvns	r3, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4013      	ands	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	091b      	lsrs	r3, r3, #4
 8004222:	f003 0201 	and.w	r2, r3, #1
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4313      	orrs	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	2b03      	cmp	r3, #3
 8004242:	d017      	beq.n	8004274 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	2203      	movs	r2, #3
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	43db      	mvns	r3, r3
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	4013      	ands	r3, r2
 800425a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	69ba      	ldr	r2, [r7, #24]
 800426a:	4313      	orrs	r3, r2
 800426c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 0303 	and.w	r3, r3, #3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d123      	bne.n	80042c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	08da      	lsrs	r2, r3, #3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	3208      	adds	r2, #8
 8004288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800428c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	220f      	movs	r2, #15
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4013      	ands	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	08da      	lsrs	r2, r3, #3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3208      	adds	r2, #8
 80042c2:	69b9      	ldr	r1, [r7, #24]
 80042c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	2203      	movs	r2, #3
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	4013      	ands	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 0203 	and.w	r2, r3, #3
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 80a2 	beq.w	800444e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	4b57      	ldr	r3, [pc, #348]	@ (800446c <HAL_GPIO_Init+0x2e8>)
 8004310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004312:	4a56      	ldr	r2, [pc, #344]	@ (800446c <HAL_GPIO_Init+0x2e8>)
 8004314:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004318:	6453      	str	r3, [r2, #68]	@ 0x44
 800431a:	4b54      	ldr	r3, [pc, #336]	@ (800446c <HAL_GPIO_Init+0x2e8>)
 800431c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004326:	4a52      	ldr	r2, [pc, #328]	@ (8004470 <HAL_GPIO_Init+0x2ec>)
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	089b      	lsrs	r3, r3, #2
 800432c:	3302      	adds	r3, #2
 800432e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	220f      	movs	r2, #15
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	43db      	mvns	r3, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4013      	ands	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a49      	ldr	r2, [pc, #292]	@ (8004474 <HAL_GPIO_Init+0x2f0>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d019      	beq.n	8004386 <HAL_GPIO_Init+0x202>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a48      	ldr	r2, [pc, #288]	@ (8004478 <HAL_GPIO_Init+0x2f4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d013      	beq.n	8004382 <HAL_GPIO_Init+0x1fe>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a47      	ldr	r2, [pc, #284]	@ (800447c <HAL_GPIO_Init+0x2f8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d00d      	beq.n	800437e <HAL_GPIO_Init+0x1fa>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a46      	ldr	r2, [pc, #280]	@ (8004480 <HAL_GPIO_Init+0x2fc>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d007      	beq.n	800437a <HAL_GPIO_Init+0x1f6>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a45      	ldr	r2, [pc, #276]	@ (8004484 <HAL_GPIO_Init+0x300>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d101      	bne.n	8004376 <HAL_GPIO_Init+0x1f2>
 8004372:	2304      	movs	r3, #4
 8004374:	e008      	b.n	8004388 <HAL_GPIO_Init+0x204>
 8004376:	2307      	movs	r3, #7
 8004378:	e006      	b.n	8004388 <HAL_GPIO_Init+0x204>
 800437a:	2303      	movs	r3, #3
 800437c:	e004      	b.n	8004388 <HAL_GPIO_Init+0x204>
 800437e:	2302      	movs	r3, #2
 8004380:	e002      	b.n	8004388 <HAL_GPIO_Init+0x204>
 8004382:	2301      	movs	r3, #1
 8004384:	e000      	b.n	8004388 <HAL_GPIO_Init+0x204>
 8004386:	2300      	movs	r3, #0
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	f002 0203 	and.w	r2, r2, #3
 800438e:	0092      	lsls	r2, r2, #2
 8004390:	4093      	lsls	r3, r2
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	4313      	orrs	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004398:	4935      	ldr	r1, [pc, #212]	@ (8004470 <HAL_GPIO_Init+0x2ec>)
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	089b      	lsrs	r3, r3, #2
 800439e:	3302      	adds	r3, #2
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043a6:	4b38      	ldr	r3, [pc, #224]	@ (8004488 <HAL_GPIO_Init+0x304>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	43db      	mvns	r3, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	4013      	ands	r3, r2
 80043b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043ca:	4a2f      	ldr	r2, [pc, #188]	@ (8004488 <HAL_GPIO_Init+0x304>)
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043d0:	4b2d      	ldr	r3, [pc, #180]	@ (8004488 <HAL_GPIO_Init+0x304>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	43db      	mvns	r3, r3
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4013      	ands	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043f4:	4a24      	ldr	r2, [pc, #144]	@ (8004488 <HAL_GPIO_Init+0x304>)
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043fa:	4b23      	ldr	r3, [pc, #140]	@ (8004488 <HAL_GPIO_Init+0x304>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	43db      	mvns	r3, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4013      	ands	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800441e:	4a1a      	ldr	r2, [pc, #104]	@ (8004488 <HAL_GPIO_Init+0x304>)
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004424:	4b18      	ldr	r3, [pc, #96]	@ (8004488 <HAL_GPIO_Init+0x304>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	43db      	mvns	r3, r3
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4013      	ands	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004448:	4a0f      	ldr	r2, [pc, #60]	@ (8004488 <HAL_GPIO_Init+0x304>)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	3301      	adds	r3, #1
 8004452:	61fb      	str	r3, [r7, #28]
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	2b0f      	cmp	r3, #15
 8004458:	f67f aea2 	bls.w	80041a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800445c:	bf00      	nop
 800445e:	bf00      	nop
 8004460:	3724      	adds	r7, #36	@ 0x24
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	40023800 	.word	0x40023800
 8004470:	40013800 	.word	0x40013800
 8004474:	40020000 	.word	0x40020000
 8004478:	40020400 	.word	0x40020400
 800447c:	40020800 	.word	0x40020800
 8004480:	40020c00 	.word	0x40020c00
 8004484:	40021000 	.word	0x40021000
 8004488:	40013c00 	.word	0x40013c00

0800448c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	807b      	strh	r3, [r7, #2]
 8004498:	4613      	mov	r3, r2
 800449a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800449c:	787b      	ldrb	r3, [r7, #1]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044a2:	887a      	ldrh	r2, [r7, #2]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044a8:	e003      	b.n	80044b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044aa:	887b      	ldrh	r3, [r7, #2]
 80044ac:	041a      	lsls	r2, r3, #16
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	619a      	str	r2, [r3, #24]
}
 80044b2:	bf00      	nop
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044be:	b480      	push	{r7}
 80044c0:	b085      	sub	sp, #20
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	460b      	mov	r3, r1
 80044c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044d0:	887a      	ldrh	r2, [r7, #2]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4013      	ands	r3, r2
 80044d6:	041a      	lsls	r2, r3, #16
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	43d9      	mvns	r1, r3
 80044dc:	887b      	ldrh	r3, [r7, #2]
 80044de:	400b      	ands	r3, r1
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	619a      	str	r2, [r3, #24]
}
 80044e6:	bf00      	nop
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
	...

080044f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e12b      	b.n	800475e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fd ff42 	bl	80023a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2224      	movs	r2, #36	@ 0x24
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0201 	bic.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004546:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004556:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004558:	f004 fce6 	bl	8008f28 <HAL_RCC_GetPCLK1Freq>
 800455c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4a81      	ldr	r2, [pc, #516]	@ (8004768 <HAL_I2C_Init+0x274>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d807      	bhi.n	8004578 <HAL_I2C_Init+0x84>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4a80      	ldr	r2, [pc, #512]	@ (800476c <HAL_I2C_Init+0x278>)
 800456c:	4293      	cmp	r3, r2
 800456e:	bf94      	ite	ls
 8004570:	2301      	movls	r3, #1
 8004572:	2300      	movhi	r3, #0
 8004574:	b2db      	uxtb	r3, r3
 8004576:	e006      	b.n	8004586 <HAL_I2C_Init+0x92>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4a7d      	ldr	r2, [pc, #500]	@ (8004770 <HAL_I2C_Init+0x27c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	bf94      	ite	ls
 8004580:	2301      	movls	r3, #1
 8004582:	2300      	movhi	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e0e7      	b.n	800475e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	4a78      	ldr	r2, [pc, #480]	@ (8004774 <HAL_I2C_Init+0x280>)
 8004592:	fba2 2303 	umull	r2, r3, r2, r3
 8004596:	0c9b      	lsrs	r3, r3, #18
 8004598:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68ba      	ldr	r2, [r7, #8]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4a6a      	ldr	r2, [pc, #424]	@ (8004768 <HAL_I2C_Init+0x274>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d802      	bhi.n	80045c8 <HAL_I2C_Init+0xd4>
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	3301      	adds	r3, #1
 80045c6:	e009      	b.n	80045dc <HAL_I2C_Init+0xe8>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80045ce:	fb02 f303 	mul.w	r3, r2, r3
 80045d2:	4a69      	ldr	r2, [pc, #420]	@ (8004778 <HAL_I2C_Init+0x284>)
 80045d4:	fba2 2303 	umull	r2, r3, r2, r3
 80045d8:	099b      	lsrs	r3, r3, #6
 80045da:	3301      	adds	r3, #1
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	430b      	orrs	r3, r1
 80045e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80045ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	495c      	ldr	r1, [pc, #368]	@ (8004768 <HAL_I2C_Init+0x274>)
 80045f8:	428b      	cmp	r3, r1
 80045fa:	d819      	bhi.n	8004630 <HAL_I2C_Init+0x13c>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1e59      	subs	r1, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	fbb1 f3f3 	udiv	r3, r1, r3
 800460a:	1c59      	adds	r1, r3, #1
 800460c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004610:	400b      	ands	r3, r1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_I2C_Init+0x138>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	1e59      	subs	r1, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	fbb1 f3f3 	udiv	r3, r1, r3
 8004624:	3301      	adds	r3, #1
 8004626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462a:	e051      	b.n	80046d0 <HAL_I2C_Init+0x1dc>
 800462c:	2304      	movs	r3, #4
 800462e:	e04f      	b.n	80046d0 <HAL_I2C_Init+0x1dc>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d111      	bne.n	800465c <HAL_I2C_Init+0x168>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1e58      	subs	r0, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6859      	ldr	r1, [r3, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	440b      	add	r3, r1
 8004646:	fbb0 f3f3 	udiv	r3, r0, r3
 800464a:	3301      	adds	r3, #1
 800464c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004650:	2b00      	cmp	r3, #0
 8004652:	bf0c      	ite	eq
 8004654:	2301      	moveq	r3, #1
 8004656:	2300      	movne	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	e012      	b.n	8004682 <HAL_I2C_Init+0x18e>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	1e58      	subs	r0, r3, #1
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6859      	ldr	r1, [r3, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	440b      	add	r3, r1
 800466a:	0099      	lsls	r1, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004672:	3301      	adds	r3, #1
 8004674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_I2C_Init+0x196>
 8004686:	2301      	movs	r3, #1
 8004688:	e022      	b.n	80046d0 <HAL_I2C_Init+0x1dc>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10e      	bne.n	80046b0 <HAL_I2C_Init+0x1bc>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1e58      	subs	r0, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6859      	ldr	r1, [r3, #4]
 800469a:	460b      	mov	r3, r1
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	440b      	add	r3, r1
 80046a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a4:	3301      	adds	r3, #1
 80046a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046ae:	e00f      	b.n	80046d0 <HAL_I2C_Init+0x1dc>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	1e58      	subs	r0, r3, #1
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6859      	ldr	r1, [r3, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	440b      	add	r3, r1
 80046be:	0099      	lsls	r1, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046c6:	3301      	adds	r3, #1
 80046c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	6809      	ldr	r1, [r1, #0]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69da      	ldr	r2, [r3, #28]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80046fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6911      	ldr	r1, [r2, #16]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	68d2      	ldr	r2, [r2, #12]
 800470a:	4311      	orrs	r1, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6812      	ldr	r2, [r2, #0]
 8004710:	430b      	orrs	r3, r1
 8004712:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695a      	ldr	r2, [r3, #20]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0201 	orr.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3710      	adds	r7, #16
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	000186a0 	.word	0x000186a0
 800476c:	001e847f 	.word	0x001e847f
 8004770:	003d08ff 	.word	0x003d08ff
 8004774:	431bde83 	.word	0x431bde83
 8004778:	10624dd3 	.word	0x10624dd3

0800477c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800478e:	2b80      	cmp	r3, #128	@ 0x80
 8004790:	d103      	bne.n	800479a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2200      	movs	r2, #0
 8004798:	611a      	str	r2, [r3, #16]
  }
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
	...

080047a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b088      	sub	sp, #32
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	4608      	mov	r0, r1
 80047b2:	4611      	mov	r1, r2
 80047b4:	461a      	mov	r2, r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	817b      	strh	r3, [r7, #10]
 80047ba:	460b      	mov	r3, r1
 80047bc:	813b      	strh	r3, [r7, #8]
 80047be:	4613      	mov	r3, r2
 80047c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047c2:	f7fe fad1 	bl	8002d68 <HAL_GetTick>
 80047c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	f040 80d9 	bne.w	8004988 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	2319      	movs	r3, #25
 80047dc:	2201      	movs	r2, #1
 80047de:	496d      	ldr	r1, [pc, #436]	@ (8004994 <HAL_I2C_Mem_Write+0x1ec>)
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f002 faf9 	bl	8006dd8 <I2C_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80047ec:	2302      	movs	r3, #2
 80047ee:	e0cc      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_I2C_Mem_Write+0x56>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e0c5      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b01      	cmp	r3, #1
 8004812:	d007      	beq.n	8004824 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004832:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2221      	movs	r2, #33	@ 0x21
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2240      	movs	r2, #64	@ 0x40
 8004840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a3a      	ldr	r2, [r7, #32]
 800484e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004854:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800485a:	b29a      	uxth	r2, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4a4d      	ldr	r2, [pc, #308]	@ (8004998 <HAL_I2C_Mem_Write+0x1f0>)
 8004864:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004866:	88f8      	ldrh	r0, [r7, #6]
 8004868:	893a      	ldrh	r2, [r7, #8]
 800486a:	8979      	ldrh	r1, [r7, #10]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	4603      	mov	r3, r0
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f001 ff6c 	bl	8006754 <I2C_RequestMemoryWrite>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d052      	beq.n	8004928 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e081      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f002 fbbe 	bl	800700c <I2C_WaitOnTXEFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00d      	beq.n	80048b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	2b04      	cmp	r3, #4
 800489c:	d107      	bne.n	80048ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e06b      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b6:	781a      	ldrb	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d11b      	bne.n	8004928 <HAL_I2C_Mem_Write+0x180>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d017      	beq.n	8004928 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	781a      	ldrb	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004912:	3b01      	subs	r3, #1
 8004914:	b29a      	uxth	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491e:	b29b      	uxth	r3, r3
 8004920:	3b01      	subs	r3, #1
 8004922:	b29a      	uxth	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1aa      	bne.n	8004886 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f002 fbb1 	bl	800709c <I2C_WaitOnBTFFlagUntilTimeout>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00d      	beq.n	800495c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	2b04      	cmp	r3, #4
 8004946:	d107      	bne.n	8004958 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004956:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e016      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800496a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	e000      	b.n	800498a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004988:	2302      	movs	r3, #2
  }
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	00100002 	.word	0x00100002
 8004998:	ffff0000 	.word	0xffff0000

0800499c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08a      	sub	sp, #40	@ 0x28
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	4608      	mov	r0, r1
 80049a6:	4611      	mov	r1, r2
 80049a8:	461a      	mov	r2, r3
 80049aa:	4603      	mov	r3, r0
 80049ac:	817b      	strh	r3, [r7, #10]
 80049ae:	460b      	mov	r3, r1
 80049b0:	813b      	strh	r3, [r7, #8]
 80049b2:	4613      	mov	r3, r2
 80049b4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049ba:	f7fe f9d5 	bl	8002d68 <HAL_GetTick>
 80049be:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b20      	cmp	r3, #32
 80049ca:	f040 8136 	bne.w	8004c3a <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80049ce:	4b9d      	ldr	r3, [pc, #628]	@ (8004c44 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	08db      	lsrs	r3, r3, #3
 80049d4:	4a9c      	ldr	r2, [pc, #624]	@ (8004c48 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 80049d6:	fba2 2303 	umull	r2, r3, r2, r3
 80049da:	0a1a      	lsrs	r2, r3, #8
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	009a      	lsls	r2, r3, #2
 80049e4:	4413      	add	r3, r2
 80049e6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d112      	bne.n	8004a1a <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2220      	movs	r2, #32
 80049fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0e:	f043 0220 	orr.w	r2, r3, #32
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004a16:	2302      	movs	r3, #2
 8004a18:	e110      	b.n	8004c3c <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d0df      	beq.n	80049e8 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d101      	bne.n	8004a36 <HAL_I2C_Mem_Write_DMA+0x9a>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e102      	b.n	8004c3c <HAL_I2C_Mem_Write_DMA+0x2a0>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d007      	beq.n	8004a5c <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2221      	movs	r2, #33	@ 0x21
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2240      	movs	r2, #64	@ 0x40
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4a6c      	ldr	r2, [pc, #432]	@ (8004c4c <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8004a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004a9e:	897a      	ldrh	r2, [r7, #10]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004aa4:	893a      	ldrh	r2, [r7, #8]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004aaa:	88fa      	ldrh	r2, [r7, #6]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 80a9 	beq.w	8004c12 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d02a      	beq.n	8004b1e <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004acc:	4a60      	ldr	r2, [pc, #384]	@ (8004c50 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8004ace:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ad4:	4a5f      	ldr	r2, [pc, #380]	@ (8004c54 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8004ad6:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004adc:	2200      	movs	r2, #0
 8004ade:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aec:	2200      	movs	r2, #0
 8004aee:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af4:	2200      	movs	r2, #0
 8004af6:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	4619      	mov	r1, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3310      	adds	r3, #16
 8004b08:	461a      	mov	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b0e:	f7ff f83b 	bl	8003b88 <HAL_DMA_Start_IT>
 8004b12:	4603      	mov	r3, r0
 8004b14:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004b16:	7efb      	ldrb	r3, [r7, #27]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d166      	bne.n	8004bea <HAL_I2C_Mem_Write_DMA+0x24e>
 8004b1c:	e013      	b.n	8004b46 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e07a      	b.n	8004c3c <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004b46:	88f8      	ldrh	r0, [r7, #6]
 8004b48:	893a      	ldrh	r2, [r7, #8]
 8004b4a:	8979      	ldrh	r1, [r7, #10]
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	9301      	str	r3, [sp, #4]
 8004b50:	2323      	movs	r3, #35	@ 0x23
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	4603      	mov	r3, r0
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f001 fdfc 	bl	8006754 <I2C_RequestMemoryWrite>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d022      	beq.n	8004ba8 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7ff f866 	bl	8003c38 <HAL_DMA_Abort_IT>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b74:	2200      	movs	r2, #0
 8004b76:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b86:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0201 	bic.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e049      	b.n	8004c3c <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ba8:	2300      	movs	r3, #0
 8004baa:	613b      	str	r3, [r7, #16]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bd4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004be4:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e028      	b.n	8004c3c <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfe:	f043 0210 	orr.w	r2, r3, #16
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e014      	b.n	8004c3c <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c26:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004c3a:	2302      	movs	r3, #2
  }
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3720      	adds	r7, #32
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	2000002c 	.word	0x2000002c
 8004c48:	14f8b589 	.word	0x14f8b589
 8004c4c:	ffff0000 	.word	0xffff0000
 8004c50:	08006a51 	.word	0x08006a51
 8004c54:	08006c0f 	.word	0x08006c0f

08004c58 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b08c      	sub	sp, #48	@ 0x30
 8004c5c:	af02      	add	r7, sp, #8
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	4608      	mov	r0, r1
 8004c62:	4611      	mov	r1, r2
 8004c64:	461a      	mov	r2, r3
 8004c66:	4603      	mov	r3, r0
 8004c68:	817b      	strh	r3, [r7, #10]
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	813b      	strh	r3, [r7, #8]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c72:	f7fe f879 	bl	8002d68 <HAL_GetTick>
 8004c76:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	f040 8172 	bne.w	8004f6e <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004c8a:	4b93      	ldr	r3, [pc, #588]	@ (8004ed8 <HAL_I2C_Mem_Read_DMA+0x280>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	08db      	lsrs	r3, r3, #3
 8004c90:	4a92      	ldr	r2, [pc, #584]	@ (8004edc <HAL_I2C_Mem_Read_DMA+0x284>)
 8004c92:	fba2 2303 	umull	r2, r3, r2, r3
 8004c96:	0a1a      	lsrs	r2, r3, #8
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009a      	lsls	r2, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d112      	bne.n	8004cd6 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	f043 0220 	orr.w	r2, r3, #32
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004cd2:	2302      	movs	r3, #2
 8004cd4:	e14c      	b.n	8004f70 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d0df      	beq.n	8004ca4 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_I2C_Mem_Read_DMA+0x9a>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e13e      	b.n	8004f70 <HAL_I2C_Mem_Read_DMA+0x318>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d007      	beq.n	8004d18 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0201 	orr.w	r2, r2, #1
 8004d16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2222      	movs	r2, #34	@ 0x22
 8004d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2240      	movs	r2, #64	@ 0x40
 8004d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004d48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4a62      	ldr	r2, [pc, #392]	@ (8004ee0 <HAL_I2C_Mem_Read_DMA+0x288>)
 8004d58:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004d5a:	897a      	ldrh	r2, [r7, #10]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004d60:	893a      	ldrh	r2, [r7, #8]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004d66:	88fa      	ldrh	r2, [r7, #6]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f000 80cc 	beq.w	8004f14 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d02d      	beq.n	8004de0 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d88:	4a56      	ldr	r2, [pc, #344]	@ (8004ee4 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004d8a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d90:	4a55      	ldr	r2, [pc, #340]	@ (8004ee8 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004d92:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d98:	2200      	movs	r2, #0
 8004d9a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da0:	2200      	movs	r2, #0
 8004da2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da8:	2200      	movs	r2, #0
 8004daa:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db0:	2200      	movs	r2, #0
 8004db2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3310      	adds	r3, #16
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dca:	f7fe fedd 	bl	8003b88 <HAL_DMA_Start_IT>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	f040 8087 	bne.w	8004eec <HAL_I2C_Mem_Read_DMA+0x294>
 8004dde:	e013      	b.n	8004e08 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e0b3      	b.n	8004f70 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004e08:	88f8      	ldrh	r0, [r7, #6]
 8004e0a:	893a      	ldrh	r2, [r7, #8]
 8004e0c:	8979      	ldrh	r1, [r7, #10]
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e10:	9301      	str	r3, [sp, #4]
 8004e12:	2323      	movs	r3, #35	@ 0x23
 8004e14:	9300      	str	r3, [sp, #0]
 8004e16:	4603      	mov	r3, r0
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f001 fd31 	bl	8006880 <I2C_RequestMemoryRead>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d023      	beq.n	8004e6c <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7fe ff05 	bl	8003c38 <HAL_DMA_Abort_IT>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e38:	2200      	movs	r2, #0
 8004e3a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e4a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0201 	bic.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e081      	b.n	8004f70 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d108      	bne.n	8004e86 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e007      	b.n	8004e96 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004e94:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e96:	2300      	movs	r3, #0
 8004e98:	61bb      	str	r3, [r7, #24]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695b      	ldr	r3, [r3, #20]
 8004ea0:	61bb      	str	r3, [r7, #24]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	61bb      	str	r3, [r7, #24]
 8004eaa:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ec2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ed2:	605a      	str	r2, [r3, #4]
 8004ed4:	e049      	b.n	8004f6a <HAL_I2C_Mem_Read_DMA+0x312>
 8004ed6:	bf00      	nop
 8004ed8:	2000002c 	.word	0x2000002c
 8004edc:	14f8b589 	.word	0x14f8b589
 8004ee0:	ffff0000 	.word	0xffff0000
 8004ee4:	08006a51 	.word	0x08006a51
 8004ee8:	08006c0f 	.word	0x08006c0f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2220      	movs	r2, #32
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f00:	f043 0210 	orr.w	r2, r3, #16
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e02d      	b.n	8004f70 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004f14:	88f8      	ldrh	r0, [r7, #6]
 8004f16:	893a      	ldrh	r2, [r7, #8]
 8004f18:	8979      	ldrh	r1, [r7, #10]
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1c:	9301      	str	r3, [sp, #4]
 8004f1e:	2323      	movs	r3, #35	@ 0x23
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	4603      	mov	r3, r0
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f001 fcab 	bl	8006880 <I2C_RequestMemoryRead>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e01d      	b.n	8004f70 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f58:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e000      	b.n	8004f70 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8004f6e:	2302      	movs	r3, #2
  }
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3728      	adds	r7, #40	@ 0x28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f90:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fa0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004fa2:	7bfb      	ldrb	r3, [r7, #15]
 8004fa4:	2b10      	cmp	r3, #16
 8004fa6:	d003      	beq.n	8004fb0 <HAL_I2C_EV_IRQHandler+0x38>
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	2b40      	cmp	r3, #64	@ 0x40
 8004fac:	f040 80c1 	bne.w	8005132 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10d      	bne.n	8004fe6 <HAL_I2C_EV_IRQHandler+0x6e>
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004fd0:	d003      	beq.n	8004fda <HAL_I2C_EV_IRQHandler+0x62>
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004fd8:	d101      	bne.n	8004fde <HAL_I2C_EV_IRQHandler+0x66>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <HAL_I2C_EV_IRQHandler+0x68>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	f000 8132 	beq.w	800524a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00c      	beq.n	800500a <HAL_I2C_EV_IRQHandler+0x92>
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	0a5b      	lsrs	r3, r3, #9
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d006      	beq.n	800500a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f002 f8f6 	bl	80071ee <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fd87 	bl	8005b16 <I2C_Master_SB>
 8005008:	e092      	b.n	8005130 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	08db      	lsrs	r3, r3, #3
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b00      	cmp	r3, #0
 8005014:	d009      	beq.n	800502a <HAL_I2C_EV_IRQHandler+0xb2>
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	0a5b      	lsrs	r3, r3, #9
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fdfd 	bl	8005c22 <I2C_Master_ADD10>
 8005028:	e082      	b.n	8005130 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	085b      	lsrs	r3, r3, #1
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d009      	beq.n	800504a <HAL_I2C_EV_IRQHandler+0xd2>
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	0a5b      	lsrs	r3, r3, #9
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fe17 	bl	8005c76 <I2C_Master_ADDR>
 8005048:	e072      	b.n	8005130 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	089b      	lsrs	r3, r3, #2
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d03b      	beq.n	80050ce <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005060:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005064:	f000 80f3 	beq.w	800524e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	09db      	lsrs	r3, r3, #7
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00f      	beq.n	8005094 <HAL_I2C_EV_IRQHandler+0x11c>
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	0a9b      	lsrs	r3, r3, #10
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b00      	cmp	r3, #0
 800507e:	d009      	beq.n	8005094 <HAL_I2C_EV_IRQHandler+0x11c>
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	089b      	lsrs	r3, r3, #2
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d103      	bne.n	8005094 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f9df 	bl	8005450 <I2C_MasterTransmit_TXE>
 8005092:	e04d      	b.n	8005130 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	089b      	lsrs	r3, r3, #2
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 80d6 	beq.w	800524e <HAL_I2C_EV_IRQHandler+0x2d6>
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	0a5b      	lsrs	r3, r3, #9
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 80cf 	beq.w	800524e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80050b0:	7bbb      	ldrb	r3, [r7, #14]
 80050b2:	2b21      	cmp	r3, #33	@ 0x21
 80050b4:	d103      	bne.n	80050be <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fa66 	bl	8005588 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050bc:	e0c7      	b.n	800524e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80050be:	7bfb      	ldrb	r3, [r7, #15]
 80050c0:	2b40      	cmp	r3, #64	@ 0x40
 80050c2:	f040 80c4 	bne.w	800524e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fad4 	bl	8005674 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050cc:	e0bf      	b.n	800524e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050dc:	f000 80b7 	beq.w	800524e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	099b      	lsrs	r3, r3, #6
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00f      	beq.n	800510c <HAL_I2C_EV_IRQHandler+0x194>
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	0a9b      	lsrs	r3, r3, #10
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d009      	beq.n	800510c <HAL_I2C_EV_IRQHandler+0x194>
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	089b      	lsrs	r3, r3, #2
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b00      	cmp	r3, #0
 8005102:	d103      	bne.n	800510c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fb4d 	bl	80057a4 <I2C_MasterReceive_RXNE>
 800510a:	e011      	b.n	8005130 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	089b      	lsrs	r3, r3, #2
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 809a 	beq.w	800524e <HAL_I2C_EV_IRQHandler+0x2d6>
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	0a5b      	lsrs	r3, r3, #9
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	f000 8093 	beq.w	800524e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fc03 	bl	8005934 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800512e:	e08e      	b.n	800524e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005130:	e08d      	b.n	800524e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005136:	2b00      	cmp	r3, #0
 8005138:	d004      	beq.n	8005144 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	61fb      	str	r3, [r7, #28]
 8005142:	e007      	b.n	8005154 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	085b      	lsrs	r3, r3, #1
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d012      	beq.n	8005186 <HAL_I2C_EV_IRQHandler+0x20e>
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	0a5b      	lsrs	r3, r3, #9
 8005164:	f003 0301 	and.w	r3, r3, #1
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00c      	beq.n	8005186 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800517c:	69b9      	ldr	r1, [r7, #24]
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 ffc8 	bl	8006114 <I2C_Slave_ADDR>
 8005184:	e066      	b.n	8005254 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	091b      	lsrs	r3, r3, #4
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d009      	beq.n	80051a6 <HAL_I2C_EV_IRQHandler+0x22e>
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	0a5b      	lsrs	r3, r3, #9
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f001 f802 	bl	80061a8 <I2C_Slave_STOPF>
 80051a4:	e056      	b.n	8005254 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80051a6:	7bbb      	ldrb	r3, [r7, #14]
 80051a8:	2b21      	cmp	r3, #33	@ 0x21
 80051aa:	d002      	beq.n	80051b2 <HAL_I2C_EV_IRQHandler+0x23a>
 80051ac:	7bbb      	ldrb	r3, [r7, #14]
 80051ae:	2b29      	cmp	r3, #41	@ 0x29
 80051b0:	d125      	bne.n	80051fe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	09db      	lsrs	r3, r3, #7
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00f      	beq.n	80051de <HAL_I2C_EV_IRQHandler+0x266>
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	0a9b      	lsrs	r3, r3, #10
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d009      	beq.n	80051de <HAL_I2C_EV_IRQHandler+0x266>
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	089b      	lsrs	r3, r3, #2
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d103      	bne.n	80051de <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fede 	bl	8005f98 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051dc:	e039      	b.n	8005252 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	089b      	lsrs	r3, r3, #2
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d033      	beq.n	8005252 <HAL_I2C_EV_IRQHandler+0x2da>
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	0a5b      	lsrs	r3, r3, #9
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d02d      	beq.n	8005252 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 ff0b 	bl	8006012 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051fc:	e029      	b.n	8005252 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	099b      	lsrs	r3, r3, #6
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00f      	beq.n	800522a <HAL_I2C_EV_IRQHandler+0x2b2>
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	0a9b      	lsrs	r3, r3, #10
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d009      	beq.n	800522a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	089b      	lsrs	r3, r3, #2
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d103      	bne.n	800522a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 ff16 	bl	8006054 <I2C_SlaveReceive_RXNE>
 8005228:	e014      	b.n	8005254 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	089b      	lsrs	r3, r3, #2
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00e      	beq.n	8005254 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	0a5b      	lsrs	r3, r3, #9
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d008      	beq.n	8005254 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 ff44 	bl	80060d0 <I2C_SlaveReceive_BTF>
 8005248:	e004      	b.n	8005254 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800524a:	bf00      	nop
 800524c:	e002      	b.n	8005254 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800524e:	bf00      	nop
 8005250:	e000      	b.n	8005254 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005252:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005254:	3720      	adds	r7, #32
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b08a      	sub	sp, #40	@ 0x28
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005272:	2300      	movs	r3, #0
 8005274:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800527c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	0a1b      	lsrs	r3, r3, #8
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00e      	beq.n	80052a8 <HAL_I2C_ER_IRQHandler+0x4e>
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	0a1b      	lsrs	r3, r3, #8
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d008      	beq.n	80052a8 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005298:	f043 0301 	orr.w	r3, r3, #1
 800529c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80052a6:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	0a5b      	lsrs	r3, r3, #9
 80052ac:	f003 0301 	and.w	r3, r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00e      	beq.n	80052d2 <HAL_I2C_ER_IRQHandler+0x78>
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	0a1b      	lsrs	r3, r3, #8
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d008      	beq.n	80052d2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80052c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c2:	f043 0302 	orr.w	r3, r3, #2
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80052d0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	0a9b      	lsrs	r3, r3, #10
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d03f      	beq.n	800535e <HAL_I2C_ER_IRQHandler+0x104>
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	0a1b      	lsrs	r3, r3, #8
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d039      	beq.n	800535e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80052ea:	7efb      	ldrb	r3, [r7, #27]
 80052ec:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052fc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005302:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005304:	7ebb      	ldrb	r3, [r7, #26]
 8005306:	2b20      	cmp	r3, #32
 8005308:	d112      	bne.n	8005330 <HAL_I2C_ER_IRQHandler+0xd6>
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10f      	bne.n	8005330 <HAL_I2C_ER_IRQHandler+0xd6>
 8005310:	7cfb      	ldrb	r3, [r7, #19]
 8005312:	2b21      	cmp	r3, #33	@ 0x21
 8005314:	d008      	beq.n	8005328 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005316:	7cfb      	ldrb	r3, [r7, #19]
 8005318:	2b29      	cmp	r3, #41	@ 0x29
 800531a:	d005      	beq.n	8005328 <HAL_I2C_ER_IRQHandler+0xce>
 800531c:	7cfb      	ldrb	r3, [r7, #19]
 800531e:	2b28      	cmp	r3, #40	@ 0x28
 8005320:	d106      	bne.n	8005330 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2b21      	cmp	r3, #33	@ 0x21
 8005326:	d103      	bne.n	8005330 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f001 f86d 	bl	8006408 <I2C_Slave_AF>
 800532e:	e016      	b.n	800535e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005338:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800533a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533c:	f043 0304 	orr.w	r3, r3, #4
 8005340:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005342:	7efb      	ldrb	r3, [r7, #27]
 8005344:	2b10      	cmp	r3, #16
 8005346:	d002      	beq.n	800534e <HAL_I2C_ER_IRQHandler+0xf4>
 8005348:	7efb      	ldrb	r3, [r7, #27]
 800534a:	2b40      	cmp	r3, #64	@ 0x40
 800534c:	d107      	bne.n	800535e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800535c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	0adb      	lsrs	r3, r3, #11
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00e      	beq.n	8005388 <HAL_I2C_ER_IRQHandler+0x12e>
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	0a1b      	lsrs	r3, r3, #8
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d008      	beq.n	8005388 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	f043 0308 	orr.w	r3, r3, #8
 800537c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005386:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538a:	2b00      	cmp	r3, #0
 800538c:	d008      	beq.n	80053a0 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f001 f8a8 	bl	80064f0 <I2C_ITError>
  }
}
 80053a0:	bf00      	nop
 80053a2:	3728      	adds	r7, #40	@ 0x28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	460b      	mov	r3, r1
 8005402:	70fb      	strb	r3, [r7, #3]
 8005404:	4613      	mov	r3, r2
 8005406:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800545e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005466:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005472:	2b00      	cmp	r3, #0
 8005474:	d150      	bne.n	8005518 <I2C_MasterTransmit_TXE+0xc8>
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	2b21      	cmp	r3, #33	@ 0x21
 800547a:	d14d      	bne.n	8005518 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b08      	cmp	r3, #8
 8005480:	d01d      	beq.n	80054be <I2C_MasterTransmit_TXE+0x6e>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b20      	cmp	r3, #32
 8005486:	d01a      	beq.n	80054be <I2C_MasterTransmit_TXE+0x6e>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800548e:	d016      	beq.n	80054be <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800549e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2211      	movs	r2, #17
 80054a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2220      	movs	r2, #32
 80054b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7ff ff76 	bl	80053a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054bc:	e060      	b.n	8005580 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80054cc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054dc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b40      	cmp	r3, #64	@ 0x40
 80054f6:	d107      	bne.n	8005508 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7fb fc15 	bl	8000d30 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005506:	e03b      	b.n	8005580 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7ff ff49 	bl	80053a8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005516:	e033      	b.n	8005580 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005518:	7bfb      	ldrb	r3, [r7, #15]
 800551a:	2b21      	cmp	r3, #33	@ 0x21
 800551c:	d005      	beq.n	800552a <I2C_MasterTransmit_TXE+0xda>
 800551e:	7bbb      	ldrb	r3, [r7, #14]
 8005520:	2b40      	cmp	r3, #64	@ 0x40
 8005522:	d12d      	bne.n	8005580 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	2b22      	cmp	r3, #34	@ 0x22
 8005528:	d12a      	bne.n	8005580 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800552e:	b29b      	uxth	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d108      	bne.n	8005546 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005542:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005544:	e01c      	b.n	8005580 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b40      	cmp	r3, #64	@ 0x40
 8005550:	d103      	bne.n	800555a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f88e 	bl	8005674 <I2C_MemoryTransmit_TXE_BTF>
}
 8005558:	e012      	b.n	8005580 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	781a      	ldrb	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005574:	b29b      	uxth	r3, r3
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800557e:	e7ff      	b.n	8005580 <I2C_MasterTransmit_TXE+0x130>
 8005580:	bf00      	nop
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005594:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b21      	cmp	r3, #33	@ 0x21
 80055a0:	d164      	bne.n	800566c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d012      	beq.n	80055d2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b0:	781a      	ldrb	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80055d0:	e04c      	b.n	800566c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d01d      	beq.n	8005614 <I2C_MasterTransmit_BTF+0x8c>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2b20      	cmp	r3, #32
 80055dc:	d01a      	beq.n	8005614 <I2C_MasterTransmit_BTF+0x8c>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80055e4:	d016      	beq.n	8005614 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80055f4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2211      	movs	r2, #17
 80055fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7ff fecb 	bl	80053a8 <HAL_I2C_MasterTxCpltCallback>
}
 8005612:	e02b      	b.n	800566c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005622:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005632:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b40      	cmp	r3, #64	@ 0x40
 800564c:	d107      	bne.n	800565e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7fb fb6a 	bl	8000d30 <HAL_I2C_MemTxCpltCallback>
}
 800565c:	e006      	b.n	800566c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7ff fe9e 	bl	80053a8 <HAL_I2C_MasterTxCpltCallback>
}
 800566c:	bf00      	nop
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005682:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005688:	2b00      	cmp	r3, #0
 800568a:	d11d      	bne.n	80056c8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005690:	2b01      	cmp	r3, #1
 8005692:	d10b      	bne.n	80056ac <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005698:	b2da      	uxtb	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056a4:	1c9a      	adds	r2, r3, #2
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80056aa:	e077      	b.n	800579c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	121b      	asrs	r3, r3, #8
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056c6:	e069      	b.n	800579c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d10b      	bne.n	80056e8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80056e6:	e059      	b.n	800579c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d152      	bne.n	8005796 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	2b22      	cmp	r3, #34	@ 0x22
 80056f4:	d10d      	bne.n	8005712 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005704:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005710:	e044      	b.n	800579c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005716:	b29b      	uxth	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d015      	beq.n	8005748 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800571c:	7bfb      	ldrb	r3, [r7, #15]
 800571e:	2b21      	cmp	r3, #33	@ 0x21
 8005720:	d112      	bne.n	8005748 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005726:	781a      	ldrb	r2, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800573c:	b29b      	uxth	r3, r3
 800573e:	3b01      	subs	r3, #1
 8005740:	b29a      	uxth	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005746:	e029      	b.n	800579c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800574c:	b29b      	uxth	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d124      	bne.n	800579c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	2b21      	cmp	r3, #33	@ 0x21
 8005756:	d121      	bne.n	800579c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005766:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005776:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7fb face 	bl	8000d30 <HAL_I2C_MemTxCpltCallback>
}
 8005794:	e002      	b.n	800579c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fe fff0 	bl	800477c <I2C_Flush_DR>
}
 800579c:	bf00      	nop
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b22      	cmp	r3, #34	@ 0x22
 80057b6:	f040 80b9 	bne.w	800592c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057be:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	d921      	bls.n	8005812 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	f040 8096 	bne.w	800592c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800580e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005810:	e08c      	b.n	800592c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005816:	2b02      	cmp	r3, #2
 8005818:	d07f      	beq.n	800591a <I2C_MasterReceive_RXNE+0x176>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d002      	beq.n	8005826 <I2C_MasterReceive_RXNE+0x82>
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d179      	bne.n	800591a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 fc80 	bl	800712c <I2C_WaitOnSTOPRequestThroughIT>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d14c      	bne.n	80058cc <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005840:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005850:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800586e:	b29b      	uxth	r3, r3
 8005870:	3b01      	subs	r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b40      	cmp	r3, #64	@ 0x40
 800588a:	d10a      	bne.n	80058a2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fb fa58 	bl	8000d50 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80058a0:	e044      	b.n	800592c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d002      	beq.n	80058b6 <I2C_MasterReceive_RXNE+0x112>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d103      	bne.n	80058be <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80058bc:	e002      	b.n	80058c4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2212      	movs	r2, #18
 80058c2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff fd79 	bl	80053bc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80058ca:	e02f      	b.n	800592c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80058da:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691a      	ldr	r2, [r3, #16]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	3b01      	subs	r3, #1
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7ff fd88 	bl	8005428 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005918:	e008      	b.n	800592c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005928:	605a      	str	r2, [r3, #4]
}
 800592a:	e7ff      	b.n	800592c <I2C_MasterReceive_RXNE+0x188>
 800592c:	bf00      	nop
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005940:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005946:	b29b      	uxth	r3, r3
 8005948:	2b04      	cmp	r3, #4
 800594a:	d11b      	bne.n	8005984 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800595a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691a      	ldr	r2, [r3, #16]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005982:	e0c4      	b.n	8005b0e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b03      	cmp	r3, #3
 800598c:	d129      	bne.n	80059e2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800599c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d00a      	beq.n	80059ba <I2C_MasterReceive_BTF+0x86>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d007      	beq.n	80059ba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059b8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	691a      	ldr	r2, [r3, #16]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c4:	b2d2      	uxtb	r2, r2
 80059c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29a      	uxth	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80059e0:	e095      	b.n	8005b0e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d17d      	bne.n	8005ae8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d002      	beq.n	80059f8 <I2C_MasterReceive_BTF+0xc4>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b10      	cmp	r3, #16
 80059f6:	d108      	bne.n	8005a0a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a06:	601a      	str	r2, [r3, #0]
 8005a08:	e016      	b.n	8005a38 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d002      	beq.n	8005a16 <I2C_MasterReceive_BTF+0xe2>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d108      	bne.n	8005a28 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a24:	601a      	str	r2, [r3, #0]
 8005a26:	e007      	b.n	8005a38 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a36:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691a      	ldr	r2, [r3, #16]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	691a      	ldr	r2, [r3, #16]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a68:	b2d2      	uxtb	r2, r2
 8005a6a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005a92:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b40      	cmp	r3, #64	@ 0x40
 8005aa6:	d10a      	bne.n	8005abe <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fb f94a 	bl	8000d50 <HAL_I2C_MemRxCpltCallback>
}
 8005abc:	e027      	b.n	8005b0e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b08      	cmp	r3, #8
 8005aca:	d002      	beq.n	8005ad2 <I2C_MasterReceive_BTF+0x19e>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b20      	cmp	r3, #32
 8005ad0:	d103      	bne.n	8005ada <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ad8:	e002      	b.n	8005ae0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2212      	movs	r2, #18
 8005ade:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff fc6b 	bl	80053bc <HAL_I2C_MasterRxCpltCallback>
}
 8005ae6:	e012      	b.n	8005b0e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	691a      	ldr	r2, [r3, #16]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af2:	b2d2      	uxtb	r2, r2
 8005af4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afa:	1c5a      	adds	r2, r3, #1
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	3b01      	subs	r3, #1
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005b0e:	bf00      	nop
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b40      	cmp	r3, #64	@ 0x40
 8005b28:	d117      	bne.n	8005b5a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d109      	bne.n	8005b46 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	461a      	mov	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b42:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005b44:	e067      	b.n	8005c16 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	f043 0301 	orr.w	r3, r3, #1
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	611a      	str	r2, [r3, #16]
}
 8005b58:	e05d      	b.n	8005c16 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b62:	d133      	bne.n	8005bcc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b21      	cmp	r3, #33	@ 0x21
 8005b6e:	d109      	bne.n	8005b84 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	461a      	mov	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b80:	611a      	str	r2, [r3, #16]
 8005b82:	e008      	b.n	8005b96 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <I2C_Master_SB+0x92>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d108      	bne.n	8005bba <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d032      	beq.n	8005c16 <I2C_Master_SB+0x100>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d02d      	beq.n	8005c16 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bc8:	605a      	str	r2, [r3, #4]
}
 8005bca:	e024      	b.n	8005c16 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10e      	bne.n	8005bf2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	11db      	asrs	r3, r3, #7
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	f003 0306 	and.w	r3, r3, #6
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	f063 030f 	orn	r3, r3, #15
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	611a      	str	r2, [r3, #16]
}
 8005bf0:	e011      	b.n	8005c16 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d10d      	bne.n	8005c16 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	11db      	asrs	r3, r3, #7
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	f003 0306 	and.w	r3, r3, #6
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	f063 030e 	orn	r3, r3, #14
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	611a      	str	r2, [r3, #16]
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d004      	beq.n	8005c48 <I2C_Master_ADD10+0x26>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d108      	bne.n	8005c5a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00c      	beq.n	8005c6a <I2C_Master_ADD10+0x48>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d007      	beq.n	8005c6a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685a      	ldr	r2, [r3, #4]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c68:	605a      	str	r2, [r3, #4]
  }
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b091      	sub	sp, #68	@ 0x44
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c84:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c92:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b22      	cmp	r3, #34	@ 0x22
 8005c9e:	f040 8169 	bne.w	8005f74 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10f      	bne.n	8005cca <I2C_Master_ADDR+0x54>
 8005caa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005cae:	2b40      	cmp	r3, #64	@ 0x40
 8005cb0:	d10b      	bne.n	8005cca <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc8:	e160      	b.n	8005f8c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d11d      	bne.n	8005d0e <I2C_Master_ADDR+0x98>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005cda:	d118      	bne.n	8005d0e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cdc:	2300      	movs	r3, #0
 8005cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d00:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	651a      	str	r2, [r3, #80]	@ 0x50
 8005d0c:	e13e      	b.n	8005f8c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d113      	bne.n	8005d40 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d18:	2300      	movs	r3, #0
 8005d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	e115      	b.n	8005f6c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	f040 808a 	bne.w	8005e60 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d52:	d137      	bne.n	8005dc4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d62:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d72:	d113      	bne.n	8005d9c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d82:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d84:	2300      	movs	r3, #0
 8005d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695b      	ldr	r3, [r3, #20]
 8005d8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9a:	e0e7      	b.n	8005f6c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	623b      	str	r3, [r7, #32]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	623b      	str	r3, [r7, #32]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	623b      	str	r3, [r7, #32]
 8005db0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	e0d3      	b.n	8005f6c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc6:	2b08      	cmp	r3, #8
 8005dc8:	d02e      	beq.n	8005e28 <I2C_Master_ADDR+0x1b2>
 8005dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d02b      	beq.n	8005e28 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd2:	2b12      	cmp	r3, #18
 8005dd4:	d102      	bne.n	8005ddc <I2C_Master_ADDR+0x166>
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d125      	bne.n	8005e28 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dde:	2b04      	cmp	r3, #4
 8005de0:	d00e      	beq.n	8005e00 <I2C_Master_ADDR+0x18a>
 8005de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d00b      	beq.n	8005e00 <I2C_Master_ADDR+0x18a>
 8005de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dea:	2b10      	cmp	r3, #16
 8005dec:	d008      	beq.n	8005e00 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	e007      	b.n	8005e10 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e0e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e10:	2300      	movs	r3, #0
 8005e12:	61fb      	str	r3, [r7, #28]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	61fb      	str	r3, [r7, #28]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	61fb      	str	r3, [r7, #28]
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	e0a1      	b.n	8005f6c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e36:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e38:	2300      	movs	r3, #0
 8005e3a:	61bb      	str	r3, [r7, #24]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	61bb      	str	r3, [r7, #24]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	61bb      	str	r3, [r7, #24]
 8005e4c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	e085      	b.n	8005f6c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d14d      	bne.n	8005f06 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d016      	beq.n	8005e9e <I2C_Master_ADDR+0x228>
 8005e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d013      	beq.n	8005e9e <I2C_Master_ADDR+0x228>
 8005e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e78:	2b10      	cmp	r3, #16
 8005e7a:	d010      	beq.n	8005e9e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e8a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	e007      	b.n	8005eae <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005eac:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ebc:	d117      	bne.n	8005eee <I2C_Master_ADDR+0x278>
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ec4:	d00b      	beq.n	8005ede <I2C_Master_ADDR+0x268>
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d008      	beq.n	8005ede <I2C_Master_ADDR+0x268>
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ece:	2b08      	cmp	r3, #8
 8005ed0:	d005      	beq.n	8005ede <I2C_Master_ADDR+0x268>
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed4:	2b10      	cmp	r3, #16
 8005ed6:	d002      	beq.n	8005ede <I2C_Master_ADDR+0x268>
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	d107      	bne.n	8005eee <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005eec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	e032      	b.n	8005f6c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005f14:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f24:	d117      	bne.n	8005f56 <I2C_Master_ADDR+0x2e0>
 8005f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f2c:	d00b      	beq.n	8005f46 <I2C_Master_ADDR+0x2d0>
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d008      	beq.n	8005f46 <I2C_Master_ADDR+0x2d0>
 8005f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d005      	beq.n	8005f46 <I2C_Master_ADDR+0x2d0>
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3c:	2b10      	cmp	r3, #16
 8005f3e:	d002      	beq.n	8005f46 <I2C_Master_ADDR+0x2d0>
 8005f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f42:	2b20      	cmp	r3, #32
 8005f44:	d107      	bne.n	8005f56 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005f54:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f56:	2300      	movs	r3, #0
 8005f58:	613b      	str	r3, [r7, #16]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	613b      	str	r3, [r7, #16]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	613b      	str	r3, [r7, #16]
 8005f6a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005f72:	e00b      	b.n	8005f8c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f74:	2300      	movs	r3, #0
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	68fb      	ldr	r3, [r7, #12]
}
 8005f8a:	e7ff      	b.n	8005f8c <I2C_Master_ADDR+0x316>
 8005f8c:	bf00      	nop
 8005f8e:	3744      	adds	r7, #68	@ 0x44
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fa6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d02b      	beq.n	800600a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb6:	781a      	ldrb	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d114      	bne.n	800600a <I2C_SlaveTransmit_TXE+0x72>
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	2b29      	cmp	r3, #41	@ 0x29
 8005fe4:	d111      	bne.n	800600a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ff4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2221      	movs	r2, #33	@ 0x21
 8005ffa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2228      	movs	r2, #40	@ 0x28
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7ff f9e3 	bl	80053d0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800600a:	bf00      	nop
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006012:	b480      	push	{r7}
 8006014:	b083      	sub	sp, #12
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800601e:	b29b      	uxth	r3, r3
 8006020:	2b00      	cmp	r3, #0
 8006022:	d011      	beq.n	8006048 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006028:	781a      	ldrb	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006062:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006068:	b29b      	uxth	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d02c      	beq.n	80060c8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006078:	b2d2      	uxtb	r2, r2
 800607a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006080:	1c5a      	adds	r2, r3, #1
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800608a:	b29b      	uxth	r3, r3
 800608c:	3b01      	subs	r3, #1
 800608e:	b29a      	uxth	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006098:	b29b      	uxth	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d114      	bne.n	80060c8 <I2C_SlaveReceive_RXNE+0x74>
 800609e:	7bfb      	ldrb	r3, [r7, #15]
 80060a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80060a2:	d111      	bne.n	80060c8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060b2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2222      	movs	r2, #34	@ 0x22
 80060b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2228      	movs	r2, #40	@ 0x28
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff f98e 	bl	80053e4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80060c8:	bf00      	nop
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d012      	beq.n	8006108 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	691a      	ldr	r2, [r3, #16]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ec:	b2d2      	uxtb	r2, r2
 80060ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800611e:	2300      	movs	r3, #0
 8006120:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006128:	b2db      	uxtb	r3, r3
 800612a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800612e:	2b28      	cmp	r3, #40	@ 0x28
 8006130:	d127      	bne.n	8006182 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006140:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	089b      	lsrs	r3, r3, #2
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800614e:	2301      	movs	r3, #1
 8006150:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	09db      	lsrs	r3, r3, #7
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b00      	cmp	r3, #0
 800615c:	d103      	bne.n	8006166 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	81bb      	strh	r3, [r7, #12]
 8006164:	e002      	b.n	800616c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006174:	89ba      	ldrh	r2, [r7, #12]
 8006176:	7bfb      	ldrb	r3, [r7, #15]
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7ff f93c 	bl	80053f8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006180:	e00e      	b.n	80061a0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006182:	2300      	movs	r3, #0
 8006184:	60bb      	str	r3, [r7, #8]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	60bb      	str	r3, [r7, #8]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	60bb      	str	r3, [r7, #8]
 8006196:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80061a0:	bf00      	nop
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061b6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80061c6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80061c8:	2300      	movs	r3, #0
 80061ca:	60bb      	str	r3, [r7, #8]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	60bb      	str	r3, [r7, #8]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061f4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006204:	d172      	bne.n	80062ec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006206:	7bfb      	ldrb	r3, [r7, #15]
 8006208:	2b22      	cmp	r3, #34	@ 0x22
 800620a:	d002      	beq.n	8006212 <I2C_Slave_STOPF+0x6a>
 800620c:	7bfb      	ldrb	r3, [r7, #15]
 800620e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006210:	d135      	bne.n	800627e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	b29a      	uxth	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006224:	b29b      	uxth	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622e:	f043 0204 	orr.w	r2, r3, #4
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006244:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624a:	4618      	mov	r0, r3
 800624c:	f7fd fea0 	bl	8003f90 <HAL_DMA_GetState>
 8006250:	4603      	mov	r3, r0
 8006252:	2b01      	cmp	r3, #1
 8006254:	d049      	beq.n	80062ea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800625a:	4a69      	ldr	r2, [pc, #420]	@ (8006400 <I2C_Slave_STOPF+0x258>)
 800625c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006262:	4618      	mov	r0, r3
 8006264:	f7fd fce8 	bl	8003c38 <HAL_DMA_Abort_IT>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d03d      	beq.n	80062ea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006278:	4610      	mov	r0, r2
 800627a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800627c:	e035      	b.n	80062ea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	b29a      	uxth	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006290:	b29b      	uxth	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d005      	beq.n	80062a2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629a:	f043 0204 	orr.w	r2, r3, #4
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fd fe6a 	bl	8003f90 <HAL_DMA_GetState>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d014      	beq.n	80062ec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062c6:	4a4e      	ldr	r2, [pc, #312]	@ (8006400 <I2C_Slave_STOPF+0x258>)
 80062c8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7fd fcb2 	bl	8003c38 <HAL_DMA_Abort_IT>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d008      	beq.n	80062ec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80062e4:	4610      	mov	r0, r2
 80062e6:	4798      	blx	r3
 80062e8:	e000      	b.n	80062ec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80062ea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d03e      	beq.n	8006374 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	695b      	ldr	r3, [r3, #20]
 80062fc:	f003 0304 	and.w	r3, r3, #4
 8006300:	2b04      	cmp	r3, #4
 8006302:	d112      	bne.n	800632a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691a      	ldr	r2, [r3, #16]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630e:	b2d2      	uxtb	r2, r2
 8006310:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006320:	b29b      	uxth	r3, r3
 8006322:	3b01      	subs	r3, #1
 8006324:	b29a      	uxth	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006334:	2b40      	cmp	r3, #64	@ 0x40
 8006336:	d112      	bne.n	800635e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	691a      	ldr	r2, [r3, #16]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006342:	b2d2      	uxtb	r2, r2
 8006344:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006354:	b29b      	uxth	r3, r3
 8006356:	3b01      	subs	r3, #1
 8006358:	b29a      	uxth	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006362:	b29b      	uxth	r3, r3
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636c:	f043 0204 	orr.w	r2, r3, #4
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f8b7 	bl	80064f0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006382:	e039      	b.n	80063f8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	2b2a      	cmp	r3, #42	@ 0x2a
 8006388:	d109      	bne.n	800639e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2228      	movs	r2, #40	@ 0x28
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7ff f823 	bl	80053e4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b28      	cmp	r3, #40	@ 0x28
 80063a8:	d111      	bne.n	80063ce <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a15      	ldr	r2, [pc, #84]	@ (8006404 <I2C_Slave_STOPF+0x25c>)
 80063ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff f824 	bl	8005414 <HAL_I2C_ListenCpltCallback>
}
 80063cc:	e014      	b.n	80063f8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d2:	2b22      	cmp	r3, #34	@ 0x22
 80063d4:	d002      	beq.n	80063dc <I2C_Slave_STOPF+0x234>
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
 80063d8:	2b22      	cmp	r3, #34	@ 0x22
 80063da:	d10d      	bne.n	80063f8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7fe fff6 	bl	80053e4 <HAL_I2C_SlaveRxCpltCallback>
}
 80063f8:	bf00      	nop
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	08006c89 	.word	0x08006c89
 8006404:	ffff0000 	.word	0xffff0000

08006408 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006416:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	2b08      	cmp	r3, #8
 8006422:	d002      	beq.n	800642a <I2C_Slave_AF+0x22>
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2b20      	cmp	r3, #32
 8006428:	d129      	bne.n	800647e <I2C_Slave_AF+0x76>
 800642a:	7bfb      	ldrb	r3, [r7, #15]
 800642c:	2b28      	cmp	r3, #40	@ 0x28
 800642e:	d126      	bne.n	800647e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a2e      	ldr	r2, [pc, #184]	@ (80064ec <I2C_Slave_AF+0xe4>)
 8006434:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006444:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800644e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800645e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2220      	movs	r2, #32
 800646a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7fe ffcc 	bl	8005414 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800647c:	e031      	b.n	80064e2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	2b21      	cmp	r3, #33	@ 0x21
 8006482:	d129      	bne.n	80064d8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a19      	ldr	r2, [pc, #100]	@ (80064ec <I2C_Slave_AF+0xe4>)
 8006488:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2221      	movs	r2, #33	@ 0x21
 800648e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2220      	movs	r2, #32
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80064ae:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064b8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064c8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fe f956 	bl	800477c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7fe ff7d 	bl	80053d0 <HAL_I2C_SlaveTxCpltCallback>
}
 80064d6:	e004      	b.n	80064e2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064e0:	615a      	str	r2, [r3, #20]
}
 80064e2:	bf00      	nop
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	ffff0000 	.word	0xffff0000

080064f0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006506:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006508:	7bbb      	ldrb	r3, [r7, #14]
 800650a:	2b10      	cmp	r3, #16
 800650c:	d002      	beq.n	8006514 <I2C_ITError+0x24>
 800650e:	7bbb      	ldrb	r3, [r7, #14]
 8006510:	2b40      	cmp	r3, #64	@ 0x40
 8006512:	d10a      	bne.n	800652a <I2C_ITError+0x3a>
 8006514:	7bfb      	ldrb	r3, [r7, #15]
 8006516:	2b22      	cmp	r3, #34	@ 0x22
 8006518:	d107      	bne.n	800652a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006528:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800652a:	7bfb      	ldrb	r3, [r7, #15]
 800652c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006530:	2b28      	cmp	r3, #40	@ 0x28
 8006532:	d107      	bne.n	8006544 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2228      	movs	r2, #40	@ 0x28
 800653e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006542:	e015      	b.n	8006570 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800654e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006552:	d00a      	beq.n	800656a <I2C_ITError+0x7a>
 8006554:	7bfb      	ldrb	r3, [r7, #15]
 8006556:	2b60      	cmp	r3, #96	@ 0x60
 8006558:	d007      	beq.n	800656a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2220      	movs	r2, #32
 800655e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800657a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800657e:	d162      	bne.n	8006646 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	685a      	ldr	r2, [r3, #4]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800658e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006594:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b01      	cmp	r3, #1
 800659c:	d020      	beq.n	80065e0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065a2:	4a6a      	ldr	r2, [pc, #424]	@ (800674c <I2C_ITError+0x25c>)
 80065a4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fd fb44 	bl	8003c38 <HAL_DMA_Abort_IT>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 8089 	beq.w	80066ca <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0201 	bic.w	r2, r2, #1
 80065c6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80065da:	4610      	mov	r0, r2
 80065dc:	4798      	blx	r3
 80065de:	e074      	b.n	80066ca <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e4:	4a59      	ldr	r2, [pc, #356]	@ (800674c <I2C_ITError+0x25c>)
 80065e6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7fd fb23 	bl	8003c38 <HAL_DMA_Abort_IT>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d068      	beq.n	80066ca <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006602:	2b40      	cmp	r3, #64	@ 0x40
 8006604:	d10b      	bne.n	800661e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	691a      	ldr	r2, [r3, #16]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 0201 	bic.w	r2, r2, #1
 800662c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006640:	4610      	mov	r0, r2
 8006642:	4798      	blx	r3
 8006644:	e041      	b.n	80066ca <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b60      	cmp	r3, #96	@ 0x60
 8006650:	d125      	bne.n	800669e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2220      	movs	r2, #32
 8006656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800666a:	2b40      	cmp	r3, #64	@ 0x40
 800666c:	d10b      	bne.n	8006686 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	691a      	ldr	r2, [r3, #16]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0201 	bic.w	r2, r2, #1
 8006694:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7fe fed0 	bl	800543c <HAL_I2C_AbortCpltCallback>
 800669c:	e015      	b.n	80066ca <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066a8:	2b40      	cmp	r3, #64	@ 0x40
 80066aa:	d10b      	bne.n	80066c4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	691a      	ldr	r2, [r3, #16]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7fe feaf 	bl	8005428 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ce:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10e      	bne.n	80066f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d109      	bne.n	80066f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d104      	bne.n	80066f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006706:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800670e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b04      	cmp	r3, #4
 800671a:	d113      	bne.n	8006744 <I2C_ITError+0x254>
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	2b28      	cmp	r3, #40	@ 0x28
 8006720:	d110      	bne.n	8006744 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a0a      	ldr	r2, [pc, #40]	@ (8006750 <I2C_ITError+0x260>)
 8006726:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2220      	movs	r2, #32
 8006732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7fe fe68 	bl	8005414 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006744:	bf00      	nop
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	08006c89 	.word	0x08006c89
 8006750:	ffff0000 	.word	0xffff0000

08006754 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b088      	sub	sp, #32
 8006758:	af02      	add	r7, sp, #8
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	4608      	mov	r0, r1
 800675e:	4611      	mov	r1, r2
 8006760:	461a      	mov	r2, r3
 8006762:	4603      	mov	r3, r0
 8006764:	817b      	strh	r3, [r7, #10]
 8006766:	460b      	mov	r3, r1
 8006768:	813b      	strh	r3, [r7, #8]
 800676a:	4613      	mov	r3, r2
 800676c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800677c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	2200      	movs	r2, #0
 8006786:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 fb24 	bl	8006dd8 <I2C_WaitOnFlagUntilTimeout>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00d      	beq.n	80067b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067a4:	d103      	bne.n	80067ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e05f      	b.n	8006872 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067b2:	897b      	ldrh	r3, [r7, #10]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	461a      	mov	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80067c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c4:	6a3a      	ldr	r2, [r7, #32]
 80067c6:	492d      	ldr	r1, [pc, #180]	@ (800687c <I2C_RequestMemoryWrite+0x128>)
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 fb7f 	bl	8006ecc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e04c      	b.n	8006872 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	617b      	str	r3, [r7, #20]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	617b      	str	r3, [r7, #20]
 80067ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067f0:	6a39      	ldr	r1, [r7, #32]
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f000 fc0a 	bl	800700c <I2C_WaitOnTXEFlagUntilTimeout>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00d      	beq.n	800681a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006802:	2b04      	cmp	r3, #4
 8006804:	d107      	bne.n	8006816 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006814:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e02b      	b.n	8006872 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800681a:	88fb      	ldrh	r3, [r7, #6]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d105      	bne.n	800682c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006820:	893b      	ldrh	r3, [r7, #8]
 8006822:	b2da      	uxtb	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	611a      	str	r2, [r3, #16]
 800682a:	e021      	b.n	8006870 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800682c:	893b      	ldrh	r3, [r7, #8]
 800682e:	0a1b      	lsrs	r3, r3, #8
 8006830:	b29b      	uxth	r3, r3
 8006832:	b2da      	uxtb	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800683a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800683c:	6a39      	ldr	r1, [r7, #32]
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 fbe4 	bl	800700c <I2C_WaitOnTXEFlagUntilTimeout>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00d      	beq.n	8006866 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800684e:	2b04      	cmp	r3, #4
 8006850:	d107      	bne.n	8006862 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006860:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e005      	b.n	8006872 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006866:	893b      	ldrh	r3, [r7, #8]
 8006868:	b2da      	uxtb	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	00010002 	.word	0x00010002

08006880 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b088      	sub	sp, #32
 8006884:	af02      	add	r7, sp, #8
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	4608      	mov	r0, r1
 800688a:	4611      	mov	r1, r2
 800688c:	461a      	mov	r2, r3
 800688e:	4603      	mov	r3, r0
 8006890:	817b      	strh	r3, [r7, #10]
 8006892:	460b      	mov	r3, r1
 8006894:	813b      	strh	r3, [r7, #8]
 8006896:	4613      	mov	r3, r2
 8006898:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80068a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 fa86 	bl	8006dd8 <I2C_WaitOnFlagUntilTimeout>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00d      	beq.n	80068ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068e0:	d103      	bne.n	80068ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e0aa      	b.n	8006a44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068ee:	897b      	ldrh	r3, [r7, #10]
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	461a      	mov	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80068fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006900:	6a3a      	ldr	r2, [r7, #32]
 8006902:	4952      	ldr	r1, [pc, #328]	@ (8006a4c <I2C_RequestMemoryRead+0x1cc>)
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 fae1 	bl	8006ecc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e097      	b.n	8006a44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006914:	2300      	movs	r3, #0
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800692a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800692c:	6a39      	ldr	r1, [r7, #32]
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f000 fb6c 	bl	800700c <I2C_WaitOnTXEFlagUntilTimeout>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00d      	beq.n	8006956 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693e:	2b04      	cmp	r3, #4
 8006940:	d107      	bne.n	8006952 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006950:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e076      	b.n	8006a44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006956:	88fb      	ldrh	r3, [r7, #6]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d105      	bne.n	8006968 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800695c:	893b      	ldrh	r3, [r7, #8]
 800695e:	b2da      	uxtb	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	611a      	str	r2, [r3, #16]
 8006966:	e021      	b.n	80069ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006968:	893b      	ldrh	r3, [r7, #8]
 800696a:	0a1b      	lsrs	r3, r3, #8
 800696c:	b29b      	uxth	r3, r3
 800696e:	b2da      	uxtb	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006978:	6a39      	ldr	r1, [r7, #32]
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f000 fb46 	bl	800700c <I2C_WaitOnTXEFlagUntilTimeout>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00d      	beq.n	80069a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800698a:	2b04      	cmp	r3, #4
 800698c:	d107      	bne.n	800699e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800699c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e050      	b.n	8006a44 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80069a2:	893b      	ldrh	r3, [r7, #8]
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069ae:	6a39      	ldr	r1, [r7, #32]
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 fb2b 	bl	800700c <I2C_WaitOnTXEFlagUntilTimeout>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00d      	beq.n	80069d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d107      	bne.n	80069d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e035      	b.n	8006a44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 f9ef 	bl	8006dd8 <I2C_WaitOnFlagUntilTimeout>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00d      	beq.n	8006a1c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a0e:	d103      	bne.n	8006a18 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a16:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e013      	b.n	8006a44 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a1c:	897b      	ldrh	r3, [r7, #10]
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	f043 0301 	orr.w	r3, r3, #1
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2e:	6a3a      	ldr	r2, [r7, #32]
 8006a30:	4906      	ldr	r1, [pc, #24]	@ (8006a4c <I2C_RequestMemoryRead+0x1cc>)
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 fa4a 	bl	8006ecc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d001      	beq.n	8006a42 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e000      	b.n	8006a44 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3718      	adds	r7, #24
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	00010002 	.word	0x00010002

08006a50 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a64:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a6c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006a82:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d003      	beq.n	8006a94 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a90:	2200      	movs	r2, #0
 8006a92:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006aa4:	7cfb      	ldrb	r3, [r7, #19]
 8006aa6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006aaa:	2b21      	cmp	r3, #33	@ 0x21
 8006aac:	d007      	beq.n	8006abe <I2C_DMAXferCplt+0x6e>
 8006aae:	7cfb      	ldrb	r3, [r7, #19]
 8006ab0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8006ab4:	2b22      	cmp	r3, #34	@ 0x22
 8006ab6:	d131      	bne.n	8006b1c <I2C_DMAXferCplt+0xcc>
 8006ab8:	7cbb      	ldrb	r3, [r7, #18]
 8006aba:	2b20      	cmp	r3, #32
 8006abc:	d12e      	bne.n	8006b1c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006acc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006ad4:	7cfb      	ldrb	r3, [r7, #19]
 8006ad6:	2b29      	cmp	r3, #41	@ 0x29
 8006ad8:	d10a      	bne.n	8006af0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	2221      	movs	r2, #33	@ 0x21
 8006ade:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	2228      	movs	r2, #40	@ 0x28
 8006ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ae8:	6978      	ldr	r0, [r7, #20]
 8006aea:	f7fe fc71 	bl	80053d0 <HAL_I2C_SlaveTxCpltCallback>
 8006aee:	e00c      	b.n	8006b0a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006af0:	7cfb      	ldrb	r3, [r7, #19]
 8006af2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006af4:	d109      	bne.n	8006b0a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2222      	movs	r2, #34	@ 0x22
 8006afa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	2228      	movs	r2, #40	@ 0x28
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b04:	6978      	ldr	r0, [r7, #20]
 8006b06:	f7fe fc6d 	bl	80053e4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006b18:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006b1a:	e074      	b.n	8006c06 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d06e      	beq.n	8006c06 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d107      	bne.n	8006b42 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b40:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006b50:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006b58:	d009      	beq.n	8006b6e <I2C_DMAXferCplt+0x11e>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d006      	beq.n	8006b6e <I2C_DMAXferCplt+0x11e>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006b66:	d002      	beq.n	8006b6e <I2C_DMAXferCplt+0x11e>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d107      	bne.n	8006b7e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b7c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006b8c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b9c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006bac:	6978      	ldr	r0, [r7, #20]
 8006bae:	f7fe fc3b 	bl	8005428 <HAL_I2C_ErrorCallback>
}
 8006bb2:	e028      	b.n	8006c06 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	2b40      	cmp	r3, #64	@ 0x40
 8006bc6:	d10a      	bne.n	8006bde <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006bd6:	6978      	ldr	r0, [r7, #20]
 8006bd8:	f7fa f8ba 	bl	8000d50 <HAL_I2C_MemRxCpltCallback>
}
 8006bdc:	e013      	b.n	8006c06 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d002      	beq.n	8006bf2 <I2C_DMAXferCplt+0x1a2>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b20      	cmp	r3, #32
 8006bf0:	d103      	bne.n	8006bfa <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	631a      	str	r2, [r3, #48]	@ 0x30
 8006bf8:	e002      	b.n	8006c00 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2212      	movs	r2, #18
 8006bfe:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006c00:	6978      	ldr	r0, [r7, #20]
 8006c02:	f7fe fbdb 	bl	80053bc <HAL_I2C_MasterRxCpltCallback>
}
 8006c06:	bf00      	nop
 8006c08:	3718      	adds	r7, #24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d003      	beq.n	8006c2c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c28:	2200      	movs	r2, #0
 8006c2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c38:	2200      	movs	r2, #0
 8006c3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7fd f9b5 	bl	8003fac <HAL_DMA_GetError>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d01b      	beq.n	8006c80 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c56:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2220      	movs	r2, #32
 8006c62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c72:	f043 0210 	orr.w	r2, r3, #16
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f7fe fbd4 	bl	8005428 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006c80:	bf00      	nop
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c90:	2300      	movs	r3, #0
 8006c92:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c98:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ca0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006ca2:	4b4b      	ldr	r3, [pc, #300]	@ (8006dd0 <I2C_DMAAbort+0x148>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	08db      	lsrs	r3, r3, #3
 8006ca8:	4a4a      	ldr	r2, [pc, #296]	@ (8006dd4 <I2C_DMAAbort+0x14c>)
 8006caa:	fba2 2303 	umull	r2, r3, r2, r3
 8006cae:	0a1a      	lsrs	r2, r3, #8
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	00da      	lsls	r2, r3, #3
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d106      	bne.n	8006cd0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc6:	f043 0220 	orr.w	r2, r3, #32
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006cce:	e00a      	b.n	8006ce6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ce4:	d0ea      	beq.n	8006cbc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d02:	2200      	movs	r2, #0
 8006d04:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d14:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d003      	beq.n	8006d2c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d28:	2200      	movs	r2, #0
 8006d2a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d38:	2200      	movs	r2, #0
 8006d3a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 0201 	bic.w	r2, r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b60      	cmp	r3, #96	@ 0x60
 8006d56:	d10e      	bne.n	8006d76 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d6e:	6978      	ldr	r0, [r7, #20]
 8006d70:	f7fe fb64 	bl	800543c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d74:	e027      	b.n	8006dc6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d76:	7cfb      	ldrb	r3, [r7, #19]
 8006d78:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006d7c:	2b28      	cmp	r3, #40	@ 0x28
 8006d7e:	d117      	bne.n	8006db0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f042 0201 	orr.w	r2, r2, #1
 8006d8e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006d9e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2200      	movs	r2, #0
 8006da4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	2228      	movs	r2, #40	@ 0x28
 8006daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006dae:	e007      	b.n	8006dc0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006dc0:	6978      	ldr	r0, [r7, #20]
 8006dc2:	f7fe fb31 	bl	8005428 <HAL_I2C_ErrorCallback>
}
 8006dc6:	bf00      	nop
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	2000002c 	.word	0x2000002c
 8006dd4:	14f8b589 	.word	0x14f8b589

08006dd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	603b      	str	r3, [r7, #0]
 8006de4:	4613      	mov	r3, r2
 8006de6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006de8:	e048      	b.n	8006e7c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df0:	d044      	beq.n	8006e7c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006df2:	f7fb ffb9 	bl	8002d68 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d302      	bcc.n	8006e08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d139      	bne.n	8006e7c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	0c1b      	lsrs	r3, r3, #16
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d10d      	bne.n	8006e2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	43da      	mvns	r2, r3
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	bf0c      	ite	eq
 8006e24:	2301      	moveq	r3, #1
 8006e26:	2300      	movne	r3, #0
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	e00c      	b.n	8006e48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	43da      	mvns	r2, r3
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	4013      	ands	r3, r2
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	bf0c      	ite	eq
 8006e40:	2301      	moveq	r3, #1
 8006e42:	2300      	movne	r3, #0
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	461a      	mov	r2, r3
 8006e48:	79fb      	ldrb	r3, [r7, #7]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d116      	bne.n	8006e7c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2220      	movs	r2, #32
 8006e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e68:	f043 0220 	orr.w	r2, r3, #32
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e023      	b.n	8006ec4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	0c1b      	lsrs	r3, r3, #16
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d10d      	bne.n	8006ea2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	43da      	mvns	r2, r3
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	4013      	ands	r3, r2
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bf0c      	ite	eq
 8006e98:	2301      	moveq	r3, #1
 8006e9a:	2300      	movne	r3, #0
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	e00c      	b.n	8006ebc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	43da      	mvns	r2, r3
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	4013      	ands	r3, r2
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	bf0c      	ite	eq
 8006eb4:	2301      	moveq	r3, #1
 8006eb6:	2300      	movne	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	461a      	mov	r2, r3
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d093      	beq.n	8006dea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
 8006ed8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006eda:	e071      	b.n	8006fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eea:	d123      	bne.n	8006f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006efa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006f04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f20:	f043 0204 	orr.w	r2, r3, #4
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e067      	b.n	8007004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3a:	d041      	beq.n	8006fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f3c:	f7fb ff14 	bl	8002d68 <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d302      	bcc.n	8006f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d136      	bne.n	8006fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	0c1b      	lsrs	r3, r3, #16
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d10c      	bne.n	8006f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	43da      	mvns	r2, r3
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	4013      	ands	r3, r2
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	bf14      	ite	ne
 8006f6e:	2301      	movne	r3, #1
 8006f70:	2300      	moveq	r3, #0
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	e00b      	b.n	8006f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	699b      	ldr	r3, [r3, #24]
 8006f7c:	43da      	mvns	r2, r3
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	4013      	ands	r3, r2
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	bf14      	ite	ne
 8006f88:	2301      	movne	r3, #1
 8006f8a:	2300      	moveq	r3, #0
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d016      	beq.n	8006fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fac:	f043 0220 	orr.w	r2, r3, #32
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e021      	b.n	8007004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	0c1b      	lsrs	r3, r3, #16
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d10c      	bne.n	8006fe4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	43da      	mvns	r2, r3
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	bf14      	ite	ne
 8006fdc:	2301      	movne	r3, #1
 8006fde:	2300      	moveq	r3, #0
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	e00b      	b.n	8006ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	43da      	mvns	r2, r3
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	4013      	ands	r3, r2
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	bf14      	ite	ne
 8006ff6:	2301      	movne	r3, #1
 8006ff8:	2300      	moveq	r3, #0
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f47f af6d 	bne.w	8006edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007018:	e034      	b.n	8007084 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 f8b8 	bl	8007190 <I2C_IsAcknowledgeFailed>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e034      	b.n	8007094 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007030:	d028      	beq.n	8007084 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007032:	f7fb fe99 	bl	8002d68 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	429a      	cmp	r2, r3
 8007040:	d302      	bcc.n	8007048 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d11d      	bne.n	8007084 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007052:	2b80      	cmp	r3, #128	@ 0x80
 8007054:	d016      	beq.n	8007084 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2220      	movs	r2, #32
 8007060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007070:	f043 0220 	orr.w	r2, r3, #32
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e007      	b.n	8007094 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	695b      	ldr	r3, [r3, #20]
 800708a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800708e:	2b80      	cmp	r3, #128	@ 0x80
 8007090:	d1c3      	bne.n	800701a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070a8:	e034      	b.n	8007114 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 f870 	bl	8007190 <I2C_IsAcknowledgeFailed>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e034      	b.n	8007124 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070c0:	d028      	beq.n	8007114 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070c2:	f7fb fe51 	bl	8002d68 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d302      	bcc.n	80070d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d11d      	bne.n	8007114 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	f003 0304 	and.w	r3, r3, #4
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d016      	beq.n	8007114 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007100:	f043 0220 	orr.w	r2, r3, #32
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e007      	b.n	8007124 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	f003 0304 	and.w	r3, r3, #4
 800711e:	2b04      	cmp	r3, #4
 8007120:	d1c3      	bne.n	80070aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007138:	4b13      	ldr	r3, [pc, #76]	@ (8007188 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	08db      	lsrs	r3, r3, #3
 800713e:	4a13      	ldr	r2, [pc, #76]	@ (800718c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007140:	fba2 2303 	umull	r2, r3, r2, r3
 8007144:	0a1a      	lsrs	r2, r3, #8
 8007146:	4613      	mov	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	3b01      	subs	r3, #1
 8007152:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d107      	bne.n	800716a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715e:	f043 0220 	orr.w	r2, r3, #32
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e008      	b.n	800717c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007178:	d0e9      	beq.n	800714e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	2000002c 	.word	0x2000002c
 800718c:	14f8b589 	.word	0x14f8b589

08007190 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071a6:	d11b      	bne.n	80071e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80071b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071cc:	f043 0204 	orr.w	r2, r3, #4
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e000      	b.n	80071e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fa:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80071fe:	d103      	bne.n	8007208 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007206:	e007      	b.n	8007218 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007210:	d102      	bne.n	8007218 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2208      	movs	r2, #8
 8007216:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af02      	add	r7, sp, #8
 800722a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e101      	b.n	800743a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b00      	cmp	r3, #0
 8007246:	d106      	bne.n	8007256 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f006 f935 	bl	800d4c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2203      	movs	r2, #3
 800725a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007264:	d102      	bne.n	800726c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4618      	mov	r0, r3
 8007272:	f002 fc8c 	bl	8009b8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6818      	ldr	r0, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	7c1a      	ldrb	r2, [r3, #16]
 800727e:	f88d 2000 	strb.w	r2, [sp]
 8007282:	3304      	adds	r3, #4
 8007284:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007286:	f002 fb6b 	bl	8009960 <USB_CoreInit>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2202      	movs	r2, #2
 8007294:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007298:	2301      	movs	r3, #1
 800729a:	e0ce      	b.n	800743a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2100      	movs	r1, #0
 80072a2:	4618      	mov	r0, r3
 80072a4:	f002 fc84 	bl	8009bb0 <USB_SetCurrentMode>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d005      	beq.n	80072ba <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2202      	movs	r2, #2
 80072b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	e0bf      	b.n	800743a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072ba:	2300      	movs	r3, #0
 80072bc:	73fb      	strb	r3, [r7, #15]
 80072be:	e04a      	b.n	8007356 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80072c0:	7bfa      	ldrb	r2, [r7, #15]
 80072c2:	6879      	ldr	r1, [r7, #4]
 80072c4:	4613      	mov	r3, r2
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	4413      	add	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	440b      	add	r3, r1
 80072ce:	3315      	adds	r3, #21
 80072d0:	2201      	movs	r2, #1
 80072d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80072d4:	7bfa      	ldrb	r2, [r7, #15]
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	4613      	mov	r3, r2
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	4413      	add	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	440b      	add	r3, r1
 80072e2:	3314      	adds	r3, #20
 80072e4:	7bfa      	ldrb	r2, [r7, #15]
 80072e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80072e8:	7bfa      	ldrb	r2, [r7, #15]
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
 80072ec:	b298      	uxth	r0, r3
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	4613      	mov	r3, r2
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	4413      	add	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	440b      	add	r3, r1
 80072fa:	332e      	adds	r3, #46	@ 0x2e
 80072fc:	4602      	mov	r2, r0
 80072fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007300:	7bfa      	ldrb	r2, [r7, #15]
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	4613      	mov	r3, r2
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	4413      	add	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	440b      	add	r3, r1
 800730e:	3318      	adds	r3, #24
 8007310:	2200      	movs	r2, #0
 8007312:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007314:	7bfa      	ldrb	r2, [r7, #15]
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	4613      	mov	r3, r2
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	4413      	add	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	440b      	add	r3, r1
 8007322:	331c      	adds	r3, #28
 8007324:	2200      	movs	r2, #0
 8007326:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007328:	7bfa      	ldrb	r2, [r7, #15]
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	4613      	mov	r3, r2
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	4413      	add	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	440b      	add	r3, r1
 8007336:	3320      	adds	r3, #32
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800733c:	7bfa      	ldrb	r2, [r7, #15]
 800733e:	6879      	ldr	r1, [r7, #4]
 8007340:	4613      	mov	r3, r2
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	4413      	add	r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	440b      	add	r3, r1
 800734a:	3324      	adds	r3, #36	@ 0x24
 800734c:	2200      	movs	r2, #0
 800734e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	3301      	adds	r3, #1
 8007354:	73fb      	strb	r3, [r7, #15]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	791b      	ldrb	r3, [r3, #4]
 800735a:	7bfa      	ldrb	r2, [r7, #15]
 800735c:	429a      	cmp	r2, r3
 800735e:	d3af      	bcc.n	80072c0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007360:	2300      	movs	r3, #0
 8007362:	73fb      	strb	r3, [r7, #15]
 8007364:	e044      	b.n	80073f0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007366:	7bfa      	ldrb	r2, [r7, #15]
 8007368:	6879      	ldr	r1, [r7, #4]
 800736a:	4613      	mov	r3, r2
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	440b      	add	r3, r1
 8007374:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007378:	2200      	movs	r2, #0
 800737a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800737c:	7bfa      	ldrb	r2, [r7, #15]
 800737e:	6879      	ldr	r1, [r7, #4]
 8007380:	4613      	mov	r3, r2
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	4413      	add	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	440b      	add	r3, r1
 800738a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800738e:	7bfa      	ldrb	r2, [r7, #15]
 8007390:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007392:	7bfa      	ldrb	r2, [r7, #15]
 8007394:	6879      	ldr	r1, [r7, #4]
 8007396:	4613      	mov	r3, r2
 8007398:	00db      	lsls	r3, r3, #3
 800739a:	4413      	add	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	440b      	add	r3, r1
 80073a0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80073a4:	2200      	movs	r2, #0
 80073a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80073a8:	7bfa      	ldrb	r2, [r7, #15]
 80073aa:	6879      	ldr	r1, [r7, #4]
 80073ac:	4613      	mov	r3, r2
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	4413      	add	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	440b      	add	r3, r1
 80073b6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80073ba:	2200      	movs	r2, #0
 80073bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80073be:	7bfa      	ldrb	r2, [r7, #15]
 80073c0:	6879      	ldr	r1, [r7, #4]
 80073c2:	4613      	mov	r3, r2
 80073c4:	00db      	lsls	r3, r3, #3
 80073c6:	4413      	add	r3, r2
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	440b      	add	r3, r1
 80073cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80073d0:	2200      	movs	r2, #0
 80073d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80073d4:	7bfa      	ldrb	r2, [r7, #15]
 80073d6:	6879      	ldr	r1, [r7, #4]
 80073d8:	4613      	mov	r3, r2
 80073da:	00db      	lsls	r3, r3, #3
 80073dc:	4413      	add	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	440b      	add	r3, r1
 80073e2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
 80073ec:	3301      	adds	r3, #1
 80073ee:	73fb      	strb	r3, [r7, #15]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	791b      	ldrb	r3, [r3, #4]
 80073f4:	7bfa      	ldrb	r2, [r7, #15]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d3b5      	bcc.n	8007366 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6818      	ldr	r0, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	7c1a      	ldrb	r2, [r3, #16]
 8007402:	f88d 2000 	strb.w	r2, [sp]
 8007406:	3304      	adds	r3, #4
 8007408:	cb0e      	ldmia	r3, {r1, r2, r3}
 800740a:	f002 fc1d 	bl	8009c48 <USB_DevInit>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d005      	beq.n	8007420 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2202      	movs	r2, #2
 8007418:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e00c      	b.n	800743a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4618      	mov	r0, r3
 8007434:	f003 fc67 	bl	800ad06 <USB_DevDisconnect>

  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b084      	sub	sp, #16
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007456:	2b01      	cmp	r3, #1
 8007458:	d101      	bne.n	800745e <HAL_PCD_Start+0x1c>
 800745a:	2302      	movs	r3, #2
 800745c:	e022      	b.n	80074a4 <HAL_PCD_Start+0x62>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800746e:	2b00      	cmp	r3, #0
 8007470:	d009      	beq.n	8007486 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007476:	2b01      	cmp	r3, #1
 8007478:	d105      	bne.n	8007486 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4618      	mov	r0, r3
 800748c:	f002 fb6e 	bl	8009b6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4618      	mov	r0, r3
 8007496:	f003 fc15 	bl	800acc4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80074ac:	b590      	push	{r4, r7, lr}
 80074ae:	b08d      	sub	sp, #52	@ 0x34
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f003 fcd3 	bl	800ae6e <USB_GetMode>
 80074c8:	4603      	mov	r3, r0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f040 848c 	bne.w	8007de8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f003 fc37 	bl	800ad48 <USB_ReadInterrupts>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 8482 	beq.w	8007de6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	0a1b      	lsrs	r3, r3, #8
 80074ec:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4618      	mov	r0, r3
 80074fc:	f003 fc24 	bl	800ad48 <USB_ReadInterrupts>
 8007500:	4603      	mov	r3, r0
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b02      	cmp	r3, #2
 8007508:	d107      	bne.n	800751a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	695a      	ldr	r2, [r3, #20]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f002 0202 	and.w	r2, r2, #2
 8007518:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4618      	mov	r0, r3
 8007520:	f003 fc12 	bl	800ad48 <USB_ReadInterrupts>
 8007524:	4603      	mov	r3, r0
 8007526:	f003 0310 	and.w	r3, r3, #16
 800752a:	2b10      	cmp	r3, #16
 800752c:	d161      	bne.n	80075f2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	699a      	ldr	r2, [r3, #24]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 0210 	bic.w	r2, r2, #16
 800753c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	f003 020f 	and.w	r2, r3, #15
 800754a:	4613      	mov	r3, r2
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	4413      	add	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	4413      	add	r3, r2
 800755a:	3304      	adds	r3, #4
 800755c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007564:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007568:	d124      	bne.n	80075b4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007570:	4013      	ands	r3, r2
 8007572:	2b00      	cmp	r3, #0
 8007574:	d035      	beq.n	80075e2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	091b      	lsrs	r3, r3, #4
 800757e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007580:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007584:	b29b      	uxth	r3, r3
 8007586:	461a      	mov	r2, r3
 8007588:	6a38      	ldr	r0, [r7, #32]
 800758a:	f003 fa49 	bl	800aa20 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	091b      	lsrs	r3, r3, #4
 8007596:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800759a:	441a      	add	r2, r3
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	695a      	ldr	r2, [r3, #20]
 80075a4:	69bb      	ldr	r3, [r7, #24]
 80075a6:	091b      	lsrs	r3, r3, #4
 80075a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075ac:	441a      	add	r2, r3
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	615a      	str	r2, [r3, #20]
 80075b2:	e016      	b.n	80075e2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80075ba:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80075be:	d110      	bne.n	80075e2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80075c6:	2208      	movs	r2, #8
 80075c8:	4619      	mov	r1, r3
 80075ca:	6a38      	ldr	r0, [r7, #32]
 80075cc:	f003 fa28 	bl	800aa20 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	695a      	ldr	r2, [r3, #20]
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	091b      	lsrs	r3, r3, #4
 80075d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075dc:	441a      	add	r2, r3
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	699a      	ldr	r2, [r3, #24]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f042 0210 	orr.w	r2, r2, #16
 80075f0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f003 fba6 	bl	800ad48 <USB_ReadInterrupts>
 80075fc:	4603      	mov	r3, r0
 80075fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007602:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007606:	f040 80a7 	bne.w	8007758 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4618      	mov	r0, r3
 8007614:	f003 fbab 	bl	800ad6e <USB_ReadDevAllOutEpInterrupt>
 8007618:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800761a:	e099      	b.n	8007750 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800761c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	f000 808e 	beq.w	8007744 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	4611      	mov	r1, r2
 8007632:	4618      	mov	r0, r3
 8007634:	f003 fbcf 	bl	800add6 <USB_ReadDevOutEPInterrupt>
 8007638:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00c      	beq.n	800765e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007650:	461a      	mov	r2, r3
 8007652:	2301      	movs	r3, #1
 8007654:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007656:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fea3 	bl	80083a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	f003 0308 	and.w	r3, r3, #8
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00c      	beq.n	8007682 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	4413      	add	r3, r2
 8007670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007674:	461a      	mov	r2, r3
 8007676:	2308      	movs	r3, #8
 8007678:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800767a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 ff79 	bl	8008574 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	f003 0310 	and.w	r3, r3, #16
 8007688:	2b00      	cmp	r3, #0
 800768a:	d008      	beq.n	800769e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800768c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768e:	015a      	lsls	r2, r3, #5
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	4413      	add	r3, r2
 8007694:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007698:	461a      	mov	r2, r3
 800769a:	2310      	movs	r3, #16
 800769c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	f003 0302 	and.w	r3, r3, #2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d030      	beq.n	800770a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076b0:	2b80      	cmp	r3, #128	@ 0x80
 80076b2:	d109      	bne.n	80076c8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80076b4:	69fb      	ldr	r3, [r7, #28]
 80076b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	69fa      	ldr	r2, [r7, #28]
 80076be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80076c6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80076c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076ca:	4613      	mov	r3, r2
 80076cc:	00db      	lsls	r3, r3, #3
 80076ce:	4413      	add	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	4413      	add	r3, r2
 80076da:	3304      	adds	r3, #4
 80076dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	78db      	ldrb	r3, [r3, #3]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d108      	bne.n	80076f8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2200      	movs	r2, #0
 80076ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80076ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f005 ffe0 	bl	800d6b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80076f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007704:	461a      	mov	r2, r3
 8007706:	2302      	movs	r3, #2
 8007708:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f003 0320 	and.w	r3, r3, #32
 8007710:	2b00      	cmp	r3, #0
 8007712:	d008      	beq.n	8007726 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007720:	461a      	mov	r2, r3
 8007722:	2320      	movs	r3, #32
 8007724:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d009      	beq.n	8007744 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800773c:	461a      	mov	r2, r3
 800773e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007742:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007746:	3301      	adds	r3, #1
 8007748:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800774a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774c:	085b      	lsrs	r3, r3, #1
 800774e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007752:	2b00      	cmp	r3, #0
 8007754:	f47f af62 	bne.w	800761c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4618      	mov	r0, r3
 800775e:	f003 faf3 	bl	800ad48 <USB_ReadInterrupts>
 8007762:	4603      	mov	r3, r0
 8007764:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007768:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800776c:	f040 80db 	bne.w	8007926 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4618      	mov	r0, r3
 8007776:	f003 fb14 	bl	800ada2 <USB_ReadDevAllInEpInterrupt>
 800777a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800777c:	2300      	movs	r3, #0
 800777e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007780:	e0cd      	b.n	800791e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 80c2 	beq.w	8007912 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007794:	b2d2      	uxtb	r2, r2
 8007796:	4611      	mov	r1, r2
 8007798:	4618      	mov	r0, r3
 800779a:	f003 fb3a 	bl	800ae12 <USB_ReadDevInEPInterrupt>
 800779e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d057      	beq.n	800785a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80077aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ac:	f003 030f 	and.w	r3, r3, #15
 80077b0:	2201      	movs	r2, #1
 80077b2:	fa02 f303 	lsl.w	r3, r2, r3
 80077b6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	43db      	mvns	r3, r3
 80077c4:	69f9      	ldr	r1, [r7, #28]
 80077c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077ca:	4013      	ands	r3, r2
 80077cc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80077ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077d0:	015a      	lsls	r2, r3, #5
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077da:	461a      	mov	r2, r3
 80077dc:	2301      	movs	r3, #1
 80077de:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	799b      	ldrb	r3, [r3, #6]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d132      	bne.n	800784e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80077e8:	6879      	ldr	r1, [r7, #4]
 80077ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077ec:	4613      	mov	r3, r2
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	4413      	add	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	440b      	add	r3, r1
 80077f6:	3320      	adds	r3, #32
 80077f8:	6819      	ldr	r1, [r3, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077fe:	4613      	mov	r3, r2
 8007800:	00db      	lsls	r3, r3, #3
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4403      	add	r3, r0
 8007808:	331c      	adds	r3, #28
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4419      	add	r1, r3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007812:	4613      	mov	r3, r2
 8007814:	00db      	lsls	r3, r3, #3
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4403      	add	r3, r0
 800781c:	3320      	adds	r3, #32
 800781e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	d113      	bne.n	800784e <HAL_PCD_IRQHandler+0x3a2>
 8007826:	6879      	ldr	r1, [r7, #4]
 8007828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800782a:	4613      	mov	r3, r2
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	440b      	add	r3, r1
 8007834:	3324      	adds	r3, #36	@ 0x24
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d108      	bne.n	800784e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6818      	ldr	r0, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007846:	461a      	mov	r2, r3
 8007848:	2101      	movs	r1, #1
 800784a:	f003 fb41 	bl	800aed0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007850:	b2db      	uxtb	r3, r3
 8007852:	4619      	mov	r1, r3
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f005 feb4 	bl	800d5c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f003 0308 	and.w	r3, r3, #8
 8007860:	2b00      	cmp	r3, #0
 8007862:	d008      	beq.n	8007876 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	4413      	add	r3, r2
 800786c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007870:	461a      	mov	r2, r3
 8007872:	2308      	movs	r3, #8
 8007874:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	f003 0310 	and.w	r3, r3, #16
 800787c:	2b00      	cmp	r3, #0
 800787e:	d008      	beq.n	8007892 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	4413      	add	r3, r2
 8007888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800788c:	461a      	mov	r2, r3
 800788e:	2310      	movs	r3, #16
 8007890:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007898:	2b00      	cmp	r3, #0
 800789a:	d008      	beq.n	80078ae <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800789c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789e:	015a      	lsls	r2, r3, #5
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	4413      	add	r3, r2
 80078a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078a8:	461a      	mov	r2, r3
 80078aa:	2340      	movs	r3, #64	@ 0x40
 80078ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	f003 0302 	and.w	r3, r3, #2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d023      	beq.n	8007900 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80078b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80078ba:	6a38      	ldr	r0, [r7, #32]
 80078bc:	f002 fb28 	bl	8009f10 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80078c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078c2:	4613      	mov	r3, r2
 80078c4:	00db      	lsls	r3, r3, #3
 80078c6:	4413      	add	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	3310      	adds	r3, #16
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	4413      	add	r3, r2
 80078d0:	3304      	adds	r3, #4
 80078d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	78db      	ldrb	r3, [r3, #3]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d108      	bne.n	80078ee <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	2200      	movs	r2, #0
 80078e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80078e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f005 fef7 	bl	800d6dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80078ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078fa:	461a      	mov	r2, r3
 80078fc:	2302      	movs	r3, #2
 80078fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800790a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fcbd 	bl	800828c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007914:	3301      	adds	r3, #1
 8007916:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791a:	085b      	lsrs	r3, r3, #1
 800791c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800791e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007920:	2b00      	cmp	r3, #0
 8007922:	f47f af2e 	bne.w	8007782 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4618      	mov	r0, r3
 800792c:	f003 fa0c 	bl	800ad48 <USB_ReadInterrupts>
 8007930:	4603      	mov	r3, r0
 8007932:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007936:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800793a:	d122      	bne.n	8007982 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	69fa      	ldr	r2, [r7, #28]
 8007946:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800794a:	f023 0301 	bic.w	r3, r3, #1
 800794e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007956:	2b01      	cmp	r3, #1
 8007958:	d108      	bne.n	800796c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007962:	2100      	movs	r1, #0
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fea3 	bl	80086b0 <HAL_PCDEx_LPM_Callback>
 800796a:	e002      	b.n	8007972 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f005 fe95 	bl	800d69c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	695a      	ldr	r2, [r3, #20]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007980:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4618      	mov	r0, r3
 8007988:	f003 f9de 	bl	800ad48 <USB_ReadInterrupts>
 800798c:	4603      	mov	r3, r0
 800798e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007992:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007996:	d112      	bne.n	80079be <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f003 0301 	and.w	r3, r3, #1
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d102      	bne.n	80079ae <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f005 fe51 	bl	800d650 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	695a      	ldr	r2, [r3, #20]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80079bc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f003 f9c0 	bl	800ad48 <USB_ReadInterrupts>
 80079c8:	4603      	mov	r3, r0
 80079ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079d2:	f040 80b7 	bne.w	8007b44 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079e4:	f023 0301 	bic.w	r3, r3, #1
 80079e8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2110      	movs	r1, #16
 80079f0:	4618      	mov	r0, r3
 80079f2:	f002 fa8d 	bl	8009f10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079f6:	2300      	movs	r3, #0
 80079f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079fa:	e046      	b.n	8007a8a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80079fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a08:	461a      	mov	r2, r3
 8007a0a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a0e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a20:	0151      	lsls	r1, r2, #5
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	440a      	add	r2, r1
 8007a26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a42:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a54:	0151      	lsls	r1, r2, #5
 8007a56:	69fa      	ldr	r2, [r7, #28]
 8007a58:	440a      	add	r2, r1
 8007a5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a62:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a74:	0151      	lsls	r1, r2, #5
 8007a76:	69fa      	ldr	r2, [r7, #28]
 8007a78:	440a      	add	r2, r1
 8007a7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a82:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a86:	3301      	adds	r3, #1
 8007a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	791b      	ldrb	r3, [r3, #4]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d3b2      	bcc.n	80079fc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a9c:	69db      	ldr	r3, [r3, #28]
 8007a9e:	69fa      	ldr	r2, [r7, #28]
 8007aa0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007aa4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007aa8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	7bdb      	ldrb	r3, [r3, #15]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d016      	beq.n	8007ae0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007abc:	69fa      	ldr	r2, [r7, #28]
 8007abe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ac2:	f043 030b 	orr.w	r3, r3, #11
 8007ac6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ad2:	69fa      	ldr	r2, [r7, #28]
 8007ad4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ad8:	f043 030b 	orr.w	r3, r3, #11
 8007adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8007ade:	e015      	b.n	8007b0c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	69fa      	ldr	r2, [r7, #28]
 8007aea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007aee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007af2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007af6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	69fa      	ldr	r2, [r7, #28]
 8007b02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b06:	f043 030b 	orr.w	r3, r3, #11
 8007b0a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	69fa      	ldr	r2, [r7, #28]
 8007b16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b1a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007b1e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6818      	ldr	r0, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007b2e:	461a      	mov	r2, r3
 8007b30:	f003 f9ce 	bl	800aed0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	695a      	ldr	r2, [r3, #20]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007b42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f003 f8fd 	bl	800ad48 <USB_ReadInterrupts>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b58:	d123      	bne.n	8007ba2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f003 f993 	bl	800ae8a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f002 fa4a 	bl	800a002 <USB_GetDevSpeed>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	461a      	mov	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681c      	ldr	r4, [r3, #0]
 8007b7a:	f001 f9c9 	bl	8008f10 <HAL_RCC_GetHCLKFreq>
 8007b7e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b84:	461a      	mov	r2, r3
 8007b86:	4620      	mov	r0, r4
 8007b88:	f001 ff4e 	bl	8009a28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f005 fd40 	bl	800d612 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	695a      	ldr	r2, [r3, #20]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f003 f8ce 	bl	800ad48 <USB_ReadInterrupts>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f003 0308 	and.w	r3, r3, #8
 8007bb2:	2b08      	cmp	r3, #8
 8007bb4:	d10a      	bne.n	8007bcc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f005 fd1d 	bl	800d5f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	695a      	ldr	r2, [r3, #20]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f002 0208 	and.w	r2, r2, #8
 8007bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f003 f8b9 	bl	800ad48 <USB_ReadInterrupts>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bdc:	2b80      	cmp	r3, #128	@ 0x80
 8007bde:	d123      	bne.n	8007c28 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007be8:	6a3b      	ldr	r3, [r7, #32]
 8007bea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007bec:	2301      	movs	r3, #1
 8007bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bf0:	e014      	b.n	8007c1c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007bf2:	6879      	ldr	r1, [r7, #4]
 8007bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	00db      	lsls	r3, r3, #3
 8007bfa:	4413      	add	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	440b      	add	r3, r1
 8007c00:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d105      	bne.n	8007c16 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fb0a 	bl	800822a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c18:	3301      	adds	r3, #1
 8007c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	791b      	ldrb	r3, [r3, #4]
 8007c20:	461a      	mov	r2, r3
 8007c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d3e4      	bcc.n	8007bf2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f003 f88b 	bl	800ad48 <USB_ReadInterrupts>
 8007c32:	4603      	mov	r3, r0
 8007c34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c3c:	d13c      	bne.n	8007cb8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c3e:	2301      	movs	r3, #1
 8007c40:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c42:	e02b      	b.n	8007c9c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007c54:	6879      	ldr	r1, [r7, #4]
 8007c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c58:	4613      	mov	r3, r2
 8007c5a:	00db      	lsls	r3, r3, #3
 8007c5c:	4413      	add	r3, r2
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	440b      	add	r3, r1
 8007c62:	3318      	adds	r3, #24
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d115      	bne.n	8007c96 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007c6a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	da12      	bge.n	8007c96 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c74:	4613      	mov	r3, r2
 8007c76:	00db      	lsls	r3, r3, #3
 8007c78:	4413      	add	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	440b      	add	r3, r1
 8007c7e:	3317      	adds	r3, #23
 8007c80:	2201      	movs	r2, #1
 8007c82:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 faca 	bl	800822a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c98:	3301      	adds	r3, #1
 8007c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	791b      	ldrb	r3, [r3, #4]
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d3cd      	bcc.n	8007c44 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	695a      	ldr	r2, [r3, #20]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007cb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f003 f843 	bl	800ad48 <USB_ReadInterrupts>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007cc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ccc:	d156      	bne.n	8007d7c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007cce:	2301      	movs	r3, #1
 8007cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cd2:	e045      	b.n	8007d60 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd6:	015a      	lsls	r2, r3, #5
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	4413      	add	r3, r2
 8007cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007ce4:	6879      	ldr	r1, [r7, #4]
 8007ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ce8:	4613      	mov	r3, r2
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	4413      	add	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	440b      	add	r3, r1
 8007cf2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d12e      	bne.n	8007d5a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007cfc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	da2b      	bge.n	8007d5a <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	0c1a      	lsrs	r2, r3, #16
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007d0c:	4053      	eors	r3, r2
 8007d0e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d121      	bne.n	8007d5a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	00db      	lsls	r3, r3, #3
 8007d1e:	4413      	add	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	440b      	add	r3, r1
 8007d24:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007d28:	2201      	movs	r2, #1
 8007d2a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	695b      	ldr	r3, [r3, #20]
 8007d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10a      	bne.n	8007d5a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	69fa      	ldr	r2, [r7, #28]
 8007d4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007d56:	6053      	str	r3, [r2, #4]
            break;
 8007d58:	e008      	b.n	8007d6c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	791b      	ldrb	r3, [r3, #4]
 8007d64:	461a      	mov	r2, r3
 8007d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d3b3      	bcc.n	8007cd4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	695a      	ldr	r2, [r3, #20]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f002 ffe1 	bl	800ad48 <USB_ReadInterrupts>
 8007d86:	4603      	mov	r3, r0
 8007d88:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d90:	d10a      	bne.n	8007da8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f005 fcb4 	bl	800d700 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	695a      	ldr	r2, [r3, #20]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007da6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4618      	mov	r0, r3
 8007dae:	f002 ffcb 	bl	800ad48 <USB_ReadInterrupts>
 8007db2:	4603      	mov	r3, r0
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d115      	bne.n	8007de8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	f003 0304 	and.w	r3, r3, #4
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d002      	beq.n	8007dd4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f005 fca4 	bl	800d71c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6859      	ldr	r1, [r3, #4]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	430a      	orrs	r2, r1
 8007de2:	605a      	str	r2, [r3, #4]
 8007de4:	e000      	b.n	8007de8 <HAL_PCD_IRQHandler+0x93c>
      return;
 8007de6:	bf00      	nop
    }
  }
}
 8007de8:	3734      	adds	r7, #52	@ 0x34
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd90      	pop	{r4, r7, pc}

08007dee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b082      	sub	sp, #8
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	460b      	mov	r3, r1
 8007df8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d101      	bne.n	8007e08 <HAL_PCD_SetAddress+0x1a>
 8007e04:	2302      	movs	r3, #2
 8007e06:	e012      	b.n	8007e2e <HAL_PCD_SetAddress+0x40>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	78fa      	ldrb	r2, [r7, #3]
 8007e14:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	78fa      	ldrb	r2, [r7, #3]
 8007e1c:	4611      	mov	r1, r2
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f002 ff2a 	bl	800ac78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b084      	sub	sp, #16
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
 8007e3e:	4608      	mov	r0, r1
 8007e40:	4611      	mov	r1, r2
 8007e42:	461a      	mov	r2, r3
 8007e44:	4603      	mov	r3, r0
 8007e46:	70fb      	strb	r3, [r7, #3]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	803b      	strh	r3, [r7, #0]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	da0f      	bge.n	8007e7c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e5c:	78fb      	ldrb	r3, [r7, #3]
 8007e5e:	f003 020f 	and.w	r2, r3, #15
 8007e62:	4613      	mov	r3, r2
 8007e64:	00db      	lsls	r3, r3, #3
 8007e66:	4413      	add	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	3310      	adds	r3, #16
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	4413      	add	r3, r2
 8007e70:	3304      	adds	r3, #4
 8007e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2201      	movs	r2, #1
 8007e78:	705a      	strb	r2, [r3, #1]
 8007e7a:	e00f      	b.n	8007e9c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e7c:	78fb      	ldrb	r3, [r7, #3]
 8007e7e:	f003 020f 	and.w	r2, r3, #15
 8007e82:	4613      	mov	r3, r2
 8007e84:	00db      	lsls	r3, r3, #3
 8007e86:	4413      	add	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	4413      	add	r3, r2
 8007e92:	3304      	adds	r3, #4
 8007e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007e9c:	78fb      	ldrb	r3, [r7, #3]
 8007e9e:	f003 030f 	and.w	r3, r3, #15
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007ea8:	883b      	ldrh	r3, [r7, #0]
 8007eaa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	78ba      	ldrb	r2, [r7, #2]
 8007eb6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	785b      	ldrb	r3, [r3, #1]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d004      	beq.n	8007eca <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007eca:	78bb      	ldrb	r3, [r7, #2]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d102      	bne.n	8007ed6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d101      	bne.n	8007ee4 <HAL_PCD_EP_Open+0xae>
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	e00e      	b.n	8007f02 <HAL_PCD_EP_Open+0xcc>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68f9      	ldr	r1, [r7, #12]
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f002 f8aa 	bl	800a04c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007f00:	7afb      	ldrb	r3, [r7, #11]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b084      	sub	sp, #16
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	460b      	mov	r3, r1
 8007f14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007f16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	da0f      	bge.n	8007f3e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f1e:	78fb      	ldrb	r3, [r7, #3]
 8007f20:	f003 020f 	and.w	r2, r3, #15
 8007f24:	4613      	mov	r3, r2
 8007f26:	00db      	lsls	r3, r3, #3
 8007f28:	4413      	add	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	3310      	adds	r3, #16
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	4413      	add	r3, r2
 8007f32:	3304      	adds	r3, #4
 8007f34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	705a      	strb	r2, [r3, #1]
 8007f3c:	e00f      	b.n	8007f5e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f3e:	78fb      	ldrb	r3, [r7, #3]
 8007f40:	f003 020f 	and.w	r2, r3, #15
 8007f44:	4613      	mov	r3, r2
 8007f46:	00db      	lsls	r3, r3, #3
 8007f48:	4413      	add	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	4413      	add	r3, r2
 8007f54:	3304      	adds	r3, #4
 8007f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f5e:	78fb      	ldrb	r3, [r7, #3]
 8007f60:	f003 030f 	and.w	r3, r3, #15
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d101      	bne.n	8007f78 <HAL_PCD_EP_Close+0x6e>
 8007f74:	2302      	movs	r3, #2
 8007f76:	e00e      	b.n	8007f96 <HAL_PCD_EP_Close+0x8c>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	68f9      	ldr	r1, [r7, #12]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f002 f8e8 	bl	800a15c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b086      	sub	sp, #24
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	607a      	str	r2, [r7, #4]
 8007fa8:	603b      	str	r3, [r7, #0]
 8007faa:	460b      	mov	r3, r1
 8007fac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007fae:	7afb      	ldrb	r3, [r7, #11]
 8007fb0:	f003 020f 	and.w	r2, r3, #15
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	00db      	lsls	r3, r3, #3
 8007fb8:	4413      	add	r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	683a      	ldr	r2, [r7, #0]
 8007fd2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fe0:	7afb      	ldrb	r3, [r7, #11]
 8007fe2:	f003 030f 	and.w	r3, r3, #15
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	799b      	ldrb	r3, [r3, #6]
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d102      	bne.n	8007ffa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6818      	ldr	r0, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	799b      	ldrb	r3, [r3, #6]
 8008002:	461a      	mov	r2, r3
 8008004:	6979      	ldr	r1, [r7, #20]
 8008006:	f002 f985 	bl	800a314 <USB_EPStartXfer>

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3718      	adds	r7, #24
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008020:	78fb      	ldrb	r3, [r7, #3]
 8008022:	f003 020f 	and.w	r2, r3, #15
 8008026:	6879      	ldr	r1, [r7, #4]
 8008028:	4613      	mov	r3, r2
 800802a:	00db      	lsls	r3, r3, #3
 800802c:	4413      	add	r3, r2
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	440b      	add	r3, r1
 8008032:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008036:	681b      	ldr	r3, [r3, #0]
}
 8008038:	4618      	mov	r0, r3
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	607a      	str	r2, [r7, #4]
 800804e:	603b      	str	r3, [r7, #0]
 8008050:	460b      	mov	r3, r1
 8008052:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008054:	7afb      	ldrb	r3, [r7, #11]
 8008056:	f003 020f 	and.w	r2, r3, #15
 800805a:	4613      	mov	r3, r2
 800805c:	00db      	lsls	r3, r3, #3
 800805e:	4413      	add	r3, r2
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	3310      	adds	r3, #16
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	4413      	add	r3, r2
 8008068:	3304      	adds	r3, #4
 800806a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	683a      	ldr	r2, [r7, #0]
 8008076:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	2200      	movs	r2, #0
 800807c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	2201      	movs	r2, #1
 8008082:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008084:	7afb      	ldrb	r3, [r7, #11]
 8008086:	f003 030f 	and.w	r3, r3, #15
 800808a:	b2da      	uxtb	r2, r3
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	799b      	ldrb	r3, [r3, #6]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d102      	bne.n	800809e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	6818      	ldr	r0, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	799b      	ldrb	r3, [r3, #6]
 80080a6:	461a      	mov	r2, r3
 80080a8:	6979      	ldr	r1, [r7, #20]
 80080aa:	f002 f933 	bl	800a314 <USB_EPStartXfer>

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3718      	adds	r7, #24
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80080c4:	78fb      	ldrb	r3, [r7, #3]
 80080c6:	f003 030f 	and.w	r3, r3, #15
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	7912      	ldrb	r2, [r2, #4]
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d901      	bls.n	80080d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e04f      	b.n	8008176 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80080d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	da0f      	bge.n	80080fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080de:	78fb      	ldrb	r3, [r7, #3]
 80080e0:	f003 020f 	and.w	r2, r3, #15
 80080e4:	4613      	mov	r3, r2
 80080e6:	00db      	lsls	r3, r3, #3
 80080e8:	4413      	add	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	3310      	adds	r3, #16
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	4413      	add	r3, r2
 80080f2:	3304      	adds	r3, #4
 80080f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2201      	movs	r2, #1
 80080fa:	705a      	strb	r2, [r3, #1]
 80080fc:	e00d      	b.n	800811a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80080fe:	78fa      	ldrb	r2, [r7, #3]
 8008100:	4613      	mov	r3, r2
 8008102:	00db      	lsls	r3, r3, #3
 8008104:	4413      	add	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	4413      	add	r3, r2
 8008110:	3304      	adds	r3, #4
 8008112:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2201      	movs	r2, #1
 800811e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008120:	78fb      	ldrb	r3, [r7, #3]
 8008122:	f003 030f 	and.w	r3, r3, #15
 8008126:	b2da      	uxtb	r2, r3
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008132:	2b01      	cmp	r3, #1
 8008134:	d101      	bne.n	800813a <HAL_PCD_EP_SetStall+0x82>
 8008136:	2302      	movs	r3, #2
 8008138:	e01d      	b.n	8008176 <HAL_PCD_EP_SetStall+0xbe>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2201      	movs	r2, #1
 800813e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68f9      	ldr	r1, [r7, #12]
 8008148:	4618      	mov	r0, r3
 800814a:	f002 fcc1 	bl	800aad0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800814e:	78fb      	ldrb	r3, [r7, #3]
 8008150:	f003 030f 	and.w	r3, r3, #15
 8008154:	2b00      	cmp	r3, #0
 8008156:	d109      	bne.n	800816c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6818      	ldr	r0, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	7999      	ldrb	r1, [r3, #6]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008166:	461a      	mov	r2, r3
 8008168:	f002 feb2 	bl	800aed0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
 8008186:	460b      	mov	r3, r1
 8008188:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800818a:	78fb      	ldrb	r3, [r7, #3]
 800818c:	f003 030f 	and.w	r3, r3, #15
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	7912      	ldrb	r2, [r2, #4]
 8008194:	4293      	cmp	r3, r2
 8008196:	d901      	bls.n	800819c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e042      	b.n	8008222 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800819c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	da0f      	bge.n	80081c4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80081a4:	78fb      	ldrb	r3, [r7, #3]
 80081a6:	f003 020f 	and.w	r2, r3, #15
 80081aa:	4613      	mov	r3, r2
 80081ac:	00db      	lsls	r3, r3, #3
 80081ae:	4413      	add	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	3310      	adds	r3, #16
 80081b4:	687a      	ldr	r2, [r7, #4]
 80081b6:	4413      	add	r3, r2
 80081b8:	3304      	adds	r3, #4
 80081ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2201      	movs	r2, #1
 80081c0:	705a      	strb	r2, [r3, #1]
 80081c2:	e00f      	b.n	80081e4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80081c4:	78fb      	ldrb	r3, [r7, #3]
 80081c6:	f003 020f 	and.w	r2, r3, #15
 80081ca:	4613      	mov	r3, r2
 80081cc:	00db      	lsls	r3, r3, #3
 80081ce:	4413      	add	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	4413      	add	r3, r2
 80081da:	3304      	adds	r3, #4
 80081dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80081ea:	78fb      	ldrb	r3, [r7, #3]
 80081ec:	f003 030f 	and.w	r3, r3, #15
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d101      	bne.n	8008204 <HAL_PCD_EP_ClrStall+0x86>
 8008200:	2302      	movs	r3, #2
 8008202:	e00e      	b.n	8008222 <HAL_PCD_EP_ClrStall+0xa4>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68f9      	ldr	r1, [r7, #12]
 8008212:	4618      	mov	r0, r3
 8008214:	f002 fcca 	bl	800abac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	460b      	mov	r3, r1
 8008234:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800823a:	2b00      	cmp	r3, #0
 800823c:	da0c      	bge.n	8008258 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800823e:	78fb      	ldrb	r3, [r7, #3]
 8008240:	f003 020f 	and.w	r2, r3, #15
 8008244:	4613      	mov	r3, r2
 8008246:	00db      	lsls	r3, r3, #3
 8008248:	4413      	add	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	3310      	adds	r3, #16
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	4413      	add	r3, r2
 8008252:	3304      	adds	r3, #4
 8008254:	60fb      	str	r3, [r7, #12]
 8008256:	e00c      	b.n	8008272 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008258:	78fb      	ldrb	r3, [r7, #3]
 800825a:	f003 020f 	and.w	r2, r3, #15
 800825e:	4613      	mov	r3, r2
 8008260:	00db      	lsls	r3, r3, #3
 8008262:	4413      	add	r3, r2
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	4413      	add	r3, r2
 800826e:	3304      	adds	r3, #4
 8008270:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68f9      	ldr	r1, [r7, #12]
 8008278:	4618      	mov	r0, r3
 800827a:	f002 fae9 	bl	800a850 <USB_EPStopXfer>
 800827e:	4603      	mov	r3, r0
 8008280:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008282:	7afb      	ldrb	r3, [r7, #11]
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b08a      	sub	sp, #40	@ 0x28
 8008290:	af02      	add	r7, sp, #8
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	4613      	mov	r3, r2
 80082a4:	00db      	lsls	r3, r3, #3
 80082a6:	4413      	add	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	3310      	adds	r3, #16
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	4413      	add	r3, r2
 80082b0:	3304      	adds	r3, #4
 80082b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	695a      	ldr	r2, [r3, #20]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d901      	bls.n	80082c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e06b      	b.n	800839c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	691a      	ldr	r2, [r3, #16]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	695b      	ldr	r3, [r3, #20]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	69fa      	ldr	r2, [r7, #28]
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d902      	bls.n	80082e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	3303      	adds	r3, #3
 80082e4:	089b      	lsrs	r3, r3, #2
 80082e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80082e8:	e02a      	b.n	8008340 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	691a      	ldr	r2, [r3, #16]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	69fa      	ldr	r2, [r7, #28]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d902      	bls.n	8008306 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	3303      	adds	r3, #3
 800830a:	089b      	lsrs	r3, r3, #2
 800830c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	68d9      	ldr	r1, [r3, #12]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	b2da      	uxtb	r2, r3
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800831e:	9300      	str	r3, [sp, #0]
 8008320:	4603      	mov	r3, r0
 8008322:	6978      	ldr	r0, [r7, #20]
 8008324:	f002 fb3e 	bl	800a9a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	68da      	ldr	r2, [r3, #12]
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	441a      	add	r2, r3
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	695a      	ldr	r2, [r3, #20]
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	441a      	add	r2, r3
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	4413      	add	r3, r2
 8008348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800834c:	699b      	ldr	r3, [r3, #24]
 800834e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008350:	69ba      	ldr	r2, [r7, #24]
 8008352:	429a      	cmp	r2, r3
 8008354:	d809      	bhi.n	800836a <PCD_WriteEmptyTxFifo+0xde>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	695a      	ldr	r2, [r3, #20]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800835e:	429a      	cmp	r2, r3
 8008360:	d203      	bcs.n	800836a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1bf      	bne.n	80082ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	691a      	ldr	r2, [r3, #16]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	429a      	cmp	r2, r3
 8008374:	d811      	bhi.n	800839a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	f003 030f 	and.w	r3, r3, #15
 800837c:	2201      	movs	r2, #1
 800837e:	fa02 f303 	lsl.w	r3, r2, r3
 8008382:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800838a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	43db      	mvns	r3, r3
 8008390:	6939      	ldr	r1, [r7, #16]
 8008392:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008396:	4013      	ands	r3, r2
 8008398:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3720      	adds	r7, #32
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	333c      	adds	r3, #60	@ 0x3c
 80083bc:	3304      	adds	r3, #4
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	799b      	ldrb	r3, [r3, #6]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d17b      	bne.n	80084d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	f003 0308 	and.w	r3, r3, #8
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d015      	beq.n	8008410 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	4a61      	ldr	r2, [pc, #388]	@ (800856c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	f240 80b9 	bls.w	8008560 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 80b3 	beq.w	8008560 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	4413      	add	r3, r2
 8008402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008406:	461a      	mov	r2, r3
 8008408:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800840c:	6093      	str	r3, [r2, #8]
 800840e:	e0a7      	b.n	8008560 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	f003 0320 	and.w	r3, r3, #32
 8008416:	2b00      	cmp	r3, #0
 8008418:	d009      	beq.n	800842e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	4413      	add	r3, r2
 8008422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008426:	461a      	mov	r2, r3
 8008428:	2320      	movs	r3, #32
 800842a:	6093      	str	r3, [r2, #8]
 800842c:	e098      	b.n	8008560 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008434:	2b00      	cmp	r3, #0
 8008436:	f040 8093 	bne.w	8008560 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	4a4b      	ldr	r2, [pc, #300]	@ (800856c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d90f      	bls.n	8008462 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00a      	beq.n	8008462 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008458:	461a      	mov	r2, r3
 800845a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800845e:	6093      	str	r3, [r2, #8]
 8008460:	e07e      	b.n	8008560 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	4613      	mov	r3, r2
 8008466:	00db      	lsls	r3, r3, #3
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	4413      	add	r3, r2
 8008474:	3304      	adds	r3, #4
 8008476:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6a1a      	ldr	r2, [r3, #32]
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	0159      	lsls	r1, r3, #5
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	440b      	add	r3, r1
 8008484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800848e:	1ad2      	subs	r2, r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d114      	bne.n	80084c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d109      	bne.n	80084b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6818      	ldr	r0, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80084ac:	461a      	mov	r2, r3
 80084ae:	2101      	movs	r1, #1
 80084b0:	f002 fd0e 	bl	800aed0 <USB_EP0_OutStart>
 80084b4:	e006      	b.n	80084c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	68da      	ldr	r2, [r3, #12]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	441a      	add	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	4619      	mov	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f005 f85e 	bl	800d58c <HAL_PCD_DataOutStageCallback>
 80084d0:	e046      	b.n	8008560 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	4a26      	ldr	r2, [pc, #152]	@ (8008570 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d124      	bne.n	8008524 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00a      	beq.n	80084fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	015a      	lsls	r2, r3, #5
 80084e8:	69bb      	ldr	r3, [r7, #24]
 80084ea:	4413      	add	r3, r2
 80084ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084f0:	461a      	mov	r2, r3
 80084f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084f6:	6093      	str	r3, [r2, #8]
 80084f8:	e032      	b.n	8008560 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	f003 0320 	and.w	r3, r3, #32
 8008500:	2b00      	cmp	r3, #0
 8008502:	d008      	beq.n	8008516 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008510:	461a      	mov	r2, r3
 8008512:	2320      	movs	r3, #32
 8008514:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	b2db      	uxtb	r3, r3
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f005 f835 	bl	800d58c <HAL_PCD_DataOutStageCallback>
 8008522:	e01d      	b.n	8008560 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d114      	bne.n	8008554 <PCD_EP_OutXfrComplete_int+0x1b0>
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	4613      	mov	r3, r2
 8008530:	00db      	lsls	r3, r3, #3
 8008532:	4413      	add	r3, r2
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	440b      	add	r3, r1
 8008538:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d108      	bne.n	8008554 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800854c:	461a      	mov	r2, r3
 800854e:	2100      	movs	r1, #0
 8008550:	f002 fcbe 	bl	800aed0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	b2db      	uxtb	r3, r3
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f005 f816 	bl	800d58c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3720      	adds	r7, #32
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	4f54300a 	.word	0x4f54300a
 8008570:	4f54310a 	.word	0x4f54310a

08008574 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	333c      	adds	r3, #60	@ 0x3c
 800858c:	3304      	adds	r3, #4
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	015a      	lsls	r2, r3, #5
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	4413      	add	r3, r2
 800859a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	4a15      	ldr	r2, [pc, #84]	@ (80085fc <PCD_EP_OutSetupPacket_int+0x88>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d90e      	bls.n	80085c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d009      	beq.n	80085c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c0:	461a      	mov	r2, r3
 80085c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f004 ffcd 	bl	800d568 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	4a0a      	ldr	r2, [pc, #40]	@ (80085fc <PCD_EP_OutSetupPacket_int+0x88>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d90c      	bls.n	80085f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	799b      	ldrb	r3, [r3, #6]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d108      	bne.n	80085f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6818      	ldr	r0, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80085e8:	461a      	mov	r2, r3
 80085ea:	2101      	movs	r1, #1
 80085ec:	f002 fc70 	bl	800aed0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3718      	adds	r7, #24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	4f54300a 	.word	0x4f54300a

08008600 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
 800860c:	4613      	mov	r3, r2
 800860e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008616:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008618:	78fb      	ldrb	r3, [r7, #3]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d107      	bne.n	800862e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800861e:	883b      	ldrh	r3, [r7, #0]
 8008620:	0419      	lsls	r1, r3, #16
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68ba      	ldr	r2, [r7, #8]
 8008628:	430a      	orrs	r2, r1
 800862a:	629a      	str	r2, [r3, #40]	@ 0x28
 800862c:	e028      	b.n	8008680 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008634:	0c1b      	lsrs	r3, r3, #16
 8008636:	68ba      	ldr	r2, [r7, #8]
 8008638:	4413      	add	r3, r2
 800863a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800863c:	2300      	movs	r3, #0
 800863e:	73fb      	strb	r3, [r7, #15]
 8008640:	e00d      	b.n	800865e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	7bfb      	ldrb	r3, [r7, #15]
 8008648:	3340      	adds	r3, #64	@ 0x40
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	0c1b      	lsrs	r3, r3, #16
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	4413      	add	r3, r2
 8008656:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	3301      	adds	r3, #1
 800865c:	73fb      	strb	r3, [r7, #15]
 800865e:	7bfa      	ldrb	r2, [r7, #15]
 8008660:	78fb      	ldrb	r3, [r7, #3]
 8008662:	3b01      	subs	r3, #1
 8008664:	429a      	cmp	r2, r3
 8008666:	d3ec      	bcc.n	8008642 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008668:	883b      	ldrh	r3, [r7, #0]
 800866a:	0418      	lsls	r0, r3, #16
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6819      	ldr	r1, [r3, #0]
 8008670:	78fb      	ldrb	r3, [r7, #3]
 8008672:	3b01      	subs	r3, #1
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	4302      	orrs	r2, r0
 8008678:	3340      	adds	r3, #64	@ 0x40
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	440b      	add	r3, r1
 800867e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800868e:	b480      	push	{r7}
 8008690:	b083      	sub	sp, #12
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	460b      	mov	r3, r1
 8008698:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	887a      	ldrh	r2, [r7, #2]
 80086a0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d101      	bne.n	80086da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e267      	b.n	8008baa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d075      	beq.n	80087d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80086e6:	4b88      	ldr	r3, [pc, #544]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f003 030c 	and.w	r3, r3, #12
 80086ee:	2b04      	cmp	r3, #4
 80086f0:	d00c      	beq.n	800870c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086f2:	4b85      	ldr	r3, [pc, #532]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80086fa:	2b08      	cmp	r3, #8
 80086fc:	d112      	bne.n	8008724 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80086fe:	4b82      	ldr	r3, [pc, #520]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008706:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800870a:	d10b      	bne.n	8008724 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800870c:	4b7e      	ldr	r3, [pc, #504]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d05b      	beq.n	80087d0 <HAL_RCC_OscConfig+0x108>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d157      	bne.n	80087d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e242      	b.n	8008baa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800872c:	d106      	bne.n	800873c <HAL_RCC_OscConfig+0x74>
 800872e:	4b76      	ldr	r3, [pc, #472]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a75      	ldr	r2, [pc, #468]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 8008734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	e01d      	b.n	8008778 <HAL_RCC_OscConfig+0xb0>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008744:	d10c      	bne.n	8008760 <HAL_RCC_OscConfig+0x98>
 8008746:	4b70      	ldr	r3, [pc, #448]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a6f      	ldr	r2, [pc, #444]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 800874c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	4b6d      	ldr	r3, [pc, #436]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a6c      	ldr	r2, [pc, #432]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 8008758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800875c:	6013      	str	r3, [r2, #0]
 800875e:	e00b      	b.n	8008778 <HAL_RCC_OscConfig+0xb0>
 8008760:	4b69      	ldr	r3, [pc, #420]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a68      	ldr	r2, [pc, #416]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 8008766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800876a:	6013      	str	r3, [r2, #0]
 800876c:	4b66      	ldr	r3, [pc, #408]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a65      	ldr	r2, [pc, #404]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 8008772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d013      	beq.n	80087a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008780:	f7fa faf2 	bl	8002d68 <HAL_GetTick>
 8008784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008786:	e008      	b.n	800879a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008788:	f7fa faee 	bl	8002d68 <HAL_GetTick>
 800878c:	4602      	mov	r2, r0
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	2b64      	cmp	r3, #100	@ 0x64
 8008794:	d901      	bls.n	800879a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e207      	b.n	8008baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800879a:	4b5b      	ldr	r3, [pc, #364]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0f0      	beq.n	8008788 <HAL_RCC_OscConfig+0xc0>
 80087a6:	e014      	b.n	80087d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087a8:	f7fa fade 	bl	8002d68 <HAL_GetTick>
 80087ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087ae:	e008      	b.n	80087c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087b0:	f7fa fada 	bl	8002d68 <HAL_GetTick>
 80087b4:	4602      	mov	r2, r0
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	2b64      	cmp	r3, #100	@ 0x64
 80087bc:	d901      	bls.n	80087c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80087be:	2303      	movs	r3, #3
 80087c0:	e1f3      	b.n	8008baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087c2:	4b51      	ldr	r3, [pc, #324]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1f0      	bne.n	80087b0 <HAL_RCC_OscConfig+0xe8>
 80087ce:	e000      	b.n	80087d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f003 0302 	and.w	r3, r3, #2
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d063      	beq.n	80088a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80087de:	4b4a      	ldr	r3, [pc, #296]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f003 030c 	and.w	r3, r3, #12
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00b      	beq.n	8008802 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087ea:	4b47      	ldr	r3, [pc, #284]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80087f2:	2b08      	cmp	r3, #8
 80087f4:	d11c      	bne.n	8008830 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80087f6:	4b44      	ldr	r3, [pc, #272]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d116      	bne.n	8008830 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008802:	4b41      	ldr	r3, [pc, #260]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 0302 	and.w	r3, r3, #2
 800880a:	2b00      	cmp	r3, #0
 800880c:	d005      	beq.n	800881a <HAL_RCC_OscConfig+0x152>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d001      	beq.n	800881a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e1c7      	b.n	8008baa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800881a:	4b3b      	ldr	r3, [pc, #236]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	00db      	lsls	r3, r3, #3
 8008828:	4937      	ldr	r1, [pc, #220]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 800882a:	4313      	orrs	r3, r2
 800882c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800882e:	e03a      	b.n	80088a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d020      	beq.n	800887a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008838:	4b34      	ldr	r3, [pc, #208]	@ (800890c <HAL_RCC_OscConfig+0x244>)
 800883a:	2201      	movs	r2, #1
 800883c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800883e:	f7fa fa93 	bl	8002d68 <HAL_GetTick>
 8008842:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008844:	e008      	b.n	8008858 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008846:	f7fa fa8f 	bl	8002d68 <HAL_GetTick>
 800884a:	4602      	mov	r2, r0
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	2b02      	cmp	r3, #2
 8008852:	d901      	bls.n	8008858 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e1a8      	b.n	8008baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008858:	4b2b      	ldr	r3, [pc, #172]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0302 	and.w	r3, r3, #2
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0f0      	beq.n	8008846 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008864:	4b28      	ldr	r3, [pc, #160]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	00db      	lsls	r3, r3, #3
 8008872:	4925      	ldr	r1, [pc, #148]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 8008874:	4313      	orrs	r3, r2
 8008876:	600b      	str	r3, [r1, #0]
 8008878:	e015      	b.n	80088a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800887a:	4b24      	ldr	r3, [pc, #144]	@ (800890c <HAL_RCC_OscConfig+0x244>)
 800887c:	2200      	movs	r2, #0
 800887e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008880:	f7fa fa72 	bl	8002d68 <HAL_GetTick>
 8008884:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008886:	e008      	b.n	800889a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008888:	f7fa fa6e 	bl	8002d68 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b02      	cmp	r3, #2
 8008894:	d901      	bls.n	800889a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e187      	b.n	8008baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800889a:	4b1b      	ldr	r3, [pc, #108]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0302 	and.w	r3, r3, #2
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1f0      	bne.n	8008888 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0308 	and.w	r3, r3, #8
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d036      	beq.n	8008920 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d016      	beq.n	80088e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088ba:	4b15      	ldr	r3, [pc, #84]	@ (8008910 <HAL_RCC_OscConfig+0x248>)
 80088bc:	2201      	movs	r2, #1
 80088be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088c0:	f7fa fa52 	bl	8002d68 <HAL_GetTick>
 80088c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088c6:	e008      	b.n	80088da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088c8:	f7fa fa4e 	bl	8002d68 <HAL_GetTick>
 80088cc:	4602      	mov	r2, r0
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	1ad3      	subs	r3, r2, r3
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d901      	bls.n	80088da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80088d6:	2303      	movs	r3, #3
 80088d8:	e167      	b.n	8008baa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088da:	4b0b      	ldr	r3, [pc, #44]	@ (8008908 <HAL_RCC_OscConfig+0x240>)
 80088dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088de:	f003 0302 	and.w	r3, r3, #2
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d0f0      	beq.n	80088c8 <HAL_RCC_OscConfig+0x200>
 80088e6:	e01b      	b.n	8008920 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088e8:	4b09      	ldr	r3, [pc, #36]	@ (8008910 <HAL_RCC_OscConfig+0x248>)
 80088ea:	2200      	movs	r2, #0
 80088ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088ee:	f7fa fa3b 	bl	8002d68 <HAL_GetTick>
 80088f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088f4:	e00e      	b.n	8008914 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088f6:	f7fa fa37 	bl	8002d68 <HAL_GetTick>
 80088fa:	4602      	mov	r2, r0
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	1ad3      	subs	r3, r2, r3
 8008900:	2b02      	cmp	r3, #2
 8008902:	d907      	bls.n	8008914 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008904:	2303      	movs	r3, #3
 8008906:	e150      	b.n	8008baa <HAL_RCC_OscConfig+0x4e2>
 8008908:	40023800 	.word	0x40023800
 800890c:	42470000 	.word	0x42470000
 8008910:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008914:	4b88      	ldr	r3, [pc, #544]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 8008916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008918:	f003 0302 	and.w	r3, r3, #2
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1ea      	bne.n	80088f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b00      	cmp	r3, #0
 800892a:	f000 8097 	beq.w	8008a5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800892e:	2300      	movs	r3, #0
 8008930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008932:	4b81      	ldr	r3, [pc, #516]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 8008934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10f      	bne.n	800895e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800893e:	2300      	movs	r3, #0
 8008940:	60bb      	str	r3, [r7, #8]
 8008942:	4b7d      	ldr	r3, [pc, #500]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 8008944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008946:	4a7c      	ldr	r2, [pc, #496]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 8008948:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800894c:	6413      	str	r3, [r2, #64]	@ 0x40
 800894e:	4b7a      	ldr	r3, [pc, #488]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 8008950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008956:	60bb      	str	r3, [r7, #8]
 8008958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800895a:	2301      	movs	r3, #1
 800895c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800895e:	4b77      	ldr	r3, [pc, #476]	@ (8008b3c <HAL_RCC_OscConfig+0x474>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008966:	2b00      	cmp	r3, #0
 8008968:	d118      	bne.n	800899c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800896a:	4b74      	ldr	r3, [pc, #464]	@ (8008b3c <HAL_RCC_OscConfig+0x474>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a73      	ldr	r2, [pc, #460]	@ (8008b3c <HAL_RCC_OscConfig+0x474>)
 8008970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008976:	f7fa f9f7 	bl	8002d68 <HAL_GetTick>
 800897a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800897c:	e008      	b.n	8008990 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800897e:	f7fa f9f3 	bl	8002d68 <HAL_GetTick>
 8008982:	4602      	mov	r2, r0
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	2b02      	cmp	r3, #2
 800898a:	d901      	bls.n	8008990 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800898c:	2303      	movs	r3, #3
 800898e:	e10c      	b.n	8008baa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008990:	4b6a      	ldr	r3, [pc, #424]	@ (8008b3c <HAL_RCC_OscConfig+0x474>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008998:	2b00      	cmp	r3, #0
 800899a:	d0f0      	beq.n	800897e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d106      	bne.n	80089b2 <HAL_RCC_OscConfig+0x2ea>
 80089a4:	4b64      	ldr	r3, [pc, #400]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 80089a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089a8:	4a63      	ldr	r2, [pc, #396]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 80089aa:	f043 0301 	orr.w	r3, r3, #1
 80089ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80089b0:	e01c      	b.n	80089ec <HAL_RCC_OscConfig+0x324>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	2b05      	cmp	r3, #5
 80089b8:	d10c      	bne.n	80089d4 <HAL_RCC_OscConfig+0x30c>
 80089ba:	4b5f      	ldr	r3, [pc, #380]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 80089bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089be:	4a5e      	ldr	r2, [pc, #376]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 80089c0:	f043 0304 	orr.w	r3, r3, #4
 80089c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80089c6:	4b5c      	ldr	r3, [pc, #368]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 80089c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089ca:	4a5b      	ldr	r2, [pc, #364]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 80089cc:	f043 0301 	orr.w	r3, r3, #1
 80089d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80089d2:	e00b      	b.n	80089ec <HAL_RCC_OscConfig+0x324>
 80089d4:	4b58      	ldr	r3, [pc, #352]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 80089d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089d8:	4a57      	ldr	r2, [pc, #348]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 80089da:	f023 0301 	bic.w	r3, r3, #1
 80089de:	6713      	str	r3, [r2, #112]	@ 0x70
 80089e0:	4b55      	ldr	r3, [pc, #340]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 80089e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089e4:	4a54      	ldr	r2, [pc, #336]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 80089e6:	f023 0304 	bic.w	r3, r3, #4
 80089ea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d015      	beq.n	8008a20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089f4:	f7fa f9b8 	bl	8002d68 <HAL_GetTick>
 80089f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80089fa:	e00a      	b.n	8008a12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089fc:	f7fa f9b4 	bl	8002d68 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d901      	bls.n	8008a12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e0cb      	b.n	8008baa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a12:	4b49      	ldr	r3, [pc, #292]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 8008a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a16:	f003 0302 	and.w	r3, r3, #2
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d0ee      	beq.n	80089fc <HAL_RCC_OscConfig+0x334>
 8008a1e:	e014      	b.n	8008a4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a20:	f7fa f9a2 	bl	8002d68 <HAL_GetTick>
 8008a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a26:	e00a      	b.n	8008a3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a28:	f7fa f99e 	bl	8002d68 <HAL_GetTick>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d901      	bls.n	8008a3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e0b5      	b.n	8008baa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 8008a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1ee      	bne.n	8008a28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a4a:	7dfb      	ldrb	r3, [r7, #23]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d105      	bne.n	8008a5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a50:	4b39      	ldr	r3, [pc, #228]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 8008a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a54:	4a38      	ldr	r2, [pc, #224]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 8008a56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f000 80a1 	beq.w	8008ba8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a66:	4b34      	ldr	r3, [pc, #208]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	f003 030c 	and.w	r3, r3, #12
 8008a6e:	2b08      	cmp	r3, #8
 8008a70:	d05c      	beq.n	8008b2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d141      	bne.n	8008afe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a7a:	4b31      	ldr	r3, [pc, #196]	@ (8008b40 <HAL_RCC_OscConfig+0x478>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a80:	f7fa f972 	bl	8002d68 <HAL_GetTick>
 8008a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a86:	e008      	b.n	8008a9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a88:	f7fa f96e 	bl	8002d68 <HAL_GetTick>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d901      	bls.n	8008a9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008a96:	2303      	movs	r3, #3
 8008a98:	e087      	b.n	8008baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a9a:	4b27      	ldr	r3, [pc, #156]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1f0      	bne.n	8008a88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	69da      	ldr	r2, [r3, #28]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	431a      	orrs	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ab4:	019b      	lsls	r3, r3, #6
 8008ab6:	431a      	orrs	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008abc:	085b      	lsrs	r3, r3, #1
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	041b      	lsls	r3, r3, #16
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac8:	061b      	lsls	r3, r3, #24
 8008aca:	491b      	ldr	r1, [pc, #108]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 8008acc:	4313      	orrs	r3, r2
 8008ace:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8008b40 <HAL_RCC_OscConfig+0x478>)
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ad6:	f7fa f947 	bl	8002d68 <HAL_GetTick>
 8008ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008adc:	e008      	b.n	8008af0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ade:	f7fa f943 	bl	8002d68 <HAL_GetTick>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d901      	bls.n	8008af0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008aec:	2303      	movs	r3, #3
 8008aee:	e05c      	b.n	8008baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008af0:	4b11      	ldr	r3, [pc, #68]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d0f0      	beq.n	8008ade <HAL_RCC_OscConfig+0x416>
 8008afc:	e054      	b.n	8008ba8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008afe:	4b10      	ldr	r3, [pc, #64]	@ (8008b40 <HAL_RCC_OscConfig+0x478>)
 8008b00:	2200      	movs	r2, #0
 8008b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b04:	f7fa f930 	bl	8002d68 <HAL_GetTick>
 8008b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b0a:	e008      	b.n	8008b1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b0c:	f7fa f92c 	bl	8002d68 <HAL_GetTick>
 8008b10:	4602      	mov	r2, r0
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d901      	bls.n	8008b1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e045      	b.n	8008baa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b1e:	4b06      	ldr	r3, [pc, #24]	@ (8008b38 <HAL_RCC_OscConfig+0x470>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1f0      	bne.n	8008b0c <HAL_RCC_OscConfig+0x444>
 8008b2a:	e03d      	b.n	8008ba8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d107      	bne.n	8008b44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e038      	b.n	8008baa <HAL_RCC_OscConfig+0x4e2>
 8008b38:	40023800 	.word	0x40023800
 8008b3c:	40007000 	.word	0x40007000
 8008b40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b44:	4b1b      	ldr	r3, [pc, #108]	@ (8008bb4 <HAL_RCC_OscConfig+0x4ec>)
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d028      	beq.n	8008ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d121      	bne.n	8008ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d11a      	bne.n	8008ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008b74:	4013      	ands	r3, r2
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008b7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d111      	bne.n	8008ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b8a:	085b      	lsrs	r3, r3, #1
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d107      	bne.n	8008ba4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d001      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e000      	b.n	8008baa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3718      	adds	r7, #24
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	40023800 	.word	0x40023800

08008bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d101      	bne.n	8008bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e0cc      	b.n	8008d66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008bcc:	4b68      	ldr	r3, [pc, #416]	@ (8008d70 <HAL_RCC_ClockConfig+0x1b8>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0307 	and.w	r3, r3, #7
 8008bd4:	683a      	ldr	r2, [r7, #0]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d90c      	bls.n	8008bf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bda:	4b65      	ldr	r3, [pc, #404]	@ (8008d70 <HAL_RCC_ClockConfig+0x1b8>)
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	b2d2      	uxtb	r2, r2
 8008be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008be2:	4b63      	ldr	r3, [pc, #396]	@ (8008d70 <HAL_RCC_ClockConfig+0x1b8>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 0307 	and.w	r3, r3, #7
 8008bea:	683a      	ldr	r2, [r7, #0]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d001      	beq.n	8008bf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e0b8      	b.n	8008d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f003 0302 	and.w	r3, r3, #2
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d020      	beq.n	8008c42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0304 	and.w	r3, r3, #4
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d005      	beq.n	8008c18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c0c:	4b59      	ldr	r3, [pc, #356]	@ (8008d74 <HAL_RCC_ClockConfig+0x1bc>)
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	4a58      	ldr	r2, [pc, #352]	@ (8008d74 <HAL_RCC_ClockConfig+0x1bc>)
 8008c12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008c16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0308 	and.w	r3, r3, #8
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d005      	beq.n	8008c30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c24:	4b53      	ldr	r3, [pc, #332]	@ (8008d74 <HAL_RCC_ClockConfig+0x1bc>)
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	4a52      	ldr	r2, [pc, #328]	@ (8008d74 <HAL_RCC_ClockConfig+0x1bc>)
 8008c2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008c2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c30:	4b50      	ldr	r3, [pc, #320]	@ (8008d74 <HAL_RCC_ClockConfig+0x1bc>)
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	494d      	ldr	r1, [pc, #308]	@ (8008d74 <HAL_RCC_ClockConfig+0x1bc>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0301 	and.w	r3, r3, #1
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d044      	beq.n	8008cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d107      	bne.n	8008c66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c56:	4b47      	ldr	r3, [pc, #284]	@ (8008d74 <HAL_RCC_ClockConfig+0x1bc>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d119      	bne.n	8008c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e07f      	b.n	8008d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d003      	beq.n	8008c76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c72:	2b03      	cmp	r3, #3
 8008c74:	d107      	bne.n	8008c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c76:	4b3f      	ldr	r3, [pc, #252]	@ (8008d74 <HAL_RCC_ClockConfig+0x1bc>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d109      	bne.n	8008c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e06f      	b.n	8008d66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c86:	4b3b      	ldr	r3, [pc, #236]	@ (8008d74 <HAL_RCC_ClockConfig+0x1bc>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f003 0302 	and.w	r3, r3, #2
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e067      	b.n	8008d66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c96:	4b37      	ldr	r3, [pc, #220]	@ (8008d74 <HAL_RCC_ClockConfig+0x1bc>)
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f023 0203 	bic.w	r2, r3, #3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	4934      	ldr	r1, [pc, #208]	@ (8008d74 <HAL_RCC_ClockConfig+0x1bc>)
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ca8:	f7fa f85e 	bl	8002d68 <HAL_GetTick>
 8008cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cae:	e00a      	b.n	8008cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cb0:	f7fa f85a 	bl	8002d68 <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d901      	bls.n	8008cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	e04f      	b.n	8008d66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cc6:	4b2b      	ldr	r3, [pc, #172]	@ (8008d74 <HAL_RCC_ClockConfig+0x1bc>)
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	f003 020c 	and.w	r2, r3, #12
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d1eb      	bne.n	8008cb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008cd8:	4b25      	ldr	r3, [pc, #148]	@ (8008d70 <HAL_RCC_ClockConfig+0x1b8>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0307 	and.w	r3, r3, #7
 8008ce0:	683a      	ldr	r2, [r7, #0]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d20c      	bcs.n	8008d00 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ce6:	4b22      	ldr	r3, [pc, #136]	@ (8008d70 <HAL_RCC_ClockConfig+0x1b8>)
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	b2d2      	uxtb	r2, r2
 8008cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cee:	4b20      	ldr	r3, [pc, #128]	@ (8008d70 <HAL_RCC_ClockConfig+0x1b8>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 0307 	and.w	r3, r3, #7
 8008cf6:	683a      	ldr	r2, [r7, #0]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d001      	beq.n	8008d00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e032      	b.n	8008d66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0304 	and.w	r3, r3, #4
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d008      	beq.n	8008d1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d0c:	4b19      	ldr	r3, [pc, #100]	@ (8008d74 <HAL_RCC_ClockConfig+0x1bc>)
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	4916      	ldr	r1, [pc, #88]	@ (8008d74 <HAL_RCC_ClockConfig+0x1bc>)
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0308 	and.w	r3, r3, #8
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d009      	beq.n	8008d3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d2a:	4b12      	ldr	r3, [pc, #72]	@ (8008d74 <HAL_RCC_ClockConfig+0x1bc>)
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	00db      	lsls	r3, r3, #3
 8008d38:	490e      	ldr	r1, [pc, #56]	@ (8008d74 <HAL_RCC_ClockConfig+0x1bc>)
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008d3e:	f000 f821 	bl	8008d84 <HAL_RCC_GetSysClockFreq>
 8008d42:	4602      	mov	r2, r0
 8008d44:	4b0b      	ldr	r3, [pc, #44]	@ (8008d74 <HAL_RCC_ClockConfig+0x1bc>)
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	091b      	lsrs	r3, r3, #4
 8008d4a:	f003 030f 	and.w	r3, r3, #15
 8008d4e:	490a      	ldr	r1, [pc, #40]	@ (8008d78 <HAL_RCC_ClockConfig+0x1c0>)
 8008d50:	5ccb      	ldrb	r3, [r1, r3]
 8008d52:	fa22 f303 	lsr.w	r3, r2, r3
 8008d56:	4a09      	ldr	r2, [pc, #36]	@ (8008d7c <HAL_RCC_ClockConfig+0x1c4>)
 8008d58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008d5a:	4b09      	ldr	r3, [pc, #36]	@ (8008d80 <HAL_RCC_ClockConfig+0x1c8>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7f9 ffbe 	bl	8002ce0 <HAL_InitTick>

  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	40023c00 	.word	0x40023c00
 8008d74:	40023800 	.word	0x40023800
 8008d78:	0800db9c 	.word	0x0800db9c
 8008d7c:	2000002c 	.word	0x2000002c
 8008d80:	20000030 	.word	0x20000030

08008d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d88:	b090      	sub	sp, #64	@ 0x40
 8008d8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008d90:	2300      	movs	r3, #0
 8008d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008d94:	2300      	movs	r3, #0
 8008d96:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d9c:	4b59      	ldr	r3, [pc, #356]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	f003 030c 	and.w	r3, r3, #12
 8008da4:	2b08      	cmp	r3, #8
 8008da6:	d00d      	beq.n	8008dc4 <HAL_RCC_GetSysClockFreq+0x40>
 8008da8:	2b08      	cmp	r3, #8
 8008daa:	f200 80a1 	bhi.w	8008ef0 <HAL_RCC_GetSysClockFreq+0x16c>
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d002      	beq.n	8008db8 <HAL_RCC_GetSysClockFreq+0x34>
 8008db2:	2b04      	cmp	r3, #4
 8008db4:	d003      	beq.n	8008dbe <HAL_RCC_GetSysClockFreq+0x3a>
 8008db6:	e09b      	b.n	8008ef0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008db8:	4b53      	ldr	r3, [pc, #332]	@ (8008f08 <HAL_RCC_GetSysClockFreq+0x184>)
 8008dba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008dbc:	e09b      	b.n	8008ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008dbe:	4b53      	ldr	r3, [pc, #332]	@ (8008f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8008dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008dc2:	e098      	b.n	8008ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008dc4:	4b4f      	ldr	r3, [pc, #316]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008dcc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008dce:	4b4d      	ldr	r3, [pc, #308]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d028      	beq.n	8008e2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008dda:	4b4a      	ldr	r3, [pc, #296]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	099b      	lsrs	r3, r3, #6
 8008de0:	2200      	movs	r2, #0
 8008de2:	623b      	str	r3, [r7, #32]
 8008de4:	627a      	str	r2, [r7, #36]	@ 0x24
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008dec:	2100      	movs	r1, #0
 8008dee:	4b47      	ldr	r3, [pc, #284]	@ (8008f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8008df0:	fb03 f201 	mul.w	r2, r3, r1
 8008df4:	2300      	movs	r3, #0
 8008df6:	fb00 f303 	mul.w	r3, r0, r3
 8008dfa:	4413      	add	r3, r2
 8008dfc:	4a43      	ldr	r2, [pc, #268]	@ (8008f0c <HAL_RCC_GetSysClockFreq+0x188>)
 8008dfe:	fba0 1202 	umull	r1, r2, r0, r2
 8008e02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e04:	460a      	mov	r2, r1
 8008e06:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008e08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e0a:	4413      	add	r3, r2
 8008e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e10:	2200      	movs	r2, #0
 8008e12:	61bb      	str	r3, [r7, #24]
 8008e14:	61fa      	str	r2, [r7, #28]
 8008e16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008e1e:	f7f7 fdd1 	bl	80009c4 <__aeabi_uldivmod>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4613      	mov	r3, r2
 8008e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e2a:	e053      	b.n	8008ed4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e2c:	4b35      	ldr	r3, [pc, #212]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	099b      	lsrs	r3, r3, #6
 8008e32:	2200      	movs	r2, #0
 8008e34:	613b      	str	r3, [r7, #16]
 8008e36:	617a      	str	r2, [r7, #20]
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008e3e:	f04f 0b00 	mov.w	fp, #0
 8008e42:	4652      	mov	r2, sl
 8008e44:	465b      	mov	r3, fp
 8008e46:	f04f 0000 	mov.w	r0, #0
 8008e4a:	f04f 0100 	mov.w	r1, #0
 8008e4e:	0159      	lsls	r1, r3, #5
 8008e50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e54:	0150      	lsls	r0, r2, #5
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	ebb2 080a 	subs.w	r8, r2, sl
 8008e5e:	eb63 090b 	sbc.w	r9, r3, fp
 8008e62:	f04f 0200 	mov.w	r2, #0
 8008e66:	f04f 0300 	mov.w	r3, #0
 8008e6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008e6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008e72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008e76:	ebb2 0408 	subs.w	r4, r2, r8
 8008e7a:	eb63 0509 	sbc.w	r5, r3, r9
 8008e7e:	f04f 0200 	mov.w	r2, #0
 8008e82:	f04f 0300 	mov.w	r3, #0
 8008e86:	00eb      	lsls	r3, r5, #3
 8008e88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e8c:	00e2      	lsls	r2, r4, #3
 8008e8e:	4614      	mov	r4, r2
 8008e90:	461d      	mov	r5, r3
 8008e92:	eb14 030a 	adds.w	r3, r4, sl
 8008e96:	603b      	str	r3, [r7, #0]
 8008e98:	eb45 030b 	adc.w	r3, r5, fp
 8008e9c:	607b      	str	r3, [r7, #4]
 8008e9e:	f04f 0200 	mov.w	r2, #0
 8008ea2:	f04f 0300 	mov.w	r3, #0
 8008ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008eaa:	4629      	mov	r1, r5
 8008eac:	028b      	lsls	r3, r1, #10
 8008eae:	4621      	mov	r1, r4
 8008eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	028a      	lsls	r2, r1, #10
 8008eb8:	4610      	mov	r0, r2
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	60bb      	str	r3, [r7, #8]
 8008ec2:	60fa      	str	r2, [r7, #12]
 8008ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ec8:	f7f7 fd7c 	bl	80009c4 <__aeabi_uldivmod>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8008f04 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	0c1b      	lsrs	r3, r3, #16
 8008eda:	f003 0303 	and.w	r3, r3, #3
 8008ede:	3301      	adds	r3, #1
 8008ee0:	005b      	lsls	r3, r3, #1
 8008ee2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008ee4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008eee:	e002      	b.n	8008ef6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ef0:	4b05      	ldr	r3, [pc, #20]	@ (8008f08 <HAL_RCC_GetSysClockFreq+0x184>)
 8008ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3740      	adds	r7, #64	@ 0x40
 8008efc:	46bd      	mov	sp, r7
 8008efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f02:	bf00      	nop
 8008f04:	40023800 	.word	0x40023800
 8008f08:	00f42400 	.word	0x00f42400
 8008f0c:	017d7840 	.word	0x017d7840

08008f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f10:	b480      	push	{r7}
 8008f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f14:	4b03      	ldr	r3, [pc, #12]	@ (8008f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f16:	681b      	ldr	r3, [r3, #0]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	2000002c 	.word	0x2000002c

08008f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008f2c:	f7ff fff0 	bl	8008f10 <HAL_RCC_GetHCLKFreq>
 8008f30:	4602      	mov	r2, r0
 8008f32:	4b05      	ldr	r3, [pc, #20]	@ (8008f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	0a9b      	lsrs	r3, r3, #10
 8008f38:	f003 0307 	and.w	r3, r3, #7
 8008f3c:	4903      	ldr	r1, [pc, #12]	@ (8008f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f3e:	5ccb      	ldrb	r3, [r1, r3]
 8008f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	40023800 	.word	0x40023800
 8008f4c:	0800dbac 	.word	0x0800dbac

08008f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e041      	b.n	8008fe6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d106      	bne.n	8008f7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7f9 fad0 	bl	800251c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2202      	movs	r2, #2
 8008f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	4610      	mov	r0, r2
 8008f90:	f000 fab2 	bl	80094f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
	...

08008ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b01      	cmp	r3, #1
 8009002:	d001      	beq.n	8009008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e044      	b.n	8009092 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2202      	movs	r2, #2
 800900c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68da      	ldr	r2, [r3, #12]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f042 0201 	orr.w	r2, r2, #1
 800901e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a1e      	ldr	r2, [pc, #120]	@ (80090a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d018      	beq.n	800905c <HAL_TIM_Base_Start_IT+0x6c>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009032:	d013      	beq.n	800905c <HAL_TIM_Base_Start_IT+0x6c>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a1a      	ldr	r2, [pc, #104]	@ (80090a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d00e      	beq.n	800905c <HAL_TIM_Base_Start_IT+0x6c>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a19      	ldr	r2, [pc, #100]	@ (80090a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d009      	beq.n	800905c <HAL_TIM_Base_Start_IT+0x6c>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a17      	ldr	r2, [pc, #92]	@ (80090ac <HAL_TIM_Base_Start_IT+0xbc>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d004      	beq.n	800905c <HAL_TIM_Base_Start_IT+0x6c>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a16      	ldr	r2, [pc, #88]	@ (80090b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d111      	bne.n	8009080 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	f003 0307 	and.w	r3, r3, #7
 8009066:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2b06      	cmp	r3, #6
 800906c:	d010      	beq.n	8009090 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	681a      	ldr	r2, [r3, #0]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f042 0201 	orr.w	r2, r2, #1
 800907c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800907e:	e007      	b.n	8009090 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f042 0201 	orr.w	r2, r2, #1
 800908e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	40010000 	.word	0x40010000
 80090a4:	40000400 	.word	0x40000400
 80090a8:	40000800 	.word	0x40000800
 80090ac:	40000c00 	.word	0x40000c00
 80090b0:	40014000 	.word	0x40014000

080090b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68db      	ldr	r3, [r3, #12]
 80090c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	f003 0302 	and.w	r3, r3, #2
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d020      	beq.n	8009118 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f003 0302 	and.w	r3, r3, #2
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d01b      	beq.n	8009118 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f06f 0202 	mvn.w	r2, #2
 80090e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2201      	movs	r2, #1
 80090ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	f003 0303 	and.w	r3, r3, #3
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d003      	beq.n	8009106 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f9db 	bl	80094ba <HAL_TIM_IC_CaptureCallback>
 8009104:	e005      	b.n	8009112 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f9cd 	bl	80094a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f9de 	bl	80094ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	f003 0304 	and.w	r3, r3, #4
 800911e:	2b00      	cmp	r3, #0
 8009120:	d020      	beq.n	8009164 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f003 0304 	and.w	r3, r3, #4
 8009128:	2b00      	cmp	r3, #0
 800912a:	d01b      	beq.n	8009164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f06f 0204 	mvn.w	r2, #4
 8009134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2202      	movs	r2, #2
 800913a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	699b      	ldr	r3, [r3, #24]
 8009142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009146:	2b00      	cmp	r3, #0
 8009148:	d003      	beq.n	8009152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f9b5 	bl	80094ba <HAL_TIM_IC_CaptureCallback>
 8009150:	e005      	b.n	800915e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 f9a7 	bl	80094a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 f9b8 	bl	80094ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f003 0308 	and.w	r3, r3, #8
 800916a:	2b00      	cmp	r3, #0
 800916c:	d020      	beq.n	80091b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f003 0308 	and.w	r3, r3, #8
 8009174:	2b00      	cmp	r3, #0
 8009176:	d01b      	beq.n	80091b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f06f 0208 	mvn.w	r2, #8
 8009180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2204      	movs	r2, #4
 8009186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	f003 0303 	and.w	r3, r3, #3
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f98f 	bl	80094ba <HAL_TIM_IC_CaptureCallback>
 800919c:	e005      	b.n	80091aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f981 	bl	80094a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f992 	bl	80094ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	f003 0310 	and.w	r3, r3, #16
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d020      	beq.n	80091fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f003 0310 	and.w	r3, r3, #16
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d01b      	beq.n	80091fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f06f 0210 	mvn.w	r2, #16
 80091cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2208      	movs	r2, #8
 80091d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	69db      	ldr	r3, [r3, #28]
 80091da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d003      	beq.n	80091ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f969 	bl	80094ba <HAL_TIM_IC_CaptureCallback>
 80091e8:	e005      	b.n	80091f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 f95b 	bl	80094a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f96c 	bl	80094ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	2b00      	cmp	r3, #0
 8009204:	d00c      	beq.n	8009220 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	2b00      	cmp	r3, #0
 800920e:	d007      	beq.n	8009220 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f06f 0201 	mvn.w	r2, #1
 8009218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7f7 fda8 	bl	8000d70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00c      	beq.n	8009244 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009230:	2b00      	cmp	r3, #0
 8009232:	d007      	beq.n	8009244 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800923c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fb84 	bl	800994c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00c      	beq.n	8009268 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009254:	2b00      	cmp	r3, #0
 8009256:	d007      	beq.n	8009268 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 f93d 	bl	80094e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	f003 0320 	and.w	r3, r3, #32
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00c      	beq.n	800928c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f003 0320 	and.w	r3, r3, #32
 8009278:	2b00      	cmp	r3, #0
 800927a:	d007      	beq.n	800928c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f06f 0220 	mvn.w	r2, #32
 8009284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fb56 	bl	8009938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800928c:	bf00      	nop
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800929e:	2300      	movs	r3, #0
 80092a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d101      	bne.n	80092b0 <HAL_TIM_ConfigClockSource+0x1c>
 80092ac:	2302      	movs	r3, #2
 80092ae:	e0b4      	b.n	800941a <HAL_TIM_ConfigClockSource+0x186>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2202      	movs	r2, #2
 80092bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80092ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80092d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092e8:	d03e      	beq.n	8009368 <HAL_TIM_ConfigClockSource+0xd4>
 80092ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092ee:	f200 8087 	bhi.w	8009400 <HAL_TIM_ConfigClockSource+0x16c>
 80092f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092f6:	f000 8086 	beq.w	8009406 <HAL_TIM_ConfigClockSource+0x172>
 80092fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092fe:	d87f      	bhi.n	8009400 <HAL_TIM_ConfigClockSource+0x16c>
 8009300:	2b70      	cmp	r3, #112	@ 0x70
 8009302:	d01a      	beq.n	800933a <HAL_TIM_ConfigClockSource+0xa6>
 8009304:	2b70      	cmp	r3, #112	@ 0x70
 8009306:	d87b      	bhi.n	8009400 <HAL_TIM_ConfigClockSource+0x16c>
 8009308:	2b60      	cmp	r3, #96	@ 0x60
 800930a:	d050      	beq.n	80093ae <HAL_TIM_ConfigClockSource+0x11a>
 800930c:	2b60      	cmp	r3, #96	@ 0x60
 800930e:	d877      	bhi.n	8009400 <HAL_TIM_ConfigClockSource+0x16c>
 8009310:	2b50      	cmp	r3, #80	@ 0x50
 8009312:	d03c      	beq.n	800938e <HAL_TIM_ConfigClockSource+0xfa>
 8009314:	2b50      	cmp	r3, #80	@ 0x50
 8009316:	d873      	bhi.n	8009400 <HAL_TIM_ConfigClockSource+0x16c>
 8009318:	2b40      	cmp	r3, #64	@ 0x40
 800931a:	d058      	beq.n	80093ce <HAL_TIM_ConfigClockSource+0x13a>
 800931c:	2b40      	cmp	r3, #64	@ 0x40
 800931e:	d86f      	bhi.n	8009400 <HAL_TIM_ConfigClockSource+0x16c>
 8009320:	2b30      	cmp	r3, #48	@ 0x30
 8009322:	d064      	beq.n	80093ee <HAL_TIM_ConfigClockSource+0x15a>
 8009324:	2b30      	cmp	r3, #48	@ 0x30
 8009326:	d86b      	bhi.n	8009400 <HAL_TIM_ConfigClockSource+0x16c>
 8009328:	2b20      	cmp	r3, #32
 800932a:	d060      	beq.n	80093ee <HAL_TIM_ConfigClockSource+0x15a>
 800932c:	2b20      	cmp	r3, #32
 800932e:	d867      	bhi.n	8009400 <HAL_TIM_ConfigClockSource+0x16c>
 8009330:	2b00      	cmp	r3, #0
 8009332:	d05c      	beq.n	80093ee <HAL_TIM_ConfigClockSource+0x15a>
 8009334:	2b10      	cmp	r3, #16
 8009336:	d05a      	beq.n	80093ee <HAL_TIM_ConfigClockSource+0x15a>
 8009338:	e062      	b.n	8009400 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800934a:	f000 fa66 	bl	800981a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800935c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	609a      	str	r2, [r3, #8]
      break;
 8009366:	e04f      	b.n	8009408 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009378:	f000 fa4f 	bl	800981a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	689a      	ldr	r2, [r3, #8]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800938a:	609a      	str	r2, [r3, #8]
      break;
 800938c:	e03c      	b.n	8009408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800939a:	461a      	mov	r2, r3
 800939c:	f000 f9c3 	bl	8009726 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2150      	movs	r1, #80	@ 0x50
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 fa1c 	bl	80097e4 <TIM_ITRx_SetConfig>
      break;
 80093ac:	e02c      	b.n	8009408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093ba:	461a      	mov	r2, r3
 80093bc:	f000 f9e2 	bl	8009784 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2160      	movs	r1, #96	@ 0x60
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 fa0c 	bl	80097e4 <TIM_ITRx_SetConfig>
      break;
 80093cc:	e01c      	b.n	8009408 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093da:	461a      	mov	r2, r3
 80093dc:	f000 f9a3 	bl	8009726 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2140      	movs	r1, #64	@ 0x40
 80093e6:	4618      	mov	r0, r3
 80093e8:	f000 f9fc 	bl	80097e4 <TIM_ITRx_SetConfig>
      break;
 80093ec:	e00c      	b.n	8009408 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4619      	mov	r1, r3
 80093f8:	4610      	mov	r0, r2
 80093fa:	f000 f9f3 	bl	80097e4 <TIM_ITRx_SetConfig>
      break;
 80093fe:	e003      	b.n	8009408 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	73fb      	strb	r3, [r7, #15]
      break;
 8009404:	e000      	b.n	8009408 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009418:	7bfb      	ldrb	r3, [r7, #15]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b082      	sub	sp, #8
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009432:	2b01      	cmp	r3, #1
 8009434:	d101      	bne.n	800943a <HAL_TIM_SlaveConfigSynchro+0x18>
 8009436:	2302      	movs	r3, #2
 8009438:	e031      	b.n	800949e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2201      	movs	r2, #1
 800943e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2202      	movs	r2, #2
 8009446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f8d9 	bl	8009604 <TIM_SlaveTimer_SetConfig>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d009      	beq.n	800946c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2200      	movs	r2, #0
 8009464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e018      	b.n	800949e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68da      	ldr	r2, [r3, #12]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800947a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68da      	ldr	r2, [r3, #12]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800948a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3708      	adds	r7, #8
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b083      	sub	sp, #12
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094ae:	bf00      	nop
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b083      	sub	sp, #12
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094c2:	bf00      	nop
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094ce:	b480      	push	{r7}
 80094d0:	b083      	sub	sp, #12
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094d6:	bf00      	nop
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094e2:	b480      	push	{r7}
 80094e4:	b083      	sub	sp, #12
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094ea:	bf00      	nop
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
	...

080094f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a37      	ldr	r2, [pc, #220]	@ (80095e8 <TIM_Base_SetConfig+0xf0>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d00f      	beq.n	8009530 <TIM_Base_SetConfig+0x38>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009516:	d00b      	beq.n	8009530 <TIM_Base_SetConfig+0x38>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a34      	ldr	r2, [pc, #208]	@ (80095ec <TIM_Base_SetConfig+0xf4>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d007      	beq.n	8009530 <TIM_Base_SetConfig+0x38>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a33      	ldr	r2, [pc, #204]	@ (80095f0 <TIM_Base_SetConfig+0xf8>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d003      	beq.n	8009530 <TIM_Base_SetConfig+0x38>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a32      	ldr	r2, [pc, #200]	@ (80095f4 <TIM_Base_SetConfig+0xfc>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d108      	bne.n	8009542 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	4313      	orrs	r3, r2
 8009540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a28      	ldr	r2, [pc, #160]	@ (80095e8 <TIM_Base_SetConfig+0xf0>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d01b      	beq.n	8009582 <TIM_Base_SetConfig+0x8a>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009550:	d017      	beq.n	8009582 <TIM_Base_SetConfig+0x8a>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4a25      	ldr	r2, [pc, #148]	@ (80095ec <TIM_Base_SetConfig+0xf4>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d013      	beq.n	8009582 <TIM_Base_SetConfig+0x8a>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a24      	ldr	r2, [pc, #144]	@ (80095f0 <TIM_Base_SetConfig+0xf8>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d00f      	beq.n	8009582 <TIM_Base_SetConfig+0x8a>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a23      	ldr	r2, [pc, #140]	@ (80095f4 <TIM_Base_SetConfig+0xfc>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d00b      	beq.n	8009582 <TIM_Base_SetConfig+0x8a>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a22      	ldr	r2, [pc, #136]	@ (80095f8 <TIM_Base_SetConfig+0x100>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d007      	beq.n	8009582 <TIM_Base_SetConfig+0x8a>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a21      	ldr	r2, [pc, #132]	@ (80095fc <TIM_Base_SetConfig+0x104>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d003      	beq.n	8009582 <TIM_Base_SetConfig+0x8a>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a20      	ldr	r2, [pc, #128]	@ (8009600 <TIM_Base_SetConfig+0x108>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d108      	bne.n	8009594 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009588:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	68fa      	ldr	r2, [r7, #12]
 8009590:	4313      	orrs	r3, r2
 8009592:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	4313      	orrs	r3, r2
 80095a0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	689a      	ldr	r2, [r3, #8]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a0c      	ldr	r2, [pc, #48]	@ (80095e8 <TIM_Base_SetConfig+0xf0>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d103      	bne.n	80095c2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	691a      	ldr	r2, [r3, #16]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f043 0204 	orr.w	r2, r3, #4
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2201      	movs	r2, #1
 80095d2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	601a      	str	r2, [r3, #0]
}
 80095da:	bf00      	nop
 80095dc:	3714      	adds	r7, #20
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	40010000 	.word	0x40010000
 80095ec:	40000400 	.word	0x40000400
 80095f0:	40000800 	.word	0x40000800
 80095f4:	40000c00 	.word	0x40000c00
 80095f8:	40014000 	.word	0x40014000
 80095fc:	40014400 	.word	0x40014400
 8009600:	40014800 	.word	0x40014800

08009604 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009620:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	693a      	ldr	r2, [r7, #16]
 8009628:	4313      	orrs	r3, r2
 800962a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	f023 0307 	bic.w	r3, r3, #7
 8009632:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	693a      	ldr	r2, [r7, #16]
 800963a:	4313      	orrs	r3, r2
 800963c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	2b70      	cmp	r3, #112	@ 0x70
 800964c:	d01a      	beq.n	8009684 <TIM_SlaveTimer_SetConfig+0x80>
 800964e:	2b70      	cmp	r3, #112	@ 0x70
 8009650:	d860      	bhi.n	8009714 <TIM_SlaveTimer_SetConfig+0x110>
 8009652:	2b60      	cmp	r3, #96	@ 0x60
 8009654:	d054      	beq.n	8009700 <TIM_SlaveTimer_SetConfig+0xfc>
 8009656:	2b60      	cmp	r3, #96	@ 0x60
 8009658:	d85c      	bhi.n	8009714 <TIM_SlaveTimer_SetConfig+0x110>
 800965a:	2b50      	cmp	r3, #80	@ 0x50
 800965c:	d046      	beq.n	80096ec <TIM_SlaveTimer_SetConfig+0xe8>
 800965e:	2b50      	cmp	r3, #80	@ 0x50
 8009660:	d858      	bhi.n	8009714 <TIM_SlaveTimer_SetConfig+0x110>
 8009662:	2b40      	cmp	r3, #64	@ 0x40
 8009664:	d019      	beq.n	800969a <TIM_SlaveTimer_SetConfig+0x96>
 8009666:	2b40      	cmp	r3, #64	@ 0x40
 8009668:	d854      	bhi.n	8009714 <TIM_SlaveTimer_SetConfig+0x110>
 800966a:	2b30      	cmp	r3, #48	@ 0x30
 800966c:	d055      	beq.n	800971a <TIM_SlaveTimer_SetConfig+0x116>
 800966e:	2b30      	cmp	r3, #48	@ 0x30
 8009670:	d850      	bhi.n	8009714 <TIM_SlaveTimer_SetConfig+0x110>
 8009672:	2b20      	cmp	r3, #32
 8009674:	d051      	beq.n	800971a <TIM_SlaveTimer_SetConfig+0x116>
 8009676:	2b20      	cmp	r3, #32
 8009678:	d84c      	bhi.n	8009714 <TIM_SlaveTimer_SetConfig+0x110>
 800967a:	2b00      	cmp	r3, #0
 800967c:	d04d      	beq.n	800971a <TIM_SlaveTimer_SetConfig+0x116>
 800967e:	2b10      	cmp	r3, #16
 8009680:	d04b      	beq.n	800971a <TIM_SlaveTimer_SetConfig+0x116>
 8009682:	e047      	b.n	8009714 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009694:	f000 f8c1 	bl	800981a <TIM_ETR_SetConfig>
      break;
 8009698:	e040      	b.n	800971c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b05      	cmp	r3, #5
 80096a0:	d101      	bne.n	80096a6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e03b      	b.n	800971e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6a1b      	ldr	r3, [r3, #32]
 80096ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	6a1a      	ldr	r2, [r3, #32]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f022 0201 	bic.w	r2, r2, #1
 80096bc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096cc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	011b      	lsls	r3, r3, #4
 80096d4:	68ba      	ldr	r2, [r7, #8]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	621a      	str	r2, [r3, #32]
      break;
 80096ea:	e017      	b.n	800971c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096f8:	461a      	mov	r2, r3
 80096fa:	f000 f814 	bl	8009726 <TIM_TI1_ConfigInputStage>
      break;
 80096fe:	e00d      	b.n	800971c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800970c:	461a      	mov	r2, r3
 800970e:	f000 f839 	bl	8009784 <TIM_TI2_ConfigInputStage>
      break;
 8009712:	e003      	b.n	800971c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	75fb      	strb	r3, [r7, #23]
      break;
 8009718:	e000      	b.n	800971c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800971a:	bf00      	nop
  }

  return status;
 800971c:	7dfb      	ldrb	r3, [r7, #23]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3718      	adds	r7, #24
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}

08009726 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009726:	b480      	push	{r7}
 8009728:	b087      	sub	sp, #28
 800972a:	af00      	add	r7, sp, #0
 800972c:	60f8      	str	r0, [r7, #12]
 800972e:	60b9      	str	r1, [r7, #8]
 8009730:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6a1b      	ldr	r3, [r3, #32]
 800973c:	f023 0201 	bic.w	r2, r3, #1
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	699b      	ldr	r3, [r3, #24]
 8009748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009750:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	011b      	lsls	r3, r3, #4
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	4313      	orrs	r3, r2
 800975a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	f023 030a 	bic.w	r3, r3, #10
 8009762:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	4313      	orrs	r3, r2
 800976a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	621a      	str	r2, [r3, #32]
}
 8009778:	bf00      	nop
 800977a:	371c      	adds	r7, #28
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009784:	b480      	push	{r7}
 8009786:	b087      	sub	sp, #28
 8009788:	af00      	add	r7, sp, #0
 800978a:	60f8      	str	r0, [r7, #12]
 800978c:	60b9      	str	r1, [r7, #8]
 800978e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6a1b      	ldr	r3, [r3, #32]
 8009794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	f023 0210 	bic.w	r2, r3, #16
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80097ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	031b      	lsls	r3, r3, #12
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80097c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	011b      	lsls	r3, r3, #4
 80097c6:	697a      	ldr	r2, [r7, #20]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	621a      	str	r2, [r3, #32]
}
 80097d8:	bf00      	nop
 80097da:	371c      	adds	r7, #28
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	4313      	orrs	r3, r2
 8009802:	f043 0307 	orr.w	r3, r3, #7
 8009806:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	68fa      	ldr	r2, [r7, #12]
 800980c:	609a      	str	r2, [r3, #8]
}
 800980e:	bf00      	nop
 8009810:	3714      	adds	r7, #20
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr

0800981a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800981a:	b480      	push	{r7}
 800981c:	b087      	sub	sp, #28
 800981e:	af00      	add	r7, sp, #0
 8009820:	60f8      	str	r0, [r7, #12]
 8009822:	60b9      	str	r1, [r7, #8]
 8009824:	607a      	str	r2, [r7, #4]
 8009826:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009834:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	021a      	lsls	r2, r3, #8
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	431a      	orrs	r2, r3
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	4313      	orrs	r3, r2
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	4313      	orrs	r3, r2
 8009846:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	609a      	str	r2, [r3, #8]
}
 800984e:	bf00      	nop
 8009850:	371c      	adds	r7, #28
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
	...

0800985c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800985c:	b480      	push	{r7}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800986c:	2b01      	cmp	r3, #1
 800986e:	d101      	bne.n	8009874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009870:	2302      	movs	r3, #2
 8009872:	e050      	b.n	8009916 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2202      	movs	r2, #2
 8009880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800989a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a1c      	ldr	r2, [pc, #112]	@ (8009924 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d018      	beq.n	80098ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098c0:	d013      	beq.n	80098ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a18      	ldr	r2, [pc, #96]	@ (8009928 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d00e      	beq.n	80098ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a16      	ldr	r2, [pc, #88]	@ (800992c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d009      	beq.n	80098ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a15      	ldr	r2, [pc, #84]	@ (8009930 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d004      	beq.n	80098ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a13      	ldr	r2, [pc, #76]	@ (8009934 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d10c      	bne.n	8009904 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80098f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009914:	2300      	movs	r3, #0
}
 8009916:	4618      	mov	r0, r3
 8009918:	3714      	adds	r7, #20
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	40010000 	.word	0x40010000
 8009928:	40000400 	.word	0x40000400
 800992c:	40000800 	.word	0x40000800
 8009930:	40000c00 	.word	0x40000c00
 8009934:	40014000 	.word	0x40014000

08009938 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009940:	bf00      	nop
 8009942:	370c      	adds	r7, #12
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009954:	bf00      	nop
 8009956:	370c      	adds	r7, #12
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009960:	b084      	sub	sp, #16
 8009962:	b580      	push	{r7, lr}
 8009964:	b084      	sub	sp, #16
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	f107 001c 	add.w	r0, r7, #28
 800996e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009972:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009976:	2b01      	cmp	r3, #1
 8009978:	d123      	bne.n	80099c2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800997e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800998e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80099a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d105      	bne.n	80099b6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f001 fae8 	bl	800af8c <USB_CoreReset>
 80099bc:	4603      	mov	r3, r0
 80099be:	73fb      	strb	r3, [r7, #15]
 80099c0:	e01b      	b.n	80099fa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f001 fadc 	bl	800af8c <USB_CoreReset>
 80099d4:	4603      	mov	r3, r0
 80099d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80099d8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d106      	bne.n	80099ee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80099ec:	e005      	b.n	80099fa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80099fa:	7fbb      	ldrb	r3, [r7, #30]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d10b      	bne.n	8009a18 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f043 0206 	orr.w	r2, r3, #6
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	f043 0220 	orr.w	r2, r3, #32
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a24:	b004      	add	sp, #16
 8009a26:	4770      	bx	lr

08009a28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b087      	sub	sp, #28
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	4613      	mov	r3, r2
 8009a34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009a36:	79fb      	ldrb	r3, [r7, #7]
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d165      	bne.n	8009b08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	4a41      	ldr	r2, [pc, #260]	@ (8009b44 <USB_SetTurnaroundTime+0x11c>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d906      	bls.n	8009a52 <USB_SetTurnaroundTime+0x2a>
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	4a40      	ldr	r2, [pc, #256]	@ (8009b48 <USB_SetTurnaroundTime+0x120>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d202      	bcs.n	8009a52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009a4c:	230f      	movs	r3, #15
 8009a4e:	617b      	str	r3, [r7, #20]
 8009a50:	e062      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	4a3c      	ldr	r2, [pc, #240]	@ (8009b48 <USB_SetTurnaroundTime+0x120>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d306      	bcc.n	8009a68 <USB_SetTurnaroundTime+0x40>
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	4a3b      	ldr	r2, [pc, #236]	@ (8009b4c <USB_SetTurnaroundTime+0x124>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d202      	bcs.n	8009a68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009a62:	230e      	movs	r3, #14
 8009a64:	617b      	str	r3, [r7, #20]
 8009a66:	e057      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	4a38      	ldr	r2, [pc, #224]	@ (8009b4c <USB_SetTurnaroundTime+0x124>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d306      	bcc.n	8009a7e <USB_SetTurnaroundTime+0x56>
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	4a37      	ldr	r2, [pc, #220]	@ (8009b50 <USB_SetTurnaroundTime+0x128>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d202      	bcs.n	8009a7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009a78:	230d      	movs	r3, #13
 8009a7a:	617b      	str	r3, [r7, #20]
 8009a7c:	e04c      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	4a33      	ldr	r2, [pc, #204]	@ (8009b50 <USB_SetTurnaroundTime+0x128>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d306      	bcc.n	8009a94 <USB_SetTurnaroundTime+0x6c>
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	4a32      	ldr	r2, [pc, #200]	@ (8009b54 <USB_SetTurnaroundTime+0x12c>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d802      	bhi.n	8009a94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009a8e:	230c      	movs	r3, #12
 8009a90:	617b      	str	r3, [r7, #20]
 8009a92:	e041      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	4a2f      	ldr	r2, [pc, #188]	@ (8009b54 <USB_SetTurnaroundTime+0x12c>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d906      	bls.n	8009aaa <USB_SetTurnaroundTime+0x82>
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8009b58 <USB_SetTurnaroundTime+0x130>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d802      	bhi.n	8009aaa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009aa4:	230b      	movs	r3, #11
 8009aa6:	617b      	str	r3, [r7, #20]
 8009aa8:	e036      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	4a2a      	ldr	r2, [pc, #168]	@ (8009b58 <USB_SetTurnaroundTime+0x130>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d906      	bls.n	8009ac0 <USB_SetTurnaroundTime+0x98>
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	4a29      	ldr	r2, [pc, #164]	@ (8009b5c <USB_SetTurnaroundTime+0x134>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d802      	bhi.n	8009ac0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009aba:	230a      	movs	r3, #10
 8009abc:	617b      	str	r3, [r7, #20]
 8009abe:	e02b      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	4a26      	ldr	r2, [pc, #152]	@ (8009b5c <USB_SetTurnaroundTime+0x134>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d906      	bls.n	8009ad6 <USB_SetTurnaroundTime+0xae>
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	4a25      	ldr	r2, [pc, #148]	@ (8009b60 <USB_SetTurnaroundTime+0x138>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d202      	bcs.n	8009ad6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009ad0:	2309      	movs	r3, #9
 8009ad2:	617b      	str	r3, [r7, #20]
 8009ad4:	e020      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	4a21      	ldr	r2, [pc, #132]	@ (8009b60 <USB_SetTurnaroundTime+0x138>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d306      	bcc.n	8009aec <USB_SetTurnaroundTime+0xc4>
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	4a20      	ldr	r2, [pc, #128]	@ (8009b64 <USB_SetTurnaroundTime+0x13c>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d802      	bhi.n	8009aec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009ae6:	2308      	movs	r3, #8
 8009ae8:	617b      	str	r3, [r7, #20]
 8009aea:	e015      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	4a1d      	ldr	r2, [pc, #116]	@ (8009b64 <USB_SetTurnaroundTime+0x13c>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d906      	bls.n	8009b02 <USB_SetTurnaroundTime+0xda>
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	4a1c      	ldr	r2, [pc, #112]	@ (8009b68 <USB_SetTurnaroundTime+0x140>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d202      	bcs.n	8009b02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009afc:	2307      	movs	r3, #7
 8009afe:	617b      	str	r3, [r7, #20]
 8009b00:	e00a      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009b02:	2306      	movs	r3, #6
 8009b04:	617b      	str	r3, [r7, #20]
 8009b06:	e007      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009b08:	79fb      	ldrb	r3, [r7, #7]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d102      	bne.n	8009b14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009b0e:	2309      	movs	r3, #9
 8009b10:	617b      	str	r3, [r7, #20]
 8009b12:	e001      	b.n	8009b18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009b14:	2309      	movs	r3, #9
 8009b16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	68da      	ldr	r2, [r3, #12]
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	029b      	lsls	r3, r3, #10
 8009b2c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009b30:	431a      	orrs	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	371c      	adds	r7, #28
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	00d8acbf 	.word	0x00d8acbf
 8009b48:	00e4e1c0 	.word	0x00e4e1c0
 8009b4c:	00f42400 	.word	0x00f42400
 8009b50:	01067380 	.word	0x01067380
 8009b54:	011a499f 	.word	0x011a499f
 8009b58:	01312cff 	.word	0x01312cff
 8009b5c:	014ca43f 	.word	0x014ca43f
 8009b60:	016e3600 	.word	0x016e3600
 8009b64:	01a6ab1f 	.word	0x01a6ab1f
 8009b68:	01e84800 	.word	0x01e84800

08009b6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	f043 0201 	orr.w	r2, r3, #1
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	370c      	adds	r7, #12
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b8e:	b480      	push	{r7}
 8009b90:	b083      	sub	sp, #12
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	f023 0201 	bic.w	r2, r3, #1
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	460b      	mov	r3, r1
 8009bba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	68db      	ldr	r3, [r3, #12]
 8009bc4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009bcc:	78fb      	ldrb	r3, [r7, #3]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d115      	bne.n	8009bfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009bde:	200a      	movs	r0, #10
 8009be0:	f7f9 f8ce 	bl	8002d80 <HAL_Delay>
      ms += 10U;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	330a      	adds	r3, #10
 8009be8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f001 f93f 	bl	800ae6e <USB_GetMode>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d01e      	beq.n	8009c34 <USB_SetCurrentMode+0x84>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2bc7      	cmp	r3, #199	@ 0xc7
 8009bfa:	d9f0      	bls.n	8009bde <USB_SetCurrentMode+0x2e>
 8009bfc:	e01a      	b.n	8009c34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009bfe:	78fb      	ldrb	r3, [r7, #3]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d115      	bne.n	8009c30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009c10:	200a      	movs	r0, #10
 8009c12:	f7f9 f8b5 	bl	8002d80 <HAL_Delay>
      ms += 10U;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	330a      	adds	r3, #10
 8009c1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f001 f926 	bl	800ae6e <USB_GetMode>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d005      	beq.n	8009c34 <USB_SetCurrentMode+0x84>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2bc7      	cmp	r3, #199	@ 0xc7
 8009c2c:	d9f0      	bls.n	8009c10 <USB_SetCurrentMode+0x60>
 8009c2e:	e001      	b.n	8009c34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e005      	b.n	8009c40 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2bc8      	cmp	r3, #200	@ 0xc8
 8009c38:	d101      	bne.n	8009c3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	e000      	b.n	8009c40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c48:	b084      	sub	sp, #16
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b086      	sub	sp, #24
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
 8009c52:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009c56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009c62:	2300      	movs	r3, #0
 8009c64:	613b      	str	r3, [r7, #16]
 8009c66:	e009      	b.n	8009c7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	3340      	adds	r3, #64	@ 0x40
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	4413      	add	r3, r2
 8009c72:	2200      	movs	r2, #0
 8009c74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	613b      	str	r3, [r7, #16]
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	2b0e      	cmp	r3, #14
 8009c80:	d9f2      	bls.n	8009c68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009c82:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d11c      	bne.n	8009cc4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c98:	f043 0302 	orr.w	r3, r3, #2
 8009c9c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ca2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	639a      	str	r2, [r3, #56]	@ 0x38
 8009cc2:	e00b      	b.n	8009cdc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ce8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d10d      	bne.n	8009d0c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d104      	bne.n	8009d02 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f968 	bl	8009fd0 <USB_SetDevSpeed>
 8009d00:	e008      	b.n	8009d14 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009d02:	2101      	movs	r1, #1
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 f963 	bl	8009fd0 <USB_SetDevSpeed>
 8009d0a:	e003      	b.n	8009d14 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009d0c:	2103      	movs	r1, #3
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f95e 	bl	8009fd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009d14:	2110      	movs	r1, #16
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 f8fa 	bl	8009f10 <USB_FlushTxFifo>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f924 	bl	8009f74 <USB_FlushRxFifo>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	2300      	movs	r3, #0
 8009d40:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d48:	461a      	mov	r2, r3
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d54:	461a      	mov	r2, r3
 8009d56:	2300      	movs	r3, #0
 8009d58:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	613b      	str	r3, [r7, #16]
 8009d5e:	e043      	b.n	8009de8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	015a      	lsls	r2, r3, #5
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	4413      	add	r3, r2
 8009d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d76:	d118      	bne.n	8009daa <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10a      	bne.n	8009d94 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	015a      	lsls	r2, r3, #5
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	4413      	add	r3, r2
 8009d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009d90:	6013      	str	r3, [r2, #0]
 8009d92:	e013      	b.n	8009dbc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	015a      	lsls	r2, r3, #5
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009da0:	461a      	mov	r2, r3
 8009da2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009da6:	6013      	str	r3, [r2, #0]
 8009da8:	e008      	b.n	8009dbc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	015a      	lsls	r2, r3, #5
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	4413      	add	r3, r2
 8009db2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009db6:	461a      	mov	r2, r3
 8009db8:	2300      	movs	r3, #0
 8009dba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	015a      	lsls	r2, r3, #5
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dc8:	461a      	mov	r2, r3
 8009dca:	2300      	movs	r3, #0
 8009dcc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	015a      	lsls	r2, r3, #5
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	4413      	add	r3, r2
 8009dd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dda:	461a      	mov	r2, r3
 8009ddc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009de0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	3301      	adds	r3, #1
 8009de6:	613b      	str	r3, [r7, #16]
 8009de8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009dec:	461a      	mov	r2, r3
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d3b5      	bcc.n	8009d60 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009df4:	2300      	movs	r3, #0
 8009df6:	613b      	str	r3, [r7, #16]
 8009df8:	e043      	b.n	8009e82 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	015a      	lsls	r2, r3, #5
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	4413      	add	r3, r2
 8009e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e10:	d118      	bne.n	8009e44 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d10a      	bne.n	8009e2e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	015a      	lsls	r2, r3, #5
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	4413      	add	r3, r2
 8009e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e24:	461a      	mov	r2, r3
 8009e26:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009e2a:	6013      	str	r3, [r2, #0]
 8009e2c:	e013      	b.n	8009e56 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	015a      	lsls	r2, r3, #5
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	4413      	add	r3, r2
 8009e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009e40:	6013      	str	r3, [r2, #0]
 8009e42:	e008      	b.n	8009e56 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e50:	461a      	mov	r2, r3
 8009e52:	2300      	movs	r3, #0
 8009e54:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	015a      	lsls	r2, r3, #5
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e62:	461a      	mov	r2, r3
 8009e64:	2300      	movs	r3, #0
 8009e66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	015a      	lsls	r2, r3, #5
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e74:	461a      	mov	r2, r3
 8009e76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009e7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	613b      	str	r3, [r7, #16]
 8009e82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009e86:	461a      	mov	r2, r3
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d3b5      	bcc.n	8009dfa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ea0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009eae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009eb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d105      	bne.n	8009ec4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	699b      	ldr	r3, [r3, #24]
 8009ebc:	f043 0210 	orr.w	r2, r3, #16
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	699a      	ldr	r2, [r3, #24]
 8009ec8:	4b10      	ldr	r3, [pc, #64]	@ (8009f0c <USB_DevInit+0x2c4>)
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009ed0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d005      	beq.n	8009ee4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	699b      	ldr	r3, [r3, #24]
 8009edc:	f043 0208 	orr.w	r2, r3, #8
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009ee4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d107      	bne.n	8009efc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ef4:	f043 0304 	orr.w	r3, r3, #4
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3718      	adds	r7, #24
 8009f02:	46bd      	mov	sp, r7
 8009f04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f08:	b004      	add	sp, #16
 8009f0a:	4770      	bx	lr
 8009f0c:	803c3800 	.word	0x803c3800

08009f10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3301      	adds	r3, #1
 8009f22:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f2a:	d901      	bls.n	8009f30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	e01b      	b.n	8009f68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	daf2      	bge.n	8009f1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	019b      	lsls	r3, r3, #6
 8009f40:	f043 0220 	orr.w	r2, r3, #32
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f54:	d901      	bls.n	8009f5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009f56:	2303      	movs	r3, #3
 8009f58:	e006      	b.n	8009f68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	f003 0320 	and.w	r3, r3, #32
 8009f62:	2b20      	cmp	r3, #32
 8009f64:	d0f0      	beq.n	8009f48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	3301      	adds	r3, #1
 8009f84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f8c:	d901      	bls.n	8009f92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	e018      	b.n	8009fc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	daf2      	bge.n	8009f80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2210      	movs	r2, #16
 8009fa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009fb0:	d901      	bls.n	8009fb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e006      	b.n	8009fc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	f003 0310 	and.w	r3, r3, #16
 8009fbe:	2b10      	cmp	r3, #16
 8009fc0:	d0f0      	beq.n	8009fa4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3714      	adds	r7, #20
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr

08009fd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	78fb      	ldrb	r3, [r7, #3]
 8009fea:	68f9      	ldr	r1, [r7, #12]
 8009fec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3714      	adds	r7, #20
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a002:	b480      	push	{r7}
 800a004:	b087      	sub	sp, #28
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	f003 0306 	and.w	r3, r3, #6
 800a01a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d102      	bne.n	800a028 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a022:	2300      	movs	r3, #0
 800a024:	75fb      	strb	r3, [r7, #23]
 800a026:	e00a      	b.n	800a03e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d002      	beq.n	800a034 <USB_GetDevSpeed+0x32>
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2b06      	cmp	r3, #6
 800a032:	d102      	bne.n	800a03a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a034:	2302      	movs	r3, #2
 800a036:	75fb      	strb	r3, [r7, #23]
 800a038:	e001      	b.n	800a03e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a03a:	230f      	movs	r3, #15
 800a03c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a03e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a040:	4618      	mov	r0, r3
 800a042:	371c      	adds	r7, #28
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	785b      	ldrb	r3, [r3, #1]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d13a      	bne.n	800a0de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a06e:	69da      	ldr	r2, [r3, #28]
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	f003 030f 	and.w	r3, r3, #15
 800a078:	2101      	movs	r1, #1
 800a07a:	fa01 f303 	lsl.w	r3, r1, r3
 800a07e:	b29b      	uxth	r3, r3
 800a080:	68f9      	ldr	r1, [r7, #12]
 800a082:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a086:	4313      	orrs	r3, r2
 800a088:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	015a      	lsls	r2, r3, #5
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	4413      	add	r3, r2
 800a092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d155      	bne.n	800a14c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	015a      	lsls	r2, r3, #5
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	791b      	ldrb	r3, [r3, #4]
 800a0ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	059b      	lsls	r3, r3, #22
 800a0c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	68ba      	ldr	r2, [r7, #8]
 800a0c8:	0151      	lsls	r1, r2, #5
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	440a      	add	r2, r1
 800a0ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0da:	6013      	str	r3, [r2, #0]
 800a0dc:	e036      	b.n	800a14c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0e4:	69da      	ldr	r2, [r3, #28]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	781b      	ldrb	r3, [r3, #0]
 800a0ea:	f003 030f 	and.w	r3, r3, #15
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	fa01 f303 	lsl.w	r3, r1, r3
 800a0f4:	041b      	lsls	r3, r3, #16
 800a0f6:	68f9      	ldr	r1, [r7, #12]
 800a0f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	015a      	lsls	r2, r3, #5
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	4413      	add	r3, r2
 800a108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a112:	2b00      	cmp	r3, #0
 800a114:	d11a      	bne.n	800a14c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	015a      	lsls	r2, r3, #5
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	4413      	add	r3, r2
 800a11e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	791b      	ldrb	r3, [r3, #4]
 800a130:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a132:	430b      	orrs	r3, r1
 800a134:	4313      	orrs	r3, r2
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	0151      	lsls	r1, r2, #5
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	440a      	add	r2, r1
 800a13e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a14a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3714      	adds	r7, #20
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
	...

0800a15c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b085      	sub	sp, #20
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	785b      	ldrb	r3, [r3, #1]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d161      	bne.n	800a23c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	015a      	lsls	r2, r3, #5
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	4413      	add	r3, r2
 800a180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a18a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a18e:	d11f      	bne.n	800a1d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	015a      	lsls	r2, r3, #5
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	4413      	add	r3, r2
 800a198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	68ba      	ldr	r2, [r7, #8]
 800a1a0:	0151      	lsls	r1, r2, #5
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	440a      	add	r2, r1
 800a1a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a1ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	015a      	lsls	r2, r3, #5
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	0151      	lsls	r1, r2, #5
 800a1c2:	68fa      	ldr	r2, [r7, #12]
 800a1c4:	440a      	add	r2, r1
 800a1c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a1ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	f003 030f 	and.w	r3, r3, #15
 800a1e0:	2101      	movs	r1, #1
 800a1e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	43db      	mvns	r3, r3
 800a1ea:	68f9      	ldr	r1, [r7, #12]
 800a1ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1fa:	69da      	ldr	r2, [r3, #28]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	f003 030f 	and.w	r3, r3, #15
 800a204:	2101      	movs	r1, #1
 800a206:	fa01 f303 	lsl.w	r3, r1, r3
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	43db      	mvns	r3, r3
 800a20e:	68f9      	ldr	r1, [r7, #12]
 800a210:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a214:	4013      	ands	r3, r2
 800a216:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	015a      	lsls	r2, r3, #5
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	4413      	add	r3, r2
 800a220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	0159      	lsls	r1, r3, #5
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	440b      	add	r3, r1
 800a22e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a232:	4619      	mov	r1, r3
 800a234:	4b35      	ldr	r3, [pc, #212]	@ (800a30c <USB_DeactivateEndpoint+0x1b0>)
 800a236:	4013      	ands	r3, r2
 800a238:	600b      	str	r3, [r1, #0]
 800a23a:	e060      	b.n	800a2fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	015a      	lsls	r2, r3, #5
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	4413      	add	r3, r2
 800a244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a24e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a252:	d11f      	bne.n	800a294 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	015a      	lsls	r2, r3, #5
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	4413      	add	r3, r2
 800a25c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	0151      	lsls	r1, r2, #5
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	440a      	add	r2, r1
 800a26a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a26e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a272:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	015a      	lsls	r2, r3, #5
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	4413      	add	r3, r2
 800a27c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68ba      	ldr	r2, [r7, #8]
 800a284:	0151      	lsls	r1, r2, #5
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	440a      	add	r2, r1
 800a28a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a28e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a292:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a29a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	f003 030f 	and.w	r3, r3, #15
 800a2a4:	2101      	movs	r1, #1
 800a2a6:	fa01 f303 	lsl.w	r3, r1, r3
 800a2aa:	041b      	lsls	r3, r3, #16
 800a2ac:	43db      	mvns	r3, r3
 800a2ae:	68f9      	ldr	r1, [r7, #12]
 800a2b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2be:	69da      	ldr	r2, [r3, #28]
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	f003 030f 	and.w	r3, r3, #15
 800a2c8:	2101      	movs	r1, #1
 800a2ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a2ce:	041b      	lsls	r3, r3, #16
 800a2d0:	43db      	mvns	r3, r3
 800a2d2:	68f9      	ldr	r1, [r7, #12]
 800a2d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2d8:	4013      	ands	r3, r2
 800a2da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	015a      	lsls	r2, r3, #5
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2e8:	681a      	ldr	r2, [r3, #0]
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	0159      	lsls	r1, r3, #5
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	440b      	add	r3, r1
 800a2f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	4b05      	ldr	r3, [pc, #20]	@ (800a310 <USB_DeactivateEndpoint+0x1b4>)
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3714      	adds	r7, #20
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr
 800a30c:	ec337800 	.word	0xec337800
 800a310:	eff37800 	.word	0xeff37800

0800a314 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b08a      	sub	sp, #40	@ 0x28
 800a318:	af02      	add	r7, sp, #8
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	4613      	mov	r3, r2
 800a320:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	785b      	ldrb	r3, [r3, #1]
 800a330:	2b01      	cmp	r3, #1
 800a332:	f040 817f 	bne.w	800a634 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d132      	bne.n	800a3a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	015a      	lsls	r2, r3, #5
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	4413      	add	r3, r2
 800a346:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	69ba      	ldr	r2, [r7, #24]
 800a34e:	0151      	lsls	r1, r2, #5
 800a350:	69fa      	ldr	r2, [r7, #28]
 800a352:	440a      	add	r2, r1
 800a354:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a358:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a35c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a360:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	69ba      	ldr	r2, [r7, #24]
 800a372:	0151      	lsls	r1, r2, #5
 800a374:	69fa      	ldr	r2, [r7, #28]
 800a376:	440a      	add	r2, r1
 800a378:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a37c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a380:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	015a      	lsls	r2, r3, #5
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	4413      	add	r3, r2
 800a38a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a38e:	691b      	ldr	r3, [r3, #16]
 800a390:	69ba      	ldr	r2, [r7, #24]
 800a392:	0151      	lsls	r1, r2, #5
 800a394:	69fa      	ldr	r2, [r7, #28]
 800a396:	440a      	add	r2, r1
 800a398:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a39c:	0cdb      	lsrs	r3, r3, #19
 800a39e:	04db      	lsls	r3, r3, #19
 800a3a0:	6113      	str	r3, [r2, #16]
 800a3a2:	e097      	b.n	800a4d4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	015a      	lsls	r2, r3, #5
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	4413      	add	r3, r2
 800a3ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3b0:	691b      	ldr	r3, [r3, #16]
 800a3b2:	69ba      	ldr	r2, [r7, #24]
 800a3b4:	0151      	lsls	r1, r2, #5
 800a3b6:	69fa      	ldr	r2, [r7, #28]
 800a3b8:	440a      	add	r2, r1
 800a3ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3be:	0cdb      	lsrs	r3, r3, #19
 800a3c0:	04db      	lsls	r3, r3, #19
 800a3c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	015a      	lsls	r2, r3, #5
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	69ba      	ldr	r2, [r7, #24]
 800a3d4:	0151      	lsls	r1, r2, #5
 800a3d6:	69fa      	ldr	r2, [r7, #28]
 800a3d8:	440a      	add	r2, r1
 800a3da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3de:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a3e2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a3e6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d11a      	bne.n	800a424 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	691a      	ldr	r2, [r3, #16]
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	689b      	ldr	r3, [r3, #8]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d903      	bls.n	800a402 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	689a      	ldr	r2, [r3, #8]
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	015a      	lsls	r2, r3, #5
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	4413      	add	r3, r2
 800a40a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	69ba      	ldr	r2, [r7, #24]
 800a412:	0151      	lsls	r1, r2, #5
 800a414:	69fa      	ldr	r2, [r7, #28]
 800a416:	440a      	add	r2, r1
 800a418:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a41c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a420:	6113      	str	r3, [r2, #16]
 800a422:	e044      	b.n	800a4ae <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	691a      	ldr	r2, [r3, #16]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	4413      	add	r3, r2
 800a42e:	1e5a      	subs	r2, r3, #1
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	fbb2 f3f3 	udiv	r3, r2, r3
 800a438:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a43a:	69bb      	ldr	r3, [r7, #24]
 800a43c:	015a      	lsls	r2, r3, #5
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	4413      	add	r3, r2
 800a442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a446:	691a      	ldr	r2, [r3, #16]
 800a448:	8afb      	ldrh	r3, [r7, #22]
 800a44a:	04d9      	lsls	r1, r3, #19
 800a44c:	4ba4      	ldr	r3, [pc, #656]	@ (800a6e0 <USB_EPStartXfer+0x3cc>)
 800a44e:	400b      	ands	r3, r1
 800a450:	69b9      	ldr	r1, [r7, #24]
 800a452:	0148      	lsls	r0, r1, #5
 800a454:	69f9      	ldr	r1, [r7, #28]
 800a456:	4401      	add	r1, r0
 800a458:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a45c:	4313      	orrs	r3, r2
 800a45e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	791b      	ldrb	r3, [r3, #4]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d122      	bne.n	800a4ae <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	015a      	lsls	r2, r3, #5
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	4413      	add	r3, r2
 800a470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	69ba      	ldr	r2, [r7, #24]
 800a478:	0151      	lsls	r1, r2, #5
 800a47a:	69fa      	ldr	r2, [r7, #28]
 800a47c:	440a      	add	r2, r1
 800a47e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a482:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a486:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a488:	69bb      	ldr	r3, [r7, #24]
 800a48a:	015a      	lsls	r2, r3, #5
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	4413      	add	r3, r2
 800a490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a494:	691a      	ldr	r2, [r3, #16]
 800a496:	8afb      	ldrh	r3, [r7, #22]
 800a498:	075b      	lsls	r3, r3, #29
 800a49a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a49e:	69b9      	ldr	r1, [r7, #24]
 800a4a0:	0148      	lsls	r0, r1, #5
 800a4a2:	69f9      	ldr	r1, [r7, #28]
 800a4a4:	4401      	add	r1, r0
 800a4a6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a4ae:	69bb      	ldr	r3, [r7, #24]
 800a4b0:	015a      	lsls	r2, r3, #5
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4ba:	691a      	ldr	r2, [r3, #16]
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4c4:	69b9      	ldr	r1, [r7, #24]
 800a4c6:	0148      	lsls	r0, r1, #5
 800a4c8:	69f9      	ldr	r1, [r7, #28]
 800a4ca:	4401      	add	r1, r0
 800a4cc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a4d4:	79fb      	ldrb	r3, [r7, #7]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d14b      	bne.n	800a572 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	69db      	ldr	r3, [r3, #28]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d009      	beq.n	800a4f6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	015a      	lsls	r2, r3, #5
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	4413      	add	r3, r2
 800a4ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	69db      	ldr	r3, [r3, #28]
 800a4f4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	791b      	ldrb	r3, [r3, #4]
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	d128      	bne.n	800a550 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d110      	bne.n	800a530 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	015a      	lsls	r2, r3, #5
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	4413      	add	r3, r2
 800a516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	69ba      	ldr	r2, [r7, #24]
 800a51e:	0151      	lsls	r1, r2, #5
 800a520:	69fa      	ldr	r2, [r7, #28]
 800a522:	440a      	add	r2, r1
 800a524:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a528:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a52c:	6013      	str	r3, [r2, #0]
 800a52e:	e00f      	b.n	800a550 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	015a      	lsls	r2, r3, #5
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	4413      	add	r3, r2
 800a538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	69ba      	ldr	r2, [r7, #24]
 800a540:	0151      	lsls	r1, r2, #5
 800a542:	69fa      	ldr	r2, [r7, #28]
 800a544:	440a      	add	r2, r1
 800a546:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a54a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a54e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	015a      	lsls	r2, r3, #5
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	4413      	add	r3, r2
 800a558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	69ba      	ldr	r2, [r7, #24]
 800a560:	0151      	lsls	r1, r2, #5
 800a562:	69fa      	ldr	r2, [r7, #28]
 800a564:	440a      	add	r2, r1
 800a566:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a56a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a56e:	6013      	str	r3, [r2, #0]
 800a570:	e166      	b.n	800a840 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	015a      	lsls	r2, r3, #5
 800a576:	69fb      	ldr	r3, [r7, #28]
 800a578:	4413      	add	r3, r2
 800a57a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	69ba      	ldr	r2, [r7, #24]
 800a582:	0151      	lsls	r1, r2, #5
 800a584:	69fa      	ldr	r2, [r7, #28]
 800a586:	440a      	add	r2, r1
 800a588:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a58c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a590:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	791b      	ldrb	r3, [r3, #4]
 800a596:	2b01      	cmp	r3, #1
 800a598:	d015      	beq.n	800a5c6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	691b      	ldr	r3, [r3, #16]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 814e 	beq.w	800a840 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	f003 030f 	and.w	r3, r3, #15
 800a5b4:	2101      	movs	r1, #1
 800a5b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a5ba:	69f9      	ldr	r1, [r7, #28]
 800a5bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	634b      	str	r3, [r1, #52]	@ 0x34
 800a5c4:	e13c      	b.n	800a840 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d110      	bne.n	800a5f8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	015a      	lsls	r2, r3, #5
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	4413      	add	r3, r2
 800a5de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	69ba      	ldr	r2, [r7, #24]
 800a5e6:	0151      	lsls	r1, r2, #5
 800a5e8:	69fa      	ldr	r2, [r7, #28]
 800a5ea:	440a      	add	r2, r1
 800a5ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a5f4:	6013      	str	r3, [r2, #0]
 800a5f6:	e00f      	b.n	800a618 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	015a      	lsls	r2, r3, #5
 800a5fc:	69fb      	ldr	r3, [r7, #28]
 800a5fe:	4413      	add	r3, r2
 800a600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	69ba      	ldr	r2, [r7, #24]
 800a608:	0151      	lsls	r1, r2, #5
 800a60a:	69fa      	ldr	r2, [r7, #28]
 800a60c:	440a      	add	r2, r1
 800a60e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a616:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	68d9      	ldr	r1, [r3, #12]
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	781a      	ldrb	r2, [r3, #0]
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	b298      	uxth	r0, r3
 800a626:	79fb      	ldrb	r3, [r7, #7]
 800a628:	9300      	str	r3, [sp, #0]
 800a62a:	4603      	mov	r3, r0
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f000 f9b9 	bl	800a9a4 <USB_WritePacket>
 800a632:	e105      	b.n	800a840 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	015a      	lsls	r2, r3, #5
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	4413      	add	r3, r2
 800a63c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	69ba      	ldr	r2, [r7, #24]
 800a644:	0151      	lsls	r1, r2, #5
 800a646:	69fa      	ldr	r2, [r7, #28]
 800a648:	440a      	add	r2, r1
 800a64a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a64e:	0cdb      	lsrs	r3, r3, #19
 800a650:	04db      	lsls	r3, r3, #19
 800a652:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a654:	69bb      	ldr	r3, [r7, #24]
 800a656:	015a      	lsls	r2, r3, #5
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	4413      	add	r3, r2
 800a65c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a660:	691b      	ldr	r3, [r3, #16]
 800a662:	69ba      	ldr	r2, [r7, #24]
 800a664:	0151      	lsls	r1, r2, #5
 800a666:	69fa      	ldr	r2, [r7, #28]
 800a668:	440a      	add	r2, r1
 800a66a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a66e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a672:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a676:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d132      	bne.n	800a6e4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d003      	beq.n	800a68e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	689a      	ldr	r2, [r3, #8]
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	689a      	ldr	r2, [r3, #8]
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	015a      	lsls	r2, r3, #5
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	4413      	add	r3, r2
 800a69e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6a2:	691a      	ldr	r2, [r3, #16]
 800a6a4:	68bb      	ldr	r3, [r7, #8]
 800a6a6:	6a1b      	ldr	r3, [r3, #32]
 800a6a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6ac:	69b9      	ldr	r1, [r7, #24]
 800a6ae:	0148      	lsls	r0, r1, #5
 800a6b0:	69f9      	ldr	r1, [r7, #28]
 800a6b2:	4401      	add	r1, r0
 800a6b4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	015a      	lsls	r2, r3, #5
 800a6c0:	69fb      	ldr	r3, [r7, #28]
 800a6c2:	4413      	add	r3, r2
 800a6c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	69ba      	ldr	r2, [r7, #24]
 800a6cc:	0151      	lsls	r1, r2, #5
 800a6ce:	69fa      	ldr	r2, [r7, #28]
 800a6d0:	440a      	add	r2, r1
 800a6d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a6da:	6113      	str	r3, [r2, #16]
 800a6dc:	e062      	b.n	800a7a4 <USB_EPStartXfer+0x490>
 800a6de:	bf00      	nop
 800a6e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d123      	bne.n	800a734 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a6ec:	69bb      	ldr	r3, [r7, #24]
 800a6ee:	015a      	lsls	r2, r3, #5
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6f8:	691a      	ldr	r2, [r3, #16]
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a702:	69b9      	ldr	r1, [r7, #24]
 800a704:	0148      	lsls	r0, r1, #5
 800a706:	69f9      	ldr	r1, [r7, #28]
 800a708:	4401      	add	r1, r0
 800a70a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a70e:	4313      	orrs	r3, r2
 800a710:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	015a      	lsls	r2, r3, #5
 800a716:	69fb      	ldr	r3, [r7, #28]
 800a718:	4413      	add	r3, r2
 800a71a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	69ba      	ldr	r2, [r7, #24]
 800a722:	0151      	lsls	r1, r2, #5
 800a724:	69fa      	ldr	r2, [r7, #28]
 800a726:	440a      	add	r2, r1
 800a728:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a72c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a730:	6113      	str	r3, [r2, #16]
 800a732:	e037      	b.n	800a7a4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	691a      	ldr	r2, [r3, #16]
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	4413      	add	r3, r2
 800a73e:	1e5a      	subs	r2, r3, #1
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	fbb2 f3f3 	udiv	r3, r2, r3
 800a748:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	8afa      	ldrh	r2, [r7, #22]
 800a750:	fb03 f202 	mul.w	r2, r3, r2
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	015a      	lsls	r2, r3, #5
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	4413      	add	r3, r2
 800a760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a764:	691a      	ldr	r2, [r3, #16]
 800a766:	8afb      	ldrh	r3, [r7, #22]
 800a768:	04d9      	lsls	r1, r3, #19
 800a76a:	4b38      	ldr	r3, [pc, #224]	@ (800a84c <USB_EPStartXfer+0x538>)
 800a76c:	400b      	ands	r3, r1
 800a76e:	69b9      	ldr	r1, [r7, #24]
 800a770:	0148      	lsls	r0, r1, #5
 800a772:	69f9      	ldr	r1, [r7, #28]
 800a774:	4401      	add	r1, r0
 800a776:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a77a:	4313      	orrs	r3, r2
 800a77c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a77e:	69bb      	ldr	r3, [r7, #24]
 800a780:	015a      	lsls	r2, r3, #5
 800a782:	69fb      	ldr	r3, [r7, #28]
 800a784:	4413      	add	r3, r2
 800a786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a78a:	691a      	ldr	r2, [r3, #16]
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	6a1b      	ldr	r3, [r3, #32]
 800a790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a794:	69b9      	ldr	r1, [r7, #24]
 800a796:	0148      	lsls	r0, r1, #5
 800a798:	69f9      	ldr	r1, [r7, #28]
 800a79a:	4401      	add	r1, r0
 800a79c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a7a4:	79fb      	ldrb	r3, [r7, #7]
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d10d      	bne.n	800a7c6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d009      	beq.n	800a7c6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	68d9      	ldr	r1, [r3, #12]
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	015a      	lsls	r2, r3, #5
 800a7ba:	69fb      	ldr	r3, [r7, #28]
 800a7bc:	4413      	add	r3, r2
 800a7be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7c2:	460a      	mov	r2, r1
 800a7c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	791b      	ldrb	r3, [r3, #4]
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d128      	bne.n	800a820 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a7ce:	69fb      	ldr	r3, [r7, #28]
 800a7d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d110      	bne.n	800a800 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a7de:	69bb      	ldr	r3, [r7, #24]
 800a7e0:	015a      	lsls	r2, r3, #5
 800a7e2:	69fb      	ldr	r3, [r7, #28]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	69ba      	ldr	r2, [r7, #24]
 800a7ee:	0151      	lsls	r1, r2, #5
 800a7f0:	69fa      	ldr	r2, [r7, #28]
 800a7f2:	440a      	add	r2, r1
 800a7f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a7fc:	6013      	str	r3, [r2, #0]
 800a7fe:	e00f      	b.n	800a820 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	015a      	lsls	r2, r3, #5
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	4413      	add	r3, r2
 800a808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	69ba      	ldr	r2, [r7, #24]
 800a810:	0151      	lsls	r1, r2, #5
 800a812:	69fa      	ldr	r2, [r7, #28]
 800a814:	440a      	add	r2, r1
 800a816:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a81a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a81e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	4413      	add	r3, r2
 800a828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	69ba      	ldr	r2, [r7, #24]
 800a830:	0151      	lsls	r1, r2, #5
 800a832:	69fa      	ldr	r2, [r7, #28]
 800a834:	440a      	add	r2, r1
 800a836:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a83a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a83e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3720      	adds	r7, #32
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	1ff80000 	.word	0x1ff80000

0800a850 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a850:	b480      	push	{r7}
 800a852:	b087      	sub	sp, #28
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a85a:	2300      	movs	r3, #0
 800a85c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a85e:	2300      	movs	r3, #0
 800a860:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	785b      	ldrb	r3, [r3, #1]
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d14a      	bne.n	800a904 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a86e:	683b      	ldr	r3, [r7, #0]
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	015a      	lsls	r2, r3, #5
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	4413      	add	r3, r2
 800a878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a882:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a886:	f040 8086 	bne.w	800a996 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	015a      	lsls	r2, r3, #5
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	4413      	add	r3, r2
 800a894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	7812      	ldrb	r2, [r2, #0]
 800a89e:	0151      	lsls	r1, r2, #5
 800a8a0:	693a      	ldr	r2, [r7, #16]
 800a8a2:	440a      	add	r2, r1
 800a8a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a8ac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	015a      	lsls	r2, r3, #5
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	683a      	ldr	r2, [r7, #0]
 800a8c0:	7812      	ldrb	r2, [r2, #0]
 800a8c2:	0151      	lsls	r1, r2, #5
 800a8c4:	693a      	ldr	r2, [r7, #16]
 800a8c6:	440a      	add	r2, r1
 800a8c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a8d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d902      	bls.n	800a8e8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	75fb      	strb	r3, [r7, #23]
          break;
 800a8e6:	e056      	b.n	800a996 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	015a      	lsls	r2, r3, #5
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a900:	d0e7      	beq.n	800a8d2 <USB_EPStopXfer+0x82>
 800a902:	e048      	b.n	800a996 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	015a      	lsls	r2, r3, #5
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	4413      	add	r3, r2
 800a90e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a918:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a91c:	d13b      	bne.n	800a996 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	015a      	lsls	r2, r3, #5
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	4413      	add	r3, r2
 800a928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	683a      	ldr	r2, [r7, #0]
 800a930:	7812      	ldrb	r2, [r2, #0]
 800a932:	0151      	lsls	r1, r2, #5
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	440a      	add	r2, r1
 800a938:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a93c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a940:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	015a      	lsls	r2, r3, #5
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	4413      	add	r3, r2
 800a94c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	683a      	ldr	r2, [r7, #0]
 800a954:	7812      	ldrb	r2, [r2, #0]
 800a956:	0151      	lsls	r1, r2, #5
 800a958:	693a      	ldr	r2, [r7, #16]
 800a95a:	440a      	add	r2, r1
 800a95c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a960:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a964:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	3301      	adds	r3, #1
 800a96a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a972:	4293      	cmp	r3, r2
 800a974:	d902      	bls.n	800a97c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a976:	2301      	movs	r3, #1
 800a978:	75fb      	strb	r3, [r7, #23]
          break;
 800a97a:	e00c      	b.n	800a996 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	781b      	ldrb	r3, [r3, #0]
 800a980:	015a      	lsls	r2, r3, #5
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	4413      	add	r3, r2
 800a986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a990:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a994:	d0e7      	beq.n	800a966 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a996:	7dfb      	ldrb	r3, [r7, #23]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	371c      	adds	r7, #28
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b089      	sub	sp, #36	@ 0x24
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	4611      	mov	r1, r2
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	71fb      	strb	r3, [r7, #7]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a9c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d123      	bne.n	800aa12 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a9ca:	88bb      	ldrh	r3, [r7, #4]
 800a9cc:	3303      	adds	r3, #3
 800a9ce:	089b      	lsrs	r3, r3, #2
 800a9d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	61bb      	str	r3, [r7, #24]
 800a9d6:	e018      	b.n	800aa0a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a9d8:	79fb      	ldrb	r3, [r7, #7]
 800a9da:	031a      	lsls	r2, r3, #12
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	4413      	add	r3, r2
 800a9e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a9ec:	69fb      	ldr	r3, [r7, #28]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	3301      	adds	r3, #1
 800aa02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	3301      	adds	r3, #1
 800aa08:	61bb      	str	r3, [r7, #24]
 800aa0a:	69ba      	ldr	r2, [r7, #24]
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d3e2      	bcc.n	800a9d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3724      	adds	r7, #36	@ 0x24
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b08b      	sub	sp, #44	@ 0x2c
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800aa36:	88fb      	ldrh	r3, [r7, #6]
 800aa38:	089b      	lsrs	r3, r3, #2
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aa3e:	88fb      	ldrh	r3, [r7, #6]
 800aa40:	f003 0303 	and.w	r3, r3, #3
 800aa44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800aa46:	2300      	movs	r3, #0
 800aa48:	623b      	str	r3, [r7, #32]
 800aa4a:	e014      	b.n	800aa76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa56:	601a      	str	r2, [r3, #0]
    pDest++;
 800aa58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa60:	3301      	adds	r3, #1
 800aa62:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa66:	3301      	adds	r3, #1
 800aa68:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800aa70:	6a3b      	ldr	r3, [r7, #32]
 800aa72:	3301      	adds	r3, #1
 800aa74:	623b      	str	r3, [r7, #32]
 800aa76:	6a3a      	ldr	r2, [r7, #32]
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d3e6      	bcc.n	800aa4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa7e:	8bfb      	ldrh	r3, [r7, #30]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d01e      	beq.n	800aac2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa84:	2300      	movs	r3, #0
 800aa86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa8e:	461a      	mov	r2, r3
 800aa90:	f107 0310 	add.w	r3, r7, #16
 800aa94:	6812      	ldr	r2, [r2, #0]
 800aa96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aa98:	693a      	ldr	r2, [r7, #16]
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	00db      	lsls	r3, r3, #3
 800aaa0:	fa22 f303 	lsr.w	r3, r2, r3
 800aaa4:	b2da      	uxtb	r2, r3
 800aaa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa8:	701a      	strb	r2, [r3, #0]
      i++;
 800aaaa:	6a3b      	ldr	r3, [r7, #32]
 800aaac:	3301      	adds	r3, #1
 800aaae:	623b      	str	r3, [r7, #32]
      pDest++;
 800aab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab2:	3301      	adds	r3, #1
 800aab4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800aab6:	8bfb      	ldrh	r3, [r7, #30]
 800aab8:	3b01      	subs	r3, #1
 800aaba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aabc:	8bfb      	ldrh	r3, [r7, #30]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1ea      	bne.n	800aa98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	372c      	adds	r7, #44	@ 0x2c
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	785b      	ldrb	r3, [r3, #1]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d12c      	bne.n	800ab46 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	015a      	lsls	r2, r3, #5
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	db12      	blt.n	800ab24 <USB_EPSetStall+0x54>
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d00f      	beq.n	800ab24 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	015a      	lsls	r2, r3, #5
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	68ba      	ldr	r2, [r7, #8]
 800ab14:	0151      	lsls	r1, r2, #5
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	440a      	add	r2, r1
 800ab1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ab22:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	015a      	lsls	r2, r3, #5
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	68ba      	ldr	r2, [r7, #8]
 800ab34:	0151      	lsls	r1, r2, #5
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	440a      	add	r2, r1
 800ab3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab42:	6013      	str	r3, [r2, #0]
 800ab44:	e02b      	b.n	800ab9e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	015a      	lsls	r2, r3, #5
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	4413      	add	r3, r2
 800ab4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	db12      	blt.n	800ab7e <USB_EPSetStall+0xae>
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00f      	beq.n	800ab7e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	015a      	lsls	r2, r3, #5
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	4413      	add	r3, r2
 800ab66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	0151      	lsls	r1, r2, #5
 800ab70:	68fa      	ldr	r2, [r7, #12]
 800ab72:	440a      	add	r2, r1
 800ab74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab78:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ab7c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	015a      	lsls	r2, r3, #5
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	4413      	add	r3, r2
 800ab86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68ba      	ldr	r2, [r7, #8]
 800ab8e:	0151      	lsls	r1, r2, #5
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	440a      	add	r2, r1
 800ab94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800abac:	b480      	push	{r7}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	785b      	ldrb	r3, [r3, #1]
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d128      	bne.n	800ac1a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	015a      	lsls	r2, r3, #5
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	4413      	add	r3, r2
 800abd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	0151      	lsls	r1, r2, #5
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	440a      	add	r2, r1
 800abde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abe2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800abe6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	791b      	ldrb	r3, [r3, #4]
 800abec:	2b03      	cmp	r3, #3
 800abee:	d003      	beq.n	800abf8 <USB_EPClearStall+0x4c>
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	791b      	ldrb	r3, [r3, #4]
 800abf4:	2b02      	cmp	r3, #2
 800abf6:	d138      	bne.n	800ac6a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	015a      	lsls	r2, r3, #5
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	4413      	add	r3, r2
 800ac00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68ba      	ldr	r2, [r7, #8]
 800ac08:	0151      	lsls	r1, r2, #5
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	440a      	add	r2, r1
 800ac0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac16:	6013      	str	r3, [r2, #0]
 800ac18:	e027      	b.n	800ac6a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	015a      	lsls	r2, r3, #5
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	4413      	add	r3, r2
 800ac22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	68ba      	ldr	r2, [r7, #8]
 800ac2a:	0151      	lsls	r1, r2, #5
 800ac2c:	68fa      	ldr	r2, [r7, #12]
 800ac2e:	440a      	add	r2, r1
 800ac30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac34:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ac38:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	791b      	ldrb	r3, [r3, #4]
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	d003      	beq.n	800ac4a <USB_EPClearStall+0x9e>
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	791b      	ldrb	r3, [r3, #4]
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	d10f      	bne.n	800ac6a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	015a      	lsls	r2, r3, #5
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	4413      	add	r3, r2
 800ac52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68ba      	ldr	r2, [r7, #8]
 800ac5a:	0151      	lsls	r1, r2, #5
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	440a      	add	r2, r1
 800ac60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac68:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr

0800ac78 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	460b      	mov	r3, r1
 800ac82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac96:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800ac9a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aca2:	681a      	ldr	r2, [r3, #0]
 800aca4:	78fb      	ldrb	r3, [r7, #3]
 800aca6:	011b      	lsls	r3, r3, #4
 800aca8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800acac:	68f9      	ldr	r1, [r7, #12]
 800acae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800acb2:	4313      	orrs	r3, r2
 800acb4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3714      	adds	r7, #20
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b085      	sub	sp, #20
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800acde:	f023 0303 	bic.w	r3, r3, #3
 800ace2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800acf2:	f023 0302 	bic.w	r3, r3, #2
 800acf6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3714      	adds	r7, #20
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr

0800ad06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad06:	b480      	push	{r7}
 800ad08:	b085      	sub	sp, #20
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ad20:	f023 0303 	bic.w	r3, r3, #3
 800ad24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad34:	f043 0302 	orr.w	r3, r3, #2
 800ad38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3714      	adds	r7, #20
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	695b      	ldr	r3, [r3, #20]
 800ad54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	699b      	ldr	r3, [r3, #24]
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	4013      	ands	r3, r2
 800ad5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ad60:	68fb      	ldr	r3, [r7, #12]
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3714      	adds	r7, #20
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr

0800ad6e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad6e:	b480      	push	{r7}
 800ad70:	b085      	sub	sp, #20
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad80:	699b      	ldr	r3, [r3, #24]
 800ad82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad8a:	69db      	ldr	r3, [r3, #28]
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	4013      	ands	r3, r2
 800ad90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	0c1b      	lsrs	r3, r3, #16
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3714      	adds	r7, #20
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr

0800ada2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ada2:	b480      	push	{r7}
 800ada4:	b085      	sub	sp, #20
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adb4:	699b      	ldr	r3, [r3, #24]
 800adb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adbe:	69db      	ldr	r3, [r3, #28]
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	4013      	ands	r3, r2
 800adc4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	b29b      	uxth	r3, r3
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3714      	adds	r7, #20
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr

0800add6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800add6:	b480      	push	{r7}
 800add8:	b085      	sub	sp, #20
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
 800adde:	460b      	mov	r3, r1
 800ade0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ade6:	78fb      	ldrb	r3, [r7, #3]
 800ade8:	015a      	lsls	r2, r3, #5
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	4413      	add	r3, r2
 800adee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adfc:	695b      	ldr	r3, [r3, #20]
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	4013      	ands	r3, r2
 800ae02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae04:	68bb      	ldr	r3, [r7, #8]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3714      	adds	r7, #20
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr

0800ae12 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ae12:	b480      	push	{r7}
 800ae14:	b087      	sub	sp, #28
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae28:	691b      	ldr	r3, [r3, #16]
 800ae2a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae34:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ae36:	78fb      	ldrb	r3, [r7, #3]
 800ae38:	f003 030f 	and.w	r3, r3, #15
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae42:	01db      	lsls	r3, r3, #7
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	693a      	ldr	r2, [r7, #16]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ae4c:	78fb      	ldrb	r3, [r7, #3]
 800ae4e:	015a      	lsls	r2, r3, #5
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	4413      	add	r3, r2
 800ae54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	693a      	ldr	r2, [r7, #16]
 800ae5c:	4013      	ands	r3, r2
 800ae5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae60:	68bb      	ldr	r3, [r7, #8]
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	371c      	adds	r7, #28
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae6e:	b480      	push	{r7}
 800ae70:	b083      	sub	sp, #12
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	f003 0301 	and.w	r3, r3, #1
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	370c      	adds	r7, #12
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b085      	sub	sp, #20
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aea4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800aea8:	f023 0307 	bic.w	r3, r3, #7
 800aeac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aec0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3714      	adds	r7, #20
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr

0800aed0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b087      	sub	sp, #28
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	460b      	mov	r3, r1
 800aeda:	607a      	str	r2, [r7, #4]
 800aedc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	333c      	adds	r3, #60	@ 0x3c
 800aee6:	3304      	adds	r3, #4
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	4a26      	ldr	r2, [pc, #152]	@ (800af88 <USB_EP0_OutStart+0xb8>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d90a      	bls.n	800af0a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af04:	d101      	bne.n	800af0a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800af06:	2300      	movs	r3, #0
 800af08:	e037      	b.n	800af7a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af10:	461a      	mov	r2, r3
 800af12:	2300      	movs	r3, #0
 800af14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	697a      	ldr	r2, [r7, #20]
 800af20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af24:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af30:	691b      	ldr	r3, [r3, #16]
 800af32:	697a      	ldr	r2, [r7, #20]
 800af34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af38:	f043 0318 	orr.w	r3, r3, #24
 800af3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	697a      	ldr	r2, [r7, #20]
 800af48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af4c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800af50:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800af52:	7afb      	ldrb	r3, [r7, #11]
 800af54:	2b01      	cmp	r3, #1
 800af56:	d10f      	bne.n	800af78 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af5e:	461a      	mov	r2, r3
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	697a      	ldr	r2, [r7, #20]
 800af6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af72:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800af76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	371c      	adds	r7, #28
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop
 800af88:	4f54300a 	.word	0x4f54300a

0800af8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af94:	2300      	movs	r3, #0
 800af96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	3301      	adds	r3, #1
 800af9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800afa4:	d901      	bls.n	800afaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800afa6:	2303      	movs	r3, #3
 800afa8:	e022      	b.n	800aff0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	691b      	ldr	r3, [r3, #16]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	daf2      	bge.n	800af98 <USB_CoreReset+0xc>

  count = 10U;
 800afb2:	230a      	movs	r3, #10
 800afb4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800afb6:	e002      	b.n	800afbe <USB_CoreReset+0x32>
  {
    count--;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	3b01      	subs	r3, #1
 800afbc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d1f9      	bne.n	800afb8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	f043 0201 	orr.w	r2, r3, #1
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	3301      	adds	r3, #1
 800afd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800afdc:	d901      	bls.n	800afe2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800afde:	2303      	movs	r3, #3
 800afe0:	e006      	b.n	800aff0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	691b      	ldr	r3, [r3, #16]
 800afe6:	f003 0301 	and.w	r3, r3, #1
 800afea:	2b01      	cmp	r3, #1
 800afec:	d0f0      	beq.n	800afd0 <USB_CoreReset+0x44>

  return HAL_OK;
 800afee:	2300      	movs	r3, #0
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3714      	adds	r7, #20
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr

0800affc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	460b      	mov	r3, r1
 800b006:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b008:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b00c:	f002 fd1e 	bl	800da4c <USBD_static_malloc>
 800b010:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d109      	bne.n	800b02c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	32b0      	adds	r2, #176	@ 0xb0
 800b022:	2100      	movs	r1, #0
 800b024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b028:	2302      	movs	r3, #2
 800b02a:	e0d4      	b.n	800b1d6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b02c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b030:	2100      	movs	r1, #0
 800b032:	68f8      	ldr	r0, [r7, #12]
 800b034:	f002 fd4e 	bl	800dad4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	32b0      	adds	r2, #176	@ 0xb0
 800b042:	68f9      	ldr	r1, [r7, #12]
 800b044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	32b0      	adds	r2, #176	@ 0xb0
 800b052:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	7c1b      	ldrb	r3, [r3, #16]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d138      	bne.n	800b0d6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b064:	4b5e      	ldr	r3, [pc, #376]	@ (800b1e0 <USBD_CDC_Init+0x1e4>)
 800b066:	7819      	ldrb	r1, [r3, #0]
 800b068:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b06c:	2202      	movs	r2, #2
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f002 fbc9 	bl	800d806 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b074:	4b5a      	ldr	r3, [pc, #360]	@ (800b1e0 <USBD_CDC_Init+0x1e4>)
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	f003 020f 	and.w	r2, r3, #15
 800b07c:	6879      	ldr	r1, [r7, #4]
 800b07e:	4613      	mov	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	4413      	add	r3, r2
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	440b      	add	r3, r1
 800b088:	3323      	adds	r3, #35	@ 0x23
 800b08a:	2201      	movs	r2, #1
 800b08c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b08e:	4b55      	ldr	r3, [pc, #340]	@ (800b1e4 <USBD_CDC_Init+0x1e8>)
 800b090:	7819      	ldrb	r1, [r3, #0]
 800b092:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b096:	2202      	movs	r2, #2
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f002 fbb4 	bl	800d806 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b09e:	4b51      	ldr	r3, [pc, #324]	@ (800b1e4 <USBD_CDC_Init+0x1e8>)
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	f003 020f 	and.w	r2, r3, #15
 800b0a6:	6879      	ldr	r1, [r7, #4]
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	4413      	add	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	440b      	add	r3, r1
 800b0b2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b0ba:	4b4b      	ldr	r3, [pc, #300]	@ (800b1e8 <USBD_CDC_Init+0x1ec>)
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	f003 020f 	and.w	r2, r3, #15
 800b0c2:	6879      	ldr	r1, [r7, #4]
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	440b      	add	r3, r1
 800b0ce:	331c      	adds	r3, #28
 800b0d0:	2210      	movs	r2, #16
 800b0d2:	601a      	str	r2, [r3, #0]
 800b0d4:	e035      	b.n	800b142 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b0d6:	4b42      	ldr	r3, [pc, #264]	@ (800b1e0 <USBD_CDC_Init+0x1e4>)
 800b0d8:	7819      	ldrb	r1, [r3, #0]
 800b0da:	2340      	movs	r3, #64	@ 0x40
 800b0dc:	2202      	movs	r2, #2
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f002 fb91 	bl	800d806 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b0e4:	4b3e      	ldr	r3, [pc, #248]	@ (800b1e0 <USBD_CDC_Init+0x1e4>)
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	f003 020f 	and.w	r2, r3, #15
 800b0ec:	6879      	ldr	r1, [r7, #4]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	4413      	add	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	440b      	add	r3, r1
 800b0f8:	3323      	adds	r3, #35	@ 0x23
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b0fe:	4b39      	ldr	r3, [pc, #228]	@ (800b1e4 <USBD_CDC_Init+0x1e8>)
 800b100:	7819      	ldrb	r1, [r3, #0]
 800b102:	2340      	movs	r3, #64	@ 0x40
 800b104:	2202      	movs	r2, #2
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f002 fb7d 	bl	800d806 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b10c:	4b35      	ldr	r3, [pc, #212]	@ (800b1e4 <USBD_CDC_Init+0x1e8>)
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	f003 020f 	and.w	r2, r3, #15
 800b114:	6879      	ldr	r1, [r7, #4]
 800b116:	4613      	mov	r3, r2
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	440b      	add	r3, r1
 800b120:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b124:	2201      	movs	r2, #1
 800b126:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b128:	4b2f      	ldr	r3, [pc, #188]	@ (800b1e8 <USBD_CDC_Init+0x1ec>)
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	f003 020f 	and.w	r2, r3, #15
 800b130:	6879      	ldr	r1, [r7, #4]
 800b132:	4613      	mov	r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	4413      	add	r3, r2
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	440b      	add	r3, r1
 800b13c:	331c      	adds	r3, #28
 800b13e:	2210      	movs	r2, #16
 800b140:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b142:	4b29      	ldr	r3, [pc, #164]	@ (800b1e8 <USBD_CDC_Init+0x1ec>)
 800b144:	7819      	ldrb	r1, [r3, #0]
 800b146:	2308      	movs	r3, #8
 800b148:	2203      	movs	r2, #3
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f002 fb5b 	bl	800d806 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b150:	4b25      	ldr	r3, [pc, #148]	@ (800b1e8 <USBD_CDC_Init+0x1ec>)
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	f003 020f 	and.w	r2, r3, #15
 800b158:	6879      	ldr	r1, [r7, #4]
 800b15a:	4613      	mov	r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4413      	add	r3, r2
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	440b      	add	r3, r1
 800b164:	3323      	adds	r3, #35	@ 0x23
 800b166:	2201      	movs	r2, #1
 800b168:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	33b0      	adds	r3, #176	@ 0xb0
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4413      	add	r3, r2
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2200      	movs	r2, #0
 800b18a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2200      	movs	r2, #0
 800b192:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d101      	bne.n	800b1a4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	e018      	b.n	800b1d6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	7c1b      	ldrb	r3, [r3, #16]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d10a      	bne.n	800b1c2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1ac:	4b0d      	ldr	r3, [pc, #52]	@ (800b1e4 <USBD_CDC_Init+0x1e8>)
 800b1ae:	7819      	ldrb	r1, [r3, #0]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f002 fc12 	bl	800d9e4 <USBD_LL_PrepareReceive>
 800b1c0:	e008      	b.n	800b1d4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1c2:	4b08      	ldr	r3, [pc, #32]	@ (800b1e4 <USBD_CDC_Init+0x1e8>)
 800b1c4:	7819      	ldrb	r1, [r3, #0]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1cc:	2340      	movs	r3, #64	@ 0x40
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f002 fc08 	bl	800d9e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	200000bf 	.word	0x200000bf
 800b1e4:	200000c0 	.word	0x200000c0
 800b1e8:	200000c1 	.word	0x200000c1

0800b1ec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b082      	sub	sp, #8
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b1f8:	4b3a      	ldr	r3, [pc, #232]	@ (800b2e4 <USBD_CDC_DeInit+0xf8>)
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f002 fb27 	bl	800d852 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b204:	4b37      	ldr	r3, [pc, #220]	@ (800b2e4 <USBD_CDC_DeInit+0xf8>)
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	f003 020f 	and.w	r2, r3, #15
 800b20c:	6879      	ldr	r1, [r7, #4]
 800b20e:	4613      	mov	r3, r2
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	4413      	add	r3, r2
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	440b      	add	r3, r1
 800b218:	3323      	adds	r3, #35	@ 0x23
 800b21a:	2200      	movs	r2, #0
 800b21c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b21e:	4b32      	ldr	r3, [pc, #200]	@ (800b2e8 <USBD_CDC_DeInit+0xfc>)
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	4619      	mov	r1, r3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f002 fb14 	bl	800d852 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b22a:	4b2f      	ldr	r3, [pc, #188]	@ (800b2e8 <USBD_CDC_DeInit+0xfc>)
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	f003 020f 	and.w	r2, r3, #15
 800b232:	6879      	ldr	r1, [r7, #4]
 800b234:	4613      	mov	r3, r2
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	4413      	add	r3, r2
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	440b      	add	r3, r1
 800b23e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b242:	2200      	movs	r2, #0
 800b244:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b246:	4b29      	ldr	r3, [pc, #164]	@ (800b2ec <USBD_CDC_DeInit+0x100>)
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	4619      	mov	r1, r3
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f002 fb00 	bl	800d852 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b252:	4b26      	ldr	r3, [pc, #152]	@ (800b2ec <USBD_CDC_DeInit+0x100>)
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	f003 020f 	and.w	r2, r3, #15
 800b25a:	6879      	ldr	r1, [r7, #4]
 800b25c:	4613      	mov	r3, r2
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	4413      	add	r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	440b      	add	r3, r1
 800b266:	3323      	adds	r3, #35	@ 0x23
 800b268:	2200      	movs	r2, #0
 800b26a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b26c:	4b1f      	ldr	r3, [pc, #124]	@ (800b2ec <USBD_CDC_DeInit+0x100>)
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	f003 020f 	and.w	r2, r3, #15
 800b274:	6879      	ldr	r1, [r7, #4]
 800b276:	4613      	mov	r3, r2
 800b278:	009b      	lsls	r3, r3, #2
 800b27a:	4413      	add	r3, r2
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	440b      	add	r3, r1
 800b280:	331c      	adds	r3, #28
 800b282:	2200      	movs	r2, #0
 800b284:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	32b0      	adds	r2, #176	@ 0xb0
 800b290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d01f      	beq.n	800b2d8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	33b0      	adds	r3, #176	@ 0xb0
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	4413      	add	r3, r2
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	32b0      	adds	r2, #176	@ 0xb0
 800b2b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f002 fbd4 	bl	800da68 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	32b0      	adds	r2, #176	@ 0xb0
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b2d8:	2300      	movs	r3, #0
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3708      	adds	r7, #8
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	200000bf 	.word	0x200000bf
 800b2e8:	200000c0 	.word	0x200000c0
 800b2ec:	200000c1 	.word	0x200000c1

0800b2f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	32b0      	adds	r2, #176	@ 0xb0
 800b304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b308:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b30a:	2300      	movs	r3, #0
 800b30c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b30e:	2300      	movs	r3, #0
 800b310:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b312:	2300      	movs	r3, #0
 800b314:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d101      	bne.n	800b320 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e0bf      	b.n	800b4a0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d050      	beq.n	800b3ce <USBD_CDC_Setup+0xde>
 800b32c:	2b20      	cmp	r3, #32
 800b32e:	f040 80af 	bne.w	800b490 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	88db      	ldrh	r3, [r3, #6]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d03a      	beq.n	800b3b0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	781b      	ldrb	r3, [r3, #0]
 800b33e:	b25b      	sxtb	r3, r3
 800b340:	2b00      	cmp	r3, #0
 800b342:	da1b      	bge.n	800b37c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	33b0      	adds	r3, #176	@ 0xb0
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4413      	add	r3, r2
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	683a      	ldr	r2, [r7, #0]
 800b358:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b35a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b35c:	683a      	ldr	r2, [r7, #0]
 800b35e:	88d2      	ldrh	r2, [r2, #6]
 800b360:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	88db      	ldrh	r3, [r3, #6]
 800b366:	2b07      	cmp	r3, #7
 800b368:	bf28      	it	cs
 800b36a:	2307      	movcs	r3, #7
 800b36c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	89fa      	ldrh	r2, [r7, #14]
 800b372:	4619      	mov	r1, r3
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f001 fda9 	bl	800cecc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b37a:	e090      	b.n	800b49e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	785a      	ldrb	r2, [r3, #1]
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	88db      	ldrh	r3, [r3, #6]
 800b38a:	2b3f      	cmp	r3, #63	@ 0x3f
 800b38c:	d803      	bhi.n	800b396 <USBD_CDC_Setup+0xa6>
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	88db      	ldrh	r3, [r3, #6]
 800b392:	b2da      	uxtb	r2, r3
 800b394:	e000      	b.n	800b398 <USBD_CDC_Setup+0xa8>
 800b396:	2240      	movs	r2, #64	@ 0x40
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b39e:	6939      	ldr	r1, [r7, #16]
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f001 fdbe 	bl	800cf2a <USBD_CtlPrepareRx>
      break;
 800b3ae:	e076      	b.n	800b49e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3b6:	687a      	ldr	r2, [r7, #4]
 800b3b8:	33b0      	adds	r3, #176	@ 0xb0
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	4413      	add	r3, r2
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	7850      	ldrb	r0, [r2, #1]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	6839      	ldr	r1, [r7, #0]
 800b3ca:	4798      	blx	r3
      break;
 800b3cc:	e067      	b.n	800b49e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	785b      	ldrb	r3, [r3, #1]
 800b3d2:	2b0b      	cmp	r3, #11
 800b3d4:	d851      	bhi.n	800b47a <USBD_CDC_Setup+0x18a>
 800b3d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b3dc <USBD_CDC_Setup+0xec>)
 800b3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3dc:	0800b40d 	.word	0x0800b40d
 800b3e0:	0800b489 	.word	0x0800b489
 800b3e4:	0800b47b 	.word	0x0800b47b
 800b3e8:	0800b47b 	.word	0x0800b47b
 800b3ec:	0800b47b 	.word	0x0800b47b
 800b3f0:	0800b47b 	.word	0x0800b47b
 800b3f4:	0800b47b 	.word	0x0800b47b
 800b3f8:	0800b47b 	.word	0x0800b47b
 800b3fc:	0800b47b 	.word	0x0800b47b
 800b400:	0800b47b 	.word	0x0800b47b
 800b404:	0800b437 	.word	0x0800b437
 800b408:	0800b461 	.word	0x0800b461
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b412:	b2db      	uxtb	r3, r3
 800b414:	2b03      	cmp	r3, #3
 800b416:	d107      	bne.n	800b428 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b418:	f107 030a 	add.w	r3, r7, #10
 800b41c:	2202      	movs	r2, #2
 800b41e:	4619      	mov	r1, r3
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f001 fd53 	bl	800cecc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b426:	e032      	b.n	800b48e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b428:	6839      	ldr	r1, [r7, #0]
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f001 fcd1 	bl	800cdd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b430:	2303      	movs	r3, #3
 800b432:	75fb      	strb	r3, [r7, #23]
          break;
 800b434:	e02b      	b.n	800b48e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	2b03      	cmp	r3, #3
 800b440:	d107      	bne.n	800b452 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b442:	f107 030d 	add.w	r3, r7, #13
 800b446:	2201      	movs	r2, #1
 800b448:	4619      	mov	r1, r3
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f001 fd3e 	bl	800cecc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b450:	e01d      	b.n	800b48e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b452:	6839      	ldr	r1, [r7, #0]
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f001 fcbc 	bl	800cdd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b45a:	2303      	movs	r3, #3
 800b45c:	75fb      	strb	r3, [r7, #23]
          break;
 800b45e:	e016      	b.n	800b48e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b466:	b2db      	uxtb	r3, r3
 800b468:	2b03      	cmp	r3, #3
 800b46a:	d00f      	beq.n	800b48c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b46c:	6839      	ldr	r1, [r7, #0]
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f001 fcaf 	bl	800cdd2 <USBD_CtlError>
            ret = USBD_FAIL;
 800b474:	2303      	movs	r3, #3
 800b476:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b478:	e008      	b.n	800b48c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b47a:	6839      	ldr	r1, [r7, #0]
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f001 fca8 	bl	800cdd2 <USBD_CtlError>
          ret = USBD_FAIL;
 800b482:	2303      	movs	r3, #3
 800b484:	75fb      	strb	r3, [r7, #23]
          break;
 800b486:	e002      	b.n	800b48e <USBD_CDC_Setup+0x19e>
          break;
 800b488:	bf00      	nop
 800b48a:	e008      	b.n	800b49e <USBD_CDC_Setup+0x1ae>
          break;
 800b48c:	bf00      	nop
      }
      break;
 800b48e:	e006      	b.n	800b49e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b490:	6839      	ldr	r1, [r7, #0]
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f001 fc9d 	bl	800cdd2 <USBD_CtlError>
      ret = USBD_FAIL;
 800b498:	2303      	movs	r3, #3
 800b49a:	75fb      	strb	r3, [r7, #23]
      break;
 800b49c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b49e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3718      	adds	r7, #24
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	32b0      	adds	r2, #176	@ 0xb0
 800b4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d101      	bne.n	800b4d2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b4ce:	2303      	movs	r3, #3
 800b4d0:	e065      	b.n	800b59e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	32b0      	adds	r2, #176	@ 0xb0
 800b4dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b4e2:	78fb      	ldrb	r3, [r7, #3]
 800b4e4:	f003 020f 	and.w	r2, r3, #15
 800b4e8:	6879      	ldr	r1, [r7, #4]
 800b4ea:	4613      	mov	r3, r2
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	4413      	add	r3, r2
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	440b      	add	r3, r1
 800b4f4:	3314      	adds	r3, #20
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d02f      	beq.n	800b55c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b4fc:	78fb      	ldrb	r3, [r7, #3]
 800b4fe:	f003 020f 	and.w	r2, r3, #15
 800b502:	6879      	ldr	r1, [r7, #4]
 800b504:	4613      	mov	r3, r2
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	4413      	add	r3, r2
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	440b      	add	r3, r1
 800b50e:	3314      	adds	r3, #20
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	78fb      	ldrb	r3, [r7, #3]
 800b514:	f003 010f 	and.w	r1, r3, #15
 800b518:	68f8      	ldr	r0, [r7, #12]
 800b51a:	460b      	mov	r3, r1
 800b51c:	00db      	lsls	r3, r3, #3
 800b51e:	440b      	add	r3, r1
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	4403      	add	r3, r0
 800b524:	331c      	adds	r3, #28
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	fbb2 f1f3 	udiv	r1, r2, r3
 800b52c:	fb01 f303 	mul.w	r3, r1, r3
 800b530:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b532:	2b00      	cmp	r3, #0
 800b534:	d112      	bne.n	800b55c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b536:	78fb      	ldrb	r3, [r7, #3]
 800b538:	f003 020f 	and.w	r2, r3, #15
 800b53c:	6879      	ldr	r1, [r7, #4]
 800b53e:	4613      	mov	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	440b      	add	r3, r1
 800b548:	3314      	adds	r3, #20
 800b54a:	2200      	movs	r2, #0
 800b54c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b54e:	78f9      	ldrb	r1, [r7, #3]
 800b550:	2300      	movs	r3, #0
 800b552:	2200      	movs	r2, #0
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f002 fa24 	bl	800d9a2 <USBD_LL_Transmit>
 800b55a:	e01f      	b.n	800b59c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	2200      	movs	r2, #0
 800b560:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	33b0      	adds	r3, #176	@ 0xb0
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4413      	add	r3, r2
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	691b      	ldr	r3, [r3, #16]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d010      	beq.n	800b59c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	33b0      	adds	r3, #176	@ 0xb0
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	4413      	add	r3, r2
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b598:	78fa      	ldrb	r2, [r7, #3]
 800b59a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd80      	pop	{r7, pc}

0800b5a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b084      	sub	sp, #16
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
 800b5ae:	460b      	mov	r3, r1
 800b5b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	32b0      	adds	r2, #176	@ 0xb0
 800b5bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	32b0      	adds	r2, #176	@ 0xb0
 800b5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d101      	bne.n	800b5d8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b5d4:	2303      	movs	r3, #3
 800b5d6:	e01a      	b.n	800b60e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b5d8:	78fb      	ldrb	r3, [r7, #3]
 800b5da:	4619      	mov	r1, r3
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f002 fa22 	bl	800da26 <USBD_LL_GetRxDataSize>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	33b0      	adds	r3, #176	@ 0xb0
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	4413      	add	r3, r2
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	68fa      	ldr	r2, [r7, #12]
 800b5fe:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b602:	68fa      	ldr	r2, [r7, #12]
 800b604:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b608:	4611      	mov	r1, r2
 800b60a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3710      	adds	r7, #16
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b084      	sub	sp, #16
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	32b0      	adds	r2, #176	@ 0xb0
 800b628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b62c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d101      	bne.n	800b638 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b634:	2303      	movs	r3, #3
 800b636:	e024      	b.n	800b682 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	33b0      	adds	r3, #176	@ 0xb0
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	4413      	add	r3, r2
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d019      	beq.n	800b680 <USBD_CDC_EP0_RxReady+0x6a>
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b652:	2bff      	cmp	r3, #255	@ 0xff
 800b654:	d014      	beq.n	800b680 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	33b0      	adds	r3, #176	@ 0xb0
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	4413      	add	r3, r2
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b66e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b670:	68fa      	ldr	r2, [r7, #12]
 800b672:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b676:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	22ff      	movs	r2, #255	@ 0xff
 800b67c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
	...

0800b68c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b694:	2182      	movs	r1, #130	@ 0x82
 800b696:	4818      	ldr	r0, [pc, #96]	@ (800b6f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b698:	f000 fd62 	bl	800c160 <USBD_GetEpDesc>
 800b69c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b69e:	2101      	movs	r1, #1
 800b6a0:	4815      	ldr	r0, [pc, #84]	@ (800b6f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b6a2:	f000 fd5d 	bl	800c160 <USBD_GetEpDesc>
 800b6a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b6a8:	2181      	movs	r1, #129	@ 0x81
 800b6aa:	4813      	ldr	r0, [pc, #76]	@ (800b6f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b6ac:	f000 fd58 	bl	800c160 <USBD_GetEpDesc>
 800b6b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d002      	beq.n	800b6be <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	2210      	movs	r2, #16
 800b6bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d006      	beq.n	800b6d2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6cc:	711a      	strb	r2, [r3, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d006      	beq.n	800b6e6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6e0:	711a      	strb	r2, [r3, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2243      	movs	r2, #67	@ 0x43
 800b6ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b6ec:	4b02      	ldr	r3, [pc, #8]	@ (800b6f8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	2000007c 	.word	0x2000007c

0800b6fc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b086      	sub	sp, #24
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b704:	2182      	movs	r1, #130	@ 0x82
 800b706:	4818      	ldr	r0, [pc, #96]	@ (800b768 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b708:	f000 fd2a 	bl	800c160 <USBD_GetEpDesc>
 800b70c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b70e:	2101      	movs	r1, #1
 800b710:	4815      	ldr	r0, [pc, #84]	@ (800b768 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b712:	f000 fd25 	bl	800c160 <USBD_GetEpDesc>
 800b716:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b718:	2181      	movs	r1, #129	@ 0x81
 800b71a:	4813      	ldr	r0, [pc, #76]	@ (800b768 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b71c:	f000 fd20 	bl	800c160 <USBD_GetEpDesc>
 800b720:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d002      	beq.n	800b72e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	2210      	movs	r2, #16
 800b72c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d006      	beq.n	800b742 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	2200      	movs	r2, #0
 800b738:	711a      	strb	r2, [r3, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f042 0202 	orr.w	r2, r2, #2
 800b740:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d006      	beq.n	800b756 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2200      	movs	r2, #0
 800b74c:	711a      	strb	r2, [r3, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	f042 0202 	orr.w	r2, r2, #2
 800b754:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2243      	movs	r2, #67	@ 0x43
 800b75a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b75c:	4b02      	ldr	r3, [pc, #8]	@ (800b768 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3718      	adds	r7, #24
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	2000007c 	.word	0x2000007c

0800b76c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b774:	2182      	movs	r1, #130	@ 0x82
 800b776:	4818      	ldr	r0, [pc, #96]	@ (800b7d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b778:	f000 fcf2 	bl	800c160 <USBD_GetEpDesc>
 800b77c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b77e:	2101      	movs	r1, #1
 800b780:	4815      	ldr	r0, [pc, #84]	@ (800b7d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b782:	f000 fced 	bl	800c160 <USBD_GetEpDesc>
 800b786:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b788:	2181      	movs	r1, #129	@ 0x81
 800b78a:	4813      	ldr	r0, [pc, #76]	@ (800b7d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b78c:	f000 fce8 	bl	800c160 <USBD_GetEpDesc>
 800b790:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d002      	beq.n	800b79e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	2210      	movs	r2, #16
 800b79c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d006      	beq.n	800b7b2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b7ac:	711a      	strb	r2, [r3, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d006      	beq.n	800b7c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b7c0:	711a      	strb	r2, [r3, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2243      	movs	r2, #67	@ 0x43
 800b7ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b7cc:	4b02      	ldr	r3, [pc, #8]	@ (800b7d8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3718      	adds	r7, #24
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	2000007c 	.word	0x2000007c

0800b7dc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	220a      	movs	r2, #10
 800b7e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b7ea:	4b03      	ldr	r3, [pc, #12]	@ (800b7f8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr
 800b7f8:	20000038 	.word	0x20000038

0800b7fc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d101      	bne.n	800b810 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b80c:	2303      	movs	r3, #3
 800b80e:	e009      	b.n	800b824 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	33b0      	adds	r3, #176	@ 0xb0
 800b81a:	009b      	lsls	r3, r3, #2
 800b81c:	4413      	add	r3, r2
 800b81e:	683a      	ldr	r2, [r7, #0]
 800b820:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b822:	2300      	movs	r3, #0
}
 800b824:	4618      	mov	r0, r3
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b830:	b480      	push	{r7}
 800b832:	b087      	sub	sp, #28
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	32b0      	adds	r2, #176	@ 0xb0
 800b846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b84a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d101      	bne.n	800b856 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b852:	2303      	movs	r3, #3
 800b854:	e008      	b.n	800b868 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	68ba      	ldr	r2, [r7, #8]
 800b85a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b866:	2300      	movs	r3, #0
}
 800b868:	4618      	mov	r0, r3
 800b86a:	371c      	adds	r7, #28
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	32b0      	adds	r2, #176	@ 0xb0
 800b888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b88c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d101      	bne.n	800b898 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b894:	2303      	movs	r3, #3
 800b896:	e004      	b.n	800b8a2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	683a      	ldr	r2, [r7, #0]
 800b89c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b8a0:	2300      	movs	r3, #0
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3714      	adds	r7, #20
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
	...

0800b8b0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	32b0      	adds	r2, #176	@ 0xb0
 800b8c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8c6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d101      	bne.n	800b8d6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b8d2:	2303      	movs	r3, #3
 800b8d4:	e025      	b.n	800b922 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d11f      	bne.n	800b920 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b8e8:	4b10      	ldr	r3, [pc, #64]	@ (800b92c <USBD_CDC_TransmitPacket+0x7c>)
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	f003 020f 	and.w	r2, r3, #15
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	009b      	lsls	r3, r3, #2
 800b8fc:	4413      	add	r3, r2
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	4403      	add	r3, r0
 800b902:	3314      	adds	r3, #20
 800b904:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b906:	4b09      	ldr	r3, [pc, #36]	@ (800b92c <USBD_CDC_TransmitPacket+0x7c>)
 800b908:	7819      	ldrb	r1, [r3, #0]
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f002 f843 	bl	800d9a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b91c:	2300      	movs	r3, #0
 800b91e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b920:	7bfb      	ldrb	r3, [r7, #15]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	200000bf 	.word	0x200000bf

0800b930 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	32b0      	adds	r2, #176	@ 0xb0
 800b942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b946:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	32b0      	adds	r2, #176	@ 0xb0
 800b952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d101      	bne.n	800b95e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b95a:	2303      	movs	r3, #3
 800b95c:	e018      	b.n	800b990 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	7c1b      	ldrb	r3, [r3, #16]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d10a      	bne.n	800b97c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b966:	4b0c      	ldr	r3, [pc, #48]	@ (800b998 <USBD_CDC_ReceivePacket+0x68>)
 800b968:	7819      	ldrb	r1, [r3, #0]
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b970:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f002 f835 	bl	800d9e4 <USBD_LL_PrepareReceive>
 800b97a:	e008      	b.n	800b98e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b97c:	4b06      	ldr	r3, [pc, #24]	@ (800b998 <USBD_CDC_ReceivePacket+0x68>)
 800b97e:	7819      	ldrb	r1, [r3, #0]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b986:	2340      	movs	r3, #64	@ 0x40
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f002 f82b 	bl	800d9e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	200000c0 	.word	0x200000c0

0800b99c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b086      	sub	sp, #24
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d101      	bne.n	800b9b4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	e01f      	b.n	800b9f4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d003      	beq.n	800b9da <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	79fa      	ldrb	r2, [r7, #7]
 800b9e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b9e8:	68f8      	ldr	r0, [r7, #12]
 800b9ea:	f001 fea5 	bl	800d738 <USBD_LL_Init>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b9f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3718      	adds	r7, #24
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba06:	2300      	movs	r3, #0
 800ba08:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d101      	bne.n	800ba14 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e025      	b.n	800ba60 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	32ae      	adds	r2, #174	@ 0xae
 800ba26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d00f      	beq.n	800ba50 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	32ae      	adds	r2, #174	@ 0xae
 800ba3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba40:	f107 020e 	add.w	r2, r7, #14
 800ba44:	4610      	mov	r0, r2
 800ba46:	4798      	blx	r3
 800ba48:	4602      	mov	r2, r0
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ba56:	1c5a      	adds	r2, r3, #1
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f001 fead 	bl	800d7d0 <USBD_LL_Start>
 800ba76:	4603      	mov	r3, r0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3708      	adds	r7, #8
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba88:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	370c      	adds	r7, #12
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr

0800ba96 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b084      	sub	sp, #16
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
 800ba9e:	460b      	mov	r3, r1
 800baa0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800baa2:	2300      	movs	r3, #0
 800baa4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800baac:	2b00      	cmp	r3, #0
 800baae:	d009      	beq.n	800bac4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	78fa      	ldrb	r2, [r7, #3]
 800baba:	4611      	mov	r1, r2
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	4798      	blx	r3
 800bac0:	4603      	mov	r3, r0
 800bac2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b084      	sub	sp, #16
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	6078      	str	r0, [r7, #4]
 800bad6:	460b      	mov	r3, r1
 800bad8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	78fa      	ldrb	r2, [r7, #3]
 800bae8:	4611      	mov	r1, r2
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	4798      	blx	r3
 800baee:	4603      	mov	r3, r0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d001      	beq.n	800baf8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800baf4:	2303      	movs	r3, #3
 800baf6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800baf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3710      	adds	r7, #16
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b084      	sub	sp, #16
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	4618      	mov	r0, r3
 800bb16:	f001 f922 	bl	800cd5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bb28:	461a      	mov	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb36:	f003 031f 	and.w	r3, r3, #31
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	d01a      	beq.n	800bb74 <USBD_LL_SetupStage+0x72>
 800bb3e:	2b02      	cmp	r3, #2
 800bb40:	d822      	bhi.n	800bb88 <USBD_LL_SetupStage+0x86>
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d002      	beq.n	800bb4c <USBD_LL_SetupStage+0x4a>
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d00a      	beq.n	800bb60 <USBD_LL_SetupStage+0x5e>
 800bb4a:	e01d      	b.n	800bb88 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb52:	4619      	mov	r1, r3
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 fb77 	bl	800c248 <USBD_StdDevReq>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb5e:	e020      	b.n	800bba2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 fbdf 	bl	800c32c <USBD_StdItfReq>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	73fb      	strb	r3, [r7, #15]
      break;
 800bb72:	e016      	b.n	800bba2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb7a:	4619      	mov	r1, r3
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 fc41 	bl	800c404 <USBD_StdEPReq>
 800bb82:	4603      	mov	r3, r0
 800bb84:	73fb      	strb	r3, [r7, #15]
      break;
 800bb86:	e00c      	b.n	800bba2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb8e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	4619      	mov	r1, r3
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f001 fe7a 	bl	800d890 <USBD_LL_StallEP>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	73fb      	strb	r3, [r7, #15]
      break;
 800bba0:	bf00      	nop
  }

  return ret;
 800bba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b086      	sub	sp, #24
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	607a      	str	r2, [r7, #4]
 800bbb8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800bbbe:	7afb      	ldrb	r3, [r7, #11]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d177      	bne.n	800bcb4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bbca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bbd2:	2b03      	cmp	r3, #3
 800bbd4:	f040 80a1 	bne.w	800bd1a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	693a      	ldr	r2, [r7, #16]
 800bbde:	8992      	ldrh	r2, [r2, #12]
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d91c      	bls.n	800bc1e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	693a      	ldr	r2, [r7, #16]
 800bbea:	8992      	ldrh	r2, [r2, #12]
 800bbec:	1a9a      	subs	r2, r3, r2
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800bbf2:	693b      	ldr	r3, [r7, #16]
 800bbf4:	691b      	ldr	r3, [r3, #16]
 800bbf6:	693a      	ldr	r2, [r7, #16]
 800bbf8:	8992      	ldrh	r2, [r2, #12]
 800bbfa:	441a      	add	r2, r3
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	6919      	ldr	r1, [r3, #16]
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	899b      	ldrh	r3, [r3, #12]
 800bc08:	461a      	mov	r2, r3
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	685b      	ldr	r3, [r3, #4]
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	bf38      	it	cc
 800bc12:	4613      	movcc	r3, r2
 800bc14:	461a      	mov	r2, r3
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f001 f9a8 	bl	800cf6c <USBD_CtlContinueRx>
 800bc1c:	e07d      	b.n	800bd1a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bc24:	f003 031f 	and.w	r3, r3, #31
 800bc28:	2b02      	cmp	r3, #2
 800bc2a:	d014      	beq.n	800bc56 <USBD_LL_DataOutStage+0xaa>
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	d81d      	bhi.n	800bc6c <USBD_LL_DataOutStage+0xc0>
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d002      	beq.n	800bc3a <USBD_LL_DataOutStage+0x8e>
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d003      	beq.n	800bc40 <USBD_LL_DataOutStage+0x94>
 800bc38:	e018      	b.n	800bc6c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	75bb      	strb	r3, [r7, #22]
            break;
 800bc3e:	e018      	b.n	800bc72 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	4619      	mov	r1, r3
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f000 fa6e 	bl	800c12c <USBD_CoreFindIF>
 800bc50:	4603      	mov	r3, r0
 800bc52:	75bb      	strb	r3, [r7, #22]
            break;
 800bc54:	e00d      	b.n	800bc72 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	4619      	mov	r1, r3
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	f000 fa70 	bl	800c146 <USBD_CoreFindEP>
 800bc66:	4603      	mov	r3, r0
 800bc68:	75bb      	strb	r3, [r7, #22]
            break;
 800bc6a:	e002      	b.n	800bc72 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	75bb      	strb	r3, [r7, #22]
            break;
 800bc70:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bc72:	7dbb      	ldrb	r3, [r7, #22]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d119      	bne.n	800bcac <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	2b03      	cmp	r3, #3
 800bc82:	d113      	bne.n	800bcac <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bc84:	7dba      	ldrb	r2, [r7, #22]
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	32ae      	adds	r2, #174	@ 0xae
 800bc8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc8e:	691b      	ldr	r3, [r3, #16]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d00b      	beq.n	800bcac <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800bc94:	7dba      	ldrb	r2, [r7, #22]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bc9c:	7dba      	ldrb	r2, [r7, #22]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	32ae      	adds	r2, #174	@ 0xae
 800bca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bca6:	691b      	ldr	r3, [r3, #16]
 800bca8:	68f8      	ldr	r0, [r7, #12]
 800bcaa:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bcac:	68f8      	ldr	r0, [r7, #12]
 800bcae:	f001 f96e 	bl	800cf8e <USBD_CtlSendStatus>
 800bcb2:	e032      	b.n	800bd1a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bcb4:	7afb      	ldrb	r3, [r7, #11]
 800bcb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	f000 fa41 	bl	800c146 <USBD_CoreFindEP>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcc8:	7dbb      	ldrb	r3, [r7, #22]
 800bcca:	2bff      	cmp	r3, #255	@ 0xff
 800bccc:	d025      	beq.n	800bd1a <USBD_LL_DataOutStage+0x16e>
 800bcce:	7dbb      	ldrb	r3, [r7, #22]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d122      	bne.n	800bd1a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	2b03      	cmp	r3, #3
 800bcde:	d117      	bne.n	800bd10 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bce0:	7dba      	ldrb	r2, [r7, #22]
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	32ae      	adds	r2, #174	@ 0xae
 800bce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcea:	699b      	ldr	r3, [r3, #24]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d00f      	beq.n	800bd10 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800bcf0:	7dba      	ldrb	r2, [r7, #22]
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bcf8:	7dba      	ldrb	r2, [r7, #22]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	32ae      	adds	r2, #174	@ 0xae
 800bcfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd02:	699b      	ldr	r3, [r3, #24]
 800bd04:	7afa      	ldrb	r2, [r7, #11]
 800bd06:	4611      	mov	r1, r2
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	4798      	blx	r3
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bd10:	7dfb      	ldrb	r3, [r7, #23]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d001      	beq.n	800bd1a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800bd16:	7dfb      	ldrb	r3, [r7, #23]
 800bd18:	e000      	b.n	800bd1c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800bd1a:	2300      	movs	r3, #0
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b086      	sub	sp, #24
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	607a      	str	r2, [r7, #4]
 800bd30:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800bd32:	7afb      	ldrb	r3, [r7, #11]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d178      	bne.n	800be2a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	3314      	adds	r3, #20
 800bd3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	d163      	bne.n	800be10 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd48:	693b      	ldr	r3, [r7, #16]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	693a      	ldr	r2, [r7, #16]
 800bd4e:	8992      	ldrh	r2, [r2, #12]
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d91c      	bls.n	800bd8e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	685b      	ldr	r3, [r3, #4]
 800bd58:	693a      	ldr	r2, [r7, #16]
 800bd5a:	8992      	ldrh	r2, [r2, #12]
 800bd5c:	1a9a      	subs	r2, r3, r2
 800bd5e:	693b      	ldr	r3, [r7, #16]
 800bd60:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	691b      	ldr	r3, [r3, #16]
 800bd66:	693a      	ldr	r2, [r7, #16]
 800bd68:	8992      	ldrh	r2, [r2, #12]
 800bd6a:	441a      	add	r2, r3
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	6919      	ldr	r1, [r3, #16]
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	461a      	mov	r2, r3
 800bd7a:	68f8      	ldr	r0, [r7, #12]
 800bd7c:	f001 f8c4 	bl	800cf08 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd80:	2300      	movs	r3, #0
 800bd82:	2200      	movs	r2, #0
 800bd84:	2100      	movs	r1, #0
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f001 fe2c 	bl	800d9e4 <USBD_LL_PrepareReceive>
 800bd8c:	e040      	b.n	800be10 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	899b      	ldrh	r3, [r3, #12]
 800bd92:	461a      	mov	r2, r3
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d11c      	bne.n	800bdd6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	693a      	ldr	r2, [r7, #16]
 800bda2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d316      	bcc.n	800bdd6 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d20f      	bcs.n	800bdd6 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	2100      	movs	r1, #0
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	f001 f8a4 	bl	800cf08 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdc8:	2300      	movs	r3, #0
 800bdca:	2200      	movs	r2, #0
 800bdcc:	2100      	movs	r1, #0
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f001 fe08 	bl	800d9e4 <USBD_LL_PrepareReceive>
 800bdd4:	e01c      	b.n	800be10 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	2b03      	cmp	r3, #3
 800bde0:	d10f      	bne.n	800be02 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bde8:	68db      	ldr	r3, [r3, #12]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d009      	beq.n	800be02 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdfc:	68db      	ldr	r3, [r3, #12]
 800bdfe:	68f8      	ldr	r0, [r7, #12]
 800be00:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800be02:	2180      	movs	r1, #128	@ 0x80
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f001 fd43 	bl	800d890 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800be0a:	68f8      	ldr	r0, [r7, #12]
 800be0c:	f001 f8d2 	bl	800cfb4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d03a      	beq.n	800be90 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f7ff fe30 	bl	800ba80 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2200      	movs	r2, #0
 800be24:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800be28:	e032      	b.n	800be90 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800be2a:	7afb      	ldrb	r3, [r7, #11]
 800be2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800be30:	b2db      	uxtb	r3, r3
 800be32:	4619      	mov	r1, r3
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	f000 f986 	bl	800c146 <USBD_CoreFindEP>
 800be3a:	4603      	mov	r3, r0
 800be3c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be3e:	7dfb      	ldrb	r3, [r7, #23]
 800be40:	2bff      	cmp	r3, #255	@ 0xff
 800be42:	d025      	beq.n	800be90 <USBD_LL_DataInStage+0x16c>
 800be44:	7dfb      	ldrb	r3, [r7, #23]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d122      	bne.n	800be90 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be50:	b2db      	uxtb	r3, r3
 800be52:	2b03      	cmp	r3, #3
 800be54:	d11c      	bne.n	800be90 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800be56:	7dfa      	ldrb	r2, [r7, #23]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	32ae      	adds	r2, #174	@ 0xae
 800be5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be60:	695b      	ldr	r3, [r3, #20]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d014      	beq.n	800be90 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800be66:	7dfa      	ldrb	r2, [r7, #23]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800be6e:	7dfa      	ldrb	r2, [r7, #23]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	32ae      	adds	r2, #174	@ 0xae
 800be74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be78:	695b      	ldr	r3, [r3, #20]
 800be7a:	7afa      	ldrb	r2, [r7, #11]
 800be7c:	4611      	mov	r1, r2
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	4798      	blx	r3
 800be82:	4603      	mov	r3, r0
 800be84:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800be86:	7dbb      	ldrb	r3, [r7, #22]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d001      	beq.n	800be90 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800be8c:	7dbb      	ldrb	r3, [r7, #22]
 800be8e:	e000      	b.n	800be92 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3718      	adds	r7, #24
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b084      	sub	sp, #16
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bea2:	2300      	movs	r3, #0
 800bea4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2201      	movs	r2, #1
 800beaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2200      	movs	r2, #0
 800beba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	2200      	movs	r2, #0
 800bec8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d014      	beq.n	800bf00 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d00e      	beq.n	800bf00 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	6852      	ldr	r2, [r2, #4]
 800beee:	b2d2      	uxtb	r2, r2
 800bef0:	4611      	mov	r1, r2
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	4798      	blx	r3
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d001      	beq.n	800bf00 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800befc:	2303      	movs	r3, #3
 800befe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf00:	2340      	movs	r3, #64	@ 0x40
 800bf02:	2200      	movs	r2, #0
 800bf04:	2100      	movs	r1, #0
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f001 fc7d 	bl	800d806 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2240      	movs	r2, #64	@ 0x40
 800bf18:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf1c:	2340      	movs	r3, #64	@ 0x40
 800bf1e:	2200      	movs	r2, #0
 800bf20:	2180      	movs	r1, #128	@ 0x80
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f001 fc6f 	bl	800d806 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2240      	movs	r2, #64	@ 0x40
 800bf34:	841a      	strh	r2, [r3, #32]

  return ret;
 800bf36:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3710      	adds	r7, #16
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b083      	sub	sp, #12
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	78fa      	ldrb	r2, [r7, #3]
 800bf50:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	370c      	adds	r7, #12
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	2b04      	cmp	r3, #4
 800bf72:	d006      	beq.n	800bf82 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf7a:	b2da      	uxtb	r2, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2204      	movs	r2, #4
 800bf86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b083      	sub	sp, #12
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfa6:	b2db      	uxtb	r3, r3
 800bfa8:	2b04      	cmp	r3, #4
 800bfaa:	d106      	bne.n	800bfba <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bfb2:	b2da      	uxtb	r2, r3
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b082      	sub	sp, #8
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	2b03      	cmp	r3, #3
 800bfda:	d110      	bne.n	800bffe <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00b      	beq.n	800bffe <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfec:	69db      	ldr	r3, [r3, #28]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d005      	beq.n	800bffe <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bff8:	69db      	ldr	r3, [r3, #28]
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bffe:	2300      	movs	r3, #0
}
 800c000:	4618      	mov	r0, r3
 800c002:	3708      	adds	r7, #8
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	460b      	mov	r3, r1
 800c012:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	32ae      	adds	r2, #174	@ 0xae
 800c01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d101      	bne.n	800c02a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c026:	2303      	movs	r3, #3
 800c028:	e01c      	b.n	800c064 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c030:	b2db      	uxtb	r3, r3
 800c032:	2b03      	cmp	r3, #3
 800c034:	d115      	bne.n	800c062 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	32ae      	adds	r2, #174	@ 0xae
 800c040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c044:	6a1b      	ldr	r3, [r3, #32]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00b      	beq.n	800c062 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	32ae      	adds	r2, #174	@ 0xae
 800c054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c058:	6a1b      	ldr	r3, [r3, #32]
 800c05a:	78fa      	ldrb	r2, [r7, #3]
 800c05c:	4611      	mov	r1, r2
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c062:	2300      	movs	r3, #0
}
 800c064:	4618      	mov	r0, r3
 800c066:	3708      	adds	r7, #8
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	460b      	mov	r3, r1
 800c076:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	32ae      	adds	r2, #174	@ 0xae
 800c082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d101      	bne.n	800c08e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c08a:	2303      	movs	r3, #3
 800c08c:	e01c      	b.n	800c0c8 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c094:	b2db      	uxtb	r3, r3
 800c096:	2b03      	cmp	r3, #3
 800c098:	d115      	bne.n	800c0c6 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	32ae      	adds	r2, #174	@ 0xae
 800c0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d00b      	beq.n	800c0c6 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	32ae      	adds	r2, #174	@ 0xae
 800c0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0be:	78fa      	ldrb	r2, [r7, #3]
 800c0c0:	4611      	mov	r1, r2
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c0c6:	2300      	movs	r3, #0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3708      	adds	r7, #8
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b083      	sub	sp, #12
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0d8:	2300      	movs	r3, #0
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	370c      	adds	r7, #12
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e4:	4770      	bx	lr

0800c0e6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c0e6:	b580      	push	{r7, lr}
 800c0e8:	b084      	sub	sp, #16
 800c0ea:	af00      	add	r7, sp, #0
 800c0ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00e      	beq.n	800c122 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	6852      	ldr	r2, [r2, #4]
 800c110:	b2d2      	uxtb	r2, r2
 800c112:	4611      	mov	r1, r2
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	4798      	blx	r3
 800c118:	4603      	mov	r3, r0
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d001      	beq.n	800c122 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c11e:	2303      	movs	r3, #3
 800c120:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c122:	7bfb      	ldrb	r3, [r7, #15]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3710      	adds	r7, #16
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	460b      	mov	r3, r1
 800c136:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c138:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	370c      	adds	r7, #12
 800c13e:	46bd      	mov	sp, r7
 800c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c144:	4770      	bx	lr

0800c146 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c146:	b480      	push	{r7}
 800c148:	b083      	sub	sp, #12
 800c14a:	af00      	add	r7, sp, #0
 800c14c:	6078      	str	r0, [r7, #4]
 800c14e:	460b      	mov	r3, r1
 800c150:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c152:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c154:	4618      	mov	r0, r3
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b086      	sub	sp, #24
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	460b      	mov	r3, r1
 800c16a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c174:	2300      	movs	r3, #0
 800c176:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	885b      	ldrh	r3, [r3, #2]
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	68fa      	ldr	r2, [r7, #12]
 800c180:	7812      	ldrb	r2, [r2, #0]
 800c182:	4293      	cmp	r3, r2
 800c184:	d91f      	bls.n	800c1c6 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c18c:	e013      	b.n	800c1b6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c18e:	f107 030a 	add.w	r3, r7, #10
 800c192:	4619      	mov	r1, r3
 800c194:	6978      	ldr	r0, [r7, #20]
 800c196:	f000 f81b 	bl	800c1d0 <USBD_GetNextDesc>
 800c19a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	785b      	ldrb	r3, [r3, #1]
 800c1a0:	2b05      	cmp	r3, #5
 800c1a2:	d108      	bne.n	800c1b6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	789b      	ldrb	r3, [r3, #2]
 800c1ac:	78fa      	ldrb	r2, [r7, #3]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d008      	beq.n	800c1c4 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	885b      	ldrh	r3, [r3, #2]
 800c1ba:	b29a      	uxth	r2, r3
 800c1bc:	897b      	ldrh	r3, [r7, #10]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d8e5      	bhi.n	800c18e <USBD_GetEpDesc+0x2e>
 800c1c2:	e000      	b.n	800c1c6 <USBD_GetEpDesc+0x66>
          break;
 800c1c4:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c1c6:	693b      	ldr	r3, [r7, #16]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3718      	adds	r7, #24
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b085      	sub	sp, #20
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	881b      	ldrh	r3, [r3, #0]
 800c1e2:	68fa      	ldr	r2, [r7, #12]
 800c1e4:	7812      	ldrb	r2, [r2, #0]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	b29a      	uxth	r2, r3
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3714      	adds	r7, #20
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c208:	b480      	push	{r7}
 800c20a:	b087      	sub	sp, #28
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	3301      	adds	r3, #1
 800c21e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c226:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c22a:	021b      	lsls	r3, r3, #8
 800c22c:	b21a      	sxth	r2, r3
 800c22e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c232:	4313      	orrs	r3, r2
 800c234:	b21b      	sxth	r3, r3
 800c236:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c238:	89fb      	ldrh	r3, [r7, #14]
}
 800c23a:	4618      	mov	r0, r3
 800c23c:	371c      	adds	r7, #28
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr
	...

0800c248 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c252:	2300      	movs	r3, #0
 800c254:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c25e:	2b40      	cmp	r3, #64	@ 0x40
 800c260:	d005      	beq.n	800c26e <USBD_StdDevReq+0x26>
 800c262:	2b40      	cmp	r3, #64	@ 0x40
 800c264:	d857      	bhi.n	800c316 <USBD_StdDevReq+0xce>
 800c266:	2b00      	cmp	r3, #0
 800c268:	d00f      	beq.n	800c28a <USBD_StdDevReq+0x42>
 800c26a:	2b20      	cmp	r3, #32
 800c26c:	d153      	bne.n	800c316 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	32ae      	adds	r2, #174	@ 0xae
 800c278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c27c:	689b      	ldr	r3, [r3, #8]
 800c27e:	6839      	ldr	r1, [r7, #0]
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	4798      	blx	r3
 800c284:	4603      	mov	r3, r0
 800c286:	73fb      	strb	r3, [r7, #15]
      break;
 800c288:	e04a      	b.n	800c320 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	785b      	ldrb	r3, [r3, #1]
 800c28e:	2b09      	cmp	r3, #9
 800c290:	d83b      	bhi.n	800c30a <USBD_StdDevReq+0xc2>
 800c292:	a201      	add	r2, pc, #4	@ (adr r2, 800c298 <USBD_StdDevReq+0x50>)
 800c294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c298:	0800c2ed 	.word	0x0800c2ed
 800c29c:	0800c301 	.word	0x0800c301
 800c2a0:	0800c30b 	.word	0x0800c30b
 800c2a4:	0800c2f7 	.word	0x0800c2f7
 800c2a8:	0800c30b 	.word	0x0800c30b
 800c2ac:	0800c2cb 	.word	0x0800c2cb
 800c2b0:	0800c2c1 	.word	0x0800c2c1
 800c2b4:	0800c30b 	.word	0x0800c30b
 800c2b8:	0800c2e3 	.word	0x0800c2e3
 800c2bc:	0800c2d5 	.word	0x0800c2d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fa3e 	bl	800c744 <USBD_GetDescriptor>
          break;
 800c2c8:	e024      	b.n	800c314 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c2ca:	6839      	ldr	r1, [r7, #0]
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 fba3 	bl	800ca18 <USBD_SetAddress>
          break;
 800c2d2:	e01f      	b.n	800c314 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c2d4:	6839      	ldr	r1, [r7, #0]
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 fbe2 	bl	800caa0 <USBD_SetConfig>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	73fb      	strb	r3, [r7, #15]
          break;
 800c2e0:	e018      	b.n	800c314 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c2e2:	6839      	ldr	r1, [r7, #0]
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 fc85 	bl	800cbf4 <USBD_GetConfig>
          break;
 800c2ea:	e013      	b.n	800c314 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fcb6 	bl	800cc60 <USBD_GetStatus>
          break;
 800c2f4:	e00e      	b.n	800c314 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c2f6:	6839      	ldr	r1, [r7, #0]
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 fce5 	bl	800ccc8 <USBD_SetFeature>
          break;
 800c2fe:	e009      	b.n	800c314 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c300:	6839      	ldr	r1, [r7, #0]
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 fd09 	bl	800cd1a <USBD_ClrFeature>
          break;
 800c308:	e004      	b.n	800c314 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c30a:	6839      	ldr	r1, [r7, #0]
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f000 fd60 	bl	800cdd2 <USBD_CtlError>
          break;
 800c312:	bf00      	nop
      }
      break;
 800c314:	e004      	b.n	800c320 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c316:	6839      	ldr	r1, [r7, #0]
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 fd5a 	bl	800cdd2 <USBD_CtlError>
      break;
 800c31e:	bf00      	nop
  }

  return ret;
 800c320:	7bfb      	ldrb	r3, [r7, #15]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop

0800c32c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b084      	sub	sp, #16
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c336:	2300      	movs	r3, #0
 800c338:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c342:	2b40      	cmp	r3, #64	@ 0x40
 800c344:	d005      	beq.n	800c352 <USBD_StdItfReq+0x26>
 800c346:	2b40      	cmp	r3, #64	@ 0x40
 800c348:	d852      	bhi.n	800c3f0 <USBD_StdItfReq+0xc4>
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d001      	beq.n	800c352 <USBD_StdItfReq+0x26>
 800c34e:	2b20      	cmp	r3, #32
 800c350:	d14e      	bne.n	800c3f0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	3b01      	subs	r3, #1
 800c35c:	2b02      	cmp	r3, #2
 800c35e:	d840      	bhi.n	800c3e2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	889b      	ldrh	r3, [r3, #4]
 800c364:	b2db      	uxtb	r3, r3
 800c366:	2b01      	cmp	r3, #1
 800c368:	d836      	bhi.n	800c3d8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	889b      	ldrh	r3, [r3, #4]
 800c36e:	b2db      	uxtb	r3, r3
 800c370:	4619      	mov	r1, r3
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7ff feda 	bl	800c12c <USBD_CoreFindIF>
 800c378:	4603      	mov	r3, r0
 800c37a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c37c:	7bbb      	ldrb	r3, [r7, #14]
 800c37e:	2bff      	cmp	r3, #255	@ 0xff
 800c380:	d01d      	beq.n	800c3be <USBD_StdItfReq+0x92>
 800c382:	7bbb      	ldrb	r3, [r7, #14]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d11a      	bne.n	800c3be <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c388:	7bba      	ldrb	r2, [r7, #14]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	32ae      	adds	r2, #174	@ 0xae
 800c38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00f      	beq.n	800c3b8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c398:	7bba      	ldrb	r2, [r7, #14]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c3a0:	7bba      	ldrb	r2, [r7, #14]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	32ae      	adds	r2, #174	@ 0xae
 800c3a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	6839      	ldr	r1, [r7, #0]
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	4798      	blx	r3
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3b6:	e004      	b.n	800c3c2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c3b8:	2303      	movs	r3, #3
 800c3ba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3bc:	e001      	b.n	800c3c2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c3be:	2303      	movs	r3, #3
 800c3c0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	88db      	ldrh	r3, [r3, #6]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d110      	bne.n	800c3ec <USBD_StdItfReq+0xc0>
 800c3ca:	7bfb      	ldrb	r3, [r7, #15]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d10d      	bne.n	800c3ec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 fddc 	bl	800cf8e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c3d6:	e009      	b.n	800c3ec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c3d8:	6839      	ldr	r1, [r7, #0]
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 fcf9 	bl	800cdd2 <USBD_CtlError>
          break;
 800c3e0:	e004      	b.n	800c3ec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c3e2:	6839      	ldr	r1, [r7, #0]
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f000 fcf4 	bl	800cdd2 <USBD_CtlError>
          break;
 800c3ea:	e000      	b.n	800c3ee <USBD_StdItfReq+0xc2>
          break;
 800c3ec:	bf00      	nop
      }
      break;
 800c3ee:	e004      	b.n	800c3fa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 fced 	bl	800cdd2 <USBD_CtlError>
      break;
 800c3f8:	bf00      	nop
  }

  return ret;
 800c3fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3710      	adds	r7, #16
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b084      	sub	sp, #16
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c40e:	2300      	movs	r3, #0
 800c410:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	889b      	ldrh	r3, [r3, #4]
 800c416:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c420:	2b40      	cmp	r3, #64	@ 0x40
 800c422:	d007      	beq.n	800c434 <USBD_StdEPReq+0x30>
 800c424:	2b40      	cmp	r3, #64	@ 0x40
 800c426:	f200 8181 	bhi.w	800c72c <USBD_StdEPReq+0x328>
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d02a      	beq.n	800c484 <USBD_StdEPReq+0x80>
 800c42e:	2b20      	cmp	r3, #32
 800c430:	f040 817c 	bne.w	800c72c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c434:	7bbb      	ldrb	r3, [r7, #14]
 800c436:	4619      	mov	r1, r3
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f7ff fe84 	bl	800c146 <USBD_CoreFindEP>
 800c43e:	4603      	mov	r3, r0
 800c440:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c442:	7b7b      	ldrb	r3, [r7, #13]
 800c444:	2bff      	cmp	r3, #255	@ 0xff
 800c446:	f000 8176 	beq.w	800c736 <USBD_StdEPReq+0x332>
 800c44a:	7b7b      	ldrb	r3, [r7, #13]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	f040 8172 	bne.w	800c736 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800c452:	7b7a      	ldrb	r2, [r7, #13]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c45a:	7b7a      	ldrb	r2, [r7, #13]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	32ae      	adds	r2, #174	@ 0xae
 800c460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	2b00      	cmp	r3, #0
 800c468:	f000 8165 	beq.w	800c736 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c46c:	7b7a      	ldrb	r2, [r7, #13]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	32ae      	adds	r2, #174	@ 0xae
 800c472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	6839      	ldr	r1, [r7, #0]
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	4798      	blx	r3
 800c47e:	4603      	mov	r3, r0
 800c480:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c482:	e158      	b.n	800c736 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	785b      	ldrb	r3, [r3, #1]
 800c488:	2b03      	cmp	r3, #3
 800c48a:	d008      	beq.n	800c49e <USBD_StdEPReq+0x9a>
 800c48c:	2b03      	cmp	r3, #3
 800c48e:	f300 8147 	bgt.w	800c720 <USBD_StdEPReq+0x31c>
 800c492:	2b00      	cmp	r3, #0
 800c494:	f000 809b 	beq.w	800c5ce <USBD_StdEPReq+0x1ca>
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d03c      	beq.n	800c516 <USBD_StdEPReq+0x112>
 800c49c:	e140      	b.n	800c720 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4a4:	b2db      	uxtb	r3, r3
 800c4a6:	2b02      	cmp	r3, #2
 800c4a8:	d002      	beq.n	800c4b0 <USBD_StdEPReq+0xac>
 800c4aa:	2b03      	cmp	r3, #3
 800c4ac:	d016      	beq.n	800c4dc <USBD_StdEPReq+0xd8>
 800c4ae:	e02c      	b.n	800c50a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4b0:	7bbb      	ldrb	r3, [r7, #14]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d00d      	beq.n	800c4d2 <USBD_StdEPReq+0xce>
 800c4b6:	7bbb      	ldrb	r3, [r7, #14]
 800c4b8:	2b80      	cmp	r3, #128	@ 0x80
 800c4ba:	d00a      	beq.n	800c4d2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4bc:	7bbb      	ldrb	r3, [r7, #14]
 800c4be:	4619      	mov	r1, r3
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f001 f9e5 	bl	800d890 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4c6:	2180      	movs	r1, #128	@ 0x80
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f001 f9e1 	bl	800d890 <USBD_LL_StallEP>
 800c4ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4d0:	e020      	b.n	800c514 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c4d2:	6839      	ldr	r1, [r7, #0]
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 fc7c 	bl	800cdd2 <USBD_CtlError>
              break;
 800c4da:	e01b      	b.n	800c514 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	885b      	ldrh	r3, [r3, #2]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10e      	bne.n	800c502 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c4e4:	7bbb      	ldrb	r3, [r7, #14]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00b      	beq.n	800c502 <USBD_StdEPReq+0xfe>
 800c4ea:	7bbb      	ldrb	r3, [r7, #14]
 800c4ec:	2b80      	cmp	r3, #128	@ 0x80
 800c4ee:	d008      	beq.n	800c502 <USBD_StdEPReq+0xfe>
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	88db      	ldrh	r3, [r3, #6]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d104      	bne.n	800c502 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4f8:	7bbb      	ldrb	r3, [r7, #14]
 800c4fa:	4619      	mov	r1, r3
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f001 f9c7 	bl	800d890 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fd43 	bl	800cf8e <USBD_CtlSendStatus>

              break;
 800c508:	e004      	b.n	800c514 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c50a:	6839      	ldr	r1, [r7, #0]
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 fc60 	bl	800cdd2 <USBD_CtlError>
              break;
 800c512:	bf00      	nop
          }
          break;
 800c514:	e109      	b.n	800c72a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c51c:	b2db      	uxtb	r3, r3
 800c51e:	2b02      	cmp	r3, #2
 800c520:	d002      	beq.n	800c528 <USBD_StdEPReq+0x124>
 800c522:	2b03      	cmp	r3, #3
 800c524:	d016      	beq.n	800c554 <USBD_StdEPReq+0x150>
 800c526:	e04b      	b.n	800c5c0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c528:	7bbb      	ldrb	r3, [r7, #14]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d00d      	beq.n	800c54a <USBD_StdEPReq+0x146>
 800c52e:	7bbb      	ldrb	r3, [r7, #14]
 800c530:	2b80      	cmp	r3, #128	@ 0x80
 800c532:	d00a      	beq.n	800c54a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c534:	7bbb      	ldrb	r3, [r7, #14]
 800c536:	4619      	mov	r1, r3
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f001 f9a9 	bl	800d890 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c53e:	2180      	movs	r1, #128	@ 0x80
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f001 f9a5 	bl	800d890 <USBD_LL_StallEP>
 800c546:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c548:	e040      	b.n	800c5cc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c54a:	6839      	ldr	r1, [r7, #0]
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f000 fc40 	bl	800cdd2 <USBD_CtlError>
              break;
 800c552:	e03b      	b.n	800c5cc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	885b      	ldrh	r3, [r3, #2]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d136      	bne.n	800c5ca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c55c:	7bbb      	ldrb	r3, [r7, #14]
 800c55e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c562:	2b00      	cmp	r3, #0
 800c564:	d004      	beq.n	800c570 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c566:	7bbb      	ldrb	r3, [r7, #14]
 800c568:	4619      	mov	r1, r3
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f001 f9af 	bl	800d8ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c570:	6878      	ldr	r0, [r7, #4]
 800c572:	f000 fd0c 	bl	800cf8e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c576:	7bbb      	ldrb	r3, [r7, #14]
 800c578:	4619      	mov	r1, r3
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f7ff fde3 	bl	800c146 <USBD_CoreFindEP>
 800c580:	4603      	mov	r3, r0
 800c582:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c584:	7b7b      	ldrb	r3, [r7, #13]
 800c586:	2bff      	cmp	r3, #255	@ 0xff
 800c588:	d01f      	beq.n	800c5ca <USBD_StdEPReq+0x1c6>
 800c58a:	7b7b      	ldrb	r3, [r7, #13]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d11c      	bne.n	800c5ca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c590:	7b7a      	ldrb	r2, [r7, #13]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c598:	7b7a      	ldrb	r2, [r7, #13]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	32ae      	adds	r2, #174	@ 0xae
 800c59e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5a2:	689b      	ldr	r3, [r3, #8]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d010      	beq.n	800c5ca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c5a8:	7b7a      	ldrb	r2, [r7, #13]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	32ae      	adds	r2, #174	@ 0xae
 800c5ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	6839      	ldr	r1, [r7, #0]
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	4798      	blx	r3
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c5be:	e004      	b.n	800c5ca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c5c0:	6839      	ldr	r1, [r7, #0]
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 fc05 	bl	800cdd2 <USBD_CtlError>
              break;
 800c5c8:	e000      	b.n	800c5cc <USBD_StdEPReq+0x1c8>
              break;
 800c5ca:	bf00      	nop
          }
          break;
 800c5cc:	e0ad      	b.n	800c72a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5d4:	b2db      	uxtb	r3, r3
 800c5d6:	2b02      	cmp	r3, #2
 800c5d8:	d002      	beq.n	800c5e0 <USBD_StdEPReq+0x1dc>
 800c5da:	2b03      	cmp	r3, #3
 800c5dc:	d033      	beq.n	800c646 <USBD_StdEPReq+0x242>
 800c5de:	e099      	b.n	800c714 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5e0:	7bbb      	ldrb	r3, [r7, #14]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d007      	beq.n	800c5f6 <USBD_StdEPReq+0x1f2>
 800c5e6:	7bbb      	ldrb	r3, [r7, #14]
 800c5e8:	2b80      	cmp	r3, #128	@ 0x80
 800c5ea:	d004      	beq.n	800c5f6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c5ec:	6839      	ldr	r1, [r7, #0]
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 fbef 	bl	800cdd2 <USBD_CtlError>
                break;
 800c5f4:	e093      	b.n	800c71e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c5f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	da0b      	bge.n	800c616 <USBD_StdEPReq+0x212>
 800c5fe:	7bbb      	ldrb	r3, [r7, #14]
 800c600:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c604:	4613      	mov	r3, r2
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	4413      	add	r3, r2
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	3310      	adds	r3, #16
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	4413      	add	r3, r2
 800c612:	3304      	adds	r3, #4
 800c614:	e00b      	b.n	800c62e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c616:	7bbb      	ldrb	r3, [r7, #14]
 800c618:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c61c:	4613      	mov	r3, r2
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	4413      	add	r3, r2
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	4413      	add	r3, r2
 800c62c:	3304      	adds	r3, #4
 800c62e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	2200      	movs	r2, #0
 800c634:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	330e      	adds	r3, #14
 800c63a:	2202      	movs	r2, #2
 800c63c:	4619      	mov	r1, r3
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 fc44 	bl	800cecc <USBD_CtlSendData>
              break;
 800c644:	e06b      	b.n	800c71e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c646:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	da11      	bge.n	800c672 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c64e:	7bbb      	ldrb	r3, [r7, #14]
 800c650:	f003 020f 	and.w	r2, r3, #15
 800c654:	6879      	ldr	r1, [r7, #4]
 800c656:	4613      	mov	r3, r2
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	4413      	add	r3, r2
 800c65c:	009b      	lsls	r3, r3, #2
 800c65e:	440b      	add	r3, r1
 800c660:	3323      	adds	r3, #35	@ 0x23
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d117      	bne.n	800c698 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c668:	6839      	ldr	r1, [r7, #0]
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 fbb1 	bl	800cdd2 <USBD_CtlError>
                  break;
 800c670:	e055      	b.n	800c71e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c672:	7bbb      	ldrb	r3, [r7, #14]
 800c674:	f003 020f 	and.w	r2, r3, #15
 800c678:	6879      	ldr	r1, [r7, #4]
 800c67a:	4613      	mov	r3, r2
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	4413      	add	r3, r2
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	440b      	add	r3, r1
 800c684:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d104      	bne.n	800c698 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c68e:	6839      	ldr	r1, [r7, #0]
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 fb9e 	bl	800cdd2 <USBD_CtlError>
                  break;
 800c696:	e042      	b.n	800c71e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	da0b      	bge.n	800c6b8 <USBD_StdEPReq+0x2b4>
 800c6a0:	7bbb      	ldrb	r3, [r7, #14]
 800c6a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	4413      	add	r3, r2
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	3310      	adds	r3, #16
 800c6b0:	687a      	ldr	r2, [r7, #4]
 800c6b2:	4413      	add	r3, r2
 800c6b4:	3304      	adds	r3, #4
 800c6b6:	e00b      	b.n	800c6d0 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c6b8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6be:	4613      	mov	r3, r2
 800c6c0:	009b      	lsls	r3, r3, #2
 800c6c2:	4413      	add	r3, r2
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	4413      	add	r3, r2
 800c6ce:	3304      	adds	r3, #4
 800c6d0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c6d2:	7bbb      	ldrb	r3, [r7, #14]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d002      	beq.n	800c6de <USBD_StdEPReq+0x2da>
 800c6d8:	7bbb      	ldrb	r3, [r7, #14]
 800c6da:	2b80      	cmp	r3, #128	@ 0x80
 800c6dc:	d103      	bne.n	800c6e6 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	739a      	strb	r2, [r3, #14]
 800c6e4:	e00e      	b.n	800c704 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c6e6:	7bbb      	ldrb	r3, [r7, #14]
 800c6e8:	4619      	mov	r1, r3
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f001 f90e 	bl	800d90c <USBD_LL_IsStallEP>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d003      	beq.n	800c6fe <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	739a      	strb	r2, [r3, #14]
 800c6fc:	e002      	b.n	800c704 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	2200      	movs	r2, #0
 800c702:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	330e      	adds	r3, #14
 800c708:	2202      	movs	r2, #2
 800c70a:	4619      	mov	r1, r3
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 fbdd 	bl	800cecc <USBD_CtlSendData>
              break;
 800c712:	e004      	b.n	800c71e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800c714:	6839      	ldr	r1, [r7, #0]
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 fb5b 	bl	800cdd2 <USBD_CtlError>
              break;
 800c71c:	bf00      	nop
          }
          break;
 800c71e:	e004      	b.n	800c72a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800c720:	6839      	ldr	r1, [r7, #0]
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 fb55 	bl	800cdd2 <USBD_CtlError>
          break;
 800c728:	bf00      	nop
      }
      break;
 800c72a:	e005      	b.n	800c738 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800c72c:	6839      	ldr	r1, [r7, #0]
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 fb4f 	bl	800cdd2 <USBD_CtlError>
      break;
 800c734:	e000      	b.n	800c738 <USBD_StdEPReq+0x334>
      break;
 800c736:	bf00      	nop
  }

  return ret;
 800c738:	7bfb      	ldrb	r3, [r7, #15]
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}
	...

0800c744 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c74e:	2300      	movs	r3, #0
 800c750:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c752:	2300      	movs	r3, #0
 800c754:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c756:	2300      	movs	r3, #0
 800c758:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	885b      	ldrh	r3, [r3, #2]
 800c75e:	0a1b      	lsrs	r3, r3, #8
 800c760:	b29b      	uxth	r3, r3
 800c762:	3b01      	subs	r3, #1
 800c764:	2b06      	cmp	r3, #6
 800c766:	f200 8128 	bhi.w	800c9ba <USBD_GetDescriptor+0x276>
 800c76a:	a201      	add	r2, pc, #4	@ (adr r2, 800c770 <USBD_GetDescriptor+0x2c>)
 800c76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c770:	0800c78d 	.word	0x0800c78d
 800c774:	0800c7a5 	.word	0x0800c7a5
 800c778:	0800c7e5 	.word	0x0800c7e5
 800c77c:	0800c9bb 	.word	0x0800c9bb
 800c780:	0800c9bb 	.word	0x0800c9bb
 800c784:	0800c95b 	.word	0x0800c95b
 800c788:	0800c987 	.word	0x0800c987
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	7c12      	ldrb	r2, [r2, #16]
 800c798:	f107 0108 	add.w	r1, r7, #8
 800c79c:	4610      	mov	r0, r2
 800c79e:	4798      	blx	r3
 800c7a0:	60f8      	str	r0, [r7, #12]
      break;
 800c7a2:	e112      	b.n	800c9ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	7c1b      	ldrb	r3, [r3, #16]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d10d      	bne.n	800c7c8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7b4:	f107 0208 	add.w	r2, r7, #8
 800c7b8:	4610      	mov	r0, r2
 800c7ba:	4798      	blx	r3
 800c7bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	2202      	movs	r2, #2
 800c7c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c7c6:	e100      	b.n	800c9ca <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7d0:	f107 0208 	add.w	r2, r7, #8
 800c7d4:	4610      	mov	r0, r2
 800c7d6:	4798      	blx	r3
 800c7d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	3301      	adds	r3, #1
 800c7de:	2202      	movs	r2, #2
 800c7e0:	701a      	strb	r2, [r3, #0]
      break;
 800c7e2:	e0f2      	b.n	800c9ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	885b      	ldrh	r3, [r3, #2]
 800c7e8:	b2db      	uxtb	r3, r3
 800c7ea:	2b05      	cmp	r3, #5
 800c7ec:	f200 80ac 	bhi.w	800c948 <USBD_GetDescriptor+0x204>
 800c7f0:	a201      	add	r2, pc, #4	@ (adr r2, 800c7f8 <USBD_GetDescriptor+0xb4>)
 800c7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7f6:	bf00      	nop
 800c7f8:	0800c811 	.word	0x0800c811
 800c7fc:	0800c845 	.word	0x0800c845
 800c800:	0800c879 	.word	0x0800c879
 800c804:	0800c8ad 	.word	0x0800c8ad
 800c808:	0800c8e1 	.word	0x0800c8e1
 800c80c:	0800c915 	.word	0x0800c915
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d00b      	beq.n	800c834 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	7c12      	ldrb	r2, [r2, #16]
 800c828:	f107 0108 	add.w	r1, r7, #8
 800c82c:	4610      	mov	r0, r2
 800c82e:	4798      	blx	r3
 800c830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c832:	e091      	b.n	800c958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c834:	6839      	ldr	r1, [r7, #0]
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 facb 	bl	800cdd2 <USBD_CtlError>
            err++;
 800c83c:	7afb      	ldrb	r3, [r7, #11]
 800c83e:	3301      	adds	r3, #1
 800c840:	72fb      	strb	r3, [r7, #11]
          break;
 800c842:	e089      	b.n	800c958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c84a:	689b      	ldr	r3, [r3, #8]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d00b      	beq.n	800c868 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	687a      	ldr	r2, [r7, #4]
 800c85a:	7c12      	ldrb	r2, [r2, #16]
 800c85c:	f107 0108 	add.w	r1, r7, #8
 800c860:	4610      	mov	r0, r2
 800c862:	4798      	blx	r3
 800c864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c866:	e077      	b.n	800c958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c868:	6839      	ldr	r1, [r7, #0]
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 fab1 	bl	800cdd2 <USBD_CtlError>
            err++;
 800c870:	7afb      	ldrb	r3, [r7, #11]
 800c872:	3301      	adds	r3, #1
 800c874:	72fb      	strb	r3, [r7, #11]
          break;
 800c876:	e06f      	b.n	800c958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00b      	beq.n	800c89c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c88a:	68db      	ldr	r3, [r3, #12]
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	7c12      	ldrb	r2, [r2, #16]
 800c890:	f107 0108 	add.w	r1, r7, #8
 800c894:	4610      	mov	r0, r2
 800c896:	4798      	blx	r3
 800c898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c89a:	e05d      	b.n	800c958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c89c:	6839      	ldr	r1, [r7, #0]
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 fa97 	bl	800cdd2 <USBD_CtlError>
            err++;
 800c8a4:	7afb      	ldrb	r3, [r7, #11]
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c8aa:	e055      	b.n	800c958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8b2:	691b      	ldr	r3, [r3, #16]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d00b      	beq.n	800c8d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8be:	691b      	ldr	r3, [r3, #16]
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	7c12      	ldrb	r2, [r2, #16]
 800c8c4:	f107 0108 	add.w	r1, r7, #8
 800c8c8:	4610      	mov	r0, r2
 800c8ca:	4798      	blx	r3
 800c8cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8ce:	e043      	b.n	800c958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8d0:	6839      	ldr	r1, [r7, #0]
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 fa7d 	bl	800cdd2 <USBD_CtlError>
            err++;
 800c8d8:	7afb      	ldrb	r3, [r7, #11]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c8de:	e03b      	b.n	800c958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8e6:	695b      	ldr	r3, [r3, #20]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d00b      	beq.n	800c904 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8f2:	695b      	ldr	r3, [r3, #20]
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	7c12      	ldrb	r2, [r2, #16]
 800c8f8:	f107 0108 	add.w	r1, r7, #8
 800c8fc:	4610      	mov	r0, r2
 800c8fe:	4798      	blx	r3
 800c900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c902:	e029      	b.n	800c958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c904:	6839      	ldr	r1, [r7, #0]
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 fa63 	bl	800cdd2 <USBD_CtlError>
            err++;
 800c90c:	7afb      	ldrb	r3, [r7, #11]
 800c90e:	3301      	adds	r3, #1
 800c910:	72fb      	strb	r3, [r7, #11]
          break;
 800c912:	e021      	b.n	800c958 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c91a:	699b      	ldr	r3, [r3, #24]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d00b      	beq.n	800c938 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c926:	699b      	ldr	r3, [r3, #24]
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	7c12      	ldrb	r2, [r2, #16]
 800c92c:	f107 0108 	add.w	r1, r7, #8
 800c930:	4610      	mov	r0, r2
 800c932:	4798      	blx	r3
 800c934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c936:	e00f      	b.n	800c958 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c938:	6839      	ldr	r1, [r7, #0]
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 fa49 	bl	800cdd2 <USBD_CtlError>
            err++;
 800c940:	7afb      	ldrb	r3, [r7, #11]
 800c942:	3301      	adds	r3, #1
 800c944:	72fb      	strb	r3, [r7, #11]
          break;
 800c946:	e007      	b.n	800c958 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c948:	6839      	ldr	r1, [r7, #0]
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 fa41 	bl	800cdd2 <USBD_CtlError>
          err++;
 800c950:	7afb      	ldrb	r3, [r7, #11]
 800c952:	3301      	adds	r3, #1
 800c954:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c956:	bf00      	nop
      }
      break;
 800c958:	e037      	b.n	800c9ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	7c1b      	ldrb	r3, [r3, #16]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d109      	bne.n	800c976 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c96a:	f107 0208 	add.w	r2, r7, #8
 800c96e:	4610      	mov	r0, r2
 800c970:	4798      	blx	r3
 800c972:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c974:	e029      	b.n	800c9ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c976:	6839      	ldr	r1, [r7, #0]
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 fa2a 	bl	800cdd2 <USBD_CtlError>
        err++;
 800c97e:	7afb      	ldrb	r3, [r7, #11]
 800c980:	3301      	adds	r3, #1
 800c982:	72fb      	strb	r3, [r7, #11]
      break;
 800c984:	e021      	b.n	800c9ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	7c1b      	ldrb	r3, [r3, #16]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d10d      	bne.n	800c9aa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c996:	f107 0208 	add.w	r2, r7, #8
 800c99a:	4610      	mov	r0, r2
 800c99c:	4798      	blx	r3
 800c99e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	2207      	movs	r2, #7
 800c9a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9a8:	e00f      	b.n	800c9ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c9aa:	6839      	ldr	r1, [r7, #0]
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f000 fa10 	bl	800cdd2 <USBD_CtlError>
        err++;
 800c9b2:	7afb      	ldrb	r3, [r7, #11]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	72fb      	strb	r3, [r7, #11]
      break;
 800c9b8:	e007      	b.n	800c9ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c9ba:	6839      	ldr	r1, [r7, #0]
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 fa08 	bl	800cdd2 <USBD_CtlError>
      err++;
 800c9c2:	7afb      	ldrb	r3, [r7, #11]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	72fb      	strb	r3, [r7, #11]
      break;
 800c9c8:	bf00      	nop
  }

  if (err != 0U)
 800c9ca:	7afb      	ldrb	r3, [r7, #11]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d11e      	bne.n	800ca0e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	88db      	ldrh	r3, [r3, #6]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d016      	beq.n	800ca06 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c9d8:	893b      	ldrh	r3, [r7, #8]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00e      	beq.n	800c9fc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	88da      	ldrh	r2, [r3, #6]
 800c9e2:	893b      	ldrh	r3, [r7, #8]
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	bf28      	it	cs
 800c9e8:	4613      	movcs	r3, r2
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c9ee:	893b      	ldrh	r3, [r7, #8]
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	68f9      	ldr	r1, [r7, #12]
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 fa69 	bl	800cecc <USBD_CtlSendData>
 800c9fa:	e009      	b.n	800ca10 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f000 f9e7 	bl	800cdd2 <USBD_CtlError>
 800ca04:	e004      	b.n	800ca10 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 fac1 	bl	800cf8e <USBD_CtlSendStatus>
 800ca0c:	e000      	b.n	800ca10 <USBD_GetDescriptor+0x2cc>
    return;
 800ca0e:	bf00      	nop
  }
}
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop

0800ca18 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	889b      	ldrh	r3, [r3, #4]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d131      	bne.n	800ca8e <USBD_SetAddress+0x76>
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	88db      	ldrh	r3, [r3, #6]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d12d      	bne.n	800ca8e <USBD_SetAddress+0x76>
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	885b      	ldrh	r3, [r3, #2]
 800ca36:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca38:	d829      	bhi.n	800ca8e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	885b      	ldrh	r3, [r3, #2]
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	2b03      	cmp	r3, #3
 800ca50:	d104      	bne.n	800ca5c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ca52:	6839      	ldr	r1, [r7, #0]
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f000 f9bc 	bl	800cdd2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca5a:	e01d      	b.n	800ca98 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	7bfa      	ldrb	r2, [r7, #15]
 800ca60:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ca64:	7bfb      	ldrb	r3, [r7, #15]
 800ca66:	4619      	mov	r1, r3
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f000 ff7b 	bl	800d964 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 fa8d 	bl	800cf8e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ca74:	7bfb      	ldrb	r3, [r7, #15]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d004      	beq.n	800ca84 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2202      	movs	r2, #2
 800ca7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca82:	e009      	b.n	800ca98 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2201      	movs	r2, #1
 800ca88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca8c:	e004      	b.n	800ca98 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ca8e:	6839      	ldr	r1, [r7, #0]
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 f99e 	bl	800cdd2 <USBD_CtlError>
  }
}
 800ca96:	bf00      	nop
 800ca98:	bf00      	nop
 800ca9a:	3710      	adds	r7, #16
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800caaa:	2300      	movs	r3, #0
 800caac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	885b      	ldrh	r3, [r3, #2]
 800cab2:	b2da      	uxtb	r2, r3
 800cab4:	4b4e      	ldr	r3, [pc, #312]	@ (800cbf0 <USBD_SetConfig+0x150>)
 800cab6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cab8:	4b4d      	ldr	r3, [pc, #308]	@ (800cbf0 <USBD_SetConfig+0x150>)
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d905      	bls.n	800cacc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cac0:	6839      	ldr	r1, [r7, #0]
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 f985 	bl	800cdd2 <USBD_CtlError>
    return USBD_FAIL;
 800cac8:	2303      	movs	r3, #3
 800caca:	e08c      	b.n	800cbe6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	2b02      	cmp	r3, #2
 800cad6:	d002      	beq.n	800cade <USBD_SetConfig+0x3e>
 800cad8:	2b03      	cmp	r3, #3
 800cada:	d029      	beq.n	800cb30 <USBD_SetConfig+0x90>
 800cadc:	e075      	b.n	800cbca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800cade:	4b44      	ldr	r3, [pc, #272]	@ (800cbf0 <USBD_SetConfig+0x150>)
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d020      	beq.n	800cb28 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cae6:	4b42      	ldr	r3, [pc, #264]	@ (800cbf0 <USBD_SetConfig+0x150>)
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	461a      	mov	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800caf0:	4b3f      	ldr	r3, [pc, #252]	@ (800cbf0 <USBD_SetConfig+0x150>)
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	4619      	mov	r1, r3
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f7fe ffcd 	bl	800ba96 <USBD_SetClassConfig>
 800cafc:	4603      	mov	r3, r0
 800cafe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cb00:	7bfb      	ldrb	r3, [r7, #15]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d008      	beq.n	800cb18 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cb06:	6839      	ldr	r1, [r7, #0]
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 f962 	bl	800cdd2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2202      	movs	r2, #2
 800cb12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb16:	e065      	b.n	800cbe4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f000 fa38 	bl	800cf8e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2203      	movs	r2, #3
 800cb22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cb26:	e05d      	b.n	800cbe4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 fa30 	bl	800cf8e <USBD_CtlSendStatus>
      break;
 800cb2e:	e059      	b.n	800cbe4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cb30:	4b2f      	ldr	r3, [pc, #188]	@ (800cbf0 <USBD_SetConfig+0x150>)
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d112      	bne.n	800cb5e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2202      	movs	r2, #2
 800cb3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cb40:	4b2b      	ldr	r3, [pc, #172]	@ (800cbf0 <USBD_SetConfig+0x150>)
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	461a      	mov	r2, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb4a:	4b29      	ldr	r3, [pc, #164]	@ (800cbf0 <USBD_SetConfig+0x150>)
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	4619      	mov	r1, r3
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f7fe ffbc 	bl	800bace <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 fa19 	bl	800cf8e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb5c:	e042      	b.n	800cbe4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cb5e:	4b24      	ldr	r3, [pc, #144]	@ (800cbf0 <USBD_SetConfig+0x150>)
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	461a      	mov	r2, r3
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d02a      	beq.n	800cbc2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	4619      	mov	r1, r3
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f7fe ffaa 	bl	800bace <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cb7a:	4b1d      	ldr	r3, [pc, #116]	@ (800cbf0 <USBD_SetConfig+0x150>)
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	461a      	mov	r2, r3
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb84:	4b1a      	ldr	r3, [pc, #104]	@ (800cbf0 <USBD_SetConfig+0x150>)
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7fe ff83 	bl	800ba96 <USBD_SetClassConfig>
 800cb90:	4603      	mov	r3, r0
 800cb92:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cb94:	7bfb      	ldrb	r3, [r7, #15]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d00f      	beq.n	800cbba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cb9a:	6839      	ldr	r1, [r7, #0]
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f000 f918 	bl	800cdd2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	4619      	mov	r1, r3
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f7fe ff8f 	bl	800bace <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2202      	movs	r2, #2
 800cbb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cbb8:	e014      	b.n	800cbe4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cbba:	6878      	ldr	r0, [r7, #4]
 800cbbc:	f000 f9e7 	bl	800cf8e <USBD_CtlSendStatus>
      break;
 800cbc0:	e010      	b.n	800cbe4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f9e3 	bl	800cf8e <USBD_CtlSendStatus>
      break;
 800cbc8:	e00c      	b.n	800cbe4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cbca:	6839      	ldr	r1, [r7, #0]
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f000 f900 	bl	800cdd2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cbd2:	4b07      	ldr	r3, [pc, #28]	@ (800cbf0 <USBD_SetConfig+0x150>)
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7fe ff78 	bl	800bace <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cbde:	2303      	movs	r3, #3
 800cbe0:	73fb      	strb	r3, [r7, #15]
      break;
 800cbe2:	bf00      	nop
  }

  return ret;
 800cbe4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	20000a8c 	.word	0x20000a8c

0800cbf4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	88db      	ldrh	r3, [r3, #6]
 800cc02:	2b01      	cmp	r3, #1
 800cc04:	d004      	beq.n	800cc10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cc06:	6839      	ldr	r1, [r7, #0]
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f000 f8e2 	bl	800cdd2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cc0e:	e023      	b.n	800cc58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc16:	b2db      	uxtb	r3, r3
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	dc02      	bgt.n	800cc22 <USBD_GetConfig+0x2e>
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	dc03      	bgt.n	800cc28 <USBD_GetConfig+0x34>
 800cc20:	e015      	b.n	800cc4e <USBD_GetConfig+0x5a>
 800cc22:	2b03      	cmp	r3, #3
 800cc24:	d00b      	beq.n	800cc3e <USBD_GetConfig+0x4a>
 800cc26:	e012      	b.n	800cc4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	3308      	adds	r3, #8
 800cc32:	2201      	movs	r2, #1
 800cc34:	4619      	mov	r1, r3
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 f948 	bl	800cecc <USBD_CtlSendData>
        break;
 800cc3c:	e00c      	b.n	800cc58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	3304      	adds	r3, #4
 800cc42:	2201      	movs	r2, #1
 800cc44:	4619      	mov	r1, r3
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 f940 	bl	800cecc <USBD_CtlSendData>
        break;
 800cc4c:	e004      	b.n	800cc58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cc4e:	6839      	ldr	r1, [r7, #0]
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 f8be 	bl	800cdd2 <USBD_CtlError>
        break;
 800cc56:	bf00      	nop
}
 800cc58:	bf00      	nop
 800cc5a:	3708      	adds	r7, #8
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc70:	b2db      	uxtb	r3, r3
 800cc72:	3b01      	subs	r3, #1
 800cc74:	2b02      	cmp	r3, #2
 800cc76:	d81e      	bhi.n	800ccb6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	88db      	ldrh	r3, [r3, #6]
 800cc7c:	2b02      	cmp	r3, #2
 800cc7e:	d004      	beq.n	800cc8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cc80:	6839      	ldr	r1, [r7, #0]
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 f8a5 	bl	800cdd2 <USBD_CtlError>
        break;
 800cc88:	e01a      	b.n	800ccc0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d005      	beq.n	800cca6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	68db      	ldr	r3, [r3, #12]
 800cc9e:	f043 0202 	orr.w	r2, r3, #2
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	330c      	adds	r3, #12
 800ccaa:	2202      	movs	r2, #2
 800ccac:	4619      	mov	r1, r3
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 f90c 	bl	800cecc <USBD_CtlSendData>
      break;
 800ccb4:	e004      	b.n	800ccc0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ccb6:	6839      	ldr	r1, [r7, #0]
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 f88a 	bl	800cdd2 <USBD_CtlError>
      break;
 800ccbe:	bf00      	nop
  }
}
 800ccc0:	bf00      	nop
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	885b      	ldrh	r3, [r3, #2]
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d107      	bne.n	800ccea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2201      	movs	r2, #1
 800ccde:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f000 f953 	bl	800cf8e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cce8:	e013      	b.n	800cd12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	885b      	ldrh	r3, [r3, #2]
 800ccee:	2b02      	cmp	r3, #2
 800ccf0:	d10b      	bne.n	800cd0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	889b      	ldrh	r3, [r3, #4]
 800ccf6:	0a1b      	lsrs	r3, r3, #8
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	b2da      	uxtb	r2, r3
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 f943 	bl	800cf8e <USBD_CtlSendStatus>
}
 800cd08:	e003      	b.n	800cd12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cd0a:	6839      	ldr	r1, [r7, #0]
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f000 f860 	bl	800cdd2 <USBD_CtlError>
}
 800cd12:	bf00      	nop
 800cd14:	3708      	adds	r7, #8
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}

0800cd1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd1a:	b580      	push	{r7, lr}
 800cd1c:	b082      	sub	sp, #8
 800cd1e:	af00      	add	r7, sp, #0
 800cd20:	6078      	str	r0, [r7, #4]
 800cd22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	2b02      	cmp	r3, #2
 800cd30:	d80b      	bhi.n	800cd4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	885b      	ldrh	r3, [r3, #2]
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d10c      	bne.n	800cd54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 f923 	bl	800cf8e <USBD_CtlSendStatus>
      }
      break;
 800cd48:	e004      	b.n	800cd54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cd4a:	6839      	ldr	r1, [r7, #0]
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 f840 	bl	800cdd2 <USBD_CtlError>
      break;
 800cd52:	e000      	b.n	800cd56 <USBD_ClrFeature+0x3c>
      break;
 800cd54:	bf00      	nop
  }
}
 800cd56:	bf00      	nop
 800cd58:	3708      	adds	r7, #8
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}

0800cd5e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cd5e:	b580      	push	{r7, lr}
 800cd60:	b084      	sub	sp, #16
 800cd62:	af00      	add	r7, sp, #0
 800cd64:	6078      	str	r0, [r7, #4]
 800cd66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	781a      	ldrb	r2, [r3, #0]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	3301      	adds	r3, #1
 800cd78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	781a      	ldrb	r2, [r3, #0]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	3301      	adds	r3, #1
 800cd86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	f7ff fa3d 	bl	800c208 <SWAPBYTE>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	461a      	mov	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	3301      	adds	r3, #1
 800cda0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	f7ff fa30 	bl	800c208 <SWAPBYTE>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	461a      	mov	r2, r3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	3301      	adds	r3, #1
 800cdba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	f7ff fa23 	bl	800c208 <SWAPBYTE>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	461a      	mov	r2, r3
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	80da      	strh	r2, [r3, #6]
}
 800cdca:	bf00      	nop
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}

0800cdd2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdd2:	b580      	push	{r7, lr}
 800cdd4:	b082      	sub	sp, #8
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
 800cdda:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cddc:	2180      	movs	r1, #128	@ 0x80
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 fd56 	bl	800d890 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cde4:	2100      	movs	r1, #0
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f000 fd52 	bl	800d890 <USBD_LL_StallEP>
}
 800cdec:	bf00      	nop
 800cdee:	3708      	adds	r7, #8
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b086      	sub	sp, #24
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	60f8      	str	r0, [r7, #12]
 800cdfc:	60b9      	str	r1, [r7, #8]
 800cdfe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ce00:	2300      	movs	r3, #0
 800ce02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d042      	beq.n	800ce90 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ce0e:	6938      	ldr	r0, [r7, #16]
 800ce10:	f000 f842 	bl	800ce98 <USBD_GetLen>
 800ce14:	4603      	mov	r3, r0
 800ce16:	3301      	adds	r3, #1
 800ce18:	005b      	lsls	r3, r3, #1
 800ce1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce1e:	d808      	bhi.n	800ce32 <USBD_GetString+0x3e>
 800ce20:	6938      	ldr	r0, [r7, #16]
 800ce22:	f000 f839 	bl	800ce98 <USBD_GetLen>
 800ce26:	4603      	mov	r3, r0
 800ce28:	3301      	adds	r3, #1
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	005b      	lsls	r3, r3, #1
 800ce2e:	b29a      	uxth	r2, r3
 800ce30:	e001      	b.n	800ce36 <USBD_GetString+0x42>
 800ce32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ce3a:	7dfb      	ldrb	r3, [r7, #23]
 800ce3c:	68ba      	ldr	r2, [r7, #8]
 800ce3e:	4413      	add	r3, r2
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	7812      	ldrb	r2, [r2, #0]
 800ce44:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce46:	7dfb      	ldrb	r3, [r7, #23]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ce4c:	7dfb      	ldrb	r3, [r7, #23]
 800ce4e:	68ba      	ldr	r2, [r7, #8]
 800ce50:	4413      	add	r3, r2
 800ce52:	2203      	movs	r2, #3
 800ce54:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce56:	7dfb      	ldrb	r3, [r7, #23]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ce5c:	e013      	b.n	800ce86 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ce5e:	7dfb      	ldrb	r3, [r7, #23]
 800ce60:	68ba      	ldr	r2, [r7, #8]
 800ce62:	4413      	add	r3, r2
 800ce64:	693a      	ldr	r2, [r7, #16]
 800ce66:	7812      	ldrb	r2, [r2, #0]
 800ce68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	613b      	str	r3, [r7, #16]
    idx++;
 800ce70:	7dfb      	ldrb	r3, [r7, #23]
 800ce72:	3301      	adds	r3, #1
 800ce74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ce76:	7dfb      	ldrb	r3, [r7, #23]
 800ce78:	68ba      	ldr	r2, [r7, #8]
 800ce7a:	4413      	add	r3, r2
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	701a      	strb	r2, [r3, #0]
    idx++;
 800ce80:	7dfb      	ldrb	r3, [r7, #23]
 800ce82:	3301      	adds	r3, #1
 800ce84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d1e7      	bne.n	800ce5e <USBD_GetString+0x6a>
 800ce8e:	e000      	b.n	800ce92 <USBD_GetString+0x9e>
    return;
 800ce90:	bf00      	nop
  }
}
 800ce92:	3718      	adds	r7, #24
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}

0800ce98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b085      	sub	sp, #20
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cea0:	2300      	movs	r3, #0
 800cea2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cea8:	e005      	b.n	800ceb6 <USBD_GetLen+0x1e>
  {
    len++;
 800ceaa:	7bfb      	ldrb	r3, [r7, #15]
 800ceac:	3301      	adds	r3, #1
 800ceae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	781b      	ldrb	r3, [r3, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d1f5      	bne.n	800ceaa <USBD_GetLen+0x12>
  }

  return len;
 800cebe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3714      	adds	r7, #20
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr

0800cecc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	60f8      	str	r0, [r7, #12]
 800ced4:	60b9      	str	r1, [r7, #8]
 800ced6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2202      	movs	r2, #2
 800cedc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	68ba      	ldr	r2, [r7, #8]
 800ceea:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	68ba      	ldr	r2, [r7, #8]
 800cef6:	2100      	movs	r1, #0
 800cef8:	68f8      	ldr	r0, [r7, #12]
 800cefa:	f000 fd52 	bl	800d9a2 <USBD_LL_Transmit>

  return USBD_OK;
 800cefe:	2300      	movs	r3, #0
}
 800cf00:	4618      	mov	r0, r3
 800cf02:	3710      	adds	r7, #16
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	60f8      	str	r0, [r7, #12]
 800cf10:	60b9      	str	r1, [r7, #8]
 800cf12:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	68ba      	ldr	r2, [r7, #8]
 800cf18:	2100      	movs	r1, #0
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	f000 fd41 	bl	800d9a2 <USBD_LL_Transmit>

  return USBD_OK;
 800cf20:	2300      	movs	r3, #0
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3710      	adds	r7, #16
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b084      	sub	sp, #16
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	60f8      	str	r0, [r7, #12]
 800cf32:	60b9      	str	r1, [r7, #8]
 800cf34:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2203      	movs	r2, #3
 800cf3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	68ba      	ldr	r2, [r7, #8]
 800cf4a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	687a      	ldr	r2, [r7, #4]
 800cf52:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	68ba      	ldr	r2, [r7, #8]
 800cf5a:	2100      	movs	r1, #0
 800cf5c:	68f8      	ldr	r0, [r7, #12]
 800cf5e:	f000 fd41 	bl	800d9e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf62:	2300      	movs	r3, #0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3710      	adds	r7, #16
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	60b9      	str	r1, [r7, #8]
 800cf76:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	68ba      	ldr	r2, [r7, #8]
 800cf7c:	2100      	movs	r1, #0
 800cf7e:	68f8      	ldr	r0, [r7, #12]
 800cf80:	f000 fd30 	bl	800d9e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf84:	2300      	movs	r3, #0
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3710      	adds	r7, #16
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}

0800cf8e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cf8e:	b580      	push	{r7, lr}
 800cf90:	b082      	sub	sp, #8
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2204      	movs	r2, #4
 800cf9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	2100      	movs	r1, #0
 800cfa4:	6878      	ldr	r0, [r7, #4]
 800cfa6:	f000 fcfc 	bl	800d9a2 <USBD_LL_Transmit>

  return USBD_OK;
 800cfaa:	2300      	movs	r3, #0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3708      	adds	r7, #8
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2205      	movs	r2, #5
 800cfc0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	2100      	movs	r1, #0
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f000 fd0a 	bl	800d9e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfd0:	2300      	movs	r3, #0
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3708      	adds	r7, #8
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
	...

0800cfdc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	4912      	ldr	r1, [pc, #72]	@ (800d02c <MX_USB_DEVICE_Init+0x50>)
 800cfe4:	4812      	ldr	r0, [pc, #72]	@ (800d030 <MX_USB_DEVICE_Init+0x54>)
 800cfe6:	f7fe fcd9 	bl	800b99c <USBD_Init>
 800cfea:	4603      	mov	r3, r0
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d001      	beq.n	800cff4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cff0:	f7f4 fd7e 	bl	8001af0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cff4:	490f      	ldr	r1, [pc, #60]	@ (800d034 <MX_USB_DEVICE_Init+0x58>)
 800cff6:	480e      	ldr	r0, [pc, #56]	@ (800d030 <MX_USB_DEVICE_Init+0x54>)
 800cff8:	f7fe fd00 	bl	800b9fc <USBD_RegisterClass>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d001      	beq.n	800d006 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d002:	f7f4 fd75 	bl	8001af0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d006:	490c      	ldr	r1, [pc, #48]	@ (800d038 <MX_USB_DEVICE_Init+0x5c>)
 800d008:	4809      	ldr	r0, [pc, #36]	@ (800d030 <MX_USB_DEVICE_Init+0x54>)
 800d00a:	f7fe fbf7 	bl	800b7fc <USBD_CDC_RegisterInterface>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d001      	beq.n	800d018 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d014:	f7f4 fd6c 	bl	8001af0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d018:	4805      	ldr	r0, [pc, #20]	@ (800d030 <MX_USB_DEVICE_Init+0x54>)
 800d01a:	f7fe fd25 	bl	800ba68 <USBD_Start>
 800d01e:	4603      	mov	r3, r0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d001      	beq.n	800d028 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d024:	f7f4 fd64 	bl	8001af0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d028:	bf00      	nop
 800d02a:	bd80      	pop	{r7, pc}
 800d02c:	200000e0 	.word	0x200000e0
 800d030:	20000a90 	.word	0x20000a90
 800d034:	20000044 	.word	0x20000044
 800d038:	200000cc 	.word	0x200000cc

0800d03c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d040:	2200      	movs	r2, #0
 800d042:	4905      	ldr	r1, [pc, #20]	@ (800d058 <CDC_Init_FS+0x1c>)
 800d044:	4805      	ldr	r0, [pc, #20]	@ (800d05c <CDC_Init_FS+0x20>)
 800d046:	f7fe fbf3 	bl	800b830 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d04a:	4905      	ldr	r1, [pc, #20]	@ (800d060 <CDC_Init_FS+0x24>)
 800d04c:	4803      	ldr	r0, [pc, #12]	@ (800d05c <CDC_Init_FS+0x20>)
 800d04e:	f7fe fc11 	bl	800b874 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d052:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d054:	4618      	mov	r0, r3
 800d056:	bd80      	pop	{r7, pc}
 800d058:	20000f6c 	.word	0x20000f6c
 800d05c:	20000a90 	.word	0x20000a90
 800d060:	20000d6c 	.word	0x20000d6c

0800d064 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d064:	b480      	push	{r7}
 800d066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d068:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr

0800d074 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	4603      	mov	r3, r0
 800d07c:	6039      	str	r1, [r7, #0]
 800d07e:	71fb      	strb	r3, [r7, #7]
 800d080:	4613      	mov	r3, r2
 800d082:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d084:	79fb      	ldrb	r3, [r7, #7]
 800d086:	2b23      	cmp	r3, #35	@ 0x23
 800d088:	f200 8098 	bhi.w	800d1bc <CDC_Control_FS+0x148>
 800d08c:	a201      	add	r2, pc, #4	@ (adr r2, 800d094 <CDC_Control_FS+0x20>)
 800d08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d092:	bf00      	nop
 800d094:	0800d1bd 	.word	0x0800d1bd
 800d098:	0800d1bd 	.word	0x0800d1bd
 800d09c:	0800d1bd 	.word	0x0800d1bd
 800d0a0:	0800d1bd 	.word	0x0800d1bd
 800d0a4:	0800d1bd 	.word	0x0800d1bd
 800d0a8:	0800d1bd 	.word	0x0800d1bd
 800d0ac:	0800d1bd 	.word	0x0800d1bd
 800d0b0:	0800d1bd 	.word	0x0800d1bd
 800d0b4:	0800d1bd 	.word	0x0800d1bd
 800d0b8:	0800d1bd 	.word	0x0800d1bd
 800d0bc:	0800d1bd 	.word	0x0800d1bd
 800d0c0:	0800d1bd 	.word	0x0800d1bd
 800d0c4:	0800d1bd 	.word	0x0800d1bd
 800d0c8:	0800d1bd 	.word	0x0800d1bd
 800d0cc:	0800d1bd 	.word	0x0800d1bd
 800d0d0:	0800d1bd 	.word	0x0800d1bd
 800d0d4:	0800d1bd 	.word	0x0800d1bd
 800d0d8:	0800d1bd 	.word	0x0800d1bd
 800d0dc:	0800d1bd 	.word	0x0800d1bd
 800d0e0:	0800d1bd 	.word	0x0800d1bd
 800d0e4:	0800d1bd 	.word	0x0800d1bd
 800d0e8:	0800d1bd 	.word	0x0800d1bd
 800d0ec:	0800d1bd 	.word	0x0800d1bd
 800d0f0:	0800d1bd 	.word	0x0800d1bd
 800d0f4:	0800d1bd 	.word	0x0800d1bd
 800d0f8:	0800d1bd 	.word	0x0800d1bd
 800d0fc:	0800d1bd 	.word	0x0800d1bd
 800d100:	0800d1bd 	.word	0x0800d1bd
 800d104:	0800d1bd 	.word	0x0800d1bd
 800d108:	0800d1bd 	.word	0x0800d1bd
 800d10c:	0800d1bd 	.word	0x0800d1bd
 800d110:	0800d1bd 	.word	0x0800d1bd
 800d114:	0800d125 	.word	0x0800d125
 800d118:	0800d169 	.word	0x0800d169
 800d11c:	0800d1bd 	.word	0x0800d1bd
 800d120:	0800d1bd 	.word	0x0800d1bd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	461a      	mov	r2, r3
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	3301      	adds	r3, #1
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	021b      	lsls	r3, r3, #8
 800d132:	431a      	orrs	r2, r3
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	3302      	adds	r3, #2
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	041b      	lsls	r3, r3, #16
 800d13c:	431a      	orrs	r2, r3
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	3303      	adds	r3, #3
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	061b      	lsls	r3, r3, #24
 800d146:	4313      	orrs	r3, r2
 800d148:	461a      	mov	r2, r3
 800d14a:	4b20      	ldr	r3, [pc, #128]	@ (800d1cc <CDC_Control_FS+0x158>)
 800d14c:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	791a      	ldrb	r2, [r3, #4]
 800d152:	4b1e      	ldr	r3, [pc, #120]	@ (800d1cc <CDC_Control_FS+0x158>)
 800d154:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	795a      	ldrb	r2, [r3, #5]
 800d15a:	4b1c      	ldr	r3, [pc, #112]	@ (800d1cc <CDC_Control_FS+0x158>)
 800d15c:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	799a      	ldrb	r2, [r3, #6]
 800d162:	4b1a      	ldr	r3, [pc, #104]	@ (800d1cc <CDC_Control_FS+0x158>)
 800d164:	719a      	strb	r2, [r3, #6]
    break;
 800d166:	e02a      	b.n	800d1be <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800d168:	4b18      	ldr	r3, [pc, #96]	@ (800d1cc <CDC_Control_FS+0x158>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	b2da      	uxtb	r2, r3
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800d172:	4b16      	ldr	r3, [pc, #88]	@ (800d1cc <CDC_Control_FS+0x158>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	0a1a      	lsrs	r2, r3, #8
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	3301      	adds	r3, #1
 800d17c:	b2d2      	uxtb	r2, r2
 800d17e:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800d180:	4b12      	ldr	r3, [pc, #72]	@ (800d1cc <CDC_Control_FS+0x158>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	0c1a      	lsrs	r2, r3, #16
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	3302      	adds	r3, #2
 800d18a:	b2d2      	uxtb	r2, r2
 800d18c:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800d18e:	4b0f      	ldr	r3, [pc, #60]	@ (800d1cc <CDC_Control_FS+0x158>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	0e1a      	lsrs	r2, r3, #24
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	3303      	adds	r3, #3
 800d198:	b2d2      	uxtb	r2, r2
 800d19a:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	3304      	adds	r3, #4
 800d1a0:	4a0a      	ldr	r2, [pc, #40]	@ (800d1cc <CDC_Control_FS+0x158>)
 800d1a2:	7912      	ldrb	r2, [r2, #4]
 800d1a4:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	3305      	adds	r3, #5
 800d1aa:	4a08      	ldr	r2, [pc, #32]	@ (800d1cc <CDC_Control_FS+0x158>)
 800d1ac:	7952      	ldrb	r2, [r2, #5]
 800d1ae:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	3306      	adds	r3, #6
 800d1b4:	4a05      	ldr	r2, [pc, #20]	@ (800d1cc <CDC_Control_FS+0x158>)
 800d1b6:	7992      	ldrb	r2, [r2, #6]
 800d1b8:	701a      	strb	r2, [r3, #0]
    break;
 800d1ba:	e000      	b.n	800d1be <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d1bc:	bf00      	nop
  }

  return (USBD_OK);
 800d1be:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	370c      	adds	r7, #12
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr
 800d1cc:	200000c4 	.word	0x200000c4

0800d1d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800d1da:	4b0b      	ldr	r3, [pc, #44]	@ (800d208 <CDC_Receive_FS+0x38>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d006      	beq.n	800d1f0 <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800d1e2:	4b09      	ldr	r3, [pc, #36]	@ (800d208 <CDC_Receive_FS+0x38>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	683a      	ldr	r2, [r7, #0]
 800d1e8:	6812      	ldr	r2, [r2, #0]
 800d1ea:	4611      	mov	r1, r2
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d1f0:	6879      	ldr	r1, [r7, #4]
 800d1f2:	4806      	ldr	r0, [pc, #24]	@ (800d20c <CDC_Receive_FS+0x3c>)
 800d1f4:	f7fe fb3e 	bl	800b874 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d1f8:	4804      	ldr	r0, [pc, #16]	@ (800d20c <CDC_Receive_FS+0x3c>)
 800d1fa:	f7fe fb99 	bl	800b930 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800d1fe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d200:	4618      	mov	r0, r3
 800d202:	3708      	adds	r7, #8
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	2000116c 	.word	0x2000116c
 800d20c:	20000a90 	.word	0x20000a90

0800d210 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b084      	sub	sp, #16
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	460b      	mov	r3, r1
 800d21a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d21c:	2300      	movs	r3, #0
 800d21e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d220:	4b0d      	ldr	r3, [pc, #52]	@ (800d258 <CDC_Transmit_FS+0x48>)
 800d222:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d226:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d001      	beq.n	800d236 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d232:	2301      	movs	r3, #1
 800d234:	e00b      	b.n	800d24e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d236:	887b      	ldrh	r3, [r7, #2]
 800d238:	461a      	mov	r2, r3
 800d23a:	6879      	ldr	r1, [r7, #4]
 800d23c:	4806      	ldr	r0, [pc, #24]	@ (800d258 <CDC_Transmit_FS+0x48>)
 800d23e:	f7fe faf7 	bl	800b830 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d242:	4805      	ldr	r0, [pc, #20]	@ (800d258 <CDC_Transmit_FS+0x48>)
 800d244:	f7fe fb34 	bl	800b8b0 <USBD_CDC_TransmitPacket>
 800d248:	4603      	mov	r3, r0
 800d24a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3710      	adds	r7, #16
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	20000a90 	.word	0x20000a90

0800d25c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b087      	sub	sp, #28
 800d260:	af00      	add	r7, sp, #0
 800d262:	60f8      	str	r0, [r7, #12]
 800d264:	60b9      	str	r1, [r7, #8]
 800d266:	4613      	mov	r3, r2
 800d268:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d26a:	2300      	movs	r3, #0
 800d26c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d26e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d272:	4618      	mov	r0, r3
 800d274:	371c      	adds	r7, #28
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr
	...

0800d280 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800d280:	b480      	push	{r7}
 800d282:	b083      	sub	sp, #12
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800d288:	4a04      	ldr	r2, [pc, #16]	@ (800d29c <CDC_Attach_Rx+0x1c>)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6013      	str	r3, [r2, #0]
}
 800d28e:	bf00      	nop
 800d290:	370c      	adds	r7, #12
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	2000116c 	.word	0x2000116c

0800d2a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	6039      	str	r1, [r7, #0]
 800d2aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	2212      	movs	r2, #18
 800d2b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d2b2:	4b03      	ldr	r3, [pc, #12]	@ (800d2c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	370c      	adds	r7, #12
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr
 800d2c0:	200000fc 	.word	0x200000fc

0800d2c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b083      	sub	sp, #12
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	6039      	str	r1, [r7, #0]
 800d2ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	2204      	movs	r2, #4
 800d2d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d2d6:	4b03      	ldr	r3, [pc, #12]	@ (800d2e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr
 800d2e4:	20000110 	.word	0x20000110

0800d2e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	6039      	str	r1, [r7, #0]
 800d2f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d2f4:	79fb      	ldrb	r3, [r7, #7]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d105      	bne.n	800d306 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d2fa:	683a      	ldr	r2, [r7, #0]
 800d2fc:	4907      	ldr	r1, [pc, #28]	@ (800d31c <USBD_FS_ProductStrDescriptor+0x34>)
 800d2fe:	4808      	ldr	r0, [pc, #32]	@ (800d320 <USBD_FS_ProductStrDescriptor+0x38>)
 800d300:	f7ff fd78 	bl	800cdf4 <USBD_GetString>
 800d304:	e004      	b.n	800d310 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d306:	683a      	ldr	r2, [r7, #0]
 800d308:	4904      	ldr	r1, [pc, #16]	@ (800d31c <USBD_FS_ProductStrDescriptor+0x34>)
 800d30a:	4805      	ldr	r0, [pc, #20]	@ (800d320 <USBD_FS_ProductStrDescriptor+0x38>)
 800d30c:	f7ff fd72 	bl	800cdf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d310:	4b02      	ldr	r3, [pc, #8]	@ (800d31c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d312:	4618      	mov	r0, r3
 800d314:	3708      	adds	r7, #8
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	20001170 	.word	0x20001170
 800d320:	0800db44 	.word	0x0800db44

0800d324 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	4603      	mov	r3, r0
 800d32c:	6039      	str	r1, [r7, #0]
 800d32e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d330:	683a      	ldr	r2, [r7, #0]
 800d332:	4904      	ldr	r1, [pc, #16]	@ (800d344 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d334:	4804      	ldr	r0, [pc, #16]	@ (800d348 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d336:	f7ff fd5d 	bl	800cdf4 <USBD_GetString>
  return USBD_StrDesc;
 800d33a:	4b02      	ldr	r3, [pc, #8]	@ (800d344 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3708      	adds	r7, #8
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	20001170 	.word	0x20001170
 800d348:	0800db5c 	.word	0x0800db5c

0800d34c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	4603      	mov	r3, r0
 800d354:	6039      	str	r1, [r7, #0]
 800d356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	221a      	movs	r2, #26
 800d35c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d35e:	f000 f843 	bl	800d3e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d362:	4b02      	ldr	r3, [pc, #8]	@ (800d36c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d364:	4618      	mov	r0, r3
 800d366:	3708      	adds	r7, #8
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	20000114 	.word	0x20000114

0800d370 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	4603      	mov	r3, r0
 800d378:	6039      	str	r1, [r7, #0]
 800d37a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d37c:	79fb      	ldrb	r3, [r7, #7]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d105      	bne.n	800d38e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d382:	683a      	ldr	r2, [r7, #0]
 800d384:	4907      	ldr	r1, [pc, #28]	@ (800d3a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d386:	4808      	ldr	r0, [pc, #32]	@ (800d3a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d388:	f7ff fd34 	bl	800cdf4 <USBD_GetString>
 800d38c:	e004      	b.n	800d398 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d38e:	683a      	ldr	r2, [r7, #0]
 800d390:	4904      	ldr	r1, [pc, #16]	@ (800d3a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d392:	4805      	ldr	r0, [pc, #20]	@ (800d3a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d394:	f7ff fd2e 	bl	800cdf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d398:	4b02      	ldr	r3, [pc, #8]	@ (800d3a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3708      	adds	r7, #8
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}
 800d3a2:	bf00      	nop
 800d3a4:	20001170 	.word	0x20001170
 800d3a8:	0800db70 	.word	0x0800db70

0800d3ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	6039      	str	r1, [r7, #0]
 800d3b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d3b8:	79fb      	ldrb	r3, [r7, #7]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d105      	bne.n	800d3ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3be:	683a      	ldr	r2, [r7, #0]
 800d3c0:	4907      	ldr	r1, [pc, #28]	@ (800d3e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3c2:	4808      	ldr	r0, [pc, #32]	@ (800d3e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3c4:	f7ff fd16 	bl	800cdf4 <USBD_GetString>
 800d3c8:	e004      	b.n	800d3d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3ca:	683a      	ldr	r2, [r7, #0]
 800d3cc:	4904      	ldr	r1, [pc, #16]	@ (800d3e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3ce:	4805      	ldr	r0, [pc, #20]	@ (800d3e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3d0:	f7ff fd10 	bl	800cdf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3d4:	4b02      	ldr	r3, [pc, #8]	@ (800d3e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3708      	adds	r7, #8
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	20001170 	.word	0x20001170
 800d3e4:	0800db7c 	.word	0x0800db7c

0800d3e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d3ee:	4b0f      	ldr	r3, [pc, #60]	@ (800d42c <Get_SerialNum+0x44>)
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d3f4:	4b0e      	ldr	r3, [pc, #56]	@ (800d430 <Get_SerialNum+0x48>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d3fa:	4b0e      	ldr	r3, [pc, #56]	@ (800d434 <Get_SerialNum+0x4c>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d400:	68fa      	ldr	r2, [r7, #12]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	4413      	add	r3, r2
 800d406:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d009      	beq.n	800d422 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d40e:	2208      	movs	r2, #8
 800d410:	4909      	ldr	r1, [pc, #36]	@ (800d438 <Get_SerialNum+0x50>)
 800d412:	68f8      	ldr	r0, [r7, #12]
 800d414:	f000 f814 	bl	800d440 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d418:	2204      	movs	r2, #4
 800d41a:	4908      	ldr	r1, [pc, #32]	@ (800d43c <Get_SerialNum+0x54>)
 800d41c:	68b8      	ldr	r0, [r7, #8]
 800d41e:	f000 f80f 	bl	800d440 <IntToUnicode>
  }
}
 800d422:	bf00      	nop
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	1fff7a10 	.word	0x1fff7a10
 800d430:	1fff7a14 	.word	0x1fff7a14
 800d434:	1fff7a18 	.word	0x1fff7a18
 800d438:	20000116 	.word	0x20000116
 800d43c:	20000126 	.word	0x20000126

0800d440 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d440:	b480      	push	{r7}
 800d442:	b087      	sub	sp, #28
 800d444:	af00      	add	r7, sp, #0
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	4613      	mov	r3, r2
 800d44c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d44e:	2300      	movs	r3, #0
 800d450:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d452:	2300      	movs	r3, #0
 800d454:	75fb      	strb	r3, [r7, #23]
 800d456:	e027      	b.n	800d4a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	0f1b      	lsrs	r3, r3, #28
 800d45c:	2b09      	cmp	r3, #9
 800d45e:	d80b      	bhi.n	800d478 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	0f1b      	lsrs	r3, r3, #28
 800d464:	b2da      	uxtb	r2, r3
 800d466:	7dfb      	ldrb	r3, [r7, #23]
 800d468:	005b      	lsls	r3, r3, #1
 800d46a:	4619      	mov	r1, r3
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	440b      	add	r3, r1
 800d470:	3230      	adds	r2, #48	@ 0x30
 800d472:	b2d2      	uxtb	r2, r2
 800d474:	701a      	strb	r2, [r3, #0]
 800d476:	e00a      	b.n	800d48e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	0f1b      	lsrs	r3, r3, #28
 800d47c:	b2da      	uxtb	r2, r3
 800d47e:	7dfb      	ldrb	r3, [r7, #23]
 800d480:	005b      	lsls	r3, r3, #1
 800d482:	4619      	mov	r1, r3
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	440b      	add	r3, r1
 800d488:	3237      	adds	r2, #55	@ 0x37
 800d48a:	b2d2      	uxtb	r2, r2
 800d48c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	011b      	lsls	r3, r3, #4
 800d492:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d494:	7dfb      	ldrb	r3, [r7, #23]
 800d496:	005b      	lsls	r3, r3, #1
 800d498:	3301      	adds	r3, #1
 800d49a:	68ba      	ldr	r2, [r7, #8]
 800d49c:	4413      	add	r3, r2
 800d49e:	2200      	movs	r2, #0
 800d4a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d4a2:	7dfb      	ldrb	r3, [r7, #23]
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	75fb      	strb	r3, [r7, #23]
 800d4a8:	7dfa      	ldrb	r2, [r7, #23]
 800d4aa:	79fb      	ldrb	r3, [r7, #7]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d3d3      	bcc.n	800d458 <IntToUnicode+0x18>
  }
}
 800d4b0:	bf00      	nop
 800d4b2:	bf00      	nop
 800d4b4:	371c      	adds	r7, #28
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr
	...

0800d4c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b08a      	sub	sp, #40	@ 0x28
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4c8:	f107 0314 	add.w	r3, r7, #20
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	601a      	str	r2, [r3, #0]
 800d4d0:	605a      	str	r2, [r3, #4]
 800d4d2:	609a      	str	r2, [r3, #8]
 800d4d4:	60da      	str	r2, [r3, #12]
 800d4d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d4e0:	d13a      	bne.n	800d558 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	613b      	str	r3, [r7, #16]
 800d4e6:	4b1e      	ldr	r3, [pc, #120]	@ (800d560 <HAL_PCD_MspInit+0xa0>)
 800d4e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4ea:	4a1d      	ldr	r2, [pc, #116]	@ (800d560 <HAL_PCD_MspInit+0xa0>)
 800d4ec:	f043 0301 	orr.w	r3, r3, #1
 800d4f0:	6313      	str	r3, [r2, #48]	@ 0x30
 800d4f2:	4b1b      	ldr	r3, [pc, #108]	@ (800d560 <HAL_PCD_MspInit+0xa0>)
 800d4f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4f6:	f003 0301 	and.w	r3, r3, #1
 800d4fa:	613b      	str	r3, [r7, #16]
 800d4fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d4fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d504:	2302      	movs	r3, #2
 800d506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d508:	2300      	movs	r3, #0
 800d50a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d50c:	2303      	movs	r3, #3
 800d50e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d510:	230a      	movs	r3, #10
 800d512:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d514:	f107 0314 	add.w	r3, r7, #20
 800d518:	4619      	mov	r1, r3
 800d51a:	4812      	ldr	r0, [pc, #72]	@ (800d564 <HAL_PCD_MspInit+0xa4>)
 800d51c:	f7f6 fe32 	bl	8004184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d520:	4b0f      	ldr	r3, [pc, #60]	@ (800d560 <HAL_PCD_MspInit+0xa0>)
 800d522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d524:	4a0e      	ldr	r2, [pc, #56]	@ (800d560 <HAL_PCD_MspInit+0xa0>)
 800d526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d52a:	6353      	str	r3, [r2, #52]	@ 0x34
 800d52c:	2300      	movs	r3, #0
 800d52e:	60fb      	str	r3, [r7, #12]
 800d530:	4b0b      	ldr	r3, [pc, #44]	@ (800d560 <HAL_PCD_MspInit+0xa0>)
 800d532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d534:	4a0a      	ldr	r2, [pc, #40]	@ (800d560 <HAL_PCD_MspInit+0xa0>)
 800d536:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d53a:	6453      	str	r3, [r2, #68]	@ 0x44
 800d53c:	4b08      	ldr	r3, [pc, #32]	@ (800d560 <HAL_PCD_MspInit+0xa0>)
 800d53e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d540:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d544:	60fb      	str	r3, [r7, #12]
 800d546:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d548:	2200      	movs	r2, #0
 800d54a:	2100      	movs	r1, #0
 800d54c:	2043      	movs	r0, #67	@ 0x43
 800d54e:	f7f6 fa36 	bl	80039be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d552:	2043      	movs	r0, #67	@ 0x43
 800d554:	f7f6 fa4f 	bl	80039f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d558:	bf00      	nop
 800d55a:	3728      	adds	r7, #40	@ 0x28
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	40023800 	.word	0x40023800
 800d564:	40020000 	.word	0x40020000

0800d568 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d57c:	4619      	mov	r1, r3
 800d57e:	4610      	mov	r0, r2
 800d580:	f7fe fabf 	bl	800bb02 <USBD_LL_SetupStage>
}
 800d584:	bf00      	nop
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	460b      	mov	r3, r1
 800d596:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d59e:	78fa      	ldrb	r2, [r7, #3]
 800d5a0:	6879      	ldr	r1, [r7, #4]
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	00db      	lsls	r3, r3, #3
 800d5a6:	4413      	add	r3, r2
 800d5a8:	009b      	lsls	r3, r3, #2
 800d5aa:	440b      	add	r3, r1
 800d5ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	78fb      	ldrb	r3, [r7, #3]
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	f7fe faf9 	bl	800bbac <USBD_LL_DataOutStage>
}
 800d5ba:	bf00      	nop
 800d5bc:	3708      	adds	r7, #8
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}

0800d5c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b082      	sub	sp, #8
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d5d4:	78fa      	ldrb	r2, [r7, #3]
 800d5d6:	6879      	ldr	r1, [r7, #4]
 800d5d8:	4613      	mov	r3, r2
 800d5da:	00db      	lsls	r3, r3, #3
 800d5dc:	4413      	add	r3, r2
 800d5de:	009b      	lsls	r3, r3, #2
 800d5e0:	440b      	add	r3, r1
 800d5e2:	3320      	adds	r3, #32
 800d5e4:	681a      	ldr	r2, [r3, #0]
 800d5e6:	78fb      	ldrb	r3, [r7, #3]
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	f7fe fb9b 	bl	800bd24 <USBD_LL_DataInStage>
}
 800d5ee:	bf00      	nop
 800d5f0:	3708      	adds	r7, #8
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}

0800d5f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5f6:	b580      	push	{r7, lr}
 800d5f8:	b082      	sub	sp, #8
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d604:	4618      	mov	r0, r3
 800d606:	f7fe fcdf 	bl	800bfc8 <USBD_LL_SOF>
}
 800d60a:	bf00      	nop
 800d60c:	3708      	adds	r7, #8
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}

0800d612 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d612:	b580      	push	{r7, lr}
 800d614:	b084      	sub	sp, #16
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d61a:	2301      	movs	r3, #1
 800d61c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	79db      	ldrb	r3, [r3, #7]
 800d622:	2b02      	cmp	r3, #2
 800d624:	d001      	beq.n	800d62a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d626:	f7f4 fa63 	bl	8001af0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d630:	7bfa      	ldrb	r2, [r7, #15]
 800d632:	4611      	mov	r1, r2
 800d634:	4618      	mov	r0, r3
 800d636:	f7fe fc83 	bl	800bf40 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d640:	4618      	mov	r0, r3
 800d642:	f7fe fc2a 	bl	800be9a <USBD_LL_Reset>
}
 800d646:	bf00      	nop
 800d648:	3710      	adds	r7, #16
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
	...

0800d650 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b082      	sub	sp, #8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fe fc7e 	bl	800bf60 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	6812      	ldr	r2, [r2, #0]
 800d672:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d676:	f043 0301 	orr.w	r3, r3, #1
 800d67a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	7adb      	ldrb	r3, [r3, #11]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d005      	beq.n	800d690 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d684:	4b04      	ldr	r3, [pc, #16]	@ (800d698 <HAL_PCD_SuspendCallback+0x48>)
 800d686:	691b      	ldr	r3, [r3, #16]
 800d688:	4a03      	ldr	r2, [pc, #12]	@ (800d698 <HAL_PCD_SuspendCallback+0x48>)
 800d68a:	f043 0306 	orr.w	r3, r3, #6
 800d68e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d690:	bf00      	nop
 800d692:	3708      	adds	r7, #8
 800d694:	46bd      	mov	sp, r7
 800d696:	bd80      	pop	{r7, pc}
 800d698:	e000ed00 	.word	0xe000ed00

0800d69c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6aa:	4618      	mov	r0, r3
 800d6ac:	f7fe fc74 	bl	800bf98 <USBD_LL_Resume>
}
 800d6b0:	bf00      	nop
 800d6b2:	3708      	adds	r7, #8
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6ca:	78fa      	ldrb	r2, [r7, #3]
 800d6cc:	4611      	mov	r1, r2
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7fe fccc 	bl	800c06c <USBD_LL_IsoOUTIncomplete>
}
 800d6d4:	bf00      	nop
 800d6d6:	3708      	adds	r7, #8
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6ee:	78fa      	ldrb	r2, [r7, #3]
 800d6f0:	4611      	mov	r1, r2
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7fe fc88 	bl	800c008 <USBD_LL_IsoINIncomplete>
}
 800d6f8:	bf00      	nop
 800d6fa:	3708      	adds	r7, #8
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b082      	sub	sp, #8
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d70e:	4618      	mov	r0, r3
 800d710:	f7fe fcde 	bl	800c0d0 <USBD_LL_DevConnected>
}
 800d714:	bf00      	nop
 800d716:	3708      	adds	r7, #8
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b082      	sub	sp, #8
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7fe fcdb 	bl	800c0e6 <USBD_LL_DevDisconnected>
}
 800d730:	bf00      	nop
 800d732:	3708      	adds	r7, #8
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d13c      	bne.n	800d7c2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d748:	4a20      	ldr	r2, [pc, #128]	@ (800d7cc <USBD_LL_Init+0x94>)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4a1e      	ldr	r2, [pc, #120]	@ (800d7cc <USBD_LL_Init+0x94>)
 800d754:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d758:	4b1c      	ldr	r3, [pc, #112]	@ (800d7cc <USBD_LL_Init+0x94>)
 800d75a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d75e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d760:	4b1a      	ldr	r3, [pc, #104]	@ (800d7cc <USBD_LL_Init+0x94>)
 800d762:	2204      	movs	r2, #4
 800d764:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d766:	4b19      	ldr	r3, [pc, #100]	@ (800d7cc <USBD_LL_Init+0x94>)
 800d768:	2202      	movs	r2, #2
 800d76a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d76c:	4b17      	ldr	r3, [pc, #92]	@ (800d7cc <USBD_LL_Init+0x94>)
 800d76e:	2200      	movs	r2, #0
 800d770:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d772:	4b16      	ldr	r3, [pc, #88]	@ (800d7cc <USBD_LL_Init+0x94>)
 800d774:	2202      	movs	r2, #2
 800d776:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d778:	4b14      	ldr	r3, [pc, #80]	@ (800d7cc <USBD_LL_Init+0x94>)
 800d77a:	2200      	movs	r2, #0
 800d77c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d77e:	4b13      	ldr	r3, [pc, #76]	@ (800d7cc <USBD_LL_Init+0x94>)
 800d780:	2200      	movs	r2, #0
 800d782:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d784:	4b11      	ldr	r3, [pc, #68]	@ (800d7cc <USBD_LL_Init+0x94>)
 800d786:	2200      	movs	r2, #0
 800d788:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d78a:	4b10      	ldr	r3, [pc, #64]	@ (800d7cc <USBD_LL_Init+0x94>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d790:	4b0e      	ldr	r3, [pc, #56]	@ (800d7cc <USBD_LL_Init+0x94>)
 800d792:	2200      	movs	r2, #0
 800d794:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d796:	480d      	ldr	r0, [pc, #52]	@ (800d7cc <USBD_LL_Init+0x94>)
 800d798:	f7f9 fd44 	bl	8007224 <HAL_PCD_Init>
 800d79c:	4603      	mov	r3, r0
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d001      	beq.n	800d7a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d7a2:	f7f4 f9a5 	bl	8001af0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d7a6:	2180      	movs	r1, #128	@ 0x80
 800d7a8:	4808      	ldr	r0, [pc, #32]	@ (800d7cc <USBD_LL_Init+0x94>)
 800d7aa:	f7fa ff70 	bl	800868e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d7ae:	2240      	movs	r2, #64	@ 0x40
 800d7b0:	2100      	movs	r1, #0
 800d7b2:	4806      	ldr	r0, [pc, #24]	@ (800d7cc <USBD_LL_Init+0x94>)
 800d7b4:	f7fa ff24 	bl	8008600 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d7b8:	2280      	movs	r2, #128	@ 0x80
 800d7ba:	2101      	movs	r1, #1
 800d7bc:	4803      	ldr	r0, [pc, #12]	@ (800d7cc <USBD_LL_Init+0x94>)
 800d7be:	f7fa ff1f 	bl	8008600 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d7c2:	2300      	movs	r3, #0
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}
 800d7cc:	20001370 	.word	0x20001370

0800d7d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f7f9 fe2b 	bl	8007442 <HAL_PCD_Start>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7f0:	7bfb      	ldrb	r3, [r7, #15]
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f000 f942 	bl	800da7c <USBD_Get_USB_Status>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3710      	adds	r7, #16
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b084      	sub	sp, #16
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
 800d80e:	4608      	mov	r0, r1
 800d810:	4611      	mov	r1, r2
 800d812:	461a      	mov	r2, r3
 800d814:	4603      	mov	r3, r0
 800d816:	70fb      	strb	r3, [r7, #3]
 800d818:	460b      	mov	r3, r1
 800d81a:	70bb      	strb	r3, [r7, #2]
 800d81c:	4613      	mov	r3, r2
 800d81e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d820:	2300      	movs	r3, #0
 800d822:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d824:	2300      	movs	r3, #0
 800d826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d82e:	78bb      	ldrb	r3, [r7, #2]
 800d830:	883a      	ldrh	r2, [r7, #0]
 800d832:	78f9      	ldrb	r1, [r7, #3]
 800d834:	f7fa faff 	bl	8007e36 <HAL_PCD_EP_Open>
 800d838:	4603      	mov	r3, r0
 800d83a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d83c:	7bfb      	ldrb	r3, [r7, #15]
 800d83e:	4618      	mov	r0, r3
 800d840:	f000 f91c 	bl	800da7c <USBD_Get_USB_Status>
 800d844:	4603      	mov	r3, r0
 800d846:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d848:	7bbb      	ldrb	r3, [r7, #14]
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3710      	adds	r7, #16
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}

0800d852 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d852:	b580      	push	{r7, lr}
 800d854:	b084      	sub	sp, #16
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]
 800d85a:	460b      	mov	r3, r1
 800d85c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d85e:	2300      	movs	r3, #0
 800d860:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d862:	2300      	movs	r3, #0
 800d864:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d86c:	78fa      	ldrb	r2, [r7, #3]
 800d86e:	4611      	mov	r1, r2
 800d870:	4618      	mov	r0, r3
 800d872:	f7fa fb4a 	bl	8007f0a <HAL_PCD_EP_Close>
 800d876:	4603      	mov	r3, r0
 800d878:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d87a:	7bfb      	ldrb	r3, [r7, #15]
 800d87c:	4618      	mov	r0, r3
 800d87e:	f000 f8fd 	bl	800da7c <USBD_Get_USB_Status>
 800d882:	4603      	mov	r3, r0
 800d884:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d886:	7bbb      	ldrb	r3, [r7, #14]
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3710      	adds	r7, #16
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	460b      	mov	r3, r1
 800d89a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d89c:	2300      	movs	r3, #0
 800d89e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8aa:	78fa      	ldrb	r2, [r7, #3]
 800d8ac:	4611      	mov	r1, r2
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7fa fc02 	bl	80080b8 <HAL_PCD_EP_SetStall>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8b8:	7bfb      	ldrb	r3, [r7, #15]
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f000 f8de 	bl	800da7c <USBD_Get_USB_Status>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3710      	adds	r7, #16
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}

0800d8ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8ce:	b580      	push	{r7, lr}
 800d8d0:	b084      	sub	sp, #16
 800d8d2:	af00      	add	r7, sp, #0
 800d8d4:	6078      	str	r0, [r7, #4]
 800d8d6:	460b      	mov	r3, r1
 800d8d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8e8:	78fa      	ldrb	r2, [r7, #3]
 800d8ea:	4611      	mov	r1, r2
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f7fa fc46 	bl	800817e <HAL_PCD_EP_ClrStall>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8f6:	7bfb      	ldrb	r3, [r7, #15]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f000 f8bf 	bl	800da7c <USBD_Get_USB_Status>
 800d8fe:	4603      	mov	r3, r0
 800d900:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d902:	7bbb      	ldrb	r3, [r7, #14]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3710      	adds	r7, #16
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b085      	sub	sp, #20
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	460b      	mov	r3, r1
 800d916:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d91e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d920:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d924:	2b00      	cmp	r3, #0
 800d926:	da0b      	bge.n	800d940 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d928:	78fb      	ldrb	r3, [r7, #3]
 800d92a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d92e:	68f9      	ldr	r1, [r7, #12]
 800d930:	4613      	mov	r3, r2
 800d932:	00db      	lsls	r3, r3, #3
 800d934:	4413      	add	r3, r2
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	440b      	add	r3, r1
 800d93a:	3316      	adds	r3, #22
 800d93c:	781b      	ldrb	r3, [r3, #0]
 800d93e:	e00b      	b.n	800d958 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d940:	78fb      	ldrb	r3, [r7, #3]
 800d942:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d946:	68f9      	ldr	r1, [r7, #12]
 800d948:	4613      	mov	r3, r2
 800d94a:	00db      	lsls	r3, r3, #3
 800d94c:	4413      	add	r3, r2
 800d94e:	009b      	lsls	r3, r3, #2
 800d950:	440b      	add	r3, r1
 800d952:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d956:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3714      	adds	r7, #20
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr

0800d964 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b084      	sub	sp, #16
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
 800d96c:	460b      	mov	r3, r1
 800d96e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d970:	2300      	movs	r3, #0
 800d972:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d974:	2300      	movs	r3, #0
 800d976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d97e:	78fa      	ldrb	r2, [r7, #3]
 800d980:	4611      	mov	r1, r2
 800d982:	4618      	mov	r0, r3
 800d984:	f7fa fa33 	bl	8007dee <HAL_PCD_SetAddress>
 800d988:	4603      	mov	r3, r0
 800d98a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d98c:	7bfb      	ldrb	r3, [r7, #15]
 800d98e:	4618      	mov	r0, r3
 800d990:	f000 f874 	bl	800da7c <USBD_Get_USB_Status>
 800d994:	4603      	mov	r3, r0
 800d996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d998:	7bbb      	ldrb	r3, [r7, #14]
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3710      	adds	r7, #16
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b086      	sub	sp, #24
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	60f8      	str	r0, [r7, #12]
 800d9aa:	607a      	str	r2, [r7, #4]
 800d9ac:	603b      	str	r3, [r7, #0]
 800d9ae:	460b      	mov	r3, r1
 800d9b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d9c0:	7af9      	ldrb	r1, [r7, #11]
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	687a      	ldr	r2, [r7, #4]
 800d9c6:	f7fa fb3d 	bl	8008044 <HAL_PCD_EP_Transmit>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9ce:	7dfb      	ldrb	r3, [r7, #23]
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f000 f853 	bl	800da7c <USBD_Get_USB_Status>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d9da:	7dbb      	ldrb	r3, [r7, #22]
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3718      	adds	r7, #24
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b086      	sub	sp, #24
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	60f8      	str	r0, [r7, #12]
 800d9ec:	607a      	str	r2, [r7, #4]
 800d9ee:	603b      	str	r3, [r7, #0]
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da02:	7af9      	ldrb	r1, [r7, #11]
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	687a      	ldr	r2, [r7, #4]
 800da08:	f7fa fac9 	bl	8007f9e <HAL_PCD_EP_Receive>
 800da0c:	4603      	mov	r3, r0
 800da0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da10:	7dfb      	ldrb	r3, [r7, #23]
 800da12:	4618      	mov	r0, r3
 800da14:	f000 f832 	bl	800da7c <USBD_Get_USB_Status>
 800da18:	4603      	mov	r3, r0
 800da1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da1c:	7dbb      	ldrb	r3, [r7, #22]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3718      	adds	r7, #24
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}

0800da26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da26:	b580      	push	{r7, lr}
 800da28:	b082      	sub	sp, #8
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
 800da2e:	460b      	mov	r3, r1
 800da30:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da38:	78fa      	ldrb	r2, [r7, #3]
 800da3a:	4611      	mov	r1, r2
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7fa fae9 	bl	8008014 <HAL_PCD_EP_GetRxCount>
 800da42:	4603      	mov	r3, r0
}
 800da44:	4618      	mov	r0, r3
 800da46:	3708      	adds	r7, #8
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800da4c:	b480      	push	{r7}
 800da4e:	b083      	sub	sp, #12
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800da54:	4b03      	ldr	r3, [pc, #12]	@ (800da64 <USBD_static_malloc+0x18>)
}
 800da56:	4618      	mov	r0, r3
 800da58:	370c      	adds	r7, #12
 800da5a:	46bd      	mov	sp, r7
 800da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da60:	4770      	bx	lr
 800da62:	bf00      	nop
 800da64:	20001854 	.word	0x20001854

0800da68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800da68:	b480      	push	{r7}
 800da6a:	b083      	sub	sp, #12
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]

}
 800da70:	bf00      	nop
 800da72:	370c      	adds	r7, #12
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr

0800da7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800da7c:	b480      	push	{r7}
 800da7e:	b085      	sub	sp, #20
 800da80:	af00      	add	r7, sp, #0
 800da82:	4603      	mov	r3, r0
 800da84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da86:	2300      	movs	r3, #0
 800da88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800da8a:	79fb      	ldrb	r3, [r7, #7]
 800da8c:	2b03      	cmp	r3, #3
 800da8e:	d817      	bhi.n	800dac0 <USBD_Get_USB_Status+0x44>
 800da90:	a201      	add	r2, pc, #4	@ (adr r2, 800da98 <USBD_Get_USB_Status+0x1c>)
 800da92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da96:	bf00      	nop
 800da98:	0800daa9 	.word	0x0800daa9
 800da9c:	0800daaf 	.word	0x0800daaf
 800daa0:	0800dab5 	.word	0x0800dab5
 800daa4:	0800dabb 	.word	0x0800dabb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800daa8:	2300      	movs	r3, #0
 800daaa:	73fb      	strb	r3, [r7, #15]
    break;
 800daac:	e00b      	b.n	800dac6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800daae:	2303      	movs	r3, #3
 800dab0:	73fb      	strb	r3, [r7, #15]
    break;
 800dab2:	e008      	b.n	800dac6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dab4:	2301      	movs	r3, #1
 800dab6:	73fb      	strb	r3, [r7, #15]
    break;
 800dab8:	e005      	b.n	800dac6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800daba:	2303      	movs	r3, #3
 800dabc:	73fb      	strb	r3, [r7, #15]
    break;
 800dabe:	e002      	b.n	800dac6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dac0:	2303      	movs	r3, #3
 800dac2:	73fb      	strb	r3, [r7, #15]
    break;
 800dac4:	bf00      	nop
  }
  return usb_status;
 800dac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3714      	adds	r7, #20
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr

0800dad4 <memset>:
 800dad4:	4402      	add	r2, r0
 800dad6:	4603      	mov	r3, r0
 800dad8:	4293      	cmp	r3, r2
 800dada:	d100      	bne.n	800dade <memset+0xa>
 800dadc:	4770      	bx	lr
 800dade:	f803 1b01 	strb.w	r1, [r3], #1
 800dae2:	e7f9      	b.n	800dad8 <memset+0x4>

0800dae4 <__libc_init_array>:
 800dae4:	b570      	push	{r4, r5, r6, lr}
 800dae6:	4d0d      	ldr	r5, [pc, #52]	@ (800db1c <__libc_init_array+0x38>)
 800dae8:	4c0d      	ldr	r4, [pc, #52]	@ (800db20 <__libc_init_array+0x3c>)
 800daea:	1b64      	subs	r4, r4, r5
 800daec:	10a4      	asrs	r4, r4, #2
 800daee:	2600      	movs	r6, #0
 800daf0:	42a6      	cmp	r6, r4
 800daf2:	d109      	bne.n	800db08 <__libc_init_array+0x24>
 800daf4:	4d0b      	ldr	r5, [pc, #44]	@ (800db24 <__libc_init_array+0x40>)
 800daf6:	4c0c      	ldr	r4, [pc, #48]	@ (800db28 <__libc_init_array+0x44>)
 800daf8:	f000 f818 	bl	800db2c <_init>
 800dafc:	1b64      	subs	r4, r4, r5
 800dafe:	10a4      	asrs	r4, r4, #2
 800db00:	2600      	movs	r6, #0
 800db02:	42a6      	cmp	r6, r4
 800db04:	d105      	bne.n	800db12 <__libc_init_array+0x2e>
 800db06:	bd70      	pop	{r4, r5, r6, pc}
 800db08:	f855 3b04 	ldr.w	r3, [r5], #4
 800db0c:	4798      	blx	r3
 800db0e:	3601      	adds	r6, #1
 800db10:	e7ee      	b.n	800daf0 <__libc_init_array+0xc>
 800db12:	f855 3b04 	ldr.w	r3, [r5], #4
 800db16:	4798      	blx	r3
 800db18:	3601      	adds	r6, #1
 800db1a:	e7f2      	b.n	800db02 <__libc_init_array+0x1e>
 800db1c:	0800dbc4 	.word	0x0800dbc4
 800db20:	0800dbc4 	.word	0x0800dbc4
 800db24:	0800dbc4 	.word	0x0800dbc4
 800db28:	0800dbc8 	.word	0x0800dbc8

0800db2c <_init>:
 800db2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db2e:	bf00      	nop
 800db30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db32:	bc08      	pop	{r3}
 800db34:	469e      	mov	lr, r3
 800db36:	4770      	bx	lr

0800db38 <_fini>:
 800db38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db3a:	bf00      	nop
 800db3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db3e:	bc08      	pop	{r3}
 800db40:	469e      	mov	lr, r3
 800db42:	4770      	bx	lr
