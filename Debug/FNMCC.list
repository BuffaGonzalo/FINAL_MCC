
FNMCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000edb4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000056e4  0800ef54  0800ef54  0000ff54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014638  08014638  00016180  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014638  08014638  00015638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014640  08014640  00016180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014640  08014640  00015640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014644  08014644  00015644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  08014648  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019a0  20000180  080147c8  00016180  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b20  080147c8  00016b20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa9e  00000000  00000000  000161b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004444  00000000  00000000  00030c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001820  00000000  00000000  00035098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001bf64  00000000  00000000  000368b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001fbf4  00000000  00000000  0005281c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0009fd89  00000000  00000000  00072410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00112199  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00001289  00000000  00000000  001121dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d18  00000000  00000000  00113468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0011a180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000180 	.word	0x20000180
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ef3c 	.word	0x0800ef3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000184 	.word	0x20000184
 80001dc:	0800ef3c 	.word	0x0800ef3c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b988 	b.w	8000d94 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	468e      	mov	lr, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	4688      	mov	r8, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4617      	mov	r7, r2
 8000ab0:	d962      	bls.n	8000b78 <__udivmoddi4+0xdc>
 8000ab2:	fab2 f682 	clz	r6, r2
 8000ab6:	b14e      	cbz	r6, 8000acc <__udivmoddi4+0x30>
 8000ab8:	f1c6 0320 	rsb	r3, r6, #32
 8000abc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ac0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac4:	40b7      	lsls	r7, r6
 8000ac6:	ea43 0808 	orr.w	r8, r3, r8
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad0:	fa1f fc87 	uxth.w	ip, r7
 8000ad4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ad8:	0c23      	lsrs	r3, r4, #16
 8000ada:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ade:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0x62>
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	f101 30ff 	add.w	r0, r1, #4294967295
 8000af0:	f080 80ea 	bcs.w	8000cc8 <__udivmoddi4+0x22c>
 8000af4:	429a      	cmp	r2, r3
 8000af6:	f240 80e7 	bls.w	8000cc8 <__udivmoddi4+0x22c>
 8000afa:	3902      	subs	r1, #2
 8000afc:	443b      	add	r3, r7
 8000afe:	1a9a      	subs	r2, r3, r2
 8000b00:	b2a3      	uxth	r3, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b12:	459c      	cmp	ip, r3
 8000b14:	d909      	bls.n	8000b2a <__udivmoddi4+0x8e>
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b1c:	f080 80d6 	bcs.w	8000ccc <__udivmoddi4+0x230>
 8000b20:	459c      	cmp	ip, r3
 8000b22:	f240 80d3 	bls.w	8000ccc <__udivmoddi4+0x230>
 8000b26:	443b      	add	r3, r7
 8000b28:	3802      	subs	r0, #2
 8000b2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b2e:	eba3 030c 	sub.w	r3, r3, ip
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11d      	cbz	r5, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40f3      	lsrs	r3, r6
 8000b38:	2200      	movs	r2, #0
 8000b3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d905      	bls.n	8000b52 <__udivmoddi4+0xb6>
 8000b46:	b10d      	cbz	r5, 8000b4c <__udivmoddi4+0xb0>
 8000b48:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e7f5      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b52:	fab3 f183 	clz	r1, r3
 8000b56:	2900      	cmp	r1, #0
 8000b58:	d146      	bne.n	8000be8 <__udivmoddi4+0x14c>
 8000b5a:	4573      	cmp	r3, lr
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0xc8>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 8105 	bhi.w	8000d6e <__udivmoddi4+0x2d2>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	4690      	mov	r8, r2
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d0e5      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b72:	e9c5 4800 	strd	r4, r8, [r5]
 8000b76:	e7e2      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f000 8090 	beq.w	8000c9e <__udivmoddi4+0x202>
 8000b7e:	fab2 f682 	clz	r6, r2
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	f040 80a4 	bne.w	8000cd0 <__udivmoddi4+0x234>
 8000b88:	1a8a      	subs	r2, r1, r2
 8000b8a:	0c03      	lsrs	r3, r0, #16
 8000b8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b90:	b280      	uxth	r0, r0
 8000b92:	b2bc      	uxth	r4, r7
 8000b94:	2101      	movs	r1, #1
 8000b96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ba2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d907      	bls.n	8000bba <__udivmoddi4+0x11e>
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bb0:	d202      	bcs.n	8000bb8 <__udivmoddi4+0x11c>
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	f200 80e0 	bhi.w	8000d78 <__udivmoddi4+0x2dc>
 8000bb8:	46c4      	mov	ip, r8
 8000bba:	1a9b      	subs	r3, r3, r2
 8000bbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bc8:	fb02 f404 	mul.w	r4, r2, r4
 8000bcc:	429c      	cmp	r4, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x144>
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x142>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f200 80ca 	bhi.w	8000d72 <__udivmoddi4+0x2d6>
 8000bde:	4602      	mov	r2, r0
 8000be0:	1b1b      	subs	r3, r3, r4
 8000be2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000be6:	e7a5      	b.n	8000b34 <__udivmoddi4+0x98>
 8000be8:	f1c1 0620 	rsb	r6, r1, #32
 8000bec:	408b      	lsls	r3, r1
 8000bee:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf2:	431f      	orrs	r7, r3
 8000bf4:	fa0e f401 	lsl.w	r4, lr, r1
 8000bf8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c04:	4323      	orrs	r3, r4
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	fa1f fc87 	uxth.w	ip, r7
 8000c0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c12:	0c1c      	lsrs	r4, r3, #16
 8000c14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	fa02 f201 	lsl.w	r2, r2, r1
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x1a0>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c2e:	f080 809c 	bcs.w	8000d6a <__udivmoddi4+0x2ce>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f240 8099 	bls.w	8000d6a <__udivmoddi4+0x2ce>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	eba4 040e 	sub.w	r4, r4, lr
 8000c40:	fa1f fe83 	uxth.w	lr, r3
 8000c44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c48:	fb09 4413 	mls	r4, r9, r3, r4
 8000c4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c54:	45a4      	cmp	ip, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x1ce>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c5e:	f080 8082 	bcs.w	8000d66 <__udivmoddi4+0x2ca>
 8000c62:	45a4      	cmp	ip, r4
 8000c64:	d97f      	bls.n	8000d66 <__udivmoddi4+0x2ca>
 8000c66:	3b02      	subs	r3, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c6e:	eba4 040c 	sub.w	r4, r4, ip
 8000c72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c76:	4564      	cmp	r4, ip
 8000c78:	4673      	mov	r3, lr
 8000c7a:	46e1      	mov	r9, ip
 8000c7c:	d362      	bcc.n	8000d44 <__udivmoddi4+0x2a8>
 8000c7e:	d05f      	beq.n	8000d40 <__udivmoddi4+0x2a4>
 8000c80:	b15d      	cbz	r5, 8000c9a <__udivmoddi4+0x1fe>
 8000c82:	ebb8 0203 	subs.w	r2, r8, r3
 8000c86:	eb64 0409 	sbc.w	r4, r4, r9
 8000c8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c92:	431e      	orrs	r6, r3
 8000c94:	40cc      	lsrs	r4, r1
 8000c96:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	e74f      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000c9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ca2:	0c01      	lsrs	r1, r0, #16
 8000ca4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ca8:	b280      	uxth	r0, r0
 8000caa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4638      	mov	r0, r7
 8000cb2:	463c      	mov	r4, r7
 8000cb4:	46b8      	mov	r8, r7
 8000cb6:	46be      	mov	lr, r7
 8000cb8:	2620      	movs	r6, #32
 8000cba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cbe:	eba2 0208 	sub.w	r2, r2, r8
 8000cc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cc6:	e766      	b.n	8000b96 <__udivmoddi4+0xfa>
 8000cc8:	4601      	mov	r1, r0
 8000cca:	e718      	b.n	8000afe <__udivmoddi4+0x62>
 8000ccc:	4610      	mov	r0, r2
 8000cce:	e72c      	b.n	8000b2a <__udivmoddi4+0x8e>
 8000cd0:	f1c6 0220 	rsb	r2, r6, #32
 8000cd4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cd8:	40b7      	lsls	r7, r6
 8000cda:	40b1      	lsls	r1, r6
 8000cdc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cea:	b2bc      	uxth	r4, r7
 8000cec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cf0:	0c11      	lsrs	r1, r2, #16
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb08 f904 	mul.w	r9, r8, r4
 8000cfa:	40b0      	lsls	r0, r6
 8000cfc:	4589      	cmp	r9, r1
 8000cfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d02:	b280      	uxth	r0, r0
 8000d04:	d93e      	bls.n	8000d84 <__udivmoddi4+0x2e8>
 8000d06:	1879      	adds	r1, r7, r1
 8000d08:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d0c:	d201      	bcs.n	8000d12 <__udivmoddi4+0x276>
 8000d0e:	4589      	cmp	r9, r1
 8000d10:	d81f      	bhi.n	8000d52 <__udivmoddi4+0x2b6>
 8000d12:	eba1 0109 	sub.w	r1, r1, r9
 8000d16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d1a:	fb09 f804 	mul.w	r8, r9, r4
 8000d1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d22:	b292      	uxth	r2, r2
 8000d24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d28:	4542      	cmp	r2, r8
 8000d2a:	d229      	bcs.n	8000d80 <__udivmoddi4+0x2e4>
 8000d2c:	18ba      	adds	r2, r7, r2
 8000d2e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d32:	d2c4      	bcs.n	8000cbe <__udivmoddi4+0x222>
 8000d34:	4542      	cmp	r2, r8
 8000d36:	d2c2      	bcs.n	8000cbe <__udivmoddi4+0x222>
 8000d38:	f1a9 0102 	sub.w	r1, r9, #2
 8000d3c:	443a      	add	r2, r7
 8000d3e:	e7be      	b.n	8000cbe <__udivmoddi4+0x222>
 8000d40:	45f0      	cmp	r8, lr
 8000d42:	d29d      	bcs.n	8000c80 <__udivmoddi4+0x1e4>
 8000d44:	ebbe 0302 	subs.w	r3, lr, r2
 8000d48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d4c:	3801      	subs	r0, #1
 8000d4e:	46e1      	mov	r9, ip
 8000d50:	e796      	b.n	8000c80 <__udivmoddi4+0x1e4>
 8000d52:	eba7 0909 	sub.w	r9, r7, r9
 8000d56:	4449      	add	r1, r9
 8000d58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d60:	fb09 f804 	mul.w	r8, r9, r4
 8000d64:	e7db      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d66:	4673      	mov	r3, lr
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1ce>
 8000d6a:	4650      	mov	r0, sl
 8000d6c:	e766      	b.n	8000c3c <__udivmoddi4+0x1a0>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e6fd      	b.n	8000b6e <__udivmoddi4+0xd2>
 8000d72:	443b      	add	r3, r7
 8000d74:	3a02      	subs	r2, #2
 8000d76:	e733      	b.n	8000be0 <__udivmoddi4+0x144>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	443b      	add	r3, r7
 8000d7e:	e71c      	b.n	8000bba <__udivmoddi4+0x11e>
 8000d80:	4649      	mov	r1, r9
 8000d82:	e79c      	b.n	8000cbe <__udivmoddi4+0x222>
 8000d84:	eba1 0109 	sub.w	r1, r1, r9
 8000d88:	46c4      	mov	ip, r8
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fb09 f804 	mul.w	r8, r9, r4
 8000d92:	e7c4      	b.n	8000d1e <__udivmoddi4+0x282>

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++) {
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	e00a      	b.n	8000dbc <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <HAL_ADC_ConvCpltCallback+0x38>)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000dae:	4a09      	ldr	r2, [pc, #36]	@ (8000dd4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	3301      	adds	r3, #1
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b07      	cmp	r3, #7
 8000dc0:	ddf1      	ble.n	8000da6 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8000dc2:	bf00      	nop
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	200003a4 	.word	0x200003a4
 8000dd4:	200003b4 	.word	0x200003b4

08000dd8 <HAL_I2C_MemTxCpltCallback>:
//void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	//Control del final de operaciones
    //if (hi2c->Instance == hi2c1.Instance) {
        SSD1306_TxCplt = 1;
 8000de0:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <HAL_I2C_MemTxCpltCallback+0x1c>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
    //}
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200005dd 	.word	0x200005dd

08000df8 <HAL_TIM_PeriodElapsedCallback>:
//}
//void HAL_I2C_ER_IRQHandler(){
//	HAL_I2C_ER_IRQHandler(&hi2c1);
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0e      	ldr	r2, [pc, #56]	@ (8000e40 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d116      	bne.n	8000e38 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e44 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e14:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 8000e16:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b28      	cmp	r3, #40	@ 0x28
 8000e1c:	d107      	bne.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 8000e1e:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
			IS10MS=TRUE;
 8000e24:	4a08      	ldr	r2, [pc, #32]	@ (8000e48 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000e26:	7813      	ldrb	r3, [r2, #0]
 8000e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e2c:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 8000e2e:	2208      	movs	r2, #8
 8000e30:	4906      	ldr	r1, [pc, #24]	@ (8000e4c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000e32:	4807      	ldr	r0, [pc, #28]	@ (8000e50 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e34:	f002 fe1c 	bl	8003a70 <HAL_ADC_Start_DMA>
	}
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40010000 	.word	0x40010000
 8000e44:	200003a0 	.word	0x200003a0
 8000e48:	200005dc 	.word	0x200005dc
 8000e4c:	200003a4 	.word	0x200003a4
 8000e50:	2000019c 	.word	0x2000019c

08000e54 <USBRxData>:

void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 8000e54:	b490      	push	{r4, r7}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73fb      	strb	r3, [r7, #15]
 8000e62:	e018      	b.n	8000e96 <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	441a      	add	r2, r3
 8000e6a:	4b10      	ldr	r3, [pc, #64]	@ (8000eac <USBRxData+0x58>)
 8000e6c:	6819      	ldr	r1, [r3, #0]
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <USBRxData+0x58>)
 8000e70:	795b      	ldrb	r3, [r3, #5]
 8000e72:	1c58      	adds	r0, r3, #1
 8000e74:	b2c4      	uxtb	r4, r0
 8000e76:	480d      	ldr	r0, [pc, #52]	@ (8000eac <USBRxData+0x58>)
 8000e78:	7144      	strb	r4, [r0, #5]
 8000e7a:	440b      	add	r3, r1
 8000e7c:	7812      	ldrb	r2, [r2, #0]
 8000e7e:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 8000e80:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <USBRxData+0x58>)
 8000e82:	795a      	ldrb	r2, [r3, #5]
 8000e84:	4b09      	ldr	r3, [pc, #36]	@ (8000eac <USBRxData+0x58>)
 8000e86:	799b      	ldrb	r3, [r3, #6]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <USBRxData+0x58>)
 8000e8e:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	3301      	adds	r3, #1
 8000e94:	73fb      	strb	r3, [r7, #15]
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	683a      	ldr	r2, [r7, #0]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d8e2      	bhi.n	8000e64 <USBRxData+0x10>
	}

}
 8000e9e:	bf00      	nop
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc90      	pop	{r4, r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	200003d0 	.word	0x200003d0

08000eb0 <USBTask>:

void USBTask() {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0c2      	sub	sp, #264	@ 0x108
 8000eb4:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 8000eb6:	4b22      	ldr	r3, [pc, #136]	@ (8000f40 <USBTask+0x90>)
 8000eb8:	791a      	ldrb	r2, [r3, #4]
 8000eba:	4b21      	ldr	r3, [pc, #132]	@ (8000f40 <USBTask+0x90>)
 8000ebc:	795b      	ldrb	r3, [r3, #5]
 8000ebe:	429a      	cmp	r2, r3
 8000ec0:	d039      	beq.n	8000f36 <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (decodeHeader(&USBRx))
 8000ec2:	481f      	ldr	r0, [pc, #124]	@ (8000f40 <USBTask+0x90>)
 8000ec4:	f000 fc94 	bl	80017f0 <decodeHeader>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 8000ece:	491d      	ldr	r1, [pc, #116]	@ (8000f44 <USBTask+0x94>)
 8000ed0:	481b      	ldr	r0, [pc, #108]	@ (8000f40 <USBTask+0x90>)
 8000ed2:	f000 f839 	bl	8000f48 <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000edc:	e01d      	b.n	8000f1a <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 8000ede:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <USBTask+0x94>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <USBTask+0x94>)
 8000ee4:	7a1b      	ldrb	r3, [r3, #8]
 8000ee6:	1c59      	adds	r1, r3, #1
 8000ee8:	b2c8      	uxtb	r0, r1
 8000eea:	4916      	ldr	r1, [pc, #88]	@ (8000f44 <USBTask+0x94>)
 8000eec:	7208      	strb	r0, [r1, #8]
 8000eee:	441a      	add	r2, r3
 8000ef0:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000ef4:	7811      	ldrb	r1, [r2, #0]
 8000ef6:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000efa:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000efe:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 8000f00:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <USBTask+0x94>)
 8000f02:	7a1a      	ldrb	r2, [r3, #8]
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <USBTask+0x94>)
 8000f06:	799b      	ldrb	r3, [r3, #6]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <USBTask+0x94>)
 8000f0e:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000f10:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000f14:	3301      	adds	r3, #1
 8000f16:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <USBTask+0x94>)
 8000f1c:	79db      	ldrb	r3, [r3, #7]
 8000f1e:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d3db      	bcc.n	8000ede <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 8000f26:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <USBTask+0x94>)
 8000f28:	79db      	ldrb	r3, [r3, #7]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f00c f979 	bl	800d228 <CDC_Transmit_FS>
	}

}
 8000f36:	bf00      	nop
 8000f38:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200003d0 	.word	0x200003d0
 8000f44:	200003c4 	.word	0x200003c4

08000f48 <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	7a12      	ldrb	r2, [r2, #8]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2bf0      	cmp	r3, #240	@ 0xf0
 8000f60:	d002      	beq.n	8000f68 <decodeCommand+0x20>
 8000f62:	2bf1      	cmp	r3, #241	@ 0xf1
 8000f64:	d010      	beq.n	8000f88 <decodeCommand+0x40>
 8000f66:	e01f      	b.n	8000fa8 <decodeCommand+0x60>
	case ALIVE:
		putHeaderOnTx(dataTx, ALIVE, 2);
 8000f68:	2202      	movs	r2, #2
 8000f6a:	21f0      	movs	r1, #240	@ 0xf0
 8000f6c:	6838      	ldr	r0, [r7, #0]
 8000f6e:	f000 fb1d 	bl	80015ac <putHeaderOnTx>
		putByteOnTx(dataTx, ACK);
 8000f72:	210d      	movs	r1, #13
 8000f74:	6838      	ldr	r0, [r7, #0]
 8000f76:	f000 fbc8 	bl	800170a <putByteOnTx>
		putByteOnTx(dataTx, dataTx->chk);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	7a5b      	ldrb	r3, [r3, #9]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	6838      	ldr	r0, [r7, #0]
 8000f82:	f000 fbc2 	bl	800170a <putByteOnTx>
		break;
 8000f86:	e025      	b.n	8000fd4 <decodeCommand+0x8c>
	case FIRMWARE:
		putHeaderOnTx(dataTx, FIRMWARE, 13);
 8000f88:	220d      	movs	r2, #13
 8000f8a:	21f1      	movs	r1, #241	@ 0xf1
 8000f8c:	6838      	ldr	r0, [r7, #0]
 8000f8e:	f000 fb0d 	bl	80015ac <putHeaderOnTx>
		putStrOntx(dataTx, firmware);
 8000f92:	4912      	ldr	r1, [pc, #72]	@ (8000fdc <decodeCommand+0x94>)
 8000f94:	6838      	ldr	r0, [r7, #0]
 8000f96:	f000 fbe6 	bl	8001766 <putStrOntx>
		putByteOnTx(dataTx, dataTx->chk);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	7a5b      	ldrb	r3, [r3, #9]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	6838      	ldr	r0, [r7, #0]
 8000fa2:	f000 fbb2 	bl	800170a <putByteOnTx>
		break;
 8000fa6:	e015      	b.n	8000fd4 <decodeCommand+0x8c>
	default:
		putHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	7a12      	ldrb	r2, [r2, #8]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	6838      	ldr	r0, [r7, #0]
 8000fba:	f000 faf7 	bl	80015ac <putHeaderOnTx>
		putByteOnTx(dataTx, UNKNOWN);
 8000fbe:	21ff      	movs	r1, #255	@ 0xff
 8000fc0:	6838      	ldr	r0, [r7, #0]
 8000fc2:	f000 fba2 	bl	800170a <putByteOnTx>
		putByteOnTx(dataTx, dataTx->chk);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	7a5b      	ldrb	r3, [r3, #9]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	6838      	ldr	r0, [r7, #0]
 8000fce:	f000 fb9c 	bl	800170a <putByteOnTx>
		break;
 8000fd2:	bf00      	nop
	}
}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	08013c04 	.word	0x08013c04

08000fe0 <do10ms>:

void do10ms() {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	if(IS10MS){
 8000fe4:	4b10      	ldr	r3, [pc, #64]	@ (8001028 <do10ms+0x48>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d017      	beq.n	8001022 <do10ms+0x42>
		IS10MS=FALSE;
 8000ff2:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <do10ms+0x48>)
 8000ff4:	7813      	ldrb	r3, [r2, #0]
 8000ff6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000ffa:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <do10ms+0x4c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	3b01      	subs	r3, #1
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <do10ms+0x4c>)
 8001004:	6013      	str	r3, [r2, #0]
		if (tmo100ms == 0) {
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <do10ms+0x4c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d109      	bne.n	8001022 <do10ms+0x42>
			tmo100ms = 10;
 800100e:	4b07      	ldr	r3, [pc, #28]	@ (800102c <do10ms+0x4c>)
 8001010:	220a      	movs	r2, #10
 8001012:	601a      	str	r2, [r3, #0]
			IS100MS=TRUE;
 8001014:	4a04      	ldr	r2, [pc, #16]	@ (8001028 <do10ms+0x48>)
 8001016:	7813      	ldrb	r3, [r2, #0]
 8001018:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800101c:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 800101e:	f000 f807 	bl	8001030 <heartBeatTask>
		}
	}
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200005dc 	.word	0x200005dc
 800102c:	20000028 	.word	0x20000028

08001030 <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 8001034:	4b0f      	ldr	r3, [pc, #60]	@ (8001074 <heartBeatTask+0x44>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	43db      	mvns	r3, r3
 800103a:	4a0f      	ldr	r2, [pc, #60]	@ (8001078 <heartBeatTask+0x48>)
 800103c:	7812      	ldrb	r2, [r2, #0]
 800103e:	4611      	mov	r1, r2
 8001040:	2201      	movs	r2, #1
 8001042:	408a      	lsls	r2, r1
 8001044:	4013      	ands	r3, r2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d004      	beq.n	8001054 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 800104a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800104e:	480b      	ldr	r0, [pc, #44]	@ (800107c <heartBeatTask+0x4c>)
 8001050:	f003 ff29 	bl	8004ea6 <HAL_GPIO_TogglePin>

	times++;
 8001054:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <heartBeatTask+0x48>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	b2da      	uxtb	r2, r3
 800105c:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <heartBeatTask+0x48>)
 800105e:	701a      	strb	r2, [r3, #0]
	times &= 31;
 8001060:	4b05      	ldr	r3, [pc, #20]	@ (8001078 <heartBeatTask+0x48>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	f003 031f 	and.w	r3, r3, #31
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <heartBeatTask+0x48>)
 800106c:	701a      	strb	r2, [r3, #0]
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000000 	.word	0x20000000
 8001078:	200005de 	.word	0x200005de
 800107c:	40020800 	.word	0x40020800

08001080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001084:	f002 fb0a 	bl	800369c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001088:	f000 f83c 	bl	8001104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800108c:	f000 fa28 	bl	80014e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001090:	f000 f9e8 	bl	8001464 <MX_DMA_Init>
  MX_ADC1_Init();
 8001094:	f000 f89e 	bl	80011d4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001098:	f000 f950 	bl	800133c <MX_I2C1_Init>
  MX_TIM1_Init();
 800109c:	f000 f97c 	bl	8001398 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80010a0:	f00b ffa8 	bl	800cff4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 80010a4:	480f      	ldr	r0, [pc, #60]	@ (80010e4 <main+0x64>)
 80010a6:	f00c f8f7 	bl	800d298 <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1); //timer
 80010aa:	480f      	ldr	r0, [pc, #60]	@ (80010e8 <main+0x68>)
 80010ac:	f007 ffac 	bl	8009008 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010b6:	480d      	ldr	r0, [pc, #52]	@ (80010ec <main+0x6c>)
 80010b8:	f003 fedc 	bl	8004e74 <HAL_GPIO_WritePin>

	//Display
	ssd1306_Init();
 80010bc:	f000 fd06 	bl	8001acc <ssd1306_Init>

	//Inicializacion de protocolo
	initComm(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 80010c0:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <main+0x70>)
 80010c2:	4a0c      	ldr	r2, [pc, #48]	@ (80010f4 <main+0x74>)
 80010c4:	490c      	ldr	r1, [pc, #48]	@ (80010f8 <main+0x78>)
 80010c6:	480d      	ldr	r0, [pc, #52]	@ (80010fc <main+0x7c>)
 80010c8:	f000 fc90 	bl	80019ec <initComm>

	//Variables
	ALLFLAGS = RESET;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <main+0x80>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	do10ms();
 80010d2:	f7ff ff85 	bl	8000fe0 <do10ms>
		USBTask();
 80010d6:	f7ff feeb 	bl	8000eb0 <USBTask>
		ssd1306_TestAll();
 80010da:	f001 ffcf 	bl	800307c <ssd1306_TestAll>
	  	do10ms();
 80010de:	bf00      	nop
 80010e0:	e7f7      	b.n	80010d2 <main+0x52>
 80010e2:	bf00      	nop
 80010e4:	08000e55 	.word	0x08000e55
 80010e8:	20000358 	.word	0x20000358
 80010ec:	40020800 	.word	0x40020800
 80010f0:	200003dc 	.word	0x200003dc
 80010f4:	200004dc 	.word	0x200004dc
 80010f8:	200003c4 	.word	0x200003c4
 80010fc:	200003d0 	.word	0x200003d0
 8001100:	200005dc 	.word	0x200005dc

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b094      	sub	sp, #80	@ 0x50
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 0320 	add.w	r3, r7, #32
 800110e:	2230      	movs	r2, #48	@ 0x30
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f00c fd3a 	bl	800db8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	4b27      	ldr	r3, [pc, #156]	@ (80011cc <SystemClock_Config+0xc8>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	4a26      	ldr	r2, [pc, #152]	@ (80011cc <SystemClock_Config+0xc8>)
 8001132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001136:	6413      	str	r3, [r2, #64]	@ 0x40
 8001138:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <SystemClock_Config+0xc8>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	4b21      	ldr	r3, [pc, #132]	@ (80011d0 <SystemClock_Config+0xcc>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a20      	ldr	r2, [pc, #128]	@ (80011d0 <SystemClock_Config+0xcc>)
 800114e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b1e      	ldr	r3, [pc, #120]	@ (80011d0 <SystemClock_Config+0xcc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001160:	2301      	movs	r3, #1
 8001162:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001164:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116a:	2302      	movs	r3, #2
 800116c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800116e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001172:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001174:	2319      	movs	r3, #25
 8001176:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001178:	23c0      	movs	r3, #192	@ 0xc0
 800117a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800117c:	2302      	movs	r3, #2
 800117e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001180:	2304      	movs	r3, #4
 8001182:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001184:	f107 0320 	add.w	r3, r7, #32
 8001188:	4618      	mov	r0, r3
 800118a:	f007 faa9 	bl	80086e0 <HAL_RCC_OscConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001194:	f000 fa04 	bl	80015a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001198:	230f      	movs	r3, #15
 800119a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119c:	2302      	movs	r3, #2
 800119e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	2103      	movs	r1, #3
 80011b4:	4618      	mov	r0, r3
 80011b6:	f007 fd0b 	bl	8008bd0 <HAL_RCC_ClockConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80011c0:	f000 f9ee 	bl	80015a0 <Error_Handler>
  }
}
 80011c4:	bf00      	nop
 80011c6:	3750      	adds	r7, #80	@ 0x50
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40007000 	.word	0x40007000

080011d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011da:	463b      	mov	r3, r7
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011e6:	4b52      	ldr	r3, [pc, #328]	@ (8001330 <MX_ADC1_Init+0x15c>)
 80011e8:	4a52      	ldr	r2, [pc, #328]	@ (8001334 <MX_ADC1_Init+0x160>)
 80011ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011ec:	4b50      	ldr	r3, [pc, #320]	@ (8001330 <MX_ADC1_Init+0x15c>)
 80011ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001330 <MX_ADC1_Init+0x15c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80011fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001330 <MX_ADC1_Init+0x15c>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001200:	4b4b      	ldr	r3, [pc, #300]	@ (8001330 <MX_ADC1_Init+0x15c>)
 8001202:	2200      	movs	r2, #0
 8001204:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001206:	4b4a      	ldr	r3, [pc, #296]	@ (8001330 <MX_ADC1_Init+0x15c>)
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800120e:	4b48      	ldr	r3, [pc, #288]	@ (8001330 <MX_ADC1_Init+0x15c>)
 8001210:	2200      	movs	r2, #0
 8001212:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001214:	4b46      	ldr	r3, [pc, #280]	@ (8001330 <MX_ADC1_Init+0x15c>)
 8001216:	4a48      	ldr	r2, [pc, #288]	@ (8001338 <MX_ADC1_Init+0x164>)
 8001218:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800121a:	4b45      	ldr	r3, [pc, #276]	@ (8001330 <MX_ADC1_Init+0x15c>)
 800121c:	2200      	movs	r2, #0
 800121e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001220:	4b43      	ldr	r3, [pc, #268]	@ (8001330 <MX_ADC1_Init+0x15c>)
 8001222:	2208      	movs	r2, #8
 8001224:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001226:	4b42      	ldr	r3, [pc, #264]	@ (8001330 <MX_ADC1_Init+0x15c>)
 8001228:	2201      	movs	r2, #1
 800122a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800122e:	4b40      	ldr	r3, [pc, #256]	@ (8001330 <MX_ADC1_Init+0x15c>)
 8001230:	2201      	movs	r2, #1
 8001232:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001234:	483e      	ldr	r0, [pc, #248]	@ (8001330 <MX_ADC1_Init+0x15c>)
 8001236:	f002 fac7 	bl	80037c8 <HAL_ADC_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001240:	f000 f9ae 	bl	80015a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001244:	2300      	movs	r3, #0
 8001246:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001248:	2301      	movs	r3, #1
 800124a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	4619      	mov	r1, r3
 8001254:	4836      	ldr	r0, [pc, #216]	@ (8001330 <MX_ADC1_Init+0x15c>)
 8001256:	f002 fd1d 	bl	8003c94 <HAL_ADC_ConfigChannel>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001260:	f000 f99e 	bl	80015a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001264:	2301      	movs	r3, #1
 8001266:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001268:	2302      	movs	r3, #2
 800126a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800126c:	463b      	mov	r3, r7
 800126e:	4619      	mov	r1, r3
 8001270:	482f      	ldr	r0, [pc, #188]	@ (8001330 <MX_ADC1_Init+0x15c>)
 8001272:	f002 fd0f 	bl	8003c94 <HAL_ADC_ConfigChannel>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800127c:	f000 f990 	bl	80015a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001280:	2302      	movs	r3, #2
 8001282:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001284:	2303      	movs	r3, #3
 8001286:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4828      	ldr	r0, [pc, #160]	@ (8001330 <MX_ADC1_Init+0x15c>)
 800128e:	f002 fd01 	bl	8003c94 <HAL_ADC_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001298:	f000 f982 	bl	80015a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800129c:	2303      	movs	r3, #3
 800129e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80012a0:	2304      	movs	r3, #4
 80012a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	4821      	ldr	r0, [pc, #132]	@ (8001330 <MX_ADC1_Init+0x15c>)
 80012aa:	f002 fcf3 	bl	8003c94 <HAL_ADC_ConfigChannel>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80012b4:	f000 f974 	bl	80015a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012b8:	2304      	movs	r3, #4
 80012ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80012bc:	2305      	movs	r3, #5
 80012be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012c0:	463b      	mov	r3, r7
 80012c2:	4619      	mov	r1, r3
 80012c4:	481a      	ldr	r0, [pc, #104]	@ (8001330 <MX_ADC1_Init+0x15c>)
 80012c6:	f002 fce5 	bl	8003c94 <HAL_ADC_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80012d0:	f000 f966 	bl	80015a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012d4:	2305      	movs	r3, #5
 80012d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80012d8:	2306      	movs	r3, #6
 80012da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	4619      	mov	r1, r3
 80012e0:	4813      	ldr	r0, [pc, #76]	@ (8001330 <MX_ADC1_Init+0x15c>)
 80012e2:	f002 fcd7 	bl	8003c94 <HAL_ADC_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80012ec:	f000 f958 	bl	80015a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012f0:	2306      	movs	r3, #6
 80012f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80012f4:	2307      	movs	r3, #7
 80012f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f8:	463b      	mov	r3, r7
 80012fa:	4619      	mov	r1, r3
 80012fc:	480c      	ldr	r0, [pc, #48]	@ (8001330 <MX_ADC1_Init+0x15c>)
 80012fe:	f002 fcc9 	bl	8003c94 <HAL_ADC_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001308:	f000 f94a 	bl	80015a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800130c:	2307      	movs	r3, #7
 800130e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001310:	2308      	movs	r3, #8
 8001312:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001314:	463b      	mov	r3, r7
 8001316:	4619      	mov	r1, r3
 8001318:	4805      	ldr	r0, [pc, #20]	@ (8001330 <MX_ADC1_Init+0x15c>)
 800131a:	f002 fcbb 	bl	8003c94 <HAL_ADC_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001324:	f000 f93c 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2000019c 	.word	0x2000019c
 8001334:	40012000 	.word	0x40012000
 8001338:	0f000001 	.word	0x0f000001

0800133c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001340:	4b12      	ldr	r3, [pc, #72]	@ (800138c <MX_I2C1_Init+0x50>)
 8001342:	4a13      	ldr	r2, [pc, #76]	@ (8001390 <MX_I2C1_Init+0x54>)
 8001344:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001346:	4b11      	ldr	r3, [pc, #68]	@ (800138c <MX_I2C1_Init+0x50>)
 8001348:	4a12      	ldr	r2, [pc, #72]	@ (8001394 <MX_I2C1_Init+0x58>)
 800134a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800134c:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <MX_I2C1_Init+0x50>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <MX_I2C1_Init+0x50>)
 8001354:	2200      	movs	r2, #0
 8001356:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001358:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <MX_I2C1_Init+0x50>)
 800135a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800135e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001360:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <MX_I2C1_Init+0x50>)
 8001362:	2200      	movs	r2, #0
 8001364:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <MX_I2C1_Init+0x50>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800136c:	4b07      	ldr	r3, [pc, #28]	@ (800138c <MX_I2C1_Init+0x50>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001372:	4b06      	ldr	r3, [pc, #24]	@ (800138c <MX_I2C1_Init+0x50>)
 8001374:	2200      	movs	r2, #0
 8001376:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001378:	4804      	ldr	r0, [pc, #16]	@ (800138c <MX_I2C1_Init+0x50>)
 800137a:	f003 fdaf 	bl	8004edc <HAL_I2C_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001384:	f000 f90c 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000244 	.word	0x20000244
 8001390:	40005400 	.word	0x40005400
 8001394:	00061a80 	.word	0x00061a80

08001398 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08c      	sub	sp, #48	@ 0x30
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800139e:	f107 0320 	add.w	r3, r7, #32
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013c4:	4b25      	ldr	r3, [pc, #148]	@ (800145c <MX_TIM1_Init+0xc4>)
 80013c6:	4a26      	ldr	r2, [pc, #152]	@ (8001460 <MX_TIM1_Init+0xc8>)
 80013c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 80013ca:	4b24      	ldr	r3, [pc, #144]	@ (800145c <MX_TIM1_Init+0xc4>)
 80013cc:	225f      	movs	r2, #95	@ 0x5f
 80013ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d0:	4b22      	ldr	r3, [pc, #136]	@ (800145c <MX_TIM1_Init+0xc4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 80013d6:	4b21      	ldr	r3, [pc, #132]	@ (800145c <MX_TIM1_Init+0xc4>)
 80013d8:	22f9      	movs	r2, #249	@ 0xf9
 80013da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013dc:	4b1f      	ldr	r3, [pc, #124]	@ (800145c <MX_TIM1_Init+0xc4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013e2:	4b1e      	ldr	r3, [pc, #120]	@ (800145c <MX_TIM1_Init+0xc4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	@ (800145c <MX_TIM1_Init+0xc4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013ee:	481b      	ldr	r0, [pc, #108]	@ (800145c <MX_TIM1_Init+0xc4>)
 80013f0:	f007 fdba 	bl	8008f68 <HAL_TIM_Base_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80013fa:	f000 f8d1 	bl	80015a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001402:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001404:	f107 0320 	add.w	r3, r7, #32
 8001408:	4619      	mov	r1, r3
 800140a:	4814      	ldr	r0, [pc, #80]	@ (800145c <MX_TIM1_Init+0xc4>)
 800140c:	f007 ff4e 	bl	80092ac <HAL_TIM_ConfigClockSource>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001416:	f000 f8c3 	bl	80015a0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	4619      	mov	r1, r3
 8001428:	480c      	ldr	r0, [pc, #48]	@ (800145c <MX_TIM1_Init+0xc4>)
 800142a:	f008 f806 	bl	800943a <HAL_TIM_SlaveConfigSynchro>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8001434:	f000 f8b4 	bl	80015a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	@ (800145c <MX_TIM1_Init+0xc4>)
 8001446:	f008 fa15 	bl	8009874 <HAL_TIMEx_MasterConfigSynchronization>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001450:	f000 f8a6 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	3730      	adds	r7, #48	@ 0x30
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20000358 	.word	0x20000358
 8001460:	40010000 	.word	0x40010000

08001464 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <MX_DMA_Init+0x78>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a1a      	ldr	r2, [pc, #104]	@ (80014dc <MX_DMA_Init+0x78>)
 8001474:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <MX_DMA_Init+0x78>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
 800148a:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <MX_DMA_Init+0x78>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	4a13      	ldr	r2, [pc, #76]	@ (80014dc <MX_DMA_Init+0x78>)
 8001490:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001494:	6313      	str	r3, [r2, #48]	@ 0x30
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <MX_DMA_Init+0x78>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2100      	movs	r1, #0
 80014a6:	200b      	movs	r0, #11
 80014a8:	f002 ff89 	bl	80043be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80014ac:	200b      	movs	r0, #11
 80014ae:	f002 ffa2 	bl	80043f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	200c      	movs	r0, #12
 80014b8:	f002 ff81 	bl	80043be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80014bc:	200c      	movs	r0, #12
 80014be:	f002 ff9a 	bl	80043f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	2038      	movs	r0, #56	@ 0x38
 80014c8:	f002 ff79 	bl	80043be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014cc:	2038      	movs	r0, #56	@ 0x38
 80014ce:	f002 ff92 	bl	80043f6 <HAL_NVIC_EnableIRQ>

}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800

080014e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	@ 0x28
 80014e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <MX_GPIO_Init+0xb8>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	4a26      	ldr	r2, [pc, #152]	@ (8001598 <MX_GPIO_Init+0xb8>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6313      	str	r3, [r2, #48]	@ 0x30
 8001506:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <MX_GPIO_Init+0xb8>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <MX_GPIO_Init+0xb8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	4a1f      	ldr	r2, [pc, #124]	@ (8001598 <MX_GPIO_Init+0xb8>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001520:	6313      	str	r3, [r2, #48]	@ 0x30
 8001522:	4b1d      	ldr	r3, [pc, #116]	@ (8001598 <MX_GPIO_Init+0xb8>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b19      	ldr	r3, [pc, #100]	@ (8001598 <MX_GPIO_Init+0xb8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	4a18      	ldr	r2, [pc, #96]	@ (8001598 <MX_GPIO_Init+0xb8>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	@ 0x30
 800153e:	4b16      	ldr	r3, [pc, #88]	@ (8001598 <MX_GPIO_Init+0xb8>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <MX_GPIO_Init+0xb8>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a11      	ldr	r2, [pc, #68]	@ (8001598 <MX_GPIO_Init+0xb8>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <MX_GPIO_Init+0xb8>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800156c:	480b      	ldr	r0, [pc, #44]	@ (800159c <MX_GPIO_Init+0xbc>)
 800156e:	f003 fc81 	bl	8004e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001572:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4804      	ldr	r0, [pc, #16]	@ (800159c <MX_GPIO_Init+0xbc>)
 800158c:	f003 faee 	bl	8004b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001590:	bf00      	nop
 8001592:	3728      	adds	r7, #40	@ 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40023800 	.word	0x40023800
 800159c:	40020800 	.word	0x40020800

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a8:	bf00      	nop
 80015aa:	e7fd      	b.n	80015a8 <Error_Handler+0x8>

080015ac <putHeaderOnTx>:


//Function definitions

uint8_t putHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	70fb      	strb	r3, [r7, #3]
 80015b8:	4613      	mov	r3, r2
 80015ba:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 80015bc:	78bb      	ldrb	r3, [r7, #2]
 80015be:	3301      	adds	r3, #1
 80015c0:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	795a      	ldrb	r2, [r3, #5]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	795b      	ldrb	r3, [r3, #5]
 80015d8:	1c59      	adds	r1, r3, #1
 80015da:	b2c8      	uxtb	r0, r1
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	7148      	strb	r0, [r1, #5]
 80015e0:	4413      	add	r3, r2
 80015e2:	2255      	movs	r2, #85	@ 0x55
 80015e4:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	795a      	ldrb	r2, [r3, #5]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	799b      	ldrb	r3, [r3, #6]
 80015ee:	4013      	ands	r3, r2
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	795b      	ldrb	r3, [r3, #5]
 80015fe:	1c59      	adds	r1, r3, #1
 8001600:	b2c8      	uxtb	r0, r1
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	7148      	strb	r0, [r1, #5]
 8001606:	4413      	add	r3, r2
 8001608:	224e      	movs	r2, #78	@ 0x4e
 800160a:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	795a      	ldrb	r2, [r3, #5]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	799b      	ldrb	r3, [r3, #6]
 8001614:	4013      	ands	r3, r2
 8001616:	b2da      	uxtb	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	795b      	ldrb	r3, [r3, #5]
 8001624:	1c59      	adds	r1, r3, #1
 8001626:	b2c8      	uxtb	r0, r1
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	7148      	strb	r0, [r1, #5]
 800162c:	4413      	add	r3, r2
 800162e:	2245      	movs	r2, #69	@ 0x45
 8001630:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	795a      	ldrb	r2, [r3, #5]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	799b      	ldrb	r3, [r3, #6]
 800163a:	4013      	ands	r3, r2
 800163c:	b2da      	uxtb	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	795b      	ldrb	r3, [r3, #5]
 800164a:	1c59      	adds	r1, r3, #1
 800164c:	b2c8      	uxtb	r0, r1
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	7148      	strb	r0, [r1, #5]
 8001652:	4413      	add	r3, r2
 8001654:	2252      	movs	r2, #82	@ 0x52
 8001656:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	795a      	ldrb	r2, [r3, #5]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	799b      	ldrb	r3, [r3, #6]
 8001660:	4013      	ands	r3, r2
 8001662:	b2da      	uxtb	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	795b      	ldrb	r3, [r3, #5]
 8001670:	1c59      	adds	r1, r3, #1
 8001672:	b2c8      	uxtb	r0, r1
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	7148      	strb	r0, [r1, #5]
 8001678:	4413      	add	r3, r2
 800167a:	78ba      	ldrb	r2, [r7, #2]
 800167c:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	795a      	ldrb	r2, [r3, #5]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	799b      	ldrb	r3, [r3, #6]
 8001686:	4013      	ands	r3, r2
 8001688:	b2da      	uxtb	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	795b      	ldrb	r3, [r3, #5]
 8001696:	1c59      	adds	r1, r3, #1
 8001698:	b2c8      	uxtb	r0, r1
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	7148      	strb	r0, [r1, #5]
 800169e:	4413      	add	r3, r2
 80016a0:	223a      	movs	r2, #58	@ 0x3a
 80016a2:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	795a      	ldrb	r2, [r3, #5]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	799b      	ldrb	r3, [r3, #6]
 80016ac:	4013      	ands	r3, r2
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	795b      	ldrb	r3, [r3, #5]
 80016bc:	1c59      	adds	r1, r3, #1
 80016be:	b2c8      	uxtb	r0, r1
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	7148      	strb	r0, [r1, #5]
 80016c4:	4413      	add	r3, r2
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	795a      	ldrb	r2, [r3, #5]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	799b      	ldrb	r3, [r3, #6]
 80016d2:	4013      	ands	r3, r2
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2207      	movs	r2, #7
 80016de:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7a5a      	ldrb	r2, [r3, #9]
 80016e4:	78b9      	ldrb	r1, [r7, #2]
 80016e6:	78fb      	ldrb	r3, [r7, #3]
 80016e8:	404b      	eors	r3, r1
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	4053      	eors	r3, r2
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7a5b      	ldrb	r3, [r3, #9]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <putByteOnTx>:

uint8_t putByteOnTx(_sTx *dataTx, uint8_t byte)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	460b      	mov	r3, r1
 8001714:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	79db      	ldrb	r3, [r3, #7]
 800171a:	3301      	adds	r3, #1
 800171c:	b2da      	uxtb	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	795b      	ldrb	r3, [r3, #5]
 800172a:	1c59      	adds	r1, r3, #1
 800172c:	b2c8      	uxtb	r0, r1
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	7148      	strb	r0, [r1, #5]
 8001732:	4413      	add	r3, r2
 8001734:	78fa      	ldrb	r2, [r7, #3]
 8001736:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	795a      	ldrb	r2, [r3, #5]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	799b      	ldrb	r3, [r3, #6]
 8001740:	4013      	ands	r3, r2
 8001742:	b2da      	uxtb	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	7a5a      	ldrb	r2, [r3, #9]
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	4053      	eors	r3, r2
 8001750:	b2da      	uxtb	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7a5b      	ldrb	r3, [r3, #9]
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <putStrOntx>:

uint8_t putStrOntx(_sTx *dataTx, const char *str)
{
 8001766:	b490      	push	{r4, r7}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 8001770:	2300      	movs	r3, #0
 8001772:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 8001774:	e02c      	b.n	80017d0 <putStrOntx+0x6a>
    	dataTx->bytes++;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	79db      	ldrb	r3, [r3, #7]
 800177a:	3301      	adds	r3, #1
 800177c:	b2da      	uxtb	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	461a      	mov	r2, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	441a      	add	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6819      	ldr	r1, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	795b      	ldrb	r3, [r3, #5]
 8001794:	1c58      	adds	r0, r3, #1
 8001796:	b2c4      	uxtb	r4, r0
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	7144      	strb	r4, [r0, #5]
 800179c:	440b      	add	r3, r1
 800179e:	7812      	ldrb	r2, [r2, #0]
 80017a0:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	795a      	ldrb	r2, [r3, #5]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	799b      	ldrb	r3, [r3, #6]
 80017aa:	4013      	ands	r3, r2
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	b2d2      	uxtb	r2, r2
 80017ba:	73fa      	strb	r2, [r7, #15]
 80017bc:	461a      	mov	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	4413      	add	r3, r2
 80017c2:	781a      	ldrb	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	7a5b      	ldrb	r3, [r3, #9]
 80017c8:	4053      	eors	r3, r2
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	4413      	add	r3, r2
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1ca      	bne.n	8001776 <putStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7a5b      	ldrb	r3, [r3, #9]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc90      	pop	{r4, r7}
 80017ec:	4770      	bx	lr
	...

080017f0 <decodeHeader>:
	return getByte;
}


uint8_t decodeHeader(_sTx *dataRx)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	795b      	ldrb	r3, [r3, #5]
 8001800:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 8001802:	e0e4      	b.n	80019ce <decodeHeader+0x1de>
        switch(header)
 8001804:	4b78      	ldr	r3, [pc, #480]	@ (80019e8 <decodeHeader+0x1f8>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b07      	cmp	r3, #7
 800180a:	f200 80c9 	bhi.w	80019a0 <decodeHeader+0x1b0>
 800180e:	a201      	add	r2, pc, #4	@ (adr r2, 8001814 <decodeHeader+0x24>)
 8001810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001814:	08001835 	.word	0x08001835
 8001818:	0800184f 	.word	0x0800184f
 800181c:	0800188d 	.word	0x0800188d
 8001820:	080018b9 	.word	0x080018b9
 8001824:	080018e5 	.word	0x080018e5
 8001828:	080018fb 	.word	0x080018fb
 800182c:	080019a1 	.word	0x080019a1
 8001830:	0800195d 	.word	0x0800195d
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	7912      	ldrb	r2, [r2, #4]
 800183c:	4413      	add	r3, r2
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b55      	cmp	r3, #85	@ 0x55
 8001842:	f040 80b1 	bne.w	80019a8 <decodeHeader+0x1b8>
                   header = HEADER_N;
 8001846:	4b68      	ldr	r3, [pc, #416]	@ (80019e8 <decodeHeader+0x1f8>)
 8001848:	2201      	movs	r2, #1
 800184a:	701a      	strb	r2, [r3, #0]
                }
            break;
 800184c:	e0ac      	b.n	80019a8 <decodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	7912      	ldrb	r2, [r2, #4]
 8001856:	4413      	add	r3, r2
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b4e      	cmp	r3, #78	@ 0x4e
 800185c:	d103      	bne.n	8001866 <decodeHeader+0x76>
                    header = HEADER_E;
 800185e:	4b62      	ldr	r3, [pc, #392]	@ (80019e8 <decodeHeader+0x1f8>)
 8001860:	2202      	movs	r2, #2
 8001862:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 8001864:	e0a2      	b.n	80019ac <decodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	7912      	ldrb	r2, [r2, #4]
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b55      	cmp	r3, #85	@ 0x55
 8001874:	f000 809a 	beq.w	80019ac <decodeHeader+0x1bc>
                    	header = HEADER_U;
 8001878:	4b5b      	ldr	r3, [pc, #364]	@ (80019e8 <decodeHeader+0x1f8>)
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	791b      	ldrb	r3, [r3, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	b2da      	uxtb	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	711a      	strb	r2, [r3, #4]
            break;
 800188a:	e08f      	b.n	80019ac <decodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	7912      	ldrb	r2, [r2, #4]
 8001894:	4413      	add	r3, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b45      	cmp	r3, #69	@ 0x45
 800189a:	d103      	bne.n	80018a4 <decodeHeader+0xb4>
                    header = HEADER_R;
 800189c:	4b52      	ldr	r3, [pc, #328]	@ (80019e8 <decodeHeader+0x1f8>)
 800189e:	2203      	movs	r2, #3
 80018a0:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 80018a2:	e086      	b.n	80019b2 <decodeHeader+0x1c2>
                    header = HEADER_U;
 80018a4:	4b50      	ldr	r3, [pc, #320]	@ (80019e8 <decodeHeader+0x1f8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	791b      	ldrb	r3, [r3, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	711a      	strb	r2, [r3, #4]
            break;
 80018b6:	e07c      	b.n	80019b2 <decodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	7912      	ldrb	r2, [r2, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b52      	cmp	r3, #82	@ 0x52
 80018c6:	d103      	bne.n	80018d0 <decodeHeader+0xe0>
                    header = NBYTES;
 80018c8:	4b47      	ldr	r3, [pc, #284]	@ (80019e8 <decodeHeader+0x1f8>)
 80018ca:	2204      	movs	r2, #4
 80018cc:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 80018ce:	e070      	b.n	80019b2 <decodeHeader+0x1c2>
                    header = HEADER_U;
 80018d0:	4b45      	ldr	r3, [pc, #276]	@ (80019e8 <decodeHeader+0x1f8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	791b      	ldrb	r3, [r3, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	711a      	strb	r2, [r3, #4]
            break;
 80018e2:	e066      	b.n	80019b2 <decodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	7912      	ldrb	r2, [r2, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 80018f2:	4b3d      	ldr	r3, [pc, #244]	@ (80019e8 <decodeHeader+0x1f8>)
 80018f4:	2205      	movs	r2, #5
 80018f6:	701a      	strb	r2, [r3, #0]
            break;
 80018f8:	e05b      	b.n	80019b2 <decodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	7912      	ldrb	r2, [r2, #4]
 8001902:	4413      	add	r3, r2
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b3a      	cmp	r3, #58	@ 0x3a
 8001908:	d11e      	bne.n	8001948 <decodeHeader+0x158>
                    header = PAYLOAD;
 800190a:	4b37      	ldr	r3, [pc, #220]	@ (80019e8 <decodeHeader+0x1f8>)
 800190c:	2207      	movs	r2, #7
 800190e:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	791b      	ldrb	r3, [r3, #4]
 8001914:	3301      	adds	r3, #1
 8001916:	b2da      	uxtb	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7a1a      	ldrb	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	799b      	ldrb	r3, [r3, #6]
 8001924:	4013      	ands	r3, r2
 8001926:	b2da      	uxtb	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	7a5a      	ldrb	r2, [r3, #9]
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	4053      	eors	r3, r2
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8001940:	b2da      	uxtb	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8001946:	e034      	b.n	80019b2 <decodeHeader+0x1c2>
                    header = HEADER_U;
 8001948:	4b27      	ldr	r3, [pc, #156]	@ (80019e8 <decodeHeader+0x1f8>)
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	791b      	ldrb	r3, [r3, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	b2da      	uxtb	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	711a      	strb	r2, [r3, #4]
            break;
 800195a:	e02a      	b.n	80019b2 <decodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	3b01      	subs	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00c      	beq.n	8001982 <decodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	7a5a      	ldrb	r2, [r3, #9]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	7909      	ldrb	r1, [r1, #4]
 8001974:	440b      	add	r3, r1
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4053      	eors	r3, r2
 800197a:	b2da      	uxtb	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 8001980:	e016      	b.n	80019b0 <decodeHeader+0x1c0>
                    header = HEADER_U;
 8001982:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <decodeHeader+0x1f8>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	7912      	ldrb	r2, [r2, #4]
 8001990:	4413      	add	r3, r2
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	7a5b      	ldrb	r3, [r3, #9]
 8001998:	429a      	cmp	r2, r3
 800199a:	d109      	bne.n	80019b0 <decodeHeader+0x1c0>
                        return TRUE;
 800199c:	2301      	movs	r3, #1
 800199e:	e01d      	b.n	80019dc <decodeHeader+0x1ec>
            default:
                header = HEADER_U;
 80019a0:	4b11      	ldr	r3, [pc, #68]	@ (80019e8 <decodeHeader+0x1f8>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
            break;
 80019a6:	e004      	b.n	80019b2 <decodeHeader+0x1c2>
            break;
 80019a8:	bf00      	nop
 80019aa:	e002      	b.n	80019b2 <decodeHeader+0x1c2>
            break;
 80019ac:	bf00      	nop
 80019ae:	e000      	b.n	80019b2 <decodeHeader+0x1c2>
            break;
 80019b0:	bf00      	nop
        }
        dataRx->indexR++;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	791b      	ldrb	r3, [r3, #4]
 80019b6:	3301      	adds	r3, #1
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	791a      	ldrb	r2, [r3, #4]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	799b      	ldrb	r3, [r3, #6]
 80019c6:	4013      	ands	r3, r2
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	791b      	ldrb	r3, [r3, #4]
 80019d2:	7bba      	ldrb	r2, [r7, #14]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	f47f af15 	bne.w	8001804 <decodeHeader+0x14>
    }
    return FALSE;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	200005df 	.word	0x200005df

080019ec <initComm>:

void initComm(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	603b      	str	r3, [r7, #0]
    //INICIALIZAMOS VARIABLES
	Rx->buff = (uint8_t *)buffRx;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2200      	movs	r2, #0
 8001a16:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	22ff      	movs	r2, #255	@ 0xff
 8001a1c:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2200      	movs	r2, #0
 8001a34:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	22ff      	movs	r2, #255	@ 0xff
 8001a46:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	725a      	strb	r2, [r3, #9]

}
 8001a4e:	bf00      	nop
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af04      	add	r7, sp, #16
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
 8001a76:	9302      	str	r3, [sp, #8]
 8001a78:	2301      	movs	r3, #1
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	1dfb      	adds	r3, r7, #7
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	2301      	movs	r3, #1
 8001a82:	2200      	movs	r2, #0
 8001a84:	2178      	movs	r1, #120	@ 0x78
 8001a86:	4803      	ldr	r0, [pc, #12]	@ (8001a94 <ssd1306_WriteCommand+0x2c>)
 8001a88:	f003 fb82 	bl	8005190 <HAL_I2C_Mem_Write>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000244 	.word	0x20000244

08001a98 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af04      	add	r7, sp, #16
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aaa:	9202      	str	r2, [sp, #8]
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	2240      	movs	r2, #64	@ 0x40
 8001ab6:	2178      	movs	r1, #120	@ 0x78
 8001ab8:	4803      	ldr	r0, [pc, #12]	@ (8001ac8 <ssd1306_WriteData+0x30>)
 8001aba:	f003 fb69 	bl	8005190 <HAL_I2C_Mem_Write>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000244 	.word	0x20000244

08001acc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001ad0:	f7ff ffc3 	bl	8001a5a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001ad4:	2064      	movs	r0, #100	@ 0x64
 8001ad6:	f001 fe53 	bl	8003780 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001ada:	2000      	movs	r0, #0
 8001adc:	f000 ff7a 	bl	80029d4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001ae0:	2020      	movs	r0, #32
 8001ae2:	f7ff ffc1 	bl	8001a68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f7ff ffbe 	bl	8001a68 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001aec:	20b0      	movs	r0, #176	@ 0xb0
 8001aee:	f7ff ffbb 	bl	8001a68 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001af2:	20c8      	movs	r0, #200	@ 0xc8
 8001af4:	f7ff ffb8 	bl	8001a68 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7ff ffb5 	bl	8001a68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001afe:	2010      	movs	r0, #16
 8001b00:	f7ff ffb2 	bl	8001a68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001b04:	2040      	movs	r0, #64	@ 0x40
 8001b06:	f7ff ffaf 	bl	8001a68 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001b0a:	20ff      	movs	r0, #255	@ 0xff
 8001b0c:	f000 ff4f 	bl	80029ae <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001b10:	20a1      	movs	r0, #161	@ 0xa1
 8001b12:	f7ff ffa9 	bl	8001a68 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001b16:	20a6      	movs	r0, #166	@ 0xa6
 8001b18:	f7ff ffa6 	bl	8001a68 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001b1c:	20a8      	movs	r0, #168	@ 0xa8
 8001b1e:	f7ff ffa3 	bl	8001a68 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001b22:	203f      	movs	r0, #63	@ 0x3f
 8001b24:	f7ff ffa0 	bl	8001a68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b28:	20a4      	movs	r0, #164	@ 0xa4
 8001b2a:	f7ff ff9d 	bl	8001a68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001b2e:	20d3      	movs	r0, #211	@ 0xd3
 8001b30:	f7ff ff9a 	bl	8001a68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001b34:	2000      	movs	r0, #0
 8001b36:	f7ff ff97 	bl	8001a68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b3a:	20d5      	movs	r0, #213	@ 0xd5
 8001b3c:	f7ff ff94 	bl	8001a68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001b40:	20f0      	movs	r0, #240	@ 0xf0
 8001b42:	f7ff ff91 	bl	8001a68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001b46:	20d9      	movs	r0, #217	@ 0xd9
 8001b48:	f7ff ff8e 	bl	8001a68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001b4c:	2022      	movs	r0, #34	@ 0x22
 8001b4e:	f7ff ff8b 	bl	8001a68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001b52:	20da      	movs	r0, #218	@ 0xda
 8001b54:	f7ff ff88 	bl	8001a68 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001b58:	2012      	movs	r0, #18
 8001b5a:	f7ff ff85 	bl	8001a68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001b5e:	20db      	movs	r0, #219	@ 0xdb
 8001b60:	f7ff ff82 	bl	8001a68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001b64:	2020      	movs	r0, #32
 8001b66:	f7ff ff7f 	bl	8001a68 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001b6a:	208d      	movs	r0, #141	@ 0x8d
 8001b6c:	f7ff ff7c 	bl	8001a68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001b70:	2014      	movs	r0, #20
 8001b72:	f7ff ff79 	bl	8001a68 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001b76:	2001      	movs	r0, #1
 8001b78:	f000 ff2c 	bl	80029d4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f000 f80f 	bl	8001ba0 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001b82:	f000 f825 	bl	8001bd0 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001b86:	4b05      	ldr	r3, [pc, #20]	@ (8001b9c <ssd1306_Init+0xd0>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001b8c:	4b03      	ldr	r3, [pc, #12]	@ (8001b9c <ssd1306_Init+0xd0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001b92:	4b02      	ldr	r3, [pc, #8]	@ (8001b9c <ssd1306_Init+0xd0>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	711a      	strb	r2, [r3, #4]
}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	200009e0 	.word	0x200009e0

08001ba0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <ssd1306_Fill+0x14>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e000      	b.n	8001bb6 <ssd1306_Fill+0x16>
 8001bb4:	23ff      	movs	r3, #255	@ 0xff
 8001bb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4803      	ldr	r0, [pc, #12]	@ (8001bcc <ssd1306_Fill+0x2c>)
 8001bbe:	f00b ffe5 	bl	800db8c <memset>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	200005e0 	.word	0x200005e0

08001bd0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	71fb      	strb	r3, [r7, #7]
 8001bda:	e016      	b.n	8001c0a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	3b50      	subs	r3, #80	@ 0x50
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ff40 	bl	8001a68 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001be8:	2000      	movs	r0, #0
 8001bea:	f7ff ff3d 	bl	8001a68 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001bee:	2010      	movs	r0, #16
 8001bf0:	f7ff ff3a 	bl	8001a68 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	01db      	lsls	r3, r3, #7
 8001bf8:	4a08      	ldr	r2, [pc, #32]	@ (8001c1c <ssd1306_UpdateScreen+0x4c>)
 8001bfa:	4413      	add	r3, r2
 8001bfc:	2180      	movs	r1, #128	@ 0x80
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ff4a 	bl	8001a98 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	3301      	adds	r3, #1
 8001c08:	71fb      	strb	r3, [r7, #7]
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	2b07      	cmp	r3, #7
 8001c0e:	d9e5      	bls.n	8001bdc <ssd1306_UpdateScreen+0xc>
    }
}
 8001c10:	bf00      	nop
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200005e0 	.word	0x200005e0

08001c20 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	71bb      	strb	r3, [r7, #6]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	db3d      	blt.n	8001cb6 <ssd1306_DrawPixel+0x96>
 8001c3a:	79bb      	ldrb	r3, [r7, #6]
 8001c3c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c3e:	d83a      	bhi.n	8001cb6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8001c40:	797b      	ldrb	r3, [r7, #5]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d11a      	bne.n	8001c7c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c46:	79fa      	ldrb	r2, [r7, #7]
 8001c48:	79bb      	ldrb	r3, [r7, #6]
 8001c4a:	08db      	lsrs	r3, r3, #3
 8001c4c:	b2d8      	uxtb	r0, r3
 8001c4e:	4603      	mov	r3, r0
 8001c50:	01db      	lsls	r3, r3, #7
 8001c52:	4413      	add	r3, r2
 8001c54:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc4 <ssd1306_DrawPixel+0xa4>)
 8001c56:	5cd3      	ldrb	r3, [r2, r3]
 8001c58:	b25a      	sxtb	r2, r3
 8001c5a:	79bb      	ldrb	r3, [r7, #6]
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	2101      	movs	r1, #1
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	b25b      	sxtb	r3, r3
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	b259      	sxtb	r1, r3
 8001c6c:	79fa      	ldrb	r2, [r7, #7]
 8001c6e:	4603      	mov	r3, r0
 8001c70:	01db      	lsls	r3, r3, #7
 8001c72:	4413      	add	r3, r2
 8001c74:	b2c9      	uxtb	r1, r1
 8001c76:	4a13      	ldr	r2, [pc, #76]	@ (8001cc4 <ssd1306_DrawPixel+0xa4>)
 8001c78:	54d1      	strb	r1, [r2, r3]
 8001c7a:	e01d      	b.n	8001cb8 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c7c:	79fa      	ldrb	r2, [r7, #7]
 8001c7e:	79bb      	ldrb	r3, [r7, #6]
 8001c80:	08db      	lsrs	r3, r3, #3
 8001c82:	b2d8      	uxtb	r0, r3
 8001c84:	4603      	mov	r3, r0
 8001c86:	01db      	lsls	r3, r3, #7
 8001c88:	4413      	add	r3, r2
 8001c8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc4 <ssd1306_DrawPixel+0xa4>)
 8001c8c:	5cd3      	ldrb	r3, [r2, r3]
 8001c8e:	b25a      	sxtb	r2, r3
 8001c90:	79bb      	ldrb	r3, [r7, #6]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	2101      	movs	r1, #1
 8001c98:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	b25b      	sxtb	r3, r3
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	b259      	sxtb	r1, r3
 8001ca6:	79fa      	ldrb	r2, [r7, #7]
 8001ca8:	4603      	mov	r3, r0
 8001caa:	01db      	lsls	r3, r3, #7
 8001cac:	4413      	add	r3, r2
 8001cae:	b2c9      	uxtb	r1, r1
 8001cb0:	4a04      	ldr	r2, [pc, #16]	@ (8001cc4 <ssd1306_DrawPixel+0xa4>)
 8001cb2:	54d1      	strb	r1, [r2, r3]
 8001cb4:	e000      	b.n	8001cb8 <ssd1306_DrawPixel+0x98>
        return;
 8001cb6:	bf00      	nop
    }
}
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	200005e0 	.word	0x200005e0

08001cc8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b089      	sub	sp, #36	@ 0x24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4604      	mov	r4, r0
 8001cd0:	4638      	mov	r0, r7
 8001cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001cd6:	4623      	mov	r3, r4
 8001cd8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	2b1f      	cmp	r3, #31
 8001cde:	d902      	bls.n	8001ce6 <ssd1306_WriteChar+0x1e>
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	2b7e      	cmp	r3, #126	@ 0x7e
 8001ce4:	d901      	bls.n	8001cea <ssd1306_WriteChar+0x22>
        return 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e079      	b.n	8001dde <ssd1306_WriteChar+0x116>

    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <ssd1306_WriteChar+0x34>
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	3b20      	subs	r3, #32
 8001cf6:	4413      	add	r3, r2
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	e000      	b.n	8001cfe <ssd1306_WriteChar+0x36>
 8001cfc:	783b      	ldrb	r3, [r7, #0]
 8001cfe:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001d00:	4b39      	ldr	r3, [pc, #228]	@ (8001de8 <ssd1306_WriteChar+0x120>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	7dfb      	ldrb	r3, [r7, #23]
 8001d08:	4413      	add	r3, r2
 8001d0a:	2b80      	cmp	r3, #128	@ 0x80
 8001d0c:	dc06      	bgt.n	8001d1c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001d0e:	4b36      	ldr	r3, [pc, #216]	@ (8001de8 <ssd1306_WriteChar+0x120>)
 8001d10:	885b      	ldrh	r3, [r3, #2]
 8001d12:	461a      	mov	r2, r3
 8001d14:	787b      	ldrb	r3, [r7, #1]
 8001d16:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001d18:	2b40      	cmp	r3, #64	@ 0x40
 8001d1a:	dd01      	ble.n	8001d20 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e05e      	b.n	8001dde <ssd1306_WriteChar+0x116>
    }

    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001d20:	2300      	movs	r3, #0
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	e04d      	b.n	8001dc2 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	3b20      	subs	r3, #32
 8001d2c:	7879      	ldrb	r1, [r7, #1]
 8001d2e:	fb01 f303 	mul.w	r3, r1, r3
 8001d32:	4619      	mov	r1, r3
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	440b      	add	r3, r1
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	e036      	b.n	8001db4 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d013      	beq.n	8001d7e <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001d56:	4b24      	ldr	r3, [pc, #144]	@ (8001de8 <ssd1306_WriteChar+0x120>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	4413      	add	r3, r2
 8001d62:	b2d8      	uxtb	r0, r3
 8001d64:	4b20      	ldr	r3, [pc, #128]	@ (8001de8 <ssd1306_WriteChar+0x120>)
 8001d66:	885b      	ldrh	r3, [r3, #2]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001d76:	4619      	mov	r1, r3
 8001d78:	f7ff ff52 	bl	8001c20 <ssd1306_DrawPixel>
 8001d7c:	e017      	b.n	8001dae <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <ssd1306_WriteChar+0x120>)
 8001d80:	881b      	ldrh	r3, [r3, #0]
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	b2d8      	uxtb	r0, r3
 8001d8c:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <ssd1306_WriteChar+0x120>)
 8001d8e:	885b      	ldrh	r3, [r3, #2]
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	4413      	add	r3, r2
 8001d98:	b2d9      	uxtb	r1, r3
 8001d9a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	bf0c      	ite	eq
 8001da2:	2301      	moveq	r3, #1
 8001da4:	2300      	movne	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	f7ff ff39 	bl	8001c20 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	3301      	adds	r3, #1
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	7dfb      	ldrb	r3, [r7, #23]
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d3c4      	bcc.n	8001d46 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	61fb      	str	r3, [r7, #28]
 8001dc2:	787b      	ldrb	r3, [r7, #1]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d3ac      	bcc.n	8001d26 <ssd1306_WriteChar+0x5e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <ssd1306_WriteChar+0x120>)
 8001dce:	881a      	ldrh	r2, [r3, #0]
 8001dd0:	7dfb      	ldrb	r3, [r7, #23]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	4b03      	ldr	r3, [pc, #12]	@ (8001de8 <ssd1306_WriteChar+0x120>)
 8001dda:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3724      	adds	r7, #36	@ 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd90      	pop	{r4, r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200009e0 	.word	0x200009e0

08001dec <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	4638      	mov	r0, r7
 8001df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001dfa:	e013      	b.n	8001e24 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	7818      	ldrb	r0, [r3, #0]
 8001e00:	7e3b      	ldrb	r3, [r7, #24]
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	463b      	mov	r3, r7
 8001e06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e08:	f7ff ff5e 	bl	8001cc8 <ssd1306_WriteChar>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d002      	beq.n	8001e1e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	e008      	b.n	8001e30 <ssd1306_WriteString+0x44>
        }
        str++;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	3301      	adds	r3, #1
 8001e22:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1e7      	bne.n	8001dfc <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	460a      	mov	r2, r1
 8001e42:	71fb      	strb	r3, [r7, #7]
 8001e44:	4613      	mov	r3, r2
 8001e46:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <ssd1306_SetCursor+0x2c>)
 8001e4e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001e50:	79bb      	ldrb	r3, [r7, #6]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	4b03      	ldr	r3, [pc, #12]	@ (8001e64 <ssd1306_SetCursor+0x2c>)
 8001e56:	805a      	strh	r2, [r3, #2]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	200009e0 	.word	0x200009e0

08001e68 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b089      	sub	sp, #36	@ 0x24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4604      	mov	r4, r0
 8001e70:	4608      	mov	r0, r1
 8001e72:	4611      	mov	r1, r2
 8001e74:	461a      	mov	r2, r3
 8001e76:	4623      	mov	r3, r4
 8001e78:	71fb      	strb	r3, [r7, #7]
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71bb      	strb	r3, [r7, #6]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	717b      	strb	r3, [r7, #5]
 8001e82:	4613      	mov	r3, r2
 8001e84:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8001e86:	797a      	ldrb	r2, [r7, #5]
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	bfb8      	it	lt
 8001e90:	425b      	neglt	r3, r3
 8001e92:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001e94:	793a      	ldrb	r2, [r7, #4]
 8001e96:	79bb      	ldrb	r3, [r7, #6]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	bfb8      	it	lt
 8001e9e:	425b      	neglt	r3, r3
 8001ea0:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001ea2:	79fa      	ldrb	r2, [r7, #7]
 8001ea4:	797b      	ldrb	r3, [r7, #5]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d201      	bcs.n	8001eae <ssd1306_Line+0x46>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e001      	b.n	8001eb2 <ssd1306_Line+0x4a>
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb2:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001eb4:	79ba      	ldrb	r2, [r7, #6]
 8001eb6:	793b      	ldrb	r3, [r7, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d201      	bcs.n	8001ec0 <ssd1306_Line+0x58>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e001      	b.n	8001ec4 <ssd1306_Line+0x5c>
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec4:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	61fb      	str	r3, [r7, #28]
    int32_t error2;

    ssd1306_DrawPixel(x2, y2, color);
 8001ece:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001ed2:	7939      	ldrb	r1, [r7, #4]
 8001ed4:	797b      	ldrb	r3, [r7, #5]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fea2 	bl	8001c20 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001edc:	e024      	b.n	8001f28 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8001ede:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001ee2:	79b9      	ldrb	r1, [r7, #6]
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fe9a 	bl	8001c20 <ssd1306_DrawPixel>
        error2 = error * 2;
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	425b      	negs	r3, r3
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	dd08      	ble.n	8001f0e <ssd1306_Line+0xa6>
            error -= deltaY;
 8001efc:	69fa      	ldr	r2, [r7, #28]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	71fb      	strb	r3, [r7, #7]
        }

        if(error2 < deltaX) {
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	da08      	bge.n	8001f28 <ssd1306_Line+0xc0>
            error += deltaX;
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	79bb      	ldrb	r3, [r7, #6]
 8001f24:	4413      	add	r3, r2
 8001f26:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8001f28:	79fa      	ldrb	r2, [r7, #7]
 8001f2a:	797b      	ldrb	r3, [r7, #5]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d1d6      	bne.n	8001ede <ssd1306_Line+0x76>
 8001f30:	79ba      	ldrb	r2, [r7, #6]
 8001f32:	793b      	ldrb	r3, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d1d2      	bne.n	8001ede <ssd1306_Line+0x76>
        }
    }
    return;
 8001f38:	bf00      	nop
}
 8001f3a:	3724      	adds	r7, #36	@ 0x24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd90      	pop	{r4, r7, pc}

08001f40 <ssd1306_Polyline>:

/* Draw polyline */
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af02      	add	r7, sp, #8
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	807b      	strh	r3, [r7, #2]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	707b      	strb	r3, [r7, #1]
    uint16_t i;
    if(par_vertex == NULL) {
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d02a      	beq.n	8001fac <ssd1306_Polyline+0x6c>
        return;
    }

    for(i = 1; i < par_size; i++) {
 8001f56:	2301      	movs	r3, #1
 8001f58:	81fb      	strh	r3, [r7, #14]
 8001f5a:	e022      	b.n	8001fa2 <ssd1306_Polyline+0x62>
        ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 8001f5c:	89fb      	ldrh	r3, [r7, #14]
 8001f5e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001f62:	3b01      	subs	r3, #1
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	7818      	ldrb	r0, [r3, #0]
 8001f6c:	89fb      	ldrh	r3, [r7, #14]
 8001f6e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001f72:	3b01      	subs	r3, #1
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	4413      	add	r3, r2
 8001f7a:	7859      	ldrb	r1, [r3, #1]
 8001f7c:	89fb      	ldrh	r3, [r7, #14]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	4413      	add	r3, r2
 8001f84:	781c      	ldrb	r4, [r3, #0]
 8001f86:	89fb      	ldrh	r3, [r7, #14]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	785a      	ldrb	r2, [r3, #1]
 8001f90:	787b      	ldrb	r3, [r7, #1]
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	4613      	mov	r3, r2
 8001f96:	4622      	mov	r2, r4
 8001f98:	f7ff ff66 	bl	8001e68 <ssd1306_Line>
    for(i = 1; i < par_size; i++) {
 8001f9c:	89fb      	ldrh	r3, [r7, #14]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	81fb      	strh	r3, [r7, #14]
 8001fa2:	89fa      	ldrh	r2, [r7, #14]
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d3d8      	bcc.n	8001f5c <ssd1306_Polyline+0x1c>
    }

    return;
 8001faa:	e000      	b.n	8001fae <ssd1306_Polyline+0x6e>
        return;
 8001fac:	bf00      	nop
}
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd90      	pop	{r4, r7, pc}

08001fb4 <ssd1306_DegToRad>:

/* Convert Degrees to Radians */
static float ssd1306_DegToRad(float par_deg) {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * (3.14f / 180.0f);
 8001fbe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fc2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001fd8 <ssd1306_DegToRad+0x24>
 8001fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001fca:	eeb0 0a67 	vmov.f32	s0, s15
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	3c8ee7a7 	.word	0x3c8ee7a7

08001fdc <ssd1306_NormalizeTo0_360>:

/* Normalize degree to [0;360] */
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	80fb      	strh	r3, [r7, #6]
    uint16_t loc_angle;
    if(par_deg <= 360) {
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8001fec:	d802      	bhi.n	8001ff4 <ssd1306_NormalizeTo0_360+0x18>
        loc_angle = par_deg;
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	81fb      	strh	r3, [r7, #14]
 8001ff2:	e013      	b.n	800201c <ssd1306_NormalizeTo0_360+0x40>
    } else {
        loc_angle = par_deg % 360;
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	08da      	lsrs	r2, r3, #3
 8001ff8:	490c      	ldr	r1, [pc, #48]	@ (800202c <ssd1306_NormalizeTo0_360+0x50>)
 8001ffa:	fba1 1202 	umull	r1, r2, r1, r2
 8001ffe:	0892      	lsrs	r2, r2, #2
 8002000:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8002004:	fb01 f202 	mul.w	r2, r1, r2
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	81fb      	strh	r3, [r7, #14]
        loc_angle = (loc_angle ? loc_angle : 360);
 800200c:	89fb      	ldrh	r3, [r7, #14]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <ssd1306_NormalizeTo0_360+0x3a>
 8002012:	89fb      	ldrh	r3, [r7, #14]
 8002014:	e001      	b.n	800201a <ssd1306_NormalizeTo0_360+0x3e>
 8002016:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 800201a:	81fb      	strh	r3, [r7, #14]
    }
    return loc_angle;
 800201c:	89fb      	ldrh	r3, [r7, #14]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	16c16c17 	.word	0x16c16c17

08002030 <ssd1306_DrawArc>:
/*
 * DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8002030:	b590      	push	{r4, r7, lr}
 8002032:	b08d      	sub	sp, #52	@ 0x34
 8002034:	af02      	add	r7, sp, #8
 8002036:	4604      	mov	r4, r0
 8002038:	4608      	mov	r0, r1
 800203a:	4611      	mov	r1, r2
 800203c:	461a      	mov	r2, r3
 800203e:	4623      	mov	r3, r4
 8002040:	73fb      	strb	r3, [r7, #15]
 8002042:	4603      	mov	r3, r0
 8002044:	73bb      	strb	r3, [r7, #14]
 8002046:	460b      	mov	r3, r1
 8002048:	737b      	strb	r3, [r7, #13]
 800204a:	4613      	mov	r3, r2
 800204c:	817b      	strh	r3, [r7, #10]
    uint8_t yp1,yp2;
    uint32_t count;
    uint32_t loc_sweep;
    float rad;

    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 800204e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ffc3 	bl	8001fdc <ssd1306_NormalizeTo0_360>
 8002056:	4603      	mov	r3, r0
 8002058:	61fb      	str	r3, [r7, #28]

    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 800205a:	897b      	ldrh	r3, [r7, #10]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ffbd 	bl	8001fdc <ssd1306_NormalizeTo0_360>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	4b63      	ldr	r3, [pc, #396]	@ (80021f4 <ssd1306_DrawArc+0x1c4>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	fb02 f303 	mul.w	r3, r2, r3
 800206e:	4a62      	ldr	r2, [pc, #392]	@ (80021f8 <ssd1306_DrawArc+0x1c8>)
 8002070:	fb82 1203 	smull	r1, r2, r2, r3
 8002074:	441a      	add	r2, r3
 8002076:	1212      	asrs	r2, r2, #8
 8002078:	17db      	asrs	r3, r3, #31
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 800207e:	4b5d      	ldr	r3, [pc, #372]	@ (80021f4 <ssd1306_DrawArc+0x1c4>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	fb02 f303 	mul.w	r3, r2, r3
 800208a:	08db      	lsrs	r3, r3, #3
 800208c:	4a5b      	ldr	r2, [pc, #364]	@ (80021fc <ssd1306_DrawArc+0x1cc>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	089b      	lsrs	r3, r3, #2
 8002094:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	ee07 3a90 	vmov	s15, r3
 800209c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ae:	edc7 7a05 	vstr	s15, [r7, #20]
    while(count < approx_segments)
 80020b2:	e096      	b.n	80021e2 <ssd1306_DrawArc+0x1b2>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 80020b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020be:	edd7 7a05 	vldr	s15, [r7, #20]
 80020c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ca:	f7ff ff73 	bl	8001fb4 <ssd1306_DegToRad>
 80020ce:	ed87 0a08 	vstr	s0, [r7, #32]
        xp1 = x + (int8_t)(sinf(rad)*radius);
 80020d2:	ed97 0a08 	vldr	s0, [r7, #32]
 80020d6:	f00c fa01 	bl	800e4dc <sinf>
 80020da:	eeb0 7a40 	vmov.f32	s14, s0
 80020de:	7b7b      	ldrb	r3, [r7, #13]
 80020e0:	ee07 3a90 	vmov	s15, r3
 80020e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020f0:	edc7 7a01 	vstr	s15, [r7, #4]
 80020f4:	793b      	ldrb	r3, [r7, #4]
 80020f6:	b25b      	sxtb	r3, r3
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	4413      	add	r3, r2
 80020fe:	74fb      	strb	r3, [r7, #19]
        yp1 = y + (int8_t)(cosf(rad)*radius);
 8002100:	ed97 0a08 	vldr	s0, [r7, #32]
 8002104:	f00c f9a6 	bl	800e454 <cosf>
 8002108:	eeb0 7a40 	vmov.f32	s14, s0
 800210c:	7b7b      	ldrb	r3, [r7, #13]
 800210e:	ee07 3a90 	vmov	s15, r3
 8002112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800211e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002122:	793b      	ldrb	r3, [r7, #4]
 8002124:	b25b      	sxtb	r3, r3
 8002126:	b2da      	uxtb	r2, r3
 8002128:	7bbb      	ldrb	r3, [r7, #14]
 800212a:	4413      	add	r3, r2
 800212c:	74bb      	strb	r3, [r7, #18]
        count++;
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	3301      	adds	r3, #1
 8002132:	627b      	str	r3, [r7, #36]	@ 0x24
        if(count != approx_segments) {
 8002134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	429a      	cmp	r2, r3
 800213a:	d00f      	beq.n	800215c <ssd1306_DrawArc+0x12c>
            rad = ssd1306_DegToRad(count*approx_degree);
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002146:	edd7 7a05 	vldr	s15, [r7, #20]
 800214a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214e:	eeb0 0a67 	vmov.f32	s0, s15
 8002152:	f7ff ff2f 	bl	8001fb4 <ssd1306_DegToRad>
 8002156:	ed87 0a08 	vstr	s0, [r7, #32]
 800215a:	e00a      	b.n	8002172 <ssd1306_DrawArc+0x142>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002166:	eeb0 0a67 	vmov.f32	s0, s15
 800216a:	f7ff ff23 	bl	8001fb4 <ssd1306_DegToRad>
 800216e:	ed87 0a08 	vstr	s0, [r7, #32]
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 8002172:	ed97 0a08 	vldr	s0, [r7, #32]
 8002176:	f00c f9b1 	bl	800e4dc <sinf>
 800217a:	eeb0 7a40 	vmov.f32	s14, s0
 800217e:	7b7b      	ldrb	r3, [r7, #13]
 8002180:	ee07 3a90 	vmov	s15, r3
 8002184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800218c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002190:	edc7 7a01 	vstr	s15, [r7, #4]
 8002194:	793b      	ldrb	r3, [r7, #4]
 8002196:	b25b      	sxtb	r3, r3
 8002198:	b2da      	uxtb	r2, r3
 800219a:	7bfb      	ldrb	r3, [r7, #15]
 800219c:	4413      	add	r3, r2
 800219e:	747b      	strb	r3, [r7, #17]
        yp2 = y + (int8_t)(cosf(rad)*radius);
 80021a0:	ed97 0a08 	vldr	s0, [r7, #32]
 80021a4:	f00c f956 	bl	800e454 <cosf>
 80021a8:	eeb0 7a40 	vmov.f32	s14, s0
 80021ac:	7b7b      	ldrb	r3, [r7, #13]
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021be:	edc7 7a01 	vstr	s15, [r7, #4]
 80021c2:	793b      	ldrb	r3, [r7, #4]
 80021c4:	b25b      	sxtb	r3, r3
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	7bbb      	ldrb	r3, [r7, #14]
 80021ca:	4413      	add	r3, r2
 80021cc:	743b      	strb	r3, [r7, #16]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 80021ce:	7c3c      	ldrb	r4, [r7, #16]
 80021d0:	7c7a      	ldrb	r2, [r7, #17]
 80021d2:	7cb9      	ldrb	r1, [r7, #18]
 80021d4:	7cf8      	ldrb	r0, [r7, #19]
 80021d6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	4623      	mov	r3, r4
 80021de:	f7ff fe43 	bl	8001e68 <ssd1306_Line>
    while(count < approx_segments)
 80021e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	f4ff af64 	bcc.w	80020b4 <ssd1306_DrawArc+0x84>
    }

    return;
 80021ec:	bf00      	nop
}
 80021ee:	372c      	adds	r7, #44	@ 0x2c
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd90      	pop	{r4, r7, pc}
 80021f4:	08013c11 	.word	0x08013c11
 80021f8:	b60b60b7 	.word	0xb60b60b7
 80021fc:	16c16c17 	.word	0x16c16c17

08002200 <ssd1306_DrawArcWithRadiusLine>:
 * Draw arc with radius line
 * Angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle: start angle in degree
 * sweep: finish angle in degree
 */
void ssd1306_DrawArcWithRadiusLine(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b08f      	sub	sp, #60	@ 0x3c
 8002204:	af02      	add	r7, sp, #8
 8002206:	4604      	mov	r4, r0
 8002208:	4608      	mov	r0, r1
 800220a:	4611      	mov	r1, r2
 800220c:	461a      	mov	r2, r3
 800220e:	4623      	mov	r3, r4
 8002210:	73fb      	strb	r3, [r7, #15]
 8002212:	4603      	mov	r3, r0
 8002214:	73bb      	strb	r3, [r7, #14]
 8002216:	460b      	mov	r3, r1
 8002218:	737b      	strb	r3, [r7, #13]
 800221a:	4613      	mov	r3, r2
 800221c:	817b      	strh	r3, [r7, #10]
    const uint32_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
 800221e:	2324      	movs	r3, #36	@ 0x24
 8002220:	623b      	str	r3, [r7, #32]
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1;
    uint8_t xp2 = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t yp1;
    uint8_t yp2 = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint32_t count;
    uint32_t loc_sweep;
    float rad;

    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 800222e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fed2 	bl	8001fdc <ssd1306_NormalizeTo0_360>
 8002238:	4603      	mov	r3, r0
 800223a:	61fb      	str	r3, [r7, #28]

    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 800223c:	897b      	ldrh	r3, [r7, #10]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fecc 	bl	8001fdc <ssd1306_NormalizeTo0_360>
 8002244:	4603      	mov	r3, r0
 8002246:	461a      	mov	r2, r3
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	08db      	lsrs	r3, r3, #3
 8002250:	4a8a      	ldr	r2, [pc, #552]	@ (800247c <ssd1306_DrawArcWithRadiusLine+0x27c>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	62bb      	str	r3, [r7, #40]	@ 0x28
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	6a3a      	ldr	r2, [r7, #32]
 800225e:	fb02 f303 	mul.w	r3, r2, r3
 8002262:	08db      	lsrs	r3, r3, #3
 8002264:	4a85      	ldr	r2, [pc, #532]	@ (800247c <ssd1306_DrawArcWithRadiusLine+0x27c>)
 8002266:	fba2 2303 	umull	r2, r3, r2, r3
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	ee07 3a90 	vmov	s15, r3
 8002274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002286:	edc7 7a05 	vstr	s15, [r7, #20]

    rad = ssd1306_DegToRad(count*approx_degree);
 800228a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800228c:	ee07 3a90 	vmov	s15, r3
 8002290:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002294:	edd7 7a05 	vldr	s15, [r7, #20]
 8002298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800229c:	eeb0 0a67 	vmov.f32	s0, s15
 80022a0:	f7ff fe88 	bl	8001fb4 <ssd1306_DegToRad>
 80022a4:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    uint8_t first_point_x = x + (int8_t)(sinf(rad)*radius);
 80022a8:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80022ac:	f00c f916 	bl	800e4dc <sinf>
 80022b0:	eeb0 7a40 	vmov.f32	s14, s0
 80022b4:	7b7b      	ldrb	r3, [r7, #13]
 80022b6:	ee07 3a90 	vmov	s15, r3
 80022ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c6:	edc7 7a01 	vstr	s15, [r7, #4]
 80022ca:	793b      	ldrb	r3, [r7, #4]
 80022cc:	b25b      	sxtb	r3, r3
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	4413      	add	r3, r2
 80022d4:	74fb      	strb	r3, [r7, #19]
    uint8_t first_point_y = y + (int8_t)(cosf(rad)*radius);
 80022d6:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80022da:	f00c f8bb 	bl	800e454 <cosf>
 80022de:	eeb0 7a40 	vmov.f32	s14, s0
 80022e2:	7b7b      	ldrb	r3, [r7, #13]
 80022e4:	ee07 3a90 	vmov	s15, r3
 80022e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80022f8:	793b      	ldrb	r3, [r7, #4]
 80022fa:	b25b      	sxtb	r3, r3
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	7bbb      	ldrb	r3, [r7, #14]
 8002300:	4413      	add	r3, r2
 8002302:	74bb      	strb	r3, [r7, #18]
    while (count < approx_segments) {
 8002304:	e09a      	b.n	800243c <ssd1306_DrawArcWithRadiusLine+0x23c>
        rad = ssd1306_DegToRad(count*approx_degree);
 8002306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002308:	ee07 3a90 	vmov	s15, r3
 800230c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002310:	edd7 7a05 	vldr	s15, [r7, #20]
 8002314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002318:	eeb0 0a67 	vmov.f32	s0, s15
 800231c:	f7ff fe4a 	bl	8001fb4 <ssd1306_DegToRad>
 8002320:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        xp1 = x + (int8_t)(sinf(rad)*radius);
 8002324:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8002328:	f00c f8d8 	bl	800e4dc <sinf>
 800232c:	eeb0 7a40 	vmov.f32	s14, s0
 8002330:	7b7b      	ldrb	r3, [r7, #13]
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800233a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002342:	edc7 7a01 	vstr	s15, [r7, #4]
 8002346:	793b      	ldrb	r3, [r7, #4]
 8002348:	b25b      	sxtb	r3, r3
 800234a:	b2da      	uxtb	r2, r3
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	4413      	add	r3, r2
 8002350:	747b      	strb	r3, [r7, #17]
        yp1 = y + (int8_t)(cosf(rad)*radius);
 8002352:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8002356:	f00c f87d 	bl	800e454 <cosf>
 800235a:	eeb0 7a40 	vmov.f32	s14, s0
 800235e:	7b7b      	ldrb	r3, [r7, #13]
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800236c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002370:	edc7 7a01 	vstr	s15, [r7, #4]
 8002374:	793b      	ldrb	r3, [r7, #4]
 8002376:	b25b      	sxtb	r3, r3
 8002378:	b2da      	uxtb	r2, r3
 800237a:	7bbb      	ldrb	r3, [r7, #14]
 800237c:	4413      	add	r3, r2
 800237e:	743b      	strb	r3, [r7, #16]
        count++;
 8002380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002382:	3301      	adds	r3, #1
 8002384:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (count != approx_segments) {
 8002386:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	429a      	cmp	r2, r3
 800238c:	d00f      	beq.n	80023ae <ssd1306_DrawArcWithRadiusLine+0x1ae>
            rad = ssd1306_DegToRad(count*approx_degree);
 800238e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002390:	ee07 3a90 	vmov	s15, r3
 8002394:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002398:	edd7 7a05 	vldr	s15, [r7, #20]
 800239c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a0:	eeb0 0a67 	vmov.f32	s0, s15
 80023a4:	f7ff fe06 	bl	8001fb4 <ssd1306_DegToRad>
 80023a8:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 80023ac:	e00a      	b.n	80023c4 <ssd1306_DrawArcWithRadiusLine+0x1c4>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	ee07 3a90 	vmov	s15, r3
 80023b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023b8:	eeb0 0a67 	vmov.f32	s0, s15
 80023bc:	f7ff fdfa 	bl	8001fb4 <ssd1306_DegToRad>
 80023c0:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 80023c4:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80023c8:	f00c f888 	bl	800e4dc <sinf>
 80023cc:	eeb0 7a40 	vmov.f32	s14, s0
 80023d0:	7b7b      	ldrb	r3, [r7, #13]
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023e2:	edc7 7a01 	vstr	s15, [r7, #4]
 80023e6:	793b      	ldrb	r3, [r7, #4]
 80023e8:	b25b      	sxtb	r3, r3
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
 80023ee:	4413      	add	r3, r2
 80023f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        yp2 = y + (int8_t)(cosf(rad)*radius);
 80023f4:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80023f8:	f00c f82c 	bl	800e454 <cosf>
 80023fc:	eeb0 7a40 	vmov.f32	s14, s0
 8002400:	7b7b      	ldrb	r3, [r7, #13]
 8002402:	ee07 3a90 	vmov	s15, r3
 8002406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800240a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002412:	edc7 7a01 	vstr	s15, [r7, #4]
 8002416:	793b      	ldrb	r3, [r7, #4]
 8002418:	b25b      	sxtb	r3, r3
 800241a:	b2da      	uxtb	r2, r3
 800241c:	7bbb      	ldrb	r3, [r7, #14]
 800241e:	4413      	add	r3, r2
 8002420:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8002424:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 8002428:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800242c:	7c39      	ldrb	r1, [r7, #16]
 800242e:	7c78      	ldrb	r0, [r7, #17]
 8002430:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	4623      	mov	r3, r4
 8002438:	f7ff fd16 	bl	8001e68 <ssd1306_Line>
    while (count < approx_segments) {
 800243c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	429a      	cmp	r2, r3
 8002442:	f4ff af60 	bcc.w	8002306 <ssd1306_DrawArcWithRadiusLine+0x106>
    }

    // Radius line
    ssd1306_Line(x,y,first_point_x,first_point_y,color);
 8002446:	7cbc      	ldrb	r4, [r7, #18]
 8002448:	7cfa      	ldrb	r2, [r7, #19]
 800244a:	7bb9      	ldrb	r1, [r7, #14]
 800244c:	7bf8      	ldrb	r0, [r7, #15]
 800244e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	4623      	mov	r3, r4
 8002456:	f7ff fd07 	bl	8001e68 <ssd1306_Line>
    ssd1306_Line(x,y,xp2,yp2,color);
 800245a:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 800245e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002462:	7bb9      	ldrb	r1, [r7, #14]
 8002464:	7bf8      	ldrb	r0, [r7, #15]
 8002466:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	4623      	mov	r3, r4
 800246e:	f7ff fcfb 	bl	8001e68 <ssd1306_Line>
    return;
 8002472:	bf00      	nop
}
 8002474:	3734      	adds	r7, #52	@ 0x34
 8002476:	46bd      	mov	sp, r7
 8002478:	bd90      	pop	{r4, r7, pc}
 800247a:	bf00      	nop
 800247c:	16c16c17 	.word	0x16c16c17

08002480 <ssd1306_DrawCircle>:

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	4604      	mov	r4, r0
 8002488:	4608      	mov	r0, r1
 800248a:	4611      	mov	r1, r2
 800248c:	461a      	mov	r2, r3
 800248e:	4623      	mov	r3, r4
 8002490:	71fb      	strb	r3, [r7, #7]
 8002492:	4603      	mov	r3, r0
 8002494:	71bb      	strb	r3, [r7, #6]
 8002496:	460b      	mov	r3, r1
 8002498:	717b      	strb	r3, [r7, #5]
 800249a:	4613      	mov	r3, r2
 800249c:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 800249e:	797b      	ldrb	r3, [r7, #5]
 80024a0:	425b      	negs	r3, r3
 80024a2:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 80024a8:	797b      	ldrb	r3, [r7, #5]
 80024aa:	f1c3 0301 	rsb	r3, r3, #1
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	db65      	blt.n	8002586 <ssd1306_DrawCircle+0x106>
 80024ba:	79bb      	ldrb	r3, [r7, #6]
 80024bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80024be:	d862      	bhi.n	8002586 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	79fa      	ldrb	r2, [r7, #7]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	b2d8      	uxtb	r0, r3
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	79bb      	ldrb	r3, [r7, #6]
 80024d0:	4413      	add	r3, r2
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	793a      	ldrb	r2, [r7, #4]
 80024d6:	4619      	mov	r1, r3
 80024d8:	f7ff fba2 	bl	8001c20 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	79fb      	ldrb	r3, [r7, #7]
 80024e2:	4413      	add	r3, r2
 80024e4:	b2d8      	uxtb	r0, r3
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	79bb      	ldrb	r3, [r7, #6]
 80024ec:	4413      	add	r3, r2
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	793a      	ldrb	r2, [r7, #4]
 80024f2:	4619      	mov	r1, r3
 80024f4:	f7ff fb94 	bl	8001c20 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	4413      	add	r3, r2
 8002500:	b2d8      	uxtb	r0, r3
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	79ba      	ldrb	r2, [r7, #6]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	793a      	ldrb	r2, [r7, #4]
 800250e:	4619      	mov	r1, r3
 8002510:	f7ff fb86 	bl	8001c20 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	79fa      	ldrb	r2, [r7, #7]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	b2d8      	uxtb	r0, r3
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	79ba      	ldrb	r2, [r7, #6]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	793a      	ldrb	r2, [r7, #4]
 800252a:	4619      	mov	r1, r3
 800252c:	f7ff fb78 	bl	8001c20 <ssd1306_DrawPixel>
        e2 = err;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	429a      	cmp	r2, r3
 800253a:	dc13      	bgt.n	8002564 <ssd1306_DrawCircle+0xe4>
            y++;
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	3301      	adds	r3, #1
 8002540:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	3301      	adds	r3, #1
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4413      	add	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	425b      	negs	r3, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	429a      	cmp	r2, r3
 8002556:	d105      	bne.n	8002564 <ssd1306_DrawCircle+0xe4>
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	429a      	cmp	r2, r3
 800255e:	dc01      	bgt.n	8002564 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	429a      	cmp	r2, r3
 800256a:	dd08      	ble.n	800257e <ssd1306_DrawCircle+0xfe>
            x++;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	3301      	adds	r3, #1
 8002570:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	3301      	adds	r3, #1
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	4413      	add	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2b00      	cmp	r3, #0
 8002582:	dd9d      	ble.n	80024c0 <ssd1306_DrawCircle+0x40>

    return;
 8002584:	e000      	b.n	8002588 <ssd1306_DrawCircle+0x108>
        return;
 8002586:	bf00      	nop
}
 8002588:	371c      	adds	r7, #28
 800258a:	46bd      	mov	sp, r7
 800258c:	bd90      	pop	{r4, r7, pc}

0800258e <ssd1306_FillCircle>:

/* Draw filled circle. Pixel positions calculated using Bresenham's algorithm */
void ssd1306_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 800258e:	b590      	push	{r4, r7, lr}
 8002590:	b089      	sub	sp, #36	@ 0x24
 8002592:	af00      	add	r7, sp, #0
 8002594:	4604      	mov	r4, r0
 8002596:	4608      	mov	r0, r1
 8002598:	4611      	mov	r1, r2
 800259a:	461a      	mov	r2, r3
 800259c:	4623      	mov	r3, r4
 800259e:	71fb      	strb	r3, [r7, #7]
 80025a0:	4603      	mov	r3, r0
 80025a2:	71bb      	strb	r3, [r7, #6]
 80025a4:	460b      	mov	r3, r1
 80025a6:	717b      	strb	r3, [r7, #5]
 80025a8:	4613      	mov	r3, r2
 80025aa:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 80025ac:	797b      	ldrb	r3, [r7, #5]
 80025ae:	425b      	negs	r3, r3
 80025b0:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 80025b6:	797b      	ldrb	r3, [r7, #5]
 80025b8:	f1c3 0301 	rsb	r3, r3, #1
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 80025c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	db51      	blt.n	800266c <ssd1306_FillCircle+0xde>
 80025c8:	79bb      	ldrb	r3, [r7, #6]
 80025ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80025cc:	d84e      	bhi.n	800266c <ssd1306_FillCircle+0xde>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	79bb      	ldrb	r3, [r7, #6]
 80025d4:	4413      	add	r3, r2
 80025d6:	73fb      	strb	r3, [r7, #15]
 80025d8:	e017      	b.n	800260a <ssd1306_FillCircle+0x7c>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	79fa      	ldrb	r2, [r7, #7]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	73bb      	strb	r3, [r7, #14]
 80025e4:	e008      	b.n	80025f8 <ssd1306_FillCircle+0x6a>
                ssd1306_DrawPixel(_x, _y, par_color);
 80025e6:	793a      	ldrb	r2, [r7, #4]
 80025e8:	7bf9      	ldrb	r1, [r7, #15]
 80025ea:	7bbb      	ldrb	r3, [r7, #14]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fb17 	bl	8001c20 <ssd1306_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 80025f2:	7bbb      	ldrb	r3, [r7, #14]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	73bb      	strb	r3, [r7, #14]
 80025f8:	7bba      	ldrb	r2, [r7, #14]
 80025fa:	79f9      	ldrb	r1, [r7, #7]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	440b      	add	r3, r1
 8002600:	429a      	cmp	r2, r3
 8002602:	daf0      	bge.n	80025e6 <ssd1306_FillCircle+0x58>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	3b01      	subs	r3, #1
 8002608:	73fb      	strb	r3, [r7, #15]
 800260a:	7bfa      	ldrb	r2, [r7, #15]
 800260c:	79b9      	ldrb	r1, [r7, #6]
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	1acb      	subs	r3, r1, r3
 8002612:	429a      	cmp	r2, r3
 8002614:	dae1      	bge.n	80025da <ssd1306_FillCircle+0x4c>
            }
        }

        e2 = err;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	429a      	cmp	r2, r3
 8002620:	dc13      	bgt.n	800264a <ssd1306_FillCircle+0xbc>
            y++;
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	3301      	adds	r3, #1
 8002626:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	3301      	adds	r3, #1
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4413      	add	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	425b      	negs	r3, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	429a      	cmp	r2, r3
 800263c:	d105      	bne.n	800264a <ssd1306_FillCircle+0xbc>
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	429a      	cmp	r2, r3
 8002644:	dc01      	bgt.n	800264a <ssd1306_FillCircle+0xbc>
                e2 = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
            }
        }

        if (e2 > x) {
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	429a      	cmp	r2, r3
 8002650:	dd08      	ble.n	8002664 <ssd1306_FillCircle+0xd6>
            x++;
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3301      	adds	r3, #1
 8002656:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	3301      	adds	r3, #1
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4413      	add	r3, r2
 8002662:	617b      	str	r3, [r7, #20]
        }
    } while (x <= 0);
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	2b00      	cmp	r3, #0
 8002668:	ddb1      	ble.n	80025ce <ssd1306_FillCircle+0x40>

    return;
 800266a:	e000      	b.n	800266e <ssd1306_FillCircle+0xe0>
        return;
 800266c:	bf00      	nop
}
 800266e:	3724      	adds	r7, #36	@ 0x24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd90      	pop	{r4, r7, pc}

08002674 <ssd1306_DrawRectangle>:

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b085      	sub	sp, #20
 8002678:	af02      	add	r7, sp, #8
 800267a:	4604      	mov	r4, r0
 800267c:	4608      	mov	r0, r1
 800267e:	4611      	mov	r1, r2
 8002680:	461a      	mov	r2, r3
 8002682:	4623      	mov	r3, r4
 8002684:	71fb      	strb	r3, [r7, #7]
 8002686:	4603      	mov	r3, r0
 8002688:	71bb      	strb	r3, [r7, #6]
 800268a:	460b      	mov	r3, r1
 800268c:	717b      	strb	r3, [r7, #5]
 800268e:	4613      	mov	r3, r2
 8002690:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8002692:	79bc      	ldrb	r4, [r7, #6]
 8002694:	797a      	ldrb	r2, [r7, #5]
 8002696:	79b9      	ldrb	r1, [r7, #6]
 8002698:	79f8      	ldrb	r0, [r7, #7]
 800269a:	7e3b      	ldrb	r3, [r7, #24]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	4623      	mov	r3, r4
 80026a0:	f7ff fbe2 	bl	8001e68 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80026a4:	793c      	ldrb	r4, [r7, #4]
 80026a6:	797a      	ldrb	r2, [r7, #5]
 80026a8:	79b9      	ldrb	r1, [r7, #6]
 80026aa:	7978      	ldrb	r0, [r7, #5]
 80026ac:	7e3b      	ldrb	r3, [r7, #24]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	4623      	mov	r3, r4
 80026b2:	f7ff fbd9 	bl	8001e68 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80026b6:	793c      	ldrb	r4, [r7, #4]
 80026b8:	79fa      	ldrb	r2, [r7, #7]
 80026ba:	7939      	ldrb	r1, [r7, #4]
 80026bc:	7978      	ldrb	r0, [r7, #5]
 80026be:	7e3b      	ldrb	r3, [r7, #24]
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	4623      	mov	r3, r4
 80026c4:	f7ff fbd0 	bl	8001e68 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80026c8:	79bc      	ldrb	r4, [r7, #6]
 80026ca:	79fa      	ldrb	r2, [r7, #7]
 80026cc:	7939      	ldrb	r1, [r7, #4]
 80026ce:	79f8      	ldrb	r0, [r7, #7]
 80026d0:	7e3b      	ldrb	r3, [r7, #24]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	4623      	mov	r3, r4
 80026d6:	f7ff fbc7 	bl	8001e68 <ssd1306_Line>

    return;
 80026da:	bf00      	nop
}
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd90      	pop	{r4, r7, pc}

080026e2 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80026e2:	b590      	push	{r4, r7, lr}
 80026e4:	b085      	sub	sp, #20
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	4604      	mov	r4, r0
 80026ea:	4608      	mov	r0, r1
 80026ec:	4611      	mov	r1, r2
 80026ee:	461a      	mov	r2, r3
 80026f0:	4623      	mov	r3, r4
 80026f2:	71fb      	strb	r3, [r7, #7]
 80026f4:	4603      	mov	r3, r0
 80026f6:	71bb      	strb	r3, [r7, #6]
 80026f8:	460b      	mov	r3, r1
 80026fa:	717b      	strb	r3, [r7, #5]
 80026fc:	4613      	mov	r3, r2
 80026fe:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002700:	79fa      	ldrb	r2, [r7, #7]
 8002702:	797b      	ldrb	r3, [r7, #5]
 8002704:	4293      	cmp	r3, r2
 8002706:	bf28      	it	cs
 8002708:	4613      	movcs	r3, r2
 800270a:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 800270c:	797a      	ldrb	r2, [r7, #5]
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	4293      	cmp	r3, r2
 8002712:	bf38      	it	cc
 8002714:	4613      	movcc	r3, r2
 8002716:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002718:	79ba      	ldrb	r2, [r7, #6]
 800271a:	793b      	ldrb	r3, [r7, #4]
 800271c:	4293      	cmp	r3, r2
 800271e:	bf28      	it	cs
 8002720:	4613      	movcs	r3, r2
 8002722:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8002724:	793a      	ldrb	r2, [r7, #4]
 8002726:	79bb      	ldrb	r3, [r7, #6]
 8002728:	4293      	cmp	r3, r2
 800272a:	bf38      	it	cc
 800272c:	4613      	movcc	r3, r2
 800272e:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002730:	7afb      	ldrb	r3, [r7, #11]
 8002732:	73fb      	strb	r3, [r7, #15]
 8002734:	e017      	b.n	8002766 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002736:	7b7b      	ldrb	r3, [r7, #13]
 8002738:	73bb      	strb	r3, [r7, #14]
 800273a:	e009      	b.n	8002750 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 800273c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002740:	7bf9      	ldrb	r1, [r7, #15]
 8002742:	7bbb      	ldrb	r3, [r7, #14]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fa6b 	bl	8001c20 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800274a:	7bbb      	ldrb	r3, [r7, #14]
 800274c:	3301      	adds	r3, #1
 800274e:	73bb      	strb	r3, [r7, #14]
 8002750:	7bba      	ldrb	r2, [r7, #14]
 8002752:	7b3b      	ldrb	r3, [r7, #12]
 8002754:	429a      	cmp	r2, r3
 8002756:	d803      	bhi.n	8002760 <ssd1306_FillRectangle+0x7e>
 8002758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800275c:	2b00      	cmp	r3, #0
 800275e:	daed      	bge.n	800273c <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	3301      	adds	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
 8002766:	7bfa      	ldrb	r2, [r7, #15]
 8002768:	7abb      	ldrb	r3, [r7, #10]
 800276a:	429a      	cmp	r2, r3
 800276c:	d803      	bhi.n	8002776 <ssd1306_FillRectangle+0x94>
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	2b3f      	cmp	r3, #63	@ 0x3f
 8002772:	d9e0      	bls.n	8002736 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8002774:	bf00      	nop
 8002776:	bf00      	nop
}
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	bd90      	pop	{r4, r7, pc}
	...

08002780 <ssd1306_InvertRectangle>:

SSD1306_Error_t ssd1306_InvertRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8002780:	b490      	push	{r4, r7}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	4604      	mov	r4, r0
 8002788:	4608      	mov	r0, r1
 800278a:	4611      	mov	r1, r2
 800278c:	461a      	mov	r2, r3
 800278e:	4623      	mov	r3, r4
 8002790:	71fb      	strb	r3, [r7, #7]
 8002792:	4603      	mov	r3, r0
 8002794:	71bb      	strb	r3, [r7, #6]
 8002796:	460b      	mov	r3, r1
 8002798:	717b      	strb	r3, [r7, #5]
 800279a:	4613      	mov	r3, r2
 800279c:	713b      	strb	r3, [r7, #4]
  if ((x2 >= SSD1306_WIDTH) || (y2 >= SSD1306_HEIGHT)) {
 800279e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	db02      	blt.n	80027ac <ssd1306_InvertRectangle+0x2c>
 80027a6:	793b      	ldrb	r3, [r7, #4]
 80027a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80027aa:	d901      	bls.n	80027b0 <ssd1306_InvertRectangle+0x30>
    return SSD1306_ERR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e09c      	b.n	80028ea <ssd1306_InvertRectangle+0x16a>
  }
  if ((x1 > x2) || (y1 > y2)) {
 80027b0:	79fa      	ldrb	r2, [r7, #7]
 80027b2:	797b      	ldrb	r3, [r7, #5]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d803      	bhi.n	80027c0 <ssd1306_InvertRectangle+0x40>
 80027b8:	79ba      	ldrb	r2, [r7, #6]
 80027ba:	793b      	ldrb	r3, [r7, #4]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d901      	bls.n	80027c4 <ssd1306_InvertRectangle+0x44>
    return SSD1306_ERR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e092      	b.n	80028ea <ssd1306_InvertRectangle+0x16a>
  }
  uint32_t i;
  if ((y1 / 8) != (y2 / 8)) {
 80027c4:	79bb      	ldrb	r3, [r7, #6]
 80027c6:	08db      	lsrs	r3, r3, #3
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	793b      	ldrb	r3, [r7, #4]
 80027cc:	08db      	lsrs	r3, r3, #3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d057      	beq.n	8002884 <ssd1306_InvertRectangle+0x104>
    /* if rectangle doesn't lie on one 8px row */
    for (uint32_t x = x1; x <= x2; x++) {
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	e04f      	b.n	800287a <ssd1306_InvertRectangle+0xfa>
      i = x + (y1 / 8) * SSD1306_WIDTH;
 80027da:	79bb      	ldrb	r3, [r7, #6]
 80027dc:	08db      	lsrs	r3, r3, #3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	01db      	lsls	r3, r3, #7
 80027e2:	461a      	mov	r2, r3
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	4413      	add	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]
      SSD1306_Buffer[i] ^= 0xFF << (y1 % 8);
 80027ea:	4a42      	ldr	r2, [pc, #264]	@ (80028f4 <ssd1306_InvertRectangle+0x174>)
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	4413      	add	r3, r2
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	b25a      	sxtb	r2, r3
 80027f4:	79bb      	ldrb	r3, [r7, #6]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	21ff      	movs	r1, #255	@ 0xff
 80027fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002800:	b25b      	sxtb	r3, r3
 8002802:	4053      	eors	r3, r2
 8002804:	b25b      	sxtb	r3, r3
 8002806:	b2d9      	uxtb	r1, r3
 8002808:	4a3a      	ldr	r2, [pc, #232]	@ (80028f4 <ssd1306_InvertRectangle+0x174>)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	4413      	add	r3, r2
 800280e:	460a      	mov	r2, r1
 8002810:	701a      	strb	r2, [r3, #0]
      i += SSD1306_WIDTH;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	3380      	adds	r3, #128	@ 0x80
 8002816:	617b      	str	r3, [r7, #20]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 8002818:	e00d      	b.n	8002836 <ssd1306_InvertRectangle+0xb6>
        SSD1306_Buffer[i] ^= 0xFF;
 800281a:	4a36      	ldr	r2, [pc, #216]	@ (80028f4 <ssd1306_InvertRectangle+0x174>)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	4413      	add	r3, r2
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	43db      	mvns	r3, r3
 8002824:	b2d9      	uxtb	r1, r3
 8002826:	4a33      	ldr	r2, [pc, #204]	@ (80028f4 <ssd1306_InvertRectangle+0x174>)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	4413      	add	r3, r2
 800282c:	460a      	mov	r2, r1
 800282e:	701a      	strb	r2, [r3, #0]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3380      	adds	r3, #128	@ 0x80
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	793b      	ldrb	r3, [r7, #4]
 8002838:	08db      	lsrs	r3, r3, #3
 800283a:	b2db      	uxtb	r3, r3
 800283c:	01db      	lsls	r3, r3, #7
 800283e:	461a      	mov	r2, r3
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4413      	add	r3, r2
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	429a      	cmp	r2, r3
 8002848:	d3e7      	bcc.n	800281a <ssd1306_InvertRectangle+0x9a>
      }
      SSD1306_Buffer[i] ^= 0xFF >> (7 - (y2 % 8));
 800284a:	4a2a      	ldr	r2, [pc, #168]	@ (80028f4 <ssd1306_InvertRectangle+0x174>)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	4413      	add	r3, r2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	b25a      	sxtb	r2, r3
 8002854:	793b      	ldrb	r3, [r7, #4]
 8002856:	43db      	mvns	r3, r3
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	21ff      	movs	r1, #255	@ 0xff
 800285e:	fa41 f303 	asr.w	r3, r1, r3
 8002862:	b25b      	sxtb	r3, r3
 8002864:	4053      	eors	r3, r2
 8002866:	b25b      	sxtb	r3, r3
 8002868:	b2d9      	uxtb	r1, r3
 800286a:	4a22      	ldr	r2, [pc, #136]	@ (80028f4 <ssd1306_InvertRectangle+0x174>)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	4413      	add	r3, r2
 8002870:	460a      	mov	r2, r1
 8002872:	701a      	strb	r2, [r3, #0]
    for (uint32_t x = x1; x <= x2; x++) {
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	3301      	adds	r3, #1
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	797b      	ldrb	r3, [r7, #5]
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	429a      	cmp	r2, r3
 8002880:	d9ab      	bls.n	80027da <ssd1306_InvertRectangle+0x5a>
 8002882:	e031      	b.n	80028e8 <ssd1306_InvertRectangle+0x168>
    }
  } else {
    /* if rectangle lies on one 8px row */
    const uint8_t mask = (0xFF << (y1 % 8)) & (0xFF >> (7 - (y2 % 8)));
 8002884:	79bb      	ldrb	r3, [r7, #6]
 8002886:	f003 0307 	and.w	r3, r3, #7
 800288a:	22ff      	movs	r2, #255	@ 0xff
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	b25a      	sxtb	r2, r3
 8002892:	793b      	ldrb	r3, [r7, #4]
 8002894:	43db      	mvns	r3, r3
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	21ff      	movs	r1, #255	@ 0xff
 800289c:	fa41 f303 	asr.w	r3, r1, r3
 80028a0:	b25b      	sxtb	r3, r3
 80028a2:	4013      	ands	r3, r2
 80028a4:	b25b      	sxtb	r3, r3
 80028a6:	73fb      	strb	r3, [r7, #15]
    for (i = x1 + (y1 / 8) * SSD1306_WIDTH;
 80028a8:	79fa      	ldrb	r2, [r7, #7]
 80028aa:	79bb      	ldrb	r3, [r7, #6]
 80028ac:	08db      	lsrs	r3, r3, #3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	01db      	lsls	r3, r3, #7
 80028b2:	4413      	add	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	e00e      	b.n	80028d6 <ssd1306_InvertRectangle+0x156>
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
      SSD1306_Buffer[i] ^= mask;
 80028b8:	4a0e      	ldr	r2, [pc, #56]	@ (80028f4 <ssd1306_InvertRectangle+0x174>)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	4413      	add	r3, r2
 80028be:	781a      	ldrb	r2, [r3, #0]
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	4053      	eors	r3, r2
 80028c4:	b2d9      	uxtb	r1, r3
 80028c6:	4a0b      	ldr	r2, [pc, #44]	@ (80028f4 <ssd1306_InvertRectangle+0x174>)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	4413      	add	r3, r2
 80028cc:	460a      	mov	r2, r1
 80028ce:	701a      	strb	r2, [r3, #0]
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	3301      	adds	r3, #1
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	797b      	ldrb	r3, [r7, #5]
 80028d8:	793a      	ldrb	r2, [r7, #4]
 80028da:	08d2      	lsrs	r2, r2, #3
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	01d2      	lsls	r2, r2, #7
 80028e0:	4413      	add	r3, r2
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d9e7      	bls.n	80028b8 <ssd1306_InvertRectangle+0x138>
    }
  }
  return SSD1306_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc90      	pop	{r4, r7}
 80028f2:	4770      	bx	lr
 80028f4:	200005e0 	.word	0x200005e0

080028f8 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	603a      	str	r2, [r7, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
 8002906:	460b      	mov	r3, r1
 8002908:	71bb      	strb	r3, [r7, #6]
 800290a:	4613      	mov	r3, r2
 800290c:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800290e:	797b      	ldrb	r3, [r7, #5]
 8002910:	3307      	adds	r3, #7
 8002912:	2b00      	cmp	r3, #0
 8002914:	da00      	bge.n	8002918 <ssd1306_DrawBitmap+0x20>
 8002916:	3307      	adds	r3, #7
 8002918:	10db      	asrs	r3, r3, #3
 800291a:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002924:	2b00      	cmp	r3, #0
 8002926:	db3e      	blt.n	80029a6 <ssd1306_DrawBitmap+0xae>
 8002928:	79bb      	ldrb	r3, [r7, #6]
 800292a:	2b3f      	cmp	r3, #63	@ 0x3f
 800292c:	d83b      	bhi.n	80029a6 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800292e:	2300      	movs	r3, #0
 8002930:	73bb      	strb	r3, [r7, #14]
 8002932:	e033      	b.n	800299c <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8002934:	2300      	movs	r3, #0
 8002936:	737b      	strb	r3, [r7, #13]
 8002938:	e026      	b.n	8002988 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 800293a:	7b7b      	ldrb	r3, [r7, #13]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	73fb      	strb	r3, [r7, #15]
 800294a:	e00d      	b.n	8002968 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800294c:	7bbb      	ldrb	r3, [r7, #14]
 800294e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	7b7a      	ldrb	r2, [r7, #13]
 8002958:	08d2      	lsrs	r2, r2, #3
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	4413      	add	r3, r2
 800295e:	461a      	mov	r2, r3
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	4413      	add	r3, r2
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8002968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296c:	2b00      	cmp	r3, #0
 800296e:	da08      	bge.n	8002982 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8002970:	79fa      	ldrb	r2, [r7, #7]
 8002972:	7b7b      	ldrb	r3, [r7, #13]
 8002974:	4413      	add	r3, r2
 8002976:	b2db      	uxtb	r3, r3
 8002978:	7f3a      	ldrb	r2, [r7, #28]
 800297a:	79b9      	ldrb	r1, [r7, #6]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff f94f 	bl	8001c20 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8002982:	7b7b      	ldrb	r3, [r7, #13]
 8002984:	3301      	adds	r3, #1
 8002986:	737b      	strb	r3, [r7, #13]
 8002988:	7b7a      	ldrb	r2, [r7, #13]
 800298a:	797b      	ldrb	r3, [r7, #5]
 800298c:	429a      	cmp	r2, r3
 800298e:	d3d4      	bcc.n	800293a <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8002990:	7bbb      	ldrb	r3, [r7, #14]
 8002992:	3301      	adds	r3, #1
 8002994:	73bb      	strb	r3, [r7, #14]
 8002996:	79bb      	ldrb	r3, [r7, #6]
 8002998:	3301      	adds	r3, #1
 800299a:	71bb      	strb	r3, [r7, #6]
 800299c:	7bba      	ldrb	r2, [r7, #14]
 800299e:	7e3b      	ldrb	r3, [r7, #24]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d3c7      	bcc.n	8002934 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 80029a4:	e000      	b.n	80029a8 <ssd1306_DrawBitmap+0xb0>
        return;
 80029a6:	bf00      	nop
}
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b084      	sub	sp, #16
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80029b8:	2381      	movs	r3, #129	@ 0x81
 80029ba:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff f852 	bl	8001a68 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff f84e 	bl	8001a68 <ssd1306_WriteCommand>
}
 80029cc:	bf00      	nop
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80029e4:	23af      	movs	r3, #175	@ 0xaf
 80029e6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80029e8:	4b08      	ldr	r3, [pc, #32]	@ (8002a0c <ssd1306_SetDisplayOn+0x38>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	715a      	strb	r2, [r3, #5]
 80029ee:	e004      	b.n	80029fa <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80029f0:	23ae      	movs	r3, #174	@ 0xae
 80029f2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80029f4:	4b05      	ldr	r3, [pc, #20]	@ (8002a0c <ssd1306_SetDisplayOn+0x38>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff f833 	bl	8001a68 <ssd1306_WriteCommand>
}
 8002a02:	bf00      	nop
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	200009e0 	.word	0x200009e0

08002a10 <ssd1306_TestBorder>:
0x00, 0x03, 0xFF, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x3F, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void ssd1306_TestBorder() {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8002a16:	2000      	movs	r0, #0
 8002a18:	f7ff f8c2 	bl	8001ba0 <ssd1306_Fill>
   
    uint8_t x = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	71fb      	strb	r3, [r7, #7]
    uint8_t y = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	71bb      	strb	r3, [r7, #6]
    do {
        ssd1306_DrawPixel(x, y, Black);
 8002a24:	79b9      	ldrb	r1, [r7, #6]
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff f8f8 	bl	8001c20 <ssd1306_DrawPixel>

        if((y == 0) && (x < (SSD1306_WIDTH-1)))
 8002a30:	79bb      	ldrb	r3, [r7, #6]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d106      	bne.n	8002a44 <ssd1306_TestBorder+0x34>
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	2b7e      	cmp	r3, #126	@ 0x7e
 8002a3a:	d803      	bhi.n	8002a44 <ssd1306_TestBorder+0x34>
            x++;
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	71fb      	strb	r3, [r7, #7]
 8002a42:	e016      	b.n	8002a72 <ssd1306_TestBorder+0x62>
        else if((x == (SSD1306_WIDTH-1)) && (y < (SSD1306_HEIGHT-1)))
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a48:	d106      	bne.n	8002a58 <ssd1306_TestBorder+0x48>
 8002a4a:	79bb      	ldrb	r3, [r7, #6]
 8002a4c:	2b3e      	cmp	r3, #62	@ 0x3e
 8002a4e:	d803      	bhi.n	8002a58 <ssd1306_TestBorder+0x48>
            y++;
 8002a50:	79bb      	ldrb	r3, [r7, #6]
 8002a52:	3301      	adds	r3, #1
 8002a54:	71bb      	strb	r3, [r7, #6]
 8002a56:	e00c      	b.n	8002a72 <ssd1306_TestBorder+0x62>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 8002a58:	79bb      	ldrb	r3, [r7, #6]
 8002a5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002a5c:	d106      	bne.n	8002a6c <ssd1306_TestBorder+0x5c>
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <ssd1306_TestBorder+0x5c>
            x--;
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	71fb      	strb	r3, [r7, #7]
 8002a6a:	e002      	b.n	8002a72 <ssd1306_TestBorder+0x62>
        else
            y--;
 8002a6c:	79bb      	ldrb	r3, [r7, #6]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	71bb      	strb	r3, [r7, #6]

        ssd1306_DrawPixel(x, y, White);
 8002a72:	79b9      	ldrb	r1, [r7, #6]
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	2201      	movs	r2, #1
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff f8d1 	bl	8001c20 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 8002a7e:	f7ff f8a7 	bl	8001bd0 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8002a82:	2005      	movs	r0, #5
 8002a84:	f000 fe7c 	bl	8003780 <HAL_Delay>
    } while(x > 0 || y > 0);
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1ca      	bne.n	8002a24 <ssd1306_TestBorder+0x14>
 8002a8e:	79bb      	ldrb	r3, [r7, #6]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1c7      	bne.n	8002a24 <ssd1306_TestBorder+0x14>
   
    HAL_Delay(1000);
 8002a94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a98:	f000 fe72 	bl	8003780 <HAL_Delay>
}
 8002a9c:	bf00      	nop
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <ssd1306_TestFonts1>:

void ssd1306_TestFonts1() {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af02      	add	r7, sp, #8
    uint8_t y = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f7ff f876 	bl	8001ba0 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_SetCursor(2, y);
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	2002      	movs	r0, #2
 8002aba:	f7ff f9bd 	bl	8001e38 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 8002abe:	4b1d      	ldr	r3, [pc, #116]	@ (8002b34 <ssd1306_TestFonts1+0x90>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	9200      	str	r2, [sp, #0]
 8002ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ac6:	481c      	ldr	r0, [pc, #112]	@ (8002b38 <ssd1306_TestFonts1+0x94>)
 8002ac8:	f7ff f990 	bl	8001dec <ssd1306_WriteString>
    y += 26;
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	331a      	adds	r3, #26
 8002ad0:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	2002      	movs	r0, #2
 8002ad8:	f7ff f9ae 	bl	8001e38 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 8002adc:	4b17      	ldr	r3, [pc, #92]	@ (8002b3c <ssd1306_TestFonts1+0x98>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	9200      	str	r2, [sp, #0]
 8002ae2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ae4:	4816      	ldr	r0, [pc, #88]	@ (8002b40 <ssd1306_TestFonts1+0x9c>)
 8002ae6:	f7ff f981 	bl	8001dec <ssd1306_WriteString>
    y += 18;
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	3312      	adds	r3, #18
 8002aee:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	4619      	mov	r1, r3
 8002af4:	2002      	movs	r0, #2
 8002af6:	f7ff f99f 	bl	8001e38 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 8002afa:	4b12      	ldr	r3, [pc, #72]	@ (8002b44 <ssd1306_TestFonts1+0xa0>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	9200      	str	r2, [sp, #0]
 8002b00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b02:	4811      	ldr	r0, [pc, #68]	@ (8002b48 <ssd1306_TestFonts1+0xa4>)
 8002b04:	f7ff f972 	bl	8001dec <ssd1306_WriteString>
    y += 10;
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	330a      	adds	r3, #10
 8002b0c:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	4619      	mov	r1, r3
 8002b12:	2002      	movs	r0, #2
 8002b14:	f7ff f990 	bl	8001e38 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 8002b18:	4b0c      	ldr	r3, [pc, #48]	@ (8002b4c <ssd1306_TestFonts1+0xa8>)
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	9200      	str	r2, [sp, #0]
 8002b1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b20:	480b      	ldr	r0, [pc, #44]	@ (8002b50 <ssd1306_TestFonts1+0xac>)
 8002b22:	f7ff f963 	bl	8001dec <ssd1306_WriteString>
    #endif

    ssd1306_UpdateScreen();
 8002b26:	f7ff f853 	bl	8001bd0 <ssd1306_UpdateScreen>
}
 8002b2a:	bf00      	nop
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	08013be0 	.word	0x08013be0
 8002b38:	0800ef54 	.word	0x0800ef54
 8002b3c:	08013bd4 	.word	0x08013bd4
 8002b40:	0800ef60 	.word	0x0800ef60
 8002b44:	08013bc8 	.word	0x08013bc8
 8002b48:	0800ef6c 	.word	0x0800ef6c
 8002b4c:	08013bbc 	.word	0x08013bbc
 8002b50:	0800ef78 	.word	0x0800ef78

08002b54 <ssd1306_TestFonts2>:

/*
 * This test shows how an 128x64 px OLED can replace a 0802 LCD.
 */
void ssd1306_TestFonts2() {
 8002b54:	b590      	push	{r4, r7, lr}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_16x24
    uint8_t x1, y1, x2, y2;

    ssd1306_Fill(Black);
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f7ff f820 	bl	8001ba0 <ssd1306_Fill>

    ssd1306_SetCursor(0, 4);
 8002b60:	2104      	movs	r1, #4
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7ff f968 	bl	8001e38 <ssd1306_SetCursor>
    ssd1306_WriteString("18.092.5", Font_16x24, White);
 8002b68:	4b14      	ldr	r3, [pc, #80]	@ (8002bbc <ssd1306_TestFonts2+0x68>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	9200      	str	r2, [sp, #0]
 8002b6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b70:	4813      	ldr	r0, [pc, #76]	@ (8002bc0 <ssd1306_TestFonts2+0x6c>)
 8002b72:	f7ff f93b 	bl	8001dec <ssd1306_WriteString>
    ssd1306_SetCursor(0, 4+24+8);
 8002b76:	2124      	movs	r1, #36	@ 0x24
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7ff f95d 	bl	8001e38 <ssd1306_SetCursor>
    ssd1306_WriteString("RIT+1000", Font_16x24, White);
 8002b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8002bbc <ssd1306_TestFonts2+0x68>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	9200      	str	r2, [sp, #0]
 8002b84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b86:	480f      	ldr	r0, [pc, #60]	@ (8002bc4 <ssd1306_TestFonts2+0x70>)
 8002b88:	f7ff f930 	bl	8001dec <ssd1306_WriteString>

    // underline
    x1 = 6*16;
 8002b8c:	2360      	movs	r3, #96	@ 0x60
 8002b8e:	71fb      	strb	r3, [r7, #7]
    y1 = 4+24+8+24;
 8002b90:	233c      	movs	r3, #60	@ 0x3c
 8002b92:	71bb      	strb	r3, [r7, #6]
    x2 = x1+16;
 8002b94:	79fb      	ldrb	r3, [r7, #7]
 8002b96:	3310      	adds	r3, #16
 8002b98:	717b      	strb	r3, [r7, #5]
    y2 = y1+2;
 8002b9a:	79bb      	ldrb	r3, [r7, #6]
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	713b      	strb	r3, [r7, #4]
    ssd1306_FillRectangle(x1, y1, x2, y2, White);
 8002ba0:	793b      	ldrb	r3, [r7, #4]
 8002ba2:	797a      	ldrb	r2, [r7, #5]
 8002ba4:	79b9      	ldrb	r1, [r7, #6]
 8002ba6:	79f8      	ldrb	r0, [r7, #7]
 8002ba8:	2401      	movs	r4, #1
 8002baa:	9400      	str	r4, [sp, #0]
 8002bac:	f7ff fd99 	bl	80026e2 <ssd1306_FillRectangle>

    ssd1306_UpdateScreen();
 8002bb0:	f7ff f80e 	bl	8001bd0 <ssd1306_UpdateScreen>
#endif
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd90      	pop	{r4, r7, pc}
 8002bbc:	08013bec 	.word	0x08013bec
 8002bc0:	0800ef84 	.word	0x0800ef84
 8002bc4:	0800ef90 	.word	0x0800ef90

08002bc8 <ssd1306_TestFonts3>:

/*
 * Test of proportional (non-monospaced) font.
 */
void ssd1306_TestFonts3() {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7fe ffe6 	bl	8001ba0 <ssd1306_Fill>
#ifdef SSD1306_INCLUDE_FONT_16x15
    ssd1306_SetCursor(4, 4);
 8002bd4:	2104      	movs	r1, #4
 8002bd6:	2004      	movs	r0, #4
 8002bd8:	f7ff f92e 	bl	8001e38 <ssd1306_SetCursor>
    ssd1306_WriteString("Proportional", Font_16x15, White);
 8002bdc:	4b10      	ldr	r3, [pc, #64]	@ (8002c20 <ssd1306_TestFonts3+0x58>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	9200      	str	r2, [sp, #0]
 8002be2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002be4:	480f      	ldr	r0, [pc, #60]	@ (8002c24 <ssd1306_TestFonts3+0x5c>)
 8002be6:	f7ff f901 	bl	8001dec <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
 8002bea:	2118      	movs	r1, #24
 8002bec:	2004      	movs	r0, #4
 8002bee:	f7ff f923 	bl	8001e38 <ssd1306_SetCursor>
    ssd1306_WriteString("text... Sweet!", Font_16x15, White);
 8002bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c20 <ssd1306_TestFonts3+0x58>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	9200      	str	r2, [sp, #0]
 8002bf8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bfa:	480b      	ldr	r0, [pc, #44]	@ (8002c28 <ssd1306_TestFonts3+0x60>)
 8002bfc:	f7ff f8f6 	bl	8001dec <ssd1306_WriteString>
    ssd1306_SetCursor(4, 44);
 8002c00:	212c      	movs	r1, #44	@ 0x2c
 8002c02:	2004      	movs	r0, #4
 8002c04:	f7ff f918 	bl	8001e38 <ssd1306_SetCursor>
    ssd1306_WriteString("3.1415  04:20", Font_16x15, White);
 8002c08:	4b05      	ldr	r3, [pc, #20]	@ (8002c20 <ssd1306_TestFonts3+0x58>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	9200      	str	r2, [sp, #0]
 8002c0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c10:	4806      	ldr	r0, [pc, #24]	@ (8002c2c <ssd1306_TestFonts3+0x64>)
 8002c12:	f7ff f8eb 	bl	8001dec <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
    ssd1306_WriteString("Font not", Font_11x18, White);
    ssd1306_SetCursor(4, 44);
    ssd1306_WriteString("included!", Font_11x18, White);
#endif
    ssd1306_UpdateScreen();
 8002c16:	f7fe ffdb 	bl	8001bd0 <ssd1306_UpdateScreen>
}
 8002c1a:	bf00      	nop
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	08013bf8 	.word	0x08013bf8
 8002c24:	0800ef9c 	.word	0x0800ef9c
 8002c28:	0800efac 	.word	0x0800efac
 8002c2c:	0800efbc 	.word	0x0800efbc

08002c30 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 8002c30:	b5b0      	push	{r4, r5, r7, lr}
 8002c32:	b09a      	sub	sp, #104	@ 0x68
 8002c34:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 8002c36:	2001      	movs	r0, #1
 8002c38:	f7fe ffb2 	bl	8001ba0 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8002c3c:	f000 fd94 	bl	8003768 <HAL_GetTick>
 8002c40:	65b8      	str	r0, [r7, #88]	@ 0x58
    uint32_t end = start;
 8002c42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c44:	657b      	str	r3, [r7, #84]	@ 0x54
    int fps = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    char message[] = "ABCDEFGHIJK";
 8002c4a:	4a45      	ldr	r2, [pc, #276]	@ (8002d60 <ssd1306_TestFPS+0x130>)
 8002c4c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002c50:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1306_SetCursor(2,0);
 8002c56:	2100      	movs	r1, #0
 8002c58:	2002      	movs	r0, #2
 8002c5a:	f7ff f8ed 	bl	8001e38 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 8002c5e:	4b41      	ldr	r3, [pc, #260]	@ (8002d64 <ssd1306_TestFPS+0x134>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	9200      	str	r2, [sp, #0]
 8002c64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c66:	4840      	ldr	r0, [pc, #256]	@ (8002d68 <ssd1306_TestFPS+0x138>)
 8002c68:	f7ff f8c0 	bl	8001dec <ssd1306_WriteString>
    ssd1306_SetCursor(2, 18*2);
 8002c6c:	2124      	movs	r1, #36	@ 0x24
 8002c6e:	2002      	movs	r0, #2
 8002c70:	f7ff f8e2 	bl	8001e38 <ssd1306_SetCursor>
    ssd1306_WriteString("0123456789A", Font_11x18, Black);
 8002c74:	4b3b      	ldr	r3, [pc, #236]	@ (8002d64 <ssd1306_TestFPS+0x134>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	9200      	str	r2, [sp, #0]
 8002c7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c7c:	483b      	ldr	r0, [pc, #236]	@ (8002d6c <ssd1306_TestFPS+0x13c>)
 8002c7e:	f7ff f8b5 	bl	8001dec <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 8002c82:	2112      	movs	r1, #18
 8002c84:	2002      	movs	r0, #2
 8002c86:	f7ff f8d7 	bl	8001e38 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 8002c8a:	4b36      	ldr	r3, [pc, #216]	@ (8002d64 <ssd1306_TestFPS+0x134>)
 8002c8c:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002c90:	2200      	movs	r2, #0
 8002c92:	9200      	str	r2, [sp, #0]
 8002c94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c96:	f7ff f8a9 	bl	8001dec <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8002c9a:	f7fe ff99 	bl	8001bd0 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 8002c9e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002ca2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        memmove(message, message+1, sizeof(message)-2);
 8002ca6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002caa:	3301      	adds	r3, #1
 8002cac:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002cb0:	220a      	movs	r2, #10
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	f00a ff50 	bl	800db58 <memmove>
        message[sizeof(message)-2] = ch;
 8002cb8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002cbc:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

        fps++;
 8002cc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
        end = HAL_GetTick();
 8002cc6:	f000 fd4f 	bl	8003768 <HAL_GetTick>
 8002cca:	6578      	str	r0, [r7, #84]	@ 0x54
    } while((end - start) < 5000);
 8002ccc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002cce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d9d3      	bls.n	8002c82 <ssd1306_TestFPS+0x52>
   
    HAL_Delay(5000);
 8002cda:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002cde:	f000 fd4f 	bl	8003780 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 8002ce2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ce4:	ee07 3a90 	vmov	s15, r3
 8002ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cec:	ee17 0a90 	vmov	r0, s15
 8002cf0:	f7fd fc2a 	bl	8000548 <__aeabi_f2d>
 8002cf4:	4604      	mov	r4, r0
 8002cf6:	460d      	mov	r5, r1
 8002cf8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002cfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fd fc00 	bl	8000504 <__aeabi_ui2d>
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	4b19      	ldr	r3, [pc, #100]	@ (8002d70 <ssd1306_TestFPS+0x140>)
 8002d0a:	f7fd fd9f 	bl	800084c <__aeabi_ddiv>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4620      	mov	r0, r4
 8002d14:	4629      	mov	r1, r5
 8002d16:	f7fd fd99 	bl	800084c <__aeabi_ddiv>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	4610      	mov	r0, r2
 8002d20:	4619      	mov	r1, r3
 8002d22:	f7fd fe7b 	bl	8000a1c <__aeabi_d2iz>
 8002d26:	4603      	mov	r3, r0
 8002d28:	65fb      	str	r3, [r7, #92]	@ 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 8002d2a:	1d38      	adds	r0, r7, #4
 8002d2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d2e:	4a11      	ldr	r2, [pc, #68]	@ (8002d74 <ssd1306_TestFPS+0x144>)
 8002d30:	2140      	movs	r1, #64	@ 0x40
 8002d32:	f00a fedb 	bl	800daec <sniprintf>
   
    ssd1306_Fill(White);
 8002d36:	2001      	movs	r0, #1
 8002d38:	f7fe ff32 	bl	8001ba0 <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 8002d3c:	2102      	movs	r1, #2
 8002d3e:	2002      	movs	r0, #2
 8002d40:	f7ff f87a 	bl	8001e38 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 8002d44:	4b07      	ldr	r3, [pc, #28]	@ (8002d64 <ssd1306_TestFPS+0x134>)
 8002d46:	1d38      	adds	r0, r7, #4
 8002d48:	2200      	movs	r2, #0
 8002d4a:	9200      	str	r2, [sp, #0]
 8002d4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d4e:	f7ff f84d 	bl	8001dec <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8002d52:	f7fe ff3d 	bl	8001bd0 <ssd1306_UpdateScreen>
}
 8002d56:	bf00      	nop
 8002d58:	3760      	adds	r7, #96	@ 0x60
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	0800efec 	.word	0x0800efec
 8002d64:	08013bd4 	.word	0x08013bd4
 8002d68:	0800efcc 	.word	0x0800efcc
 8002d6c:	0800efd8 	.word	0x0800efd8
 8002d70:	408f4000 	.word	0x408f4000
 8002d74:	0800efe4 	.word	0x0800efe4

08002d78 <ssd1306_TestLine>:

void ssd1306_TestLine() {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 8002d7e:	2301      	movs	r3, #1
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	233f      	movs	r3, #63	@ 0x3f
 8002d84:	227f      	movs	r2, #127	@ 0x7f
 8002d86:	2101      	movs	r1, #1
 8002d88:	2001      	movs	r0, #1
 8002d8a:	f7ff f86d 	bl	8001e68 <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 8002d8e:	2301      	movs	r3, #1
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	233f      	movs	r3, #63	@ 0x3f
 8002d94:	2201      	movs	r2, #1
 8002d96:	2101      	movs	r1, #1
 8002d98:	207f      	movs	r0, #127	@ 0x7f
 8002d9a:	f7ff f865 	bl	8001e68 <ssd1306_Line>
  ssd1306_UpdateScreen();
 8002d9e:	f7fe ff17 	bl	8001bd0 <ssd1306_UpdateScreen>
  return;
 8002da2:	bf00      	nop
}
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8002dae:	2300      	movs	r3, #0
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	e028      	b.n	8002e06 <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	461a      	mov	r2, r3
 8002dba:	0092      	lsls	r2, r2, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	b2d8      	uxtb	r0, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	461a      	mov	r2, r3
 8002dca:	0092      	lsls	r2, r2, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	b2d9      	uxtb	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	0092      	lsls	r2, r2, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	461c      	mov	r4, r3
 8002dec:	00a4      	lsls	r4, r4, #2
 8002dee:	4423      	add	r3, r4
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2401      	movs	r4, #1
 8002dfa:	9400      	str	r4, [sp, #0]
 8002dfc:	f7ff fc3a 	bl	8002674 <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3301      	adds	r3, #1
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d9d3      	bls.n	8002db4 <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 8002e0c:	f7fe fee0 	bl	8001bd0 <ssd1306_UpdateScreen>
  return;
 8002e10:	bf00      	nop
}
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd90      	pop	{r4, r7, pc}

08002e18 <ssd1306_TestRectangleFill>:

void ssd1306_TestRectangleFill() {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af02      	add	r7, sp, #8
  ssd1306_FillRectangle(31, 1, 65, 35, White);
 8002e1e:	2301      	movs	r3, #1
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	2323      	movs	r3, #35	@ 0x23
 8002e24:	2241      	movs	r2, #65	@ 0x41
 8002e26:	2101      	movs	r1, #1
 8002e28:	201f      	movs	r0, #31
 8002e2a:	f7ff fc5a 	bl	80026e2 <ssd1306_FillRectangle>
  ssd1306_FillRectangle(10, 45, 70, 60, White);
 8002e2e:	2301      	movs	r3, #1
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	233c      	movs	r3, #60	@ 0x3c
 8002e34:	2246      	movs	r2, #70	@ 0x46
 8002e36:	212d      	movs	r1, #45	@ 0x2d
 8002e38:	200a      	movs	r0, #10
 8002e3a:	f7ff fc52 	bl	80026e2 <ssd1306_FillRectangle>
  ssd1306_FillRectangle(75, 10, 100, 45, White);
 8002e3e:	2301      	movs	r3, #1
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	232d      	movs	r3, #45	@ 0x2d
 8002e44:	2264      	movs	r2, #100	@ 0x64
 8002e46:	210a      	movs	r1, #10
 8002e48:	204b      	movs	r0, #75	@ 0x4b
 8002e4a:	f7ff fc4a 	bl	80026e2 <ssd1306_FillRectangle>
  ssd1306_FillRectangle(55, 30, 80, 55, Black);
 8002e4e:	2300      	movs	r3, #0
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	2337      	movs	r3, #55	@ 0x37
 8002e54:	2250      	movs	r2, #80	@ 0x50
 8002e56:	211e      	movs	r1, #30
 8002e58:	2037      	movs	r0, #55	@ 0x37
 8002e5a:	f7ff fc42 	bl	80026e2 <ssd1306_FillRectangle>
  ssd1306_UpdateScreen();
 8002e5e:	f7fe feb7 	bl	8001bd0 <ssd1306_UpdateScreen>
}
 8002e62:	bf00      	nop
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <ssd1306_TestRectangleInvert>:

void ssd1306_TestRectangleInvert() {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_11x18
  ssd1306_SetCursor(2, 0);
 8002e6e:	2100      	movs	r1, #0
 8002e70:	2002      	movs	r0, #2
 8002e72:	f7fe ffe1 	bl	8001e38 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 8002e76:	4b27      	ldr	r3, [pc, #156]	@ (8002f14 <ssd1306_TestRectangleInvert+0xac>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	9200      	str	r2, [sp, #0]
 8002e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e7e:	4826      	ldr	r0, [pc, #152]	@ (8002f18 <ssd1306_TestRectangleInvert+0xb0>)
 8002e80:	f7fe ffb4 	bl	8001dec <ssd1306_WriteString>
  ssd1306_SetCursor(2, 20);
 8002e84:	2114      	movs	r1, #20
 8002e86:	2002      	movs	r0, #2
 8002e88:	f7fe ffd6 	bl	8001e38 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 8002e8c:	4b21      	ldr	r3, [pc, #132]	@ (8002f14 <ssd1306_TestRectangleInvert+0xac>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	9200      	str	r2, [sp, #0]
 8002e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e94:	4821      	ldr	r0, [pc, #132]	@ (8002f1c <ssd1306_TestRectangleInvert+0xb4>)
 8002e96:	f7fe ffa9 	bl	8001dec <ssd1306_WriteString>
  ssd1306_SetCursor(2, 40);
 8002e9a:	2128      	movs	r1, #40	@ 0x28
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	f7fe ffcb 	bl	8001e38 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 8002ea2:	4b1c      	ldr	r3, [pc, #112]	@ (8002f14 <ssd1306_TestRectangleInvert+0xac>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	9200      	str	r2, [sp, #0]
 8002ea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eaa:	481d      	ldr	r0, [pc, #116]	@ (8002f20 <ssd1306_TestRectangleInvert+0xb8>)
 8002eac:	f7fe ff9e 	bl	8001dec <ssd1306_WriteString>
  ssd1306_SetCursor(66, 0);
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	2042      	movs	r0, #66	@ 0x42
 8002eb4:	f7fe ffc0 	bl	8001e38 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 8002eb8:	4b16      	ldr	r3, [pc, #88]	@ (8002f14 <ssd1306_TestRectangleInvert+0xac>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	9200      	str	r2, [sp, #0]
 8002ebe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ec0:	4817      	ldr	r0, [pc, #92]	@ (8002f20 <ssd1306_TestRectangleInvert+0xb8>)
 8002ec2:	f7fe ff93 	bl	8001dec <ssd1306_WriteString>
  ssd1306_SetCursor(66, 20);
 8002ec6:	2114      	movs	r1, #20
 8002ec8:	2042      	movs	r0, #66	@ 0x42
 8002eca:	f7fe ffb5 	bl	8001e38 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 8002ece:	4b11      	ldr	r3, [pc, #68]	@ (8002f14 <ssd1306_TestRectangleInvert+0xac>)
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	9200      	str	r2, [sp, #0]
 8002ed4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ed6:	4811      	ldr	r0, [pc, #68]	@ (8002f1c <ssd1306_TestRectangleInvert+0xb4>)
 8002ed8:	f7fe ff88 	bl	8001dec <ssd1306_WriteString>
  ssd1306_SetCursor(66, 40);
 8002edc:	2128      	movs	r1, #40	@ 0x28
 8002ede:	2042      	movs	r0, #66	@ 0x42
 8002ee0:	f7fe ffaa 	bl	8001e38 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <ssd1306_TestRectangleInvert+0xac>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	9200      	str	r2, [sp, #0]
 8002eea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eec:	480a      	ldr	r0, [pc, #40]	@ (8002f18 <ssd1306_TestRectangleInvert+0xb0>)
 8002eee:	f7fe ff7d 	bl	8001dec <ssd1306_WriteString>
#else
  ssd1306_FillCircle(32, 32, 20, White);
  ssd1306_FillCircle(96, 32, 20, White);
#endif
  ssd1306_InvertRectangle(0,0,63,63);
 8002ef2:	233f      	movs	r3, #63	@ 0x3f
 8002ef4:	223f      	movs	r2, #63	@ 0x3f
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	2000      	movs	r0, #0
 8002efa:	f7ff fc41 	bl	8002780 <ssd1306_InvertRectangle>
  /* Test rectangle lies on one 8px page */
  ssd1306_InvertRectangle(2,58,125,60);
 8002efe:	233c      	movs	r3, #60	@ 0x3c
 8002f00:	227d      	movs	r2, #125	@ 0x7d
 8002f02:	213a      	movs	r1, #58	@ 0x3a
 8002f04:	2002      	movs	r0, #2
 8002f06:	f7ff fc3b 	bl	8002780 <ssd1306_InvertRectangle>
  ssd1306_UpdateScreen();
 8002f0a:	f7fe fe61 	bl	8001bd0 <ssd1306_UpdateScreen>
}
 8002f0e:	bf00      	nop
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	08013bd4 	.word	0x08013bd4
 8002f18:	0800eff8 	.word	0x0800eff8
 8002f1c:	0800f000 	.word	0x0800f000
 8002f20:	0800f004 	.word	0x0800f004

08002f24 <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	e010      	b.n	8002f52 <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20*delta+30, 15, 10, White);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	461a      	mov	r2, r3
 8002f36:	0092      	lsls	r2, r2, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	331e      	adds	r3, #30
 8002f40:	b2d8      	uxtb	r0, r3
 8002f42:	2301      	movs	r3, #1
 8002f44:	220a      	movs	r2, #10
 8002f46:	210f      	movs	r1, #15
 8002f48:	f7ff fa9a 	bl	8002480 <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d9eb      	bls.n	8002f30 <ssd1306_TestCircle+0xc>
  }

  for(delta = 0; delta < 5; delta ++) {
 8002f58:	2300      	movs	r3, #0
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	e011      	b.n	8002f82 <ssd1306_TestCircle+0x5e>
    ssd1306_FillCircle(23*delta+15, 40, 10, White);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	461a      	mov	r2, r3
 8002f64:	0052      	lsls	r2, r2, #1
 8002f66:	441a      	add	r2, r3
 8002f68:	00d2      	lsls	r2, r2, #3
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	330f      	adds	r3, #15
 8002f70:	b2d8      	uxtb	r0, r3
 8002f72:	2301      	movs	r3, #1
 8002f74:	220a      	movs	r2, #10
 8002f76:	2128      	movs	r1, #40	@ 0x28
 8002f78:	f7ff fb09 	bl	800258e <ssd1306_FillCircle>
  for(delta = 0; delta < 5; delta ++) {
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	607b      	str	r3, [r7, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	d9ea      	bls.n	8002f5e <ssd1306_TestCircle+0x3a>
  }

  ssd1306_UpdateScreen();
 8002f88:	f7fe fe22 	bl	8001bd0 <ssd1306_UpdateScreen>
  return;
 8002f8c:	bf00      	nop
}
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <ssd1306_TestArc>:

void ssd1306_TestArc() {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2314      	movs	r3, #20
 8002fa6:	221e      	movs	r2, #30
 8002fa8:	211e      	movs	r1, #30
 8002faa:	201e      	movs	r0, #30
 8002fac:	f7ff f840 	bl	8002030 <ssd1306_DrawArc>
  ssd1306_DrawArcWithRadiusLine(80, 55, 10, 30, 270, White);
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	9301      	str	r3, [sp, #4]
 8002fb4:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	231e      	movs	r3, #30
 8002fbc:	220a      	movs	r2, #10
 8002fbe:	2137      	movs	r1, #55	@ 0x37
 8002fc0:	2050      	movs	r0, #80	@ 0x50
 8002fc2:	f7ff f91d 	bl	8002200 <ssd1306_DrawArcWithRadiusLine>
  ssd1306_UpdateScreen();
 8002fc6:	f7fe fe03 	bl	8001bd0 <ssd1306_UpdateScreen>
  return;
 8002fca:	bf00      	nop
}
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 8002fd6:	4b08      	ldr	r3, [pc, #32]	@ (8002ff8 <ssd1306_TestPolyline+0x28>)
 8002fd8:	463c      	mov	r4, r7
 8002fda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fdc:	c407      	stmia	r4!, {r0, r1, r2}
 8002fde:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 8002fe0:	463b      	mov	r3, r7
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	2107      	movs	r1, #7
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe ffaa 	bl	8001f40 <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 8002fec:	f7fe fdf0 	bl	8001bd0 <ssd1306_UpdateScreen>
  return;
 8002ff0:	bf00      	nop
}
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd90      	pop	{r4, r7, pc}
 8002ff8:	0800f00c 	.word	0x0800f00c

08002ffc <ssd1306_TestDrawBitmap>:

void ssd1306_TestDrawBitmap()
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 8003002:	2001      	movs	r0, #1
 8003004:	f7fe fdcc 	bl	8001ba0 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
 8003008:	2300      	movs	r3, #0
 800300a:	9301      	str	r3, [sp, #4]
 800300c:	2340      	movs	r3, #64	@ 0x40
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	2380      	movs	r3, #128	@ 0x80
 8003012:	4a18      	ldr	r2, [pc, #96]	@ (8003074 <ssd1306_TestDrawBitmap+0x78>)
 8003014:	2100      	movs	r1, #0
 8003016:	2000      	movs	r0, #0
 8003018:	f7ff fc6e 	bl	80028f8 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 800301c:	f7fe fdd8 	bl	8001bd0 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 8003020:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003024:	f000 fbac 	bl	8003780 <HAL_Delay>
    ssd1306_Fill(Black);
 8003028:	2000      	movs	r0, #0
 800302a:	f7fe fdb9 	bl	8001ba0 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 800302e:	2301      	movs	r3, #1
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	2340      	movs	r3, #64	@ 0x40
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	2340      	movs	r3, #64	@ 0x40
 8003038:	4a0f      	ldr	r2, [pc, #60]	@ (8003078 <ssd1306_TestDrawBitmap+0x7c>)
 800303a:	2100      	movs	r1, #0
 800303c:	2020      	movs	r0, #32
 800303e:	f7ff fc5b 	bl	80028f8 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8003042:	f7fe fdc5 	bl	8001bd0 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 8003046:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800304a:	f000 fb99 	bl	8003780 <HAL_Delay>
    ssd1306_Fill(White);
 800304e:	2001      	movs	r0, #1
 8003050:	f7fe fda6 	bl	8001ba0 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
 8003054:	2300      	movs	r3, #0
 8003056:	9301      	str	r3, [sp, #4]
 8003058:	2340      	movs	r3, #64	@ 0x40
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	2340      	movs	r3, #64	@ 0x40
 800305e:	4a06      	ldr	r2, [pc, #24]	@ (8003078 <ssd1306_TestDrawBitmap+0x7c>)
 8003060:	2100      	movs	r1, #0
 8003062:	2020      	movs	r0, #32
 8003064:	f7ff fc48 	bl	80028f8 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8003068:	f7fe fdb2 	bl	8001bd0 <ssd1306_UpdateScreen>
}
 800306c:	bf00      	nop
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	08013c14 	.word	0x08013c14
 8003078:	08014014 	.word	0x08014014

0800307c <ssd1306_TestAll>:

void ssd1306_TestAll() {
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8003080:	f7fe fd24 	bl	8001acc <ssd1306_Init>

    ssd1306_TestFPS();
 8003084:	f7ff fdd4 	bl	8002c30 <ssd1306_TestFPS>
    HAL_Delay(3000);
 8003088:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800308c:	f000 fb78 	bl	8003780 <HAL_Delay>
    ssd1306_TestBorder();
 8003090:	f7ff fcbe 	bl	8002a10 <ssd1306_TestBorder>
    ssd1306_TestFonts1();
 8003094:	f7ff fd06 	bl	8002aa4 <ssd1306_TestFonts1>
    HAL_Delay(3000);
 8003098:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800309c:	f000 fb70 	bl	8003780 <HAL_Delay>
    ssd1306_TestFonts2();
 80030a0:	f7ff fd58 	bl	8002b54 <ssd1306_TestFonts2>
    HAL_Delay(3000);
 80030a4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80030a8:	f000 fb6a 	bl	8003780 <HAL_Delay>
    ssd1306_TestFonts3();
 80030ac:	f7ff fd8c 	bl	8002bc8 <ssd1306_TestFonts3>
    HAL_Delay(3000);
 80030b0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80030b4:	f000 fb64 	bl	8003780 <HAL_Delay>
    ssd1306_Fill(Black);
 80030b8:	2000      	movs	r0, #0
 80030ba:	f7fe fd71 	bl	8001ba0 <ssd1306_Fill>
    ssd1306_TestRectangle();
 80030be:	f7ff fe73 	bl	8002da8 <ssd1306_TestRectangle>
    ssd1306_TestLine();
 80030c2:	f7ff fe59 	bl	8002d78 <ssd1306_TestLine>
    HAL_Delay(3000);
 80030c6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80030ca:	f000 fb59 	bl	8003780 <HAL_Delay>
    ssd1306_Fill(Black);
 80030ce:	2000      	movs	r0, #0
 80030d0:	f7fe fd66 	bl	8001ba0 <ssd1306_Fill>
    ssd1306_TestRectangleFill();
 80030d4:	f7ff fea0 	bl	8002e18 <ssd1306_TestRectangleFill>
    HAL_Delay(3000);
 80030d8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80030dc:	f000 fb50 	bl	8003780 <HAL_Delay>
    ssd1306_Fill(Black);
 80030e0:	2000      	movs	r0, #0
 80030e2:	f7fe fd5d 	bl	8001ba0 <ssd1306_Fill>
    ssd1306_TestRectangleInvert();
 80030e6:	f7ff febf 	bl	8002e68 <ssd1306_TestRectangleInvert>
    HAL_Delay(3000);
 80030ea:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80030ee:	f000 fb47 	bl	8003780 <HAL_Delay>
    ssd1306_Fill(Black);
 80030f2:	2000      	movs	r0, #0
 80030f4:	f7fe fd54 	bl	8001ba0 <ssd1306_Fill>
    ssd1306_TestPolyline();
 80030f8:	f7ff ff6a 	bl	8002fd0 <ssd1306_TestPolyline>
    HAL_Delay(3000);
 80030fc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003100:	f000 fb3e 	bl	8003780 <HAL_Delay>
    ssd1306_Fill(Black);
 8003104:	2000      	movs	r0, #0
 8003106:	f7fe fd4b 	bl	8001ba0 <ssd1306_Fill>
    ssd1306_TestArc();
 800310a:	f7ff ff43 	bl	8002f94 <ssd1306_TestArc>
    HAL_Delay(3000);
 800310e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003112:	f000 fb35 	bl	8003780 <HAL_Delay>
    ssd1306_Fill(Black);
 8003116:	2000      	movs	r0, #0
 8003118:	f7fe fd42 	bl	8001ba0 <ssd1306_Fill>
    ssd1306_TestCircle();
 800311c:	f7ff ff02 	bl	8002f24 <ssd1306_TestCircle>
    HAL_Delay(3000);
 8003120:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003124:	f000 fb2c 	bl	8003780 <HAL_Delay>
    ssd1306_TestDrawBitmap();
 8003128:	f7ff ff68 	bl	8002ffc <ssd1306_TestDrawBitmap>
    HAL_Delay(3000);
 800312c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8003130:	f000 fb26 	bl	8003780 <HAL_Delay>
}
 8003134:	bf00      	nop
 8003136:	bd80      	pop	{r7, pc}

08003138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]
 8003142:	4b10      	ldr	r3, [pc, #64]	@ (8003184 <HAL_MspInit+0x4c>)
 8003144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003146:	4a0f      	ldr	r2, [pc, #60]	@ (8003184 <HAL_MspInit+0x4c>)
 8003148:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800314c:	6453      	str	r3, [r2, #68]	@ 0x44
 800314e:	4b0d      	ldr	r3, [pc, #52]	@ (8003184 <HAL_MspInit+0x4c>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003156:	607b      	str	r3, [r7, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	603b      	str	r3, [r7, #0]
 800315e:	4b09      	ldr	r3, [pc, #36]	@ (8003184 <HAL_MspInit+0x4c>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	4a08      	ldr	r2, [pc, #32]	@ (8003184 <HAL_MspInit+0x4c>)
 8003164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003168:	6413      	str	r3, [r2, #64]	@ 0x40
 800316a:	4b06      	ldr	r3, [pc, #24]	@ (8003184 <HAL_MspInit+0x4c>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800

08003188 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08a      	sub	sp, #40	@ 0x28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003190:	f107 0314 	add.w	r3, r7, #20
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a32      	ldr	r2, [pc, #200]	@ (8003270 <HAL_ADC_MspInit+0xe8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d15e      	bne.n	8003268 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	4b31      	ldr	r3, [pc, #196]	@ (8003274 <HAL_ADC_MspInit+0xec>)
 80031b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b2:	4a30      	ldr	r2, [pc, #192]	@ (8003274 <HAL_ADC_MspInit+0xec>)
 80031b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ba:	4b2e      	ldr	r3, [pc, #184]	@ (8003274 <HAL_ADC_MspInit+0xec>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003274 <HAL_ADC_MspInit+0xec>)
 80031cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ce:	4a29      	ldr	r2, [pc, #164]	@ (8003274 <HAL_ADC_MspInit+0xec>)
 80031d0:	f043 0301 	orr.w	r3, r3, #1
 80031d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031d6:	4b27      	ldr	r3, [pc, #156]	@ (8003274 <HAL_ADC_MspInit+0xec>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80031e2:	23ff      	movs	r3, #255	@ 0xff
 80031e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031e6:	2303      	movs	r3, #3
 80031e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ee:	f107 0314 	add.w	r3, r7, #20
 80031f2:	4619      	mov	r1, r3
 80031f4:	4820      	ldr	r0, [pc, #128]	@ (8003278 <HAL_ADC_MspInit+0xf0>)
 80031f6:	f001 fcb9 	bl	8004b6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80031fa:	4b20      	ldr	r3, [pc, #128]	@ (800327c <HAL_ADC_MspInit+0xf4>)
 80031fc:	4a20      	ldr	r2, [pc, #128]	@ (8003280 <HAL_ADC_MspInit+0xf8>)
 80031fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003200:	4b1e      	ldr	r3, [pc, #120]	@ (800327c <HAL_ADC_MspInit+0xf4>)
 8003202:	2200      	movs	r2, #0
 8003204:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003206:	4b1d      	ldr	r3, [pc, #116]	@ (800327c <HAL_ADC_MspInit+0xf4>)
 8003208:	2200      	movs	r2, #0
 800320a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800320c:	4b1b      	ldr	r3, [pc, #108]	@ (800327c <HAL_ADC_MspInit+0xf4>)
 800320e:	2200      	movs	r2, #0
 8003210:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003212:	4b1a      	ldr	r3, [pc, #104]	@ (800327c <HAL_ADC_MspInit+0xf4>)
 8003214:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003218:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800321a:	4b18      	ldr	r3, [pc, #96]	@ (800327c <HAL_ADC_MspInit+0xf4>)
 800321c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003220:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003222:	4b16      	ldr	r3, [pc, #88]	@ (800327c <HAL_ADC_MspInit+0xf4>)
 8003224:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003228:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800322a:	4b14      	ldr	r3, [pc, #80]	@ (800327c <HAL_ADC_MspInit+0xf4>)
 800322c:	2200      	movs	r2, #0
 800322e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003230:	4b12      	ldr	r3, [pc, #72]	@ (800327c <HAL_ADC_MspInit+0xf4>)
 8003232:	2200      	movs	r2, #0
 8003234:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003236:	4b11      	ldr	r3, [pc, #68]	@ (800327c <HAL_ADC_MspInit+0xf4>)
 8003238:	2200      	movs	r2, #0
 800323a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800323c:	480f      	ldr	r0, [pc, #60]	@ (800327c <HAL_ADC_MspInit+0xf4>)
 800323e:	f001 f8f5 	bl	800442c <HAL_DMA_Init>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8003248:	f7fe f9aa 	bl	80015a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a0b      	ldr	r2, [pc, #44]	@ (800327c <HAL_ADC_MspInit+0xf4>)
 8003250:	639a      	str	r2, [r3, #56]	@ 0x38
 8003252:	4a0a      	ldr	r2, [pc, #40]	@ (800327c <HAL_ADC_MspInit+0xf4>)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003258:	2200      	movs	r2, #0
 800325a:	2100      	movs	r1, #0
 800325c:	2012      	movs	r0, #18
 800325e:	f001 f8ae 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003262:	2012      	movs	r0, #18
 8003264:	f001 f8c7 	bl	80043f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003268:	bf00      	nop
 800326a:	3728      	adds	r7, #40	@ 0x28
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40012000 	.word	0x40012000
 8003274:	40023800 	.word	0x40023800
 8003278:	40020000 	.word	0x40020000
 800327c:	200001e4 	.word	0x200001e4
 8003280:	40026410 	.word	0x40026410

08003284 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	@ 0x28
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328c:	f107 0314 	add.w	r3, r7, #20
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a4f      	ldr	r2, [pc, #316]	@ (80033e0 <HAL_I2C_MspInit+0x15c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	f040 8097 	bne.w	80033d6 <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a8:	2300      	movs	r3, #0
 80032aa:	613b      	str	r3, [r7, #16]
 80032ac:	4b4d      	ldr	r3, [pc, #308]	@ (80033e4 <HAL_I2C_MspInit+0x160>)
 80032ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b0:	4a4c      	ldr	r2, [pc, #304]	@ (80033e4 <HAL_I2C_MspInit+0x160>)
 80032b2:	f043 0302 	orr.w	r3, r3, #2
 80032b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80032b8:	4b4a      	ldr	r3, [pc, #296]	@ (80033e4 <HAL_I2C_MspInit+0x160>)
 80032ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032bc:	f003 0302 	and.w	r3, r3, #2
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032c4:	23c0      	movs	r3, #192	@ 0xc0
 80032c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032c8:	2312      	movs	r3, #18
 80032ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d0:	2303      	movs	r3, #3
 80032d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032d4:	2304      	movs	r3, #4
 80032d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d8:	f107 0314 	add.w	r3, r7, #20
 80032dc:	4619      	mov	r1, r3
 80032de:	4842      	ldr	r0, [pc, #264]	@ (80033e8 <HAL_I2C_MspInit+0x164>)
 80032e0:	f001 fc44 	bl	8004b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	4b3e      	ldr	r3, [pc, #248]	@ (80033e4 <HAL_I2C_MspInit+0x160>)
 80032ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ec:	4a3d      	ldr	r2, [pc, #244]	@ (80033e4 <HAL_I2C_MspInit+0x160>)
 80032ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80032f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80032f4:	4b3b      	ldr	r3, [pc, #236]	@ (80033e4 <HAL_I2C_MspInit+0x160>)
 80032f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032fc:	60fb      	str	r3, [r7, #12]
 80032fe:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003300:	4b3a      	ldr	r3, [pc, #232]	@ (80033ec <HAL_I2C_MspInit+0x168>)
 8003302:	4a3b      	ldr	r2, [pc, #236]	@ (80033f0 <HAL_I2C_MspInit+0x16c>)
 8003304:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003306:	4b39      	ldr	r3, [pc, #228]	@ (80033ec <HAL_I2C_MspInit+0x168>)
 8003308:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800330c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800330e:	4b37      	ldr	r3, [pc, #220]	@ (80033ec <HAL_I2C_MspInit+0x168>)
 8003310:	2200      	movs	r2, #0
 8003312:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003314:	4b35      	ldr	r3, [pc, #212]	@ (80033ec <HAL_I2C_MspInit+0x168>)
 8003316:	2200      	movs	r2, #0
 8003318:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800331a:	4b34      	ldr	r3, [pc, #208]	@ (80033ec <HAL_I2C_MspInit+0x168>)
 800331c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003320:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003322:	4b32      	ldr	r3, [pc, #200]	@ (80033ec <HAL_I2C_MspInit+0x168>)
 8003324:	2200      	movs	r2, #0
 8003326:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003328:	4b30      	ldr	r3, [pc, #192]	@ (80033ec <HAL_I2C_MspInit+0x168>)
 800332a:	2200      	movs	r2, #0
 800332c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800332e:	4b2f      	ldr	r3, [pc, #188]	@ (80033ec <HAL_I2C_MspInit+0x168>)
 8003330:	2200      	movs	r2, #0
 8003332:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003334:	4b2d      	ldr	r3, [pc, #180]	@ (80033ec <HAL_I2C_MspInit+0x168>)
 8003336:	2200      	movs	r2, #0
 8003338:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800333a:	4b2c      	ldr	r3, [pc, #176]	@ (80033ec <HAL_I2C_MspInit+0x168>)
 800333c:	2200      	movs	r2, #0
 800333e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003340:	482a      	ldr	r0, [pc, #168]	@ (80033ec <HAL_I2C_MspInit+0x168>)
 8003342:	f001 f873 	bl	800442c <HAL_DMA_Init>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 800334c:	f7fe f928 	bl	80015a0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a26      	ldr	r2, [pc, #152]	@ (80033ec <HAL_I2C_MspInit+0x168>)
 8003354:	639a      	str	r2, [r3, #56]	@ 0x38
 8003356:	4a25      	ldr	r2, [pc, #148]	@ (80033ec <HAL_I2C_MspInit+0x168>)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800335c:	4b25      	ldr	r3, [pc, #148]	@ (80033f4 <HAL_I2C_MspInit+0x170>)
 800335e:	4a26      	ldr	r2, [pc, #152]	@ (80033f8 <HAL_I2C_MspInit+0x174>)
 8003360:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8003362:	4b24      	ldr	r3, [pc, #144]	@ (80033f4 <HAL_I2C_MspInit+0x170>)
 8003364:	2200      	movs	r2, #0
 8003366:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003368:	4b22      	ldr	r3, [pc, #136]	@ (80033f4 <HAL_I2C_MspInit+0x170>)
 800336a:	2240      	movs	r2, #64	@ 0x40
 800336c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800336e:	4b21      	ldr	r3, [pc, #132]	@ (80033f4 <HAL_I2C_MspInit+0x170>)
 8003370:	2200      	movs	r2, #0
 8003372:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003374:	4b1f      	ldr	r3, [pc, #124]	@ (80033f4 <HAL_I2C_MspInit+0x170>)
 8003376:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800337a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800337c:	4b1d      	ldr	r3, [pc, #116]	@ (80033f4 <HAL_I2C_MspInit+0x170>)
 800337e:	2200      	movs	r2, #0
 8003380:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003382:	4b1c      	ldr	r3, [pc, #112]	@ (80033f4 <HAL_I2C_MspInit+0x170>)
 8003384:	2200      	movs	r2, #0
 8003386:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003388:	4b1a      	ldr	r3, [pc, #104]	@ (80033f4 <HAL_I2C_MspInit+0x170>)
 800338a:	2200      	movs	r2, #0
 800338c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800338e:	4b19      	ldr	r3, [pc, #100]	@ (80033f4 <HAL_I2C_MspInit+0x170>)
 8003390:	2200      	movs	r2, #0
 8003392:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003394:	4b17      	ldr	r3, [pc, #92]	@ (80033f4 <HAL_I2C_MspInit+0x170>)
 8003396:	2200      	movs	r2, #0
 8003398:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800339a:	4816      	ldr	r0, [pc, #88]	@ (80033f4 <HAL_I2C_MspInit+0x170>)
 800339c:	f001 f846 	bl	800442c <HAL_DMA_Init>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 80033a6:	f7fe f8fb 	bl	80015a0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a11      	ldr	r2, [pc, #68]	@ (80033f4 <HAL_I2C_MspInit+0x170>)
 80033ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80033b0:	4a10      	ldr	r2, [pc, #64]	@ (80033f4 <HAL_I2C_MspInit+0x170>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80033b6:	2200      	movs	r2, #0
 80033b8:	2100      	movs	r1, #0
 80033ba:	201f      	movs	r0, #31
 80033bc:	f000 ffff 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80033c0:	201f      	movs	r0, #31
 80033c2:	f001 f818 	bl	80043f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80033c6:	2200      	movs	r2, #0
 80033c8:	2100      	movs	r1, #0
 80033ca:	2020      	movs	r0, #32
 80033cc:	f000 fff7 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80033d0:	2020      	movs	r0, #32
 80033d2:	f001 f810 	bl	80043f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80033d6:	bf00      	nop
 80033d8:	3728      	adds	r7, #40	@ 0x28
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40005400 	.word	0x40005400
 80033e4:	40023800 	.word	0x40023800
 80033e8:	40020400 	.word	0x40020400
 80033ec:	20000298 	.word	0x20000298
 80033f0:	40026010 	.word	0x40026010
 80033f4:	200002f8 	.word	0x200002f8
 80033f8:	40026028 	.word	0x40026028

080033fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a1a      	ldr	r2, [pc, #104]	@ (8003474 <HAL_TIM_Base_MspInit+0x78>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d12d      	bne.n	800346a <HAL_TIM_Base_MspInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800340e:	2300      	movs	r3, #0
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	4b19      	ldr	r3, [pc, #100]	@ (8003478 <HAL_TIM_Base_MspInit+0x7c>)
 8003414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003416:	4a18      	ldr	r2, [pc, #96]	@ (8003478 <HAL_TIM_Base_MspInit+0x7c>)
 8003418:	f043 0301 	orr.w	r3, r3, #1
 800341c:	6453      	str	r3, [r2, #68]	@ 0x44
 800341e:	4b16      	ldr	r3, [pc, #88]	@ (8003478 <HAL_TIM_Base_MspInit+0x7c>)
 8003420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003422:	f003 0301 	and.w	r3, r3, #1
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800342a:	2200      	movs	r2, #0
 800342c:	2100      	movs	r1, #0
 800342e:	2018      	movs	r0, #24
 8003430:	f000 ffc5 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003434:	2018      	movs	r0, #24
 8003436:	f000 ffde 	bl	80043f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800343a:	2200      	movs	r2, #0
 800343c:	2100      	movs	r1, #0
 800343e:	2019      	movs	r0, #25
 8003440:	f000 ffbd 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003444:	2019      	movs	r0, #25
 8003446:	f000 ffd6 	bl	80043f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800344a:	2200      	movs	r2, #0
 800344c:	2100      	movs	r1, #0
 800344e:	201a      	movs	r0, #26
 8003450:	f000 ffb5 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003454:	201a      	movs	r0, #26
 8003456:	f000 ffce 	bl	80043f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800345a:	2200      	movs	r2, #0
 800345c:	2100      	movs	r1, #0
 800345e:	201b      	movs	r0, #27
 8003460:	f000 ffad 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003464:	201b      	movs	r0, #27
 8003466:	f000 ffc6 	bl	80043f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40010000 	.word	0x40010000
 8003478:	40023800 	.word	0x40023800

0800347c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003480:	bf00      	nop
 8003482:	e7fd      	b.n	8003480 <NMI_Handler+0x4>

08003484 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003488:	bf00      	nop
 800348a:	e7fd      	b.n	8003488 <HardFault_Handler+0x4>

0800348c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003490:	bf00      	nop
 8003492:	e7fd      	b.n	8003490 <MemManage_Handler+0x4>

08003494 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003498:	bf00      	nop
 800349a:	e7fd      	b.n	8003498 <BusFault_Handler+0x4>

0800349c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034a0:	bf00      	nop
 80034a2:	e7fd      	b.n	80034a0 <UsageFault_Handler+0x4>

080034a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034a8:	bf00      	nop
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034b2:	b480      	push	{r7}
 80034b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034b6:	bf00      	nop
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034d2:	f000 f935 	bl	8003740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80034e0:	4802      	ldr	r0, [pc, #8]	@ (80034ec <DMA1_Stream0_IRQHandler+0x10>)
 80034e2:	f001 f8cb 	bl	800467c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20000298 	.word	0x20000298

080034f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80034f4:	4802      	ldr	r0, [pc, #8]	@ (8003500 <DMA1_Stream1_IRQHandler+0x10>)
 80034f6:	f001 f8c1 	bl	800467c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	200002f8 	.word	0x200002f8

08003504 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003508:	4802      	ldr	r0, [pc, #8]	@ (8003514 <ADC_IRQHandler+0x10>)
 800350a:	f000 f9a0 	bl	800384e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	2000019c 	.word	0x2000019c

08003518 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800351c:	4802      	ldr	r0, [pc, #8]	@ (8003528 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800351e:	f005 fdd5 	bl	80090cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000358 	.word	0x20000358

0800352c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003530:	4802      	ldr	r0, [pc, #8]	@ (800353c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003532:	f005 fdcb 	bl	80090cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000358 	.word	0x20000358

08003540 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003544:	4802      	ldr	r0, [pc, #8]	@ (8003550 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003546:	f005 fdc1 	bl	80090cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000358 	.word	0x20000358

08003554 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003558:	4802      	ldr	r0, [pc, #8]	@ (8003564 <TIM1_CC_IRQHandler+0x10>)
 800355a:	f005 fdb7 	bl	80090cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000358 	.word	0x20000358

08003568 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800356c:	4802      	ldr	r0, [pc, #8]	@ (8003578 <I2C1_EV_IRQHandler+0x10>)
 800356e:	f001 ff09 	bl	8005384 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000244 	.word	0x20000244

0800357c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003580:	4802      	ldr	r0, [pc, #8]	@ (800358c <I2C1_ER_IRQHandler+0x10>)
 8003582:	f002 f870 	bl	8005666 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20000244 	.word	0x20000244

08003590 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003594:	4802      	ldr	r0, [pc, #8]	@ (80035a0 <DMA2_Stream0_IRQHandler+0x10>)
 8003596:	f001 f871 	bl	800467c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	200001e4 	.word	0x200001e4

080035a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80035a8:	4802      	ldr	r0, [pc, #8]	@ (80035b4 <OTG_FS_IRQHandler+0x10>)
 80035aa:	f003 ff8b 	bl	80074c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	200012d4 	.word	0x200012d4

080035b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035c0:	4a14      	ldr	r2, [pc, #80]	@ (8003614 <_sbrk+0x5c>)
 80035c2:	4b15      	ldr	r3, [pc, #84]	@ (8003618 <_sbrk+0x60>)
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035cc:	4b13      	ldr	r3, [pc, #76]	@ (800361c <_sbrk+0x64>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d102      	bne.n	80035da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035d4:	4b11      	ldr	r3, [pc, #68]	@ (800361c <_sbrk+0x64>)
 80035d6:	4a12      	ldr	r2, [pc, #72]	@ (8003620 <_sbrk+0x68>)
 80035d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035da:	4b10      	ldr	r3, [pc, #64]	@ (800361c <_sbrk+0x64>)
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4413      	add	r3, r2
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d207      	bcs.n	80035f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035e8:	f00a fad8 	bl	800db9c <__errno>
 80035ec:	4603      	mov	r3, r0
 80035ee:	220c      	movs	r2, #12
 80035f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035f2:	f04f 33ff 	mov.w	r3, #4294967295
 80035f6:	e009      	b.n	800360c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035f8:	4b08      	ldr	r3, [pc, #32]	@ (800361c <_sbrk+0x64>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035fe:	4b07      	ldr	r3, [pc, #28]	@ (800361c <_sbrk+0x64>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4413      	add	r3, r2
 8003606:	4a05      	ldr	r2, [pc, #20]	@ (800361c <_sbrk+0x64>)
 8003608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800360a:	68fb      	ldr	r3, [r7, #12]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20020000 	.word	0x20020000
 8003618:	00000400 	.word	0x00000400
 800361c:	200009e8 	.word	0x200009e8
 8003620:	20001b20 	.word	0x20001b20

08003624 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003628:	4b06      	ldr	r3, [pc, #24]	@ (8003644 <SystemInit+0x20>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362e:	4a05      	ldr	r2, [pc, #20]	@ (8003644 <SystemInit+0x20>)
 8003630:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003634:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003638:	bf00      	nop
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	e000ed00 	.word	0xe000ed00

08003648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003680 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800364c:	f7ff ffea 	bl	8003624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003650:	480c      	ldr	r0, [pc, #48]	@ (8003684 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003652:	490d      	ldr	r1, [pc, #52]	@ (8003688 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003654:	4a0d      	ldr	r2, [pc, #52]	@ (800368c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003658:	e002      	b.n	8003660 <LoopCopyDataInit>

0800365a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800365a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800365c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800365e:	3304      	adds	r3, #4

08003660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003664:	d3f9      	bcc.n	800365a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003666:	4a0a      	ldr	r2, [pc, #40]	@ (8003690 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003668:	4c0a      	ldr	r4, [pc, #40]	@ (8003694 <LoopFillZerobss+0x22>)
  movs r3, #0
 800366a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800366c:	e001      	b.n	8003672 <LoopFillZerobss>

0800366e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800366e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003670:	3204      	adds	r2, #4

08003672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003674:	d3fb      	bcc.n	800366e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003676:	f00a fa97 	bl	800dba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800367a:	f7fd fd01 	bl	8001080 <main>
  bx  lr    
 800367e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003688:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 800368c:	08014648 	.word	0x08014648
  ldr r2, =_sbss
 8003690:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8003694:	20001b20 	.word	0x20001b20

08003698 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003698:	e7fe      	b.n	8003698 <DMA1_Stream2_IRQHandler>
	...

0800369c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036a0:	4b0e      	ldr	r3, [pc, #56]	@ (80036dc <HAL_Init+0x40>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a0d      	ldr	r2, [pc, #52]	@ (80036dc <HAL_Init+0x40>)
 80036a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036ac:	4b0b      	ldr	r3, [pc, #44]	@ (80036dc <HAL_Init+0x40>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a0a      	ldr	r2, [pc, #40]	@ (80036dc <HAL_Init+0x40>)
 80036b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036b8:	4b08      	ldr	r3, [pc, #32]	@ (80036dc <HAL_Init+0x40>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a07      	ldr	r2, [pc, #28]	@ (80036dc <HAL_Init+0x40>)
 80036be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036c4:	2003      	movs	r0, #3
 80036c6:	f000 fe6f 	bl	80043a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ca:	200f      	movs	r0, #15
 80036cc:	f000 f808 	bl	80036e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036d0:	f7ff fd32 	bl	8003138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40023c00 	.word	0x40023c00

080036e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036e8:	4b12      	ldr	r3, [pc, #72]	@ (8003734 <HAL_InitTick+0x54>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	4b12      	ldr	r3, [pc, #72]	@ (8003738 <HAL_InitTick+0x58>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	4619      	mov	r1, r3
 80036f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fe87 	bl	8004412 <HAL_SYSTICK_Config>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e00e      	b.n	800372c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b0f      	cmp	r3, #15
 8003712:	d80a      	bhi.n	800372a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003714:	2200      	movs	r2, #0
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	f04f 30ff 	mov.w	r0, #4294967295
 800371c:	f000 fe4f 	bl	80043be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003720:	4a06      	ldr	r2, [pc, #24]	@ (800373c <HAL_InitTick+0x5c>)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	e000      	b.n	800372c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
}
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	2000002c 	.word	0x2000002c
 8003738:	20000034 	.word	0x20000034
 800373c:	20000030 	.word	0x20000030

08003740 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003744:	4b06      	ldr	r3, [pc, #24]	@ (8003760 <HAL_IncTick+0x20>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	4b06      	ldr	r3, [pc, #24]	@ (8003764 <HAL_IncTick+0x24>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4413      	add	r3, r2
 8003750:	4a04      	ldr	r2, [pc, #16]	@ (8003764 <HAL_IncTick+0x24>)
 8003752:	6013      	str	r3, [r2, #0]
}
 8003754:	bf00      	nop
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	20000034 	.word	0x20000034
 8003764:	200009ec 	.word	0x200009ec

08003768 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  return uwTick;
 800376c:	4b03      	ldr	r3, [pc, #12]	@ (800377c <HAL_GetTick+0x14>)
 800376e:	681b      	ldr	r3, [r3, #0]
}
 8003770:	4618      	mov	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	200009ec 	.word	0x200009ec

08003780 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003788:	f7ff ffee 	bl	8003768 <HAL_GetTick>
 800378c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003798:	d005      	beq.n	80037a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800379a:	4b0a      	ldr	r3, [pc, #40]	@ (80037c4 <HAL_Delay+0x44>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4413      	add	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037a6:	bf00      	nop
 80037a8:	f7ff ffde 	bl	8003768 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d8f7      	bhi.n	80037a8 <HAL_Delay+0x28>
  {
  }
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000034 	.word	0x20000034

080037c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e033      	b.n	8003846 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff fcce 	bl	8003188 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d118      	bne.n	8003838 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800380e:	f023 0302 	bic.w	r3, r3, #2
 8003812:	f043 0202 	orr.w	r2, r3, #2
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fb6c 	bl	8003ef8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	f023 0303 	bic.w	r3, r3, #3
 800382e:	f043 0201 	orr.w	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	641a      	str	r2, [r3, #64]	@ 0x40
 8003836:	e001      	b.n	800383c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003844:	7bfb      	ldrb	r3, [r7, #15]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b086      	sub	sp, #24
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f003 0320 	and.w	r3, r3, #32
 800387c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d049      	beq.n	8003918 <HAL_ADC_IRQHandler+0xca>
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d046      	beq.n	8003918 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	d105      	bne.n	80038a2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d12b      	bne.n	8003908 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d127      	bne.n	8003908 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038be:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d006      	beq.n	80038d4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d119      	bne.n	8003908 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 0220 	bic.w	r2, r2, #32
 80038e2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d105      	bne.n	8003908 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003900:	f043 0201 	orr.w	r2, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7fd fa45 	bl	8000d98 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f06f 0212 	mvn.w	r2, #18
 8003916:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003926:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d057      	beq.n	80039de <HAL_ADC_IRQHandler+0x190>
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d054      	beq.n	80039de <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b00      	cmp	r3, #0
 800393e:	d105      	bne.n	800394c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003944:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d139      	bne.n	80039ce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003960:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003964:	2b00      	cmp	r3, #0
 8003966:	d006      	beq.n	8003976 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003972:	2b00      	cmp	r3, #0
 8003974:	d12b      	bne.n	80039ce <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003980:	2b00      	cmp	r3, #0
 8003982:	d124      	bne.n	80039ce <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800398e:	2b00      	cmp	r3, #0
 8003990:	d11d      	bne.n	80039ce <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003996:	2b00      	cmp	r3, #0
 8003998:	d119      	bne.n	80039ce <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039a8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d105      	bne.n	80039ce <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	f043 0201 	orr.w	r2, r3, #1
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fc10 	bl	80041f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 020c 	mvn.w	r2, #12
 80039dc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ec:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d017      	beq.n	8003a24 <HAL_ADC_IRQHandler+0x1d6>
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d014      	beq.n	8003a24 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d10d      	bne.n	8003a24 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f929 	bl	8003c6c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f06f 0201 	mvn.w	r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a32:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d015      	beq.n	8003a66 <HAL_ADC_IRQHandler+0x218>
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d012      	beq.n	8003a66 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a44:	f043 0202 	orr.w	r2, r3, #2
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0220 	mvn.w	r2, #32
 8003a54:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f912 	bl	8003c80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0220 	mvn.w	r2, #32
 8003a64:	601a      	str	r2, [r3, #0]
  }
}
 8003a66:	bf00      	nop
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <HAL_ADC_Start_DMA+0x22>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e0d0      	b.n	8003c34 <HAL_ADC_Start_DMA+0x1c4>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d018      	beq.n	8003ada <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0201 	orr.w	r2, r2, #1
 8003ab6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ab8:	4b60      	ldr	r3, [pc, #384]	@ (8003c3c <HAL_ADC_Start_DMA+0x1cc>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a60      	ldr	r2, [pc, #384]	@ (8003c40 <HAL_ADC_Start_DMA+0x1d0>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	0c9a      	lsrs	r2, r3, #18
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	005b      	lsls	r3, r3, #1
 8003ac8:	4413      	add	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003acc:	e002      	b.n	8003ad4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f9      	bne.n	8003ace <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ae8:	d107      	bne.n	8003afa <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003af8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	f040 8088 	bne.w	8003c1a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003b12:	f023 0301 	bic.w	r3, r3, #1
 8003b16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b30:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b34:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b48:	d106      	bne.n	8003b58 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4e:	f023 0206 	bic.w	r2, r3, #6
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b56:	e002      	b.n	8003b5e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b66:	4b37      	ldr	r3, [pc, #220]	@ (8003c44 <HAL_ADC_Start_DMA+0x1d4>)
 8003b68:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b6e:	4a36      	ldr	r2, [pc, #216]	@ (8003c48 <HAL_ADC_Start_DMA+0x1d8>)
 8003b70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b76:	4a35      	ldr	r2, [pc, #212]	@ (8003c4c <HAL_ADC_Start_DMA+0x1dc>)
 8003b78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7e:	4a34      	ldr	r2, [pc, #208]	@ (8003c50 <HAL_ADC_Start_DMA+0x1e0>)
 8003b80:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003b8a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003b9a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003baa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	334c      	adds	r3, #76	@ 0x4c
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f000 fce4 	bl	8004588 <HAL_DMA_Start_IT>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10f      	bne.n	8003bf0 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d129      	bne.n	8003c32 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003bec:	609a      	str	r2, [r3, #8]
 8003bee:	e020      	b.n	8003c32 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a17      	ldr	r2, [pc, #92]	@ (8003c54 <HAL_ADC_Start_DMA+0x1e4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d11b      	bne.n	8003c32 <HAL_ADC_Start_DMA+0x1c2>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d114      	bne.n	8003c32 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	e00b      	b.n	8003c32 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1e:	f043 0210 	orr.w	r2, r3, #16
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2a:	f043 0201 	orr.w	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003c32:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3720      	adds	r7, #32
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	2000002c 	.word	0x2000002c
 8003c40:	431bde83 	.word	0x431bde83
 8003c44:	40012300 	.word	0x40012300
 8003c48:	080040f1 	.word	0x080040f1
 8003c4c:	080041ab 	.word	0x080041ab
 8003c50:	080041c7 	.word	0x080041c7
 8003c54:	40012000 	.word	0x40012000

08003c58 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0x1c>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e113      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x244>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2b09      	cmp	r3, #9
 8003cbe:	d925      	bls.n	8003d0c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68d9      	ldr	r1, [r3, #12]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	4613      	mov	r3, r2
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3b1e      	subs	r3, #30
 8003cd6:	2207      	movs	r2, #7
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43da      	mvns	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68d9      	ldr	r1, [r3, #12]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	005b      	lsls	r3, r3, #1
 8003cfc:	4403      	add	r3, r0
 8003cfe:	3b1e      	subs	r3, #30
 8003d00:	409a      	lsls	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	60da      	str	r2, [r3, #12]
 8003d0a:	e022      	b.n	8003d52 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6919      	ldr	r1, [r3, #16]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	4413      	add	r3, r2
 8003d20:	2207      	movs	r2, #7
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	43da      	mvns	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	400a      	ands	r2, r1
 8003d2e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6919      	ldr	r1, [r3, #16]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	4618      	mov	r0, r3
 8003d42:	4603      	mov	r3, r0
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	4403      	add	r3, r0
 8003d48:	409a      	lsls	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	2b06      	cmp	r3, #6
 8003d58:	d824      	bhi.n	8003da4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	3b05      	subs	r3, #5
 8003d6c:	221f      	movs	r2, #31
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43da      	mvns	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	400a      	ands	r2, r1
 8003d7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	4618      	mov	r0, r3
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	3b05      	subs	r3, #5
 8003d96:	fa00 f203 	lsl.w	r2, r0, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003da2:	e04c      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	2b0c      	cmp	r3, #12
 8003daa:	d824      	bhi.n	8003df6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	3b23      	subs	r3, #35	@ 0x23
 8003dbe:	221f      	movs	r2, #31
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	43da      	mvns	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	400a      	ands	r2, r1
 8003dcc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	4618      	mov	r0, r3
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	3b23      	subs	r3, #35	@ 0x23
 8003de8:	fa00 f203 	lsl.w	r2, r0, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003df4:	e023      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	3b41      	subs	r3, #65	@ 0x41
 8003e08:	221f      	movs	r2, #31
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	43da      	mvns	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	400a      	ands	r2, r1
 8003e16:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	4618      	mov	r0, r3
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	3b41      	subs	r3, #65	@ 0x41
 8003e32:	fa00 f203 	lsl.w	r2, r0, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e3e:	4b29      	ldr	r3, [pc, #164]	@ (8003ee4 <HAL_ADC_ConfigChannel+0x250>)
 8003e40:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a28      	ldr	r2, [pc, #160]	@ (8003ee8 <HAL_ADC_ConfigChannel+0x254>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d10f      	bne.n	8003e6c <HAL_ADC_ConfigChannel+0x1d8>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b12      	cmp	r3, #18
 8003e52:	d10b      	bne.n	8003e6c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee8 <HAL_ADC_ConfigChannel+0x254>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d12b      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x23a>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a1c      	ldr	r2, [pc, #112]	@ (8003eec <HAL_ADC_ConfigChannel+0x258>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d003      	beq.n	8003e88 <HAL_ADC_ConfigChannel+0x1f4>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b11      	cmp	r3, #17
 8003e86:	d122      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a11      	ldr	r2, [pc, #68]	@ (8003eec <HAL_ADC_ConfigChannel+0x258>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d111      	bne.n	8003ece <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003eaa:	4b11      	ldr	r3, [pc, #68]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x25c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a11      	ldr	r2, [pc, #68]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x260>)
 8003eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb4:	0c9a      	lsrs	r2, r3, #18
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ec0:	e002      	b.n	8003ec8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f9      	bne.n	8003ec2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	40012300 	.word	0x40012300
 8003ee8:	40012000 	.word	0x40012000
 8003eec:	10000012 	.word	0x10000012
 8003ef0:	2000002c 	.word	0x2000002c
 8003ef4:	431bde83 	.word	0x431bde83

08003ef8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f00:	4b79      	ldr	r3, [pc, #484]	@ (80040e8 <ADC_Init+0x1f0>)
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6859      	ldr	r1, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	021a      	lsls	r2, r3, #8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685a      	ldr	r2, [r3, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003f50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6859      	ldr	r1, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6899      	ldr	r1, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8a:	4a58      	ldr	r2, [pc, #352]	@ (80040ec <ADC_Init+0x1f4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d022      	beq.n	8003fd6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6899      	ldr	r1, [r3, #8]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003fc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6899      	ldr	r1, [r3, #8]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	e00f      	b.n	8003ff6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fe4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ff4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0202 	bic.w	r2, r2, #2
 8004004:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6899      	ldr	r1, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	7e1b      	ldrb	r3, [r3, #24]
 8004010:	005a      	lsls	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01b      	beq.n	800405c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004032:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004042:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6859      	ldr	r1, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404e:	3b01      	subs	r3, #1
 8004050:	035a      	lsls	r2, r3, #13
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	e007      	b.n	800406c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800406a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800407a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	3b01      	subs	r3, #1
 8004088:	051a      	lsls	r2, r3, #20
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80040a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6899      	ldr	r1, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80040ae:	025a      	lsls	r2, r3, #9
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6899      	ldr	r1, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	029a      	lsls	r2, r3, #10
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	609a      	str	r2, [r3, #8]
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	40012300 	.word	0x40012300
 80040ec:	0f000001 	.word	0x0f000001

080040f0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004102:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004106:	2b00      	cmp	r3, #0
 8004108:	d13c      	bne.n	8004184 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d12b      	bne.n	800417c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004128:	2b00      	cmp	r3, #0
 800412a:	d127      	bne.n	800417c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004132:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004136:	2b00      	cmp	r3, #0
 8004138:	d006      	beq.n	8004148 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004144:	2b00      	cmp	r3, #0
 8004146:	d119      	bne.n	800417c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0220 	bic.w	r2, r2, #32
 8004156:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004168:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d105      	bne.n	800417c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004174:	f043 0201 	orr.w	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f7fc fe0b 	bl	8000d98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004182:	e00e      	b.n	80041a2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	2b00      	cmp	r3, #0
 800418e:	d003      	beq.n	8004198 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f7ff fd75 	bl	8003c80 <HAL_ADC_ErrorCallback>
}
 8004196:	e004      	b.n	80041a2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	4798      	blx	r3
}
 80041a2:	bf00      	nop
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f7ff fd4d 	bl	8003c58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b084      	sub	sp, #16
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2240      	movs	r2, #64	@ 0x40
 80041d8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041de:	f043 0204 	orr.w	r2, r3, #4
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f7ff fd4a 	bl	8003c80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041ec:	bf00      	nop
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004218:	4b0c      	ldr	r3, [pc, #48]	@ (800424c <__NVIC_SetPriorityGrouping+0x44>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004224:	4013      	ands	r3, r2
 8004226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004230:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004234:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800423a:	4a04      	ldr	r2, [pc, #16]	@ (800424c <__NVIC_SetPriorityGrouping+0x44>)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	60d3      	str	r3, [r2, #12]
}
 8004240:	bf00      	nop
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	e000ed00 	.word	0xe000ed00

08004250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004254:	4b04      	ldr	r3, [pc, #16]	@ (8004268 <__NVIC_GetPriorityGrouping+0x18>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	0a1b      	lsrs	r3, r3, #8
 800425a:	f003 0307 	and.w	r3, r3, #7
}
 800425e:	4618      	mov	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	e000ed00 	.word	0xe000ed00

0800426c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800427a:	2b00      	cmp	r3, #0
 800427c:	db0b      	blt.n	8004296 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	f003 021f 	and.w	r2, r3, #31
 8004284:	4907      	ldr	r1, [pc, #28]	@ (80042a4 <__NVIC_EnableIRQ+0x38>)
 8004286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	2001      	movs	r0, #1
 800428e:	fa00 f202 	lsl.w	r2, r0, r2
 8004292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	e000e100 	.word	0xe000e100

080042a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	6039      	str	r1, [r7, #0]
 80042b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	db0a      	blt.n	80042d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	490c      	ldr	r1, [pc, #48]	@ (80042f4 <__NVIC_SetPriority+0x4c>)
 80042c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c6:	0112      	lsls	r2, r2, #4
 80042c8:	b2d2      	uxtb	r2, r2
 80042ca:	440b      	add	r3, r1
 80042cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042d0:	e00a      	b.n	80042e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	4908      	ldr	r1, [pc, #32]	@ (80042f8 <__NVIC_SetPriority+0x50>)
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	3b04      	subs	r3, #4
 80042e0:	0112      	lsls	r2, r2, #4
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	440b      	add	r3, r1
 80042e6:	761a      	strb	r2, [r3, #24]
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	e000e100 	.word	0xe000e100
 80042f8:	e000ed00 	.word	0xe000ed00

080042fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b089      	sub	sp, #36	@ 0x24
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f1c3 0307 	rsb	r3, r3, #7
 8004316:	2b04      	cmp	r3, #4
 8004318:	bf28      	it	cs
 800431a:	2304      	movcs	r3, #4
 800431c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	3304      	adds	r3, #4
 8004322:	2b06      	cmp	r3, #6
 8004324:	d902      	bls.n	800432c <NVIC_EncodePriority+0x30>
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	3b03      	subs	r3, #3
 800432a:	e000      	b.n	800432e <NVIC_EncodePriority+0x32>
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004330:	f04f 32ff 	mov.w	r2, #4294967295
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43da      	mvns	r2, r3
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	401a      	ands	r2, r3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004344:	f04f 31ff 	mov.w	r1, #4294967295
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	fa01 f303 	lsl.w	r3, r1, r3
 800434e:	43d9      	mvns	r1, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004354:	4313      	orrs	r3, r2
         );
}
 8004356:	4618      	mov	r0, r3
 8004358:	3724      	adds	r7, #36	@ 0x24
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3b01      	subs	r3, #1
 8004370:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004374:	d301      	bcc.n	800437a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004376:	2301      	movs	r3, #1
 8004378:	e00f      	b.n	800439a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800437a:	4a0a      	ldr	r2, [pc, #40]	@ (80043a4 <SysTick_Config+0x40>)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3b01      	subs	r3, #1
 8004380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004382:	210f      	movs	r1, #15
 8004384:	f04f 30ff 	mov.w	r0, #4294967295
 8004388:	f7ff ff8e 	bl	80042a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800438c:	4b05      	ldr	r3, [pc, #20]	@ (80043a4 <SysTick_Config+0x40>)
 800438e:	2200      	movs	r2, #0
 8004390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004392:	4b04      	ldr	r3, [pc, #16]	@ (80043a4 <SysTick_Config+0x40>)
 8004394:	2207      	movs	r2, #7
 8004396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	e000e010 	.word	0xe000e010

080043a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff ff29 	bl	8004208 <__NVIC_SetPriorityGrouping>
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043be:	b580      	push	{r7, lr}
 80043c0:	b086      	sub	sp, #24
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	4603      	mov	r3, r0
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
 80043ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043d0:	f7ff ff3e 	bl	8004250 <__NVIC_GetPriorityGrouping>
 80043d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	6978      	ldr	r0, [r7, #20]
 80043dc:	f7ff ff8e 	bl	80042fc <NVIC_EncodePriority>
 80043e0:	4602      	mov	r2, r0
 80043e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e6:	4611      	mov	r1, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff ff5d 	bl	80042a8 <__NVIC_SetPriority>
}
 80043ee:	bf00      	nop
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	4603      	mov	r3, r0
 80043fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff ff31 	bl	800426c <__NVIC_EnableIRQ>
}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff ffa2 	bl	8004364 <SysTick_Config>
 8004420:	4603      	mov	r3, r0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
	...

0800442c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004438:	f7ff f996 	bl	8003768 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e099      	b.n	800457c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0201 	bic.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004468:	e00f      	b.n	800448a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800446a:	f7ff f97d 	bl	8003768 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b05      	cmp	r3, #5
 8004476:	d908      	bls.n	800448a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2203      	movs	r2, #3
 8004482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e078      	b.n	800457c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e8      	bne.n	800446a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4b38      	ldr	r3, [pc, #224]	@ (8004584 <HAL_DMA_Init+0x158>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d107      	bne.n	80044f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ec:	4313      	orrs	r3, r2
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f023 0307 	bic.w	r3, r3, #7
 800450a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451a:	2b04      	cmp	r3, #4
 800451c:	d117      	bne.n	800454e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00e      	beq.n	800454e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 fa9f 	bl	8004a74 <DMA_CheckFifoParam>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d008      	beq.n	800454e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2240      	movs	r2, #64	@ 0x40
 8004540:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800454a:	2301      	movs	r3, #1
 800454c:	e016      	b.n	800457c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 fa56 	bl	8004a08 <DMA_CalcBaseAndBitshift>
 800455c:	4603      	mov	r3, r0
 800455e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004564:	223f      	movs	r2, #63	@ 0x3f
 8004566:	409a      	lsls	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	f010803f 	.word	0xf010803f

08004588 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800459e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_DMA_Start_IT+0x26>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e040      	b.n	8004630 <HAL_DMA_Start_IT+0xa8>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d12f      	bne.n	8004622 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2202      	movs	r2, #2
 80045c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	68b9      	ldr	r1, [r7, #8]
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 f9e8 	bl	80049ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e0:	223f      	movs	r2, #63	@ 0x3f
 80045e2:	409a      	lsls	r2, r3
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0216 	orr.w	r2, r2, #22
 80045f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0208 	orr.w	r2, r2, #8
 800460e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]
 8004620:	e005      	b.n	800462e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800462a:	2302      	movs	r3, #2
 800462c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800462e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d004      	beq.n	8004656 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2280      	movs	r2, #128	@ 0x80
 8004650:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e00c      	b.n	8004670 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2205      	movs	r2, #5
 800465a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0201 	bic.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004688:	4b8e      	ldr	r3, [pc, #568]	@ (80048c4 <HAL_DMA_IRQHandler+0x248>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a8e      	ldr	r2, [pc, #568]	@ (80048c8 <HAL_DMA_IRQHandler+0x24c>)
 800468e:	fba2 2303 	umull	r2, r3, r2, r3
 8004692:	0a9b      	lsrs	r3, r3, #10
 8004694:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800469a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a6:	2208      	movs	r2, #8
 80046a8:	409a      	lsls	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d01a      	beq.n	80046e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d013      	beq.n	80046e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0204 	bic.w	r2, r2, #4
 80046ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d4:	2208      	movs	r2, #8
 80046d6:	409a      	lsls	r2, r3
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e0:	f043 0201 	orr.w	r2, r3, #1
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ec:	2201      	movs	r2, #1
 80046ee:	409a      	lsls	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d012      	beq.n	800471e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00b      	beq.n	800471e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800470a:	2201      	movs	r2, #1
 800470c:	409a      	lsls	r2, r3
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004716:	f043 0202 	orr.w	r2, r3, #2
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004722:	2204      	movs	r2, #4
 8004724:	409a      	lsls	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4013      	ands	r3, r2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d012      	beq.n	8004754 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00b      	beq.n	8004754 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004740:	2204      	movs	r2, #4
 8004742:	409a      	lsls	r2, r3
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474c:	f043 0204 	orr.w	r2, r3, #4
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004758:	2210      	movs	r2, #16
 800475a:	409a      	lsls	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4013      	ands	r3, r2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d043      	beq.n	80047ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	2b00      	cmp	r3, #0
 8004770:	d03c      	beq.n	80047ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004776:	2210      	movs	r2, #16
 8004778:	409a      	lsls	r2, r3
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d018      	beq.n	80047be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d108      	bne.n	80047ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d024      	beq.n	80047ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	4798      	blx	r3
 80047aa:	e01f      	b.n	80047ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d01b      	beq.n	80047ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	4798      	blx	r3
 80047bc:	e016      	b.n	80047ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d107      	bne.n	80047dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0208 	bic.w	r2, r2, #8
 80047da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f0:	2220      	movs	r2, #32
 80047f2:	409a      	lsls	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4013      	ands	r3, r2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 808f 	beq.w	800491c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b00      	cmp	r3, #0
 800480a:	f000 8087 	beq.w	800491c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004812:	2220      	movs	r2, #32
 8004814:	409a      	lsls	r2, r3
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b05      	cmp	r3, #5
 8004824:	d136      	bne.n	8004894 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0216 	bic.w	r2, r2, #22
 8004834:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004844:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	2b00      	cmp	r3, #0
 800484c:	d103      	bne.n	8004856 <HAL_DMA_IRQHandler+0x1da>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0208 	bic.w	r2, r2, #8
 8004864:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800486a:	223f      	movs	r2, #63	@ 0x3f
 800486c:	409a      	lsls	r2, r3
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004886:	2b00      	cmp	r3, #0
 8004888:	d07e      	beq.n	8004988 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	4798      	blx	r3
        }
        return;
 8004892:	e079      	b.n	8004988 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d01d      	beq.n	80048de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10d      	bne.n	80048cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d031      	beq.n	800491c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	4798      	blx	r3
 80048c0:	e02c      	b.n	800491c <HAL_DMA_IRQHandler+0x2a0>
 80048c2:	bf00      	nop
 80048c4:	2000002c 	.word	0x2000002c
 80048c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d023      	beq.n	800491c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	4798      	blx	r3
 80048dc:	e01e      	b.n	800491c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10f      	bne.n	800490c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0210 	bic.w	r2, r2, #16
 80048fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004910:	2b00      	cmp	r3, #0
 8004912:	d003      	beq.n	800491c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004920:	2b00      	cmp	r3, #0
 8004922:	d032      	beq.n	800498a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d022      	beq.n	8004976 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2205      	movs	r2, #5
 8004934:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0201 	bic.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	3301      	adds	r3, #1
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	429a      	cmp	r2, r3
 8004952:	d307      	bcc.n	8004964 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f2      	bne.n	8004948 <HAL_DMA_IRQHandler+0x2cc>
 8004962:	e000      	b.n	8004966 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004964:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d005      	beq.n	800498a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	4798      	blx	r3
 8004986:	e000      	b.n	800498a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004988:	bf00      	nop
    }
  }
}
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800499e:	b2db      	uxtb	r3, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	607a      	str	r2, [r7, #4]
 80049b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80049c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	2b40      	cmp	r3, #64	@ 0x40
 80049d8:	d108      	bne.n	80049ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80049ea:	e007      	b.n	80049fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	60da      	str	r2, [r3, #12]
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	3b10      	subs	r3, #16
 8004a18:	4a14      	ldr	r2, [pc, #80]	@ (8004a6c <DMA_CalcBaseAndBitshift+0x64>)
 8004a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1e:	091b      	lsrs	r3, r3, #4
 8004a20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a22:	4a13      	ldr	r2, [pc, #76]	@ (8004a70 <DMA_CalcBaseAndBitshift+0x68>)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4413      	add	r3, r2
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b03      	cmp	r3, #3
 8004a34:	d909      	bls.n	8004a4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004a3e:	f023 0303 	bic.w	r3, r3, #3
 8004a42:	1d1a      	adds	r2, r3, #4
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a48:	e007      	b.n	8004a5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004a52:	f023 0303 	bic.w	r3, r3, #3
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	aaaaaaab 	.word	0xaaaaaaab
 8004a70:	0801422c 	.word	0x0801422c

08004a74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d11f      	bne.n	8004ace <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d856      	bhi.n	8004b42 <DMA_CheckFifoParam+0xce>
 8004a94:	a201      	add	r2, pc, #4	@ (adr r2, 8004a9c <DMA_CheckFifoParam+0x28>)
 8004a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9a:	bf00      	nop
 8004a9c:	08004aad 	.word	0x08004aad
 8004aa0:	08004abf 	.word	0x08004abf
 8004aa4:	08004aad 	.word	0x08004aad
 8004aa8:	08004b43 	.word	0x08004b43
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d046      	beq.n	8004b46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004abc:	e043      	b.n	8004b46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ac6:	d140      	bne.n	8004b4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004acc:	e03d      	b.n	8004b4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ad6:	d121      	bne.n	8004b1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	d837      	bhi.n	8004b4e <DMA_CheckFifoParam+0xda>
 8004ade:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae4 <DMA_CheckFifoParam+0x70>)
 8004ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae4:	08004af5 	.word	0x08004af5
 8004ae8:	08004afb 	.word	0x08004afb
 8004aec:	08004af5 	.word	0x08004af5
 8004af0:	08004b0d 	.word	0x08004b0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	73fb      	strb	r3, [r7, #15]
      break;
 8004af8:	e030      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d025      	beq.n	8004b52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b0a:	e022      	b.n	8004b52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b10:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b14:	d11f      	bne.n	8004b56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b1a:	e01c      	b.n	8004b56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d903      	bls.n	8004b2a <DMA_CheckFifoParam+0xb6>
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d003      	beq.n	8004b30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b28:	e018      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	73fb      	strb	r3, [r7, #15]
      break;
 8004b2e:	e015      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00e      	beq.n	8004b5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b40:	e00b      	b.n	8004b5a <DMA_CheckFifoParam+0xe6>
      break;
 8004b42:	bf00      	nop
 8004b44:	e00a      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
      break;
 8004b46:	bf00      	nop
 8004b48:	e008      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
      break;
 8004b4a:	bf00      	nop
 8004b4c:	e006      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
      break;
 8004b4e:	bf00      	nop
 8004b50:	e004      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
      break;
 8004b52:	bf00      	nop
 8004b54:	e002      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
      break;   
 8004b56:	bf00      	nop
 8004b58:	e000      	b.n	8004b5c <DMA_CheckFifoParam+0xe8>
      break;
 8004b5a:	bf00      	nop
    }
  } 
  
  return status; 
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop

08004b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b089      	sub	sp, #36	@ 0x24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b82:	2300      	movs	r3, #0
 8004b84:	61fb      	str	r3, [r7, #28]
 8004b86:	e159      	b.n	8004e3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b88:	2201      	movs	r2, #1
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	f040 8148 	bne.w	8004e36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d005      	beq.n	8004bbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d130      	bne.n	8004c20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	2203      	movs	r2, #3
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	43db      	mvns	r3, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68da      	ldr	r2, [r3, #12]
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfc:	43db      	mvns	r3, r3
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	4013      	ands	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	091b      	lsrs	r3, r3, #4
 8004c0a:	f003 0201 	and.w	r2, r3, #1
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	fa02 f303 	lsl.w	r3, r2, r3
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f003 0303 	and.w	r3, r3, #3
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d017      	beq.n	8004c5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	2203      	movs	r2, #3
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	4013      	ands	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	69ba      	ldr	r2, [r7, #24]
 8004c5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 0303 	and.w	r3, r3, #3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d123      	bne.n	8004cb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	08da      	lsrs	r2, r3, #3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3208      	adds	r2, #8
 8004c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	220f      	movs	r2, #15
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	43db      	mvns	r3, r3
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	f003 0307 	and.w	r3, r3, #7
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	08da      	lsrs	r2, r3, #3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	3208      	adds	r2, #8
 8004caa:	69b9      	ldr	r1, [r7, #24]
 8004cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	2203      	movs	r2, #3
 8004cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc0:	43db      	mvns	r3, r3
 8004cc2:	69ba      	ldr	r2, [r7, #24]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f003 0203 	and.w	r2, r3, #3
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80a2 	beq.w	8004e36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	4b57      	ldr	r3, [pc, #348]	@ (8004e54 <HAL_GPIO_Init+0x2e8>)
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfa:	4a56      	ldr	r2, [pc, #344]	@ (8004e54 <HAL_GPIO_Init+0x2e8>)
 8004cfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d02:	4b54      	ldr	r3, [pc, #336]	@ (8004e54 <HAL_GPIO_Init+0x2e8>)
 8004d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d0e:	4a52      	ldr	r2, [pc, #328]	@ (8004e58 <HAL_GPIO_Init+0x2ec>)
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	089b      	lsrs	r3, r3, #2
 8004d14:	3302      	adds	r3, #2
 8004d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	220f      	movs	r2, #15
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	43db      	mvns	r3, r3
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a49      	ldr	r2, [pc, #292]	@ (8004e5c <HAL_GPIO_Init+0x2f0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d019      	beq.n	8004d6e <HAL_GPIO_Init+0x202>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a48      	ldr	r2, [pc, #288]	@ (8004e60 <HAL_GPIO_Init+0x2f4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d013      	beq.n	8004d6a <HAL_GPIO_Init+0x1fe>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a47      	ldr	r2, [pc, #284]	@ (8004e64 <HAL_GPIO_Init+0x2f8>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00d      	beq.n	8004d66 <HAL_GPIO_Init+0x1fa>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a46      	ldr	r2, [pc, #280]	@ (8004e68 <HAL_GPIO_Init+0x2fc>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d007      	beq.n	8004d62 <HAL_GPIO_Init+0x1f6>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a45      	ldr	r2, [pc, #276]	@ (8004e6c <HAL_GPIO_Init+0x300>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d101      	bne.n	8004d5e <HAL_GPIO_Init+0x1f2>
 8004d5a:	2304      	movs	r3, #4
 8004d5c:	e008      	b.n	8004d70 <HAL_GPIO_Init+0x204>
 8004d5e:	2307      	movs	r3, #7
 8004d60:	e006      	b.n	8004d70 <HAL_GPIO_Init+0x204>
 8004d62:	2303      	movs	r3, #3
 8004d64:	e004      	b.n	8004d70 <HAL_GPIO_Init+0x204>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e002      	b.n	8004d70 <HAL_GPIO_Init+0x204>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <HAL_GPIO_Init+0x204>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	f002 0203 	and.w	r2, r2, #3
 8004d76:	0092      	lsls	r2, r2, #2
 8004d78:	4093      	lsls	r3, r2
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d80:	4935      	ldr	r1, [pc, #212]	@ (8004e58 <HAL_GPIO_Init+0x2ec>)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	089b      	lsrs	r3, r3, #2
 8004d86:	3302      	adds	r3, #2
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d8e:	4b38      	ldr	r3, [pc, #224]	@ (8004e70 <HAL_GPIO_Init+0x304>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	43db      	mvns	r3, r3
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d003      	beq.n	8004db2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004db2:	4a2f      	ldr	r2, [pc, #188]	@ (8004e70 <HAL_GPIO_Init+0x304>)
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004db8:	4b2d      	ldr	r3, [pc, #180]	@ (8004e70 <HAL_GPIO_Init+0x304>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ddc:	4a24      	ldr	r2, [pc, #144]	@ (8004e70 <HAL_GPIO_Init+0x304>)
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004de2:	4b23      	ldr	r3, [pc, #140]	@ (8004e70 <HAL_GPIO_Init+0x304>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	43db      	mvns	r3, r3
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	4013      	ands	r3, r2
 8004df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d003      	beq.n	8004e06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e06:	4a1a      	ldr	r2, [pc, #104]	@ (8004e70 <HAL_GPIO_Init+0x304>)
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e0c:	4b18      	ldr	r3, [pc, #96]	@ (8004e70 <HAL_GPIO_Init+0x304>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	43db      	mvns	r3, r3
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e30:	4a0f      	ldr	r2, [pc, #60]	@ (8004e70 <HAL_GPIO_Init+0x304>)
 8004e32:	69bb      	ldr	r3, [r7, #24]
 8004e34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	61fb      	str	r3, [r7, #28]
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	2b0f      	cmp	r3, #15
 8004e40:	f67f aea2 	bls.w	8004b88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e44:	bf00      	nop
 8004e46:	bf00      	nop
 8004e48:	3724      	adds	r7, #36	@ 0x24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40023800 	.word	0x40023800
 8004e58:	40013800 	.word	0x40013800
 8004e5c:	40020000 	.word	0x40020000
 8004e60:	40020400 	.word	0x40020400
 8004e64:	40020800 	.word	0x40020800
 8004e68:	40020c00 	.word	0x40020c00
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	40013c00 	.word	0x40013c00

08004e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	807b      	strh	r3, [r7, #2]
 8004e80:	4613      	mov	r3, r2
 8004e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e84:	787b      	ldrb	r3, [r7, #1]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e8a:	887a      	ldrh	r2, [r7, #2]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e90:	e003      	b.n	8004e9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e92:	887b      	ldrh	r3, [r7, #2]
 8004e94:	041a      	lsls	r2, r3, #16
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	619a      	str	r2, [r3, #24]
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b085      	sub	sp, #20
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004eb8:	887a      	ldrh	r2, [r7, #2]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	041a      	lsls	r2, r3, #16
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	43d9      	mvns	r1, r3
 8004ec4:	887b      	ldrh	r3, [r7, #2]
 8004ec6:	400b      	ands	r3, r1
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	619a      	str	r2, [r3, #24]
}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
	...

08004edc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e12b      	b.n	8005146 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d106      	bne.n	8004f08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7fe f9be 	bl	8003284 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2224      	movs	r2, #36	@ 0x24
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0201 	bic.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f40:	f003 fffe 	bl	8008f40 <HAL_RCC_GetPCLK1Freq>
 8004f44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	4a81      	ldr	r2, [pc, #516]	@ (8005150 <HAL_I2C_Init+0x274>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d807      	bhi.n	8004f60 <HAL_I2C_Init+0x84>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4a80      	ldr	r2, [pc, #512]	@ (8005154 <HAL_I2C_Init+0x278>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	bf94      	ite	ls
 8004f58:	2301      	movls	r3, #1
 8004f5a:	2300      	movhi	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	e006      	b.n	8004f6e <HAL_I2C_Init+0x92>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a7d      	ldr	r2, [pc, #500]	@ (8005158 <HAL_I2C_Init+0x27c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	bf94      	ite	ls
 8004f68:	2301      	movls	r3, #1
 8004f6a:	2300      	movhi	r3, #0
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e0e7      	b.n	8005146 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4a78      	ldr	r2, [pc, #480]	@ (800515c <HAL_I2C_Init+0x280>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	0c9b      	lsrs	r3, r3, #18
 8004f80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	4a6a      	ldr	r2, [pc, #424]	@ (8005150 <HAL_I2C_Init+0x274>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d802      	bhi.n	8004fb0 <HAL_I2C_Init+0xd4>
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	3301      	adds	r3, #1
 8004fae:	e009      	b.n	8004fc4 <HAL_I2C_Init+0xe8>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
 8004fba:	4a69      	ldr	r2, [pc, #420]	@ (8005160 <HAL_I2C_Init+0x284>)
 8004fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc0:	099b      	lsrs	r3, r3, #6
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	430b      	orrs	r3, r1
 8004fca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004fd6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	495c      	ldr	r1, [pc, #368]	@ (8005150 <HAL_I2C_Init+0x274>)
 8004fe0:	428b      	cmp	r3, r1
 8004fe2:	d819      	bhi.n	8005018 <HAL_I2C_Init+0x13c>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	1e59      	subs	r1, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ff2:	1c59      	adds	r1, r3, #1
 8004ff4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004ff8:	400b      	ands	r3, r1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <HAL_I2C_Init+0x138>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1e59      	subs	r1, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	fbb1 f3f3 	udiv	r3, r1, r3
 800500c:	3301      	adds	r3, #1
 800500e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005012:	e051      	b.n	80050b8 <HAL_I2C_Init+0x1dc>
 8005014:	2304      	movs	r3, #4
 8005016:	e04f      	b.n	80050b8 <HAL_I2C_Init+0x1dc>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d111      	bne.n	8005044 <HAL_I2C_Init+0x168>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	1e58      	subs	r0, r3, #1
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6859      	ldr	r1, [r3, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	440b      	add	r3, r1
 800502e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005032:	3301      	adds	r3, #1
 8005034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005038:	2b00      	cmp	r3, #0
 800503a:	bf0c      	ite	eq
 800503c:	2301      	moveq	r3, #1
 800503e:	2300      	movne	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	e012      	b.n	800506a <HAL_I2C_Init+0x18e>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	1e58      	subs	r0, r3, #1
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6859      	ldr	r1, [r3, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	0099      	lsls	r1, r3, #2
 8005054:	440b      	add	r3, r1
 8005056:	fbb0 f3f3 	udiv	r3, r0, r3
 800505a:	3301      	adds	r3, #1
 800505c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005060:	2b00      	cmp	r3, #0
 8005062:	bf0c      	ite	eq
 8005064:	2301      	moveq	r3, #1
 8005066:	2300      	movne	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_I2C_Init+0x196>
 800506e:	2301      	movs	r3, #1
 8005070:	e022      	b.n	80050b8 <HAL_I2C_Init+0x1dc>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10e      	bne.n	8005098 <HAL_I2C_Init+0x1bc>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1e58      	subs	r0, r3, #1
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6859      	ldr	r1, [r3, #4]
 8005082:	460b      	mov	r3, r1
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	440b      	add	r3, r1
 8005088:	fbb0 f3f3 	udiv	r3, r0, r3
 800508c:	3301      	adds	r3, #1
 800508e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005096:	e00f      	b.n	80050b8 <HAL_I2C_Init+0x1dc>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	1e58      	subs	r0, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6859      	ldr	r1, [r3, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	0099      	lsls	r1, r3, #2
 80050a8:	440b      	add	r3, r1
 80050aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80050ae:	3301      	adds	r3, #1
 80050b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	6809      	ldr	r1, [r1, #0]
 80050bc:	4313      	orrs	r3, r2
 80050be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69da      	ldr	r2, [r3, #28]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80050e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	6911      	ldr	r1, [r2, #16]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	68d2      	ldr	r2, [r2, #12]
 80050f2:	4311      	orrs	r1, r2
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6812      	ldr	r2, [r2, #0]
 80050f8:	430b      	orrs	r3, r1
 80050fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695a      	ldr	r2, [r3, #20]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2220      	movs	r2, #32
 8005132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	000186a0 	.word	0x000186a0
 8005154:	001e847f 	.word	0x001e847f
 8005158:	003d08ff 	.word	0x003d08ff
 800515c:	431bde83 	.word	0x431bde83
 8005160:	10624dd3 	.word	0x10624dd3

08005164 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005176:	2b80      	cmp	r3, #128	@ 0x80
 8005178:	d103      	bne.n	8005182 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2200      	movs	r2, #0
 8005180:	611a      	str	r2, [r3, #16]
  }
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
	...

08005190 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b088      	sub	sp, #32
 8005194:	af02      	add	r7, sp, #8
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	4608      	mov	r0, r1
 800519a:	4611      	mov	r1, r2
 800519c:	461a      	mov	r2, r3
 800519e:	4603      	mov	r3, r0
 80051a0:	817b      	strh	r3, [r7, #10]
 80051a2:	460b      	mov	r3, r1
 80051a4:	813b      	strh	r3, [r7, #8]
 80051a6:	4613      	mov	r3, r2
 80051a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051aa:	f7fe fadd 	bl	8003768 <HAL_GetTick>
 80051ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	f040 80d9 	bne.w	8005370 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	2319      	movs	r3, #25
 80051c4:	2201      	movs	r2, #1
 80051c6:	496d      	ldr	r1, [pc, #436]	@ (800537c <HAL_I2C_Mem_Write+0x1ec>)
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f001 fe11 	bl	8006df0 <I2C_WaitOnFlagUntilTimeout>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d001      	beq.n	80051d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80051d4:	2302      	movs	r3, #2
 80051d6:	e0cc      	b.n	8005372 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_I2C_Mem_Write+0x56>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e0c5      	b.n	8005372 <HAL_I2C_Mem_Write+0x1e2>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d007      	beq.n	800520c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 0201 	orr.w	r2, r2, #1
 800520a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800521a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2221      	movs	r2, #33	@ 0x21
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2240      	movs	r2, #64	@ 0x40
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a3a      	ldr	r2, [r7, #32]
 8005236:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800523c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005242:	b29a      	uxth	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4a4d      	ldr	r2, [pc, #308]	@ (8005380 <HAL_I2C_Mem_Write+0x1f0>)
 800524c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800524e:	88f8      	ldrh	r0, [r7, #6]
 8005250:	893a      	ldrh	r2, [r7, #8]
 8005252:	8979      	ldrh	r1, [r7, #10]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	9301      	str	r3, [sp, #4]
 8005258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525a:	9300      	str	r3, [sp, #0]
 800525c:	4603      	mov	r3, r0
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f001 fc88 	bl	8006b74 <I2C_RequestMemoryWrite>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d052      	beq.n	8005310 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e081      	b.n	8005372 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f001 fed6 	bl	8007024 <I2C_WaitOnTXEFlagUntilTimeout>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00d      	beq.n	800529a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005282:	2b04      	cmp	r3, #4
 8005284:	d107      	bne.n	8005296 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005294:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e06b      	b.n	8005372 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529e:	781a      	ldrb	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	3b01      	subs	r3, #1
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d11b      	bne.n	8005310 <HAL_I2C_Mem_Write+0x180>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d017      	beq.n	8005310 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e4:	781a      	ldrb	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052fa:	3b01      	subs	r3, #1
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005306:	b29b      	uxth	r3, r3
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1aa      	bne.n	800526e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f001 fec9 	bl	80070b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00d      	beq.n	8005344 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800532c:	2b04      	cmp	r3, #4
 800532e:	d107      	bne.n	8005340 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800533e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e016      	b.n	8005372 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005352:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2220      	movs	r2, #32
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	e000      	b.n	8005372 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005370:	2302      	movs	r3, #2
  }
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	00100002 	.word	0x00100002
 8005380:	ffff0000 	.word	0xffff0000

08005384 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b088      	sub	sp, #32
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053a4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ac:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	2b10      	cmp	r3, #16
 80053b2:	d003      	beq.n	80053bc <HAL_I2C_EV_IRQHandler+0x38>
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	2b40      	cmp	r3, #64	@ 0x40
 80053b8:	f040 80c1 	bne.w	800553e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10d      	bne.n	80053f2 <HAL_I2C_EV_IRQHandler+0x6e>
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80053dc:	d003      	beq.n	80053e6 <HAL_I2C_EV_IRQHandler+0x62>
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80053e4:	d101      	bne.n	80053ea <HAL_I2C_EV_IRQHandler+0x66>
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <HAL_I2C_EV_IRQHandler+0x68>
 80053ea:	2300      	movs	r3, #0
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	f000 8132 	beq.w	8005656 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d00c      	beq.n	8005416 <HAL_I2C_EV_IRQHandler+0x92>
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	0a5b      	lsrs	r3, r3, #9
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d006      	beq.n	8005416 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f001 fefc 	bl	8007206 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fd91 	bl	8005f36 <I2C_Master_SB>
 8005414:	e092      	b.n	800553c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	08db      	lsrs	r3, r3, #3
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d009      	beq.n	8005436 <HAL_I2C_EV_IRQHandler+0xb2>
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	0a5b      	lsrs	r3, r3, #9
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fe07 	bl	8006042 <I2C_Master_ADD10>
 8005434:	e082      	b.n	800553c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	085b      	lsrs	r3, r3, #1
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d009      	beq.n	8005456 <HAL_I2C_EV_IRQHandler+0xd2>
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	0a5b      	lsrs	r3, r3, #9
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fe21 	bl	8006096 <I2C_Master_ADDR>
 8005454:	e072      	b.n	800553c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	089b      	lsrs	r3, r3, #2
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d03b      	beq.n	80054da <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800546c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005470:	f000 80f3 	beq.w	800565a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	09db      	lsrs	r3, r3, #7
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00f      	beq.n	80054a0 <HAL_I2C_EV_IRQHandler+0x11c>
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	0a9b      	lsrs	r3, r3, #10
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	d009      	beq.n	80054a0 <HAL_I2C_EV_IRQHandler+0x11c>
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	089b      	lsrs	r3, r3, #2
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	d103      	bne.n	80054a0 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f9e9 	bl	8005870 <I2C_MasterTransmit_TXE>
 800549e:	e04d      	b.n	800553c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	089b      	lsrs	r3, r3, #2
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 80d6 	beq.w	800565a <HAL_I2C_EV_IRQHandler+0x2d6>
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	0a5b      	lsrs	r3, r3, #9
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 80cf 	beq.w	800565a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80054bc:	7bbb      	ldrb	r3, [r7, #14]
 80054be:	2b21      	cmp	r3, #33	@ 0x21
 80054c0:	d103      	bne.n	80054ca <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fa70 	bl	80059a8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054c8:	e0c7      	b.n	800565a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	2b40      	cmp	r3, #64	@ 0x40
 80054ce:	f040 80c4 	bne.w	800565a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fade 	bl	8005a94 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80054d8:	e0bf      	b.n	800565a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054e8:	f000 80b7 	beq.w	800565a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	099b      	lsrs	r3, r3, #6
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00f      	beq.n	8005518 <HAL_I2C_EV_IRQHandler+0x194>
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	0a9b      	lsrs	r3, r3, #10
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b00      	cmp	r3, #0
 8005502:	d009      	beq.n	8005518 <HAL_I2C_EV_IRQHandler+0x194>
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	089b      	lsrs	r3, r3, #2
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d103      	bne.n	8005518 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fb57 	bl	8005bc4 <I2C_MasterReceive_RXNE>
 8005516:	e011      	b.n	800553c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	089b      	lsrs	r3, r3, #2
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 809a 	beq.w	800565a <HAL_I2C_EV_IRQHandler+0x2d6>
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	0a5b      	lsrs	r3, r3, #9
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8093 	beq.w	800565a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fc0d 	bl	8005d54 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800553a:	e08e      	b.n	800565a <HAL_I2C_EV_IRQHandler+0x2d6>
 800553c:	e08d      	b.n	800565a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d004      	beq.n	8005550 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	61fb      	str	r3, [r7, #28]
 800554e:	e007      	b.n	8005560 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	085b      	lsrs	r3, r3, #1
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	d012      	beq.n	8005592 <HAL_I2C_EV_IRQHandler+0x20e>
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	0a5b      	lsrs	r3, r3, #9
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00c      	beq.n	8005592 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	699b      	ldr	r3, [r3, #24]
 8005586:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005588:	69b9      	ldr	r1, [r7, #24]
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 ffd2 	bl	8006534 <I2C_Slave_ADDR>
 8005590:	e066      	b.n	8005660 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	091b      	lsrs	r3, r3, #4
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d009      	beq.n	80055b2 <HAL_I2C_EV_IRQHandler+0x22e>
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	0a5b      	lsrs	r3, r3, #9
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f001 f80c 	bl	80065c8 <I2C_Slave_STOPF>
 80055b0:	e056      	b.n	8005660 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80055b2:	7bbb      	ldrb	r3, [r7, #14]
 80055b4:	2b21      	cmp	r3, #33	@ 0x21
 80055b6:	d002      	beq.n	80055be <HAL_I2C_EV_IRQHandler+0x23a>
 80055b8:	7bbb      	ldrb	r3, [r7, #14]
 80055ba:	2b29      	cmp	r3, #41	@ 0x29
 80055bc:	d125      	bne.n	800560a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	09db      	lsrs	r3, r3, #7
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00f      	beq.n	80055ea <HAL_I2C_EV_IRQHandler+0x266>
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	0a9b      	lsrs	r3, r3, #10
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d009      	beq.n	80055ea <HAL_I2C_EV_IRQHandler+0x266>
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	089b      	lsrs	r3, r3, #2
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d103      	bne.n	80055ea <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fee8 	bl	80063b8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80055e8:	e039      	b.n	800565e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	089b      	lsrs	r3, r3, #2
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d033      	beq.n	800565e <HAL_I2C_EV_IRQHandler+0x2da>
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	0a5b      	lsrs	r3, r3, #9
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d02d      	beq.n	800565e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 ff15 	bl	8006432 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005608:	e029      	b.n	800565e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	099b      	lsrs	r3, r3, #6
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00f      	beq.n	8005636 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	0a9b      	lsrs	r3, r3, #10
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d009      	beq.n	8005636 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	089b      	lsrs	r3, r3, #2
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d103      	bne.n	8005636 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 ff20 	bl	8006474 <I2C_SlaveReceive_RXNE>
 8005634:	e014      	b.n	8005660 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	089b      	lsrs	r3, r3, #2
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00e      	beq.n	8005660 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	0a5b      	lsrs	r3, r3, #9
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d008      	beq.n	8005660 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 ff4e 	bl	80064f0 <I2C_SlaveReceive_BTF>
 8005654:	e004      	b.n	8005660 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005656:	bf00      	nop
 8005658:	e002      	b.n	8005660 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800565a:	bf00      	nop
 800565c:	e000      	b.n	8005660 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800565e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005660:	3720      	adds	r7, #32
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b08a      	sub	sp, #40	@ 0x28
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800567e:	2300      	movs	r3, #0
 8005680:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005688:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800568a:	6a3b      	ldr	r3, [r7, #32]
 800568c:	0a1b      	lsrs	r3, r3, #8
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00e      	beq.n	80056b4 <HAL_I2C_ER_IRQHandler+0x4e>
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	0a1b      	lsrs	r3, r3, #8
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d008      	beq.n	80056b4 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80056a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a4:	f043 0301 	orr.w	r3, r3, #1
 80056a8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80056b2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	0a5b      	lsrs	r3, r3, #9
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00e      	beq.n	80056de <HAL_I2C_ER_IRQHandler+0x78>
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	0a1b      	lsrs	r3, r3, #8
 80056c4:	f003 0301 	and.w	r3, r3, #1
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d008      	beq.n	80056de <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	f043 0302 	orr.w	r3, r3, #2
 80056d2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80056dc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80056de:	6a3b      	ldr	r3, [r7, #32]
 80056e0:	0a9b      	lsrs	r3, r3, #10
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d03f      	beq.n	800576a <HAL_I2C_ER_IRQHandler+0x104>
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	0a1b      	lsrs	r3, r3, #8
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d039      	beq.n	800576a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80056f6:	7efb      	ldrb	r3, [r7, #27]
 80056f8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056fe:	b29b      	uxth	r3, r3
 8005700:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005708:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005710:	7ebb      	ldrb	r3, [r7, #26]
 8005712:	2b20      	cmp	r3, #32
 8005714:	d112      	bne.n	800573c <HAL_I2C_ER_IRQHandler+0xd6>
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10f      	bne.n	800573c <HAL_I2C_ER_IRQHandler+0xd6>
 800571c:	7cfb      	ldrb	r3, [r7, #19]
 800571e:	2b21      	cmp	r3, #33	@ 0x21
 8005720:	d008      	beq.n	8005734 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005722:	7cfb      	ldrb	r3, [r7, #19]
 8005724:	2b29      	cmp	r3, #41	@ 0x29
 8005726:	d005      	beq.n	8005734 <HAL_I2C_ER_IRQHandler+0xce>
 8005728:	7cfb      	ldrb	r3, [r7, #19]
 800572a:	2b28      	cmp	r3, #40	@ 0x28
 800572c:	d106      	bne.n	800573c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b21      	cmp	r3, #33	@ 0x21
 8005732:	d103      	bne.n	800573c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f001 f877 	bl	8006828 <I2C_Slave_AF>
 800573a:	e016      	b.n	800576a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005744:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005748:	f043 0304 	orr.w	r3, r3, #4
 800574c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800574e:	7efb      	ldrb	r3, [r7, #27]
 8005750:	2b10      	cmp	r3, #16
 8005752:	d002      	beq.n	800575a <HAL_I2C_ER_IRQHandler+0xf4>
 8005754:	7efb      	ldrb	r3, [r7, #27]
 8005756:	2b40      	cmp	r3, #64	@ 0x40
 8005758:	d107      	bne.n	800576a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005768:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	0adb      	lsrs	r3, r3, #11
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00e      	beq.n	8005794 <HAL_I2C_ER_IRQHandler+0x12e>
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	0a1b      	lsrs	r3, r3, #8
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d008      	beq.n	8005794 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005784:	f043 0308 	orr.w	r3, r3, #8
 8005788:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005792:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005796:	2b00      	cmp	r3, #0
 8005798:	d008      	beq.n	80057ac <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800579e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f001 f8b2 	bl	8006910 <I2C_ITError>
  }
}
 80057ac:	bf00      	nop
 80057ae:	3728      	adds	r7, #40	@ 0x28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	460b      	mov	r3, r1
 800580e:	70fb      	strb	r3, [r7, #3]
 8005810:	4613      	mov	r3, r2
 8005812:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800587e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005886:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005892:	2b00      	cmp	r3, #0
 8005894:	d150      	bne.n	8005938 <I2C_MasterTransmit_TXE+0xc8>
 8005896:	7bfb      	ldrb	r3, [r7, #15]
 8005898:	2b21      	cmp	r3, #33	@ 0x21
 800589a:	d14d      	bne.n	8005938 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2b08      	cmp	r3, #8
 80058a0:	d01d      	beq.n	80058de <I2C_MasterTransmit_TXE+0x6e>
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d01a      	beq.n	80058de <I2C_MasterTransmit_TXE+0x6e>
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80058ae:	d016      	beq.n	80058de <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80058be:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2211      	movs	r2, #17
 80058c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2220      	movs	r2, #32
 80058d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7ff ff6c 	bl	80057b4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80058dc:	e060      	b.n	80059a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80058ec:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058fc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b40      	cmp	r3, #64	@ 0x40
 8005916:	d107      	bne.n	8005928 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7fb fa59 	bl	8000dd8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005926:	e03b      	b.n	80059a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7ff ff3f 	bl	80057b4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005936:	e033      	b.n	80059a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	2b21      	cmp	r3, #33	@ 0x21
 800593c:	d005      	beq.n	800594a <I2C_MasterTransmit_TXE+0xda>
 800593e:	7bbb      	ldrb	r3, [r7, #14]
 8005940:	2b40      	cmp	r3, #64	@ 0x40
 8005942:	d12d      	bne.n	80059a0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005944:	7bfb      	ldrb	r3, [r7, #15]
 8005946:	2b22      	cmp	r3, #34	@ 0x22
 8005948:	d12a      	bne.n	80059a0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d108      	bne.n	8005966 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005962:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005964:	e01c      	b.n	80059a0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b40      	cmp	r3, #64	@ 0x40
 8005970:	d103      	bne.n	800597a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f88e 	bl	8005a94 <I2C_MemoryTransmit_TXE_BTF>
}
 8005978:	e012      	b.n	80059a0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597e:	781a      	ldrb	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005994:	b29b      	uxth	r3, r3
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800599e:	e7ff      	b.n	80059a0 <I2C_MasterTransmit_TXE+0x130>
 80059a0:	bf00      	nop
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b21      	cmp	r3, #33	@ 0x21
 80059c0:	d164      	bne.n	8005a8c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d012      	beq.n	80059f2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d0:	781a      	ldrb	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059dc:	1c5a      	adds	r2, r3, #1
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	3b01      	subs	r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80059f0:	e04c      	b.n	8005a8c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d01d      	beq.n	8005a34 <I2C_MasterTransmit_BTF+0x8c>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b20      	cmp	r3, #32
 80059fc:	d01a      	beq.n	8005a34 <I2C_MasterTransmit_BTF+0x8c>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a04:	d016      	beq.n	8005a34 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a14:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2211      	movs	r2, #17
 8005a1a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2220      	movs	r2, #32
 8005a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff fec1 	bl	80057b4 <HAL_I2C_MasterTxCpltCallback>
}
 8005a32:	e02b      	b.n	8005a8c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685a      	ldr	r2, [r3, #4]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a42:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a52:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b40      	cmp	r3, #64	@ 0x40
 8005a6c:	d107      	bne.n	8005a7e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7fb f9ae 	bl	8000dd8 <HAL_I2C_MemTxCpltCallback>
}
 8005a7c:	e006      	b.n	8005a8c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7ff fe94 	bl	80057b4 <HAL_I2C_MasterTxCpltCallback>
}
 8005a8c:	bf00      	nop
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aa2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d11d      	bne.n	8005ae8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d10b      	bne.n	8005acc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ac4:	1c9a      	adds	r2, r3, #2
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005aca:	e077      	b.n	8005bbc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	121b      	asrs	r3, r3, #8
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005ae6:	e069      	b.n	8005bbc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d10b      	bne.n	8005b08 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005b06:	e059      	b.n	8005bbc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	d152      	bne.n	8005bb6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	2b22      	cmp	r3, #34	@ 0x22
 8005b14:	d10d      	bne.n	8005b32 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b24:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005b30:	e044      	b.n	8005bbc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d015      	beq.n	8005b68 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
 8005b3e:	2b21      	cmp	r3, #33	@ 0x21
 8005b40:	d112      	bne.n	8005b68 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b46:	781a      	ldrb	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b52:	1c5a      	adds	r2, r3, #1
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005b66:	e029      	b.n	8005bbc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d124      	bne.n	8005bbc <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
 8005b74:	2b21      	cmp	r3, #33	@ 0x21
 8005b76:	d121      	bne.n	8005bbc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b86:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b96:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fb f912 	bl	8000dd8 <HAL_I2C_MemTxCpltCallback>
}
 8005bb4:	e002      	b.n	8005bbc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f7ff fad4 	bl	8005164 <I2C_Flush_DR>
}
 8005bbc:	bf00      	nop
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b22      	cmp	r3, #34	@ 0x22
 8005bd6:	f040 80b9 	bne.w	8005d4c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bde:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d921      	bls.n	8005c32 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	691a      	ldr	r2, [r3, #16]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf8:	b2d2      	uxtb	r2, r2
 8005bfa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	f040 8096 	bne.w	8005d4c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c2e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005c30:	e08c      	b.n	8005d4c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d07f      	beq.n	8005d3a <I2C_MasterReceive_RXNE+0x176>
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d002      	beq.n	8005c46 <I2C_MasterReceive_RXNE+0x82>
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d179      	bne.n	8005d3a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f001 fa7c 	bl	8007144 <I2C_WaitOnSTOPRequestThroughIT>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d14c      	bne.n	8005cec <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c60:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005c70:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	691a      	ldr	r2, [r3, #16]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7c:	b2d2      	uxtb	r2, r2
 8005c7e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c84:	1c5a      	adds	r2, r3, #1
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b40      	cmp	r3, #64	@ 0x40
 8005caa:	d10a      	bne.n	8005cc2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7ff fdba 	bl	8005834 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005cc0:	e044      	b.n	8005d4c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d002      	beq.n	8005cd6 <I2C_MasterReceive_RXNE+0x112>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	d103      	bne.n	8005cde <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	631a      	str	r2, [r3, #48]	@ 0x30
 8005cdc:	e002      	b.n	8005ce4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2212      	movs	r2, #18
 8005ce2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff fd6f 	bl	80057c8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005cea:	e02f      	b.n	8005d4c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005cfa:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691a      	ldr	r2, [r3, #16]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d06:	b2d2      	uxtb	r2, r2
 8005d08:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7ff fd88 	bl	8005848 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005d38:	e008      	b.n	8005d4c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d48:	605a      	str	r2, [r3, #4]
}
 8005d4a:	e7ff      	b.n	8005d4c <I2C_MasterReceive_RXNE+0x188>
 8005d4c:	bf00      	nop
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d60:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d11b      	bne.n	8005da4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d7a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	691a      	ldr	r2, [r3, #16]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	3b01      	subs	r3, #1
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005da2:	e0c4      	b.n	8005f2e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b03      	cmp	r3, #3
 8005dac:	d129      	bne.n	8005e02 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dbc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d00a      	beq.n	8005dda <I2C_MasterReceive_BTF+0x86>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d007      	beq.n	8005dda <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dd8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691a      	ldr	r2, [r3, #16]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005e00:	e095      	b.n	8005f2e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d17d      	bne.n	8005f08 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d002      	beq.n	8005e18 <I2C_MasterReceive_BTF+0xc4>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b10      	cmp	r3, #16
 8005e16:	d108      	bne.n	8005e2a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	e016      	b.n	8005e58 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d002      	beq.n	8005e36 <I2C_MasterReceive_BTF+0xe2>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d108      	bne.n	8005e48 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	e007      	b.n	8005e58 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e56:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691a      	ldr	r2, [r3, #16]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6a:	1c5a      	adds	r2, r3, #1
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691a      	ldr	r2, [r3, #16]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e90:	1c5a      	adds	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005eb2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b40      	cmp	r3, #64	@ 0x40
 8005ec6:	d10a      	bne.n	8005ede <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff fcac 	bl	8005834 <HAL_I2C_MemRxCpltCallback>
}
 8005edc:	e027      	b.n	8005f2e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d002      	beq.n	8005ef2 <I2C_MasterReceive_BTF+0x19e>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2b20      	cmp	r3, #32
 8005ef0:	d103      	bne.n	8005efa <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ef8:	e002      	b.n	8005f00 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2212      	movs	r2, #18
 8005efe:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f7ff fc61 	bl	80057c8 <HAL_I2C_MasterRxCpltCallback>
}
 8005f06:	e012      	b.n	8005f2e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	691a      	ldr	r2, [r3, #16]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005f2e:	bf00      	nop
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b40      	cmp	r3, #64	@ 0x40
 8005f48:	d117      	bne.n	8005f7a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d109      	bne.n	8005f66 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	461a      	mov	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005f62:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005f64:	e067      	b.n	8006036 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	f043 0301 	orr.w	r3, r3, #1
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	611a      	str	r2, [r3, #16]
}
 8005f78:	e05d      	b.n	8006036 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005f82:	d133      	bne.n	8005fec <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b21      	cmp	r3, #33	@ 0x21
 8005f8e:	d109      	bne.n	8005fa4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005fa0:	611a      	str	r2, [r3, #16]
 8005fa2:	e008      	b.n	8005fb6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	f043 0301 	orr.w	r3, r3, #1
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d004      	beq.n	8005fc8 <I2C_Master_SB+0x92>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d108      	bne.n	8005fda <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d032      	beq.n	8006036 <I2C_Master_SB+0x100>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d02d      	beq.n	8006036 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fe8:	605a      	str	r2, [r3, #4]
}
 8005fea:	e024      	b.n	8006036 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10e      	bne.n	8006012 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	11db      	asrs	r3, r3, #7
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	f003 0306 	and.w	r3, r3, #6
 8006002:	b2db      	uxtb	r3, r3
 8006004:	f063 030f 	orn	r3, r3, #15
 8006008:	b2da      	uxtb	r2, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	611a      	str	r2, [r3, #16]
}
 8006010:	e011      	b.n	8006036 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006016:	2b01      	cmp	r3, #1
 8006018:	d10d      	bne.n	8006036 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800601e:	b29b      	uxth	r3, r3
 8006020:	11db      	asrs	r3, r3, #7
 8006022:	b2db      	uxtb	r3, r3
 8006024:	f003 0306 	and.w	r3, r3, #6
 8006028:	b2db      	uxtb	r3, r3
 800602a:	f063 030e 	orn	r3, r3, #14
 800602e:	b2da      	uxtb	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	611a      	str	r2, [r3, #16]
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800604e:	b2da      	uxtb	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800605a:	2b00      	cmp	r3, #0
 800605c:	d004      	beq.n	8006068 <I2C_Master_ADD10+0x26>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006064:	2b00      	cmp	r3, #0
 8006066:	d108      	bne.n	800607a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00c      	beq.n	800608a <I2C_Master_ADD10+0x48>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d007      	beq.n	800608a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685a      	ldr	r2, [r3, #4]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006088:	605a      	str	r2, [r3, #4]
  }
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006096:	b480      	push	{r7}
 8006098:	b091      	sub	sp, #68	@ 0x44
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060a4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b22      	cmp	r3, #34	@ 0x22
 80060be:	f040 8169 	bne.w	8006394 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10f      	bne.n	80060ea <I2C_Master_ADDR+0x54>
 80060ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80060ce:	2b40      	cmp	r3, #64	@ 0x40
 80060d0:	d10b      	bne.n	80060ea <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060d2:	2300      	movs	r3, #0
 80060d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	699b      	ldr	r3, [r3, #24]
 80060e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80060e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e8:	e160      	b.n	80063ac <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d11d      	bne.n	800612e <I2C_Master_ADDR+0x98>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80060fa:	d118      	bne.n	800612e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060fc:	2300      	movs	r3, #0
 80060fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006120:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	651a      	str	r2, [r3, #80]	@ 0x50
 800612c:	e13e      	b.n	80063ac <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006132:	b29b      	uxth	r3, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	d113      	bne.n	8006160 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006138:	2300      	movs	r3, #0
 800613a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800614c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	e115      	b.n	800638c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006164:	b29b      	uxth	r3, r3
 8006166:	2b01      	cmp	r3, #1
 8006168:	f040 808a 	bne.w	8006280 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800616c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006172:	d137      	bne.n	80061e4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006182:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800618e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006192:	d113      	bne.n	80061bc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061a2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061a4:	2300      	movs	r3, #0
 80061a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80061b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ba:	e0e7      	b.n	800638c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061bc:	2300      	movs	r3, #0
 80061be:	623b      	str	r3, [r7, #32]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	623b      	str	r3, [r7, #32]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	623b      	str	r3, [r7, #32]
 80061d0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	e0d3      	b.n	800638c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80061e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061e6:	2b08      	cmp	r3, #8
 80061e8:	d02e      	beq.n	8006248 <I2C_Master_ADDR+0x1b2>
 80061ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ec:	2b20      	cmp	r3, #32
 80061ee:	d02b      	beq.n	8006248 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80061f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f2:	2b12      	cmp	r3, #18
 80061f4:	d102      	bne.n	80061fc <I2C_Master_ADDR+0x166>
 80061f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d125      	bne.n	8006248 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80061fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d00e      	beq.n	8006220 <I2C_Master_ADDR+0x18a>
 8006202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006204:	2b02      	cmp	r3, #2
 8006206:	d00b      	beq.n	8006220 <I2C_Master_ADDR+0x18a>
 8006208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620a:	2b10      	cmp	r3, #16
 800620c:	d008      	beq.n	8006220 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	e007      	b.n	8006230 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800622e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006230:	2300      	movs	r3, #0
 8006232:	61fb      	str	r3, [r7, #28]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	61fb      	str	r3, [r7, #28]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	61fb      	str	r3, [r7, #28]
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	e0a1      	b.n	800638c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006256:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006258:	2300      	movs	r3, #0
 800625a:	61bb      	str	r3, [r7, #24]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	61bb      	str	r3, [r7, #24]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	61bb      	str	r3, [r7, #24]
 800626c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800627c:	601a      	str	r2, [r3, #0]
 800627e:	e085      	b.n	800638c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b02      	cmp	r3, #2
 8006288:	d14d      	bne.n	8006326 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800628a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628c:	2b04      	cmp	r3, #4
 800628e:	d016      	beq.n	80062be <I2C_Master_ADDR+0x228>
 8006290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006292:	2b02      	cmp	r3, #2
 8006294:	d013      	beq.n	80062be <I2C_Master_ADDR+0x228>
 8006296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006298:	2b10      	cmp	r3, #16
 800629a:	d010      	beq.n	80062be <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062aa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	e007      	b.n	80062ce <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80062cc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062dc:	d117      	bne.n	800630e <I2C_Master_ADDR+0x278>
 80062de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80062e4:	d00b      	beq.n	80062fe <I2C_Master_ADDR+0x268>
 80062e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d008      	beq.n	80062fe <I2C_Master_ADDR+0x268>
 80062ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ee:	2b08      	cmp	r3, #8
 80062f0:	d005      	beq.n	80062fe <I2C_Master_ADDR+0x268>
 80062f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f4:	2b10      	cmp	r3, #16
 80062f6:	d002      	beq.n	80062fe <I2C_Master_ADDR+0x268>
 80062f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	d107      	bne.n	800630e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800630c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800630e:	2300      	movs	r3, #0
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	e032      	b.n	800638c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006334:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006340:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006344:	d117      	bne.n	8006376 <I2C_Master_ADDR+0x2e0>
 8006346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006348:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800634c:	d00b      	beq.n	8006366 <I2C_Master_ADDR+0x2d0>
 800634e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006350:	2b01      	cmp	r3, #1
 8006352:	d008      	beq.n	8006366 <I2C_Master_ADDR+0x2d0>
 8006354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006356:	2b08      	cmp	r3, #8
 8006358:	d005      	beq.n	8006366 <I2C_Master_ADDR+0x2d0>
 800635a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635c:	2b10      	cmp	r3, #16
 800635e:	d002      	beq.n	8006366 <I2C_Master_ADDR+0x2d0>
 8006360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006362:	2b20      	cmp	r3, #32
 8006364:	d107      	bne.n	8006376 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006374:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006376:	2300      	movs	r3, #0
 8006378:	613b      	str	r3, [r7, #16]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	695b      	ldr	r3, [r3, #20]
 8006380:	613b      	str	r3, [r7, #16]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	699b      	ldr	r3, [r3, #24]
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006392:	e00b      	b.n	80063ac <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	68fb      	ldr	r3, [r7, #12]
}
 80063aa:	e7ff      	b.n	80063ac <I2C_Master_ADDR+0x316>
 80063ac:	bf00      	nop
 80063ae:	3744      	adds	r7, #68	@ 0x44
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063c6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d02b      	beq.n	800642a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d6:	781a      	ldrb	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d114      	bne.n	800642a <I2C_SlaveTransmit_TXE+0x72>
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	2b29      	cmp	r3, #41	@ 0x29
 8006404:	d111      	bne.n	800642a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006414:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2221      	movs	r2, #33	@ 0x21
 800641a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2228      	movs	r2, #40	@ 0x28
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff f9d9 	bl	80057dc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800642a:	bf00      	nop
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006432:	b480      	push	{r7}
 8006434:	b083      	sub	sp, #12
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d011      	beq.n	8006468 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006448:	781a      	ldrb	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006482:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006488:	b29b      	uxth	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d02c      	beq.n	80064e8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	691a      	ldr	r2, [r3, #16]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	3b01      	subs	r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d114      	bne.n	80064e8 <I2C_SlaveReceive_RXNE+0x74>
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80064c2:	d111      	bne.n	80064e8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685a      	ldr	r2, [r3, #4]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064d2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2222      	movs	r2, #34	@ 0x22
 80064d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2228      	movs	r2, #40	@ 0x28
 80064de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff f984 	bl	80057f0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80064e8:	bf00      	nop
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d012      	beq.n	8006528 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	691a      	ldr	r2, [r3, #16]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650c:	b2d2      	uxtb	r2, r2
 800650e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800651e:	b29b      	uxth	r3, r3
 8006520:	3b01      	subs	r3, #1
 8006522:	b29a      	uxth	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800653e:	2300      	movs	r3, #0
 8006540:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006548:	b2db      	uxtb	r3, r3
 800654a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800654e:	2b28      	cmp	r3, #40	@ 0x28
 8006550:	d127      	bne.n	80065a2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685a      	ldr	r2, [r3, #4]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006560:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	089b      	lsrs	r3, r3, #2
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800656e:	2301      	movs	r3, #1
 8006570:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	09db      	lsrs	r3, r3, #7
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d103      	bne.n	8006586 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	81bb      	strh	r3, [r7, #12]
 8006584:	e002      	b.n	800658c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006594:	89ba      	ldrh	r2, [r7, #12]
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	4619      	mov	r1, r3
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7ff f932 	bl	8005804 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80065a0:	e00e      	b.n	80065c0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065a2:	2300      	movs	r3, #0
 80065a4:	60bb      	str	r3, [r7, #8]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	60bb      	str	r3, [r7, #8]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	60bb      	str	r3, [r7, #8]
 80065b6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80065c0:	bf00      	nop
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065d6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80065e6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80065e8:	2300      	movs	r3, #0
 80065ea:	60bb      	str	r3, [r7, #8]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	60bb      	str	r3, [r7, #8]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f042 0201 	orr.w	r2, r2, #1
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006614:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006620:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006624:	d172      	bne.n	800670c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	2b22      	cmp	r3, #34	@ 0x22
 800662a:	d002      	beq.n	8006632 <I2C_Slave_STOPF+0x6a>
 800662c:	7bfb      	ldrb	r3, [r7, #15]
 800662e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006630:	d135      	bne.n	800669e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	b29a      	uxth	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d005      	beq.n	8006656 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664e:	f043 0204 	orr.w	r2, r3, #4
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006664:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800666a:	4618      	mov	r0, r3
 800666c:	f7fe f990 	bl	8004990 <HAL_DMA_GetState>
 8006670:	4603      	mov	r3, r0
 8006672:	2b01      	cmp	r3, #1
 8006674:	d049      	beq.n	800670a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667a:	4a69      	ldr	r2, [pc, #420]	@ (8006820 <I2C_Slave_STOPF+0x258>)
 800667c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006682:	4618      	mov	r0, r3
 8006684:	f7fd ffd8 	bl	8004638 <HAL_DMA_Abort_IT>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d03d      	beq.n	800670a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006698:	4610      	mov	r0, r2
 800669a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800669c:	e035      	b.n	800670a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d005      	beq.n	80066c2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ba:	f043 0204 	orr.w	r2, r3, #4
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fe f95a 	bl	8004990 <HAL_DMA_GetState>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d014      	beq.n	800670c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066e6:	4a4e      	ldr	r2, [pc, #312]	@ (8006820 <I2C_Slave_STOPF+0x258>)
 80066e8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7fd ffa2 	bl	8004638 <HAL_DMA_Abort_IT>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d008      	beq.n	800670c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006704:	4610      	mov	r0, r2
 8006706:	4798      	blx	r3
 8006708:	e000      	b.n	800670c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800670a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006710:	b29b      	uxth	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d03e      	beq.n	8006794 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	f003 0304 	and.w	r3, r3, #4
 8006720:	2b04      	cmp	r3, #4
 8006722:	d112      	bne.n	800674a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691a      	ldr	r2, [r3, #16]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006740:	b29b      	uxth	r3, r3
 8006742:	3b01      	subs	r3, #1
 8006744:	b29a      	uxth	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006754:	2b40      	cmp	r3, #64	@ 0x40
 8006756:	d112      	bne.n	800677e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	691a      	ldr	r2, [r3, #16]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676a:	1c5a      	adds	r2, r3, #1
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006782:	b29b      	uxth	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800678c:	f043 0204 	orr.w	r2, r3, #4
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f8b7 	bl	8006910 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80067a2:	e039      	b.n	8006818 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
 80067a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80067a8:	d109      	bne.n	80067be <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2228      	movs	r2, #40	@ 0x28
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7ff f819 	bl	80057f0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b28      	cmp	r3, #40	@ 0x28
 80067c8:	d111      	bne.n	80067ee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a15      	ldr	r2, [pc, #84]	@ (8006824 <I2C_Slave_STOPF+0x25c>)
 80067ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2220      	movs	r2, #32
 80067da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7ff f81a 	bl	8005820 <HAL_I2C_ListenCpltCallback>
}
 80067ec:	e014      	b.n	8006818 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f2:	2b22      	cmp	r3, #34	@ 0x22
 80067f4:	d002      	beq.n	80067fc <I2C_Slave_STOPF+0x234>
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	2b22      	cmp	r3, #34	@ 0x22
 80067fa:	d10d      	bne.n	8006818 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2220      	movs	r2, #32
 8006806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7fe ffec 	bl	80057f0 <HAL_I2C_SlaveRxCpltCallback>
}
 8006818:	bf00      	nop
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	08006ca1 	.word	0x08006ca1
 8006824:	ffff0000 	.word	0xffff0000

08006828 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006836:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800683c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b08      	cmp	r3, #8
 8006842:	d002      	beq.n	800684a <I2C_Slave_AF+0x22>
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2b20      	cmp	r3, #32
 8006848:	d129      	bne.n	800689e <I2C_Slave_AF+0x76>
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	2b28      	cmp	r3, #40	@ 0x28
 800684e:	d126      	bne.n	800689e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a2e      	ldr	r2, [pc, #184]	@ (800690c <I2C_Slave_AF+0xe4>)
 8006854:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006864:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800686e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800687e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2220      	movs	r2, #32
 800688a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7fe ffc2 	bl	8005820 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800689c:	e031      	b.n	8006902 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800689e:	7bfb      	ldrb	r3, [r7, #15]
 80068a0:	2b21      	cmp	r3, #33	@ 0x21
 80068a2:	d129      	bne.n	80068f8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a19      	ldr	r2, [pc, #100]	@ (800690c <I2C_Slave_AF+0xe4>)
 80068a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2221      	movs	r2, #33	@ 0x21
 80068ae:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80068ce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80068d8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068e8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7fe fc3a 	bl	8005164 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7fe ff73 	bl	80057dc <HAL_I2C_SlaveTxCpltCallback>
}
 80068f6:	e004      	b.n	8006902 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006900:	615a      	str	r2, [r3, #20]
}
 8006902:	bf00      	nop
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	ffff0000 	.word	0xffff0000

08006910 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800691e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006926:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006928:	7bbb      	ldrb	r3, [r7, #14]
 800692a:	2b10      	cmp	r3, #16
 800692c:	d002      	beq.n	8006934 <I2C_ITError+0x24>
 800692e:	7bbb      	ldrb	r3, [r7, #14]
 8006930:	2b40      	cmp	r3, #64	@ 0x40
 8006932:	d10a      	bne.n	800694a <I2C_ITError+0x3a>
 8006934:	7bfb      	ldrb	r3, [r7, #15]
 8006936:	2b22      	cmp	r3, #34	@ 0x22
 8006938:	d107      	bne.n	800694a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006948:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800694a:	7bfb      	ldrb	r3, [r7, #15]
 800694c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006950:	2b28      	cmp	r3, #40	@ 0x28
 8006952:	d107      	bne.n	8006964 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2228      	movs	r2, #40	@ 0x28
 800695e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006962:	e015      	b.n	8006990 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800696e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006972:	d00a      	beq.n	800698a <I2C_ITError+0x7a>
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	2b60      	cmp	r3, #96	@ 0x60
 8006978:	d007      	beq.n	800698a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2220      	movs	r2, #32
 800697e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800699a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800699e:	d162      	bne.n	8006a66 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069ae:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d020      	beq.n	8006a00 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069c2:	4a6a      	ldr	r2, [pc, #424]	@ (8006b6c <I2C_ITError+0x25c>)
 80069c4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fd fe34 	bl	8004638 <HAL_DMA_Abort_IT>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	f000 8089 	beq.w	8006aea <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 0201 	bic.w	r2, r2, #1
 80069e6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2220      	movs	r2, #32
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069fa:	4610      	mov	r0, r2
 80069fc:	4798      	blx	r3
 80069fe:	e074      	b.n	8006aea <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a04:	4a59      	ldr	r2, [pc, #356]	@ (8006b6c <I2C_ITError+0x25c>)
 8006a06:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fd fe13 	bl	8004638 <HAL_DMA_Abort_IT>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d068      	beq.n	8006aea <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a22:	2b40      	cmp	r3, #64	@ 0x40
 8006a24:	d10b      	bne.n	8006a3e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	691a      	ldr	r2, [r3, #16]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a30:	b2d2      	uxtb	r2, r2
 8006a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a38:	1c5a      	adds	r2, r3, #1
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 0201 	bic.w	r2, r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2220      	movs	r2, #32
 8006a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006a60:	4610      	mov	r0, r2
 8006a62:	4798      	blx	r3
 8006a64:	e041      	b.n	8006aea <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b60      	cmp	r3, #96	@ 0x60
 8006a70:	d125      	bne.n	8006abe <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a8a:	2b40      	cmp	r3, #64	@ 0x40
 8006a8c:	d10b      	bne.n	8006aa6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	691a      	ldr	r2, [r3, #16]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a98:	b2d2      	uxtb	r2, r2
 8006a9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 0201 	bic.w	r2, r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7fe fed0 	bl	800585c <HAL_I2C_AbortCpltCallback>
 8006abc:	e015      	b.n	8006aea <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac8:	2b40      	cmp	r3, #64	@ 0x40
 8006aca:	d10b      	bne.n	8006ae4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	691a      	ldr	r2, [r3, #16]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad6:	b2d2      	uxtb	r2, r2
 8006ad8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ade:	1c5a      	adds	r2, r3, #1
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7fe feaf 	bl	8005848 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aee:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d10e      	bne.n	8006b18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d109      	bne.n	8006b18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d104      	bne.n	8006b18 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d007      	beq.n	8006b28 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b26:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b2e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b04      	cmp	r3, #4
 8006b3a:	d113      	bne.n	8006b64 <I2C_ITError+0x254>
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	2b28      	cmp	r3, #40	@ 0x28
 8006b40:	d110      	bne.n	8006b64 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a0a      	ldr	r2, [pc, #40]	@ (8006b70 <I2C_ITError+0x260>)
 8006b46:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2220      	movs	r2, #32
 8006b52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fe fe5e 	bl	8005820 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006b64:	bf00      	nop
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	08006ca1 	.word	0x08006ca1
 8006b70:	ffff0000 	.word	0xffff0000

08006b74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af02      	add	r7, sp, #8
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	4608      	mov	r0, r1
 8006b7e:	4611      	mov	r1, r2
 8006b80:	461a      	mov	r2, r3
 8006b82:	4603      	mov	r3, r0
 8006b84:	817b      	strh	r3, [r7, #10]
 8006b86:	460b      	mov	r3, r1
 8006b88:	813b      	strh	r3, [r7, #8]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 f920 	bl	8006df0 <I2C_WaitOnFlagUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00d      	beq.n	8006bd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bc4:	d103      	bne.n	8006bce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006bcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e05f      	b.n	8006c92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006bd2:	897b      	ldrh	r3, [r7, #10]
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006be0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be4:	6a3a      	ldr	r2, [r7, #32]
 8006be6:	492d      	ldr	r1, [pc, #180]	@ (8006c9c <I2C_RequestMemoryWrite+0x128>)
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 f97b 	bl	8006ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e04c      	b.n	8006c92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	617b      	str	r3, [r7, #20]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	699b      	ldr	r3, [r3, #24]
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c10:	6a39      	ldr	r1, [r7, #32]
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 fa06 	bl	8007024 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00d      	beq.n	8006c3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c22:	2b04      	cmp	r3, #4
 8006c24:	d107      	bne.n	8006c36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e02b      	b.n	8006c92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c3a:	88fb      	ldrh	r3, [r7, #6]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d105      	bne.n	8006c4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c40:	893b      	ldrh	r3, [r7, #8]
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	611a      	str	r2, [r3, #16]
 8006c4a:	e021      	b.n	8006c90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006c4c:	893b      	ldrh	r3, [r7, #8]
 8006c4e:	0a1b      	lsrs	r3, r3, #8
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c5c:	6a39      	ldr	r1, [r7, #32]
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 f9e0 	bl	8007024 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00d      	beq.n	8006c86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d107      	bne.n	8006c82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e005      	b.n	8006c92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c86:	893b      	ldrh	r3, [r7, #8]
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	00010002 	.word	0x00010002

08006ca0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cb8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006cba:	4b4b      	ldr	r3, [pc, #300]	@ (8006de8 <I2C_DMAAbort+0x148>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	08db      	lsrs	r3, r3, #3
 8006cc0:	4a4a      	ldr	r2, [pc, #296]	@ (8006dec <I2C_DMAAbort+0x14c>)
 8006cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc6:	0a1a      	lsrs	r2, r3, #8
 8006cc8:	4613      	mov	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	00da      	lsls	r2, r3, #3
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d106      	bne.n	8006ce8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cde:	f043 0220 	orr.w	r2, r3, #32
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006ce6:	e00a      	b.n	8006cfe <I2C_DMAAbort+0x5e>
    }
    count--;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cfc:	d0ea      	beq.n	8006cd4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d003      	beq.n	8006d0e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d2c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2200      	movs	r2, #0
 8006d32:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d003      	beq.n	8006d44 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d40:	2200      	movs	r2, #0
 8006d42:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d50:	2200      	movs	r2, #0
 8006d52:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 0201 	bic.w	r2, r2, #1
 8006d62:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b60      	cmp	r3, #96	@ 0x60
 8006d6e:	d10e      	bne.n	8006d8e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	2220      	movs	r2, #32
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	2200      	movs	r2, #0
 8006d84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d86:	6978      	ldr	r0, [r7, #20]
 8006d88:	f7fe fd68 	bl	800585c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d8c:	e027      	b.n	8006dde <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d8e:	7cfb      	ldrb	r3, [r7, #19]
 8006d90:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006d94:	2b28      	cmp	r3, #40	@ 0x28
 8006d96:	d117      	bne.n	8006dc8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f042 0201 	orr.w	r2, r2, #1
 8006da6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006db6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2228      	movs	r2, #40	@ 0x28
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006dc6:	e007      	b.n	8006dd8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2220      	movs	r2, #32
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006dd8:	6978      	ldr	r0, [r7, #20]
 8006dda:	f7fe fd35 	bl	8005848 <HAL_I2C_ErrorCallback>
}
 8006dde:	bf00      	nop
 8006de0:	3718      	adds	r7, #24
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	2000002c 	.word	0x2000002c
 8006dec:	14f8b589 	.word	0x14f8b589

08006df0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	603b      	str	r3, [r7, #0]
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e00:	e048      	b.n	8006e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e08:	d044      	beq.n	8006e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e0a:	f7fc fcad 	bl	8003768 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d302      	bcc.n	8006e20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d139      	bne.n	8006e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	0c1b      	lsrs	r3, r3, #16
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d10d      	bne.n	8006e46 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	43da      	mvns	r2, r3
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	4013      	ands	r3, r2
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	bf0c      	ite	eq
 8006e3c:	2301      	moveq	r3, #1
 8006e3e:	2300      	movne	r3, #0
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	461a      	mov	r2, r3
 8006e44:	e00c      	b.n	8006e60 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	43da      	mvns	r2, r3
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	4013      	ands	r3, r2
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	bf0c      	ite	eq
 8006e58:	2301      	moveq	r3, #1
 8006e5a:	2300      	movne	r3, #0
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	461a      	mov	r2, r3
 8006e60:	79fb      	ldrb	r3, [r7, #7]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d116      	bne.n	8006e94 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e80:	f043 0220 	orr.w	r2, r3, #32
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e023      	b.n	8006edc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	0c1b      	lsrs	r3, r3, #16
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d10d      	bne.n	8006eba <I2C_WaitOnFlagUntilTimeout+0xca>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	43da      	mvns	r2, r3
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	bf0c      	ite	eq
 8006eb0:	2301      	moveq	r3, #1
 8006eb2:	2300      	movne	r3, #0
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	e00c      	b.n	8006ed4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	43da      	mvns	r2, r3
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	bf0c      	ite	eq
 8006ecc:	2301      	moveq	r3, #1
 8006ece:	2300      	movne	r3, #0
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	79fb      	ldrb	r3, [r7, #7]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d093      	beq.n	8006e02 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
 8006ef0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ef2:	e071      	b.n	8006fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f02:	d123      	bne.n	8006f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f12:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006f1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f38:	f043 0204 	orr.w	r2, r3, #4
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e067      	b.n	800701c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f52:	d041      	beq.n	8006fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f54:	f7fc fc08 	bl	8003768 <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d302      	bcc.n	8006f6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d136      	bne.n	8006fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	0c1b      	lsrs	r3, r3, #16
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d10c      	bne.n	8006f8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	43da      	mvns	r2, r3
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	bf14      	ite	ne
 8006f86:	2301      	movne	r3, #1
 8006f88:	2300      	moveq	r3, #0
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	e00b      	b.n	8006fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	43da      	mvns	r2, r3
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	bf14      	ite	ne
 8006fa0:	2301      	movne	r3, #1
 8006fa2:	2300      	moveq	r3, #0
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d016      	beq.n	8006fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2220      	movs	r2, #32
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc4:	f043 0220 	orr.w	r2, r3, #32
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e021      	b.n	800701c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	0c1b      	lsrs	r3, r3, #16
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d10c      	bne.n	8006ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	43da      	mvns	r2, r3
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	4013      	ands	r3, r2
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	bf14      	ite	ne
 8006ff4:	2301      	movne	r3, #1
 8006ff6:	2300      	moveq	r3, #0
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	e00b      	b.n	8007014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	43da      	mvns	r2, r3
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	4013      	ands	r3, r2
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	bf14      	ite	ne
 800700e:	2301      	movne	r3, #1
 8007010:	2300      	moveq	r3, #0
 8007012:	b2db      	uxtb	r3, r3
 8007014:	2b00      	cmp	r3, #0
 8007016:	f47f af6d 	bne.w	8006ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007030:	e034      	b.n	800709c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 f8b8 	bl	80071a8 <I2C_IsAcknowledgeFailed>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e034      	b.n	80070ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007048:	d028      	beq.n	800709c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800704a:	f7fc fb8d 	bl	8003768 <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	68ba      	ldr	r2, [r7, #8]
 8007056:	429a      	cmp	r2, r3
 8007058:	d302      	bcc.n	8007060 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d11d      	bne.n	800709c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800706a:	2b80      	cmp	r3, #128	@ 0x80
 800706c:	d016      	beq.n	800709c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2200      	movs	r2, #0
 8007072:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2220      	movs	r2, #32
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007088:	f043 0220 	orr.w	r2, r3, #32
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e007      	b.n	80070ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070a6:	2b80      	cmp	r3, #128	@ 0x80
 80070a8:	d1c3      	bne.n	8007032 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070c0:	e034      	b.n	800712c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 f870 	bl	80071a8 <I2C_IsAcknowledgeFailed>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e034      	b.n	800713c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070d8:	d028      	beq.n	800712c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070da:	f7fc fb45 	bl	8003768 <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d302      	bcc.n	80070f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d11d      	bne.n	800712c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	f003 0304 	and.w	r3, r3, #4
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	d016      	beq.n	800712c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2220      	movs	r2, #32
 8007108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007118:	f043 0220 	orr.w	r2, r3, #32
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e007      	b.n	800713c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b04      	cmp	r3, #4
 8007138:	d1c3      	bne.n	80070c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007150:	4b13      	ldr	r3, [pc, #76]	@ (80071a0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	08db      	lsrs	r3, r3, #3
 8007156:	4a13      	ldr	r2, [pc, #76]	@ (80071a4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007158:	fba2 2303 	umull	r2, r3, r2, r3
 800715c:	0a1a      	lsrs	r2, r3, #8
 800715e:	4613      	mov	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	4413      	add	r3, r2
 8007164:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3b01      	subs	r3, #1
 800716a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d107      	bne.n	8007182 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007176:	f043 0220 	orr.w	r2, r3, #32
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e008      	b.n	8007194 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800718c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007190:	d0e9      	beq.n	8007166 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	2000002c 	.word	0x2000002c
 80071a4:	14f8b589 	.word	0x14f8b589

080071a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071be:	d11b      	bne.n	80071f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80071c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2220      	movs	r2, #32
 80071d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e4:	f043 0204 	orr.w	r2, r3, #4
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e000      	b.n	80071fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007206:	b480      	push	{r7}
 8007208:	b083      	sub	sp, #12
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007212:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007216:	d103      	bne.n	8007220 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800721e:	e007      	b.n	8007230 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007224:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007228:	d102      	bne.n	8007230 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2208      	movs	r2, #8
 800722e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af02      	add	r7, sp, #8
 8007242:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d101      	bne.n	800724e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e101      	b.n	8007452 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800725a:	b2db      	uxtb	r3, r3
 800725c:	2b00      	cmp	r3, #0
 800725e:	d106      	bne.n	800726e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f006 f935 	bl	800d4d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2203      	movs	r2, #3
 8007272:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800727c:	d102      	bne.n	8007284 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4618      	mov	r0, r3
 800728a:	f002 fc8c 	bl	8009ba6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6818      	ldr	r0, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	7c1a      	ldrb	r2, [r3, #16]
 8007296:	f88d 2000 	strb.w	r2, [sp]
 800729a:	3304      	adds	r3, #4
 800729c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800729e:	f002 fb6b 	bl	8009978 <USB_CoreInit>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d005      	beq.n	80072b4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	e0ce      	b.n	8007452 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2100      	movs	r1, #0
 80072ba:	4618      	mov	r0, r3
 80072bc:	f002 fc84 	bl	8009bc8 <USB_SetCurrentMode>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d005      	beq.n	80072d2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2202      	movs	r2, #2
 80072ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e0bf      	b.n	8007452 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072d2:	2300      	movs	r3, #0
 80072d4:	73fb      	strb	r3, [r7, #15]
 80072d6:	e04a      	b.n	800736e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80072d8:	7bfa      	ldrb	r2, [r7, #15]
 80072da:	6879      	ldr	r1, [r7, #4]
 80072dc:	4613      	mov	r3, r2
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	4413      	add	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	440b      	add	r3, r1
 80072e6:	3315      	adds	r3, #21
 80072e8:	2201      	movs	r2, #1
 80072ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80072ec:	7bfa      	ldrb	r2, [r7, #15]
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	4613      	mov	r3, r2
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	4413      	add	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	440b      	add	r3, r1
 80072fa:	3314      	adds	r3, #20
 80072fc:	7bfa      	ldrb	r2, [r7, #15]
 80072fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007300:	7bfa      	ldrb	r2, [r7, #15]
 8007302:	7bfb      	ldrb	r3, [r7, #15]
 8007304:	b298      	uxth	r0, r3
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	4613      	mov	r3, r2
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	4413      	add	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	440b      	add	r3, r1
 8007312:	332e      	adds	r3, #46	@ 0x2e
 8007314:	4602      	mov	r2, r0
 8007316:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007318:	7bfa      	ldrb	r2, [r7, #15]
 800731a:	6879      	ldr	r1, [r7, #4]
 800731c:	4613      	mov	r3, r2
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	4413      	add	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	440b      	add	r3, r1
 8007326:	3318      	adds	r3, #24
 8007328:	2200      	movs	r2, #0
 800732a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800732c:	7bfa      	ldrb	r2, [r7, #15]
 800732e:	6879      	ldr	r1, [r7, #4]
 8007330:	4613      	mov	r3, r2
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	4413      	add	r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	440b      	add	r3, r1
 800733a:	331c      	adds	r3, #28
 800733c:	2200      	movs	r2, #0
 800733e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007340:	7bfa      	ldrb	r2, [r7, #15]
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	4613      	mov	r3, r2
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	4413      	add	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	440b      	add	r3, r1
 800734e:	3320      	adds	r3, #32
 8007350:	2200      	movs	r2, #0
 8007352:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007354:	7bfa      	ldrb	r2, [r7, #15]
 8007356:	6879      	ldr	r1, [r7, #4]
 8007358:	4613      	mov	r3, r2
 800735a:	00db      	lsls	r3, r3, #3
 800735c:	4413      	add	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	440b      	add	r3, r1
 8007362:	3324      	adds	r3, #36	@ 0x24
 8007364:	2200      	movs	r2, #0
 8007366:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	3301      	adds	r3, #1
 800736c:	73fb      	strb	r3, [r7, #15]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	791b      	ldrb	r3, [r3, #4]
 8007372:	7bfa      	ldrb	r2, [r7, #15]
 8007374:	429a      	cmp	r2, r3
 8007376:	d3af      	bcc.n	80072d8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007378:	2300      	movs	r3, #0
 800737a:	73fb      	strb	r3, [r7, #15]
 800737c:	e044      	b.n	8007408 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800737e:	7bfa      	ldrb	r2, [r7, #15]
 8007380:	6879      	ldr	r1, [r7, #4]
 8007382:	4613      	mov	r3, r2
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	4413      	add	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	440b      	add	r3, r1
 800738c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007390:	2200      	movs	r2, #0
 8007392:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007394:	7bfa      	ldrb	r2, [r7, #15]
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	4613      	mov	r3, r2
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	4413      	add	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	440b      	add	r3, r1
 80073a2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80073a6:	7bfa      	ldrb	r2, [r7, #15]
 80073a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80073aa:	7bfa      	ldrb	r2, [r7, #15]
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	4613      	mov	r3, r2
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	4413      	add	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	440b      	add	r3, r1
 80073b8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80073bc:	2200      	movs	r2, #0
 80073be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80073c0:	7bfa      	ldrb	r2, [r7, #15]
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	4613      	mov	r3, r2
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	4413      	add	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	440b      	add	r3, r1
 80073ce:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80073d6:	7bfa      	ldrb	r2, [r7, #15]
 80073d8:	6879      	ldr	r1, [r7, #4]
 80073da:	4613      	mov	r3, r2
 80073dc:	00db      	lsls	r3, r3, #3
 80073de:	4413      	add	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	440b      	add	r3, r1
 80073e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80073e8:	2200      	movs	r2, #0
 80073ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80073ec:	7bfa      	ldrb	r2, [r7, #15]
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	4613      	mov	r3, r2
 80073f2:	00db      	lsls	r3, r3, #3
 80073f4:	4413      	add	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	440b      	add	r3, r1
 80073fa:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80073fe:	2200      	movs	r2, #0
 8007400:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007402:	7bfb      	ldrb	r3, [r7, #15]
 8007404:	3301      	adds	r3, #1
 8007406:	73fb      	strb	r3, [r7, #15]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	791b      	ldrb	r3, [r3, #4]
 800740c:	7bfa      	ldrb	r2, [r7, #15]
 800740e:	429a      	cmp	r2, r3
 8007410:	d3b5      	bcc.n	800737e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6818      	ldr	r0, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	7c1a      	ldrb	r2, [r3, #16]
 800741a:	f88d 2000 	strb.w	r2, [sp]
 800741e:	3304      	adds	r3, #4
 8007420:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007422:	f002 fc1d 	bl	8009c60 <USB_DevInit>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d005      	beq.n	8007438 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	e00c      	b.n	8007452 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4618      	mov	r0, r3
 800744c:	f003 fc67 	bl	800ad1e <USB_DevDisconnect>

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800746e:	2b01      	cmp	r3, #1
 8007470:	d101      	bne.n	8007476 <HAL_PCD_Start+0x1c>
 8007472:	2302      	movs	r3, #2
 8007474:	e022      	b.n	80074bc <HAL_PCD_Start+0x62>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007486:	2b00      	cmp	r3, #0
 8007488:	d009      	beq.n	800749e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800748e:	2b01      	cmp	r3, #1
 8007490:	d105      	bne.n	800749e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007496:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f002 fb6e 	bl	8009b84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f003 fc15 	bl	800acdc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80074c4:	b590      	push	{r4, r7, lr}
 80074c6:	b08d      	sub	sp, #52	@ 0x34
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d2:	6a3b      	ldr	r3, [r7, #32]
 80074d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4618      	mov	r0, r3
 80074dc:	f003 fcd3 	bl	800ae86 <USB_GetMode>
 80074e0:	4603      	mov	r3, r0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f040 848c 	bne.w	8007e00 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f003 fc37 	bl	800ad60 <USB_ReadInterrupts>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 8482 	beq.w	8007dfe <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	0a1b      	lsrs	r3, r3, #8
 8007504:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4618      	mov	r0, r3
 8007514:	f003 fc24 	bl	800ad60 <USB_ReadInterrupts>
 8007518:	4603      	mov	r3, r0
 800751a:	f003 0302 	and.w	r3, r3, #2
 800751e:	2b02      	cmp	r3, #2
 8007520:	d107      	bne.n	8007532 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	695a      	ldr	r2, [r3, #20]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f002 0202 	and.w	r2, r2, #2
 8007530:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4618      	mov	r0, r3
 8007538:	f003 fc12 	bl	800ad60 <USB_ReadInterrupts>
 800753c:	4603      	mov	r3, r0
 800753e:	f003 0310 	and.w	r3, r3, #16
 8007542:	2b10      	cmp	r3, #16
 8007544:	d161      	bne.n	800760a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	699a      	ldr	r2, [r3, #24]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0210 	bic.w	r2, r2, #16
 8007554:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	f003 020f 	and.w	r2, r3, #15
 8007562:	4613      	mov	r3, r2
 8007564:	00db      	lsls	r3, r3, #3
 8007566:	4413      	add	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	4413      	add	r3, r2
 8007572:	3304      	adds	r3, #4
 8007574:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800757c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007580:	d124      	bne.n	80075cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007582:	69ba      	ldr	r2, [r7, #24]
 8007584:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007588:	4013      	ands	r3, r2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d035      	beq.n	80075fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	091b      	lsrs	r3, r3, #4
 8007596:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007598:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800759c:	b29b      	uxth	r3, r3
 800759e:	461a      	mov	r2, r3
 80075a0:	6a38      	ldr	r0, [r7, #32]
 80075a2:	f003 fa49 	bl	800aa38 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	68da      	ldr	r2, [r3, #12]
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	091b      	lsrs	r3, r3, #4
 80075ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075b2:	441a      	add	r2, r3
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	695a      	ldr	r2, [r3, #20]
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	091b      	lsrs	r3, r3, #4
 80075c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075c4:	441a      	add	r2, r3
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	615a      	str	r2, [r3, #20]
 80075ca:	e016      	b.n	80075fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80075d2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80075d6:	d110      	bne.n	80075fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80075de:	2208      	movs	r2, #8
 80075e0:	4619      	mov	r1, r3
 80075e2:	6a38      	ldr	r0, [r7, #32]
 80075e4:	f003 fa28 	bl	800aa38 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	695a      	ldr	r2, [r3, #20]
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	091b      	lsrs	r3, r3, #4
 80075f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075f4:	441a      	add	r2, r3
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	699a      	ldr	r2, [r3, #24]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f042 0210 	orr.w	r2, r2, #16
 8007608:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4618      	mov	r0, r3
 8007610:	f003 fba6 	bl	800ad60 <USB_ReadInterrupts>
 8007614:	4603      	mov	r3, r0
 8007616:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800761a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800761e:	f040 80a7 	bne.w	8007770 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007622:	2300      	movs	r3, #0
 8007624:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4618      	mov	r0, r3
 800762c:	f003 fbab 	bl	800ad86 <USB_ReadDevAllOutEpInterrupt>
 8007630:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007632:	e099      	b.n	8007768 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	2b00      	cmp	r3, #0
 800763c:	f000 808e 	beq.w	800775c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007646:	b2d2      	uxtb	r2, r2
 8007648:	4611      	mov	r1, r2
 800764a:	4618      	mov	r0, r3
 800764c:	f003 fbcf 	bl	800adee <USB_ReadDevOutEPInterrupt>
 8007650:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00c      	beq.n	8007676 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800765c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007668:	461a      	mov	r2, r3
 800766a:	2301      	movs	r3, #1
 800766c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800766e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fea3 	bl	80083bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	f003 0308 	and.w	r3, r3, #8
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00c      	beq.n	800769a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800768c:	461a      	mov	r2, r3
 800768e:	2308      	movs	r3, #8
 8007690:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007692:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 ff79 	bl	800858c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f003 0310 	and.w	r3, r3, #16
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d008      	beq.n	80076b6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80076a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076b0:	461a      	mov	r2, r3
 80076b2:	2310      	movs	r3, #16
 80076b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d030      	beq.n	8007722 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076c8:	2b80      	cmp	r3, #128	@ 0x80
 80076ca:	d109      	bne.n	80076e0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80076de:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80076e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076e2:	4613      	mov	r3, r2
 80076e4:	00db      	lsls	r3, r3, #3
 80076e6:	4413      	add	r3, r2
 80076e8:	009b      	lsls	r3, r3, #2
 80076ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	4413      	add	r3, r2
 80076f2:	3304      	adds	r3, #4
 80076f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	78db      	ldrb	r3, [r3, #3]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d108      	bne.n	8007710 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2200      	movs	r2, #0
 8007702:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007706:	b2db      	uxtb	r3, r3
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f005 ffe0 	bl	800d6d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	4413      	add	r3, r2
 8007718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800771c:	461a      	mov	r2, r3
 800771e:	2302      	movs	r3, #2
 8007720:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	f003 0320 	and.w	r3, r3, #32
 8007728:	2b00      	cmp	r3, #0
 800772a:	d008      	beq.n	800773e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800772c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007738:	461a      	mov	r2, r3
 800773a:	2320      	movs	r3, #32
 800773c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d009      	beq.n	800775c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	4413      	add	r3, r2
 8007750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007754:	461a      	mov	r2, r3
 8007756:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800775a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800775c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775e:	3301      	adds	r3, #1
 8007760:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007764:	085b      	lsrs	r3, r3, #1
 8007766:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800776a:	2b00      	cmp	r3, #0
 800776c:	f47f af62 	bne.w	8007634 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4618      	mov	r0, r3
 8007776:	f003 faf3 	bl	800ad60 <USB_ReadInterrupts>
 800777a:	4603      	mov	r3, r0
 800777c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007780:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007784:	f040 80db 	bne.w	800793e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4618      	mov	r0, r3
 800778e:	f003 fb14 	bl	800adba <USB_ReadDevAllInEpInterrupt>
 8007792:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007798:	e0cd      	b.n	8007936 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800779a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 80c2 	beq.w	800792a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077ac:	b2d2      	uxtb	r2, r2
 80077ae:	4611      	mov	r1, r2
 80077b0:	4618      	mov	r0, r3
 80077b2:	f003 fb3a 	bl	800ae2a <USB_ReadDevInEPInterrupt>
 80077b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d057      	beq.n	8007872 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	f003 030f 	and.w	r3, r3, #15
 80077c8:	2201      	movs	r2, #1
 80077ca:	fa02 f303 	lsl.w	r3, r2, r3
 80077ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	43db      	mvns	r3, r3
 80077dc:	69f9      	ldr	r1, [r7, #28]
 80077de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077e2:	4013      	ands	r3, r2
 80077e4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80077e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e8:	015a      	lsls	r2, r3, #5
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	4413      	add	r3, r2
 80077ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077f2:	461a      	mov	r2, r3
 80077f4:	2301      	movs	r3, #1
 80077f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	799b      	ldrb	r3, [r3, #6]
 80077fc:	2b01      	cmp	r3, #1
 80077fe:	d132      	bne.n	8007866 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007800:	6879      	ldr	r1, [r7, #4]
 8007802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007804:	4613      	mov	r3, r2
 8007806:	00db      	lsls	r3, r3, #3
 8007808:	4413      	add	r3, r2
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	440b      	add	r3, r1
 800780e:	3320      	adds	r3, #32
 8007810:	6819      	ldr	r1, [r3, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007816:	4613      	mov	r3, r2
 8007818:	00db      	lsls	r3, r3, #3
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	4403      	add	r3, r0
 8007820:	331c      	adds	r3, #28
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4419      	add	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800782a:	4613      	mov	r3, r2
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4403      	add	r3, r0
 8007834:	3320      	adds	r3, #32
 8007836:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783a:	2b00      	cmp	r3, #0
 800783c:	d113      	bne.n	8007866 <HAL_PCD_IRQHandler+0x3a2>
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007842:	4613      	mov	r3, r2
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	4413      	add	r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	440b      	add	r3, r1
 800784c:	3324      	adds	r3, #36	@ 0x24
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d108      	bne.n	8007866 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6818      	ldr	r0, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800785e:	461a      	mov	r2, r3
 8007860:	2101      	movs	r1, #1
 8007862:	f003 fb41 	bl	800aee8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007868:	b2db      	uxtb	r3, r3
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f005 feb4 	bl	800d5da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	f003 0308 	and.w	r3, r3, #8
 8007878:	2b00      	cmp	r3, #0
 800787a:	d008      	beq.n	800788e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800787c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	4413      	add	r3, r2
 8007884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007888:	461a      	mov	r2, r3
 800788a:	2308      	movs	r3, #8
 800788c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	f003 0310 	and.w	r3, r3, #16
 8007894:	2b00      	cmp	r3, #0
 8007896:	d008      	beq.n	80078aa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078a4:	461a      	mov	r2, r3
 80078a6:	2310      	movs	r3, #16
 80078a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d008      	beq.n	80078c6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80078b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078c0:	461a      	mov	r2, r3
 80078c2:	2340      	movs	r3, #64	@ 0x40
 80078c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d023      	beq.n	8007918 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80078d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80078d2:	6a38      	ldr	r0, [r7, #32]
 80078d4:	f002 fb28 	bl	8009f28 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80078d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078da:	4613      	mov	r3, r2
 80078dc:	00db      	lsls	r3, r3, #3
 80078de:	4413      	add	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	3310      	adds	r3, #16
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	4413      	add	r3, r2
 80078e8:	3304      	adds	r3, #4
 80078ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	78db      	ldrb	r3, [r3, #3]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d108      	bne.n	8007906 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	2200      	movs	r2, #0
 80078f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80078fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f005 fef7 	bl	800d6f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007912:	461a      	mov	r2, r3
 8007914:	2302      	movs	r3, #2
 8007916:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800791e:	2b00      	cmp	r3, #0
 8007920:	d003      	beq.n	800792a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007922:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fcbd 	bl	80082a4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792c:	3301      	adds	r3, #1
 800792e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007932:	085b      	lsrs	r3, r3, #1
 8007934:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007938:	2b00      	cmp	r3, #0
 800793a:	f47f af2e 	bne.w	800779a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4618      	mov	r0, r3
 8007944:	f003 fa0c 	bl	800ad60 <USB_ReadInterrupts>
 8007948:	4603      	mov	r3, r0
 800794a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800794e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007952:	d122      	bne.n	800799a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	69fa      	ldr	r2, [r7, #28]
 800795e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007962:	f023 0301 	bic.w	r3, r3, #1
 8007966:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800796e:	2b01      	cmp	r3, #1
 8007970:	d108      	bne.n	8007984 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800797a:	2100      	movs	r1, #0
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fea3 	bl	80086c8 <HAL_PCDEx_LPM_Callback>
 8007982:	e002      	b.n	800798a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f005 fe95 	bl	800d6b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	695a      	ldr	r2, [r3, #20]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4618      	mov	r0, r3
 80079a0:	f003 f9de 	bl	800ad60 <USB_ReadInterrupts>
 80079a4:	4603      	mov	r3, r0
 80079a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079ae:	d112      	bne.n	80079d6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d102      	bne.n	80079c6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f005 fe51 	bl	800d668 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	695a      	ldr	r2, [r3, #20]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80079d4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4618      	mov	r0, r3
 80079dc:	f003 f9c0 	bl	800ad60 <USB_ReadInterrupts>
 80079e0:	4603      	mov	r3, r0
 80079e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ea:	f040 80b7 	bne.w	8007b5c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	69fa      	ldr	r2, [r7, #28]
 80079f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079fc:	f023 0301 	bic.w	r3, r3, #1
 8007a00:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2110      	movs	r1, #16
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f002 fa8d 	bl	8009f28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a0e:	2300      	movs	r3, #0
 8007a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a12:	e046      	b.n	8007aa2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a16:	015a      	lsls	r2, r3, #5
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a20:	461a      	mov	r2, r3
 8007a22:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a26:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2a:	015a      	lsls	r2, r3, #5
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	4413      	add	r3, r2
 8007a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a38:	0151      	lsls	r1, r2, #5
 8007a3a:	69fa      	ldr	r2, [r7, #28]
 8007a3c:	440a      	add	r2, r1
 8007a3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a42:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a46:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a54:	461a      	mov	r2, r3
 8007a56:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a5a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a6c:	0151      	lsls	r1, r2, #5
 8007a6e:	69fa      	ldr	r2, [r7, #28]
 8007a70:	440a      	add	r2, r1
 8007a72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a7a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a8c:	0151      	lsls	r1, r2, #5
 8007a8e:	69fa      	ldr	r2, [r7, #28]
 8007a90:	440a      	add	r2, r1
 8007a92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a9a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	791b      	ldrb	r3, [r3, #4]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d3b2      	bcc.n	8007a14 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	69fa      	ldr	r2, [r7, #28]
 8007ab8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007abc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007ac0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	7bdb      	ldrb	r3, [r3, #15]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d016      	beq.n	8007af8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ad4:	69fa      	ldr	r2, [r7, #28]
 8007ad6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ada:	f043 030b 	orr.w	r3, r3, #11
 8007ade:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aea:	69fa      	ldr	r2, [r7, #28]
 8007aec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007af0:	f043 030b 	orr.w	r3, r3, #11
 8007af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8007af6:	e015      	b.n	8007b24 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	69fa      	ldr	r2, [r7, #28]
 8007b02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b06:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007b0a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007b0e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b16:	691b      	ldr	r3, [r3, #16]
 8007b18:	69fa      	ldr	r2, [r7, #28]
 8007b1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b1e:	f043 030b 	orr.w	r3, r3, #11
 8007b22:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	69fa      	ldr	r2, [r7, #28]
 8007b2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b32:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007b36:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6818      	ldr	r0, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007b46:	461a      	mov	r2, r3
 8007b48:	f003 f9ce 	bl	800aee8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	695a      	ldr	r2, [r3, #20]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8007b5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f003 f8fd 	bl	800ad60 <USB_ReadInterrupts>
 8007b66:	4603      	mov	r3, r0
 8007b68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b70:	d123      	bne.n	8007bba <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f003 f993 	bl	800aea2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f002 fa4a 	bl	800a01a <USB_GetDevSpeed>
 8007b86:	4603      	mov	r3, r0
 8007b88:	461a      	mov	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681c      	ldr	r4, [r3, #0]
 8007b92:	f001 f9c9 	bl	8008f28 <HAL_RCC_GetHCLKFreq>
 8007b96:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	f001 ff4e 	bl	8009a40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f005 fd40 	bl	800d62a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	695a      	ldr	r2, [r3, #20]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007bb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f003 f8ce 	bl	800ad60 <USB_ReadInterrupts>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	f003 0308 	and.w	r3, r3, #8
 8007bca:	2b08      	cmp	r3, #8
 8007bcc:	d10a      	bne.n	8007be4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f005 fd1d 	bl	800d60e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	695a      	ldr	r2, [r3, #20]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f002 0208 	and.w	r2, r2, #8
 8007be2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4618      	mov	r0, r3
 8007bea:	f003 f8b9 	bl	800ad60 <USB_ReadInterrupts>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bf4:	2b80      	cmp	r3, #128	@ 0x80
 8007bf6:	d123      	bne.n	8007c40 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c04:	2301      	movs	r3, #1
 8007c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c08:	e014      	b.n	8007c34 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c0e:	4613      	mov	r3, r2
 8007c10:	00db      	lsls	r3, r3, #3
 8007c12:	4413      	add	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	440b      	add	r3, r1
 8007c18:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d105      	bne.n	8007c2e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fb0a 	bl	8008242 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c30:	3301      	adds	r3, #1
 8007c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	791b      	ldrb	r3, [r3, #4]
 8007c38:	461a      	mov	r2, r3
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d3e4      	bcc.n	8007c0a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f003 f88b 	bl	800ad60 <USB_ReadInterrupts>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c54:	d13c      	bne.n	8007cd0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c56:	2301      	movs	r3, #1
 8007c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c5a:	e02b      	b.n	8007cb4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007c6c:	6879      	ldr	r1, [r7, #4]
 8007c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c70:	4613      	mov	r3, r2
 8007c72:	00db      	lsls	r3, r3, #3
 8007c74:	4413      	add	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	440b      	add	r3, r1
 8007c7a:	3318      	adds	r3, #24
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d115      	bne.n	8007cae <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007c82:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	da12      	bge.n	8007cae <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007c88:	6879      	ldr	r1, [r7, #4]
 8007c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	4413      	add	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	440b      	add	r3, r1
 8007c96:	3317      	adds	r3, #23
 8007c98:	2201      	movs	r2, #1
 8007c9a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 faca 	bl	8008242 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	791b      	ldrb	r3, [r3, #4]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d3cd      	bcc.n	8007c5c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	695a      	ldr	r2, [r3, #20]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f003 f843 	bl	800ad60 <USB_ReadInterrupts>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007ce0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ce4:	d156      	bne.n	8007d94 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cea:	e045      	b.n	8007d78 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cee:	015a      	lsls	r2, r3, #5
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007cfc:	6879      	ldr	r1, [r7, #4]
 8007cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d00:	4613      	mov	r3, r2
 8007d02:	00db      	lsls	r3, r3, #3
 8007d04:	4413      	add	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	440b      	add	r3, r1
 8007d0a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d12e      	bne.n	8007d72 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007d14:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	da2b      	bge.n	8007d72 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	0c1a      	lsrs	r2, r3, #16
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007d24:	4053      	eors	r3, r2
 8007d26:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d121      	bne.n	8007d72 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d32:	4613      	mov	r3, r2
 8007d34:	00db      	lsls	r3, r3, #3
 8007d36:	4413      	add	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	440b      	add	r3, r1
 8007d3c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007d40:	2201      	movs	r2, #1
 8007d42:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007d44:	6a3b      	ldr	r3, [r7, #32]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10a      	bne.n	8007d72 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	69fa      	ldr	r2, [r7, #28]
 8007d66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007d6e:	6053      	str	r3, [r2, #4]
            break;
 8007d70:	e008      	b.n	8007d84 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d74:	3301      	adds	r3, #1
 8007d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	791b      	ldrb	r3, [r3, #4]
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d3b3      	bcc.n	8007cec <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	695a      	ldr	r2, [r3, #20]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007d92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f002 ffe1 	bl	800ad60 <USB_ReadInterrupts>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007da8:	d10a      	bne.n	8007dc0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f005 fcb4 	bl	800d718 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	695a      	ldr	r2, [r3, #20]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007dbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f002 ffcb 	bl	800ad60 <USB_ReadInterrupts>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d115      	bne.n	8007e00 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	f003 0304 	and.w	r3, r3, #4
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f005 fca4 	bl	800d734 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6859      	ldr	r1, [r3, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	605a      	str	r2, [r3, #4]
 8007dfc:	e000      	b.n	8007e00 <HAL_PCD_IRQHandler+0x93c>
      return;
 8007dfe:	bf00      	nop
    }
  }
}
 8007e00:	3734      	adds	r7, #52	@ 0x34
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd90      	pop	{r4, r7, pc}

08007e06 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b082      	sub	sp, #8
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	460b      	mov	r3, r1
 8007e10:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d101      	bne.n	8007e20 <HAL_PCD_SetAddress+0x1a>
 8007e1c:	2302      	movs	r3, #2
 8007e1e:	e012      	b.n	8007e46 <HAL_PCD_SetAddress+0x40>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	78fa      	ldrb	r2, [r7, #3]
 8007e2c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	78fa      	ldrb	r2, [r7, #3]
 8007e34:	4611      	mov	r1, r2
 8007e36:	4618      	mov	r0, r3
 8007e38:	f002 ff2a 	bl	800ac90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007e44:	2300      	movs	r3, #0
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	4608      	mov	r0, r1
 8007e58:	4611      	mov	r1, r2
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	70fb      	strb	r3, [r7, #3]
 8007e60:	460b      	mov	r3, r1
 8007e62:	803b      	strh	r3, [r7, #0]
 8007e64:	4613      	mov	r3, r2
 8007e66:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007e6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	da0f      	bge.n	8007e94 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e74:	78fb      	ldrb	r3, [r7, #3]
 8007e76:	f003 020f 	and.w	r2, r3, #15
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	00db      	lsls	r3, r3, #3
 8007e7e:	4413      	add	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	3310      	adds	r3, #16
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	4413      	add	r3, r2
 8007e88:	3304      	adds	r3, #4
 8007e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	705a      	strb	r2, [r3, #1]
 8007e92:	e00f      	b.n	8007eb4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007e94:	78fb      	ldrb	r3, [r7, #3]
 8007e96:	f003 020f 	and.w	r2, r3, #15
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	00db      	lsls	r3, r3, #3
 8007e9e:	4413      	add	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	3304      	adds	r3, #4
 8007eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007eb4:	78fb      	ldrb	r3, [r7, #3]
 8007eb6:	f003 030f 	and.w	r3, r3, #15
 8007eba:	b2da      	uxtb	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007ec0:	883b      	ldrh	r3, [r7, #0]
 8007ec2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	78ba      	ldrb	r2, [r7, #2]
 8007ece:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	785b      	ldrb	r3, [r3, #1]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d004      	beq.n	8007ee2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	461a      	mov	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007ee2:	78bb      	ldrb	r3, [r7, #2]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d102      	bne.n	8007eee <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d101      	bne.n	8007efc <HAL_PCD_EP_Open+0xae>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	e00e      	b.n	8007f1a <HAL_PCD_EP_Open+0xcc>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68f9      	ldr	r1, [r7, #12]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f002 f8aa 	bl	800a064 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007f18:	7afb      	ldrb	r3, [r7, #11]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b084      	sub	sp, #16
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007f2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	da0f      	bge.n	8007f56 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f36:	78fb      	ldrb	r3, [r7, #3]
 8007f38:	f003 020f 	and.w	r2, r3, #15
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	00db      	lsls	r3, r3, #3
 8007f40:	4413      	add	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	3310      	adds	r3, #16
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	4413      	add	r3, r2
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2201      	movs	r2, #1
 8007f52:	705a      	strb	r2, [r3, #1]
 8007f54:	e00f      	b.n	8007f76 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f56:	78fb      	ldrb	r3, [r7, #3]
 8007f58:	f003 020f 	and.w	r2, r3, #15
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	00db      	lsls	r3, r3, #3
 8007f60:	4413      	add	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f76:	78fb      	ldrb	r3, [r7, #3]
 8007f78:	f003 030f 	and.w	r3, r3, #15
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d101      	bne.n	8007f90 <HAL_PCD_EP_Close+0x6e>
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	e00e      	b.n	8007fae <HAL_PCD_EP_Close+0x8c>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2201      	movs	r2, #1
 8007f94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68f9      	ldr	r1, [r7, #12]
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f002 f8e8 	bl	800a174 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b086      	sub	sp, #24
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	60f8      	str	r0, [r7, #12]
 8007fbe:	607a      	str	r2, [r7, #4]
 8007fc0:	603b      	str	r3, [r7, #0]
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007fc6:	7afb      	ldrb	r3, [r7, #11]
 8007fc8:	f003 020f 	and.w	r2, r3, #15
 8007fcc:	4613      	mov	r3, r2
 8007fce:	00db      	lsls	r3, r3, #3
 8007fd0:	4413      	add	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	4413      	add	r3, r2
 8007fdc:	3304      	adds	r3, #4
 8007fde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ff8:	7afb      	ldrb	r3, [r7, #11]
 8007ffa:	f003 030f 	and.w	r3, r3, #15
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	799b      	ldrb	r3, [r3, #6]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d102      	bne.n	8008012 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6818      	ldr	r0, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	799b      	ldrb	r3, [r3, #6]
 800801a:	461a      	mov	r2, r3
 800801c:	6979      	ldr	r1, [r7, #20]
 800801e:	f002 f985 	bl	800a32c <USB_EPStartXfer>

  return HAL_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3718      	adds	r7, #24
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008038:	78fb      	ldrb	r3, [r7, #3]
 800803a:	f003 020f 	and.w	r2, r3, #15
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	4613      	mov	r3, r2
 8008042:	00db      	lsls	r3, r3, #3
 8008044:	4413      	add	r3, r2
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	440b      	add	r3, r1
 800804a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800804e:	681b      	ldr	r3, [r3, #0]
}
 8008050:	4618      	mov	r0, r3
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	607a      	str	r2, [r7, #4]
 8008066:	603b      	str	r3, [r7, #0]
 8008068:	460b      	mov	r3, r1
 800806a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800806c:	7afb      	ldrb	r3, [r7, #11]
 800806e:	f003 020f 	and.w	r2, r3, #15
 8008072:	4613      	mov	r3, r2
 8008074:	00db      	lsls	r3, r3, #3
 8008076:	4413      	add	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	3310      	adds	r3, #16
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	4413      	add	r3, r2
 8008080:	3304      	adds	r3, #4
 8008082:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	683a      	ldr	r2, [r7, #0]
 800808e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	2200      	movs	r2, #0
 8008094:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2201      	movs	r2, #1
 800809a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800809c:	7afb      	ldrb	r3, [r7, #11]
 800809e:	f003 030f 	and.w	r3, r3, #15
 80080a2:	b2da      	uxtb	r2, r3
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	799b      	ldrb	r3, [r3, #6]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d102      	bne.n	80080b6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6818      	ldr	r0, [r3, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	799b      	ldrb	r3, [r3, #6]
 80080be:	461a      	mov	r2, r3
 80080c0:	6979      	ldr	r1, [r7, #20]
 80080c2:	f002 f933 	bl	800a32c <USB_EPStartXfer>

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3718      	adds	r7, #24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80080dc:	78fb      	ldrb	r3, [r7, #3]
 80080de:	f003 030f 	and.w	r3, r3, #15
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	7912      	ldrb	r2, [r2, #4]
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d901      	bls.n	80080ee <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e04f      	b.n	800818e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80080ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	da0f      	bge.n	8008116 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080f6:	78fb      	ldrb	r3, [r7, #3]
 80080f8:	f003 020f 	and.w	r2, r3, #15
 80080fc:	4613      	mov	r3, r2
 80080fe:	00db      	lsls	r3, r3, #3
 8008100:	4413      	add	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	3310      	adds	r3, #16
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	4413      	add	r3, r2
 800810a:	3304      	adds	r3, #4
 800810c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2201      	movs	r2, #1
 8008112:	705a      	strb	r2, [r3, #1]
 8008114:	e00d      	b.n	8008132 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008116:	78fa      	ldrb	r2, [r7, #3]
 8008118:	4613      	mov	r3, r2
 800811a:	00db      	lsls	r3, r3, #3
 800811c:	4413      	add	r3, r2
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	4413      	add	r3, r2
 8008128:	3304      	adds	r3, #4
 800812a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2201      	movs	r2, #1
 8008136:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008138:	78fb      	ldrb	r3, [r7, #3]
 800813a:	f003 030f 	and.w	r3, r3, #15
 800813e:	b2da      	uxtb	r2, r3
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800814a:	2b01      	cmp	r3, #1
 800814c:	d101      	bne.n	8008152 <HAL_PCD_EP_SetStall+0x82>
 800814e:	2302      	movs	r3, #2
 8008150:	e01d      	b.n	800818e <HAL_PCD_EP_SetStall+0xbe>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68f9      	ldr	r1, [r7, #12]
 8008160:	4618      	mov	r0, r3
 8008162:	f002 fcc1 	bl	800aae8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008166:	78fb      	ldrb	r3, [r7, #3]
 8008168:	f003 030f 	and.w	r3, r3, #15
 800816c:	2b00      	cmp	r3, #0
 800816e:	d109      	bne.n	8008184 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6818      	ldr	r0, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	7999      	ldrb	r1, [r3, #6]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800817e:	461a      	mov	r2, r3
 8008180:	f002 feb2 	bl	800aee8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b084      	sub	sp, #16
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	460b      	mov	r3, r1
 80081a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80081a2:	78fb      	ldrb	r3, [r7, #3]
 80081a4:	f003 030f 	and.w	r3, r3, #15
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	7912      	ldrb	r2, [r2, #4]
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d901      	bls.n	80081b4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e042      	b.n	800823a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80081b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	da0f      	bge.n	80081dc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80081bc:	78fb      	ldrb	r3, [r7, #3]
 80081be:	f003 020f 	and.w	r2, r3, #15
 80081c2:	4613      	mov	r3, r2
 80081c4:	00db      	lsls	r3, r3, #3
 80081c6:	4413      	add	r3, r2
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	3310      	adds	r3, #16
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	4413      	add	r3, r2
 80081d0:	3304      	adds	r3, #4
 80081d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2201      	movs	r2, #1
 80081d8:	705a      	strb	r2, [r3, #1]
 80081da:	e00f      	b.n	80081fc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80081dc:	78fb      	ldrb	r3, [r7, #3]
 80081de:	f003 020f 	and.w	r2, r3, #15
 80081e2:	4613      	mov	r3, r2
 80081e4:	00db      	lsls	r3, r3, #3
 80081e6:	4413      	add	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	4413      	add	r3, r2
 80081f2:	3304      	adds	r3, #4
 80081f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008202:	78fb      	ldrb	r3, [r7, #3]
 8008204:	f003 030f 	and.w	r3, r3, #15
 8008208:	b2da      	uxtb	r2, r3
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008214:	2b01      	cmp	r3, #1
 8008216:	d101      	bne.n	800821c <HAL_PCD_EP_ClrStall+0x86>
 8008218:	2302      	movs	r3, #2
 800821a:	e00e      	b.n	800823a <HAL_PCD_EP_ClrStall+0xa4>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68f9      	ldr	r1, [r7, #12]
 800822a:	4618      	mov	r0, r3
 800822c:	f002 fcca 	bl	800abc4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b084      	sub	sp, #16
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	460b      	mov	r3, r1
 800824c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800824e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008252:	2b00      	cmp	r3, #0
 8008254:	da0c      	bge.n	8008270 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008256:	78fb      	ldrb	r3, [r7, #3]
 8008258:	f003 020f 	and.w	r2, r3, #15
 800825c:	4613      	mov	r3, r2
 800825e:	00db      	lsls	r3, r3, #3
 8008260:	4413      	add	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	3310      	adds	r3, #16
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	4413      	add	r3, r2
 800826a:	3304      	adds	r3, #4
 800826c:	60fb      	str	r3, [r7, #12]
 800826e:	e00c      	b.n	800828a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	f003 020f 	and.w	r2, r3, #15
 8008276:	4613      	mov	r3, r2
 8008278:	00db      	lsls	r3, r3, #3
 800827a:	4413      	add	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	4413      	add	r3, r2
 8008286:	3304      	adds	r3, #4
 8008288:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68f9      	ldr	r1, [r7, #12]
 8008290:	4618      	mov	r0, r3
 8008292:	f002 fae9 	bl	800a868 <USB_EPStopXfer>
 8008296:	4603      	mov	r3, r0
 8008298:	72fb      	strb	r3, [r7, #11]

  return ret;
 800829a:	7afb      	ldrb	r3, [r7, #11]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b08a      	sub	sp, #40	@ 0x28
 80082a8:	af02      	add	r7, sp, #8
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	4613      	mov	r3, r2
 80082bc:	00db      	lsls	r3, r3, #3
 80082be:	4413      	add	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	3310      	adds	r3, #16
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	4413      	add	r3, r2
 80082c8:	3304      	adds	r3, #4
 80082ca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	695a      	ldr	r2, [r3, #20]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d901      	bls.n	80082dc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e06b      	b.n	80083b4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	691a      	ldr	r2, [r3, #16]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	69fa      	ldr	r2, [r7, #28]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d902      	bls.n	80082f8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	3303      	adds	r3, #3
 80082fc:	089b      	lsrs	r3, r3, #2
 80082fe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008300:	e02a      	b.n	8008358 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	691a      	ldr	r2, [r3, #16]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	429a      	cmp	r2, r3
 8008316:	d902      	bls.n	800831e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	3303      	adds	r3, #3
 8008322:	089b      	lsrs	r3, r3, #2
 8008324:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	68d9      	ldr	r1, [r3, #12]
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	b2da      	uxtb	r2, r3
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	4603      	mov	r3, r0
 800833a:	6978      	ldr	r0, [r7, #20]
 800833c:	f002 fb3e 	bl	800a9bc <USB_WritePacket>

    ep->xfer_buff  += len;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	68da      	ldr	r2, [r3, #12]
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	441a      	add	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	695a      	ldr	r2, [r3, #20]
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	441a      	add	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	015a      	lsls	r2, r3, #5
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	4413      	add	r3, r2
 8008360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008368:	69ba      	ldr	r2, [r7, #24]
 800836a:	429a      	cmp	r2, r3
 800836c:	d809      	bhi.n	8008382 <PCD_WriteEmptyTxFifo+0xde>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	695a      	ldr	r2, [r3, #20]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008376:	429a      	cmp	r2, r3
 8008378:	d203      	bcs.n	8008382 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1bf      	bne.n	8008302 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	691a      	ldr	r2, [r3, #16]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	429a      	cmp	r2, r3
 800838c:	d811      	bhi.n	80083b2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	f003 030f 	and.w	r3, r3, #15
 8008394:	2201      	movs	r2, #1
 8008396:	fa02 f303 	lsl.w	r3, r2, r3
 800839a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	43db      	mvns	r3, r3
 80083a8:	6939      	ldr	r1, [r7, #16]
 80083aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80083ae:	4013      	ands	r3, r2
 80083b0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3720      	adds	r7, #32
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b088      	sub	sp, #32
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	333c      	adds	r3, #60	@ 0x3c
 80083d4:	3304      	adds	r3, #4
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	799b      	ldrb	r3, [r3, #6]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d17b      	bne.n	80084ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	f003 0308 	and.w	r3, r3, #8
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d015      	beq.n	8008428 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	4a61      	ldr	r2, [pc, #388]	@ (8008584 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008400:	4293      	cmp	r3, r2
 8008402:	f240 80b9 	bls.w	8008578 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 80b3 	beq.w	8008578 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	015a      	lsls	r2, r3, #5
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	4413      	add	r3, r2
 800841a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800841e:	461a      	mov	r2, r3
 8008420:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008424:	6093      	str	r3, [r2, #8]
 8008426:	e0a7      	b.n	8008578 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	f003 0320 	and.w	r3, r3, #32
 800842e:	2b00      	cmp	r3, #0
 8008430:	d009      	beq.n	8008446 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	015a      	lsls	r2, r3, #5
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	4413      	add	r3, r2
 800843a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800843e:	461a      	mov	r2, r3
 8008440:	2320      	movs	r3, #32
 8008442:	6093      	str	r3, [r2, #8]
 8008444:	e098      	b.n	8008578 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800844c:	2b00      	cmp	r3, #0
 800844e:	f040 8093 	bne.w	8008578 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	4a4b      	ldr	r2, [pc, #300]	@ (8008584 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d90f      	bls.n	800847a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00a      	beq.n	800847a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	015a      	lsls	r2, r3, #5
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	4413      	add	r3, r2
 800846c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008470:	461a      	mov	r2, r3
 8008472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008476:	6093      	str	r3, [r2, #8]
 8008478:	e07e      	b.n	8008578 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	4613      	mov	r3, r2
 800847e:	00db      	lsls	r3, r3, #3
 8008480:	4413      	add	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	4413      	add	r3, r2
 800848c:	3304      	adds	r3, #4
 800848e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a1a      	ldr	r2, [r3, #32]
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	0159      	lsls	r1, r3, #5
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	440b      	add	r3, r1
 800849c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084a6:	1ad2      	subs	r2, r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d114      	bne.n	80084dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d109      	bne.n	80084ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6818      	ldr	r0, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80084c4:	461a      	mov	r2, r3
 80084c6:	2101      	movs	r1, #1
 80084c8:	f002 fd0e 	bl	800aee8 <USB_EP0_OutStart>
 80084cc:	e006      	b.n	80084dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	68da      	ldr	r2, [r3, #12]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	441a      	add	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	4619      	mov	r1, r3
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f005 f85e 	bl	800d5a4 <HAL_PCD_DataOutStageCallback>
 80084e8:	e046      	b.n	8008578 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	4a26      	ldr	r2, [pc, #152]	@ (8008588 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d124      	bne.n	800853c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00a      	beq.n	8008512 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	015a      	lsls	r2, r3, #5
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	4413      	add	r3, r2
 8008504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008508:	461a      	mov	r2, r3
 800850a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800850e:	6093      	str	r3, [r2, #8]
 8008510:	e032      	b.n	8008578 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	f003 0320 	and.w	r3, r3, #32
 8008518:	2b00      	cmp	r3, #0
 800851a:	d008      	beq.n	800852e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	4413      	add	r3, r2
 8008524:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008528:	461a      	mov	r2, r3
 800852a:	2320      	movs	r3, #32
 800852c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	b2db      	uxtb	r3, r3
 8008532:	4619      	mov	r1, r3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f005 f835 	bl	800d5a4 <HAL_PCD_DataOutStageCallback>
 800853a:	e01d      	b.n	8008578 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d114      	bne.n	800856c <PCD_EP_OutXfrComplete_int+0x1b0>
 8008542:	6879      	ldr	r1, [r7, #4]
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	4613      	mov	r3, r2
 8008548:	00db      	lsls	r3, r3, #3
 800854a:	4413      	add	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	440b      	add	r3, r1
 8008550:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d108      	bne.n	800856c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6818      	ldr	r0, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008564:	461a      	mov	r2, r3
 8008566:	2100      	movs	r1, #0
 8008568:	f002 fcbe 	bl	800aee8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	b2db      	uxtb	r3, r3
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f005 f816 	bl	800d5a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3720      	adds	r7, #32
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	4f54300a 	.word	0x4f54300a
 8008588:	4f54310a 	.word	0x4f54310a

0800858c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b086      	sub	sp, #24
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	333c      	adds	r3, #60	@ 0x3c
 80085a4:	3304      	adds	r3, #4
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	015a      	lsls	r2, r3, #5
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	4413      	add	r3, r2
 80085b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4a15      	ldr	r2, [pc, #84]	@ (8008614 <PCD_EP_OutSetupPacket_int+0x88>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d90e      	bls.n	80085e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d009      	beq.n	80085e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	015a      	lsls	r2, r3, #5
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	4413      	add	r3, r2
 80085d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085d8:	461a      	mov	r2, r3
 80085da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f004 ffcd 	bl	800d580 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	4a0a      	ldr	r2, [pc, #40]	@ (8008614 <PCD_EP_OutSetupPacket_int+0x88>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d90c      	bls.n	8008608 <PCD_EP_OutSetupPacket_int+0x7c>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	799b      	ldrb	r3, [r3, #6]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d108      	bne.n	8008608 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6818      	ldr	r0, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008600:	461a      	mov	r2, r3
 8008602:	2101      	movs	r1, #1
 8008604:	f002 fc70 	bl	800aee8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	4f54300a 	.word	0x4f54300a

08008618 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	460b      	mov	r3, r1
 8008622:	70fb      	strb	r3, [r7, #3]
 8008624:	4613      	mov	r3, r2
 8008626:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800862e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008630:	78fb      	ldrb	r3, [r7, #3]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d107      	bne.n	8008646 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008636:	883b      	ldrh	r3, [r7, #0]
 8008638:	0419      	lsls	r1, r3, #16
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	430a      	orrs	r2, r1
 8008642:	629a      	str	r2, [r3, #40]	@ 0x28
 8008644:	e028      	b.n	8008698 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800864c:	0c1b      	lsrs	r3, r3, #16
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	4413      	add	r3, r2
 8008652:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008654:	2300      	movs	r3, #0
 8008656:	73fb      	strb	r3, [r7, #15]
 8008658:	e00d      	b.n	8008676 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	7bfb      	ldrb	r3, [r7, #15]
 8008660:	3340      	adds	r3, #64	@ 0x40
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4413      	add	r3, r2
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	0c1b      	lsrs	r3, r3, #16
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	4413      	add	r3, r2
 800866e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008670:	7bfb      	ldrb	r3, [r7, #15]
 8008672:	3301      	adds	r3, #1
 8008674:	73fb      	strb	r3, [r7, #15]
 8008676:	7bfa      	ldrb	r2, [r7, #15]
 8008678:	78fb      	ldrb	r3, [r7, #3]
 800867a:	3b01      	subs	r3, #1
 800867c:	429a      	cmp	r2, r3
 800867e:	d3ec      	bcc.n	800865a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008680:	883b      	ldrh	r3, [r7, #0]
 8008682:	0418      	lsls	r0, r3, #16
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6819      	ldr	r1, [r3, #0]
 8008688:	78fb      	ldrb	r3, [r7, #3]
 800868a:	3b01      	subs	r3, #1
 800868c:	68ba      	ldr	r2, [r7, #8]
 800868e:	4302      	orrs	r2, r0
 8008690:	3340      	adds	r3, #64	@ 0x40
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	440b      	add	r3, r1
 8008696:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3714      	adds	r7, #20
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80086a6:	b480      	push	{r7}
 80086a8:	b083      	sub	sp, #12
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	460b      	mov	r3, r1
 80086b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	887a      	ldrh	r2, [r7, #2]
 80086b8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d101      	bne.n	80086f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e267      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d075      	beq.n	80087ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80086fe:	4b88      	ldr	r3, [pc, #544]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f003 030c 	and.w	r3, r3, #12
 8008706:	2b04      	cmp	r3, #4
 8008708:	d00c      	beq.n	8008724 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800870a:	4b85      	ldr	r3, [pc, #532]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 800870c:	689b      	ldr	r3, [r3, #8]
 800870e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008712:	2b08      	cmp	r3, #8
 8008714:	d112      	bne.n	800873c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008716:	4b82      	ldr	r3, [pc, #520]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800871e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008722:	d10b      	bne.n	800873c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008724:	4b7e      	ldr	r3, [pc, #504]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d05b      	beq.n	80087e8 <HAL_RCC_OscConfig+0x108>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d157      	bne.n	80087e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e242      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008744:	d106      	bne.n	8008754 <HAL_RCC_OscConfig+0x74>
 8008746:	4b76      	ldr	r3, [pc, #472]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a75      	ldr	r2, [pc, #468]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 800874c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	e01d      	b.n	8008790 <HAL_RCC_OscConfig+0xb0>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800875c:	d10c      	bne.n	8008778 <HAL_RCC_OscConfig+0x98>
 800875e:	4b70      	ldr	r3, [pc, #448]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a6f      	ldr	r2, [pc, #444]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 8008764:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008768:	6013      	str	r3, [r2, #0]
 800876a:	4b6d      	ldr	r3, [pc, #436]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a6c      	ldr	r2, [pc, #432]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 8008770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008774:	6013      	str	r3, [r2, #0]
 8008776:	e00b      	b.n	8008790 <HAL_RCC_OscConfig+0xb0>
 8008778:	4b69      	ldr	r3, [pc, #420]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a68      	ldr	r2, [pc, #416]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 800877e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008782:	6013      	str	r3, [r2, #0]
 8008784:	4b66      	ldr	r3, [pc, #408]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a65      	ldr	r2, [pc, #404]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 800878a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800878e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d013      	beq.n	80087c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008798:	f7fa ffe6 	bl	8003768 <HAL_GetTick>
 800879c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800879e:	e008      	b.n	80087b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087a0:	f7fa ffe2 	bl	8003768 <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	2b64      	cmp	r3, #100	@ 0x64
 80087ac:	d901      	bls.n	80087b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e207      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087b2:	4b5b      	ldr	r3, [pc, #364]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d0f0      	beq.n	80087a0 <HAL_RCC_OscConfig+0xc0>
 80087be:	e014      	b.n	80087ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087c0:	f7fa ffd2 	bl	8003768 <HAL_GetTick>
 80087c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087c6:	e008      	b.n	80087da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087c8:	f7fa ffce 	bl	8003768 <HAL_GetTick>
 80087cc:	4602      	mov	r2, r0
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	1ad3      	subs	r3, r2, r3
 80087d2:	2b64      	cmp	r3, #100	@ 0x64
 80087d4:	d901      	bls.n	80087da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80087d6:	2303      	movs	r3, #3
 80087d8:	e1f3      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087da:	4b51      	ldr	r3, [pc, #324]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1f0      	bne.n	80087c8 <HAL_RCC_OscConfig+0xe8>
 80087e6:	e000      	b.n	80087ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0302 	and.w	r3, r3, #2
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d063      	beq.n	80088be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80087f6:	4b4a      	ldr	r3, [pc, #296]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f003 030c 	and.w	r3, r3, #12
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00b      	beq.n	800881a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008802:	4b47      	ldr	r3, [pc, #284]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800880a:	2b08      	cmp	r3, #8
 800880c:	d11c      	bne.n	8008848 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800880e:	4b44      	ldr	r3, [pc, #272]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008816:	2b00      	cmp	r3, #0
 8008818:	d116      	bne.n	8008848 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800881a:	4b41      	ldr	r3, [pc, #260]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0302 	and.w	r3, r3, #2
 8008822:	2b00      	cmp	r3, #0
 8008824:	d005      	beq.n	8008832 <HAL_RCC_OscConfig+0x152>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d001      	beq.n	8008832 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e1c7      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008832:	4b3b      	ldr	r3, [pc, #236]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	4937      	ldr	r1, [pc, #220]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 8008842:	4313      	orrs	r3, r2
 8008844:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008846:	e03a      	b.n	80088be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d020      	beq.n	8008892 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008850:	4b34      	ldr	r3, [pc, #208]	@ (8008924 <HAL_RCC_OscConfig+0x244>)
 8008852:	2201      	movs	r2, #1
 8008854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008856:	f7fa ff87 	bl	8003768 <HAL_GetTick>
 800885a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800885c:	e008      	b.n	8008870 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800885e:	f7fa ff83 	bl	8003768 <HAL_GetTick>
 8008862:	4602      	mov	r2, r0
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	1ad3      	subs	r3, r2, r3
 8008868:	2b02      	cmp	r3, #2
 800886a:	d901      	bls.n	8008870 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e1a8      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008870:	4b2b      	ldr	r3, [pc, #172]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0f0      	beq.n	800885e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800887c:	4b28      	ldr	r3, [pc, #160]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	00db      	lsls	r3, r3, #3
 800888a:	4925      	ldr	r1, [pc, #148]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 800888c:	4313      	orrs	r3, r2
 800888e:	600b      	str	r3, [r1, #0]
 8008890:	e015      	b.n	80088be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008892:	4b24      	ldr	r3, [pc, #144]	@ (8008924 <HAL_RCC_OscConfig+0x244>)
 8008894:	2200      	movs	r2, #0
 8008896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008898:	f7fa ff66 	bl	8003768 <HAL_GetTick>
 800889c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800889e:	e008      	b.n	80088b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088a0:	f7fa ff62 	bl	8003768 <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d901      	bls.n	80088b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e187      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 0302 	and.w	r3, r3, #2
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1f0      	bne.n	80088a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0308 	and.w	r3, r3, #8
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d036      	beq.n	8008938 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d016      	beq.n	8008900 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088d2:	4b15      	ldr	r3, [pc, #84]	@ (8008928 <HAL_RCC_OscConfig+0x248>)
 80088d4:	2201      	movs	r2, #1
 80088d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088d8:	f7fa ff46 	bl	8003768 <HAL_GetTick>
 80088dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088de:	e008      	b.n	80088f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088e0:	f7fa ff42 	bl	8003768 <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d901      	bls.n	80088f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e167      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008920 <HAL_RCC_OscConfig+0x240>)
 80088f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088f6:	f003 0302 	and.w	r3, r3, #2
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d0f0      	beq.n	80088e0 <HAL_RCC_OscConfig+0x200>
 80088fe:	e01b      	b.n	8008938 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008900:	4b09      	ldr	r3, [pc, #36]	@ (8008928 <HAL_RCC_OscConfig+0x248>)
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008906:	f7fa ff2f 	bl	8003768 <HAL_GetTick>
 800890a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800890c:	e00e      	b.n	800892c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800890e:	f7fa ff2b 	bl	8003768 <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	2b02      	cmp	r3, #2
 800891a:	d907      	bls.n	800892c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e150      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
 8008920:	40023800 	.word	0x40023800
 8008924:	42470000 	.word	0x42470000
 8008928:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800892c:	4b88      	ldr	r3, [pc, #544]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 800892e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008930:	f003 0302 	and.w	r3, r3, #2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1ea      	bne.n	800890e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0304 	and.w	r3, r3, #4
 8008940:	2b00      	cmp	r3, #0
 8008942:	f000 8097 	beq.w	8008a74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008946:	2300      	movs	r3, #0
 8008948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800894a:	4b81      	ldr	r3, [pc, #516]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 800894c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800894e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10f      	bne.n	8008976 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008956:	2300      	movs	r3, #0
 8008958:	60bb      	str	r3, [r7, #8]
 800895a:	4b7d      	ldr	r3, [pc, #500]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 800895c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800895e:	4a7c      	ldr	r2, [pc, #496]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008960:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008964:	6413      	str	r3, [r2, #64]	@ 0x40
 8008966:	4b7a      	ldr	r3, [pc, #488]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800896a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800896e:	60bb      	str	r3, [r7, #8]
 8008970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008972:	2301      	movs	r3, #1
 8008974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008976:	4b77      	ldr	r3, [pc, #476]	@ (8008b54 <HAL_RCC_OscConfig+0x474>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800897e:	2b00      	cmp	r3, #0
 8008980:	d118      	bne.n	80089b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008982:	4b74      	ldr	r3, [pc, #464]	@ (8008b54 <HAL_RCC_OscConfig+0x474>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4a73      	ldr	r2, [pc, #460]	@ (8008b54 <HAL_RCC_OscConfig+0x474>)
 8008988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800898c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800898e:	f7fa feeb 	bl	8003768 <HAL_GetTick>
 8008992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008994:	e008      	b.n	80089a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008996:	f7fa fee7 	bl	8003768 <HAL_GetTick>
 800899a:	4602      	mov	r2, r0
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d901      	bls.n	80089a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e10c      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089a8:	4b6a      	ldr	r3, [pc, #424]	@ (8008b54 <HAL_RCC_OscConfig+0x474>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0f0      	beq.n	8008996 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d106      	bne.n	80089ca <HAL_RCC_OscConfig+0x2ea>
 80089bc:	4b64      	ldr	r3, [pc, #400]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089c0:	4a63      	ldr	r2, [pc, #396]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089c2:	f043 0301 	orr.w	r3, r3, #1
 80089c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80089c8:	e01c      	b.n	8008a04 <HAL_RCC_OscConfig+0x324>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	2b05      	cmp	r3, #5
 80089d0:	d10c      	bne.n	80089ec <HAL_RCC_OscConfig+0x30c>
 80089d2:	4b5f      	ldr	r3, [pc, #380]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089d6:	4a5e      	ldr	r2, [pc, #376]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089d8:	f043 0304 	orr.w	r3, r3, #4
 80089dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80089de:	4b5c      	ldr	r3, [pc, #368]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089e2:	4a5b      	ldr	r2, [pc, #364]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089e4:	f043 0301 	orr.w	r3, r3, #1
 80089e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80089ea:	e00b      	b.n	8008a04 <HAL_RCC_OscConfig+0x324>
 80089ec:	4b58      	ldr	r3, [pc, #352]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089f0:	4a57      	ldr	r2, [pc, #348]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089f2:	f023 0301 	bic.w	r3, r3, #1
 80089f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80089f8:	4b55      	ldr	r3, [pc, #340]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089fc:	4a54      	ldr	r2, [pc, #336]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 80089fe:	f023 0304 	bic.w	r3, r3, #4
 8008a02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d015      	beq.n	8008a38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a0c:	f7fa feac 	bl	8003768 <HAL_GetTick>
 8008a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a12:	e00a      	b.n	8008a2a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a14:	f7fa fea8 	bl	8003768 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d901      	bls.n	8008a2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e0cb      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a2a:	4b49      	ldr	r3, [pc, #292]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a2e:	f003 0302 	and.w	r3, r3, #2
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d0ee      	beq.n	8008a14 <HAL_RCC_OscConfig+0x334>
 8008a36:	e014      	b.n	8008a62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a38:	f7fa fe96 	bl	8003768 <HAL_GetTick>
 8008a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a3e:	e00a      	b.n	8008a56 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a40:	f7fa fe92 	bl	8003768 <HAL_GetTick>
 8008a44:	4602      	mov	r2, r0
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d901      	bls.n	8008a56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e0b5      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a56:	4b3e      	ldr	r3, [pc, #248]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008a5a:	f003 0302 	and.w	r3, r3, #2
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1ee      	bne.n	8008a40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008a62:	7dfb      	ldrb	r3, [r7, #23]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d105      	bne.n	8008a74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a68:	4b39      	ldr	r3, [pc, #228]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a6c:	4a38      	ldr	r2, [pc, #224]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 80a1 	beq.w	8008bc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a7e:	4b34      	ldr	r3, [pc, #208]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f003 030c 	and.w	r3, r3, #12
 8008a86:	2b08      	cmp	r3, #8
 8008a88:	d05c      	beq.n	8008b44 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d141      	bne.n	8008b16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a92:	4b31      	ldr	r3, [pc, #196]	@ (8008b58 <HAL_RCC_OscConfig+0x478>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a98:	f7fa fe66 	bl	8003768 <HAL_GetTick>
 8008a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a9e:	e008      	b.n	8008ab2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008aa0:	f7fa fe62 	bl	8003768 <HAL_GetTick>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	d901      	bls.n	8008ab2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	e087      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ab2:	4b27      	ldr	r3, [pc, #156]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1f0      	bne.n	8008aa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	69da      	ldr	r2, [r3, #28]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008acc:	019b      	lsls	r3, r3, #6
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad4:	085b      	lsrs	r3, r3, #1
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	041b      	lsls	r3, r3, #16
 8008ada:	431a      	orrs	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae0:	061b      	lsls	r3, r3, #24
 8008ae2:	491b      	ldr	r1, [pc, #108]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8008b58 <HAL_RCC_OscConfig+0x478>)
 8008aea:	2201      	movs	r2, #1
 8008aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008aee:	f7fa fe3b 	bl	8003768 <HAL_GetTick>
 8008af2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008af4:	e008      	b.n	8008b08 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008af6:	f7fa fe37 	bl	8003768 <HAL_GetTick>
 8008afa:	4602      	mov	r2, r0
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d901      	bls.n	8008b08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e05c      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b08:	4b11      	ldr	r3, [pc, #68]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d0f0      	beq.n	8008af6 <HAL_RCC_OscConfig+0x416>
 8008b14:	e054      	b.n	8008bc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b16:	4b10      	ldr	r3, [pc, #64]	@ (8008b58 <HAL_RCC_OscConfig+0x478>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b1c:	f7fa fe24 	bl	8003768 <HAL_GetTick>
 8008b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b22:	e008      	b.n	8008b36 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b24:	f7fa fe20 	bl	8003768 <HAL_GetTick>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d901      	bls.n	8008b36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e045      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b36:	4b06      	ldr	r3, [pc, #24]	@ (8008b50 <HAL_RCC_OscConfig+0x470>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1f0      	bne.n	8008b24 <HAL_RCC_OscConfig+0x444>
 8008b42:	e03d      	b.n	8008bc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d107      	bne.n	8008b5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e038      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
 8008b50:	40023800 	.word	0x40023800
 8008b54:	40007000 	.word	0x40007000
 8008b58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8008bcc <HAL_RCC_OscConfig+0x4ec>)
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d028      	beq.n	8008bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d121      	bne.n	8008bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d11a      	bne.n	8008bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008b92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d111      	bne.n	8008bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba2:	085b      	lsrs	r3, r3, #1
 8008ba4:	3b01      	subs	r3, #1
 8008ba6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d107      	bne.n	8008bbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d001      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e000      	b.n	8008bc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	40023800 	.word	0x40023800

08008bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e0cc      	b.n	8008d7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008be4:	4b68      	ldr	r3, [pc, #416]	@ (8008d88 <HAL_RCC_ClockConfig+0x1b8>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0307 	and.w	r3, r3, #7
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d90c      	bls.n	8008c0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bf2:	4b65      	ldr	r3, [pc, #404]	@ (8008d88 <HAL_RCC_ClockConfig+0x1b8>)
 8008bf4:	683a      	ldr	r2, [r7, #0]
 8008bf6:	b2d2      	uxtb	r2, r2
 8008bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bfa:	4b63      	ldr	r3, [pc, #396]	@ (8008d88 <HAL_RCC_ClockConfig+0x1b8>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f003 0307 	and.w	r3, r3, #7
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d001      	beq.n	8008c0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e0b8      	b.n	8008d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0302 	and.w	r3, r3, #2
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d020      	beq.n	8008c5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0304 	and.w	r3, r3, #4
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d005      	beq.n	8008c30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c24:	4b59      	ldr	r3, [pc, #356]	@ (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	4a58      	ldr	r2, [pc, #352]	@ (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008c2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008c2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f003 0308 	and.w	r3, r3, #8
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d005      	beq.n	8008c48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c3c:	4b53      	ldr	r3, [pc, #332]	@ (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	4a52      	ldr	r2, [pc, #328]	@ (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008c42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008c46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c48:	4b50      	ldr	r3, [pc, #320]	@ (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	494d      	ldr	r1, [pc, #308]	@ (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008c56:	4313      	orrs	r3, r2
 8008c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d044      	beq.n	8008cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d107      	bne.n	8008c7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c6e:	4b47      	ldr	r3, [pc, #284]	@ (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d119      	bne.n	8008cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e07f      	b.n	8008d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d003      	beq.n	8008c8e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d107      	bne.n	8008c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c8e:	4b3f      	ldr	r3, [pc, #252]	@ (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d109      	bne.n	8008cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e06f      	b.n	8008d7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c9e:	4b3b      	ldr	r3, [pc, #236]	@ (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e067      	b.n	8008d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008cae:	4b37      	ldr	r3, [pc, #220]	@ (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	f023 0203 	bic.w	r2, r3, #3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	4934      	ldr	r1, [pc, #208]	@ (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008cc0:	f7fa fd52 	bl	8003768 <HAL_GetTick>
 8008cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cc6:	e00a      	b.n	8008cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cc8:	f7fa fd4e 	bl	8003768 <HAL_GetTick>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d901      	bls.n	8008cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e04f      	b.n	8008d7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cde:	4b2b      	ldr	r3, [pc, #172]	@ (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	f003 020c 	and.w	r2, r3, #12
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d1eb      	bne.n	8008cc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008cf0:	4b25      	ldr	r3, [pc, #148]	@ (8008d88 <HAL_RCC_ClockConfig+0x1b8>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0307 	and.w	r3, r3, #7
 8008cf8:	683a      	ldr	r2, [r7, #0]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d20c      	bcs.n	8008d18 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cfe:	4b22      	ldr	r3, [pc, #136]	@ (8008d88 <HAL_RCC_ClockConfig+0x1b8>)
 8008d00:	683a      	ldr	r2, [r7, #0]
 8008d02:	b2d2      	uxtb	r2, r2
 8008d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d06:	4b20      	ldr	r3, [pc, #128]	@ (8008d88 <HAL_RCC_ClockConfig+0x1b8>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 0307 	and.w	r3, r3, #7
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d001      	beq.n	8008d18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e032      	b.n	8008d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 0304 	and.w	r3, r3, #4
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d008      	beq.n	8008d36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d24:	4b19      	ldr	r3, [pc, #100]	@ (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	4916      	ldr	r1, [pc, #88]	@ (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008d32:	4313      	orrs	r3, r2
 8008d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f003 0308 	and.w	r3, r3, #8
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d009      	beq.n	8008d56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d42:	4b12      	ldr	r3, [pc, #72]	@ (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	00db      	lsls	r3, r3, #3
 8008d50:	490e      	ldr	r1, [pc, #56]	@ (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008d56:	f000 f821 	bl	8008d9c <HAL_RCC_GetSysClockFreq>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8008d8c <HAL_RCC_ClockConfig+0x1bc>)
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	091b      	lsrs	r3, r3, #4
 8008d62:	f003 030f 	and.w	r3, r3, #15
 8008d66:	490a      	ldr	r1, [pc, #40]	@ (8008d90 <HAL_RCC_ClockConfig+0x1c0>)
 8008d68:	5ccb      	ldrb	r3, [r1, r3]
 8008d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d6e:	4a09      	ldr	r2, [pc, #36]	@ (8008d94 <HAL_RCC_ClockConfig+0x1c4>)
 8008d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008d72:	4b09      	ldr	r3, [pc, #36]	@ (8008d98 <HAL_RCC_ClockConfig+0x1c8>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7fa fcb2 	bl	80036e0 <HAL_InitTick>

  return HAL_OK;
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	40023c00 	.word	0x40023c00
 8008d8c:	40023800 	.word	0x40023800
 8008d90:	08014214 	.word	0x08014214
 8008d94:	2000002c 	.word	0x2000002c
 8008d98:	20000030 	.word	0x20000030

08008d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008da0:	b090      	sub	sp, #64	@ 0x40
 8008da2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008da4:	2300      	movs	r3, #0
 8008da6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008da8:	2300      	movs	r3, #0
 8008daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008db0:	2300      	movs	r3, #0
 8008db2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008db4:	4b59      	ldr	r3, [pc, #356]	@ (8008f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	f003 030c 	and.w	r3, r3, #12
 8008dbc:	2b08      	cmp	r3, #8
 8008dbe:	d00d      	beq.n	8008ddc <HAL_RCC_GetSysClockFreq+0x40>
 8008dc0:	2b08      	cmp	r3, #8
 8008dc2:	f200 80a1 	bhi.w	8008f08 <HAL_RCC_GetSysClockFreq+0x16c>
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8008dca:	2b04      	cmp	r3, #4
 8008dcc:	d003      	beq.n	8008dd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8008dce:	e09b      	b.n	8008f08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008dd0:	4b53      	ldr	r3, [pc, #332]	@ (8008f20 <HAL_RCC_GetSysClockFreq+0x184>)
 8008dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008dd4:	e09b      	b.n	8008f0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008dd6:	4b53      	ldr	r3, [pc, #332]	@ (8008f24 <HAL_RCC_GetSysClockFreq+0x188>)
 8008dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008dda:	e098      	b.n	8008f0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ddc:	4b4f      	ldr	r3, [pc, #316]	@ (8008f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008de4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008de6:	4b4d      	ldr	r3, [pc, #308]	@ (8008f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d028      	beq.n	8008e44 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008df2:	4b4a      	ldr	r3, [pc, #296]	@ (8008f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	099b      	lsrs	r3, r3, #6
 8008df8:	2200      	movs	r2, #0
 8008dfa:	623b      	str	r3, [r7, #32]
 8008dfc:	627a      	str	r2, [r7, #36]	@ 0x24
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008e04:	2100      	movs	r1, #0
 8008e06:	4b47      	ldr	r3, [pc, #284]	@ (8008f24 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e08:	fb03 f201 	mul.w	r2, r3, r1
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	fb00 f303 	mul.w	r3, r0, r3
 8008e12:	4413      	add	r3, r2
 8008e14:	4a43      	ldr	r2, [pc, #268]	@ (8008f24 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e16:	fba0 1202 	umull	r1, r2, r0, r2
 8008e1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e1c:	460a      	mov	r2, r1
 8008e1e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008e20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e22:	4413      	add	r3, r2
 8008e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e28:	2200      	movs	r2, #0
 8008e2a:	61bb      	str	r3, [r7, #24]
 8008e2c:	61fa      	str	r2, [r7, #28]
 8008e2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e32:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008e36:	f7f7 fe19 	bl	8000a6c <__aeabi_uldivmod>
 8008e3a:	4602      	mov	r2, r0
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	4613      	mov	r3, r2
 8008e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e42:	e053      	b.n	8008eec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e44:	4b35      	ldr	r3, [pc, #212]	@ (8008f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	099b      	lsrs	r3, r3, #6
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	613b      	str	r3, [r7, #16]
 8008e4e:	617a      	str	r2, [r7, #20]
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008e56:	f04f 0b00 	mov.w	fp, #0
 8008e5a:	4652      	mov	r2, sl
 8008e5c:	465b      	mov	r3, fp
 8008e5e:	f04f 0000 	mov.w	r0, #0
 8008e62:	f04f 0100 	mov.w	r1, #0
 8008e66:	0159      	lsls	r1, r3, #5
 8008e68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e6c:	0150      	lsls	r0, r2, #5
 8008e6e:	4602      	mov	r2, r0
 8008e70:	460b      	mov	r3, r1
 8008e72:	ebb2 080a 	subs.w	r8, r2, sl
 8008e76:	eb63 090b 	sbc.w	r9, r3, fp
 8008e7a:	f04f 0200 	mov.w	r2, #0
 8008e7e:	f04f 0300 	mov.w	r3, #0
 8008e82:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008e86:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008e8a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008e8e:	ebb2 0408 	subs.w	r4, r2, r8
 8008e92:	eb63 0509 	sbc.w	r5, r3, r9
 8008e96:	f04f 0200 	mov.w	r2, #0
 8008e9a:	f04f 0300 	mov.w	r3, #0
 8008e9e:	00eb      	lsls	r3, r5, #3
 8008ea0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ea4:	00e2      	lsls	r2, r4, #3
 8008ea6:	4614      	mov	r4, r2
 8008ea8:	461d      	mov	r5, r3
 8008eaa:	eb14 030a 	adds.w	r3, r4, sl
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	eb45 030b 	adc.w	r3, r5, fp
 8008eb4:	607b      	str	r3, [r7, #4]
 8008eb6:	f04f 0200 	mov.w	r2, #0
 8008eba:	f04f 0300 	mov.w	r3, #0
 8008ebe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008ec2:	4629      	mov	r1, r5
 8008ec4:	028b      	lsls	r3, r1, #10
 8008ec6:	4621      	mov	r1, r4
 8008ec8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ecc:	4621      	mov	r1, r4
 8008ece:	028a      	lsls	r2, r1, #10
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	60bb      	str	r3, [r7, #8]
 8008eda:	60fa      	str	r2, [r7, #12]
 8008edc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ee0:	f7f7 fdc4 	bl	8000a6c <__aeabi_uldivmod>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4613      	mov	r3, r2
 8008eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008eec:	4b0b      	ldr	r3, [pc, #44]	@ (8008f1c <HAL_RCC_GetSysClockFreq+0x180>)
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	0c1b      	lsrs	r3, r3, #16
 8008ef2:	f003 0303 	and.w	r3, r3, #3
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	005b      	lsls	r3, r3, #1
 8008efa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008efc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008f06:	e002      	b.n	8008f0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f08:	4b05      	ldr	r3, [pc, #20]	@ (8008f20 <HAL_RCC_GetSysClockFreq+0x184>)
 8008f0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008f0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3740      	adds	r7, #64	@ 0x40
 8008f14:	46bd      	mov	sp, r7
 8008f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f1a:	bf00      	nop
 8008f1c:	40023800 	.word	0x40023800
 8008f20:	00f42400 	.word	0x00f42400
 8008f24:	017d7840 	.word	0x017d7840

08008f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f2c:	4b03      	ldr	r3, [pc, #12]	@ (8008f3c <HAL_RCC_GetHCLKFreq+0x14>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	2000002c 	.word	0x2000002c

08008f40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008f44:	f7ff fff0 	bl	8008f28 <HAL_RCC_GetHCLKFreq>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	4b05      	ldr	r3, [pc, #20]	@ (8008f60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	0a9b      	lsrs	r3, r3, #10
 8008f50:	f003 0307 	and.w	r3, r3, #7
 8008f54:	4903      	ldr	r1, [pc, #12]	@ (8008f64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f56:	5ccb      	ldrb	r3, [r1, r3]
 8008f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	40023800 	.word	0x40023800
 8008f64:	08014224 	.word	0x08014224

08008f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d101      	bne.n	8008f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e041      	b.n	8008ffe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d106      	bne.n	8008f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7fa fa34 	bl	80033fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2202      	movs	r2, #2
 8008f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	3304      	adds	r3, #4
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4610      	mov	r0, r2
 8008fa8:	f000 fab2 	bl	8009510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
	...

08009008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b01      	cmp	r3, #1
 800901a:	d001      	beq.n	8009020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e044      	b.n	80090aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2202      	movs	r2, #2
 8009024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68da      	ldr	r2, [r3, #12]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f042 0201 	orr.w	r2, r2, #1
 8009036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a1e      	ldr	r2, [pc, #120]	@ (80090b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d018      	beq.n	8009074 <HAL_TIM_Base_Start_IT+0x6c>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800904a:	d013      	beq.n	8009074 <HAL_TIM_Base_Start_IT+0x6c>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a1a      	ldr	r2, [pc, #104]	@ (80090bc <HAL_TIM_Base_Start_IT+0xb4>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d00e      	beq.n	8009074 <HAL_TIM_Base_Start_IT+0x6c>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a19      	ldr	r2, [pc, #100]	@ (80090c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d009      	beq.n	8009074 <HAL_TIM_Base_Start_IT+0x6c>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a17      	ldr	r2, [pc, #92]	@ (80090c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d004      	beq.n	8009074 <HAL_TIM_Base_Start_IT+0x6c>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a16      	ldr	r2, [pc, #88]	@ (80090c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d111      	bne.n	8009098 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f003 0307 	and.w	r3, r3, #7
 800907e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2b06      	cmp	r3, #6
 8009084:	d010      	beq.n	80090a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f042 0201 	orr.w	r2, r2, #1
 8009094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009096:	e007      	b.n	80090a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f042 0201 	orr.w	r2, r2, #1
 80090a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	40010000 	.word	0x40010000
 80090bc:	40000400 	.word	0x40000400
 80090c0:	40000800 	.word	0x40000800
 80090c4:	40000c00 	.word	0x40000c00
 80090c8:	40014000 	.word	0x40014000

080090cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	f003 0302 	and.w	r3, r3, #2
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d020      	beq.n	8009130 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f003 0302 	and.w	r3, r3, #2
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d01b      	beq.n	8009130 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f06f 0202 	mvn.w	r2, #2
 8009100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2201      	movs	r2, #1
 8009106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	f003 0303 	and.w	r3, r3, #3
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f9db 	bl	80094d2 <HAL_TIM_IC_CaptureCallback>
 800911c:	e005      	b.n	800912a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f9cd 	bl	80094be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f9de 	bl	80094e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	f003 0304 	and.w	r3, r3, #4
 8009136:	2b00      	cmp	r3, #0
 8009138:	d020      	beq.n	800917c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f003 0304 	and.w	r3, r3, #4
 8009140:	2b00      	cmp	r3, #0
 8009142:	d01b      	beq.n	800917c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f06f 0204 	mvn.w	r2, #4
 800914c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2202      	movs	r2, #2
 8009152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800915e:	2b00      	cmp	r3, #0
 8009160:	d003      	beq.n	800916a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f9b5 	bl	80094d2 <HAL_TIM_IC_CaptureCallback>
 8009168:	e005      	b.n	8009176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f9a7 	bl	80094be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f9b8 	bl	80094e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	f003 0308 	and.w	r3, r3, #8
 8009182:	2b00      	cmp	r3, #0
 8009184:	d020      	beq.n	80091c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f003 0308 	and.w	r3, r3, #8
 800918c:	2b00      	cmp	r3, #0
 800918e:	d01b      	beq.n	80091c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f06f 0208 	mvn.w	r2, #8
 8009198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2204      	movs	r2, #4
 800919e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	69db      	ldr	r3, [r3, #28]
 80091a6:	f003 0303 	and.w	r3, r3, #3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f98f 	bl	80094d2 <HAL_TIM_IC_CaptureCallback>
 80091b4:	e005      	b.n	80091c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f981 	bl	80094be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f992 	bl	80094e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	f003 0310 	and.w	r3, r3, #16
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d020      	beq.n	8009214 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f003 0310 	and.w	r3, r3, #16
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d01b      	beq.n	8009214 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f06f 0210 	mvn.w	r2, #16
 80091e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2208      	movs	r2, #8
 80091ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	69db      	ldr	r3, [r3, #28]
 80091f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f969 	bl	80094d2 <HAL_TIM_IC_CaptureCallback>
 8009200:	e005      	b.n	800920e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 f95b 	bl	80094be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f96c 	bl	80094e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	f003 0301 	and.w	r3, r3, #1
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00c      	beq.n	8009238 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f003 0301 	and.w	r3, r3, #1
 8009224:	2b00      	cmp	r3, #0
 8009226:	d007      	beq.n	8009238 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f06f 0201 	mvn.w	r2, #1
 8009230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f7f7 fde0 	bl	8000df8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800923e:	2b00      	cmp	r3, #0
 8009240:	d00c      	beq.n	800925c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009248:	2b00      	cmp	r3, #0
 800924a:	d007      	beq.n	800925c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fb84 	bl	8009964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009262:	2b00      	cmp	r3, #0
 8009264:	d00c      	beq.n	8009280 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800926c:	2b00      	cmp	r3, #0
 800926e:	d007      	beq.n	8009280 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f93d 	bl	80094fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	f003 0320 	and.w	r3, r3, #32
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00c      	beq.n	80092a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f003 0320 	and.w	r3, r3, #32
 8009290:	2b00      	cmp	r3, #0
 8009292:	d007      	beq.n	80092a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f06f 0220 	mvn.w	r2, #32
 800929c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fb56 	bl	8009950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092a4:	bf00      	nop
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092b6:	2300      	movs	r3, #0
 80092b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d101      	bne.n	80092c8 <HAL_TIM_ConfigClockSource+0x1c>
 80092c4:	2302      	movs	r3, #2
 80092c6:	e0b4      	b.n	8009432 <HAL_TIM_ConfigClockSource+0x186>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2202      	movs	r2, #2
 80092d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80092e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80092ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009300:	d03e      	beq.n	8009380 <HAL_TIM_ConfigClockSource+0xd4>
 8009302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009306:	f200 8087 	bhi.w	8009418 <HAL_TIM_ConfigClockSource+0x16c>
 800930a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800930e:	f000 8086 	beq.w	800941e <HAL_TIM_ConfigClockSource+0x172>
 8009312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009316:	d87f      	bhi.n	8009418 <HAL_TIM_ConfigClockSource+0x16c>
 8009318:	2b70      	cmp	r3, #112	@ 0x70
 800931a:	d01a      	beq.n	8009352 <HAL_TIM_ConfigClockSource+0xa6>
 800931c:	2b70      	cmp	r3, #112	@ 0x70
 800931e:	d87b      	bhi.n	8009418 <HAL_TIM_ConfigClockSource+0x16c>
 8009320:	2b60      	cmp	r3, #96	@ 0x60
 8009322:	d050      	beq.n	80093c6 <HAL_TIM_ConfigClockSource+0x11a>
 8009324:	2b60      	cmp	r3, #96	@ 0x60
 8009326:	d877      	bhi.n	8009418 <HAL_TIM_ConfigClockSource+0x16c>
 8009328:	2b50      	cmp	r3, #80	@ 0x50
 800932a:	d03c      	beq.n	80093a6 <HAL_TIM_ConfigClockSource+0xfa>
 800932c:	2b50      	cmp	r3, #80	@ 0x50
 800932e:	d873      	bhi.n	8009418 <HAL_TIM_ConfigClockSource+0x16c>
 8009330:	2b40      	cmp	r3, #64	@ 0x40
 8009332:	d058      	beq.n	80093e6 <HAL_TIM_ConfigClockSource+0x13a>
 8009334:	2b40      	cmp	r3, #64	@ 0x40
 8009336:	d86f      	bhi.n	8009418 <HAL_TIM_ConfigClockSource+0x16c>
 8009338:	2b30      	cmp	r3, #48	@ 0x30
 800933a:	d064      	beq.n	8009406 <HAL_TIM_ConfigClockSource+0x15a>
 800933c:	2b30      	cmp	r3, #48	@ 0x30
 800933e:	d86b      	bhi.n	8009418 <HAL_TIM_ConfigClockSource+0x16c>
 8009340:	2b20      	cmp	r3, #32
 8009342:	d060      	beq.n	8009406 <HAL_TIM_ConfigClockSource+0x15a>
 8009344:	2b20      	cmp	r3, #32
 8009346:	d867      	bhi.n	8009418 <HAL_TIM_ConfigClockSource+0x16c>
 8009348:	2b00      	cmp	r3, #0
 800934a:	d05c      	beq.n	8009406 <HAL_TIM_ConfigClockSource+0x15a>
 800934c:	2b10      	cmp	r3, #16
 800934e:	d05a      	beq.n	8009406 <HAL_TIM_ConfigClockSource+0x15a>
 8009350:	e062      	b.n	8009418 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009362:	f000 fa66 	bl	8009832 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009374:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	609a      	str	r2, [r3, #8]
      break;
 800937e:	e04f      	b.n	8009420 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009390:	f000 fa4f 	bl	8009832 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	689a      	ldr	r2, [r3, #8]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80093a2:	609a      	str	r2, [r3, #8]
      break;
 80093a4:	e03c      	b.n	8009420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093b2:	461a      	mov	r2, r3
 80093b4:	f000 f9c3 	bl	800973e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2150      	movs	r1, #80	@ 0x50
 80093be:	4618      	mov	r0, r3
 80093c0:	f000 fa1c 	bl	80097fc <TIM_ITRx_SetConfig>
      break;
 80093c4:	e02c      	b.n	8009420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093d2:	461a      	mov	r2, r3
 80093d4:	f000 f9e2 	bl	800979c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2160      	movs	r1, #96	@ 0x60
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 fa0c 	bl	80097fc <TIM_ITRx_SetConfig>
      break;
 80093e4:	e01c      	b.n	8009420 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093f2:	461a      	mov	r2, r3
 80093f4:	f000 f9a3 	bl	800973e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2140      	movs	r1, #64	@ 0x40
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 f9fc 	bl	80097fc <TIM_ITRx_SetConfig>
      break;
 8009404:	e00c      	b.n	8009420 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4619      	mov	r1, r3
 8009410:	4610      	mov	r0, r2
 8009412:	f000 f9f3 	bl	80097fc <TIM_ITRx_SetConfig>
      break;
 8009416:	e003      	b.n	8009420 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009418:	2301      	movs	r3, #1
 800941a:	73fb      	strb	r3, [r7, #15]
      break;
 800941c:	e000      	b.n	8009420 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800941e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009430:	7bfb      	ldrb	r3, [r7, #15]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b082      	sub	sp, #8
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800944a:	2b01      	cmp	r3, #1
 800944c:	d101      	bne.n	8009452 <HAL_TIM_SlaveConfigSynchro+0x18>
 800944e:	2302      	movs	r3, #2
 8009450:	e031      	b.n	80094b6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2202      	movs	r2, #2
 800945e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009462:	6839      	ldr	r1, [r7, #0]
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f8d9 	bl	800961c <TIM_SlaveTimer_SetConfig>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d009      	beq.n	8009484 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e018      	b.n	80094b6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009492:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68da      	ldr	r2, [r3, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80094a2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094be:	b480      	push	{r7}
 80094c0:	b083      	sub	sp, #12
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094c6:	bf00      	nop
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b083      	sub	sp, #12
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094da:	bf00      	nop
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr

080094e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094e6:	b480      	push	{r7}
 80094e8:	b083      	sub	sp, #12
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094ee:	bf00      	nop
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094fa:	b480      	push	{r7}
 80094fc:	b083      	sub	sp, #12
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009502:	bf00      	nop
 8009504:	370c      	adds	r7, #12
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
	...

08009510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a37      	ldr	r2, [pc, #220]	@ (8009600 <TIM_Base_SetConfig+0xf0>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d00f      	beq.n	8009548 <TIM_Base_SetConfig+0x38>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800952e:	d00b      	beq.n	8009548 <TIM_Base_SetConfig+0x38>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a34      	ldr	r2, [pc, #208]	@ (8009604 <TIM_Base_SetConfig+0xf4>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d007      	beq.n	8009548 <TIM_Base_SetConfig+0x38>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a33      	ldr	r2, [pc, #204]	@ (8009608 <TIM_Base_SetConfig+0xf8>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d003      	beq.n	8009548 <TIM_Base_SetConfig+0x38>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a32      	ldr	r2, [pc, #200]	@ (800960c <TIM_Base_SetConfig+0xfc>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d108      	bne.n	800955a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800954e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	68fa      	ldr	r2, [r7, #12]
 8009556:	4313      	orrs	r3, r2
 8009558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	4a28      	ldr	r2, [pc, #160]	@ (8009600 <TIM_Base_SetConfig+0xf0>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d01b      	beq.n	800959a <TIM_Base_SetConfig+0x8a>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009568:	d017      	beq.n	800959a <TIM_Base_SetConfig+0x8a>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a25      	ldr	r2, [pc, #148]	@ (8009604 <TIM_Base_SetConfig+0xf4>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d013      	beq.n	800959a <TIM_Base_SetConfig+0x8a>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a24      	ldr	r2, [pc, #144]	@ (8009608 <TIM_Base_SetConfig+0xf8>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d00f      	beq.n	800959a <TIM_Base_SetConfig+0x8a>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a23      	ldr	r2, [pc, #140]	@ (800960c <TIM_Base_SetConfig+0xfc>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d00b      	beq.n	800959a <TIM_Base_SetConfig+0x8a>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a22      	ldr	r2, [pc, #136]	@ (8009610 <TIM_Base_SetConfig+0x100>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d007      	beq.n	800959a <TIM_Base_SetConfig+0x8a>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a21      	ldr	r2, [pc, #132]	@ (8009614 <TIM_Base_SetConfig+0x104>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d003      	beq.n	800959a <TIM_Base_SetConfig+0x8a>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a20      	ldr	r2, [pc, #128]	@ (8009618 <TIM_Base_SetConfig+0x108>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d108      	bne.n	80095ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	689a      	ldr	r2, [r3, #8]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a0c      	ldr	r2, [pc, #48]	@ (8009600 <TIM_Base_SetConfig+0xf0>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d103      	bne.n	80095da <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	691a      	ldr	r2, [r3, #16]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f043 0204 	orr.w	r2, r3, #4
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2201      	movs	r2, #1
 80095ea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	601a      	str	r2, [r3, #0]
}
 80095f2:	bf00      	nop
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	40010000 	.word	0x40010000
 8009604:	40000400 	.word	0x40000400
 8009608:	40000800 	.word	0x40000800
 800960c:	40000c00 	.word	0x40000c00
 8009610:	40014000 	.word	0x40014000
 8009614:	40014400 	.word	0x40014400
 8009618:	40014800 	.word	0x40014800

0800961c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b086      	sub	sp, #24
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009638:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	693a      	ldr	r2, [r7, #16]
 8009640:	4313      	orrs	r3, r2
 8009642:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	f023 0307 	bic.w	r3, r3, #7
 800964a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	693a      	ldr	r2, [r7, #16]
 8009652:	4313      	orrs	r3, r2
 8009654:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	693a      	ldr	r2, [r7, #16]
 800965c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	2b70      	cmp	r3, #112	@ 0x70
 8009664:	d01a      	beq.n	800969c <TIM_SlaveTimer_SetConfig+0x80>
 8009666:	2b70      	cmp	r3, #112	@ 0x70
 8009668:	d860      	bhi.n	800972c <TIM_SlaveTimer_SetConfig+0x110>
 800966a:	2b60      	cmp	r3, #96	@ 0x60
 800966c:	d054      	beq.n	8009718 <TIM_SlaveTimer_SetConfig+0xfc>
 800966e:	2b60      	cmp	r3, #96	@ 0x60
 8009670:	d85c      	bhi.n	800972c <TIM_SlaveTimer_SetConfig+0x110>
 8009672:	2b50      	cmp	r3, #80	@ 0x50
 8009674:	d046      	beq.n	8009704 <TIM_SlaveTimer_SetConfig+0xe8>
 8009676:	2b50      	cmp	r3, #80	@ 0x50
 8009678:	d858      	bhi.n	800972c <TIM_SlaveTimer_SetConfig+0x110>
 800967a:	2b40      	cmp	r3, #64	@ 0x40
 800967c:	d019      	beq.n	80096b2 <TIM_SlaveTimer_SetConfig+0x96>
 800967e:	2b40      	cmp	r3, #64	@ 0x40
 8009680:	d854      	bhi.n	800972c <TIM_SlaveTimer_SetConfig+0x110>
 8009682:	2b30      	cmp	r3, #48	@ 0x30
 8009684:	d055      	beq.n	8009732 <TIM_SlaveTimer_SetConfig+0x116>
 8009686:	2b30      	cmp	r3, #48	@ 0x30
 8009688:	d850      	bhi.n	800972c <TIM_SlaveTimer_SetConfig+0x110>
 800968a:	2b20      	cmp	r3, #32
 800968c:	d051      	beq.n	8009732 <TIM_SlaveTimer_SetConfig+0x116>
 800968e:	2b20      	cmp	r3, #32
 8009690:	d84c      	bhi.n	800972c <TIM_SlaveTimer_SetConfig+0x110>
 8009692:	2b00      	cmp	r3, #0
 8009694:	d04d      	beq.n	8009732 <TIM_SlaveTimer_SetConfig+0x116>
 8009696:	2b10      	cmp	r3, #16
 8009698:	d04b      	beq.n	8009732 <TIM_SlaveTimer_SetConfig+0x116>
 800969a:	e047      	b.n	800972c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80096ac:	f000 f8c1 	bl	8009832 <TIM_ETR_SetConfig>
      break;
 80096b0:	e040      	b.n	8009734 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2b05      	cmp	r3, #5
 80096b8:	d101      	bne.n	80096be <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e03b      	b.n	8009736 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
 80096c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	6a1a      	ldr	r2, [r3, #32]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f022 0201 	bic.w	r2, r2, #1
 80096d4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096e4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	011b      	lsls	r3, r3, #4
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68ba      	ldr	r2, [r7, #8]
 80096f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	621a      	str	r2, [r3, #32]
      break;
 8009702:	e017      	b.n	8009734 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009710:	461a      	mov	r2, r3
 8009712:	f000 f814 	bl	800973e <TIM_TI1_ConfigInputStage>
      break;
 8009716:	e00d      	b.n	8009734 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009724:	461a      	mov	r2, r3
 8009726:	f000 f839 	bl	800979c <TIM_TI2_ConfigInputStage>
      break;
 800972a:	e003      	b.n	8009734 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	75fb      	strb	r3, [r7, #23]
      break;
 8009730:	e000      	b.n	8009734 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009732:	bf00      	nop
  }

  return status;
 8009734:	7dfb      	ldrb	r3, [r7, #23]
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800973e:	b480      	push	{r7}
 8009740:	b087      	sub	sp, #28
 8009742:	af00      	add	r7, sp, #0
 8009744:	60f8      	str	r0, [r7, #12]
 8009746:	60b9      	str	r1, [r7, #8]
 8009748:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	6a1b      	ldr	r3, [r3, #32]
 8009754:	f023 0201 	bic.w	r2, r3, #1
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	699b      	ldr	r3, [r3, #24]
 8009760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009768:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	011b      	lsls	r3, r3, #4
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	4313      	orrs	r3, r2
 8009772:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	f023 030a 	bic.w	r3, r3, #10
 800977a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800977c:	697a      	ldr	r2, [r7, #20]
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	4313      	orrs	r3, r2
 8009782:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	693a      	ldr	r2, [r7, #16]
 8009788:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	697a      	ldr	r2, [r7, #20]
 800978e:	621a      	str	r2, [r3, #32]
}
 8009790:	bf00      	nop
 8009792:	371c      	adds	r7, #28
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800979c:	b480      	push	{r7}
 800979e:	b087      	sub	sp, #28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6a1b      	ldr	r3, [r3, #32]
 80097ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6a1b      	ldr	r3, [r3, #32]
 80097b2:	f023 0210 	bic.w	r2, r3, #16
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80097c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	031b      	lsls	r3, r3, #12
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80097d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	011b      	lsls	r3, r3, #4
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	697a      	ldr	r2, [r7, #20]
 80097ee:	621a      	str	r2, [r3, #32]
}
 80097f0:	bf00      	nop
 80097f2:	371c      	adds	r7, #28
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b085      	sub	sp, #20
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009812:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009814:	683a      	ldr	r2, [r7, #0]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	4313      	orrs	r3, r2
 800981a:	f043 0307 	orr.w	r3, r3, #7
 800981e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	609a      	str	r2, [r3, #8]
}
 8009826:	bf00      	nop
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009832:	b480      	push	{r7}
 8009834:	b087      	sub	sp, #28
 8009836:	af00      	add	r7, sp, #0
 8009838:	60f8      	str	r0, [r7, #12]
 800983a:	60b9      	str	r1, [r7, #8]
 800983c:	607a      	str	r2, [r7, #4]
 800983e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800984c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	021a      	lsls	r2, r3, #8
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	431a      	orrs	r2, r3
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	4313      	orrs	r3, r2
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	4313      	orrs	r3, r2
 800985e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	697a      	ldr	r2, [r7, #20]
 8009864:	609a      	str	r2, [r3, #8]
}
 8009866:	bf00      	nop
 8009868:	371c      	adds	r7, #28
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
	...

08009874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009884:	2b01      	cmp	r3, #1
 8009886:	d101      	bne.n	800988c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009888:	2302      	movs	r3, #2
 800988a:	e050      	b.n	800992e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2202      	movs	r2, #2
 8009898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a1c      	ldr	r2, [pc, #112]	@ (800993c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d018      	beq.n	8009902 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098d8:	d013      	beq.n	8009902 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a18      	ldr	r2, [pc, #96]	@ (8009940 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d00e      	beq.n	8009902 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a16      	ldr	r2, [pc, #88]	@ (8009944 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d009      	beq.n	8009902 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a15      	ldr	r2, [pc, #84]	@ (8009948 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d004      	beq.n	8009902 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a13      	ldr	r2, [pc, #76]	@ (800994c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d10c      	bne.n	800991c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009908:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	4313      	orrs	r3, r2
 8009912:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3714      	adds	r7, #20
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	40010000 	.word	0x40010000
 8009940:	40000400 	.word	0x40000400
 8009944:	40000800 	.word	0x40000800
 8009948:	40000c00 	.word	0x40000c00
 800994c:	40014000 	.word	0x40014000

08009950 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009958:	bf00      	nop
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009978:	b084      	sub	sp, #16
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
 8009982:	f107 001c 	add.w	r0, r7, #28
 8009986:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800998a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800998e:	2b01      	cmp	r3, #1
 8009990:	d123      	bne.n	80099da <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009996:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	68db      	ldr	r3, [r3, #12]
 80099a2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80099a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80099ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d105      	bne.n	80099ce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f001 fae8 	bl	800afa4 <USB_CoreReset>
 80099d4:	4603      	mov	r3, r0
 80099d6:	73fb      	strb	r3, [r7, #15]
 80099d8:	e01b      	b.n	8009a12 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f001 fadc 	bl	800afa4 <USB_CoreReset>
 80099ec:	4603      	mov	r3, r0
 80099ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80099f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d106      	bne.n	8009a06 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	639a      	str	r2, [r3, #56]	@ 0x38
 8009a04:	e005      	b.n	8009a12 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a0a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009a12:	7fbb      	ldrb	r3, [r7, #30]
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	d10b      	bne.n	8009a30 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	f043 0206 	orr.w	r2, r3, #6
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f043 0220 	orr.w	r2, r3, #32
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a3c:	b004      	add	sp, #16
 8009a3e:	4770      	bx	lr

08009a40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009a4e:	79fb      	ldrb	r3, [r7, #7]
 8009a50:	2b02      	cmp	r3, #2
 8009a52:	d165      	bne.n	8009b20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	4a41      	ldr	r2, [pc, #260]	@ (8009b5c <USB_SetTurnaroundTime+0x11c>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d906      	bls.n	8009a6a <USB_SetTurnaroundTime+0x2a>
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	4a40      	ldr	r2, [pc, #256]	@ (8009b60 <USB_SetTurnaroundTime+0x120>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d202      	bcs.n	8009a6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009a64:	230f      	movs	r3, #15
 8009a66:	617b      	str	r3, [r7, #20]
 8009a68:	e062      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	4a3c      	ldr	r2, [pc, #240]	@ (8009b60 <USB_SetTurnaroundTime+0x120>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d306      	bcc.n	8009a80 <USB_SetTurnaroundTime+0x40>
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	4a3b      	ldr	r2, [pc, #236]	@ (8009b64 <USB_SetTurnaroundTime+0x124>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d202      	bcs.n	8009a80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009a7a:	230e      	movs	r3, #14
 8009a7c:	617b      	str	r3, [r7, #20]
 8009a7e:	e057      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	4a38      	ldr	r2, [pc, #224]	@ (8009b64 <USB_SetTurnaroundTime+0x124>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d306      	bcc.n	8009a96 <USB_SetTurnaroundTime+0x56>
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	4a37      	ldr	r2, [pc, #220]	@ (8009b68 <USB_SetTurnaroundTime+0x128>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d202      	bcs.n	8009a96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009a90:	230d      	movs	r3, #13
 8009a92:	617b      	str	r3, [r7, #20]
 8009a94:	e04c      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	4a33      	ldr	r2, [pc, #204]	@ (8009b68 <USB_SetTurnaroundTime+0x128>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d306      	bcc.n	8009aac <USB_SetTurnaroundTime+0x6c>
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	4a32      	ldr	r2, [pc, #200]	@ (8009b6c <USB_SetTurnaroundTime+0x12c>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d802      	bhi.n	8009aac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009aa6:	230c      	movs	r3, #12
 8009aa8:	617b      	str	r3, [r7, #20]
 8009aaa:	e041      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	4a2f      	ldr	r2, [pc, #188]	@ (8009b6c <USB_SetTurnaroundTime+0x12c>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d906      	bls.n	8009ac2 <USB_SetTurnaroundTime+0x82>
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	4a2e      	ldr	r2, [pc, #184]	@ (8009b70 <USB_SetTurnaroundTime+0x130>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d802      	bhi.n	8009ac2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009abc:	230b      	movs	r3, #11
 8009abe:	617b      	str	r3, [r7, #20]
 8009ac0:	e036      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	4a2a      	ldr	r2, [pc, #168]	@ (8009b70 <USB_SetTurnaroundTime+0x130>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d906      	bls.n	8009ad8 <USB_SetTurnaroundTime+0x98>
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	4a29      	ldr	r2, [pc, #164]	@ (8009b74 <USB_SetTurnaroundTime+0x134>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d802      	bhi.n	8009ad8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009ad2:	230a      	movs	r3, #10
 8009ad4:	617b      	str	r3, [r7, #20]
 8009ad6:	e02b      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	4a26      	ldr	r2, [pc, #152]	@ (8009b74 <USB_SetTurnaroundTime+0x134>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d906      	bls.n	8009aee <USB_SetTurnaroundTime+0xae>
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	4a25      	ldr	r2, [pc, #148]	@ (8009b78 <USB_SetTurnaroundTime+0x138>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d202      	bcs.n	8009aee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009ae8:	2309      	movs	r3, #9
 8009aea:	617b      	str	r3, [r7, #20]
 8009aec:	e020      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	4a21      	ldr	r2, [pc, #132]	@ (8009b78 <USB_SetTurnaroundTime+0x138>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d306      	bcc.n	8009b04 <USB_SetTurnaroundTime+0xc4>
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	4a20      	ldr	r2, [pc, #128]	@ (8009b7c <USB_SetTurnaroundTime+0x13c>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d802      	bhi.n	8009b04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009afe:	2308      	movs	r3, #8
 8009b00:	617b      	str	r3, [r7, #20]
 8009b02:	e015      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	4a1d      	ldr	r2, [pc, #116]	@ (8009b7c <USB_SetTurnaroundTime+0x13c>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d906      	bls.n	8009b1a <USB_SetTurnaroundTime+0xda>
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	4a1c      	ldr	r2, [pc, #112]	@ (8009b80 <USB_SetTurnaroundTime+0x140>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d202      	bcs.n	8009b1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009b14:	2307      	movs	r3, #7
 8009b16:	617b      	str	r3, [r7, #20]
 8009b18:	e00a      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009b1a:	2306      	movs	r3, #6
 8009b1c:	617b      	str	r3, [r7, #20]
 8009b1e:	e007      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009b20:	79fb      	ldrb	r3, [r7, #7]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d102      	bne.n	8009b2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009b26:	2309      	movs	r3, #9
 8009b28:	617b      	str	r3, [r7, #20]
 8009b2a:	e001      	b.n	8009b30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009b2c:	2309      	movs	r3, #9
 8009b2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	68da      	ldr	r2, [r3, #12]
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	029b      	lsls	r3, r3, #10
 8009b44:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009b48:	431a      	orrs	r2, r3
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	371c      	adds	r7, #28
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	00d8acbf 	.word	0x00d8acbf
 8009b60:	00e4e1c0 	.word	0x00e4e1c0
 8009b64:	00f42400 	.word	0x00f42400
 8009b68:	01067380 	.word	0x01067380
 8009b6c:	011a499f 	.word	0x011a499f
 8009b70:	01312cff 	.word	0x01312cff
 8009b74:	014ca43f 	.word	0x014ca43f
 8009b78:	016e3600 	.word	0x016e3600
 8009b7c:	01a6ab1f 	.word	0x01a6ab1f
 8009b80:	01e84800 	.word	0x01e84800

08009b84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	f043 0201 	orr.w	r2, r3, #1
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b083      	sub	sp, #12
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	f023 0201 	bic.w	r2, r3, #1
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009be4:	78fb      	ldrb	r3, [r7, #3]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d115      	bne.n	8009c16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009bf6:	200a      	movs	r0, #10
 8009bf8:	f7f9 fdc2 	bl	8003780 <HAL_Delay>
      ms += 10U;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	330a      	adds	r3, #10
 8009c00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f001 f93f 	bl	800ae86 <USB_GetMode>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d01e      	beq.n	8009c4c <USB_SetCurrentMode+0x84>
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2bc7      	cmp	r3, #199	@ 0xc7
 8009c12:	d9f0      	bls.n	8009bf6 <USB_SetCurrentMode+0x2e>
 8009c14:	e01a      	b.n	8009c4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009c16:	78fb      	ldrb	r3, [r7, #3]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d115      	bne.n	8009c48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009c28:	200a      	movs	r0, #10
 8009c2a:	f7f9 fda9 	bl	8003780 <HAL_Delay>
      ms += 10U;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	330a      	adds	r3, #10
 8009c32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f001 f926 	bl	800ae86 <USB_GetMode>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d005      	beq.n	8009c4c <USB_SetCurrentMode+0x84>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2bc7      	cmp	r3, #199	@ 0xc7
 8009c44:	d9f0      	bls.n	8009c28 <USB_SetCurrentMode+0x60>
 8009c46:	e001      	b.n	8009c4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e005      	b.n	8009c58 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2bc8      	cmp	r3, #200	@ 0xc8
 8009c50:	d101      	bne.n	8009c56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e000      	b.n	8009c58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c60:	b084      	sub	sp, #16
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b086      	sub	sp, #24
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009c6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009c72:	2300      	movs	r3, #0
 8009c74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	613b      	str	r3, [r7, #16]
 8009c7e:	e009      	b.n	8009c94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	3340      	adds	r3, #64	@ 0x40
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	4413      	add	r3, r2
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	3301      	adds	r3, #1
 8009c92:	613b      	str	r3, [r7, #16]
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	2b0e      	cmp	r3, #14
 8009c98:	d9f2      	bls.n	8009c80 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009c9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d11c      	bne.n	8009cdc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	68fa      	ldr	r2, [r7, #12]
 8009cac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009cb0:	f043 0302 	orr.w	r3, r3, #2
 8009cb4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	639a      	str	r2, [r3, #56]	@ 0x38
 8009cda:	e00b      	b.n	8009cf4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d00:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d10d      	bne.n	8009d24 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d104      	bne.n	8009d1a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009d10:	2100      	movs	r1, #0
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f968 	bl	8009fe8 <USB_SetDevSpeed>
 8009d18:	e008      	b.n	8009d2c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009d1a:	2101      	movs	r1, #1
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 f963 	bl	8009fe8 <USB_SetDevSpeed>
 8009d22:	e003      	b.n	8009d2c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009d24:	2103      	movs	r1, #3
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 f95e 	bl	8009fe8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009d2c:	2110      	movs	r1, #16
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 f8fa 	bl	8009f28 <USB_FlushTxFifo>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d001      	beq.n	8009d3e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f924 	bl	8009f8c <USB_FlushRxFifo>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d001      	beq.n	8009d4e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d54:	461a      	mov	r2, r3
 8009d56:	2300      	movs	r3, #0
 8009d58:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d60:	461a      	mov	r2, r3
 8009d62:	2300      	movs	r3, #0
 8009d64:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	2300      	movs	r3, #0
 8009d70:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d72:	2300      	movs	r3, #0
 8009d74:	613b      	str	r3, [r7, #16]
 8009d76:	e043      	b.n	8009e00 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	015a      	lsls	r2, r3, #5
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4413      	add	r3, r2
 8009d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d8e:	d118      	bne.n	8009dc2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10a      	bne.n	8009dac <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009d96:	693b      	ldr	r3, [r7, #16]
 8009d98:	015a      	lsls	r2, r3, #5
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009da2:	461a      	mov	r2, r3
 8009da4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009da8:	6013      	str	r3, [r2, #0]
 8009daa:	e013      	b.n	8009dd4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	015a      	lsls	r2, r3, #5
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4413      	add	r3, r2
 8009db4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009db8:	461a      	mov	r2, r3
 8009dba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009dbe:	6013      	str	r3, [r2, #0]
 8009dc0:	e008      	b.n	8009dd4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	015a      	lsls	r2, r3, #5
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	4413      	add	r3, r2
 8009dca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dce:	461a      	mov	r2, r3
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	015a      	lsls	r2, r3, #5
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	4413      	add	r3, r2
 8009ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009de0:	461a      	mov	r2, r3
 8009de2:	2300      	movs	r3, #0
 8009de4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	015a      	lsls	r2, r3, #5
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	4413      	add	r3, r2
 8009dee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009df2:	461a      	mov	r2, r3
 8009df4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009df8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	613b      	str	r3, [r7, #16]
 8009e00:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009e04:	461a      	mov	r2, r3
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d3b5      	bcc.n	8009d78 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	613b      	str	r3, [r7, #16]
 8009e10:	e043      	b.n	8009e9a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	015a      	lsls	r2, r3, #5
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	4413      	add	r3, r2
 8009e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e28:	d118      	bne.n	8009e5c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10a      	bne.n	8009e46 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	015a      	lsls	r2, r3, #5
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	4413      	add	r3, r2
 8009e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	e013      	b.n	8009e6e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	015a      	lsls	r2, r3, #5
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e52:	461a      	mov	r2, r3
 8009e54:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009e58:	6013      	str	r3, [r2, #0]
 8009e5a:	e008      	b.n	8009e6e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	015a      	lsls	r2, r3, #5
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	4413      	add	r3, r2
 8009e64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e68:	461a      	mov	r2, r3
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	015a      	lsls	r2, r3, #5
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	4413      	add	r3, r2
 8009e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	015a      	lsls	r2, r3, #5
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	4413      	add	r3, r2
 8009e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009e92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	3301      	adds	r3, #1
 8009e98:	613b      	str	r3, [r7, #16]
 8009e9a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d3b5      	bcc.n	8009e12 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009eb8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009ec6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009ec8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d105      	bne.n	8009edc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	699b      	ldr	r3, [r3, #24]
 8009ed4:	f043 0210 	orr.w	r2, r3, #16
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	699a      	ldr	r2, [r3, #24]
 8009ee0:	4b10      	ldr	r3, [pc, #64]	@ (8009f24 <USB_DevInit+0x2c4>)
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009ee8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d005      	beq.n	8009efc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	699b      	ldr	r3, [r3, #24]
 8009ef4:	f043 0208 	orr.w	r2, r3, #8
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009efc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d107      	bne.n	8009f14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009f0c:	f043 0304 	orr.w	r3, r3, #4
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3718      	adds	r7, #24
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f20:	b004      	add	sp, #16
 8009f22:	4770      	bx	lr
 8009f24:	803c3800 	.word	0x803c3800

08009f28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009f32:	2300      	movs	r3, #0
 8009f34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f42:	d901      	bls.n	8009f48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e01b      	b.n	8009f80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	daf2      	bge.n	8009f36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009f50:	2300      	movs	r3, #0
 8009f52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	019b      	lsls	r3, r3, #6
 8009f58:	f043 0220 	orr.w	r2, r3, #32
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	3301      	adds	r3, #1
 8009f64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f6c:	d901      	bls.n	8009f72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	e006      	b.n	8009f80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	f003 0320 	and.w	r3, r3, #32
 8009f7a:	2b20      	cmp	r3, #32
 8009f7c:	d0f0      	beq.n	8009f60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009f7e:	2300      	movs	r3, #0
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f94:	2300      	movs	r3, #0
 8009f96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009fa4:	d901      	bls.n	8009faa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	e018      	b.n	8009fdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	691b      	ldr	r3, [r3, #16]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	daf2      	bge.n	8009f98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2210      	movs	r2, #16
 8009fba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009fc8:	d901      	bls.n	8009fce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e006      	b.n	8009fdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	f003 0310 	and.w	r3, r3, #16
 8009fd6:	2b10      	cmp	r3, #16
 8009fd8:	d0f0      	beq.n	8009fbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3714      	adds	r7, #20
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	78fb      	ldrb	r3, [r7, #3]
 800a002:	68f9      	ldr	r1, [r7, #12]
 800a004:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a008:	4313      	orrs	r3, r2
 800a00a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a00c:	2300      	movs	r3, #0
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a01a:	b480      	push	{r7}
 800a01c:	b087      	sub	sp, #28
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	f003 0306 	and.w	r3, r3, #6
 800a032:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d102      	bne.n	800a040 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a03a:	2300      	movs	r3, #0
 800a03c:	75fb      	strb	r3, [r7, #23]
 800a03e:	e00a      	b.n	800a056 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2b02      	cmp	r3, #2
 800a044:	d002      	beq.n	800a04c <USB_GetDevSpeed+0x32>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2b06      	cmp	r3, #6
 800a04a:	d102      	bne.n	800a052 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a04c:	2302      	movs	r3, #2
 800a04e:	75fb      	strb	r3, [r7, #23]
 800a050:	e001      	b.n	800a056 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a052:	230f      	movs	r3, #15
 800a054:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a056:	7dfb      	ldrb	r3, [r7, #23]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	371c      	adds	r7, #28
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	785b      	ldrb	r3, [r3, #1]
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d13a      	bne.n	800a0f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a086:	69da      	ldr	r2, [r3, #28]
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	f003 030f 	and.w	r3, r3, #15
 800a090:	2101      	movs	r1, #1
 800a092:	fa01 f303 	lsl.w	r3, r1, r3
 800a096:	b29b      	uxth	r3, r3
 800a098:	68f9      	ldr	r1, [r7, #12]
 800a09a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	015a      	lsls	r2, r3, #5
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d155      	bne.n	800a164 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	015a      	lsls	r2, r3, #5
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	4413      	add	r3, r2
 800a0c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	689b      	ldr	r3, [r3, #8]
 800a0ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	791b      	ldrb	r3, [r3, #4]
 800a0d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	059b      	lsls	r3, r3, #22
 800a0da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	0151      	lsls	r1, r2, #5
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	440a      	add	r2, r1
 800a0e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0f2:	6013      	str	r3, [r2, #0]
 800a0f4:	e036      	b.n	800a164 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0fc:	69da      	ldr	r2, [r3, #28]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	f003 030f 	and.w	r3, r3, #15
 800a106:	2101      	movs	r1, #1
 800a108:	fa01 f303 	lsl.w	r3, r1, r3
 800a10c:	041b      	lsls	r3, r3, #16
 800a10e:	68f9      	ldr	r1, [r7, #12]
 800a110:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a114:	4313      	orrs	r3, r2
 800a116:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	015a      	lsls	r2, r3, #5
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	4413      	add	r3, r2
 800a120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d11a      	bne.n	800a164 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	015a      	lsls	r2, r3, #5
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	4413      	add	r3, r2
 800a136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	791b      	ldrb	r3, [r3, #4]
 800a148:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a14a:	430b      	orrs	r3, r1
 800a14c:	4313      	orrs	r3, r2
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	0151      	lsls	r1, r2, #5
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	440a      	add	r2, r1
 800a156:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a15a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a15e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a162:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3714      	adds	r7, #20
 800a16a:	46bd      	mov	sp, r7
 800a16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a170:	4770      	bx	lr
	...

0800a174 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	785b      	ldrb	r3, [r3, #1]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d161      	bne.n	800a254 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	015a      	lsls	r2, r3, #5
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	4413      	add	r3, r2
 800a198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a1a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a1a6:	d11f      	bne.n	800a1e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	015a      	lsls	r2, r3, #5
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	0151      	lsls	r1, r2, #5
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	440a      	add	r2, r1
 800a1be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a1c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	015a      	lsls	r2, r3, #5
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	68ba      	ldr	r2, [r7, #8]
 800a1d8:	0151      	lsls	r1, r2, #5
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	440a      	add	r2, r1
 800a1de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a1e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	f003 030f 	and.w	r3, r3, #15
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	43db      	mvns	r3, r3
 800a202:	68f9      	ldr	r1, [r7, #12]
 800a204:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a208:	4013      	ands	r3, r2
 800a20a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a212:	69da      	ldr	r2, [r3, #28]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	f003 030f 	and.w	r3, r3, #15
 800a21c:	2101      	movs	r1, #1
 800a21e:	fa01 f303 	lsl.w	r3, r1, r3
 800a222:	b29b      	uxth	r3, r3
 800a224:	43db      	mvns	r3, r3
 800a226:	68f9      	ldr	r1, [r7, #12]
 800a228:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a22c:	4013      	ands	r3, r2
 800a22e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	4413      	add	r3, r2
 800a238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	0159      	lsls	r1, r3, #5
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	440b      	add	r3, r1
 800a246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a24a:	4619      	mov	r1, r3
 800a24c:	4b35      	ldr	r3, [pc, #212]	@ (800a324 <USB_DeactivateEndpoint+0x1b0>)
 800a24e:	4013      	ands	r3, r2
 800a250:	600b      	str	r3, [r1, #0]
 800a252:	e060      	b.n	800a316 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	015a      	lsls	r2, r3, #5
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	4413      	add	r3, r2
 800a25c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a266:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a26a:	d11f      	bne.n	800a2ac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	015a      	lsls	r2, r3, #5
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	4413      	add	r3, r2
 800a274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68ba      	ldr	r2, [r7, #8]
 800a27c:	0151      	lsls	r1, r2, #5
 800a27e:	68fa      	ldr	r2, [r7, #12]
 800a280:	440a      	add	r2, r1
 800a282:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a286:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a28a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	4413      	add	r3, r2
 800a294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	68ba      	ldr	r2, [r7, #8]
 800a29c:	0151      	lsls	r1, r2, #5
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	440a      	add	r2, r1
 800a2a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a2aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	f003 030f 	and.w	r3, r3, #15
 800a2bc:	2101      	movs	r1, #1
 800a2be:	fa01 f303 	lsl.w	r3, r1, r3
 800a2c2:	041b      	lsls	r3, r3, #16
 800a2c4:	43db      	mvns	r3, r3
 800a2c6:	68f9      	ldr	r1, [r7, #12]
 800a2c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2d6:	69da      	ldr	r2, [r3, #28]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	f003 030f 	and.w	r3, r3, #15
 800a2e0:	2101      	movs	r1, #1
 800a2e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a2e6:	041b      	lsls	r3, r3, #16
 800a2e8:	43db      	mvns	r3, r3
 800a2ea:	68f9      	ldr	r1, [r7, #12]
 800a2ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	015a      	lsls	r2, r3, #5
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	0159      	lsls	r1, r3, #5
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	440b      	add	r3, r1
 800a30a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a30e:	4619      	mov	r1, r3
 800a310:	4b05      	ldr	r3, [pc, #20]	@ (800a328 <USB_DeactivateEndpoint+0x1b4>)
 800a312:	4013      	ands	r3, r2
 800a314:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3714      	adds	r7, #20
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr
 800a324:	ec337800 	.word	0xec337800
 800a328:	eff37800 	.word	0xeff37800

0800a32c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b08a      	sub	sp, #40	@ 0x28
 800a330:	af02      	add	r7, sp, #8
 800a332:	60f8      	str	r0, [r7, #12]
 800a334:	60b9      	str	r1, [r7, #8]
 800a336:	4613      	mov	r3, r2
 800a338:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	785b      	ldrb	r3, [r3, #1]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	f040 817f 	bne.w	800a64c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d132      	bne.n	800a3bc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	015a      	lsls	r2, r3, #5
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	4413      	add	r3, r2
 800a35e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	69ba      	ldr	r2, [r7, #24]
 800a366:	0151      	lsls	r1, r2, #5
 800a368:	69fa      	ldr	r2, [r7, #28]
 800a36a:	440a      	add	r2, r1
 800a36c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a370:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a374:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a378:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	015a      	lsls	r2, r3, #5
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	4413      	add	r3, r2
 800a382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	69ba      	ldr	r2, [r7, #24]
 800a38a:	0151      	lsls	r1, r2, #5
 800a38c:	69fa      	ldr	r2, [r7, #28]
 800a38e:	440a      	add	r2, r1
 800a390:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a394:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a398:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a39a:	69bb      	ldr	r3, [r7, #24]
 800a39c:	015a      	lsls	r2, r3, #5
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	69ba      	ldr	r2, [r7, #24]
 800a3aa:	0151      	lsls	r1, r2, #5
 800a3ac:	69fa      	ldr	r2, [r7, #28]
 800a3ae:	440a      	add	r2, r1
 800a3b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3b4:	0cdb      	lsrs	r3, r3, #19
 800a3b6:	04db      	lsls	r3, r3, #19
 800a3b8:	6113      	str	r3, [r2, #16]
 800a3ba:	e097      	b.n	800a4ec <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a3bc:	69bb      	ldr	r3, [r7, #24]
 800a3be:	015a      	lsls	r2, r3, #5
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	69ba      	ldr	r2, [r7, #24]
 800a3cc:	0151      	lsls	r1, r2, #5
 800a3ce:	69fa      	ldr	r2, [r7, #28]
 800a3d0:	440a      	add	r2, r1
 800a3d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3d6:	0cdb      	lsrs	r3, r3, #19
 800a3d8:	04db      	lsls	r3, r3, #19
 800a3da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	015a      	lsls	r2, r3, #5
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	69ba      	ldr	r2, [r7, #24]
 800a3ec:	0151      	lsls	r1, r2, #5
 800a3ee:	69fa      	ldr	r2, [r7, #28]
 800a3f0:	440a      	add	r2, r1
 800a3f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3f6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a3fa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a3fe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a400:	69bb      	ldr	r3, [r7, #24]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d11a      	bne.n	800a43c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	691a      	ldr	r2, [r3, #16]
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d903      	bls.n	800a41a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	689a      	ldr	r2, [r3, #8]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	015a      	lsls	r2, r3, #5
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	4413      	add	r3, r2
 800a422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	69ba      	ldr	r2, [r7, #24]
 800a42a:	0151      	lsls	r1, r2, #5
 800a42c:	69fa      	ldr	r2, [r7, #28]
 800a42e:	440a      	add	r2, r1
 800a430:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a434:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a438:	6113      	str	r3, [r2, #16]
 800a43a:	e044      	b.n	800a4c6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	691a      	ldr	r2, [r3, #16]
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	4413      	add	r3, r2
 800a446:	1e5a      	subs	r2, r3, #1
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a450:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	015a      	lsls	r2, r3, #5
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	4413      	add	r3, r2
 800a45a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a45e:	691a      	ldr	r2, [r3, #16]
 800a460:	8afb      	ldrh	r3, [r7, #22]
 800a462:	04d9      	lsls	r1, r3, #19
 800a464:	4ba4      	ldr	r3, [pc, #656]	@ (800a6f8 <USB_EPStartXfer+0x3cc>)
 800a466:	400b      	ands	r3, r1
 800a468:	69b9      	ldr	r1, [r7, #24]
 800a46a:	0148      	lsls	r0, r1, #5
 800a46c:	69f9      	ldr	r1, [r7, #28]
 800a46e:	4401      	add	r1, r0
 800a470:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a474:	4313      	orrs	r3, r2
 800a476:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	791b      	ldrb	r3, [r3, #4]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d122      	bne.n	800a4c6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a480:	69bb      	ldr	r3, [r7, #24]
 800a482:	015a      	lsls	r2, r3, #5
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	4413      	add	r3, r2
 800a488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	69ba      	ldr	r2, [r7, #24]
 800a490:	0151      	lsls	r1, r2, #5
 800a492:	69fa      	ldr	r2, [r7, #28]
 800a494:	440a      	add	r2, r1
 800a496:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a49a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a49e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	015a      	lsls	r2, r3, #5
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	4413      	add	r3, r2
 800a4a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4ac:	691a      	ldr	r2, [r3, #16]
 800a4ae:	8afb      	ldrh	r3, [r7, #22]
 800a4b0:	075b      	lsls	r3, r3, #29
 800a4b2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a4b6:	69b9      	ldr	r1, [r7, #24]
 800a4b8:	0148      	lsls	r0, r1, #5
 800a4ba:	69f9      	ldr	r1, [r7, #28]
 800a4bc:	4401      	add	r1, r0
 800a4be:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	015a      	lsls	r2, r3, #5
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4d2:	691a      	ldr	r2, [r3, #16]
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	691b      	ldr	r3, [r3, #16]
 800a4d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4dc:	69b9      	ldr	r1, [r7, #24]
 800a4de:	0148      	lsls	r0, r1, #5
 800a4e0:	69f9      	ldr	r1, [r7, #28]
 800a4e2:	4401      	add	r1, r0
 800a4e4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a4ec:	79fb      	ldrb	r3, [r7, #7]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d14b      	bne.n	800a58a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	69db      	ldr	r3, [r3, #28]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d009      	beq.n	800a50e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	015a      	lsls	r2, r3, #5
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	4413      	add	r3, r2
 800a502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a506:	461a      	mov	r2, r3
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	69db      	ldr	r3, [r3, #28]
 800a50c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	791b      	ldrb	r3, [r3, #4]
 800a512:	2b01      	cmp	r3, #1
 800a514:	d128      	bne.n	800a568 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a522:	2b00      	cmp	r3, #0
 800a524:	d110      	bne.n	800a548 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	015a      	lsls	r2, r3, #5
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	4413      	add	r3, r2
 800a52e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	69ba      	ldr	r2, [r7, #24]
 800a536:	0151      	lsls	r1, r2, #5
 800a538:	69fa      	ldr	r2, [r7, #28]
 800a53a:	440a      	add	r2, r1
 800a53c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a540:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a544:	6013      	str	r3, [r2, #0]
 800a546:	e00f      	b.n	800a568 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	015a      	lsls	r2, r3, #5
 800a54c:	69fb      	ldr	r3, [r7, #28]
 800a54e:	4413      	add	r3, r2
 800a550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	69ba      	ldr	r2, [r7, #24]
 800a558:	0151      	lsls	r1, r2, #5
 800a55a:	69fa      	ldr	r2, [r7, #28]
 800a55c:	440a      	add	r2, r1
 800a55e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a566:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	015a      	lsls	r2, r3, #5
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	4413      	add	r3, r2
 800a570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	69ba      	ldr	r2, [r7, #24]
 800a578:	0151      	lsls	r1, r2, #5
 800a57a:	69fa      	ldr	r2, [r7, #28]
 800a57c:	440a      	add	r2, r1
 800a57e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a582:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a586:	6013      	str	r3, [r2, #0]
 800a588:	e166      	b.n	800a858 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a58a:	69bb      	ldr	r3, [r7, #24]
 800a58c:	015a      	lsls	r2, r3, #5
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	4413      	add	r3, r2
 800a592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	69ba      	ldr	r2, [r7, #24]
 800a59a:	0151      	lsls	r1, r2, #5
 800a59c:	69fa      	ldr	r2, [r7, #28]
 800a59e:	440a      	add	r2, r1
 800a5a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5a4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a5a8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	791b      	ldrb	r3, [r3, #4]
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d015      	beq.n	800a5de <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	f000 814e 	beq.w	800a858 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a5bc:	69fb      	ldr	r3, [r7, #28]
 800a5be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	f003 030f 	and.w	r3, r3, #15
 800a5cc:	2101      	movs	r1, #1
 800a5ce:	fa01 f303 	lsl.w	r3, r1, r3
 800a5d2:	69f9      	ldr	r1, [r7, #28]
 800a5d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	634b      	str	r3, [r1, #52]	@ 0x34
 800a5dc:	e13c      	b.n	800a858 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d110      	bne.n	800a610 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	015a      	lsls	r2, r3, #5
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	69ba      	ldr	r2, [r7, #24]
 800a5fe:	0151      	lsls	r1, r2, #5
 800a600:	69fa      	ldr	r2, [r7, #28]
 800a602:	440a      	add	r2, r1
 800a604:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a608:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a60c:	6013      	str	r3, [r2, #0]
 800a60e:	e00f      	b.n	800a630 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	015a      	lsls	r2, r3, #5
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	4413      	add	r3, r2
 800a618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	69ba      	ldr	r2, [r7, #24]
 800a620:	0151      	lsls	r1, r2, #5
 800a622:	69fa      	ldr	r2, [r7, #28]
 800a624:	440a      	add	r2, r1
 800a626:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a62a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a62e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	68d9      	ldr	r1, [r3, #12]
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	781a      	ldrb	r2, [r3, #0]
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	b298      	uxth	r0, r3
 800a63e:	79fb      	ldrb	r3, [r7, #7]
 800a640:	9300      	str	r3, [sp, #0]
 800a642:	4603      	mov	r3, r0
 800a644:	68f8      	ldr	r0, [r7, #12]
 800a646:	f000 f9b9 	bl	800a9bc <USB_WritePacket>
 800a64a:	e105      	b.n	800a858 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	015a      	lsls	r2, r3, #5
 800a650:	69fb      	ldr	r3, [r7, #28]
 800a652:	4413      	add	r3, r2
 800a654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	69ba      	ldr	r2, [r7, #24]
 800a65c:	0151      	lsls	r1, r2, #5
 800a65e:	69fa      	ldr	r2, [r7, #28]
 800a660:	440a      	add	r2, r1
 800a662:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a666:	0cdb      	lsrs	r3, r3, #19
 800a668:	04db      	lsls	r3, r3, #19
 800a66a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	015a      	lsls	r2, r3, #5
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	4413      	add	r3, r2
 800a674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	69ba      	ldr	r2, [r7, #24]
 800a67c:	0151      	lsls	r1, r2, #5
 800a67e:	69fa      	ldr	r2, [r7, #28]
 800a680:	440a      	add	r2, r1
 800a682:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a686:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a68a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a68e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a690:	69bb      	ldr	r3, [r7, #24]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d132      	bne.n	800a6fc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d003      	beq.n	800a6a6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	689a      	ldr	r2, [r3, #8]
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	689a      	ldr	r2, [r3, #8]
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	015a      	lsls	r2, r3, #5
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ba:	691a      	ldr	r2, [r3, #16]
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	6a1b      	ldr	r3, [r3, #32]
 800a6c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6c4:	69b9      	ldr	r1, [r7, #24]
 800a6c6:	0148      	lsls	r0, r1, #5
 800a6c8:	69f9      	ldr	r1, [r7, #28]
 800a6ca:	4401      	add	r1, r0
 800a6cc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	015a      	lsls	r2, r3, #5
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	4413      	add	r3, r2
 800a6dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6e0:	691b      	ldr	r3, [r3, #16]
 800a6e2:	69ba      	ldr	r2, [r7, #24]
 800a6e4:	0151      	lsls	r1, r2, #5
 800a6e6:	69fa      	ldr	r2, [r7, #28]
 800a6e8:	440a      	add	r2, r1
 800a6ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6ee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a6f2:	6113      	str	r3, [r2, #16]
 800a6f4:	e062      	b.n	800a7bc <USB_EPStartXfer+0x490>
 800a6f6:	bf00      	nop
 800a6f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	691b      	ldr	r3, [r3, #16]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d123      	bne.n	800a74c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a704:	69bb      	ldr	r3, [r7, #24]
 800a706:	015a      	lsls	r2, r3, #5
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	4413      	add	r3, r2
 800a70c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a710:	691a      	ldr	r2, [r3, #16]
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	689b      	ldr	r3, [r3, #8]
 800a716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a71a:	69b9      	ldr	r1, [r7, #24]
 800a71c:	0148      	lsls	r0, r1, #5
 800a71e:	69f9      	ldr	r1, [r7, #28]
 800a720:	4401      	add	r1, r0
 800a722:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a726:	4313      	orrs	r3, r2
 800a728:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a72a:	69bb      	ldr	r3, [r7, #24]
 800a72c:	015a      	lsls	r2, r3, #5
 800a72e:	69fb      	ldr	r3, [r7, #28]
 800a730:	4413      	add	r3, r2
 800a732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	69ba      	ldr	r2, [r7, #24]
 800a73a:	0151      	lsls	r1, r2, #5
 800a73c:	69fa      	ldr	r2, [r7, #28]
 800a73e:	440a      	add	r2, r1
 800a740:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a744:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a748:	6113      	str	r3, [r2, #16]
 800a74a:	e037      	b.n	800a7bc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	691a      	ldr	r2, [r3, #16]
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	4413      	add	r3, r2
 800a756:	1e5a      	subs	r2, r3, #1
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	689b      	ldr	r3, [r3, #8]
 800a75c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a760:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	689b      	ldr	r3, [r3, #8]
 800a766:	8afa      	ldrh	r2, [r7, #22]
 800a768:	fb03 f202 	mul.w	r2, r3, r2
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	015a      	lsls	r2, r3, #5
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	4413      	add	r3, r2
 800a778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a77c:	691a      	ldr	r2, [r3, #16]
 800a77e:	8afb      	ldrh	r3, [r7, #22]
 800a780:	04d9      	lsls	r1, r3, #19
 800a782:	4b38      	ldr	r3, [pc, #224]	@ (800a864 <USB_EPStartXfer+0x538>)
 800a784:	400b      	ands	r3, r1
 800a786:	69b9      	ldr	r1, [r7, #24]
 800a788:	0148      	lsls	r0, r1, #5
 800a78a:	69f9      	ldr	r1, [r7, #28]
 800a78c:	4401      	add	r1, r0
 800a78e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a792:	4313      	orrs	r3, r2
 800a794:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a796:	69bb      	ldr	r3, [r7, #24]
 800a798:	015a      	lsls	r2, r3, #5
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	4413      	add	r3, r2
 800a79e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7a2:	691a      	ldr	r2, [r3, #16]
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	6a1b      	ldr	r3, [r3, #32]
 800a7a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7ac:	69b9      	ldr	r1, [r7, #24]
 800a7ae:	0148      	lsls	r0, r1, #5
 800a7b0:	69f9      	ldr	r1, [r7, #28]
 800a7b2:	4401      	add	r1, r0
 800a7b4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a7bc:	79fb      	ldrb	r3, [r7, #7]
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d10d      	bne.n	800a7de <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d009      	beq.n	800a7de <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	68d9      	ldr	r1, [r3, #12]
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	015a      	lsls	r2, r3, #5
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7da:	460a      	mov	r2, r1
 800a7dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	791b      	ldrb	r3, [r3, #4]
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d128      	bne.n	800a838 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d110      	bne.n	800a818 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	015a      	lsls	r2, r3, #5
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	69ba      	ldr	r2, [r7, #24]
 800a806:	0151      	lsls	r1, r2, #5
 800a808:	69fa      	ldr	r2, [r7, #28]
 800a80a:	440a      	add	r2, r1
 800a80c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a810:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a814:	6013      	str	r3, [r2, #0]
 800a816:	e00f      	b.n	800a838 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	015a      	lsls	r2, r3, #5
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	4413      	add	r3, r2
 800a820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	69ba      	ldr	r2, [r7, #24]
 800a828:	0151      	lsls	r1, r2, #5
 800a82a:	69fa      	ldr	r2, [r7, #28]
 800a82c:	440a      	add	r2, r1
 800a82e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a836:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a838:	69bb      	ldr	r3, [r7, #24]
 800a83a:	015a      	lsls	r2, r3, #5
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	4413      	add	r3, r2
 800a840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	69ba      	ldr	r2, [r7, #24]
 800a848:	0151      	lsls	r1, r2, #5
 800a84a:	69fa      	ldr	r2, [r7, #28]
 800a84c:	440a      	add	r2, r1
 800a84e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a852:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a856:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3720      	adds	r7, #32
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	1ff80000 	.word	0x1ff80000

0800a868 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a868:	b480      	push	{r7}
 800a86a:	b087      	sub	sp, #28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a872:	2300      	movs	r3, #0
 800a874:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	785b      	ldrb	r3, [r3, #1]
 800a882:	2b01      	cmp	r3, #1
 800a884:	d14a      	bne.n	800a91c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	015a      	lsls	r2, r3, #5
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	4413      	add	r3, r2
 800a890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a89a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a89e:	f040 8086 	bne.w	800a9ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	781b      	ldrb	r3, [r3, #0]
 800a8a6:	015a      	lsls	r2, r3, #5
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	7812      	ldrb	r2, [r2, #0]
 800a8b6:	0151      	lsls	r1, r2, #5
 800a8b8:	693a      	ldr	r2, [r7, #16]
 800a8ba:	440a      	add	r2, r1
 800a8bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a8c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	015a      	lsls	r2, r3, #5
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	7812      	ldrb	r2, [r2, #0]
 800a8da:	0151      	lsls	r1, r2, #5
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	440a      	add	r2, r1
 800a8e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a8e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a8e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d902      	bls.n	800a900 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	75fb      	strb	r3, [r7, #23]
          break;
 800a8fe:	e056      	b.n	800a9ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	015a      	lsls	r2, r3, #5
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	4413      	add	r3, r2
 800a90a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a914:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a918:	d0e7      	beq.n	800a8ea <USB_EPStopXfer+0x82>
 800a91a:	e048      	b.n	800a9ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	015a      	lsls	r2, r3, #5
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	4413      	add	r3, r2
 800a926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a930:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a934:	d13b      	bne.n	800a9ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	015a      	lsls	r2, r3, #5
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	4413      	add	r3, r2
 800a940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	683a      	ldr	r2, [r7, #0]
 800a948:	7812      	ldrb	r2, [r2, #0]
 800a94a:	0151      	lsls	r1, r2, #5
 800a94c:	693a      	ldr	r2, [r7, #16]
 800a94e:	440a      	add	r2, r1
 800a950:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a954:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a958:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	015a      	lsls	r2, r3, #5
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	4413      	add	r3, r2
 800a964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	7812      	ldrb	r2, [r2, #0]
 800a96e:	0151      	lsls	r1, r2, #5
 800a970:	693a      	ldr	r2, [r7, #16]
 800a972:	440a      	add	r2, r1
 800a974:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a978:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a97c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	3301      	adds	r3, #1
 800a982:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d902      	bls.n	800a994 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	75fb      	strb	r3, [r7, #23]
          break;
 800a992:	e00c      	b.n	800a9ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	015a      	lsls	r2, r3, #5
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	4413      	add	r3, r2
 800a99e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a9a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9ac:	d0e7      	beq.n	800a97e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a9ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	371c      	adds	r7, #28
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b089      	sub	sp, #36	@ 0x24
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	4611      	mov	r1, r2
 800a9c8:	461a      	mov	r2, r3
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	71fb      	strb	r3, [r7, #7]
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a9da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d123      	bne.n	800aa2a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a9e2:	88bb      	ldrh	r3, [r7, #4]
 800a9e4:	3303      	adds	r3, #3
 800a9e6:	089b      	lsrs	r3, r3, #2
 800a9e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	61bb      	str	r3, [r7, #24]
 800a9ee:	e018      	b.n	800aa22 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a9f0:	79fb      	ldrb	r3, [r7, #7]
 800a9f2:	031a      	lsls	r2, r3, #12
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	6013      	str	r3, [r2, #0]
      pSrc++;
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	3301      	adds	r3, #1
 800aa08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aa10:	69fb      	ldr	r3, [r7, #28]
 800aa12:	3301      	adds	r3, #1
 800aa14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aa16:	69fb      	ldr	r3, [r7, #28]
 800aa18:	3301      	adds	r3, #1
 800aa1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	61bb      	str	r3, [r7, #24]
 800aa22:	69ba      	ldr	r2, [r7, #24]
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d3e2      	bcc.n	800a9f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3724      	adds	r7, #36	@ 0x24
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b08b      	sub	sp, #44	@ 0x2c
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	4613      	mov	r3, r2
 800aa44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800aa4e:	88fb      	ldrh	r3, [r7, #6]
 800aa50:	089b      	lsrs	r3, r3, #2
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aa56:	88fb      	ldrh	r3, [r7, #6]
 800aa58:	f003 0303 	and.w	r3, r3, #3
 800aa5c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800aa5e:	2300      	movs	r3, #0
 800aa60:	623b      	str	r3, [r7, #32]
 800aa62:	e014      	b.n	800aa8e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6e:	601a      	str	r2, [r3, #0]
    pDest++;
 800aa70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa72:	3301      	adds	r3, #1
 800aa74:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa78:	3301      	adds	r3, #1
 800aa7a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7e:	3301      	adds	r3, #1
 800aa80:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800aa82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa84:	3301      	adds	r3, #1
 800aa86:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800aa88:	6a3b      	ldr	r3, [r7, #32]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	623b      	str	r3, [r7, #32]
 800aa8e:	6a3a      	ldr	r2, [r7, #32]
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d3e6      	bcc.n	800aa64 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa96:	8bfb      	ldrh	r3, [r7, #30]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d01e      	beq.n	800aada <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	f107 0310 	add.w	r3, r7, #16
 800aaac:	6812      	ldr	r2, [r2, #0]
 800aaae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aab0:	693a      	ldr	r2, [r7, #16]
 800aab2:	6a3b      	ldr	r3, [r7, #32]
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	00db      	lsls	r3, r3, #3
 800aab8:	fa22 f303 	lsr.w	r3, r2, r3
 800aabc:	b2da      	uxtb	r2, r3
 800aabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac0:	701a      	strb	r2, [r3, #0]
      i++;
 800aac2:	6a3b      	ldr	r3, [r7, #32]
 800aac4:	3301      	adds	r3, #1
 800aac6:	623b      	str	r3, [r7, #32]
      pDest++;
 800aac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaca:	3301      	adds	r3, #1
 800aacc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800aace:	8bfb      	ldrh	r3, [r7, #30]
 800aad0:	3b01      	subs	r3, #1
 800aad2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aad4:	8bfb      	ldrh	r3, [r7, #30]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d1ea      	bne.n	800aab0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aadc:	4618      	mov	r0, r3
 800aade:	372c      	adds	r7, #44	@ 0x2c
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	785b      	ldrb	r3, [r3, #1]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d12c      	bne.n	800ab5e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	015a      	lsls	r2, r3, #5
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	db12      	blt.n	800ab3c <USB_EPSetStall+0x54>
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00f      	beq.n	800ab3c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	015a      	lsls	r2, r3, #5
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	4413      	add	r3, r2
 800ab24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68ba      	ldr	r2, [r7, #8]
 800ab2c:	0151      	lsls	r1, r2, #5
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	440a      	add	r2, r1
 800ab32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab36:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ab3a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	015a      	lsls	r2, r3, #5
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	4413      	add	r3, r2
 800ab44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	68ba      	ldr	r2, [r7, #8]
 800ab4c:	0151      	lsls	r1, r2, #5
 800ab4e:	68fa      	ldr	r2, [r7, #12]
 800ab50:	440a      	add	r2, r1
 800ab52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ab5a:	6013      	str	r3, [r2, #0]
 800ab5c:	e02b      	b.n	800abb6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	015a      	lsls	r2, r3, #5
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	4413      	add	r3, r2
 800ab66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	db12      	blt.n	800ab96 <USB_EPSetStall+0xae>
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00f      	beq.n	800ab96 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	015a      	lsls	r2, r3, #5
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	68ba      	ldr	r2, [r7, #8]
 800ab86:	0151      	lsls	r1, r2, #5
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	440a      	add	r2, r1
 800ab8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab90:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ab94:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	015a      	lsls	r2, r3, #5
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	4413      	add	r3, r2
 800ab9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	0151      	lsls	r1, r2, #5
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	440a      	add	r2, r1
 800abac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abb0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800abb4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3714      	adds	r7, #20
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	785b      	ldrb	r3, [r3, #1]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d128      	bne.n	800ac32 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	015a      	lsls	r2, r3, #5
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	4413      	add	r3, r2
 800abe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	68ba      	ldr	r2, [r7, #8]
 800abf0:	0151      	lsls	r1, r2, #5
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	440a      	add	r2, r1
 800abf6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abfa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800abfe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	791b      	ldrb	r3, [r3, #4]
 800ac04:	2b03      	cmp	r3, #3
 800ac06:	d003      	beq.n	800ac10 <USB_EPClearStall+0x4c>
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	791b      	ldrb	r3, [r3, #4]
 800ac0c:	2b02      	cmp	r3, #2
 800ac0e:	d138      	bne.n	800ac82 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	015a      	lsls	r2, r3, #5
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	4413      	add	r3, r2
 800ac18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68ba      	ldr	r2, [r7, #8]
 800ac20:	0151      	lsls	r1, r2, #5
 800ac22:	68fa      	ldr	r2, [r7, #12]
 800ac24:	440a      	add	r2, r1
 800ac26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac2e:	6013      	str	r3, [r2, #0]
 800ac30:	e027      	b.n	800ac82 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	015a      	lsls	r2, r3, #5
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	4413      	add	r3, r2
 800ac3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	0151      	lsls	r1, r2, #5
 800ac44:	68fa      	ldr	r2, [r7, #12]
 800ac46:	440a      	add	r2, r1
 800ac48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac4c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ac50:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	791b      	ldrb	r3, [r3, #4]
 800ac56:	2b03      	cmp	r3, #3
 800ac58:	d003      	beq.n	800ac62 <USB_EPClearStall+0x9e>
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	791b      	ldrb	r3, [r3, #4]
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d10f      	bne.n	800ac82 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	015a      	lsls	r2, r3, #5
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	4413      	add	r3, r2
 800ac6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	68ba      	ldr	r2, [r7, #8]
 800ac72:	0151      	lsls	r1, r2, #5
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	440a      	add	r2, r1
 800ac78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac80:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3714      	adds	r7, #20
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800acae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800acb2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	78fb      	ldrb	r3, [r7, #3]
 800acbe:	011b      	lsls	r3, r3, #4
 800acc0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800acc4:	68f9      	ldr	r1, [r7, #12]
 800acc6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800acca:	4313      	orrs	r3, r2
 800accc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800acce:	2300      	movs	r3, #0
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3714      	adds	r7, #20
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800acf6:	f023 0303 	bic.w	r3, r3, #3
 800acfa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad0a:	f023 0302 	bic.w	r3, r3, #2
 800ad0e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad10:	2300      	movs	r3, #0
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3714      	adds	r7, #20
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr

0800ad1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad1e:	b480      	push	{r7}
 800ad20:	b085      	sub	sp, #20
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ad38:	f023 0303 	bic.w	r3, r3, #3
 800ad3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ad4c:	f043 0302 	orr.w	r3, r3, #2
 800ad50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b085      	sub	sp, #20
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	695b      	ldr	r3, [r3, #20]
 800ad6c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	699b      	ldr	r3, [r3, #24]
 800ad72:	68fa      	ldr	r2, [r7, #12]
 800ad74:	4013      	ands	r3, r2
 800ad76:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ad78:	68fb      	ldr	r3, [r7, #12]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3714      	adds	r7, #20
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr

0800ad86 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ad86:	b480      	push	{r7}
 800ad88:	b085      	sub	sp, #20
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad98:	699b      	ldr	r3, [r3, #24]
 800ad9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ada2:	69db      	ldr	r3, [r3, #28]
 800ada4:	68ba      	ldr	r2, [r7, #8]
 800ada6:	4013      	ands	r3, r2
 800ada8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	0c1b      	lsrs	r3, r3, #16
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3714      	adds	r7, #20
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr

0800adba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800adba:	b480      	push	{r7}
 800adbc:	b085      	sub	sp, #20
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adcc:	699b      	ldr	r3, [r3, #24]
 800adce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800add6:	69db      	ldr	r3, [r3, #28]
 800add8:	68ba      	ldr	r2, [r7, #8]
 800adda:	4013      	ands	r3, r2
 800addc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	b29b      	uxth	r3, r3
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3714      	adds	r7, #20
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr

0800adee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800adee:	b480      	push	{r7}
 800adf0:	b085      	sub	sp, #20
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
 800adf6:	460b      	mov	r3, r1
 800adf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800adfe:	78fb      	ldrb	r3, [r7, #3]
 800ae00:	015a      	lsls	r2, r3, #5
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	4413      	add	r3, r2
 800ae06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae14:	695b      	ldr	r3, [r3, #20]
 800ae16:	68ba      	ldr	r2, [r7, #8]
 800ae18:	4013      	ands	r3, r2
 800ae1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae1c:	68bb      	ldr	r3, [r7, #8]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3714      	adds	r7, #20
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr

0800ae2a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ae2a:	b480      	push	{r7}
 800ae2c:	b087      	sub	sp, #28
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
 800ae32:	460b      	mov	r3, r1
 800ae34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae40:	691b      	ldr	r3, [r3, #16]
 800ae42:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae4c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ae4e:	78fb      	ldrb	r3, [r7, #3]
 800ae50:	f003 030f 	and.w	r3, r3, #15
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	fa22 f303 	lsr.w	r3, r2, r3
 800ae5a:	01db      	lsls	r3, r3, #7
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	693a      	ldr	r2, [r7, #16]
 800ae60:	4313      	orrs	r3, r2
 800ae62:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ae64:	78fb      	ldrb	r3, [r7, #3]
 800ae66:	015a      	lsls	r2, r3, #5
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	4413      	add	r3, r2
 800ae6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	693a      	ldr	r2, [r7, #16]
 800ae74:	4013      	ands	r3, r2
 800ae76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae78:	68bb      	ldr	r3, [r7, #8]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	371c      	adds	r7, #28
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr

0800ae86 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ae86:	b480      	push	{r7}
 800ae88:	b083      	sub	sp, #12
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	695b      	ldr	r3, [r3, #20]
 800ae92:	f003 0301 	and.w	r3, r3, #1
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	370c      	adds	r7, #12
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr

0800aea2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800aea2:	b480      	push	{r7}
 800aea4:	b085      	sub	sp, #20
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aebc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800aec0:	f023 0307 	bic.w	r3, r3, #7
 800aec4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	68fa      	ldr	r2, [r7, #12]
 800aed0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aed4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aed8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3714      	adds	r7, #20
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b087      	sub	sp, #28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	460b      	mov	r3, r1
 800aef2:	607a      	str	r2, [r7, #4]
 800aef4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	333c      	adds	r3, #60	@ 0x3c
 800aefe:	3304      	adds	r3, #4
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	4a26      	ldr	r2, [pc, #152]	@ (800afa0 <USB_EP0_OutStart+0xb8>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d90a      	bls.n	800af22 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800af18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af1c:	d101      	bne.n	800af22 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800af1e:	2300      	movs	r3, #0
 800af20:	e037      	b.n	800af92 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af28:	461a      	mov	r2, r3
 800af2a:	2300      	movs	r3, #0
 800af2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	697a      	ldr	r2, [r7, #20]
 800af38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	697a      	ldr	r2, [r7, #20]
 800af4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af50:	f043 0318 	orr.w	r3, r3, #24
 800af54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af5c:	691b      	ldr	r3, [r3, #16]
 800af5e:	697a      	ldr	r2, [r7, #20]
 800af60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af64:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800af68:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800af6a:	7afb      	ldrb	r3, [r7, #11]
 800af6c:	2b01      	cmp	r3, #1
 800af6e:	d10f      	bne.n	800af90 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af76:	461a      	mov	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	697a      	ldr	r2, [r7, #20]
 800af86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af8a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800af8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	371c      	adds	r7, #28
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	4f54300a 	.word	0x4f54300a

0800afa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b085      	sub	sp, #20
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800afac:	2300      	movs	r3, #0
 800afae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	3301      	adds	r3, #1
 800afb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800afbc:	d901      	bls.n	800afc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800afbe:	2303      	movs	r3, #3
 800afc0:	e022      	b.n	800b008 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	691b      	ldr	r3, [r3, #16]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	daf2      	bge.n	800afb0 <USB_CoreReset+0xc>

  count = 10U;
 800afca:	230a      	movs	r3, #10
 800afcc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800afce:	e002      	b.n	800afd6 <USB_CoreReset+0x32>
  {
    count--;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	3b01      	subs	r3, #1
 800afd4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d1f9      	bne.n	800afd0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	f043 0201 	orr.w	r2, r3, #1
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	3301      	adds	r3, #1
 800afec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aff4:	d901      	bls.n	800affa <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800aff6:	2303      	movs	r3, #3
 800aff8:	e006      	b.n	800b008 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	691b      	ldr	r3, [r3, #16]
 800affe:	f003 0301 	and.w	r3, r3, #1
 800b002:	2b01      	cmp	r3, #1
 800b004:	d0f0      	beq.n	800afe8 <USB_CoreReset+0x44>

  return HAL_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3714      	adds	r7, #20
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	460b      	mov	r3, r1
 800b01e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b020:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b024:	f002 fd1e 	bl	800da64 <USBD_static_malloc>
 800b028:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d109      	bne.n	800b044 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	32b0      	adds	r2, #176	@ 0xb0
 800b03a:	2100      	movs	r1, #0
 800b03c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b040:	2302      	movs	r3, #2
 800b042:	e0d4      	b.n	800b1ee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b044:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b048:	2100      	movs	r1, #0
 800b04a:	68f8      	ldr	r0, [r7, #12]
 800b04c:	f002 fd9e 	bl	800db8c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	32b0      	adds	r2, #176	@ 0xb0
 800b05a:	68f9      	ldr	r1, [r7, #12]
 800b05c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	32b0      	adds	r2, #176	@ 0xb0
 800b06a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	7c1b      	ldrb	r3, [r3, #16]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d138      	bne.n	800b0ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b07c:	4b5e      	ldr	r3, [pc, #376]	@ (800b1f8 <USBD_CDC_Init+0x1e4>)
 800b07e:	7819      	ldrb	r1, [r3, #0]
 800b080:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b084:	2202      	movs	r2, #2
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f002 fbc9 	bl	800d81e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b08c:	4b5a      	ldr	r3, [pc, #360]	@ (800b1f8 <USBD_CDC_Init+0x1e4>)
 800b08e:	781b      	ldrb	r3, [r3, #0]
 800b090:	f003 020f 	and.w	r2, r3, #15
 800b094:	6879      	ldr	r1, [r7, #4]
 800b096:	4613      	mov	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4413      	add	r3, r2
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	440b      	add	r3, r1
 800b0a0:	3323      	adds	r3, #35	@ 0x23
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b0a6:	4b55      	ldr	r3, [pc, #340]	@ (800b1fc <USBD_CDC_Init+0x1e8>)
 800b0a8:	7819      	ldrb	r1, [r3, #0]
 800b0aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0ae:	2202      	movs	r2, #2
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f002 fbb4 	bl	800d81e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b0b6:	4b51      	ldr	r3, [pc, #324]	@ (800b1fc <USBD_CDC_Init+0x1e8>)
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	f003 020f 	and.w	r2, r3, #15
 800b0be:	6879      	ldr	r1, [r7, #4]
 800b0c0:	4613      	mov	r3, r2
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	4413      	add	r3, r2
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	440b      	add	r3, r1
 800b0ca:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b0d2:	4b4b      	ldr	r3, [pc, #300]	@ (800b200 <USBD_CDC_Init+0x1ec>)
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	f003 020f 	and.w	r2, r3, #15
 800b0da:	6879      	ldr	r1, [r7, #4]
 800b0dc:	4613      	mov	r3, r2
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	4413      	add	r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	440b      	add	r3, r1
 800b0e6:	331c      	adds	r3, #28
 800b0e8:	2210      	movs	r2, #16
 800b0ea:	601a      	str	r2, [r3, #0]
 800b0ec:	e035      	b.n	800b15a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b0ee:	4b42      	ldr	r3, [pc, #264]	@ (800b1f8 <USBD_CDC_Init+0x1e4>)
 800b0f0:	7819      	ldrb	r1, [r3, #0]
 800b0f2:	2340      	movs	r3, #64	@ 0x40
 800b0f4:	2202      	movs	r2, #2
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f002 fb91 	bl	800d81e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b0fc:	4b3e      	ldr	r3, [pc, #248]	@ (800b1f8 <USBD_CDC_Init+0x1e4>)
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	f003 020f 	and.w	r2, r3, #15
 800b104:	6879      	ldr	r1, [r7, #4]
 800b106:	4613      	mov	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4413      	add	r3, r2
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	440b      	add	r3, r1
 800b110:	3323      	adds	r3, #35	@ 0x23
 800b112:	2201      	movs	r2, #1
 800b114:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b116:	4b39      	ldr	r3, [pc, #228]	@ (800b1fc <USBD_CDC_Init+0x1e8>)
 800b118:	7819      	ldrb	r1, [r3, #0]
 800b11a:	2340      	movs	r3, #64	@ 0x40
 800b11c:	2202      	movs	r2, #2
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f002 fb7d 	bl	800d81e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b124:	4b35      	ldr	r3, [pc, #212]	@ (800b1fc <USBD_CDC_Init+0x1e8>)
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	f003 020f 	and.w	r2, r3, #15
 800b12c:	6879      	ldr	r1, [r7, #4]
 800b12e:	4613      	mov	r3, r2
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	4413      	add	r3, r2
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	440b      	add	r3, r1
 800b138:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b13c:	2201      	movs	r2, #1
 800b13e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b140:	4b2f      	ldr	r3, [pc, #188]	@ (800b200 <USBD_CDC_Init+0x1ec>)
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	f003 020f 	and.w	r2, r3, #15
 800b148:	6879      	ldr	r1, [r7, #4]
 800b14a:	4613      	mov	r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	4413      	add	r3, r2
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	440b      	add	r3, r1
 800b154:	331c      	adds	r3, #28
 800b156:	2210      	movs	r2, #16
 800b158:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b15a:	4b29      	ldr	r3, [pc, #164]	@ (800b200 <USBD_CDC_Init+0x1ec>)
 800b15c:	7819      	ldrb	r1, [r3, #0]
 800b15e:	2308      	movs	r3, #8
 800b160:	2203      	movs	r2, #3
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f002 fb5b 	bl	800d81e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b168:	4b25      	ldr	r3, [pc, #148]	@ (800b200 <USBD_CDC_Init+0x1ec>)
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	f003 020f 	and.w	r2, r3, #15
 800b170:	6879      	ldr	r1, [r7, #4]
 800b172:	4613      	mov	r3, r2
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	4413      	add	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	440b      	add	r3, r1
 800b17c:	3323      	adds	r3, #35	@ 0x23
 800b17e:	2201      	movs	r2, #1
 800b180:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2200      	movs	r2, #0
 800b186:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	33b0      	adds	r3, #176	@ 0xb0
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	4413      	add	r3, r2
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d101      	bne.n	800b1bc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b1b8:	2302      	movs	r3, #2
 800b1ba:	e018      	b.n	800b1ee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	7c1b      	ldrb	r3, [r3, #16]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10a      	bne.n	800b1da <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1c4:	4b0d      	ldr	r3, [pc, #52]	@ (800b1fc <USBD_CDC_Init+0x1e8>)
 800b1c6:	7819      	ldrb	r1, [r3, #0]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f002 fc12 	bl	800d9fc <USBD_LL_PrepareReceive>
 800b1d8:	e008      	b.n	800b1ec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b1da:	4b08      	ldr	r3, [pc, #32]	@ (800b1fc <USBD_CDC_Init+0x1e8>)
 800b1dc:	7819      	ldrb	r1, [r3, #0]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b1e4:	2340      	movs	r3, #64	@ 0x40
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f002 fc08 	bl	800d9fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b1ec:	2300      	movs	r3, #0
}
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	3710      	adds	r7, #16
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	200000bf 	.word	0x200000bf
 800b1fc:	200000c0 	.word	0x200000c0
 800b200:	200000c1 	.word	0x200000c1

0800b204 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	460b      	mov	r3, r1
 800b20e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b210:	4b3a      	ldr	r3, [pc, #232]	@ (800b2fc <USBD_CDC_DeInit+0xf8>)
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	4619      	mov	r1, r3
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f002 fb27 	bl	800d86a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b21c:	4b37      	ldr	r3, [pc, #220]	@ (800b2fc <USBD_CDC_DeInit+0xf8>)
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	f003 020f 	and.w	r2, r3, #15
 800b224:	6879      	ldr	r1, [r7, #4]
 800b226:	4613      	mov	r3, r2
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	4413      	add	r3, r2
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	440b      	add	r3, r1
 800b230:	3323      	adds	r3, #35	@ 0x23
 800b232:	2200      	movs	r2, #0
 800b234:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b236:	4b32      	ldr	r3, [pc, #200]	@ (800b300 <USBD_CDC_DeInit+0xfc>)
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f002 fb14 	bl	800d86a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b242:	4b2f      	ldr	r3, [pc, #188]	@ (800b300 <USBD_CDC_DeInit+0xfc>)
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	f003 020f 	and.w	r2, r3, #15
 800b24a:	6879      	ldr	r1, [r7, #4]
 800b24c:	4613      	mov	r3, r2
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	4413      	add	r3, r2
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	440b      	add	r3, r1
 800b256:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b25a:	2200      	movs	r2, #0
 800b25c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b25e:	4b29      	ldr	r3, [pc, #164]	@ (800b304 <USBD_CDC_DeInit+0x100>)
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	4619      	mov	r1, r3
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f002 fb00 	bl	800d86a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b26a:	4b26      	ldr	r3, [pc, #152]	@ (800b304 <USBD_CDC_DeInit+0x100>)
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	f003 020f 	and.w	r2, r3, #15
 800b272:	6879      	ldr	r1, [r7, #4]
 800b274:	4613      	mov	r3, r2
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	4413      	add	r3, r2
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	440b      	add	r3, r1
 800b27e:	3323      	adds	r3, #35	@ 0x23
 800b280:	2200      	movs	r2, #0
 800b282:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b284:	4b1f      	ldr	r3, [pc, #124]	@ (800b304 <USBD_CDC_DeInit+0x100>)
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	f003 020f 	and.w	r2, r3, #15
 800b28c:	6879      	ldr	r1, [r7, #4]
 800b28e:	4613      	mov	r3, r2
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	4413      	add	r3, r2
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	440b      	add	r3, r1
 800b298:	331c      	adds	r3, #28
 800b29a:	2200      	movs	r2, #0
 800b29c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	32b0      	adds	r2, #176	@ 0xb0
 800b2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d01f      	beq.n	800b2f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b2b6:	687a      	ldr	r2, [r7, #4]
 800b2b8:	33b0      	adds	r3, #176	@ 0xb0
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	4413      	add	r3, r2
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	32b0      	adds	r2, #176	@ 0xb0
 800b2ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f002 fbd4 	bl	800da80 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	32b0      	adds	r2, #176	@ 0xb0
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3708      	adds	r7, #8
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	200000bf 	.word	0x200000bf
 800b300:	200000c0 	.word	0x200000c0
 800b304:	200000c1 	.word	0x200000c1

0800b308 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b086      	sub	sp, #24
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	32b0      	adds	r2, #176	@ 0xb0
 800b31c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b320:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b322:	2300      	movs	r3, #0
 800b324:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b326:	2300      	movs	r3, #0
 800b328:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b32a:	2300      	movs	r3, #0
 800b32c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d101      	bne.n	800b338 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b334:	2303      	movs	r3, #3
 800b336:	e0bf      	b.n	800b4b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b340:	2b00      	cmp	r3, #0
 800b342:	d050      	beq.n	800b3e6 <USBD_CDC_Setup+0xde>
 800b344:	2b20      	cmp	r3, #32
 800b346:	f040 80af 	bne.w	800b4a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	88db      	ldrh	r3, [r3, #6]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d03a      	beq.n	800b3c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	b25b      	sxtb	r3, r3
 800b358:	2b00      	cmp	r3, #0
 800b35a:	da1b      	bge.n	800b394 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	33b0      	adds	r3, #176	@ 0xb0
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	4413      	add	r3, r2
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	683a      	ldr	r2, [r7, #0]
 800b370:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b372:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b374:	683a      	ldr	r2, [r7, #0]
 800b376:	88d2      	ldrh	r2, [r2, #6]
 800b378:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	88db      	ldrh	r3, [r3, #6]
 800b37e:	2b07      	cmp	r3, #7
 800b380:	bf28      	it	cs
 800b382:	2307      	movcs	r3, #7
 800b384:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	89fa      	ldrh	r2, [r7, #14]
 800b38a:	4619      	mov	r1, r3
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f001 fda9 	bl	800cee4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b392:	e090      	b.n	800b4b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	785a      	ldrb	r2, [r3, #1]
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	88db      	ldrh	r3, [r3, #6]
 800b3a2:	2b3f      	cmp	r3, #63	@ 0x3f
 800b3a4:	d803      	bhi.n	800b3ae <USBD_CDC_Setup+0xa6>
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	88db      	ldrh	r3, [r3, #6]
 800b3aa:	b2da      	uxtb	r2, r3
 800b3ac:	e000      	b.n	800b3b0 <USBD_CDC_Setup+0xa8>
 800b3ae:	2240      	movs	r2, #64	@ 0x40
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b3b6:	6939      	ldr	r1, [r7, #16]
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800b3be:	461a      	mov	r2, r3
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f001 fdbe 	bl	800cf42 <USBD_CtlPrepareRx>
      break;
 800b3c6:	e076      	b.n	800b4b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	33b0      	adds	r3, #176	@ 0xb0
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	4413      	add	r3, r2
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	7850      	ldrb	r0, [r2, #1]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	6839      	ldr	r1, [r7, #0]
 800b3e2:	4798      	blx	r3
      break;
 800b3e4:	e067      	b.n	800b4b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	785b      	ldrb	r3, [r3, #1]
 800b3ea:	2b0b      	cmp	r3, #11
 800b3ec:	d851      	bhi.n	800b492 <USBD_CDC_Setup+0x18a>
 800b3ee:	a201      	add	r2, pc, #4	@ (adr r2, 800b3f4 <USBD_CDC_Setup+0xec>)
 800b3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f4:	0800b425 	.word	0x0800b425
 800b3f8:	0800b4a1 	.word	0x0800b4a1
 800b3fc:	0800b493 	.word	0x0800b493
 800b400:	0800b493 	.word	0x0800b493
 800b404:	0800b493 	.word	0x0800b493
 800b408:	0800b493 	.word	0x0800b493
 800b40c:	0800b493 	.word	0x0800b493
 800b410:	0800b493 	.word	0x0800b493
 800b414:	0800b493 	.word	0x0800b493
 800b418:	0800b493 	.word	0x0800b493
 800b41c:	0800b44f 	.word	0x0800b44f
 800b420:	0800b479 	.word	0x0800b479
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	2b03      	cmp	r3, #3
 800b42e:	d107      	bne.n	800b440 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b430:	f107 030a 	add.w	r3, r7, #10
 800b434:	2202      	movs	r2, #2
 800b436:	4619      	mov	r1, r3
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f001 fd53 	bl	800cee4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b43e:	e032      	b.n	800b4a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b440:	6839      	ldr	r1, [r7, #0]
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f001 fcd1 	bl	800cdea <USBD_CtlError>
            ret = USBD_FAIL;
 800b448:	2303      	movs	r3, #3
 800b44a:	75fb      	strb	r3, [r7, #23]
          break;
 800b44c:	e02b      	b.n	800b4a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b454:	b2db      	uxtb	r3, r3
 800b456:	2b03      	cmp	r3, #3
 800b458:	d107      	bne.n	800b46a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b45a:	f107 030d 	add.w	r3, r7, #13
 800b45e:	2201      	movs	r2, #1
 800b460:	4619      	mov	r1, r3
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f001 fd3e 	bl	800cee4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b468:	e01d      	b.n	800b4a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b46a:	6839      	ldr	r1, [r7, #0]
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f001 fcbc 	bl	800cdea <USBD_CtlError>
            ret = USBD_FAIL;
 800b472:	2303      	movs	r3, #3
 800b474:	75fb      	strb	r3, [r7, #23]
          break;
 800b476:	e016      	b.n	800b4a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b47e:	b2db      	uxtb	r3, r3
 800b480:	2b03      	cmp	r3, #3
 800b482:	d00f      	beq.n	800b4a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b484:	6839      	ldr	r1, [r7, #0]
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f001 fcaf 	bl	800cdea <USBD_CtlError>
            ret = USBD_FAIL;
 800b48c:	2303      	movs	r3, #3
 800b48e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b490:	e008      	b.n	800b4a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b492:	6839      	ldr	r1, [r7, #0]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f001 fca8 	bl	800cdea <USBD_CtlError>
          ret = USBD_FAIL;
 800b49a:	2303      	movs	r3, #3
 800b49c:	75fb      	strb	r3, [r7, #23]
          break;
 800b49e:	e002      	b.n	800b4a6 <USBD_CDC_Setup+0x19e>
          break;
 800b4a0:	bf00      	nop
 800b4a2:	e008      	b.n	800b4b6 <USBD_CDC_Setup+0x1ae>
          break;
 800b4a4:	bf00      	nop
      }
      break;
 800b4a6:	e006      	b.n	800b4b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b4a8:	6839      	ldr	r1, [r7, #0]
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f001 fc9d 	bl	800cdea <USBD_CtlError>
      ret = USBD_FAIL;
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	75fb      	strb	r3, [r7, #23]
      break;
 800b4b4:	bf00      	nop
  }

  return (uint8_t)ret;
 800b4b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3718      	adds	r7, #24
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b084      	sub	sp, #16
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b4d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	32b0      	adds	r2, #176	@ 0xb0
 800b4de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d101      	bne.n	800b4ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	e065      	b.n	800b5b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	32b0      	adds	r2, #176	@ 0xb0
 800b4f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b4fa:	78fb      	ldrb	r3, [r7, #3]
 800b4fc:	f003 020f 	and.w	r2, r3, #15
 800b500:	6879      	ldr	r1, [r7, #4]
 800b502:	4613      	mov	r3, r2
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	4413      	add	r3, r2
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	440b      	add	r3, r1
 800b50c:	3314      	adds	r3, #20
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d02f      	beq.n	800b574 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b514:	78fb      	ldrb	r3, [r7, #3]
 800b516:	f003 020f 	and.w	r2, r3, #15
 800b51a:	6879      	ldr	r1, [r7, #4]
 800b51c:	4613      	mov	r3, r2
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	4413      	add	r3, r2
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	440b      	add	r3, r1
 800b526:	3314      	adds	r3, #20
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	78fb      	ldrb	r3, [r7, #3]
 800b52c:	f003 010f 	and.w	r1, r3, #15
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	460b      	mov	r3, r1
 800b534:	00db      	lsls	r3, r3, #3
 800b536:	440b      	add	r3, r1
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	4403      	add	r3, r0
 800b53c:	331c      	adds	r3, #28
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	fbb2 f1f3 	udiv	r1, r2, r3
 800b544:	fb01 f303 	mul.w	r3, r1, r3
 800b548:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d112      	bne.n	800b574 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b54e:	78fb      	ldrb	r3, [r7, #3]
 800b550:	f003 020f 	and.w	r2, r3, #15
 800b554:	6879      	ldr	r1, [r7, #4]
 800b556:	4613      	mov	r3, r2
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	4413      	add	r3, r2
 800b55c:	009b      	lsls	r3, r3, #2
 800b55e:	440b      	add	r3, r1
 800b560:	3314      	adds	r3, #20
 800b562:	2200      	movs	r2, #0
 800b564:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b566:	78f9      	ldrb	r1, [r7, #3]
 800b568:	2300      	movs	r3, #0
 800b56a:	2200      	movs	r2, #0
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f002 fa24 	bl	800d9ba <USBD_LL_Transmit>
 800b572:	e01f      	b.n	800b5b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	2200      	movs	r2, #0
 800b578:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	33b0      	adds	r3, #176	@ 0xb0
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	4413      	add	r3, r2
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d010      	beq.n	800b5b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	33b0      	adds	r3, #176	@ 0xb0
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4413      	add	r3, r2
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	68ba      	ldr	r2, [r7, #8]
 800b5a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b5aa:	68ba      	ldr	r2, [r7, #8]
 800b5ac:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b5b0:	78fa      	ldrb	r2, [r7, #3]
 800b5b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b084      	sub	sp, #16
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	32b0      	adds	r2, #176	@ 0xb0
 800b5d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	32b0      	adds	r2, #176	@ 0xb0
 800b5e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d101      	bne.n	800b5f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b5ec:	2303      	movs	r3, #3
 800b5ee:	e01a      	b.n	800b626 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b5f0:	78fb      	ldrb	r3, [r7, #3]
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f002 fa22 	bl	800da3e <USBD_LL_GetRxDataSize>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	33b0      	adds	r3, #176	@ 0xb0
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	4413      	add	r3, r2
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	68fa      	ldr	r2, [r7, #12]
 800b616:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b61a:	68fa      	ldr	r2, [r7, #12]
 800b61c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b620:	4611      	mov	r1, r2
 800b622:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b084      	sub	sp, #16
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	32b0      	adds	r2, #176	@ 0xb0
 800b640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b644:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d101      	bne.n	800b650 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b64c:	2303      	movs	r3, #3
 800b64e:	e024      	b.n	800b69a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	33b0      	adds	r3, #176	@ 0xb0
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	4413      	add	r3, r2
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d019      	beq.n	800b698 <USBD_CDC_EP0_RxReady+0x6a>
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b66a:	2bff      	cmp	r3, #255	@ 0xff
 800b66c:	d014      	beq.n	800b698 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	33b0      	adds	r3, #176	@ 0xb0
 800b678:	009b      	lsls	r3, r3, #2
 800b67a:	4413      	add	r3, r2
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b686:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b68e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	22ff      	movs	r2, #255	@ 0xff
 800b694:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b698:	2300      	movs	r3, #0
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}
	...

0800b6a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b086      	sub	sp, #24
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b6ac:	2182      	movs	r1, #130	@ 0x82
 800b6ae:	4818      	ldr	r0, [pc, #96]	@ (800b710 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b6b0:	f000 fd62 	bl	800c178 <USBD_GetEpDesc>
 800b6b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b6b6:	2101      	movs	r1, #1
 800b6b8:	4815      	ldr	r0, [pc, #84]	@ (800b710 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b6ba:	f000 fd5d 	bl	800c178 <USBD_GetEpDesc>
 800b6be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b6c0:	2181      	movs	r1, #129	@ 0x81
 800b6c2:	4813      	ldr	r0, [pc, #76]	@ (800b710 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b6c4:	f000 fd58 	bl	800c178 <USBD_GetEpDesc>
 800b6c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d002      	beq.n	800b6d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	2210      	movs	r2, #16
 800b6d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d006      	beq.n	800b6ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6e4:	711a      	strb	r2, [r3, #4]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d006      	beq.n	800b6fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b6f8:	711a      	strb	r2, [r3, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2243      	movs	r2, #67	@ 0x43
 800b702:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b704:	4b02      	ldr	r3, [pc, #8]	@ (800b710 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b706:	4618      	mov	r0, r3
 800b708:	3718      	adds	r7, #24
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	2000007c 	.word	0x2000007c

0800b714 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b086      	sub	sp, #24
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b71c:	2182      	movs	r1, #130	@ 0x82
 800b71e:	4818      	ldr	r0, [pc, #96]	@ (800b780 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b720:	f000 fd2a 	bl	800c178 <USBD_GetEpDesc>
 800b724:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b726:	2101      	movs	r1, #1
 800b728:	4815      	ldr	r0, [pc, #84]	@ (800b780 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b72a:	f000 fd25 	bl	800c178 <USBD_GetEpDesc>
 800b72e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b730:	2181      	movs	r1, #129	@ 0x81
 800b732:	4813      	ldr	r0, [pc, #76]	@ (800b780 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b734:	f000 fd20 	bl	800c178 <USBD_GetEpDesc>
 800b738:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d002      	beq.n	800b746 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	2210      	movs	r2, #16
 800b744:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d006      	beq.n	800b75a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	2200      	movs	r2, #0
 800b750:	711a      	strb	r2, [r3, #4]
 800b752:	2200      	movs	r2, #0
 800b754:	f042 0202 	orr.w	r2, r2, #2
 800b758:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d006      	beq.n	800b76e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2200      	movs	r2, #0
 800b764:	711a      	strb	r2, [r3, #4]
 800b766:	2200      	movs	r2, #0
 800b768:	f042 0202 	orr.w	r2, r2, #2
 800b76c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2243      	movs	r2, #67	@ 0x43
 800b772:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b774:	4b02      	ldr	r3, [pc, #8]	@ (800b780 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b776:	4618      	mov	r0, r3
 800b778:	3718      	adds	r7, #24
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	2000007c 	.word	0x2000007c

0800b784 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b78c:	2182      	movs	r1, #130	@ 0x82
 800b78e:	4818      	ldr	r0, [pc, #96]	@ (800b7f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b790:	f000 fcf2 	bl	800c178 <USBD_GetEpDesc>
 800b794:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b796:	2101      	movs	r1, #1
 800b798:	4815      	ldr	r0, [pc, #84]	@ (800b7f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b79a:	f000 fced 	bl	800c178 <USBD_GetEpDesc>
 800b79e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b7a0:	2181      	movs	r1, #129	@ 0x81
 800b7a2:	4813      	ldr	r0, [pc, #76]	@ (800b7f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b7a4:	f000 fce8 	bl	800c178 <USBD_GetEpDesc>
 800b7a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d002      	beq.n	800b7b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	2210      	movs	r2, #16
 800b7b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d006      	beq.n	800b7ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b7c4:	711a      	strb	r2, [r3, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d006      	beq.n	800b7de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b7d8:	711a      	strb	r2, [r3, #4]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2243      	movs	r2, #67	@ 0x43
 800b7e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b7e4:	4b02      	ldr	r3, [pc, #8]	@ (800b7f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3718      	adds	r7, #24
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	2000007c 	.word	0x2000007c

0800b7f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	220a      	movs	r2, #10
 800b800:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b802:	4b03      	ldr	r3, [pc, #12]	@ (800b810 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b804:	4618      	mov	r0, r3
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr
 800b810:	20000038 	.word	0x20000038

0800b814 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b824:	2303      	movs	r3, #3
 800b826:	e009      	b.n	800b83c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	33b0      	adds	r3, #176	@ 0xb0
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	4413      	add	r3, r2
 800b836:	683a      	ldr	r2, [r7, #0]
 800b838:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b848:	b480      	push	{r7}
 800b84a:	b087      	sub	sp, #28
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	32b0      	adds	r2, #176	@ 0xb0
 800b85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b862:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d101      	bne.n	800b86e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b86a:	2303      	movs	r3, #3
 800b86c:	e008      	b.n	800b880 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	371c      	adds	r7, #28
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	32b0      	adds	r2, #176	@ 0xb0
 800b8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d101      	bne.n	800b8b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b8ac:	2303      	movs	r3, #3
 800b8ae:	e004      	b.n	800b8ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	683a      	ldr	r2, [r7, #0]
 800b8b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
	...

0800b8c8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	32b0      	adds	r2, #176	@ 0xb0
 800b8da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8de:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d101      	bne.n	800b8ee <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b8ea:	2303      	movs	r3, #3
 800b8ec:	e025      	b.n	800b93a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d11f      	bne.n	800b938 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b900:	4b10      	ldr	r3, [pc, #64]	@ (800b944 <USBD_CDC_TransmitPacket+0x7c>)
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	f003 020f 	and.w	r2, r3, #15
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	4613      	mov	r3, r2
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	4413      	add	r3, r2
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	4403      	add	r3, r0
 800b91a:	3314      	adds	r3, #20
 800b91c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b91e:	4b09      	ldr	r3, [pc, #36]	@ (800b944 <USBD_CDC_TransmitPacket+0x7c>)
 800b920:	7819      	ldrb	r1, [r3, #0]
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f002 f843 	bl	800d9ba <USBD_LL_Transmit>

    ret = USBD_OK;
 800b934:	2300      	movs	r3, #0
 800b936:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b938:	7bfb      	ldrb	r3, [r7, #15]
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3710      	adds	r7, #16
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	200000bf 	.word	0x200000bf

0800b948 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	32b0      	adds	r2, #176	@ 0xb0
 800b95a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b95e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	32b0      	adds	r2, #176	@ 0xb0
 800b96a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d101      	bne.n	800b976 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b972:	2303      	movs	r3, #3
 800b974:	e018      	b.n	800b9a8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	7c1b      	ldrb	r3, [r3, #16]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d10a      	bne.n	800b994 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b97e:	4b0c      	ldr	r3, [pc, #48]	@ (800b9b0 <USBD_CDC_ReceivePacket+0x68>)
 800b980:	7819      	ldrb	r1, [r3, #0]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b988:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f002 f835 	bl	800d9fc <USBD_LL_PrepareReceive>
 800b992:	e008      	b.n	800b9a6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b994:	4b06      	ldr	r3, [pc, #24]	@ (800b9b0 <USBD_CDC_ReceivePacket+0x68>)
 800b996:	7819      	ldrb	r1, [r3, #0]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b99e:	2340      	movs	r3, #64	@ 0x40
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f002 f82b 	bl	800d9fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3710      	adds	r7, #16
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	200000c0 	.word	0x200000c0

0800b9b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b086      	sub	sp, #24
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	4613      	mov	r3, r2
 800b9c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d101      	bne.n	800b9cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	e01f      	b.n	800ba0c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d003      	beq.n	800b9f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	79fa      	ldrb	r2, [r7, #7]
 800b9fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ba00:	68f8      	ldr	r0, [r7, #12]
 800ba02:	f001 fea5 	bl	800d750 <USBD_LL_Init>
 800ba06:	4603      	mov	r3, r0
 800ba08:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ba0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3718      	adds	r7, #24
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d101      	bne.n	800ba2c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ba28:	2303      	movs	r3, #3
 800ba2a:	e025      	b.n	800ba78 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	683a      	ldr	r2, [r7, #0]
 800ba30:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	32ae      	adds	r2, #174	@ 0xae
 800ba3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d00f      	beq.n	800ba68 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	32ae      	adds	r2, #174	@ 0xae
 800ba52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba58:	f107 020e 	add.w	r2, r7, #14
 800ba5c:	4610      	mov	r0, r2
 800ba5e:	4798      	blx	r3
 800ba60:	4602      	mov	r2, r0
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ba6e:	1c5a      	adds	r2, r3, #1
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ba76:	2300      	movs	r3, #0
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f001 fead 	bl	800d7e8 <USBD_LL_Start>
 800ba8e:	4603      	mov	r3, r0
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3708      	adds	r7, #8
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800baa0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	370c      	adds	r7, #12
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr

0800baae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b084      	sub	sp, #16
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	6078      	str	r0, [r7, #4]
 800bab6:	460b      	mov	r3, r1
 800bab8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800baba:	2300      	movs	r3, #0
 800babc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d009      	beq.n	800badc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	78fa      	ldrb	r2, [r7, #3]
 800bad2:	4611      	mov	r1, r2
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	4798      	blx	r3
 800bad8:	4603      	mov	r3, r0
 800bada:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800badc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b084      	sub	sp, #16
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
 800baee:	460b      	mov	r3, r1
 800baf0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	78fa      	ldrb	r2, [r7, #3]
 800bb00:	4611      	mov	r1, r2
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	4798      	blx	r3
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d001      	beq.n	800bb10 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800bb0c:	2303      	movs	r3, #3
 800bb0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3710      	adds	r7, #16
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb1a:	b580      	push	{r7, lr}
 800bb1c:	b084      	sub	sp, #16
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
 800bb22:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb2a:	6839      	ldr	r1, [r7, #0]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f001 f922 	bl	800cd76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2201      	movs	r2, #1
 800bb36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800bb40:	461a      	mov	r2, r3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bb4e:	f003 031f 	and.w	r3, r3, #31
 800bb52:	2b02      	cmp	r3, #2
 800bb54:	d01a      	beq.n	800bb8c <USBD_LL_SetupStage+0x72>
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	d822      	bhi.n	800bba0 <USBD_LL_SetupStage+0x86>
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d002      	beq.n	800bb64 <USBD_LL_SetupStage+0x4a>
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d00a      	beq.n	800bb78 <USBD_LL_SetupStage+0x5e>
 800bb62:	e01d      	b.n	800bba0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fb77 	bl	800c260 <USBD_StdDevReq>
 800bb72:	4603      	mov	r3, r0
 800bb74:	73fb      	strb	r3, [r7, #15]
      break;
 800bb76:	e020      	b.n	800bbba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb7e:	4619      	mov	r1, r3
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 fbdf 	bl	800c344 <USBD_StdItfReq>
 800bb86:	4603      	mov	r3, r0
 800bb88:	73fb      	strb	r3, [r7, #15]
      break;
 800bb8a:	e016      	b.n	800bbba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800bb92:	4619      	mov	r1, r3
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 fc41 	bl	800c41c <USBD_StdEPReq>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	73fb      	strb	r3, [r7, #15]
      break;
 800bb9e:	e00c      	b.n	800bbba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bba6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800bbaa:	b2db      	uxtb	r3, r3
 800bbac:	4619      	mov	r1, r3
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f001 fe7a 	bl	800d8a8 <USBD_LL_StallEP>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	73fb      	strb	r3, [r7, #15]
      break;
 800bbb8:	bf00      	nop
  }

  return ret;
 800bbba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3710      	adds	r7, #16
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}

0800bbc4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b086      	sub	sp, #24
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	60f8      	str	r0, [r7, #12]
 800bbcc:	460b      	mov	r3, r1
 800bbce:	607a      	str	r2, [r7, #4]
 800bbd0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800bbd6:	7afb      	ldrb	r3, [r7, #11]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d177      	bne.n	800bccc <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800bbe2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bbea:	2b03      	cmp	r3, #3
 800bbec:	f040 80a1 	bne.w	800bd32 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	693a      	ldr	r2, [r7, #16]
 800bbf6:	8992      	ldrh	r2, [r2, #12]
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d91c      	bls.n	800bc36 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	693a      	ldr	r2, [r7, #16]
 800bc02:	8992      	ldrh	r2, [r2, #12]
 800bc04:	1a9a      	subs	r2, r3, r2
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	691b      	ldr	r3, [r3, #16]
 800bc0e:	693a      	ldr	r2, [r7, #16]
 800bc10:	8992      	ldrh	r2, [r2, #12]
 800bc12:	441a      	add	r2, r3
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	6919      	ldr	r1, [r3, #16]
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	899b      	ldrh	r3, [r3, #12]
 800bc20:	461a      	mov	r2, r3
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	4293      	cmp	r3, r2
 800bc28:	bf38      	it	cc
 800bc2a:	4613      	movcc	r3, r2
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f001 f9a8 	bl	800cf84 <USBD_CtlContinueRx>
 800bc34:	e07d      	b.n	800bd32 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800bc3c:	f003 031f 	and.w	r3, r3, #31
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	d014      	beq.n	800bc6e <USBD_LL_DataOutStage+0xaa>
 800bc44:	2b02      	cmp	r3, #2
 800bc46:	d81d      	bhi.n	800bc84 <USBD_LL_DataOutStage+0xc0>
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d002      	beq.n	800bc52 <USBD_LL_DataOutStage+0x8e>
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d003      	beq.n	800bc58 <USBD_LL_DataOutStage+0x94>
 800bc50:	e018      	b.n	800bc84 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bc52:	2300      	movs	r3, #0
 800bc54:	75bb      	strb	r3, [r7, #22]
            break;
 800bc56:	e018      	b.n	800bc8a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	4619      	mov	r1, r3
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f000 fa6e 	bl	800c144 <USBD_CoreFindIF>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	75bb      	strb	r3, [r7, #22]
            break;
 800bc6c:	e00d      	b.n	800bc8a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	4619      	mov	r1, r3
 800bc78:	68f8      	ldr	r0, [r7, #12]
 800bc7a:	f000 fa70 	bl	800c15e <USBD_CoreFindEP>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	75bb      	strb	r3, [r7, #22]
            break;
 800bc82:	e002      	b.n	800bc8a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bc84:	2300      	movs	r3, #0
 800bc86:	75bb      	strb	r3, [r7, #22]
            break;
 800bc88:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bc8a:	7dbb      	ldrb	r3, [r7, #22]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d119      	bne.n	800bcc4 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	2b03      	cmp	r3, #3
 800bc9a:	d113      	bne.n	800bcc4 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bc9c:	7dba      	ldrb	r2, [r7, #22]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	32ae      	adds	r2, #174	@ 0xae
 800bca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bca6:	691b      	ldr	r3, [r3, #16]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d00b      	beq.n	800bcc4 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800bcac:	7dba      	ldrb	r2, [r7, #22]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bcb4:	7dba      	ldrb	r2, [r7, #22]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	32ae      	adds	r2, #174	@ 0xae
 800bcba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	68f8      	ldr	r0, [r7, #12]
 800bcc2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bcc4:	68f8      	ldr	r0, [r7, #12]
 800bcc6:	f001 f96e 	bl	800cfa6 <USBD_CtlSendStatus>
 800bcca:	e032      	b.n	800bd32 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bccc:	7afb      	ldrb	r3, [r7, #11]
 800bcce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	4619      	mov	r1, r3
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f000 fa41 	bl	800c15e <USBD_CoreFindEP>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bce0:	7dbb      	ldrb	r3, [r7, #22]
 800bce2:	2bff      	cmp	r3, #255	@ 0xff
 800bce4:	d025      	beq.n	800bd32 <USBD_LL_DataOutStage+0x16e>
 800bce6:	7dbb      	ldrb	r3, [r7, #22]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d122      	bne.n	800bd32 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	2b03      	cmp	r3, #3
 800bcf6:	d117      	bne.n	800bd28 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bcf8:	7dba      	ldrb	r2, [r7, #22]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	32ae      	adds	r2, #174	@ 0xae
 800bcfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd02:	699b      	ldr	r3, [r3, #24]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d00f      	beq.n	800bd28 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800bd08:	7dba      	ldrb	r2, [r7, #22]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bd10:	7dba      	ldrb	r2, [r7, #22]
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	32ae      	adds	r2, #174	@ 0xae
 800bd16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd1a:	699b      	ldr	r3, [r3, #24]
 800bd1c:	7afa      	ldrb	r2, [r7, #11]
 800bd1e:	4611      	mov	r1, r2
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	4798      	blx	r3
 800bd24:	4603      	mov	r3, r0
 800bd26:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bd28:	7dfb      	ldrb	r3, [r7, #23]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d001      	beq.n	800bd32 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800bd2e:	7dfb      	ldrb	r3, [r7, #23]
 800bd30:	e000      	b.n	800bd34 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800bd32:	2300      	movs	r3, #0
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3718      	adds	r7, #24
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b086      	sub	sp, #24
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	460b      	mov	r3, r1
 800bd46:	607a      	str	r2, [r7, #4]
 800bd48:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800bd4a:	7afb      	ldrb	r3, [r7, #11]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d178      	bne.n	800be42 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	3314      	adds	r3, #20
 800bd54:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bd5c:	2b02      	cmp	r3, #2
 800bd5e:	d163      	bne.n	800be28 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	685b      	ldr	r3, [r3, #4]
 800bd64:	693a      	ldr	r2, [r7, #16]
 800bd66:	8992      	ldrh	r2, [r2, #12]
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d91c      	bls.n	800bda6 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	685b      	ldr	r3, [r3, #4]
 800bd70:	693a      	ldr	r2, [r7, #16]
 800bd72:	8992      	ldrh	r2, [r2, #12]
 800bd74:	1a9a      	subs	r2, r3, r2
 800bd76:	693b      	ldr	r3, [r7, #16]
 800bd78:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	691b      	ldr	r3, [r3, #16]
 800bd7e:	693a      	ldr	r2, [r7, #16]
 800bd80:	8992      	ldrh	r2, [r2, #12]
 800bd82:	441a      	add	r2, r3
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	6919      	ldr	r1, [r3, #16]
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	461a      	mov	r2, r3
 800bd92:	68f8      	ldr	r0, [r7, #12]
 800bd94:	f001 f8c4 	bl	800cf20 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd98:	2300      	movs	r3, #0
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	f001 fe2c 	bl	800d9fc <USBD_LL_PrepareReceive>
 800bda4:	e040      	b.n	800be28 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	899b      	ldrh	r3, [r3, #12]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d11c      	bne.n	800bdee <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	693a      	ldr	r2, [r7, #16]
 800bdba:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d316      	bcc.n	800bdee <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	681a      	ldr	r2, [r3, #0]
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d20f      	bcs.n	800bdee <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bdce:	2200      	movs	r2, #0
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f001 f8a4 	bl	800cf20 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2200      	movs	r2, #0
 800bddc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bde0:	2300      	movs	r3, #0
 800bde2:	2200      	movs	r2, #0
 800bde4:	2100      	movs	r1, #0
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f001 fe08 	bl	800d9fc <USBD_LL_PrepareReceive>
 800bdec:	e01c      	b.n	800be28 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	2b03      	cmp	r3, #3
 800bdf8:	d10f      	bne.n	800be1a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d009      	beq.n	800be1a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2200      	movs	r2, #0
 800be0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be14:	68db      	ldr	r3, [r3, #12]
 800be16:	68f8      	ldr	r0, [r7, #12]
 800be18:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800be1a:	2180      	movs	r1, #128	@ 0x80
 800be1c:	68f8      	ldr	r0, [r7, #12]
 800be1e:	f001 fd43 	bl	800d8a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800be22:	68f8      	ldr	r0, [r7, #12]
 800be24:	f001 f8d2 	bl	800cfcc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d03a      	beq.n	800bea8 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800be32:	68f8      	ldr	r0, [r7, #12]
 800be34:	f7ff fe30 	bl	800ba98 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2200      	movs	r2, #0
 800be3c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800be40:	e032      	b.n	800bea8 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800be42:	7afb      	ldrb	r3, [r7, #11]
 800be44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	4619      	mov	r1, r3
 800be4c:	68f8      	ldr	r0, [r7, #12]
 800be4e:	f000 f986 	bl	800c15e <USBD_CoreFindEP>
 800be52:	4603      	mov	r3, r0
 800be54:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be56:	7dfb      	ldrb	r3, [r7, #23]
 800be58:	2bff      	cmp	r3, #255	@ 0xff
 800be5a:	d025      	beq.n	800bea8 <USBD_LL_DataInStage+0x16c>
 800be5c:	7dfb      	ldrb	r3, [r7, #23]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d122      	bne.n	800bea8 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be68:	b2db      	uxtb	r3, r3
 800be6a:	2b03      	cmp	r3, #3
 800be6c:	d11c      	bne.n	800bea8 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800be6e:	7dfa      	ldrb	r2, [r7, #23]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	32ae      	adds	r2, #174	@ 0xae
 800be74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be78:	695b      	ldr	r3, [r3, #20]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d014      	beq.n	800bea8 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800be7e:	7dfa      	ldrb	r2, [r7, #23]
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800be86:	7dfa      	ldrb	r2, [r7, #23]
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	32ae      	adds	r2, #174	@ 0xae
 800be8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be90:	695b      	ldr	r3, [r3, #20]
 800be92:	7afa      	ldrb	r2, [r7, #11]
 800be94:	4611      	mov	r1, r2
 800be96:	68f8      	ldr	r0, [r7, #12]
 800be98:	4798      	blx	r3
 800be9a:	4603      	mov	r3, r0
 800be9c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800be9e:	7dbb      	ldrb	r3, [r7, #22]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d001      	beq.n	800bea8 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800bea4:	7dbb      	ldrb	r3, [r7, #22]
 800bea6:	e000      	b.n	800beaa <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800bea8:	2300      	movs	r3, #0
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3718      	adds	r7, #24
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b084      	sub	sp, #16
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800beba:	2300      	movs	r3, #0
 800bebc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2201      	movs	r2, #1
 800bec2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2200      	movs	r2, #0
 800bed2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2200      	movs	r2, #0
 800bed8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800beea:	2b00      	cmp	r3, #0
 800beec:	d014      	beq.n	800bf18 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00e      	beq.n	800bf18 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	6852      	ldr	r2, [r2, #4]
 800bf06:	b2d2      	uxtb	r2, r2
 800bf08:	4611      	mov	r1, r2
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	4798      	blx	r3
 800bf0e:	4603      	mov	r3, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d001      	beq.n	800bf18 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bf14:	2303      	movs	r3, #3
 800bf16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf18:	2340      	movs	r3, #64	@ 0x40
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f001 fc7d 	bl	800d81e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2201      	movs	r2, #1
 800bf28:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2240      	movs	r2, #64	@ 0x40
 800bf30:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf34:	2340      	movs	r3, #64	@ 0x40
 800bf36:	2200      	movs	r2, #0
 800bf38:	2180      	movs	r1, #128	@ 0x80
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f001 fc6f 	bl	800d81e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2201      	movs	r2, #1
 800bf44:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2240      	movs	r2, #64	@ 0x40
 800bf4c:	841a      	strh	r2, [r3, #32]

  return ret;
 800bf4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3710      	adds	r7, #16
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b083      	sub	sp, #12
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	460b      	mov	r3, r1
 800bf62:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	78fa      	ldrb	r2, [r7, #3]
 800bf68:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf6a:	2300      	movs	r3, #0
}
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf86:	b2db      	uxtb	r3, r3
 800bf88:	2b04      	cmp	r3, #4
 800bf8a:	d006      	beq.n	800bf9a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf92:	b2da      	uxtb	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2204      	movs	r2, #4
 800bf9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	370c      	adds	r7, #12
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfbe:	b2db      	uxtb	r3, r3
 800bfc0:	2b04      	cmp	r3, #4
 800bfc2:	d106      	bne.n	800bfd2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bfca:	b2da      	uxtb	r2, r3
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bfd2:	2300      	movs	r3, #0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b082      	sub	sp, #8
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfee:	b2db      	uxtb	r3, r3
 800bff0:	2b03      	cmp	r3, #3
 800bff2:	d110      	bne.n	800c016 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00b      	beq.n	800c016 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c004:	69db      	ldr	r3, [r3, #28]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d005      	beq.n	800c016 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c010:	69db      	ldr	r3, [r3, #28]
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c016:	2300      	movs	r3, #0
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3708      	adds	r7, #8
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	460b      	mov	r3, r1
 800c02a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	32ae      	adds	r2, #174	@ 0xae
 800c036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d101      	bne.n	800c042 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c03e:	2303      	movs	r3, #3
 800c040:	e01c      	b.n	800c07c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	2b03      	cmp	r3, #3
 800c04c:	d115      	bne.n	800c07a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	32ae      	adds	r2, #174	@ 0xae
 800c058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c05c:	6a1b      	ldr	r3, [r3, #32]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d00b      	beq.n	800c07a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	32ae      	adds	r2, #174	@ 0xae
 800c06c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c070:	6a1b      	ldr	r3, [r3, #32]
 800c072:	78fa      	ldrb	r2, [r7, #3]
 800c074:	4611      	mov	r1, r2
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c07a:	2300      	movs	r3, #0
}
 800c07c:	4618      	mov	r0, r3
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	460b      	mov	r3, r1
 800c08e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	32ae      	adds	r2, #174	@ 0xae
 800c09a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d101      	bne.n	800c0a6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c0a2:	2303      	movs	r3, #3
 800c0a4:	e01c      	b.n	800c0e0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	2b03      	cmp	r3, #3
 800c0b0:	d115      	bne.n	800c0de <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	32ae      	adds	r2, #174	@ 0xae
 800c0bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d00b      	beq.n	800c0de <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	32ae      	adds	r2, #174	@ 0xae
 800c0d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0d6:	78fa      	ldrb	r2, [r7, #3]
 800c0d8:	4611      	mov	r1, r2
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c0de:	2300      	movs	r3, #0
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3708      	adds	r7, #8
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0f0:	2300      	movs	r3, #0
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	370c      	adds	r7, #12
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr

0800c0fe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b084      	sub	sp, #16
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c106:	2300      	movs	r3, #0
 800c108:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2201      	movs	r2, #1
 800c10e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d00e      	beq.n	800c13a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	6852      	ldr	r2, [r2, #4]
 800c128:	b2d2      	uxtb	r2, r2
 800c12a:	4611      	mov	r1, r2
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	4798      	blx	r3
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d001      	beq.n	800c13a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c136:	2303      	movs	r3, #3
 800c138:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c13a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3710      	adds	r7, #16
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	460b      	mov	r3, r1
 800c14e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c150:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c152:	4618      	mov	r0, r3
 800c154:	370c      	adds	r7, #12
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr

0800c15e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c15e:	b480      	push	{r7}
 800c160:	b083      	sub	sp, #12
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
 800c166:	460b      	mov	r3, r1
 800c168:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c16a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	370c      	adds	r7, #12
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr

0800c178 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b086      	sub	sp, #24
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	460b      	mov	r3, r1
 800c182:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c18c:	2300      	movs	r3, #0
 800c18e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	885b      	ldrh	r3, [r3, #2]
 800c194:	b29b      	uxth	r3, r3
 800c196:	68fa      	ldr	r2, [r7, #12]
 800c198:	7812      	ldrb	r2, [r2, #0]
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d91f      	bls.n	800c1de <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c1a4:	e013      	b.n	800c1ce <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c1a6:	f107 030a 	add.w	r3, r7, #10
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	6978      	ldr	r0, [r7, #20]
 800c1ae:	f000 f81b 	bl	800c1e8 <USBD_GetNextDesc>
 800c1b2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	785b      	ldrb	r3, [r3, #1]
 800c1b8:	2b05      	cmp	r3, #5
 800c1ba:	d108      	bne.n	800c1ce <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	789b      	ldrb	r3, [r3, #2]
 800c1c4:	78fa      	ldrb	r2, [r7, #3]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d008      	beq.n	800c1dc <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	885b      	ldrh	r3, [r3, #2]
 800c1d2:	b29a      	uxth	r2, r3
 800c1d4:	897b      	ldrh	r3, [r7, #10]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d8e5      	bhi.n	800c1a6 <USBD_GetEpDesc+0x2e>
 800c1da:	e000      	b.n	800c1de <USBD_GetEpDesc+0x66>
          break;
 800c1dc:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c1de:	693b      	ldr	r3, [r7, #16]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3718      	adds	r7, #24
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	881b      	ldrh	r3, [r3, #0]
 800c1fa:	68fa      	ldr	r2, [r7, #12]
 800c1fc:	7812      	ldrb	r2, [r2, #0]
 800c1fe:	4413      	add	r3, r2
 800c200:	b29a      	uxth	r2, r3
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	461a      	mov	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	4413      	add	r3, r2
 800c210:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c212:	68fb      	ldr	r3, [r7, #12]
}
 800c214:	4618      	mov	r0, r3
 800c216:	3714      	adds	r7, #20
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c220:	b480      	push	{r7}
 800c222:	b087      	sub	sp, #28
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c22c:	697b      	ldr	r3, [r7, #20]
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	3301      	adds	r3, #1
 800c236:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c23e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c242:	021b      	lsls	r3, r3, #8
 800c244:	b21a      	sxth	r2, r3
 800c246:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c24a:	4313      	orrs	r3, r2
 800c24c:	b21b      	sxth	r3, r3
 800c24e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c250:	89fb      	ldrh	r3, [r7, #14]
}
 800c252:	4618      	mov	r0, r3
 800c254:	371c      	adds	r7, #28
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr
	...

0800c260 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c26a:	2300      	movs	r3, #0
 800c26c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c276:	2b40      	cmp	r3, #64	@ 0x40
 800c278:	d005      	beq.n	800c286 <USBD_StdDevReq+0x26>
 800c27a:	2b40      	cmp	r3, #64	@ 0x40
 800c27c:	d857      	bhi.n	800c32e <USBD_StdDevReq+0xce>
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00f      	beq.n	800c2a2 <USBD_StdDevReq+0x42>
 800c282:	2b20      	cmp	r3, #32
 800c284:	d153      	bne.n	800c32e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	32ae      	adds	r2, #174	@ 0xae
 800c290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c294:	689b      	ldr	r3, [r3, #8]
 800c296:	6839      	ldr	r1, [r7, #0]
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	4798      	blx	r3
 800c29c:	4603      	mov	r3, r0
 800c29e:	73fb      	strb	r3, [r7, #15]
      break;
 800c2a0:	e04a      	b.n	800c338 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	785b      	ldrb	r3, [r3, #1]
 800c2a6:	2b09      	cmp	r3, #9
 800c2a8:	d83b      	bhi.n	800c322 <USBD_StdDevReq+0xc2>
 800c2aa:	a201      	add	r2, pc, #4	@ (adr r2, 800c2b0 <USBD_StdDevReq+0x50>)
 800c2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2b0:	0800c305 	.word	0x0800c305
 800c2b4:	0800c319 	.word	0x0800c319
 800c2b8:	0800c323 	.word	0x0800c323
 800c2bc:	0800c30f 	.word	0x0800c30f
 800c2c0:	0800c323 	.word	0x0800c323
 800c2c4:	0800c2e3 	.word	0x0800c2e3
 800c2c8:	0800c2d9 	.word	0x0800c2d9
 800c2cc:	0800c323 	.word	0x0800c323
 800c2d0:	0800c2fb 	.word	0x0800c2fb
 800c2d4:	0800c2ed 	.word	0x0800c2ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c2d8:	6839      	ldr	r1, [r7, #0]
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 fa3e 	bl	800c75c <USBD_GetDescriptor>
          break;
 800c2e0:	e024      	b.n	800c32c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c2e2:	6839      	ldr	r1, [r7, #0]
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 fba3 	bl	800ca30 <USBD_SetAddress>
          break;
 800c2ea:	e01f      	b.n	800c32c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fbe2 	bl	800cab8 <USBD_SetConfig>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	73fb      	strb	r3, [r7, #15]
          break;
 800c2f8:	e018      	b.n	800c32c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c2fa:	6839      	ldr	r1, [r7, #0]
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 fc85 	bl	800cc0c <USBD_GetConfig>
          break;
 800c302:	e013      	b.n	800c32c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 fcb6 	bl	800cc78 <USBD_GetStatus>
          break;
 800c30c:	e00e      	b.n	800c32c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c30e:	6839      	ldr	r1, [r7, #0]
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 fce5 	bl	800cce0 <USBD_SetFeature>
          break;
 800c316:	e009      	b.n	800c32c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c318:	6839      	ldr	r1, [r7, #0]
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 fd09 	bl	800cd32 <USBD_ClrFeature>
          break;
 800c320:	e004      	b.n	800c32c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c322:	6839      	ldr	r1, [r7, #0]
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f000 fd60 	bl	800cdea <USBD_CtlError>
          break;
 800c32a:	bf00      	nop
      }
      break;
 800c32c:	e004      	b.n	800c338 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c32e:	6839      	ldr	r1, [r7, #0]
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f000 fd5a 	bl	800cdea <USBD_CtlError>
      break;
 800c336:	bf00      	nop
  }

  return ret;
 800c338:	7bfb      	ldrb	r3, [r7, #15]
}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3710      	adds	r7, #16
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop

0800c344 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c34e:	2300      	movs	r3, #0
 800c350:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c35a:	2b40      	cmp	r3, #64	@ 0x40
 800c35c:	d005      	beq.n	800c36a <USBD_StdItfReq+0x26>
 800c35e:	2b40      	cmp	r3, #64	@ 0x40
 800c360:	d852      	bhi.n	800c408 <USBD_StdItfReq+0xc4>
 800c362:	2b00      	cmp	r3, #0
 800c364:	d001      	beq.n	800c36a <USBD_StdItfReq+0x26>
 800c366:	2b20      	cmp	r3, #32
 800c368:	d14e      	bne.n	800c408 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c370:	b2db      	uxtb	r3, r3
 800c372:	3b01      	subs	r3, #1
 800c374:	2b02      	cmp	r3, #2
 800c376:	d840      	bhi.n	800c3fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	889b      	ldrh	r3, [r3, #4]
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d836      	bhi.n	800c3f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	889b      	ldrh	r3, [r3, #4]
 800c386:	b2db      	uxtb	r3, r3
 800c388:	4619      	mov	r1, r3
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f7ff feda 	bl	800c144 <USBD_CoreFindIF>
 800c390:	4603      	mov	r3, r0
 800c392:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c394:	7bbb      	ldrb	r3, [r7, #14]
 800c396:	2bff      	cmp	r3, #255	@ 0xff
 800c398:	d01d      	beq.n	800c3d6 <USBD_StdItfReq+0x92>
 800c39a:	7bbb      	ldrb	r3, [r7, #14]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d11a      	bne.n	800c3d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c3a0:	7bba      	ldrb	r2, [r7, #14]
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	32ae      	adds	r2, #174	@ 0xae
 800c3a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d00f      	beq.n	800c3d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c3b0:	7bba      	ldrb	r2, [r7, #14]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c3b8:	7bba      	ldrb	r2, [r7, #14]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	32ae      	adds	r2, #174	@ 0xae
 800c3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	6839      	ldr	r1, [r7, #0]
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	4798      	blx	r3
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3ce:	e004      	b.n	800c3da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c3d0:	2303      	movs	r3, #3
 800c3d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c3d4:	e001      	b.n	800c3da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c3d6:	2303      	movs	r3, #3
 800c3d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	88db      	ldrh	r3, [r3, #6]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d110      	bne.n	800c404 <USBD_StdItfReq+0xc0>
 800c3e2:	7bfb      	ldrb	r3, [r7, #15]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d10d      	bne.n	800c404 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 fddc 	bl	800cfa6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c3ee:	e009      	b.n	800c404 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 fcf9 	bl	800cdea <USBD_CtlError>
          break;
 800c3f8:	e004      	b.n	800c404 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c3fa:	6839      	ldr	r1, [r7, #0]
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 fcf4 	bl	800cdea <USBD_CtlError>
          break;
 800c402:	e000      	b.n	800c406 <USBD_StdItfReq+0xc2>
          break;
 800c404:	bf00      	nop
      }
      break;
 800c406:	e004      	b.n	800c412 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c408:	6839      	ldr	r1, [r7, #0]
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 fced 	bl	800cdea <USBD_CtlError>
      break;
 800c410:	bf00      	nop
  }

  return ret;
 800c412:	7bfb      	ldrb	r3, [r7, #15]
}
 800c414:	4618      	mov	r0, r3
 800c416:	3710      	adds	r7, #16
 800c418:	46bd      	mov	sp, r7
 800c41a:	bd80      	pop	{r7, pc}

0800c41c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
 800c424:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c426:	2300      	movs	r3, #0
 800c428:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	889b      	ldrh	r3, [r3, #4]
 800c42e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c438:	2b40      	cmp	r3, #64	@ 0x40
 800c43a:	d007      	beq.n	800c44c <USBD_StdEPReq+0x30>
 800c43c:	2b40      	cmp	r3, #64	@ 0x40
 800c43e:	f200 8181 	bhi.w	800c744 <USBD_StdEPReq+0x328>
 800c442:	2b00      	cmp	r3, #0
 800c444:	d02a      	beq.n	800c49c <USBD_StdEPReq+0x80>
 800c446:	2b20      	cmp	r3, #32
 800c448:	f040 817c 	bne.w	800c744 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c44c:	7bbb      	ldrb	r3, [r7, #14]
 800c44e:	4619      	mov	r1, r3
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f7ff fe84 	bl	800c15e <USBD_CoreFindEP>
 800c456:	4603      	mov	r3, r0
 800c458:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c45a:	7b7b      	ldrb	r3, [r7, #13]
 800c45c:	2bff      	cmp	r3, #255	@ 0xff
 800c45e:	f000 8176 	beq.w	800c74e <USBD_StdEPReq+0x332>
 800c462:	7b7b      	ldrb	r3, [r7, #13]
 800c464:	2b00      	cmp	r3, #0
 800c466:	f040 8172 	bne.w	800c74e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800c46a:	7b7a      	ldrb	r2, [r7, #13]
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c472:	7b7a      	ldrb	r2, [r7, #13]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	32ae      	adds	r2, #174	@ 0xae
 800c478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c47c:	689b      	ldr	r3, [r3, #8]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	f000 8165 	beq.w	800c74e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c484:	7b7a      	ldrb	r2, [r7, #13]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	32ae      	adds	r2, #174	@ 0xae
 800c48a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	6839      	ldr	r1, [r7, #0]
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	4798      	blx	r3
 800c496:	4603      	mov	r3, r0
 800c498:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c49a:	e158      	b.n	800c74e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	785b      	ldrb	r3, [r3, #1]
 800c4a0:	2b03      	cmp	r3, #3
 800c4a2:	d008      	beq.n	800c4b6 <USBD_StdEPReq+0x9a>
 800c4a4:	2b03      	cmp	r3, #3
 800c4a6:	f300 8147 	bgt.w	800c738 <USBD_StdEPReq+0x31c>
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	f000 809b 	beq.w	800c5e6 <USBD_StdEPReq+0x1ca>
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d03c      	beq.n	800c52e <USBD_StdEPReq+0x112>
 800c4b4:	e140      	b.n	800c738 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	2b02      	cmp	r3, #2
 800c4c0:	d002      	beq.n	800c4c8 <USBD_StdEPReq+0xac>
 800c4c2:	2b03      	cmp	r3, #3
 800c4c4:	d016      	beq.n	800c4f4 <USBD_StdEPReq+0xd8>
 800c4c6:	e02c      	b.n	800c522 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c4c8:	7bbb      	ldrb	r3, [r7, #14]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d00d      	beq.n	800c4ea <USBD_StdEPReq+0xce>
 800c4ce:	7bbb      	ldrb	r3, [r7, #14]
 800c4d0:	2b80      	cmp	r3, #128	@ 0x80
 800c4d2:	d00a      	beq.n	800c4ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c4d4:	7bbb      	ldrb	r3, [r7, #14]
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f001 f9e5 	bl	800d8a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4de:	2180      	movs	r1, #128	@ 0x80
 800c4e0:	6878      	ldr	r0, [r7, #4]
 800c4e2:	f001 f9e1 	bl	800d8a8 <USBD_LL_StallEP>
 800c4e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c4e8:	e020      	b.n	800c52c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c4ea:	6839      	ldr	r1, [r7, #0]
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f000 fc7c 	bl	800cdea <USBD_CtlError>
              break;
 800c4f2:	e01b      	b.n	800c52c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	885b      	ldrh	r3, [r3, #2]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d10e      	bne.n	800c51a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c4fc:	7bbb      	ldrb	r3, [r7, #14]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d00b      	beq.n	800c51a <USBD_StdEPReq+0xfe>
 800c502:	7bbb      	ldrb	r3, [r7, #14]
 800c504:	2b80      	cmp	r3, #128	@ 0x80
 800c506:	d008      	beq.n	800c51a <USBD_StdEPReq+0xfe>
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	88db      	ldrh	r3, [r3, #6]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d104      	bne.n	800c51a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c510:	7bbb      	ldrb	r3, [r7, #14]
 800c512:	4619      	mov	r1, r3
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f001 f9c7 	bl	800d8a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 fd43 	bl	800cfa6 <USBD_CtlSendStatus>

              break;
 800c520:	e004      	b.n	800c52c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c522:	6839      	ldr	r1, [r7, #0]
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f000 fc60 	bl	800cdea <USBD_CtlError>
              break;
 800c52a:	bf00      	nop
          }
          break;
 800c52c:	e109      	b.n	800c742 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c534:	b2db      	uxtb	r3, r3
 800c536:	2b02      	cmp	r3, #2
 800c538:	d002      	beq.n	800c540 <USBD_StdEPReq+0x124>
 800c53a:	2b03      	cmp	r3, #3
 800c53c:	d016      	beq.n	800c56c <USBD_StdEPReq+0x150>
 800c53e:	e04b      	b.n	800c5d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c540:	7bbb      	ldrb	r3, [r7, #14]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d00d      	beq.n	800c562 <USBD_StdEPReq+0x146>
 800c546:	7bbb      	ldrb	r3, [r7, #14]
 800c548:	2b80      	cmp	r3, #128	@ 0x80
 800c54a:	d00a      	beq.n	800c562 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c54c:	7bbb      	ldrb	r3, [r7, #14]
 800c54e:	4619      	mov	r1, r3
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f001 f9a9 	bl	800d8a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c556:	2180      	movs	r1, #128	@ 0x80
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f001 f9a5 	bl	800d8a8 <USBD_LL_StallEP>
 800c55e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c560:	e040      	b.n	800c5e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c562:	6839      	ldr	r1, [r7, #0]
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 fc40 	bl	800cdea <USBD_CtlError>
              break;
 800c56a:	e03b      	b.n	800c5e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	885b      	ldrh	r3, [r3, #2]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d136      	bne.n	800c5e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c574:	7bbb      	ldrb	r3, [r7, #14]
 800c576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d004      	beq.n	800c588 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c57e:	7bbb      	ldrb	r3, [r7, #14]
 800c580:	4619      	mov	r1, r3
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f001 f9af 	bl	800d8e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 fd0c 	bl	800cfa6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c58e:	7bbb      	ldrb	r3, [r7, #14]
 800c590:	4619      	mov	r1, r3
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f7ff fde3 	bl	800c15e <USBD_CoreFindEP>
 800c598:	4603      	mov	r3, r0
 800c59a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c59c:	7b7b      	ldrb	r3, [r7, #13]
 800c59e:	2bff      	cmp	r3, #255	@ 0xff
 800c5a0:	d01f      	beq.n	800c5e2 <USBD_StdEPReq+0x1c6>
 800c5a2:	7b7b      	ldrb	r3, [r7, #13]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d11c      	bne.n	800c5e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c5a8:	7b7a      	ldrb	r2, [r7, #13]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c5b0:	7b7a      	ldrb	r2, [r7, #13]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	32ae      	adds	r2, #174	@ 0xae
 800c5b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d010      	beq.n	800c5e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c5c0:	7b7a      	ldrb	r2, [r7, #13]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	32ae      	adds	r2, #174	@ 0xae
 800c5c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ca:	689b      	ldr	r3, [r3, #8]
 800c5cc:	6839      	ldr	r1, [r7, #0]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	4798      	blx	r3
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c5d6:	e004      	b.n	800c5e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c5d8:	6839      	ldr	r1, [r7, #0]
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 fc05 	bl	800cdea <USBD_CtlError>
              break;
 800c5e0:	e000      	b.n	800c5e4 <USBD_StdEPReq+0x1c8>
              break;
 800c5e2:	bf00      	nop
          }
          break;
 800c5e4:	e0ad      	b.n	800c742 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5ec:	b2db      	uxtb	r3, r3
 800c5ee:	2b02      	cmp	r3, #2
 800c5f0:	d002      	beq.n	800c5f8 <USBD_StdEPReq+0x1dc>
 800c5f2:	2b03      	cmp	r3, #3
 800c5f4:	d033      	beq.n	800c65e <USBD_StdEPReq+0x242>
 800c5f6:	e099      	b.n	800c72c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c5f8:	7bbb      	ldrb	r3, [r7, #14]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d007      	beq.n	800c60e <USBD_StdEPReq+0x1f2>
 800c5fe:	7bbb      	ldrb	r3, [r7, #14]
 800c600:	2b80      	cmp	r3, #128	@ 0x80
 800c602:	d004      	beq.n	800c60e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c604:	6839      	ldr	r1, [r7, #0]
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 fbef 	bl	800cdea <USBD_CtlError>
                break;
 800c60c:	e093      	b.n	800c736 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c60e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c612:	2b00      	cmp	r3, #0
 800c614:	da0b      	bge.n	800c62e <USBD_StdEPReq+0x212>
 800c616:	7bbb      	ldrb	r3, [r7, #14]
 800c618:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c61c:	4613      	mov	r3, r2
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	4413      	add	r3, r2
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	3310      	adds	r3, #16
 800c626:	687a      	ldr	r2, [r7, #4]
 800c628:	4413      	add	r3, r2
 800c62a:	3304      	adds	r3, #4
 800c62c:	e00b      	b.n	800c646 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c62e:	7bbb      	ldrb	r3, [r7, #14]
 800c630:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c634:	4613      	mov	r3, r2
 800c636:	009b      	lsls	r3, r3, #2
 800c638:	4413      	add	r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	4413      	add	r3, r2
 800c644:	3304      	adds	r3, #4
 800c646:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	2200      	movs	r2, #0
 800c64c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	330e      	adds	r3, #14
 800c652:	2202      	movs	r2, #2
 800c654:	4619      	mov	r1, r3
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 fc44 	bl	800cee4 <USBD_CtlSendData>
              break;
 800c65c:	e06b      	b.n	800c736 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c65e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c662:	2b00      	cmp	r3, #0
 800c664:	da11      	bge.n	800c68a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c666:	7bbb      	ldrb	r3, [r7, #14]
 800c668:	f003 020f 	and.w	r2, r3, #15
 800c66c:	6879      	ldr	r1, [r7, #4]
 800c66e:	4613      	mov	r3, r2
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	4413      	add	r3, r2
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	440b      	add	r3, r1
 800c678:	3323      	adds	r3, #35	@ 0x23
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d117      	bne.n	800c6b0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c680:	6839      	ldr	r1, [r7, #0]
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 fbb1 	bl	800cdea <USBD_CtlError>
                  break;
 800c688:	e055      	b.n	800c736 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c68a:	7bbb      	ldrb	r3, [r7, #14]
 800c68c:	f003 020f 	and.w	r2, r3, #15
 800c690:	6879      	ldr	r1, [r7, #4]
 800c692:	4613      	mov	r3, r2
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	4413      	add	r3, r2
 800c698:	009b      	lsls	r3, r3, #2
 800c69a:	440b      	add	r3, r1
 800c69c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d104      	bne.n	800c6b0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800c6a6:	6839      	ldr	r1, [r7, #0]
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 fb9e 	bl	800cdea <USBD_CtlError>
                  break;
 800c6ae:	e042      	b.n	800c736 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	da0b      	bge.n	800c6d0 <USBD_StdEPReq+0x2b4>
 800c6b8:	7bbb      	ldrb	r3, [r7, #14]
 800c6ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c6be:	4613      	mov	r3, r2
 800c6c0:	009b      	lsls	r3, r3, #2
 800c6c2:	4413      	add	r3, r2
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	3310      	adds	r3, #16
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	3304      	adds	r3, #4
 800c6ce:	e00b      	b.n	800c6e8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c6d0:	7bbb      	ldrb	r3, [r7, #14]
 800c6d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c6d6:	4613      	mov	r3, r2
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	4413      	add	r3, r2
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	3304      	adds	r3, #4
 800c6e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c6ea:	7bbb      	ldrb	r3, [r7, #14]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d002      	beq.n	800c6f6 <USBD_StdEPReq+0x2da>
 800c6f0:	7bbb      	ldrb	r3, [r7, #14]
 800c6f2:	2b80      	cmp	r3, #128	@ 0x80
 800c6f4:	d103      	bne.n	800c6fe <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	739a      	strb	r2, [r3, #14]
 800c6fc:	e00e      	b.n	800c71c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c6fe:	7bbb      	ldrb	r3, [r7, #14]
 800c700:	4619      	mov	r1, r3
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f001 f90e 	bl	800d924 <USBD_LL_IsStallEP>
 800c708:	4603      	mov	r3, r0
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d003      	beq.n	800c716 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	2201      	movs	r2, #1
 800c712:	739a      	strb	r2, [r3, #14]
 800c714:	e002      	b.n	800c71c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	2200      	movs	r2, #0
 800c71a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	330e      	adds	r3, #14
 800c720:	2202      	movs	r2, #2
 800c722:	4619      	mov	r1, r3
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 fbdd 	bl	800cee4 <USBD_CtlSendData>
              break;
 800c72a:	e004      	b.n	800c736 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800c72c:	6839      	ldr	r1, [r7, #0]
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 fb5b 	bl	800cdea <USBD_CtlError>
              break;
 800c734:	bf00      	nop
          }
          break;
 800c736:	e004      	b.n	800c742 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800c738:	6839      	ldr	r1, [r7, #0]
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 fb55 	bl	800cdea <USBD_CtlError>
          break;
 800c740:	bf00      	nop
      }
      break;
 800c742:	e005      	b.n	800c750 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800c744:	6839      	ldr	r1, [r7, #0]
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fb4f 	bl	800cdea <USBD_CtlError>
      break;
 800c74c:	e000      	b.n	800c750 <USBD_StdEPReq+0x334>
      break;
 800c74e:	bf00      	nop
  }

  return ret;
 800c750:	7bfb      	ldrb	r3, [r7, #15]
}
 800c752:	4618      	mov	r0, r3
 800c754:	3710      	adds	r7, #16
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}
	...

0800c75c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c766:	2300      	movs	r3, #0
 800c768:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c76a:	2300      	movs	r3, #0
 800c76c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c76e:	2300      	movs	r3, #0
 800c770:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	885b      	ldrh	r3, [r3, #2]
 800c776:	0a1b      	lsrs	r3, r3, #8
 800c778:	b29b      	uxth	r3, r3
 800c77a:	3b01      	subs	r3, #1
 800c77c:	2b06      	cmp	r3, #6
 800c77e:	f200 8128 	bhi.w	800c9d2 <USBD_GetDescriptor+0x276>
 800c782:	a201      	add	r2, pc, #4	@ (adr r2, 800c788 <USBD_GetDescriptor+0x2c>)
 800c784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c788:	0800c7a5 	.word	0x0800c7a5
 800c78c:	0800c7bd 	.word	0x0800c7bd
 800c790:	0800c7fd 	.word	0x0800c7fd
 800c794:	0800c9d3 	.word	0x0800c9d3
 800c798:	0800c9d3 	.word	0x0800c9d3
 800c79c:	0800c973 	.word	0x0800c973
 800c7a0:	0800c99f 	.word	0x0800c99f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	7c12      	ldrb	r2, [r2, #16]
 800c7b0:	f107 0108 	add.w	r1, r7, #8
 800c7b4:	4610      	mov	r0, r2
 800c7b6:	4798      	blx	r3
 800c7b8:	60f8      	str	r0, [r7, #12]
      break;
 800c7ba:	e112      	b.n	800c9e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	7c1b      	ldrb	r3, [r3, #16]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d10d      	bne.n	800c7e0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7cc:	f107 0208 	add.w	r2, r7, #8
 800c7d0:	4610      	mov	r0, r2
 800c7d2:	4798      	blx	r3
 800c7d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	3301      	adds	r3, #1
 800c7da:	2202      	movs	r2, #2
 800c7dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c7de:	e100      	b.n	800c9e2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7e8:	f107 0208 	add.w	r2, r7, #8
 800c7ec:	4610      	mov	r0, r2
 800c7ee:	4798      	blx	r3
 800c7f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	2202      	movs	r2, #2
 800c7f8:	701a      	strb	r2, [r3, #0]
      break;
 800c7fa:	e0f2      	b.n	800c9e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	885b      	ldrh	r3, [r3, #2]
 800c800:	b2db      	uxtb	r3, r3
 800c802:	2b05      	cmp	r3, #5
 800c804:	f200 80ac 	bhi.w	800c960 <USBD_GetDescriptor+0x204>
 800c808:	a201      	add	r2, pc, #4	@ (adr r2, 800c810 <USBD_GetDescriptor+0xb4>)
 800c80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c80e:	bf00      	nop
 800c810:	0800c829 	.word	0x0800c829
 800c814:	0800c85d 	.word	0x0800c85d
 800c818:	0800c891 	.word	0x0800c891
 800c81c:	0800c8c5 	.word	0x0800c8c5
 800c820:	0800c8f9 	.word	0x0800c8f9
 800c824:	0800c92d 	.word	0x0800c92d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00b      	beq.n	800c84c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	7c12      	ldrb	r2, [r2, #16]
 800c840:	f107 0108 	add.w	r1, r7, #8
 800c844:	4610      	mov	r0, r2
 800c846:	4798      	blx	r3
 800c848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c84a:	e091      	b.n	800c970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c84c:	6839      	ldr	r1, [r7, #0]
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 facb 	bl	800cdea <USBD_CtlError>
            err++;
 800c854:	7afb      	ldrb	r3, [r7, #11]
 800c856:	3301      	adds	r3, #1
 800c858:	72fb      	strb	r3, [r7, #11]
          break;
 800c85a:	e089      	b.n	800c970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d00b      	beq.n	800c880 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c86e:	689b      	ldr	r3, [r3, #8]
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	7c12      	ldrb	r2, [r2, #16]
 800c874:	f107 0108 	add.w	r1, r7, #8
 800c878:	4610      	mov	r0, r2
 800c87a:	4798      	blx	r3
 800c87c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c87e:	e077      	b.n	800c970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c880:	6839      	ldr	r1, [r7, #0]
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 fab1 	bl	800cdea <USBD_CtlError>
            err++;
 800c888:	7afb      	ldrb	r3, [r7, #11]
 800c88a:	3301      	adds	r3, #1
 800c88c:	72fb      	strb	r3, [r7, #11]
          break;
 800c88e:	e06f      	b.n	800c970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d00b      	beq.n	800c8b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8a2:	68db      	ldr	r3, [r3, #12]
 800c8a4:	687a      	ldr	r2, [r7, #4]
 800c8a6:	7c12      	ldrb	r2, [r2, #16]
 800c8a8:	f107 0108 	add.w	r1, r7, #8
 800c8ac:	4610      	mov	r0, r2
 800c8ae:	4798      	blx	r3
 800c8b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8b2:	e05d      	b.n	800c970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8b4:	6839      	ldr	r1, [r7, #0]
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 fa97 	bl	800cdea <USBD_CtlError>
            err++;
 800c8bc:	7afb      	ldrb	r3, [r7, #11]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c8c2:	e055      	b.n	800c970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8ca:	691b      	ldr	r3, [r3, #16]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d00b      	beq.n	800c8e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8d6:	691b      	ldr	r3, [r3, #16]
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	7c12      	ldrb	r2, [r2, #16]
 800c8dc:	f107 0108 	add.w	r1, r7, #8
 800c8e0:	4610      	mov	r0, r2
 800c8e2:	4798      	blx	r3
 800c8e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c8e6:	e043      	b.n	800c970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c8e8:	6839      	ldr	r1, [r7, #0]
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 fa7d 	bl	800cdea <USBD_CtlError>
            err++;
 800c8f0:	7afb      	ldrb	r3, [r7, #11]
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c8f6:	e03b      	b.n	800c970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c8fe:	695b      	ldr	r3, [r3, #20]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d00b      	beq.n	800c91c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c90a:	695b      	ldr	r3, [r3, #20]
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	7c12      	ldrb	r2, [r2, #16]
 800c910:	f107 0108 	add.w	r1, r7, #8
 800c914:	4610      	mov	r0, r2
 800c916:	4798      	blx	r3
 800c918:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c91a:	e029      	b.n	800c970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c91c:	6839      	ldr	r1, [r7, #0]
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 fa63 	bl	800cdea <USBD_CtlError>
            err++;
 800c924:	7afb      	ldrb	r3, [r7, #11]
 800c926:	3301      	adds	r3, #1
 800c928:	72fb      	strb	r3, [r7, #11]
          break;
 800c92a:	e021      	b.n	800c970 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c932:	699b      	ldr	r3, [r3, #24]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00b      	beq.n	800c950 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c93e:	699b      	ldr	r3, [r3, #24]
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	7c12      	ldrb	r2, [r2, #16]
 800c944:	f107 0108 	add.w	r1, r7, #8
 800c948:	4610      	mov	r0, r2
 800c94a:	4798      	blx	r3
 800c94c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c94e:	e00f      	b.n	800c970 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c950:	6839      	ldr	r1, [r7, #0]
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 fa49 	bl	800cdea <USBD_CtlError>
            err++;
 800c958:	7afb      	ldrb	r3, [r7, #11]
 800c95a:	3301      	adds	r3, #1
 800c95c:	72fb      	strb	r3, [r7, #11]
          break;
 800c95e:	e007      	b.n	800c970 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c960:	6839      	ldr	r1, [r7, #0]
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f000 fa41 	bl	800cdea <USBD_CtlError>
          err++;
 800c968:	7afb      	ldrb	r3, [r7, #11]
 800c96a:	3301      	adds	r3, #1
 800c96c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c96e:	bf00      	nop
      }
      break;
 800c970:	e037      	b.n	800c9e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	7c1b      	ldrb	r3, [r3, #16]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d109      	bne.n	800c98e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c982:	f107 0208 	add.w	r2, r7, #8
 800c986:	4610      	mov	r0, r2
 800c988:	4798      	blx	r3
 800c98a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c98c:	e029      	b.n	800c9e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c98e:	6839      	ldr	r1, [r7, #0]
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 fa2a 	bl	800cdea <USBD_CtlError>
        err++;
 800c996:	7afb      	ldrb	r3, [r7, #11]
 800c998:	3301      	adds	r3, #1
 800c99a:	72fb      	strb	r3, [r7, #11]
      break;
 800c99c:	e021      	b.n	800c9e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	7c1b      	ldrb	r3, [r3, #16]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d10d      	bne.n	800c9c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9ae:	f107 0208 	add.w	r2, r7, #8
 800c9b2:	4610      	mov	r0, r2
 800c9b4:	4798      	blx	r3
 800c9b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	2207      	movs	r2, #7
 800c9be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c9c0:	e00f      	b.n	800c9e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c9c2:	6839      	ldr	r1, [r7, #0]
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f000 fa10 	bl	800cdea <USBD_CtlError>
        err++;
 800c9ca:	7afb      	ldrb	r3, [r7, #11]
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	72fb      	strb	r3, [r7, #11]
      break;
 800c9d0:	e007      	b.n	800c9e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c9d2:	6839      	ldr	r1, [r7, #0]
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f000 fa08 	bl	800cdea <USBD_CtlError>
      err++;
 800c9da:	7afb      	ldrb	r3, [r7, #11]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	72fb      	strb	r3, [r7, #11]
      break;
 800c9e0:	bf00      	nop
  }

  if (err != 0U)
 800c9e2:	7afb      	ldrb	r3, [r7, #11]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d11e      	bne.n	800ca26 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	88db      	ldrh	r3, [r3, #6]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d016      	beq.n	800ca1e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c9f0:	893b      	ldrh	r3, [r7, #8]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d00e      	beq.n	800ca14 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	88da      	ldrh	r2, [r3, #6]
 800c9fa:	893b      	ldrh	r3, [r7, #8]
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	bf28      	it	cs
 800ca00:	4613      	movcs	r3, r2
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ca06:	893b      	ldrh	r3, [r7, #8]
 800ca08:	461a      	mov	r2, r3
 800ca0a:	68f9      	ldr	r1, [r7, #12]
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 fa69 	bl	800cee4 <USBD_CtlSendData>
 800ca12:	e009      	b.n	800ca28 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ca14:	6839      	ldr	r1, [r7, #0]
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 f9e7 	bl	800cdea <USBD_CtlError>
 800ca1c:	e004      	b.n	800ca28 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 fac1 	bl	800cfa6 <USBD_CtlSendStatus>
 800ca24:	e000      	b.n	800ca28 <USBD_GetDescriptor+0x2cc>
    return;
 800ca26:	bf00      	nop
  }
}
 800ca28:	3710      	adds	r7, #16
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop

0800ca30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b084      	sub	sp, #16
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	889b      	ldrh	r3, [r3, #4]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d131      	bne.n	800caa6 <USBD_SetAddress+0x76>
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	88db      	ldrh	r3, [r3, #6]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d12d      	bne.n	800caa6 <USBD_SetAddress+0x76>
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	885b      	ldrh	r3, [r3, #2]
 800ca4e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca50:	d829      	bhi.n	800caa6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	885b      	ldrh	r3, [r3, #2]
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	2b03      	cmp	r3, #3
 800ca68:	d104      	bne.n	800ca74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ca6a:	6839      	ldr	r1, [r7, #0]
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f000 f9bc 	bl	800cdea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca72:	e01d      	b.n	800cab0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	7bfa      	ldrb	r2, [r7, #15]
 800ca78:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ca7c:	7bfb      	ldrb	r3, [r7, #15]
 800ca7e:	4619      	mov	r1, r3
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 ff7b 	bl	800d97c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 fa8d 	bl	800cfa6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ca8c:	7bfb      	ldrb	r3, [r7, #15]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d004      	beq.n	800ca9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2202      	movs	r2, #2
 800ca96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca9a:	e009      	b.n	800cab0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2201      	movs	r2, #1
 800caa0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caa4:	e004      	b.n	800cab0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800caa6:	6839      	ldr	r1, [r7, #0]
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 f99e 	bl	800cdea <USBD_CtlError>
  }
}
 800caae:	bf00      	nop
 800cab0:	bf00      	nop
 800cab2:	3710      	adds	r7, #16
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cac2:	2300      	movs	r3, #0
 800cac4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	885b      	ldrh	r3, [r3, #2]
 800caca:	b2da      	uxtb	r2, r3
 800cacc:	4b4e      	ldr	r3, [pc, #312]	@ (800cc08 <USBD_SetConfig+0x150>)
 800cace:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800cad0:	4b4d      	ldr	r3, [pc, #308]	@ (800cc08 <USBD_SetConfig+0x150>)
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d905      	bls.n	800cae4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800cad8:	6839      	ldr	r1, [r7, #0]
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f000 f985 	bl	800cdea <USBD_CtlError>
    return USBD_FAIL;
 800cae0:	2303      	movs	r3, #3
 800cae2:	e08c      	b.n	800cbfe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caea:	b2db      	uxtb	r3, r3
 800caec:	2b02      	cmp	r3, #2
 800caee:	d002      	beq.n	800caf6 <USBD_SetConfig+0x3e>
 800caf0:	2b03      	cmp	r3, #3
 800caf2:	d029      	beq.n	800cb48 <USBD_SetConfig+0x90>
 800caf4:	e075      	b.n	800cbe2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800caf6:	4b44      	ldr	r3, [pc, #272]	@ (800cc08 <USBD_SetConfig+0x150>)
 800caf8:	781b      	ldrb	r3, [r3, #0]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d020      	beq.n	800cb40 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800cafe:	4b42      	ldr	r3, [pc, #264]	@ (800cc08 <USBD_SetConfig+0x150>)
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	461a      	mov	r2, r3
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb08:	4b3f      	ldr	r3, [pc, #252]	@ (800cc08 <USBD_SetConfig+0x150>)
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f7fe ffcd 	bl	800baae <USBD_SetClassConfig>
 800cb14:	4603      	mov	r3, r0
 800cb16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800cb18:	7bfb      	ldrb	r3, [r7, #15]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d008      	beq.n	800cb30 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800cb1e:	6839      	ldr	r1, [r7, #0]
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 f962 	bl	800cdea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2202      	movs	r2, #2
 800cb2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb2e:	e065      	b.n	800cbfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 fa38 	bl	800cfa6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2203      	movs	r2, #3
 800cb3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cb3e:	e05d      	b.n	800cbfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 fa30 	bl	800cfa6 <USBD_CtlSendStatus>
      break;
 800cb46:	e059      	b.n	800cbfc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800cb48:	4b2f      	ldr	r3, [pc, #188]	@ (800cc08 <USBD_SetConfig+0x150>)
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d112      	bne.n	800cb76 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2202      	movs	r2, #2
 800cb54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800cb58:	4b2b      	ldr	r3, [pc, #172]	@ (800cc08 <USBD_SetConfig+0x150>)
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cb62:	4b29      	ldr	r3, [pc, #164]	@ (800cc08 <USBD_SetConfig+0x150>)
 800cb64:	781b      	ldrb	r3, [r3, #0]
 800cb66:	4619      	mov	r1, r3
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f7fe ffbc 	bl	800bae6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800cb6e:	6878      	ldr	r0, [r7, #4]
 800cb70:	f000 fa19 	bl	800cfa6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800cb74:	e042      	b.n	800cbfc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800cb76:	4b24      	ldr	r3, [pc, #144]	@ (800cc08 <USBD_SetConfig+0x150>)
 800cb78:	781b      	ldrb	r3, [r3, #0]
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d02a      	beq.n	800cbda <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	b2db      	uxtb	r3, r3
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f7fe ffaa 	bl	800bae6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800cb92:	4b1d      	ldr	r3, [pc, #116]	@ (800cc08 <USBD_SetConfig+0x150>)
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	461a      	mov	r2, r3
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800cb9c:	4b1a      	ldr	r3, [pc, #104]	@ (800cc08 <USBD_SetConfig+0x150>)
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	4619      	mov	r1, r3
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f7fe ff83 	bl	800baae <USBD_SetClassConfig>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800cbac:	7bfb      	ldrb	r3, [r7, #15]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00f      	beq.n	800cbd2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800cbb2:	6839      	ldr	r1, [r7, #0]
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 f918 	bl	800cdea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f7fe ff8f 	bl	800bae6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2202      	movs	r2, #2
 800cbcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800cbd0:	e014      	b.n	800cbfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 f9e7 	bl	800cfa6 <USBD_CtlSendStatus>
      break;
 800cbd8:	e010      	b.n	800cbfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 f9e3 	bl	800cfa6 <USBD_CtlSendStatus>
      break;
 800cbe0:	e00c      	b.n	800cbfc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800cbe2:	6839      	ldr	r1, [r7, #0]
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f000 f900 	bl	800cdea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800cbea:	4b07      	ldr	r3, [pc, #28]	@ (800cc08 <USBD_SetConfig+0x150>)
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	4619      	mov	r1, r3
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f7fe ff78 	bl	800bae6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800cbf6:	2303      	movs	r3, #3
 800cbf8:	73fb      	strb	r3, [r7, #15]
      break;
 800cbfa:	bf00      	nop
  }

  return ret;
 800cbfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3710      	adds	r7, #16
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	200009f0 	.word	0x200009f0

0800cc0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b082      	sub	sp, #8
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	88db      	ldrh	r3, [r3, #6]
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d004      	beq.n	800cc28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cc1e:	6839      	ldr	r1, [r7, #0]
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 f8e2 	bl	800cdea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cc26:	e023      	b.n	800cc70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	2b02      	cmp	r3, #2
 800cc32:	dc02      	bgt.n	800cc3a <USBD_GetConfig+0x2e>
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	dc03      	bgt.n	800cc40 <USBD_GetConfig+0x34>
 800cc38:	e015      	b.n	800cc66 <USBD_GetConfig+0x5a>
 800cc3a:	2b03      	cmp	r3, #3
 800cc3c:	d00b      	beq.n	800cc56 <USBD_GetConfig+0x4a>
 800cc3e:	e012      	b.n	800cc66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2200      	movs	r2, #0
 800cc44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	3308      	adds	r3, #8
 800cc4a:	2201      	movs	r2, #1
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 f948 	bl	800cee4 <USBD_CtlSendData>
        break;
 800cc54:	e00c      	b.n	800cc70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	3304      	adds	r3, #4
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	4619      	mov	r1, r3
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f000 f940 	bl	800cee4 <USBD_CtlSendData>
        break;
 800cc64:	e004      	b.n	800cc70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cc66:	6839      	ldr	r1, [r7, #0]
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f000 f8be 	bl	800cdea <USBD_CtlError>
        break;
 800cc6e:	bf00      	nop
}
 800cc70:	bf00      	nop
 800cc72:	3708      	adds	r7, #8
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	3b01      	subs	r3, #1
 800cc8c:	2b02      	cmp	r3, #2
 800cc8e:	d81e      	bhi.n	800ccce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	88db      	ldrh	r3, [r3, #6]
 800cc94:	2b02      	cmp	r3, #2
 800cc96:	d004      	beq.n	800cca2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cc98:	6839      	ldr	r1, [r7, #0]
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 f8a5 	bl	800cdea <USBD_CtlError>
        break;
 800cca0:	e01a      	b.n	800ccd8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2201      	movs	r2, #1
 800cca6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d005      	beq.n	800ccbe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	f043 0202 	orr.w	r2, r3, #2
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	330c      	adds	r3, #12
 800ccc2:	2202      	movs	r2, #2
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f000 f90c 	bl	800cee4 <USBD_CtlSendData>
      break;
 800cccc:	e004      	b.n	800ccd8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ccce:	6839      	ldr	r1, [r7, #0]
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f000 f88a 	bl	800cdea <USBD_CtlError>
      break;
 800ccd6:	bf00      	nop
  }
}
 800ccd8:	bf00      	nop
 800ccda:	3708      	adds	r7, #8
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	885b      	ldrh	r3, [r3, #2]
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d107      	bne.n	800cd02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2201      	movs	r2, #1
 800ccf6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f000 f953 	bl	800cfa6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cd00:	e013      	b.n	800cd2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	885b      	ldrh	r3, [r3, #2]
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	d10b      	bne.n	800cd22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	889b      	ldrh	r3, [r3, #4]
 800cd0e:	0a1b      	lsrs	r3, r3, #8
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	b2da      	uxtb	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 f943 	bl	800cfa6 <USBD_CtlSendStatus>
}
 800cd20:	e003      	b.n	800cd2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cd22:	6839      	ldr	r1, [r7, #0]
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f000 f860 	bl	800cdea <USBD_CtlError>
}
 800cd2a:	bf00      	nop
 800cd2c:	3708      	adds	r7, #8
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}

0800cd32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd32:	b580      	push	{r7, lr}
 800cd34:	b082      	sub	sp, #8
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
 800cd3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	3b01      	subs	r3, #1
 800cd46:	2b02      	cmp	r3, #2
 800cd48:	d80b      	bhi.n	800cd62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	885b      	ldrh	r3, [r3, #2]
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d10c      	bne.n	800cd6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2200      	movs	r2, #0
 800cd56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f000 f923 	bl	800cfa6 <USBD_CtlSendStatus>
      }
      break;
 800cd60:	e004      	b.n	800cd6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cd62:	6839      	ldr	r1, [r7, #0]
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f000 f840 	bl	800cdea <USBD_CtlError>
      break;
 800cd6a:	e000      	b.n	800cd6e <USBD_ClrFeature+0x3c>
      break;
 800cd6c:	bf00      	nop
  }
}
 800cd6e:	bf00      	nop
 800cd70:	3708      	adds	r7, #8
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}

0800cd76 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cd76:	b580      	push	{r7, lr}
 800cd78:	b084      	sub	sp, #16
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]
 800cd7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	781a      	ldrb	r2, [r3, #0]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	781a      	ldrb	r2, [r3, #0]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cda0:	68f8      	ldr	r0, [r7, #12]
 800cda2:	f7ff fa3d 	bl	800c220 <SWAPBYTE>
 800cda6:	4603      	mov	r3, r0
 800cda8:	461a      	mov	r2, r3
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cdba:	68f8      	ldr	r0, [r7, #12]
 800cdbc:	f7ff fa30 	bl	800c220 <SWAPBYTE>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	461a      	mov	r2, r3
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	3301      	adds	r3, #1
 800cdcc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cdd4:	68f8      	ldr	r0, [r7, #12]
 800cdd6:	f7ff fa23 	bl	800c220 <SWAPBYTE>
 800cdda:	4603      	mov	r3, r0
 800cddc:	461a      	mov	r2, r3
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	80da      	strh	r2, [r3, #6]
}
 800cde2:	bf00      	nop
 800cde4:	3710      	adds	r7, #16
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}

0800cdea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b082      	sub	sp, #8
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
 800cdf2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cdf4:	2180      	movs	r1, #128	@ 0x80
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f000 fd56 	bl	800d8a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cdfc:	2100      	movs	r1, #0
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f000 fd52 	bl	800d8a8 <USBD_LL_StallEP>
}
 800ce04:	bf00      	nop
 800ce06:	3708      	adds	r7, #8
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b086      	sub	sp, #24
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d042      	beq.n	800cea8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800ce26:	6938      	ldr	r0, [r7, #16]
 800ce28:	f000 f842 	bl	800ceb0 <USBD_GetLen>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	3301      	adds	r3, #1
 800ce30:	005b      	lsls	r3, r3, #1
 800ce32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce36:	d808      	bhi.n	800ce4a <USBD_GetString+0x3e>
 800ce38:	6938      	ldr	r0, [r7, #16]
 800ce3a:	f000 f839 	bl	800ceb0 <USBD_GetLen>
 800ce3e:	4603      	mov	r3, r0
 800ce40:	3301      	adds	r3, #1
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	005b      	lsls	r3, r3, #1
 800ce46:	b29a      	uxth	r2, r3
 800ce48:	e001      	b.n	800ce4e <USBD_GetString+0x42>
 800ce4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ce52:	7dfb      	ldrb	r3, [r7, #23]
 800ce54:	68ba      	ldr	r2, [r7, #8]
 800ce56:	4413      	add	r3, r2
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	7812      	ldrb	r2, [r2, #0]
 800ce5c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce5e:	7dfb      	ldrb	r3, [r7, #23]
 800ce60:	3301      	adds	r3, #1
 800ce62:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ce64:	7dfb      	ldrb	r3, [r7, #23]
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	4413      	add	r3, r2
 800ce6a:	2203      	movs	r2, #3
 800ce6c:	701a      	strb	r2, [r3, #0]
  idx++;
 800ce6e:	7dfb      	ldrb	r3, [r7, #23]
 800ce70:	3301      	adds	r3, #1
 800ce72:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ce74:	e013      	b.n	800ce9e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ce76:	7dfb      	ldrb	r3, [r7, #23]
 800ce78:	68ba      	ldr	r2, [r7, #8]
 800ce7a:	4413      	add	r3, r2
 800ce7c:	693a      	ldr	r2, [r7, #16]
 800ce7e:	7812      	ldrb	r2, [r2, #0]
 800ce80:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	3301      	adds	r3, #1
 800ce86:	613b      	str	r3, [r7, #16]
    idx++;
 800ce88:	7dfb      	ldrb	r3, [r7, #23]
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ce8e:	7dfb      	ldrb	r3, [r7, #23]
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	4413      	add	r3, r2
 800ce94:	2200      	movs	r2, #0
 800ce96:	701a      	strb	r2, [r3, #0]
    idx++;
 800ce98:	7dfb      	ldrb	r3, [r7, #23]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d1e7      	bne.n	800ce76 <USBD_GetString+0x6a>
 800cea6:	e000      	b.n	800ceaa <USBD_GetString+0x9e>
    return;
 800cea8:	bf00      	nop
  }
}
 800ceaa:	3718      	adds	r7, #24
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}

0800ceb0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b085      	sub	sp, #20
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ceb8:	2300      	movs	r3, #0
 800ceba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cec0:	e005      	b.n	800cece <USBD_GetLen+0x1e>
  {
    len++;
 800cec2:	7bfb      	ldrb	r3, [r7, #15]
 800cec4:	3301      	adds	r3, #1
 800cec6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	3301      	adds	r3, #1
 800cecc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d1f5      	bne.n	800cec2 <USBD_GetLen+0x12>
  }

  return len;
 800ced6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3714      	adds	r7, #20
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr

0800cee4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b084      	sub	sp, #16
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	60b9      	str	r1, [r7, #8]
 800ceee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2202      	movs	r2, #2
 800cef4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	687a      	ldr	r2, [r7, #4]
 800cefc:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	68ba      	ldr	r2, [r7, #8]
 800cf02:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	68ba      	ldr	r2, [r7, #8]
 800cf0e:	2100      	movs	r1, #0
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f000 fd52 	bl	800d9ba <USBD_LL_Transmit>

  return USBD_OK;
 800cf16:	2300      	movs	r3, #0
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3710      	adds	r7, #16
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	60f8      	str	r0, [r7, #12]
 800cf28:	60b9      	str	r1, [r7, #8]
 800cf2a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	68ba      	ldr	r2, [r7, #8]
 800cf30:	2100      	movs	r1, #0
 800cf32:	68f8      	ldr	r0, [r7, #12]
 800cf34:	f000 fd41 	bl	800d9ba <USBD_LL_Transmit>

  return USBD_OK;
 800cf38:	2300      	movs	r3, #0
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3710      	adds	r7, #16
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	bd80      	pop	{r7, pc}

0800cf42 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cf42:	b580      	push	{r7, lr}
 800cf44:	b084      	sub	sp, #16
 800cf46:	af00      	add	r7, sp, #0
 800cf48:	60f8      	str	r0, [r7, #12]
 800cf4a:	60b9      	str	r1, [r7, #8]
 800cf4c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2203      	movs	r2, #3
 800cf52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	68ba      	ldr	r2, [r7, #8]
 800cf62:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	68ba      	ldr	r2, [r7, #8]
 800cf72:	2100      	movs	r1, #0
 800cf74:	68f8      	ldr	r0, [r7, #12]
 800cf76:	f000 fd41 	bl	800d9fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf7a:	2300      	movs	r3, #0
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3710      	adds	r7, #16
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	68ba      	ldr	r2, [r7, #8]
 800cf94:	2100      	movs	r1, #0
 800cf96:	68f8      	ldr	r0, [r7, #12]
 800cf98:	f000 fd30 	bl	800d9fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3710      	adds	r7, #16
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b082      	sub	sp, #8
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2204      	movs	r2, #4
 800cfb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	2200      	movs	r2, #0
 800cfba:	2100      	movs	r1, #0
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 fcfc 	bl	800d9ba <USBD_LL_Transmit>

  return USBD_OK;
 800cfc2:	2300      	movs	r3, #0
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3708      	adds	r7, #8
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2205      	movs	r2, #5
 800cfd8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cfdc:	2300      	movs	r3, #0
 800cfde:	2200      	movs	r2, #0
 800cfe0:	2100      	movs	r1, #0
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 fd0a 	bl	800d9fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cfe8:	2300      	movs	r3, #0
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3708      	adds	r7, #8
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}
	...

0800cff4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cff8:	2200      	movs	r2, #0
 800cffa:	4912      	ldr	r1, [pc, #72]	@ (800d044 <MX_USB_DEVICE_Init+0x50>)
 800cffc:	4812      	ldr	r0, [pc, #72]	@ (800d048 <MX_USB_DEVICE_Init+0x54>)
 800cffe:	f7fe fcd9 	bl	800b9b4 <USBD_Init>
 800d002:	4603      	mov	r3, r0
 800d004:	2b00      	cmp	r3, #0
 800d006:	d001      	beq.n	800d00c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d008:	f7f4 faca 	bl	80015a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d00c:	490f      	ldr	r1, [pc, #60]	@ (800d04c <MX_USB_DEVICE_Init+0x58>)
 800d00e:	480e      	ldr	r0, [pc, #56]	@ (800d048 <MX_USB_DEVICE_Init+0x54>)
 800d010:	f7fe fd00 	bl	800ba14 <USBD_RegisterClass>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d001      	beq.n	800d01e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d01a:	f7f4 fac1 	bl	80015a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d01e:	490c      	ldr	r1, [pc, #48]	@ (800d050 <MX_USB_DEVICE_Init+0x5c>)
 800d020:	4809      	ldr	r0, [pc, #36]	@ (800d048 <MX_USB_DEVICE_Init+0x54>)
 800d022:	f7fe fbf7 	bl	800b814 <USBD_CDC_RegisterInterface>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d001      	beq.n	800d030 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d02c:	f7f4 fab8 	bl	80015a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d030:	4805      	ldr	r0, [pc, #20]	@ (800d048 <MX_USB_DEVICE_Init+0x54>)
 800d032:	f7fe fd25 	bl	800ba80 <USBD_Start>
 800d036:	4603      	mov	r3, r0
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d001      	beq.n	800d040 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d03c:	f7f4 fab0 	bl	80015a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d040:	bf00      	nop
 800d042:	bd80      	pop	{r7, pc}
 800d044:	200000e0 	.word	0x200000e0
 800d048:	200009f4 	.word	0x200009f4
 800d04c:	20000044 	.word	0x20000044
 800d050:	200000cc 	.word	0x200000cc

0800d054 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d058:	2200      	movs	r2, #0
 800d05a:	4905      	ldr	r1, [pc, #20]	@ (800d070 <CDC_Init_FS+0x1c>)
 800d05c:	4805      	ldr	r0, [pc, #20]	@ (800d074 <CDC_Init_FS+0x20>)
 800d05e:	f7fe fbf3 	bl	800b848 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d062:	4905      	ldr	r1, [pc, #20]	@ (800d078 <CDC_Init_FS+0x24>)
 800d064:	4803      	ldr	r0, [pc, #12]	@ (800d074 <CDC_Init_FS+0x20>)
 800d066:	f7fe fc11 	bl	800b88c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d06a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d06c:	4618      	mov	r0, r3
 800d06e:	bd80      	pop	{r7, pc}
 800d070:	20000ed0 	.word	0x20000ed0
 800d074:	200009f4 	.word	0x200009f4
 800d078:	20000cd0 	.word	0x20000cd0

0800d07c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d07c:	b480      	push	{r7}
 800d07e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d080:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d082:	4618      	mov	r0, r3
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr

0800d08c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
 800d092:	4603      	mov	r3, r0
 800d094:	6039      	str	r1, [r7, #0]
 800d096:	71fb      	strb	r3, [r7, #7]
 800d098:	4613      	mov	r3, r2
 800d09a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d09c:	79fb      	ldrb	r3, [r7, #7]
 800d09e:	2b23      	cmp	r3, #35	@ 0x23
 800d0a0:	f200 8098 	bhi.w	800d1d4 <CDC_Control_FS+0x148>
 800d0a4:	a201      	add	r2, pc, #4	@ (adr r2, 800d0ac <CDC_Control_FS+0x20>)
 800d0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0aa:	bf00      	nop
 800d0ac:	0800d1d5 	.word	0x0800d1d5
 800d0b0:	0800d1d5 	.word	0x0800d1d5
 800d0b4:	0800d1d5 	.word	0x0800d1d5
 800d0b8:	0800d1d5 	.word	0x0800d1d5
 800d0bc:	0800d1d5 	.word	0x0800d1d5
 800d0c0:	0800d1d5 	.word	0x0800d1d5
 800d0c4:	0800d1d5 	.word	0x0800d1d5
 800d0c8:	0800d1d5 	.word	0x0800d1d5
 800d0cc:	0800d1d5 	.word	0x0800d1d5
 800d0d0:	0800d1d5 	.word	0x0800d1d5
 800d0d4:	0800d1d5 	.word	0x0800d1d5
 800d0d8:	0800d1d5 	.word	0x0800d1d5
 800d0dc:	0800d1d5 	.word	0x0800d1d5
 800d0e0:	0800d1d5 	.word	0x0800d1d5
 800d0e4:	0800d1d5 	.word	0x0800d1d5
 800d0e8:	0800d1d5 	.word	0x0800d1d5
 800d0ec:	0800d1d5 	.word	0x0800d1d5
 800d0f0:	0800d1d5 	.word	0x0800d1d5
 800d0f4:	0800d1d5 	.word	0x0800d1d5
 800d0f8:	0800d1d5 	.word	0x0800d1d5
 800d0fc:	0800d1d5 	.word	0x0800d1d5
 800d100:	0800d1d5 	.word	0x0800d1d5
 800d104:	0800d1d5 	.word	0x0800d1d5
 800d108:	0800d1d5 	.word	0x0800d1d5
 800d10c:	0800d1d5 	.word	0x0800d1d5
 800d110:	0800d1d5 	.word	0x0800d1d5
 800d114:	0800d1d5 	.word	0x0800d1d5
 800d118:	0800d1d5 	.word	0x0800d1d5
 800d11c:	0800d1d5 	.word	0x0800d1d5
 800d120:	0800d1d5 	.word	0x0800d1d5
 800d124:	0800d1d5 	.word	0x0800d1d5
 800d128:	0800d1d5 	.word	0x0800d1d5
 800d12c:	0800d13d 	.word	0x0800d13d
 800d130:	0800d181 	.word	0x0800d181
 800d134:	0800d1d5 	.word	0x0800d1d5
 800d138:	0800d1d5 	.word	0x0800d1d5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	461a      	mov	r2, r3
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	3301      	adds	r3, #1
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	021b      	lsls	r3, r3, #8
 800d14a:	431a      	orrs	r2, r3
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	3302      	adds	r3, #2
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	041b      	lsls	r3, r3, #16
 800d154:	431a      	orrs	r2, r3
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	3303      	adds	r3, #3
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	061b      	lsls	r3, r3, #24
 800d15e:	4313      	orrs	r3, r2
 800d160:	461a      	mov	r2, r3
 800d162:	4b20      	ldr	r3, [pc, #128]	@ (800d1e4 <CDC_Control_FS+0x158>)
 800d164:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	791a      	ldrb	r2, [r3, #4]
 800d16a:	4b1e      	ldr	r3, [pc, #120]	@ (800d1e4 <CDC_Control_FS+0x158>)
 800d16c:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	795a      	ldrb	r2, [r3, #5]
 800d172:	4b1c      	ldr	r3, [pc, #112]	@ (800d1e4 <CDC_Control_FS+0x158>)
 800d174:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	799a      	ldrb	r2, [r3, #6]
 800d17a:	4b1a      	ldr	r3, [pc, #104]	@ (800d1e4 <CDC_Control_FS+0x158>)
 800d17c:	719a      	strb	r2, [r3, #6]
    break;
 800d17e:	e02a      	b.n	800d1d6 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800d180:	4b18      	ldr	r3, [pc, #96]	@ (800d1e4 <CDC_Control_FS+0x158>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	b2da      	uxtb	r2, r3
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800d18a:	4b16      	ldr	r3, [pc, #88]	@ (800d1e4 <CDC_Control_FS+0x158>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	0a1a      	lsrs	r2, r3, #8
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	3301      	adds	r3, #1
 800d194:	b2d2      	uxtb	r2, r2
 800d196:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800d198:	4b12      	ldr	r3, [pc, #72]	@ (800d1e4 <CDC_Control_FS+0x158>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	0c1a      	lsrs	r2, r3, #16
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	3302      	adds	r3, #2
 800d1a2:	b2d2      	uxtb	r2, r2
 800d1a4:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800d1a6:	4b0f      	ldr	r3, [pc, #60]	@ (800d1e4 <CDC_Control_FS+0x158>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	0e1a      	lsrs	r2, r3, #24
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	3303      	adds	r3, #3
 800d1b0:	b2d2      	uxtb	r2, r2
 800d1b2:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	3304      	adds	r3, #4
 800d1b8:	4a0a      	ldr	r2, [pc, #40]	@ (800d1e4 <CDC_Control_FS+0x158>)
 800d1ba:	7912      	ldrb	r2, [r2, #4]
 800d1bc:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	3305      	adds	r3, #5
 800d1c2:	4a08      	ldr	r2, [pc, #32]	@ (800d1e4 <CDC_Control_FS+0x158>)
 800d1c4:	7952      	ldrb	r2, [r2, #5]
 800d1c6:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	3306      	adds	r3, #6
 800d1cc:	4a05      	ldr	r2, [pc, #20]	@ (800d1e4 <CDC_Control_FS+0x158>)
 800d1ce:	7992      	ldrb	r2, [r2, #6]
 800d1d0:	701a      	strb	r2, [r3, #0]
    break;
 800d1d2:	e000      	b.n	800d1d6 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d1d4:	bf00      	nop
  }

  return (USBD_OK);
 800d1d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	370c      	adds	r7, #12
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr
 800d1e4:	200000c4 	.word	0x200000c4

0800d1e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800d1f2:	4b0b      	ldr	r3, [pc, #44]	@ (800d220 <CDC_Receive_FS+0x38>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d006      	beq.n	800d208 <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800d1fa:	4b09      	ldr	r3, [pc, #36]	@ (800d220 <CDC_Receive_FS+0x38>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	683a      	ldr	r2, [r7, #0]
 800d200:	6812      	ldr	r2, [r2, #0]
 800d202:	4611      	mov	r1, r2
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d208:	6879      	ldr	r1, [r7, #4]
 800d20a:	4806      	ldr	r0, [pc, #24]	@ (800d224 <CDC_Receive_FS+0x3c>)
 800d20c:	f7fe fb3e 	bl	800b88c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d210:	4804      	ldr	r0, [pc, #16]	@ (800d224 <CDC_Receive_FS+0x3c>)
 800d212:	f7fe fb99 	bl	800b948 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800d216:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3708      	adds	r7, #8
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}
 800d220:	200010d0 	.word	0x200010d0
 800d224:	200009f4 	.word	0x200009f4

0800d228 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	460b      	mov	r3, r1
 800d232:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d234:	2300      	movs	r3, #0
 800d236:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d238:	4b0d      	ldr	r3, [pc, #52]	@ (800d270 <CDC_Transmit_FS+0x48>)
 800d23a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d23e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d246:	2b00      	cmp	r3, #0
 800d248:	d001      	beq.n	800d24e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d24a:	2301      	movs	r3, #1
 800d24c:	e00b      	b.n	800d266 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d24e:	887b      	ldrh	r3, [r7, #2]
 800d250:	461a      	mov	r2, r3
 800d252:	6879      	ldr	r1, [r7, #4]
 800d254:	4806      	ldr	r0, [pc, #24]	@ (800d270 <CDC_Transmit_FS+0x48>)
 800d256:	f7fe faf7 	bl	800b848 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d25a:	4805      	ldr	r0, [pc, #20]	@ (800d270 <CDC_Transmit_FS+0x48>)
 800d25c:	f7fe fb34 	bl	800b8c8 <USBD_CDC_TransmitPacket>
 800d260:	4603      	mov	r3, r0
 800d262:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d264:	7bfb      	ldrb	r3, [r7, #15]
}
 800d266:	4618      	mov	r0, r3
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	200009f4 	.word	0x200009f4

0800d274 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d274:	b480      	push	{r7}
 800d276:	b087      	sub	sp, #28
 800d278:	af00      	add	r7, sp, #0
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	4613      	mov	r3, r2
 800d280:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d282:	2300      	movs	r3, #0
 800d284:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d286:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	371c      	adds	r7, #28
 800d28e:	46bd      	mov	sp, r7
 800d290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d294:	4770      	bx	lr
	...

0800d298 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800d298:	b480      	push	{r7}
 800d29a:	b083      	sub	sp, #12
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800d2a0:	4a04      	ldr	r2, [pc, #16]	@ (800d2b4 <CDC_Attach_Rx+0x1c>)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6013      	str	r3, [r2, #0]
}
 800d2a6:	bf00      	nop
 800d2a8:	370c      	adds	r7, #12
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr
 800d2b2:	bf00      	nop
 800d2b4:	200010d0 	.word	0x200010d0

0800d2b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	4603      	mov	r3, r0
 800d2c0:	6039      	str	r1, [r7, #0]
 800d2c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	2212      	movs	r2, #18
 800d2c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d2ca:	4b03      	ldr	r3, [pc, #12]	@ (800d2d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	370c      	adds	r7, #12
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr
 800d2d8:	200000fc 	.word	0x200000fc

0800d2dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	6039      	str	r1, [r7, #0]
 800d2e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	2204      	movs	r2, #4
 800d2ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d2ee:	4b03      	ldr	r3, [pc, #12]	@ (800d2fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	370c      	adds	r7, #12
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr
 800d2fc:	20000110 	.word	0x20000110

0800d300 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b082      	sub	sp, #8
 800d304:	af00      	add	r7, sp, #0
 800d306:	4603      	mov	r3, r0
 800d308:	6039      	str	r1, [r7, #0]
 800d30a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d30c:	79fb      	ldrb	r3, [r7, #7]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d105      	bne.n	800d31e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d312:	683a      	ldr	r2, [r7, #0]
 800d314:	4907      	ldr	r1, [pc, #28]	@ (800d334 <USBD_FS_ProductStrDescriptor+0x34>)
 800d316:	4808      	ldr	r0, [pc, #32]	@ (800d338 <USBD_FS_ProductStrDescriptor+0x38>)
 800d318:	f7ff fd78 	bl	800ce0c <USBD_GetString>
 800d31c:	e004      	b.n	800d328 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d31e:	683a      	ldr	r2, [r7, #0]
 800d320:	4904      	ldr	r1, [pc, #16]	@ (800d334 <USBD_FS_ProductStrDescriptor+0x34>)
 800d322:	4805      	ldr	r0, [pc, #20]	@ (800d338 <USBD_FS_ProductStrDescriptor+0x38>)
 800d324:	f7ff fd72 	bl	800ce0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d328:	4b02      	ldr	r3, [pc, #8]	@ (800d334 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3708      	adds	r7, #8
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	200010d4 	.word	0x200010d4
 800d338:	0800f01c 	.word	0x0800f01c

0800d33c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	4603      	mov	r3, r0
 800d344:	6039      	str	r1, [r7, #0]
 800d346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d348:	683a      	ldr	r2, [r7, #0]
 800d34a:	4904      	ldr	r1, [pc, #16]	@ (800d35c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d34c:	4804      	ldr	r0, [pc, #16]	@ (800d360 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d34e:	f7ff fd5d 	bl	800ce0c <USBD_GetString>
  return USBD_StrDesc;
 800d352:	4b02      	ldr	r3, [pc, #8]	@ (800d35c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d354:	4618      	mov	r0, r3
 800d356:	3708      	adds	r7, #8
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	200010d4 	.word	0x200010d4
 800d360:	0800f034 	.word	0x0800f034

0800d364 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
 800d36a:	4603      	mov	r3, r0
 800d36c:	6039      	str	r1, [r7, #0]
 800d36e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	221a      	movs	r2, #26
 800d374:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d376:	f000 f843 	bl	800d400 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d37a:	4b02      	ldr	r3, [pc, #8]	@ (800d384 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3708      	adds	r7, #8
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	20000114 	.word	0x20000114

0800d388 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	4603      	mov	r3, r0
 800d390:	6039      	str	r1, [r7, #0]
 800d392:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d394:	79fb      	ldrb	r3, [r7, #7]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d105      	bne.n	800d3a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d39a:	683a      	ldr	r2, [r7, #0]
 800d39c:	4907      	ldr	r1, [pc, #28]	@ (800d3bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d39e:	4808      	ldr	r0, [pc, #32]	@ (800d3c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d3a0:	f7ff fd34 	bl	800ce0c <USBD_GetString>
 800d3a4:	e004      	b.n	800d3b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d3a6:	683a      	ldr	r2, [r7, #0]
 800d3a8:	4904      	ldr	r1, [pc, #16]	@ (800d3bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800d3aa:	4805      	ldr	r0, [pc, #20]	@ (800d3c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d3ac:	f7ff fd2e 	bl	800ce0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3b0:	4b02      	ldr	r3, [pc, #8]	@ (800d3bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3708      	adds	r7, #8
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	200010d4 	.word	0x200010d4
 800d3c0:	0800f048 	.word	0x0800f048

0800d3c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b082      	sub	sp, #8
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	6039      	str	r1, [r7, #0]
 800d3ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d3d0:	79fb      	ldrb	r3, [r7, #7]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d105      	bne.n	800d3e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3d6:	683a      	ldr	r2, [r7, #0]
 800d3d8:	4907      	ldr	r1, [pc, #28]	@ (800d3f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3da:	4808      	ldr	r0, [pc, #32]	@ (800d3fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3dc:	f7ff fd16 	bl	800ce0c <USBD_GetString>
 800d3e0:	e004      	b.n	800d3ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d3e2:	683a      	ldr	r2, [r7, #0]
 800d3e4:	4904      	ldr	r1, [pc, #16]	@ (800d3f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d3e6:	4805      	ldr	r0, [pc, #20]	@ (800d3fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d3e8:	f7ff fd10 	bl	800ce0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3ec:	4b02      	ldr	r3, [pc, #8]	@ (800d3f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3708      	adds	r7, #8
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	200010d4 	.word	0x200010d4
 800d3fc:	0800f054 	.word	0x0800f054

0800d400 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d406:	4b0f      	ldr	r3, [pc, #60]	@ (800d444 <Get_SerialNum+0x44>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d40c:	4b0e      	ldr	r3, [pc, #56]	@ (800d448 <Get_SerialNum+0x48>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d412:	4b0e      	ldr	r3, [pc, #56]	@ (800d44c <Get_SerialNum+0x4c>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d418:	68fa      	ldr	r2, [r7, #12]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	4413      	add	r3, r2
 800d41e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d009      	beq.n	800d43a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d426:	2208      	movs	r2, #8
 800d428:	4909      	ldr	r1, [pc, #36]	@ (800d450 <Get_SerialNum+0x50>)
 800d42a:	68f8      	ldr	r0, [r7, #12]
 800d42c:	f000 f814 	bl	800d458 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d430:	2204      	movs	r2, #4
 800d432:	4908      	ldr	r1, [pc, #32]	@ (800d454 <Get_SerialNum+0x54>)
 800d434:	68b8      	ldr	r0, [r7, #8]
 800d436:	f000 f80f 	bl	800d458 <IntToUnicode>
  }
}
 800d43a:	bf00      	nop
 800d43c:	3710      	adds	r7, #16
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}
 800d442:	bf00      	nop
 800d444:	1fff7a10 	.word	0x1fff7a10
 800d448:	1fff7a14 	.word	0x1fff7a14
 800d44c:	1fff7a18 	.word	0x1fff7a18
 800d450:	20000116 	.word	0x20000116
 800d454:	20000126 	.word	0x20000126

0800d458 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d458:	b480      	push	{r7}
 800d45a:	b087      	sub	sp, #28
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	60f8      	str	r0, [r7, #12]
 800d460:	60b9      	str	r1, [r7, #8]
 800d462:	4613      	mov	r3, r2
 800d464:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d466:	2300      	movs	r3, #0
 800d468:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d46a:	2300      	movs	r3, #0
 800d46c:	75fb      	strb	r3, [r7, #23]
 800d46e:	e027      	b.n	800d4c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	0f1b      	lsrs	r3, r3, #28
 800d474:	2b09      	cmp	r3, #9
 800d476:	d80b      	bhi.n	800d490 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	0f1b      	lsrs	r3, r3, #28
 800d47c:	b2da      	uxtb	r2, r3
 800d47e:	7dfb      	ldrb	r3, [r7, #23]
 800d480:	005b      	lsls	r3, r3, #1
 800d482:	4619      	mov	r1, r3
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	440b      	add	r3, r1
 800d488:	3230      	adds	r2, #48	@ 0x30
 800d48a:	b2d2      	uxtb	r2, r2
 800d48c:	701a      	strb	r2, [r3, #0]
 800d48e:	e00a      	b.n	800d4a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	0f1b      	lsrs	r3, r3, #28
 800d494:	b2da      	uxtb	r2, r3
 800d496:	7dfb      	ldrb	r3, [r7, #23]
 800d498:	005b      	lsls	r3, r3, #1
 800d49a:	4619      	mov	r1, r3
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	440b      	add	r3, r1
 800d4a0:	3237      	adds	r2, #55	@ 0x37
 800d4a2:	b2d2      	uxtb	r2, r2
 800d4a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	011b      	lsls	r3, r3, #4
 800d4aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d4ac:	7dfb      	ldrb	r3, [r7, #23]
 800d4ae:	005b      	lsls	r3, r3, #1
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	68ba      	ldr	r2, [r7, #8]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d4ba:	7dfb      	ldrb	r3, [r7, #23]
 800d4bc:	3301      	adds	r3, #1
 800d4be:	75fb      	strb	r3, [r7, #23]
 800d4c0:	7dfa      	ldrb	r2, [r7, #23]
 800d4c2:	79fb      	ldrb	r3, [r7, #7]
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d3d3      	bcc.n	800d470 <IntToUnicode+0x18>
  }
}
 800d4c8:	bf00      	nop
 800d4ca:	bf00      	nop
 800d4cc:	371c      	adds	r7, #28
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d4:	4770      	bx	lr
	...

0800d4d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b08a      	sub	sp, #40	@ 0x28
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d4e0:	f107 0314 	add.w	r3, r7, #20
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	601a      	str	r2, [r3, #0]
 800d4e8:	605a      	str	r2, [r3, #4]
 800d4ea:	609a      	str	r2, [r3, #8]
 800d4ec:	60da      	str	r2, [r3, #12]
 800d4ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d4f8:	d13a      	bne.n	800d570 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	613b      	str	r3, [r7, #16]
 800d4fe:	4b1e      	ldr	r3, [pc, #120]	@ (800d578 <HAL_PCD_MspInit+0xa0>)
 800d500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d502:	4a1d      	ldr	r2, [pc, #116]	@ (800d578 <HAL_PCD_MspInit+0xa0>)
 800d504:	f043 0301 	orr.w	r3, r3, #1
 800d508:	6313      	str	r3, [r2, #48]	@ 0x30
 800d50a:	4b1b      	ldr	r3, [pc, #108]	@ (800d578 <HAL_PCD_MspInit+0xa0>)
 800d50c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d50e:	f003 0301 	and.w	r3, r3, #1
 800d512:	613b      	str	r3, [r7, #16]
 800d514:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d516:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d51a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d51c:	2302      	movs	r3, #2
 800d51e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d520:	2300      	movs	r3, #0
 800d522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d524:	2303      	movs	r3, #3
 800d526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d528:	230a      	movs	r3, #10
 800d52a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d52c:	f107 0314 	add.w	r3, r7, #20
 800d530:	4619      	mov	r1, r3
 800d532:	4812      	ldr	r0, [pc, #72]	@ (800d57c <HAL_PCD_MspInit+0xa4>)
 800d534:	f7f7 fb1a 	bl	8004b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d538:	4b0f      	ldr	r3, [pc, #60]	@ (800d578 <HAL_PCD_MspInit+0xa0>)
 800d53a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d53c:	4a0e      	ldr	r2, [pc, #56]	@ (800d578 <HAL_PCD_MspInit+0xa0>)
 800d53e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d542:	6353      	str	r3, [r2, #52]	@ 0x34
 800d544:	2300      	movs	r3, #0
 800d546:	60fb      	str	r3, [r7, #12]
 800d548:	4b0b      	ldr	r3, [pc, #44]	@ (800d578 <HAL_PCD_MspInit+0xa0>)
 800d54a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d54c:	4a0a      	ldr	r2, [pc, #40]	@ (800d578 <HAL_PCD_MspInit+0xa0>)
 800d54e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d552:	6453      	str	r3, [r2, #68]	@ 0x44
 800d554:	4b08      	ldr	r3, [pc, #32]	@ (800d578 <HAL_PCD_MspInit+0xa0>)
 800d556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d558:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d55c:	60fb      	str	r3, [r7, #12]
 800d55e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d560:	2200      	movs	r2, #0
 800d562:	2100      	movs	r1, #0
 800d564:	2043      	movs	r0, #67	@ 0x43
 800d566:	f7f6 ff2a 	bl	80043be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d56a:	2043      	movs	r0, #67	@ 0x43
 800d56c:	f7f6 ff43 	bl	80043f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d570:	bf00      	nop
 800d572:	3728      	adds	r7, #40	@ 0x28
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}
 800d578:	40023800 	.word	0x40023800
 800d57c:	40020000 	.word	0x40020000

0800d580 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b082      	sub	sp, #8
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d594:	4619      	mov	r1, r3
 800d596:	4610      	mov	r0, r2
 800d598:	f7fe fabf 	bl	800bb1a <USBD_LL_SetupStage>
}
 800d59c:	bf00      	nop
 800d59e:	3708      	adds	r7, #8
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	460b      	mov	r3, r1
 800d5ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d5b6:	78fa      	ldrb	r2, [r7, #3]
 800d5b8:	6879      	ldr	r1, [r7, #4]
 800d5ba:	4613      	mov	r3, r2
 800d5bc:	00db      	lsls	r3, r3, #3
 800d5be:	4413      	add	r3, r2
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	440b      	add	r3, r1
 800d5c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	78fb      	ldrb	r3, [r7, #3]
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	f7fe faf9 	bl	800bbc4 <USBD_LL_DataOutStage>
}
 800d5d2:	bf00      	nop
 800d5d4:	3708      	adds	r7, #8
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}

0800d5da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b082      	sub	sp, #8
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
 800d5e2:	460b      	mov	r3, r1
 800d5e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d5ec:	78fa      	ldrb	r2, [r7, #3]
 800d5ee:	6879      	ldr	r1, [r7, #4]
 800d5f0:	4613      	mov	r3, r2
 800d5f2:	00db      	lsls	r3, r3, #3
 800d5f4:	4413      	add	r3, r2
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	440b      	add	r3, r1
 800d5fa:	3320      	adds	r3, #32
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	78fb      	ldrb	r3, [r7, #3]
 800d600:	4619      	mov	r1, r3
 800d602:	f7fe fb9b 	bl	800bd3c <USBD_LL_DataInStage>
}
 800d606:	bf00      	nop
 800d608:	3708      	adds	r7, #8
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd80      	pop	{r7, pc}

0800d60e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d60e:	b580      	push	{r7, lr}
 800d610:	b082      	sub	sp, #8
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7fe fcdf 	bl	800bfe0 <USBD_LL_SOF>
}
 800d622:	bf00      	nop
 800d624:	3708      	adds	r7, #8
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}

0800d62a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d62a:	b580      	push	{r7, lr}
 800d62c:	b084      	sub	sp, #16
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d632:	2301      	movs	r3, #1
 800d634:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	79db      	ldrb	r3, [r3, #7]
 800d63a:	2b02      	cmp	r3, #2
 800d63c:	d001      	beq.n	800d642 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d63e:	f7f3 ffaf 	bl	80015a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d648:	7bfa      	ldrb	r2, [r7, #15]
 800d64a:	4611      	mov	r1, r2
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7fe fc83 	bl	800bf58 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d658:	4618      	mov	r0, r3
 800d65a:	f7fe fc2a 	bl	800beb2 <USBD_LL_Reset>
}
 800d65e:	bf00      	nop
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
	...

0800d668 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d676:	4618      	mov	r0, r3
 800d678:	f7fe fc7e 	bl	800bf78 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	6812      	ldr	r2, [r2, #0]
 800d68a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d68e:	f043 0301 	orr.w	r3, r3, #1
 800d692:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	7adb      	ldrb	r3, [r3, #11]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d005      	beq.n	800d6a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d69c:	4b04      	ldr	r3, [pc, #16]	@ (800d6b0 <HAL_PCD_SuspendCallback+0x48>)
 800d69e:	691b      	ldr	r3, [r3, #16]
 800d6a0:	4a03      	ldr	r2, [pc, #12]	@ (800d6b0 <HAL_PCD_SuspendCallback+0x48>)
 800d6a2:	f043 0306 	orr.w	r3, r3, #6
 800d6a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d6a8:	bf00      	nop
 800d6aa:	3708      	adds	r7, #8
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	e000ed00 	.word	0xe000ed00

0800d6b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b082      	sub	sp, #8
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f7fe fc74 	bl	800bfb0 <USBD_LL_Resume>
}
 800d6c8:	bf00      	nop
 800d6ca:	3708      	adds	r7, #8
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}

0800d6d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	460b      	mov	r3, r1
 800d6da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6e2:	78fa      	ldrb	r2, [r7, #3]
 800d6e4:	4611      	mov	r1, r2
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fe fccc 	bl	800c084 <USBD_LL_IsoOUTIncomplete>
}
 800d6ec:	bf00      	nop
 800d6ee:	3708      	adds	r7, #8
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d706:	78fa      	ldrb	r2, [r7, #3]
 800d708:	4611      	mov	r1, r2
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7fe fc88 	bl	800c020 <USBD_LL_IsoINIncomplete>
}
 800d710:	bf00      	nop
 800d712:	3708      	adds	r7, #8
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d726:	4618      	mov	r0, r3
 800d728:	f7fe fcde 	bl	800c0e8 <USBD_LL_DevConnected>
}
 800d72c:	bf00      	nop
 800d72e:	3708      	adds	r7, #8
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d742:	4618      	mov	r0, r3
 800d744:	f7fe fcdb 	bl	800c0fe <USBD_LL_DevDisconnected>
}
 800d748:	bf00      	nop
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	781b      	ldrb	r3, [r3, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d13c      	bne.n	800d7da <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d760:	4a20      	ldr	r2, [pc, #128]	@ (800d7e4 <USBD_LL_Init+0x94>)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	4a1e      	ldr	r2, [pc, #120]	@ (800d7e4 <USBD_LL_Init+0x94>)
 800d76c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d770:	4b1c      	ldr	r3, [pc, #112]	@ (800d7e4 <USBD_LL_Init+0x94>)
 800d772:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d776:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d778:	4b1a      	ldr	r3, [pc, #104]	@ (800d7e4 <USBD_LL_Init+0x94>)
 800d77a:	2204      	movs	r2, #4
 800d77c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d77e:	4b19      	ldr	r3, [pc, #100]	@ (800d7e4 <USBD_LL_Init+0x94>)
 800d780:	2202      	movs	r2, #2
 800d782:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d784:	4b17      	ldr	r3, [pc, #92]	@ (800d7e4 <USBD_LL_Init+0x94>)
 800d786:	2200      	movs	r2, #0
 800d788:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d78a:	4b16      	ldr	r3, [pc, #88]	@ (800d7e4 <USBD_LL_Init+0x94>)
 800d78c:	2202      	movs	r2, #2
 800d78e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d790:	4b14      	ldr	r3, [pc, #80]	@ (800d7e4 <USBD_LL_Init+0x94>)
 800d792:	2200      	movs	r2, #0
 800d794:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d796:	4b13      	ldr	r3, [pc, #76]	@ (800d7e4 <USBD_LL_Init+0x94>)
 800d798:	2200      	movs	r2, #0
 800d79a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d79c:	4b11      	ldr	r3, [pc, #68]	@ (800d7e4 <USBD_LL_Init+0x94>)
 800d79e:	2200      	movs	r2, #0
 800d7a0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d7a2:	4b10      	ldr	r3, [pc, #64]	@ (800d7e4 <USBD_LL_Init+0x94>)
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d7a8:	4b0e      	ldr	r3, [pc, #56]	@ (800d7e4 <USBD_LL_Init+0x94>)
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d7ae:	480d      	ldr	r0, [pc, #52]	@ (800d7e4 <USBD_LL_Init+0x94>)
 800d7b0:	f7f9 fd44 	bl	800723c <HAL_PCD_Init>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d001      	beq.n	800d7be <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d7ba:	f7f3 fef1 	bl	80015a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d7be:	2180      	movs	r1, #128	@ 0x80
 800d7c0:	4808      	ldr	r0, [pc, #32]	@ (800d7e4 <USBD_LL_Init+0x94>)
 800d7c2:	f7fa ff70 	bl	80086a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d7c6:	2240      	movs	r2, #64	@ 0x40
 800d7c8:	2100      	movs	r1, #0
 800d7ca:	4806      	ldr	r0, [pc, #24]	@ (800d7e4 <USBD_LL_Init+0x94>)
 800d7cc:	f7fa ff24 	bl	8008618 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d7d0:	2280      	movs	r2, #128	@ 0x80
 800d7d2:	2101      	movs	r1, #1
 800d7d4:	4803      	ldr	r0, [pc, #12]	@ (800d7e4 <USBD_LL_Init+0x94>)
 800d7d6:	f7fa ff1f 	bl	8008618 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d7da:	2300      	movs	r3, #0
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3708      	adds	r7, #8
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	200012d4 	.word	0x200012d4

0800d7e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7f9 fe2b 	bl	800745a <HAL_PCD_Start>
 800d804:	4603      	mov	r3, r0
 800d806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d808:	7bfb      	ldrb	r3, [r7, #15]
 800d80a:	4618      	mov	r0, r3
 800d80c:	f000 f942 	bl	800da94 <USBD_Get_USB_Status>
 800d810:	4603      	mov	r3, r0
 800d812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d814:	7bbb      	ldrb	r3, [r7, #14]
}
 800d816:	4618      	mov	r0, r3
 800d818:	3710      	adds	r7, #16
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}

0800d81e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d81e:	b580      	push	{r7, lr}
 800d820:	b084      	sub	sp, #16
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	4608      	mov	r0, r1
 800d828:	4611      	mov	r1, r2
 800d82a:	461a      	mov	r2, r3
 800d82c:	4603      	mov	r3, r0
 800d82e:	70fb      	strb	r3, [r7, #3]
 800d830:	460b      	mov	r3, r1
 800d832:	70bb      	strb	r3, [r7, #2]
 800d834:	4613      	mov	r3, r2
 800d836:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d838:	2300      	movs	r3, #0
 800d83a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d83c:	2300      	movs	r3, #0
 800d83e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d846:	78bb      	ldrb	r3, [r7, #2]
 800d848:	883a      	ldrh	r2, [r7, #0]
 800d84a:	78f9      	ldrb	r1, [r7, #3]
 800d84c:	f7fa faff 	bl	8007e4e <HAL_PCD_EP_Open>
 800d850:	4603      	mov	r3, r0
 800d852:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d854:	7bfb      	ldrb	r3, [r7, #15]
 800d856:	4618      	mov	r0, r3
 800d858:	f000 f91c 	bl	800da94 <USBD_Get_USB_Status>
 800d85c:	4603      	mov	r3, r0
 800d85e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d860:	7bbb      	ldrb	r3, [r7, #14]
}
 800d862:	4618      	mov	r0, r3
 800d864:	3710      	adds	r7, #16
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}

0800d86a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d86a:	b580      	push	{r7, lr}
 800d86c:	b084      	sub	sp, #16
 800d86e:	af00      	add	r7, sp, #0
 800d870:	6078      	str	r0, [r7, #4]
 800d872:	460b      	mov	r3, r1
 800d874:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d876:	2300      	movs	r3, #0
 800d878:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d87a:	2300      	movs	r3, #0
 800d87c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d884:	78fa      	ldrb	r2, [r7, #3]
 800d886:	4611      	mov	r1, r2
 800d888:	4618      	mov	r0, r3
 800d88a:	f7fa fb4a 	bl	8007f22 <HAL_PCD_EP_Close>
 800d88e:	4603      	mov	r3, r0
 800d890:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d892:	7bfb      	ldrb	r3, [r7, #15]
 800d894:	4618      	mov	r0, r3
 800d896:	f000 f8fd 	bl	800da94 <USBD_Get_USB_Status>
 800d89a:	4603      	mov	r3, r0
 800d89c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d89e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3710      	adds	r7, #16
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8c2:	78fa      	ldrb	r2, [r7, #3]
 800d8c4:	4611      	mov	r1, r2
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7fa fc02 	bl	80080d0 <HAL_PCD_EP_SetStall>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8d0:	7bfb      	ldrb	r3, [r7, #15]
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f000 f8de 	bl	800da94 <USBD_Get_USB_Status>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3710      	adds	r7, #16
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}

0800d8e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8e6:	b580      	push	{r7, lr}
 800d8e8:	b084      	sub	sp, #16
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	6078      	str	r0, [r7, #4]
 800d8ee:	460b      	mov	r3, r1
 800d8f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d900:	78fa      	ldrb	r2, [r7, #3]
 800d902:	4611      	mov	r1, r2
 800d904:	4618      	mov	r0, r3
 800d906:	f7fa fc46 	bl	8008196 <HAL_PCD_EP_ClrStall>
 800d90a:	4603      	mov	r3, r0
 800d90c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d90e:	7bfb      	ldrb	r3, [r7, #15]
 800d910:	4618      	mov	r0, r3
 800d912:	f000 f8bf 	bl	800da94 <USBD_Get_USB_Status>
 800d916:	4603      	mov	r3, r0
 800d918:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d91a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3710      	adds	r7, #16
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	460b      	mov	r3, r1
 800d92e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d936:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d938:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	da0b      	bge.n	800d958 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d940:	78fb      	ldrb	r3, [r7, #3]
 800d942:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d946:	68f9      	ldr	r1, [r7, #12]
 800d948:	4613      	mov	r3, r2
 800d94a:	00db      	lsls	r3, r3, #3
 800d94c:	4413      	add	r3, r2
 800d94e:	009b      	lsls	r3, r3, #2
 800d950:	440b      	add	r3, r1
 800d952:	3316      	adds	r3, #22
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	e00b      	b.n	800d970 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d958:	78fb      	ldrb	r3, [r7, #3]
 800d95a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d95e:	68f9      	ldr	r1, [r7, #12]
 800d960:	4613      	mov	r3, r2
 800d962:	00db      	lsls	r3, r3, #3
 800d964:	4413      	add	r3, r2
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	440b      	add	r3, r1
 800d96a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d96e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d970:	4618      	mov	r0, r3
 800d972:	3714      	adds	r7, #20
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	460b      	mov	r3, r1
 800d986:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d988:	2300      	movs	r3, #0
 800d98a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d98c:	2300      	movs	r3, #0
 800d98e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d996:	78fa      	ldrb	r2, [r7, #3]
 800d998:	4611      	mov	r1, r2
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7fa fa33 	bl	8007e06 <HAL_PCD_SetAddress>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9a4:	7bfb      	ldrb	r3, [r7, #15]
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f000 f874 	bl	800da94 <USBD_Get_USB_Status>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3710      	adds	r7, #16
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}

0800d9ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9ba:	b580      	push	{r7, lr}
 800d9bc:	b086      	sub	sp, #24
 800d9be:	af00      	add	r7, sp, #0
 800d9c0:	60f8      	str	r0, [r7, #12]
 800d9c2:	607a      	str	r2, [r7, #4]
 800d9c4:	603b      	str	r3, [r7, #0]
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d9d8:	7af9      	ldrb	r1, [r7, #11]
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	f7fa fb3d 	bl	800805c <HAL_PCD_EP_Transmit>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9e6:	7dfb      	ldrb	r3, [r7, #23]
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f000 f853 	bl	800da94 <USBD_Get_USB_Status>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d9f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	3718      	adds	r7, #24
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}

0800d9fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b086      	sub	sp, #24
 800da00:	af00      	add	r7, sp, #0
 800da02:	60f8      	str	r0, [r7, #12]
 800da04:	607a      	str	r2, [r7, #4]
 800da06:	603b      	str	r3, [r7, #0]
 800da08:	460b      	mov	r3, r1
 800da0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da0c:	2300      	movs	r3, #0
 800da0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da10:	2300      	movs	r3, #0
 800da12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da1a:	7af9      	ldrb	r1, [r7, #11]
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	f7fa fac9 	bl	8007fb6 <HAL_PCD_EP_Receive>
 800da24:	4603      	mov	r3, r0
 800da26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da28:	7dfb      	ldrb	r3, [r7, #23]
 800da2a:	4618      	mov	r0, r3
 800da2c:	f000 f832 	bl	800da94 <USBD_Get_USB_Status>
 800da30:	4603      	mov	r3, r0
 800da32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da34:	7dbb      	ldrb	r3, [r7, #22]
}
 800da36:	4618      	mov	r0, r3
 800da38:	3718      	adds	r7, #24
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da3e:	b580      	push	{r7, lr}
 800da40:	b082      	sub	sp, #8
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
 800da46:	460b      	mov	r3, r1
 800da48:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da50:	78fa      	ldrb	r2, [r7, #3]
 800da52:	4611      	mov	r1, r2
 800da54:	4618      	mov	r0, r3
 800da56:	f7fa fae9 	bl	800802c <HAL_PCD_EP_GetRxCount>
 800da5a:	4603      	mov	r3, r0
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3708      	adds	r7, #8
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800da64:	b480      	push	{r7}
 800da66:	b083      	sub	sp, #12
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800da6c:	4b03      	ldr	r3, [pc, #12]	@ (800da7c <USBD_static_malloc+0x18>)
}
 800da6e:	4618      	mov	r0, r3
 800da70:	370c      	adds	r7, #12
 800da72:	46bd      	mov	sp, r7
 800da74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da78:	4770      	bx	lr
 800da7a:	bf00      	nop
 800da7c:	200017b8 	.word	0x200017b8

0800da80 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800da80:	b480      	push	{r7}
 800da82:	b083      	sub	sp, #12
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]

}
 800da88:	bf00      	nop
 800da8a:	370c      	adds	r7, #12
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr

0800da94 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800da94:	b480      	push	{r7}
 800da96:	b085      	sub	sp, #20
 800da98:	af00      	add	r7, sp, #0
 800da9a:	4603      	mov	r3, r0
 800da9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da9e:	2300      	movs	r3, #0
 800daa0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800daa2:	79fb      	ldrb	r3, [r7, #7]
 800daa4:	2b03      	cmp	r3, #3
 800daa6:	d817      	bhi.n	800dad8 <USBD_Get_USB_Status+0x44>
 800daa8:	a201      	add	r2, pc, #4	@ (adr r2, 800dab0 <USBD_Get_USB_Status+0x1c>)
 800daaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daae:	bf00      	nop
 800dab0:	0800dac1 	.word	0x0800dac1
 800dab4:	0800dac7 	.word	0x0800dac7
 800dab8:	0800dacd 	.word	0x0800dacd
 800dabc:	0800dad3 	.word	0x0800dad3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dac0:	2300      	movs	r3, #0
 800dac2:	73fb      	strb	r3, [r7, #15]
    break;
 800dac4:	e00b      	b.n	800dade <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dac6:	2303      	movs	r3, #3
 800dac8:	73fb      	strb	r3, [r7, #15]
    break;
 800daca:	e008      	b.n	800dade <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dacc:	2301      	movs	r3, #1
 800dace:	73fb      	strb	r3, [r7, #15]
    break;
 800dad0:	e005      	b.n	800dade <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dad2:	2303      	movs	r3, #3
 800dad4:	73fb      	strb	r3, [r7, #15]
    break;
 800dad6:	e002      	b.n	800dade <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dad8:	2303      	movs	r3, #3
 800dada:	73fb      	strb	r3, [r7, #15]
    break;
 800dadc:	bf00      	nop
  }
  return usb_status;
 800dade:	7bfb      	ldrb	r3, [r7, #15]
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3714      	adds	r7, #20
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr

0800daec <sniprintf>:
 800daec:	b40c      	push	{r2, r3}
 800daee:	b530      	push	{r4, r5, lr}
 800daf0:	4b18      	ldr	r3, [pc, #96]	@ (800db54 <sniprintf+0x68>)
 800daf2:	1e0c      	subs	r4, r1, #0
 800daf4:	681d      	ldr	r5, [r3, #0]
 800daf6:	b09d      	sub	sp, #116	@ 0x74
 800daf8:	da08      	bge.n	800db0c <sniprintf+0x20>
 800dafa:	238b      	movs	r3, #139	@ 0x8b
 800dafc:	602b      	str	r3, [r5, #0]
 800dafe:	f04f 30ff 	mov.w	r0, #4294967295
 800db02:	b01d      	add	sp, #116	@ 0x74
 800db04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db08:	b002      	add	sp, #8
 800db0a:	4770      	bx	lr
 800db0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800db10:	f8ad 3014 	strh.w	r3, [sp, #20]
 800db14:	f04f 0300 	mov.w	r3, #0
 800db18:	931b      	str	r3, [sp, #108]	@ 0x6c
 800db1a:	bf14      	ite	ne
 800db1c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800db20:	4623      	moveq	r3, r4
 800db22:	9304      	str	r3, [sp, #16]
 800db24:	9307      	str	r3, [sp, #28]
 800db26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800db2a:	9002      	str	r0, [sp, #8]
 800db2c:	9006      	str	r0, [sp, #24]
 800db2e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800db32:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800db34:	ab21      	add	r3, sp, #132	@ 0x84
 800db36:	a902      	add	r1, sp, #8
 800db38:	4628      	mov	r0, r5
 800db3a:	9301      	str	r3, [sp, #4]
 800db3c:	f000 f9bc 	bl	800deb8 <_svfiprintf_r>
 800db40:	1c43      	adds	r3, r0, #1
 800db42:	bfbc      	itt	lt
 800db44:	238b      	movlt	r3, #139	@ 0x8b
 800db46:	602b      	strlt	r3, [r5, #0]
 800db48:	2c00      	cmp	r4, #0
 800db4a:	d0da      	beq.n	800db02 <sniprintf+0x16>
 800db4c:	9b02      	ldr	r3, [sp, #8]
 800db4e:	2200      	movs	r2, #0
 800db50:	701a      	strb	r2, [r3, #0]
 800db52:	e7d6      	b.n	800db02 <sniprintf+0x16>
 800db54:	20000130 	.word	0x20000130

0800db58 <memmove>:
 800db58:	4288      	cmp	r0, r1
 800db5a:	b510      	push	{r4, lr}
 800db5c:	eb01 0402 	add.w	r4, r1, r2
 800db60:	d902      	bls.n	800db68 <memmove+0x10>
 800db62:	4284      	cmp	r4, r0
 800db64:	4623      	mov	r3, r4
 800db66:	d807      	bhi.n	800db78 <memmove+0x20>
 800db68:	1e43      	subs	r3, r0, #1
 800db6a:	42a1      	cmp	r1, r4
 800db6c:	d008      	beq.n	800db80 <memmove+0x28>
 800db6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db76:	e7f8      	b.n	800db6a <memmove+0x12>
 800db78:	4402      	add	r2, r0
 800db7a:	4601      	mov	r1, r0
 800db7c:	428a      	cmp	r2, r1
 800db7e:	d100      	bne.n	800db82 <memmove+0x2a>
 800db80:	bd10      	pop	{r4, pc}
 800db82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db8a:	e7f7      	b.n	800db7c <memmove+0x24>

0800db8c <memset>:
 800db8c:	4402      	add	r2, r0
 800db8e:	4603      	mov	r3, r0
 800db90:	4293      	cmp	r3, r2
 800db92:	d100      	bne.n	800db96 <memset+0xa>
 800db94:	4770      	bx	lr
 800db96:	f803 1b01 	strb.w	r1, [r3], #1
 800db9a:	e7f9      	b.n	800db90 <memset+0x4>

0800db9c <__errno>:
 800db9c:	4b01      	ldr	r3, [pc, #4]	@ (800dba4 <__errno+0x8>)
 800db9e:	6818      	ldr	r0, [r3, #0]
 800dba0:	4770      	bx	lr
 800dba2:	bf00      	nop
 800dba4:	20000130 	.word	0x20000130

0800dba8 <__libc_init_array>:
 800dba8:	b570      	push	{r4, r5, r6, lr}
 800dbaa:	4d0d      	ldr	r5, [pc, #52]	@ (800dbe0 <__libc_init_array+0x38>)
 800dbac:	4c0d      	ldr	r4, [pc, #52]	@ (800dbe4 <__libc_init_array+0x3c>)
 800dbae:	1b64      	subs	r4, r4, r5
 800dbb0:	10a4      	asrs	r4, r4, #2
 800dbb2:	2600      	movs	r6, #0
 800dbb4:	42a6      	cmp	r6, r4
 800dbb6:	d109      	bne.n	800dbcc <__libc_init_array+0x24>
 800dbb8:	4d0b      	ldr	r5, [pc, #44]	@ (800dbe8 <__libc_init_array+0x40>)
 800dbba:	4c0c      	ldr	r4, [pc, #48]	@ (800dbec <__libc_init_array+0x44>)
 800dbbc:	f001 f9be 	bl	800ef3c <_init>
 800dbc0:	1b64      	subs	r4, r4, r5
 800dbc2:	10a4      	asrs	r4, r4, #2
 800dbc4:	2600      	movs	r6, #0
 800dbc6:	42a6      	cmp	r6, r4
 800dbc8:	d105      	bne.n	800dbd6 <__libc_init_array+0x2e>
 800dbca:	bd70      	pop	{r4, r5, r6, pc}
 800dbcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbd0:	4798      	blx	r3
 800dbd2:	3601      	adds	r6, #1
 800dbd4:	e7ee      	b.n	800dbb4 <__libc_init_array+0xc>
 800dbd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbda:	4798      	blx	r3
 800dbdc:	3601      	adds	r6, #1
 800dbde:	e7f2      	b.n	800dbc6 <__libc_init_array+0x1e>
 800dbe0:	08014640 	.word	0x08014640
 800dbe4:	08014640 	.word	0x08014640
 800dbe8:	08014640 	.word	0x08014640
 800dbec:	08014644 	.word	0x08014644

0800dbf0 <__retarget_lock_acquire_recursive>:
 800dbf0:	4770      	bx	lr

0800dbf2 <__retarget_lock_release_recursive>:
 800dbf2:	4770      	bx	lr

0800dbf4 <memcpy>:
 800dbf4:	440a      	add	r2, r1
 800dbf6:	4291      	cmp	r1, r2
 800dbf8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dbfc:	d100      	bne.n	800dc00 <memcpy+0xc>
 800dbfe:	4770      	bx	lr
 800dc00:	b510      	push	{r4, lr}
 800dc02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc0a:	4291      	cmp	r1, r2
 800dc0c:	d1f9      	bne.n	800dc02 <memcpy+0xe>
 800dc0e:	bd10      	pop	{r4, pc}

0800dc10 <_free_r>:
 800dc10:	b538      	push	{r3, r4, r5, lr}
 800dc12:	4605      	mov	r5, r0
 800dc14:	2900      	cmp	r1, #0
 800dc16:	d041      	beq.n	800dc9c <_free_r+0x8c>
 800dc18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc1c:	1f0c      	subs	r4, r1, #4
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	bfb8      	it	lt
 800dc22:	18e4      	addlt	r4, r4, r3
 800dc24:	f000 f8e0 	bl	800dde8 <__malloc_lock>
 800dc28:	4a1d      	ldr	r2, [pc, #116]	@ (800dca0 <_free_r+0x90>)
 800dc2a:	6813      	ldr	r3, [r2, #0]
 800dc2c:	b933      	cbnz	r3, 800dc3c <_free_r+0x2c>
 800dc2e:	6063      	str	r3, [r4, #4]
 800dc30:	6014      	str	r4, [r2, #0]
 800dc32:	4628      	mov	r0, r5
 800dc34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc38:	f000 b8dc 	b.w	800ddf4 <__malloc_unlock>
 800dc3c:	42a3      	cmp	r3, r4
 800dc3e:	d908      	bls.n	800dc52 <_free_r+0x42>
 800dc40:	6820      	ldr	r0, [r4, #0]
 800dc42:	1821      	adds	r1, r4, r0
 800dc44:	428b      	cmp	r3, r1
 800dc46:	bf01      	itttt	eq
 800dc48:	6819      	ldreq	r1, [r3, #0]
 800dc4a:	685b      	ldreq	r3, [r3, #4]
 800dc4c:	1809      	addeq	r1, r1, r0
 800dc4e:	6021      	streq	r1, [r4, #0]
 800dc50:	e7ed      	b.n	800dc2e <_free_r+0x1e>
 800dc52:	461a      	mov	r2, r3
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	b10b      	cbz	r3, 800dc5c <_free_r+0x4c>
 800dc58:	42a3      	cmp	r3, r4
 800dc5a:	d9fa      	bls.n	800dc52 <_free_r+0x42>
 800dc5c:	6811      	ldr	r1, [r2, #0]
 800dc5e:	1850      	adds	r0, r2, r1
 800dc60:	42a0      	cmp	r0, r4
 800dc62:	d10b      	bne.n	800dc7c <_free_r+0x6c>
 800dc64:	6820      	ldr	r0, [r4, #0]
 800dc66:	4401      	add	r1, r0
 800dc68:	1850      	adds	r0, r2, r1
 800dc6a:	4283      	cmp	r3, r0
 800dc6c:	6011      	str	r1, [r2, #0]
 800dc6e:	d1e0      	bne.n	800dc32 <_free_r+0x22>
 800dc70:	6818      	ldr	r0, [r3, #0]
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	6053      	str	r3, [r2, #4]
 800dc76:	4408      	add	r0, r1
 800dc78:	6010      	str	r0, [r2, #0]
 800dc7a:	e7da      	b.n	800dc32 <_free_r+0x22>
 800dc7c:	d902      	bls.n	800dc84 <_free_r+0x74>
 800dc7e:	230c      	movs	r3, #12
 800dc80:	602b      	str	r3, [r5, #0]
 800dc82:	e7d6      	b.n	800dc32 <_free_r+0x22>
 800dc84:	6820      	ldr	r0, [r4, #0]
 800dc86:	1821      	adds	r1, r4, r0
 800dc88:	428b      	cmp	r3, r1
 800dc8a:	bf04      	itt	eq
 800dc8c:	6819      	ldreq	r1, [r3, #0]
 800dc8e:	685b      	ldreq	r3, [r3, #4]
 800dc90:	6063      	str	r3, [r4, #4]
 800dc92:	bf04      	itt	eq
 800dc94:	1809      	addeq	r1, r1, r0
 800dc96:	6021      	streq	r1, [r4, #0]
 800dc98:	6054      	str	r4, [r2, #4]
 800dc9a:	e7ca      	b.n	800dc32 <_free_r+0x22>
 800dc9c:	bd38      	pop	{r3, r4, r5, pc}
 800dc9e:	bf00      	nop
 800dca0:	20001b1c 	.word	0x20001b1c

0800dca4 <sbrk_aligned>:
 800dca4:	b570      	push	{r4, r5, r6, lr}
 800dca6:	4e0f      	ldr	r6, [pc, #60]	@ (800dce4 <sbrk_aligned+0x40>)
 800dca8:	460c      	mov	r4, r1
 800dcaa:	6831      	ldr	r1, [r6, #0]
 800dcac:	4605      	mov	r5, r0
 800dcae:	b911      	cbnz	r1, 800dcb6 <sbrk_aligned+0x12>
 800dcb0:	f000 fb8a 	bl	800e3c8 <_sbrk_r>
 800dcb4:	6030      	str	r0, [r6, #0]
 800dcb6:	4621      	mov	r1, r4
 800dcb8:	4628      	mov	r0, r5
 800dcba:	f000 fb85 	bl	800e3c8 <_sbrk_r>
 800dcbe:	1c43      	adds	r3, r0, #1
 800dcc0:	d103      	bne.n	800dcca <sbrk_aligned+0x26>
 800dcc2:	f04f 34ff 	mov.w	r4, #4294967295
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	bd70      	pop	{r4, r5, r6, pc}
 800dcca:	1cc4      	adds	r4, r0, #3
 800dccc:	f024 0403 	bic.w	r4, r4, #3
 800dcd0:	42a0      	cmp	r0, r4
 800dcd2:	d0f8      	beq.n	800dcc6 <sbrk_aligned+0x22>
 800dcd4:	1a21      	subs	r1, r4, r0
 800dcd6:	4628      	mov	r0, r5
 800dcd8:	f000 fb76 	bl	800e3c8 <_sbrk_r>
 800dcdc:	3001      	adds	r0, #1
 800dcde:	d1f2      	bne.n	800dcc6 <sbrk_aligned+0x22>
 800dce0:	e7ef      	b.n	800dcc2 <sbrk_aligned+0x1e>
 800dce2:	bf00      	nop
 800dce4:	20001b18 	.word	0x20001b18

0800dce8 <_malloc_r>:
 800dce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcec:	1ccd      	adds	r5, r1, #3
 800dcee:	f025 0503 	bic.w	r5, r5, #3
 800dcf2:	3508      	adds	r5, #8
 800dcf4:	2d0c      	cmp	r5, #12
 800dcf6:	bf38      	it	cc
 800dcf8:	250c      	movcc	r5, #12
 800dcfa:	2d00      	cmp	r5, #0
 800dcfc:	4606      	mov	r6, r0
 800dcfe:	db01      	blt.n	800dd04 <_malloc_r+0x1c>
 800dd00:	42a9      	cmp	r1, r5
 800dd02:	d904      	bls.n	800dd0e <_malloc_r+0x26>
 800dd04:	230c      	movs	r3, #12
 800dd06:	6033      	str	r3, [r6, #0]
 800dd08:	2000      	movs	r0, #0
 800dd0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dde4 <_malloc_r+0xfc>
 800dd12:	f000 f869 	bl	800dde8 <__malloc_lock>
 800dd16:	f8d8 3000 	ldr.w	r3, [r8]
 800dd1a:	461c      	mov	r4, r3
 800dd1c:	bb44      	cbnz	r4, 800dd70 <_malloc_r+0x88>
 800dd1e:	4629      	mov	r1, r5
 800dd20:	4630      	mov	r0, r6
 800dd22:	f7ff ffbf 	bl	800dca4 <sbrk_aligned>
 800dd26:	1c43      	adds	r3, r0, #1
 800dd28:	4604      	mov	r4, r0
 800dd2a:	d158      	bne.n	800ddde <_malloc_r+0xf6>
 800dd2c:	f8d8 4000 	ldr.w	r4, [r8]
 800dd30:	4627      	mov	r7, r4
 800dd32:	2f00      	cmp	r7, #0
 800dd34:	d143      	bne.n	800ddbe <_malloc_r+0xd6>
 800dd36:	2c00      	cmp	r4, #0
 800dd38:	d04b      	beq.n	800ddd2 <_malloc_r+0xea>
 800dd3a:	6823      	ldr	r3, [r4, #0]
 800dd3c:	4639      	mov	r1, r7
 800dd3e:	4630      	mov	r0, r6
 800dd40:	eb04 0903 	add.w	r9, r4, r3
 800dd44:	f000 fb40 	bl	800e3c8 <_sbrk_r>
 800dd48:	4581      	cmp	r9, r0
 800dd4a:	d142      	bne.n	800ddd2 <_malloc_r+0xea>
 800dd4c:	6821      	ldr	r1, [r4, #0]
 800dd4e:	1a6d      	subs	r5, r5, r1
 800dd50:	4629      	mov	r1, r5
 800dd52:	4630      	mov	r0, r6
 800dd54:	f7ff ffa6 	bl	800dca4 <sbrk_aligned>
 800dd58:	3001      	adds	r0, #1
 800dd5a:	d03a      	beq.n	800ddd2 <_malloc_r+0xea>
 800dd5c:	6823      	ldr	r3, [r4, #0]
 800dd5e:	442b      	add	r3, r5
 800dd60:	6023      	str	r3, [r4, #0]
 800dd62:	f8d8 3000 	ldr.w	r3, [r8]
 800dd66:	685a      	ldr	r2, [r3, #4]
 800dd68:	bb62      	cbnz	r2, 800ddc4 <_malloc_r+0xdc>
 800dd6a:	f8c8 7000 	str.w	r7, [r8]
 800dd6e:	e00f      	b.n	800dd90 <_malloc_r+0xa8>
 800dd70:	6822      	ldr	r2, [r4, #0]
 800dd72:	1b52      	subs	r2, r2, r5
 800dd74:	d420      	bmi.n	800ddb8 <_malloc_r+0xd0>
 800dd76:	2a0b      	cmp	r2, #11
 800dd78:	d917      	bls.n	800ddaa <_malloc_r+0xc2>
 800dd7a:	1961      	adds	r1, r4, r5
 800dd7c:	42a3      	cmp	r3, r4
 800dd7e:	6025      	str	r5, [r4, #0]
 800dd80:	bf18      	it	ne
 800dd82:	6059      	strne	r1, [r3, #4]
 800dd84:	6863      	ldr	r3, [r4, #4]
 800dd86:	bf08      	it	eq
 800dd88:	f8c8 1000 	streq.w	r1, [r8]
 800dd8c:	5162      	str	r2, [r4, r5]
 800dd8e:	604b      	str	r3, [r1, #4]
 800dd90:	4630      	mov	r0, r6
 800dd92:	f000 f82f 	bl	800ddf4 <__malloc_unlock>
 800dd96:	f104 000b 	add.w	r0, r4, #11
 800dd9a:	1d23      	adds	r3, r4, #4
 800dd9c:	f020 0007 	bic.w	r0, r0, #7
 800dda0:	1ac2      	subs	r2, r0, r3
 800dda2:	bf1c      	itt	ne
 800dda4:	1a1b      	subne	r3, r3, r0
 800dda6:	50a3      	strne	r3, [r4, r2]
 800dda8:	e7af      	b.n	800dd0a <_malloc_r+0x22>
 800ddaa:	6862      	ldr	r2, [r4, #4]
 800ddac:	42a3      	cmp	r3, r4
 800ddae:	bf0c      	ite	eq
 800ddb0:	f8c8 2000 	streq.w	r2, [r8]
 800ddb4:	605a      	strne	r2, [r3, #4]
 800ddb6:	e7eb      	b.n	800dd90 <_malloc_r+0xa8>
 800ddb8:	4623      	mov	r3, r4
 800ddba:	6864      	ldr	r4, [r4, #4]
 800ddbc:	e7ae      	b.n	800dd1c <_malloc_r+0x34>
 800ddbe:	463c      	mov	r4, r7
 800ddc0:	687f      	ldr	r7, [r7, #4]
 800ddc2:	e7b6      	b.n	800dd32 <_malloc_r+0x4a>
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	42a3      	cmp	r3, r4
 800ddca:	d1fb      	bne.n	800ddc4 <_malloc_r+0xdc>
 800ddcc:	2300      	movs	r3, #0
 800ddce:	6053      	str	r3, [r2, #4]
 800ddd0:	e7de      	b.n	800dd90 <_malloc_r+0xa8>
 800ddd2:	230c      	movs	r3, #12
 800ddd4:	6033      	str	r3, [r6, #0]
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	f000 f80c 	bl	800ddf4 <__malloc_unlock>
 800dddc:	e794      	b.n	800dd08 <_malloc_r+0x20>
 800ddde:	6005      	str	r5, [r0, #0]
 800dde0:	e7d6      	b.n	800dd90 <_malloc_r+0xa8>
 800dde2:	bf00      	nop
 800dde4:	20001b1c 	.word	0x20001b1c

0800dde8 <__malloc_lock>:
 800dde8:	4801      	ldr	r0, [pc, #4]	@ (800ddf0 <__malloc_lock+0x8>)
 800ddea:	f7ff bf01 	b.w	800dbf0 <__retarget_lock_acquire_recursive>
 800ddee:	bf00      	nop
 800ddf0:	20001b14 	.word	0x20001b14

0800ddf4 <__malloc_unlock>:
 800ddf4:	4801      	ldr	r0, [pc, #4]	@ (800ddfc <__malloc_unlock+0x8>)
 800ddf6:	f7ff befc 	b.w	800dbf2 <__retarget_lock_release_recursive>
 800ddfa:	bf00      	nop
 800ddfc:	20001b14 	.word	0x20001b14

0800de00 <__ssputs_r>:
 800de00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de04:	688e      	ldr	r6, [r1, #8]
 800de06:	461f      	mov	r7, r3
 800de08:	42be      	cmp	r6, r7
 800de0a:	680b      	ldr	r3, [r1, #0]
 800de0c:	4682      	mov	sl, r0
 800de0e:	460c      	mov	r4, r1
 800de10:	4690      	mov	r8, r2
 800de12:	d82d      	bhi.n	800de70 <__ssputs_r+0x70>
 800de14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800de18:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800de1c:	d026      	beq.n	800de6c <__ssputs_r+0x6c>
 800de1e:	6965      	ldr	r5, [r4, #20]
 800de20:	6909      	ldr	r1, [r1, #16]
 800de22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de26:	eba3 0901 	sub.w	r9, r3, r1
 800de2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800de2e:	1c7b      	adds	r3, r7, #1
 800de30:	444b      	add	r3, r9
 800de32:	106d      	asrs	r5, r5, #1
 800de34:	429d      	cmp	r5, r3
 800de36:	bf38      	it	cc
 800de38:	461d      	movcc	r5, r3
 800de3a:	0553      	lsls	r3, r2, #21
 800de3c:	d527      	bpl.n	800de8e <__ssputs_r+0x8e>
 800de3e:	4629      	mov	r1, r5
 800de40:	f7ff ff52 	bl	800dce8 <_malloc_r>
 800de44:	4606      	mov	r6, r0
 800de46:	b360      	cbz	r0, 800dea2 <__ssputs_r+0xa2>
 800de48:	6921      	ldr	r1, [r4, #16]
 800de4a:	464a      	mov	r2, r9
 800de4c:	f7ff fed2 	bl	800dbf4 <memcpy>
 800de50:	89a3      	ldrh	r3, [r4, #12]
 800de52:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800de56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de5a:	81a3      	strh	r3, [r4, #12]
 800de5c:	6126      	str	r6, [r4, #16]
 800de5e:	6165      	str	r5, [r4, #20]
 800de60:	444e      	add	r6, r9
 800de62:	eba5 0509 	sub.w	r5, r5, r9
 800de66:	6026      	str	r6, [r4, #0]
 800de68:	60a5      	str	r5, [r4, #8]
 800de6a:	463e      	mov	r6, r7
 800de6c:	42be      	cmp	r6, r7
 800de6e:	d900      	bls.n	800de72 <__ssputs_r+0x72>
 800de70:	463e      	mov	r6, r7
 800de72:	6820      	ldr	r0, [r4, #0]
 800de74:	4632      	mov	r2, r6
 800de76:	4641      	mov	r1, r8
 800de78:	f7ff fe6e 	bl	800db58 <memmove>
 800de7c:	68a3      	ldr	r3, [r4, #8]
 800de7e:	1b9b      	subs	r3, r3, r6
 800de80:	60a3      	str	r3, [r4, #8]
 800de82:	6823      	ldr	r3, [r4, #0]
 800de84:	4433      	add	r3, r6
 800de86:	6023      	str	r3, [r4, #0]
 800de88:	2000      	movs	r0, #0
 800de8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de8e:	462a      	mov	r2, r5
 800de90:	f000 faaa 	bl	800e3e8 <_realloc_r>
 800de94:	4606      	mov	r6, r0
 800de96:	2800      	cmp	r0, #0
 800de98:	d1e0      	bne.n	800de5c <__ssputs_r+0x5c>
 800de9a:	6921      	ldr	r1, [r4, #16]
 800de9c:	4650      	mov	r0, sl
 800de9e:	f7ff feb7 	bl	800dc10 <_free_r>
 800dea2:	230c      	movs	r3, #12
 800dea4:	f8ca 3000 	str.w	r3, [sl]
 800dea8:	89a3      	ldrh	r3, [r4, #12]
 800deaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800deae:	81a3      	strh	r3, [r4, #12]
 800deb0:	f04f 30ff 	mov.w	r0, #4294967295
 800deb4:	e7e9      	b.n	800de8a <__ssputs_r+0x8a>
	...

0800deb8 <_svfiprintf_r>:
 800deb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800debc:	4698      	mov	r8, r3
 800debe:	898b      	ldrh	r3, [r1, #12]
 800dec0:	061b      	lsls	r3, r3, #24
 800dec2:	b09d      	sub	sp, #116	@ 0x74
 800dec4:	4607      	mov	r7, r0
 800dec6:	460d      	mov	r5, r1
 800dec8:	4614      	mov	r4, r2
 800deca:	d510      	bpl.n	800deee <_svfiprintf_r+0x36>
 800decc:	690b      	ldr	r3, [r1, #16]
 800dece:	b973      	cbnz	r3, 800deee <_svfiprintf_r+0x36>
 800ded0:	2140      	movs	r1, #64	@ 0x40
 800ded2:	f7ff ff09 	bl	800dce8 <_malloc_r>
 800ded6:	6028      	str	r0, [r5, #0]
 800ded8:	6128      	str	r0, [r5, #16]
 800deda:	b930      	cbnz	r0, 800deea <_svfiprintf_r+0x32>
 800dedc:	230c      	movs	r3, #12
 800dede:	603b      	str	r3, [r7, #0]
 800dee0:	f04f 30ff 	mov.w	r0, #4294967295
 800dee4:	b01d      	add	sp, #116	@ 0x74
 800dee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deea:	2340      	movs	r3, #64	@ 0x40
 800deec:	616b      	str	r3, [r5, #20]
 800deee:	2300      	movs	r3, #0
 800def0:	9309      	str	r3, [sp, #36]	@ 0x24
 800def2:	2320      	movs	r3, #32
 800def4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800def8:	f8cd 800c 	str.w	r8, [sp, #12]
 800defc:	2330      	movs	r3, #48	@ 0x30
 800defe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e09c <_svfiprintf_r+0x1e4>
 800df02:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df06:	f04f 0901 	mov.w	r9, #1
 800df0a:	4623      	mov	r3, r4
 800df0c:	469a      	mov	sl, r3
 800df0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df12:	b10a      	cbz	r2, 800df18 <_svfiprintf_r+0x60>
 800df14:	2a25      	cmp	r2, #37	@ 0x25
 800df16:	d1f9      	bne.n	800df0c <_svfiprintf_r+0x54>
 800df18:	ebba 0b04 	subs.w	fp, sl, r4
 800df1c:	d00b      	beq.n	800df36 <_svfiprintf_r+0x7e>
 800df1e:	465b      	mov	r3, fp
 800df20:	4622      	mov	r2, r4
 800df22:	4629      	mov	r1, r5
 800df24:	4638      	mov	r0, r7
 800df26:	f7ff ff6b 	bl	800de00 <__ssputs_r>
 800df2a:	3001      	adds	r0, #1
 800df2c:	f000 80a7 	beq.w	800e07e <_svfiprintf_r+0x1c6>
 800df30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df32:	445a      	add	r2, fp
 800df34:	9209      	str	r2, [sp, #36]	@ 0x24
 800df36:	f89a 3000 	ldrb.w	r3, [sl]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	f000 809f 	beq.w	800e07e <_svfiprintf_r+0x1c6>
 800df40:	2300      	movs	r3, #0
 800df42:	f04f 32ff 	mov.w	r2, #4294967295
 800df46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df4a:	f10a 0a01 	add.w	sl, sl, #1
 800df4e:	9304      	str	r3, [sp, #16]
 800df50:	9307      	str	r3, [sp, #28]
 800df52:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df56:	931a      	str	r3, [sp, #104]	@ 0x68
 800df58:	4654      	mov	r4, sl
 800df5a:	2205      	movs	r2, #5
 800df5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df60:	484e      	ldr	r0, [pc, #312]	@ (800e09c <_svfiprintf_r+0x1e4>)
 800df62:	f7f2 f93d 	bl	80001e0 <memchr>
 800df66:	9a04      	ldr	r2, [sp, #16]
 800df68:	b9d8      	cbnz	r0, 800dfa2 <_svfiprintf_r+0xea>
 800df6a:	06d0      	lsls	r0, r2, #27
 800df6c:	bf44      	itt	mi
 800df6e:	2320      	movmi	r3, #32
 800df70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df74:	0711      	lsls	r1, r2, #28
 800df76:	bf44      	itt	mi
 800df78:	232b      	movmi	r3, #43	@ 0x2b
 800df7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df7e:	f89a 3000 	ldrb.w	r3, [sl]
 800df82:	2b2a      	cmp	r3, #42	@ 0x2a
 800df84:	d015      	beq.n	800dfb2 <_svfiprintf_r+0xfa>
 800df86:	9a07      	ldr	r2, [sp, #28]
 800df88:	4654      	mov	r4, sl
 800df8a:	2000      	movs	r0, #0
 800df8c:	f04f 0c0a 	mov.w	ip, #10
 800df90:	4621      	mov	r1, r4
 800df92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df96:	3b30      	subs	r3, #48	@ 0x30
 800df98:	2b09      	cmp	r3, #9
 800df9a:	d94b      	bls.n	800e034 <_svfiprintf_r+0x17c>
 800df9c:	b1b0      	cbz	r0, 800dfcc <_svfiprintf_r+0x114>
 800df9e:	9207      	str	r2, [sp, #28]
 800dfa0:	e014      	b.n	800dfcc <_svfiprintf_r+0x114>
 800dfa2:	eba0 0308 	sub.w	r3, r0, r8
 800dfa6:	fa09 f303 	lsl.w	r3, r9, r3
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	9304      	str	r3, [sp, #16]
 800dfae:	46a2      	mov	sl, r4
 800dfb0:	e7d2      	b.n	800df58 <_svfiprintf_r+0xa0>
 800dfb2:	9b03      	ldr	r3, [sp, #12]
 800dfb4:	1d19      	adds	r1, r3, #4
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	9103      	str	r1, [sp, #12]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	bfbb      	ittet	lt
 800dfbe:	425b      	neglt	r3, r3
 800dfc0:	f042 0202 	orrlt.w	r2, r2, #2
 800dfc4:	9307      	strge	r3, [sp, #28]
 800dfc6:	9307      	strlt	r3, [sp, #28]
 800dfc8:	bfb8      	it	lt
 800dfca:	9204      	strlt	r2, [sp, #16]
 800dfcc:	7823      	ldrb	r3, [r4, #0]
 800dfce:	2b2e      	cmp	r3, #46	@ 0x2e
 800dfd0:	d10a      	bne.n	800dfe8 <_svfiprintf_r+0x130>
 800dfd2:	7863      	ldrb	r3, [r4, #1]
 800dfd4:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfd6:	d132      	bne.n	800e03e <_svfiprintf_r+0x186>
 800dfd8:	9b03      	ldr	r3, [sp, #12]
 800dfda:	1d1a      	adds	r2, r3, #4
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	9203      	str	r2, [sp, #12]
 800dfe0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dfe4:	3402      	adds	r4, #2
 800dfe6:	9305      	str	r3, [sp, #20]
 800dfe8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e0ac <_svfiprintf_r+0x1f4>
 800dfec:	7821      	ldrb	r1, [r4, #0]
 800dfee:	2203      	movs	r2, #3
 800dff0:	4650      	mov	r0, sl
 800dff2:	f7f2 f8f5 	bl	80001e0 <memchr>
 800dff6:	b138      	cbz	r0, 800e008 <_svfiprintf_r+0x150>
 800dff8:	9b04      	ldr	r3, [sp, #16]
 800dffa:	eba0 000a 	sub.w	r0, r0, sl
 800dffe:	2240      	movs	r2, #64	@ 0x40
 800e000:	4082      	lsls	r2, r0
 800e002:	4313      	orrs	r3, r2
 800e004:	3401      	adds	r4, #1
 800e006:	9304      	str	r3, [sp, #16]
 800e008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e00c:	4824      	ldr	r0, [pc, #144]	@ (800e0a0 <_svfiprintf_r+0x1e8>)
 800e00e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e012:	2206      	movs	r2, #6
 800e014:	f7f2 f8e4 	bl	80001e0 <memchr>
 800e018:	2800      	cmp	r0, #0
 800e01a:	d036      	beq.n	800e08a <_svfiprintf_r+0x1d2>
 800e01c:	4b21      	ldr	r3, [pc, #132]	@ (800e0a4 <_svfiprintf_r+0x1ec>)
 800e01e:	bb1b      	cbnz	r3, 800e068 <_svfiprintf_r+0x1b0>
 800e020:	9b03      	ldr	r3, [sp, #12]
 800e022:	3307      	adds	r3, #7
 800e024:	f023 0307 	bic.w	r3, r3, #7
 800e028:	3308      	adds	r3, #8
 800e02a:	9303      	str	r3, [sp, #12]
 800e02c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e02e:	4433      	add	r3, r6
 800e030:	9309      	str	r3, [sp, #36]	@ 0x24
 800e032:	e76a      	b.n	800df0a <_svfiprintf_r+0x52>
 800e034:	fb0c 3202 	mla	r2, ip, r2, r3
 800e038:	460c      	mov	r4, r1
 800e03a:	2001      	movs	r0, #1
 800e03c:	e7a8      	b.n	800df90 <_svfiprintf_r+0xd8>
 800e03e:	2300      	movs	r3, #0
 800e040:	3401      	adds	r4, #1
 800e042:	9305      	str	r3, [sp, #20]
 800e044:	4619      	mov	r1, r3
 800e046:	f04f 0c0a 	mov.w	ip, #10
 800e04a:	4620      	mov	r0, r4
 800e04c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e050:	3a30      	subs	r2, #48	@ 0x30
 800e052:	2a09      	cmp	r2, #9
 800e054:	d903      	bls.n	800e05e <_svfiprintf_r+0x1a6>
 800e056:	2b00      	cmp	r3, #0
 800e058:	d0c6      	beq.n	800dfe8 <_svfiprintf_r+0x130>
 800e05a:	9105      	str	r1, [sp, #20]
 800e05c:	e7c4      	b.n	800dfe8 <_svfiprintf_r+0x130>
 800e05e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e062:	4604      	mov	r4, r0
 800e064:	2301      	movs	r3, #1
 800e066:	e7f0      	b.n	800e04a <_svfiprintf_r+0x192>
 800e068:	ab03      	add	r3, sp, #12
 800e06a:	9300      	str	r3, [sp, #0]
 800e06c:	462a      	mov	r2, r5
 800e06e:	4b0e      	ldr	r3, [pc, #56]	@ (800e0a8 <_svfiprintf_r+0x1f0>)
 800e070:	a904      	add	r1, sp, #16
 800e072:	4638      	mov	r0, r7
 800e074:	f3af 8000 	nop.w
 800e078:	1c42      	adds	r2, r0, #1
 800e07a:	4606      	mov	r6, r0
 800e07c:	d1d6      	bne.n	800e02c <_svfiprintf_r+0x174>
 800e07e:	89ab      	ldrh	r3, [r5, #12]
 800e080:	065b      	lsls	r3, r3, #25
 800e082:	f53f af2d 	bmi.w	800dee0 <_svfiprintf_r+0x28>
 800e086:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e088:	e72c      	b.n	800dee4 <_svfiprintf_r+0x2c>
 800e08a:	ab03      	add	r3, sp, #12
 800e08c:	9300      	str	r3, [sp, #0]
 800e08e:	462a      	mov	r2, r5
 800e090:	4b05      	ldr	r3, [pc, #20]	@ (800e0a8 <_svfiprintf_r+0x1f0>)
 800e092:	a904      	add	r1, sp, #16
 800e094:	4638      	mov	r0, r7
 800e096:	f000 f879 	bl	800e18c <_printf_i>
 800e09a:	e7ed      	b.n	800e078 <_svfiprintf_r+0x1c0>
 800e09c:	08014234 	.word	0x08014234
 800e0a0:	0801423e 	.word	0x0801423e
 800e0a4:	00000000 	.word	0x00000000
 800e0a8:	0800de01 	.word	0x0800de01
 800e0ac:	0801423a 	.word	0x0801423a

0800e0b0 <_printf_common>:
 800e0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0b4:	4616      	mov	r6, r2
 800e0b6:	4698      	mov	r8, r3
 800e0b8:	688a      	ldr	r2, [r1, #8]
 800e0ba:	690b      	ldr	r3, [r1, #16]
 800e0bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	bfb8      	it	lt
 800e0c4:	4613      	movlt	r3, r2
 800e0c6:	6033      	str	r3, [r6, #0]
 800e0c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e0cc:	4607      	mov	r7, r0
 800e0ce:	460c      	mov	r4, r1
 800e0d0:	b10a      	cbz	r2, 800e0d6 <_printf_common+0x26>
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	6033      	str	r3, [r6, #0]
 800e0d6:	6823      	ldr	r3, [r4, #0]
 800e0d8:	0699      	lsls	r1, r3, #26
 800e0da:	bf42      	ittt	mi
 800e0dc:	6833      	ldrmi	r3, [r6, #0]
 800e0de:	3302      	addmi	r3, #2
 800e0e0:	6033      	strmi	r3, [r6, #0]
 800e0e2:	6825      	ldr	r5, [r4, #0]
 800e0e4:	f015 0506 	ands.w	r5, r5, #6
 800e0e8:	d106      	bne.n	800e0f8 <_printf_common+0x48>
 800e0ea:	f104 0a19 	add.w	sl, r4, #25
 800e0ee:	68e3      	ldr	r3, [r4, #12]
 800e0f0:	6832      	ldr	r2, [r6, #0]
 800e0f2:	1a9b      	subs	r3, r3, r2
 800e0f4:	42ab      	cmp	r3, r5
 800e0f6:	dc26      	bgt.n	800e146 <_printf_common+0x96>
 800e0f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e0fc:	6822      	ldr	r2, [r4, #0]
 800e0fe:	3b00      	subs	r3, #0
 800e100:	bf18      	it	ne
 800e102:	2301      	movne	r3, #1
 800e104:	0692      	lsls	r2, r2, #26
 800e106:	d42b      	bmi.n	800e160 <_printf_common+0xb0>
 800e108:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e10c:	4641      	mov	r1, r8
 800e10e:	4638      	mov	r0, r7
 800e110:	47c8      	blx	r9
 800e112:	3001      	adds	r0, #1
 800e114:	d01e      	beq.n	800e154 <_printf_common+0xa4>
 800e116:	6823      	ldr	r3, [r4, #0]
 800e118:	6922      	ldr	r2, [r4, #16]
 800e11a:	f003 0306 	and.w	r3, r3, #6
 800e11e:	2b04      	cmp	r3, #4
 800e120:	bf02      	ittt	eq
 800e122:	68e5      	ldreq	r5, [r4, #12]
 800e124:	6833      	ldreq	r3, [r6, #0]
 800e126:	1aed      	subeq	r5, r5, r3
 800e128:	68a3      	ldr	r3, [r4, #8]
 800e12a:	bf0c      	ite	eq
 800e12c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e130:	2500      	movne	r5, #0
 800e132:	4293      	cmp	r3, r2
 800e134:	bfc4      	itt	gt
 800e136:	1a9b      	subgt	r3, r3, r2
 800e138:	18ed      	addgt	r5, r5, r3
 800e13a:	2600      	movs	r6, #0
 800e13c:	341a      	adds	r4, #26
 800e13e:	42b5      	cmp	r5, r6
 800e140:	d11a      	bne.n	800e178 <_printf_common+0xc8>
 800e142:	2000      	movs	r0, #0
 800e144:	e008      	b.n	800e158 <_printf_common+0xa8>
 800e146:	2301      	movs	r3, #1
 800e148:	4652      	mov	r2, sl
 800e14a:	4641      	mov	r1, r8
 800e14c:	4638      	mov	r0, r7
 800e14e:	47c8      	blx	r9
 800e150:	3001      	adds	r0, #1
 800e152:	d103      	bne.n	800e15c <_printf_common+0xac>
 800e154:	f04f 30ff 	mov.w	r0, #4294967295
 800e158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e15c:	3501      	adds	r5, #1
 800e15e:	e7c6      	b.n	800e0ee <_printf_common+0x3e>
 800e160:	18e1      	adds	r1, r4, r3
 800e162:	1c5a      	adds	r2, r3, #1
 800e164:	2030      	movs	r0, #48	@ 0x30
 800e166:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e16a:	4422      	add	r2, r4
 800e16c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e170:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e174:	3302      	adds	r3, #2
 800e176:	e7c7      	b.n	800e108 <_printf_common+0x58>
 800e178:	2301      	movs	r3, #1
 800e17a:	4622      	mov	r2, r4
 800e17c:	4641      	mov	r1, r8
 800e17e:	4638      	mov	r0, r7
 800e180:	47c8      	blx	r9
 800e182:	3001      	adds	r0, #1
 800e184:	d0e6      	beq.n	800e154 <_printf_common+0xa4>
 800e186:	3601      	adds	r6, #1
 800e188:	e7d9      	b.n	800e13e <_printf_common+0x8e>
	...

0800e18c <_printf_i>:
 800e18c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e190:	7e0f      	ldrb	r7, [r1, #24]
 800e192:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e194:	2f78      	cmp	r7, #120	@ 0x78
 800e196:	4691      	mov	r9, r2
 800e198:	4680      	mov	r8, r0
 800e19a:	460c      	mov	r4, r1
 800e19c:	469a      	mov	sl, r3
 800e19e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e1a2:	d807      	bhi.n	800e1b4 <_printf_i+0x28>
 800e1a4:	2f62      	cmp	r7, #98	@ 0x62
 800e1a6:	d80a      	bhi.n	800e1be <_printf_i+0x32>
 800e1a8:	2f00      	cmp	r7, #0
 800e1aa:	f000 80d1 	beq.w	800e350 <_printf_i+0x1c4>
 800e1ae:	2f58      	cmp	r7, #88	@ 0x58
 800e1b0:	f000 80b8 	beq.w	800e324 <_printf_i+0x198>
 800e1b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e1b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e1bc:	e03a      	b.n	800e234 <_printf_i+0xa8>
 800e1be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e1c2:	2b15      	cmp	r3, #21
 800e1c4:	d8f6      	bhi.n	800e1b4 <_printf_i+0x28>
 800e1c6:	a101      	add	r1, pc, #4	@ (adr r1, 800e1cc <_printf_i+0x40>)
 800e1c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e1cc:	0800e225 	.word	0x0800e225
 800e1d0:	0800e239 	.word	0x0800e239
 800e1d4:	0800e1b5 	.word	0x0800e1b5
 800e1d8:	0800e1b5 	.word	0x0800e1b5
 800e1dc:	0800e1b5 	.word	0x0800e1b5
 800e1e0:	0800e1b5 	.word	0x0800e1b5
 800e1e4:	0800e239 	.word	0x0800e239
 800e1e8:	0800e1b5 	.word	0x0800e1b5
 800e1ec:	0800e1b5 	.word	0x0800e1b5
 800e1f0:	0800e1b5 	.word	0x0800e1b5
 800e1f4:	0800e1b5 	.word	0x0800e1b5
 800e1f8:	0800e337 	.word	0x0800e337
 800e1fc:	0800e263 	.word	0x0800e263
 800e200:	0800e2f1 	.word	0x0800e2f1
 800e204:	0800e1b5 	.word	0x0800e1b5
 800e208:	0800e1b5 	.word	0x0800e1b5
 800e20c:	0800e359 	.word	0x0800e359
 800e210:	0800e1b5 	.word	0x0800e1b5
 800e214:	0800e263 	.word	0x0800e263
 800e218:	0800e1b5 	.word	0x0800e1b5
 800e21c:	0800e1b5 	.word	0x0800e1b5
 800e220:	0800e2f9 	.word	0x0800e2f9
 800e224:	6833      	ldr	r3, [r6, #0]
 800e226:	1d1a      	adds	r2, r3, #4
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	6032      	str	r2, [r6, #0]
 800e22c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e230:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e234:	2301      	movs	r3, #1
 800e236:	e09c      	b.n	800e372 <_printf_i+0x1e6>
 800e238:	6833      	ldr	r3, [r6, #0]
 800e23a:	6820      	ldr	r0, [r4, #0]
 800e23c:	1d19      	adds	r1, r3, #4
 800e23e:	6031      	str	r1, [r6, #0]
 800e240:	0606      	lsls	r6, r0, #24
 800e242:	d501      	bpl.n	800e248 <_printf_i+0xbc>
 800e244:	681d      	ldr	r5, [r3, #0]
 800e246:	e003      	b.n	800e250 <_printf_i+0xc4>
 800e248:	0645      	lsls	r5, r0, #25
 800e24a:	d5fb      	bpl.n	800e244 <_printf_i+0xb8>
 800e24c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e250:	2d00      	cmp	r5, #0
 800e252:	da03      	bge.n	800e25c <_printf_i+0xd0>
 800e254:	232d      	movs	r3, #45	@ 0x2d
 800e256:	426d      	negs	r5, r5
 800e258:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e25c:	4858      	ldr	r0, [pc, #352]	@ (800e3c0 <_printf_i+0x234>)
 800e25e:	230a      	movs	r3, #10
 800e260:	e011      	b.n	800e286 <_printf_i+0xfa>
 800e262:	6821      	ldr	r1, [r4, #0]
 800e264:	6833      	ldr	r3, [r6, #0]
 800e266:	0608      	lsls	r0, r1, #24
 800e268:	f853 5b04 	ldr.w	r5, [r3], #4
 800e26c:	d402      	bmi.n	800e274 <_printf_i+0xe8>
 800e26e:	0649      	lsls	r1, r1, #25
 800e270:	bf48      	it	mi
 800e272:	b2ad      	uxthmi	r5, r5
 800e274:	2f6f      	cmp	r7, #111	@ 0x6f
 800e276:	4852      	ldr	r0, [pc, #328]	@ (800e3c0 <_printf_i+0x234>)
 800e278:	6033      	str	r3, [r6, #0]
 800e27a:	bf14      	ite	ne
 800e27c:	230a      	movne	r3, #10
 800e27e:	2308      	moveq	r3, #8
 800e280:	2100      	movs	r1, #0
 800e282:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e286:	6866      	ldr	r6, [r4, #4]
 800e288:	60a6      	str	r6, [r4, #8]
 800e28a:	2e00      	cmp	r6, #0
 800e28c:	db05      	blt.n	800e29a <_printf_i+0x10e>
 800e28e:	6821      	ldr	r1, [r4, #0]
 800e290:	432e      	orrs	r6, r5
 800e292:	f021 0104 	bic.w	r1, r1, #4
 800e296:	6021      	str	r1, [r4, #0]
 800e298:	d04b      	beq.n	800e332 <_printf_i+0x1a6>
 800e29a:	4616      	mov	r6, r2
 800e29c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e2a0:	fb03 5711 	mls	r7, r3, r1, r5
 800e2a4:	5dc7      	ldrb	r7, [r0, r7]
 800e2a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e2aa:	462f      	mov	r7, r5
 800e2ac:	42bb      	cmp	r3, r7
 800e2ae:	460d      	mov	r5, r1
 800e2b0:	d9f4      	bls.n	800e29c <_printf_i+0x110>
 800e2b2:	2b08      	cmp	r3, #8
 800e2b4:	d10b      	bne.n	800e2ce <_printf_i+0x142>
 800e2b6:	6823      	ldr	r3, [r4, #0]
 800e2b8:	07df      	lsls	r7, r3, #31
 800e2ba:	d508      	bpl.n	800e2ce <_printf_i+0x142>
 800e2bc:	6923      	ldr	r3, [r4, #16]
 800e2be:	6861      	ldr	r1, [r4, #4]
 800e2c0:	4299      	cmp	r1, r3
 800e2c2:	bfde      	ittt	le
 800e2c4:	2330      	movle	r3, #48	@ 0x30
 800e2c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e2ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e2ce:	1b92      	subs	r2, r2, r6
 800e2d0:	6122      	str	r2, [r4, #16]
 800e2d2:	f8cd a000 	str.w	sl, [sp]
 800e2d6:	464b      	mov	r3, r9
 800e2d8:	aa03      	add	r2, sp, #12
 800e2da:	4621      	mov	r1, r4
 800e2dc:	4640      	mov	r0, r8
 800e2de:	f7ff fee7 	bl	800e0b0 <_printf_common>
 800e2e2:	3001      	adds	r0, #1
 800e2e4:	d14a      	bne.n	800e37c <_printf_i+0x1f0>
 800e2e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ea:	b004      	add	sp, #16
 800e2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2f0:	6823      	ldr	r3, [r4, #0]
 800e2f2:	f043 0320 	orr.w	r3, r3, #32
 800e2f6:	6023      	str	r3, [r4, #0]
 800e2f8:	4832      	ldr	r0, [pc, #200]	@ (800e3c4 <_printf_i+0x238>)
 800e2fa:	2778      	movs	r7, #120	@ 0x78
 800e2fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e300:	6823      	ldr	r3, [r4, #0]
 800e302:	6831      	ldr	r1, [r6, #0]
 800e304:	061f      	lsls	r7, r3, #24
 800e306:	f851 5b04 	ldr.w	r5, [r1], #4
 800e30a:	d402      	bmi.n	800e312 <_printf_i+0x186>
 800e30c:	065f      	lsls	r7, r3, #25
 800e30e:	bf48      	it	mi
 800e310:	b2ad      	uxthmi	r5, r5
 800e312:	6031      	str	r1, [r6, #0]
 800e314:	07d9      	lsls	r1, r3, #31
 800e316:	bf44      	itt	mi
 800e318:	f043 0320 	orrmi.w	r3, r3, #32
 800e31c:	6023      	strmi	r3, [r4, #0]
 800e31e:	b11d      	cbz	r5, 800e328 <_printf_i+0x19c>
 800e320:	2310      	movs	r3, #16
 800e322:	e7ad      	b.n	800e280 <_printf_i+0xf4>
 800e324:	4826      	ldr	r0, [pc, #152]	@ (800e3c0 <_printf_i+0x234>)
 800e326:	e7e9      	b.n	800e2fc <_printf_i+0x170>
 800e328:	6823      	ldr	r3, [r4, #0]
 800e32a:	f023 0320 	bic.w	r3, r3, #32
 800e32e:	6023      	str	r3, [r4, #0]
 800e330:	e7f6      	b.n	800e320 <_printf_i+0x194>
 800e332:	4616      	mov	r6, r2
 800e334:	e7bd      	b.n	800e2b2 <_printf_i+0x126>
 800e336:	6833      	ldr	r3, [r6, #0]
 800e338:	6825      	ldr	r5, [r4, #0]
 800e33a:	6961      	ldr	r1, [r4, #20]
 800e33c:	1d18      	adds	r0, r3, #4
 800e33e:	6030      	str	r0, [r6, #0]
 800e340:	062e      	lsls	r6, r5, #24
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	d501      	bpl.n	800e34a <_printf_i+0x1be>
 800e346:	6019      	str	r1, [r3, #0]
 800e348:	e002      	b.n	800e350 <_printf_i+0x1c4>
 800e34a:	0668      	lsls	r0, r5, #25
 800e34c:	d5fb      	bpl.n	800e346 <_printf_i+0x1ba>
 800e34e:	8019      	strh	r1, [r3, #0]
 800e350:	2300      	movs	r3, #0
 800e352:	6123      	str	r3, [r4, #16]
 800e354:	4616      	mov	r6, r2
 800e356:	e7bc      	b.n	800e2d2 <_printf_i+0x146>
 800e358:	6833      	ldr	r3, [r6, #0]
 800e35a:	1d1a      	adds	r2, r3, #4
 800e35c:	6032      	str	r2, [r6, #0]
 800e35e:	681e      	ldr	r6, [r3, #0]
 800e360:	6862      	ldr	r2, [r4, #4]
 800e362:	2100      	movs	r1, #0
 800e364:	4630      	mov	r0, r6
 800e366:	f7f1 ff3b 	bl	80001e0 <memchr>
 800e36a:	b108      	cbz	r0, 800e370 <_printf_i+0x1e4>
 800e36c:	1b80      	subs	r0, r0, r6
 800e36e:	6060      	str	r0, [r4, #4]
 800e370:	6863      	ldr	r3, [r4, #4]
 800e372:	6123      	str	r3, [r4, #16]
 800e374:	2300      	movs	r3, #0
 800e376:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e37a:	e7aa      	b.n	800e2d2 <_printf_i+0x146>
 800e37c:	6923      	ldr	r3, [r4, #16]
 800e37e:	4632      	mov	r2, r6
 800e380:	4649      	mov	r1, r9
 800e382:	4640      	mov	r0, r8
 800e384:	47d0      	blx	sl
 800e386:	3001      	adds	r0, #1
 800e388:	d0ad      	beq.n	800e2e6 <_printf_i+0x15a>
 800e38a:	6823      	ldr	r3, [r4, #0]
 800e38c:	079b      	lsls	r3, r3, #30
 800e38e:	d413      	bmi.n	800e3b8 <_printf_i+0x22c>
 800e390:	68e0      	ldr	r0, [r4, #12]
 800e392:	9b03      	ldr	r3, [sp, #12]
 800e394:	4298      	cmp	r0, r3
 800e396:	bfb8      	it	lt
 800e398:	4618      	movlt	r0, r3
 800e39a:	e7a6      	b.n	800e2ea <_printf_i+0x15e>
 800e39c:	2301      	movs	r3, #1
 800e39e:	4632      	mov	r2, r6
 800e3a0:	4649      	mov	r1, r9
 800e3a2:	4640      	mov	r0, r8
 800e3a4:	47d0      	blx	sl
 800e3a6:	3001      	adds	r0, #1
 800e3a8:	d09d      	beq.n	800e2e6 <_printf_i+0x15a>
 800e3aa:	3501      	adds	r5, #1
 800e3ac:	68e3      	ldr	r3, [r4, #12]
 800e3ae:	9903      	ldr	r1, [sp, #12]
 800e3b0:	1a5b      	subs	r3, r3, r1
 800e3b2:	42ab      	cmp	r3, r5
 800e3b4:	dcf2      	bgt.n	800e39c <_printf_i+0x210>
 800e3b6:	e7eb      	b.n	800e390 <_printf_i+0x204>
 800e3b8:	2500      	movs	r5, #0
 800e3ba:	f104 0619 	add.w	r6, r4, #25
 800e3be:	e7f5      	b.n	800e3ac <_printf_i+0x220>
 800e3c0:	08014245 	.word	0x08014245
 800e3c4:	08014256 	.word	0x08014256

0800e3c8 <_sbrk_r>:
 800e3c8:	b538      	push	{r3, r4, r5, lr}
 800e3ca:	4d06      	ldr	r5, [pc, #24]	@ (800e3e4 <_sbrk_r+0x1c>)
 800e3cc:	2300      	movs	r3, #0
 800e3ce:	4604      	mov	r4, r0
 800e3d0:	4608      	mov	r0, r1
 800e3d2:	602b      	str	r3, [r5, #0]
 800e3d4:	f7f5 f8f0 	bl	80035b8 <_sbrk>
 800e3d8:	1c43      	adds	r3, r0, #1
 800e3da:	d102      	bne.n	800e3e2 <_sbrk_r+0x1a>
 800e3dc:	682b      	ldr	r3, [r5, #0]
 800e3de:	b103      	cbz	r3, 800e3e2 <_sbrk_r+0x1a>
 800e3e0:	6023      	str	r3, [r4, #0]
 800e3e2:	bd38      	pop	{r3, r4, r5, pc}
 800e3e4:	20001b10 	.word	0x20001b10

0800e3e8 <_realloc_r>:
 800e3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3ec:	4607      	mov	r7, r0
 800e3ee:	4614      	mov	r4, r2
 800e3f0:	460d      	mov	r5, r1
 800e3f2:	b921      	cbnz	r1, 800e3fe <_realloc_r+0x16>
 800e3f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3f8:	4611      	mov	r1, r2
 800e3fa:	f7ff bc75 	b.w	800dce8 <_malloc_r>
 800e3fe:	b92a      	cbnz	r2, 800e40c <_realloc_r+0x24>
 800e400:	f7ff fc06 	bl	800dc10 <_free_r>
 800e404:	4625      	mov	r5, r4
 800e406:	4628      	mov	r0, r5
 800e408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e40c:	f000 f81a 	bl	800e444 <_malloc_usable_size_r>
 800e410:	4284      	cmp	r4, r0
 800e412:	4606      	mov	r6, r0
 800e414:	d802      	bhi.n	800e41c <_realloc_r+0x34>
 800e416:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e41a:	d8f4      	bhi.n	800e406 <_realloc_r+0x1e>
 800e41c:	4621      	mov	r1, r4
 800e41e:	4638      	mov	r0, r7
 800e420:	f7ff fc62 	bl	800dce8 <_malloc_r>
 800e424:	4680      	mov	r8, r0
 800e426:	b908      	cbnz	r0, 800e42c <_realloc_r+0x44>
 800e428:	4645      	mov	r5, r8
 800e42a:	e7ec      	b.n	800e406 <_realloc_r+0x1e>
 800e42c:	42b4      	cmp	r4, r6
 800e42e:	4622      	mov	r2, r4
 800e430:	4629      	mov	r1, r5
 800e432:	bf28      	it	cs
 800e434:	4632      	movcs	r2, r6
 800e436:	f7ff fbdd 	bl	800dbf4 <memcpy>
 800e43a:	4629      	mov	r1, r5
 800e43c:	4638      	mov	r0, r7
 800e43e:	f7ff fbe7 	bl	800dc10 <_free_r>
 800e442:	e7f1      	b.n	800e428 <_realloc_r+0x40>

0800e444 <_malloc_usable_size_r>:
 800e444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e448:	1f18      	subs	r0, r3, #4
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	bfbc      	itt	lt
 800e44e:	580b      	ldrlt	r3, [r1, r0]
 800e450:	18c0      	addlt	r0, r0, r3
 800e452:	4770      	bx	lr

0800e454 <cosf>:
 800e454:	ee10 3a10 	vmov	r3, s0
 800e458:	b507      	push	{r0, r1, r2, lr}
 800e45a:	4a1e      	ldr	r2, [pc, #120]	@ (800e4d4 <cosf+0x80>)
 800e45c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e460:	4293      	cmp	r3, r2
 800e462:	d806      	bhi.n	800e472 <cosf+0x1e>
 800e464:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800e4d8 <cosf+0x84>
 800e468:	b003      	add	sp, #12
 800e46a:	f85d eb04 	ldr.w	lr, [sp], #4
 800e46e:	f000 b87b 	b.w	800e568 <__kernel_cosf>
 800e472:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e476:	d304      	bcc.n	800e482 <cosf+0x2e>
 800e478:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e47c:	b003      	add	sp, #12
 800e47e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e482:	4668      	mov	r0, sp
 800e484:	f000 f910 	bl	800e6a8 <__ieee754_rem_pio2f>
 800e488:	f000 0003 	and.w	r0, r0, #3
 800e48c:	2801      	cmp	r0, #1
 800e48e:	d009      	beq.n	800e4a4 <cosf+0x50>
 800e490:	2802      	cmp	r0, #2
 800e492:	d010      	beq.n	800e4b6 <cosf+0x62>
 800e494:	b9b0      	cbnz	r0, 800e4c4 <cosf+0x70>
 800e496:	eddd 0a01 	vldr	s1, [sp, #4]
 800e49a:	ed9d 0a00 	vldr	s0, [sp]
 800e49e:	f000 f863 	bl	800e568 <__kernel_cosf>
 800e4a2:	e7eb      	b.n	800e47c <cosf+0x28>
 800e4a4:	eddd 0a01 	vldr	s1, [sp, #4]
 800e4a8:	ed9d 0a00 	vldr	s0, [sp]
 800e4ac:	f000 f8b4 	bl	800e618 <__kernel_sinf>
 800e4b0:	eeb1 0a40 	vneg.f32	s0, s0
 800e4b4:	e7e2      	b.n	800e47c <cosf+0x28>
 800e4b6:	eddd 0a01 	vldr	s1, [sp, #4]
 800e4ba:	ed9d 0a00 	vldr	s0, [sp]
 800e4be:	f000 f853 	bl	800e568 <__kernel_cosf>
 800e4c2:	e7f5      	b.n	800e4b0 <cosf+0x5c>
 800e4c4:	eddd 0a01 	vldr	s1, [sp, #4]
 800e4c8:	ed9d 0a00 	vldr	s0, [sp]
 800e4cc:	2001      	movs	r0, #1
 800e4ce:	f000 f8a3 	bl	800e618 <__kernel_sinf>
 800e4d2:	e7d3      	b.n	800e47c <cosf+0x28>
 800e4d4:	3f490fd8 	.word	0x3f490fd8
 800e4d8:	00000000 	.word	0x00000000

0800e4dc <sinf>:
 800e4dc:	ee10 3a10 	vmov	r3, s0
 800e4e0:	b507      	push	{r0, r1, r2, lr}
 800e4e2:	4a1f      	ldr	r2, [pc, #124]	@ (800e560 <sinf+0x84>)
 800e4e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	d807      	bhi.n	800e4fc <sinf+0x20>
 800e4ec:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800e564 <sinf+0x88>
 800e4f0:	2000      	movs	r0, #0
 800e4f2:	b003      	add	sp, #12
 800e4f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4f8:	f000 b88e 	b.w	800e618 <__kernel_sinf>
 800e4fc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e500:	d304      	bcc.n	800e50c <sinf+0x30>
 800e502:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e506:	b003      	add	sp, #12
 800e508:	f85d fb04 	ldr.w	pc, [sp], #4
 800e50c:	4668      	mov	r0, sp
 800e50e:	f000 f8cb 	bl	800e6a8 <__ieee754_rem_pio2f>
 800e512:	f000 0003 	and.w	r0, r0, #3
 800e516:	2801      	cmp	r0, #1
 800e518:	d00a      	beq.n	800e530 <sinf+0x54>
 800e51a:	2802      	cmp	r0, #2
 800e51c:	d00f      	beq.n	800e53e <sinf+0x62>
 800e51e:	b9c0      	cbnz	r0, 800e552 <sinf+0x76>
 800e520:	eddd 0a01 	vldr	s1, [sp, #4]
 800e524:	ed9d 0a00 	vldr	s0, [sp]
 800e528:	2001      	movs	r0, #1
 800e52a:	f000 f875 	bl	800e618 <__kernel_sinf>
 800e52e:	e7ea      	b.n	800e506 <sinf+0x2a>
 800e530:	eddd 0a01 	vldr	s1, [sp, #4]
 800e534:	ed9d 0a00 	vldr	s0, [sp]
 800e538:	f000 f816 	bl	800e568 <__kernel_cosf>
 800e53c:	e7e3      	b.n	800e506 <sinf+0x2a>
 800e53e:	eddd 0a01 	vldr	s1, [sp, #4]
 800e542:	ed9d 0a00 	vldr	s0, [sp]
 800e546:	2001      	movs	r0, #1
 800e548:	f000 f866 	bl	800e618 <__kernel_sinf>
 800e54c:	eeb1 0a40 	vneg.f32	s0, s0
 800e550:	e7d9      	b.n	800e506 <sinf+0x2a>
 800e552:	eddd 0a01 	vldr	s1, [sp, #4]
 800e556:	ed9d 0a00 	vldr	s0, [sp]
 800e55a:	f000 f805 	bl	800e568 <__kernel_cosf>
 800e55e:	e7f5      	b.n	800e54c <sinf+0x70>
 800e560:	3f490fd8 	.word	0x3f490fd8
 800e564:	00000000 	.word	0x00000000

0800e568 <__kernel_cosf>:
 800e568:	ee10 3a10 	vmov	r3, s0
 800e56c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e570:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800e574:	eef0 6a40 	vmov.f32	s13, s0
 800e578:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800e57c:	d204      	bcs.n	800e588 <__kernel_cosf+0x20>
 800e57e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800e582:	ee17 2a90 	vmov	r2, s15
 800e586:	b342      	cbz	r2, 800e5da <__kernel_cosf+0x72>
 800e588:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800e58c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800e5f8 <__kernel_cosf+0x90>
 800e590:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800e5fc <__kernel_cosf+0x94>
 800e594:	4a1a      	ldr	r2, [pc, #104]	@ (800e600 <__kernel_cosf+0x98>)
 800e596:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e59a:	4293      	cmp	r3, r2
 800e59c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e604 <__kernel_cosf+0x9c>
 800e5a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e5a4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800e608 <__kernel_cosf+0xa0>
 800e5a8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e5ac:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800e60c <__kernel_cosf+0xa4>
 800e5b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e5b4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800e610 <__kernel_cosf+0xa8>
 800e5b8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e5bc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800e5c0:	ee26 6a07 	vmul.f32	s12, s12, s14
 800e5c4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e5c8:	eee7 0a06 	vfma.f32	s1, s14, s12
 800e5cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5d0:	d804      	bhi.n	800e5dc <__kernel_cosf+0x74>
 800e5d2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e5d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e5da:	4770      	bx	lr
 800e5dc:	4a0d      	ldr	r2, [pc, #52]	@ (800e614 <__kernel_cosf+0xac>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	bf9a      	itte	ls
 800e5e2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800e5e6:	ee07 3a10 	vmovls	s14, r3
 800e5ea:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800e5ee:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e5f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e5f6:	e7ec      	b.n	800e5d2 <__kernel_cosf+0x6a>
 800e5f8:	ad47d74e 	.word	0xad47d74e
 800e5fc:	310f74f6 	.word	0x310f74f6
 800e600:	3e999999 	.word	0x3e999999
 800e604:	b493f27c 	.word	0xb493f27c
 800e608:	37d00d01 	.word	0x37d00d01
 800e60c:	bab60b61 	.word	0xbab60b61
 800e610:	3d2aaaab 	.word	0x3d2aaaab
 800e614:	3f480000 	.word	0x3f480000

0800e618 <__kernel_sinf>:
 800e618:	ee10 3a10 	vmov	r3, s0
 800e61c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e620:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800e624:	d204      	bcs.n	800e630 <__kernel_sinf+0x18>
 800e626:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e62a:	ee17 3a90 	vmov	r3, s15
 800e62e:	b35b      	cbz	r3, 800e688 <__kernel_sinf+0x70>
 800e630:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e634:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800e68c <__kernel_sinf+0x74>
 800e638:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800e690 <__kernel_sinf+0x78>
 800e63c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e640:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800e694 <__kernel_sinf+0x7c>
 800e644:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e648:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800e698 <__kernel_sinf+0x80>
 800e64c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e650:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800e69c <__kernel_sinf+0x84>
 800e654:	ee60 6a07 	vmul.f32	s13, s0, s14
 800e658:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e65c:	b930      	cbnz	r0, 800e66c <__kernel_sinf+0x54>
 800e65e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800e6a0 <__kernel_sinf+0x88>
 800e662:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e666:	eea6 0a26 	vfma.f32	s0, s12, s13
 800e66a:	4770      	bx	lr
 800e66c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800e670:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800e674:	eee0 7a86 	vfma.f32	s15, s1, s12
 800e678:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800e67c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800e6a4 <__kernel_sinf+0x8c>
 800e680:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800e684:	ee30 0a60 	vsub.f32	s0, s0, s1
 800e688:	4770      	bx	lr
 800e68a:	bf00      	nop
 800e68c:	2f2ec9d3 	.word	0x2f2ec9d3
 800e690:	b2d72f34 	.word	0xb2d72f34
 800e694:	3638ef1b 	.word	0x3638ef1b
 800e698:	b9500d01 	.word	0xb9500d01
 800e69c:	3c088889 	.word	0x3c088889
 800e6a0:	be2aaaab 	.word	0xbe2aaaab
 800e6a4:	3e2aaaab 	.word	0x3e2aaaab

0800e6a8 <__ieee754_rem_pio2f>:
 800e6a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6aa:	ee10 6a10 	vmov	r6, s0
 800e6ae:	4b88      	ldr	r3, [pc, #544]	@ (800e8d0 <__ieee754_rem_pio2f+0x228>)
 800e6b0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800e6b4:	429d      	cmp	r5, r3
 800e6b6:	b087      	sub	sp, #28
 800e6b8:	4604      	mov	r4, r0
 800e6ba:	d805      	bhi.n	800e6c8 <__ieee754_rem_pio2f+0x20>
 800e6bc:	2300      	movs	r3, #0
 800e6be:	ed80 0a00 	vstr	s0, [r0]
 800e6c2:	6043      	str	r3, [r0, #4]
 800e6c4:	2000      	movs	r0, #0
 800e6c6:	e022      	b.n	800e70e <__ieee754_rem_pio2f+0x66>
 800e6c8:	4b82      	ldr	r3, [pc, #520]	@ (800e8d4 <__ieee754_rem_pio2f+0x22c>)
 800e6ca:	429d      	cmp	r5, r3
 800e6cc:	d83a      	bhi.n	800e744 <__ieee754_rem_pio2f+0x9c>
 800e6ce:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e6d2:	2e00      	cmp	r6, #0
 800e6d4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800e8d8 <__ieee754_rem_pio2f+0x230>
 800e6d8:	4a80      	ldr	r2, [pc, #512]	@ (800e8dc <__ieee754_rem_pio2f+0x234>)
 800e6da:	f023 030f 	bic.w	r3, r3, #15
 800e6de:	dd18      	ble.n	800e712 <__ieee754_rem_pio2f+0x6a>
 800e6e0:	4293      	cmp	r3, r2
 800e6e2:	ee70 7a47 	vsub.f32	s15, s0, s14
 800e6e6:	bf09      	itett	eq
 800e6e8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800e8e0 <__ieee754_rem_pio2f+0x238>
 800e6ec:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800e8e4 <__ieee754_rem_pio2f+0x23c>
 800e6f0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800e8e8 <__ieee754_rem_pio2f+0x240>
 800e6f4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800e6f8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800e6fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e700:	ed80 7a00 	vstr	s14, [r0]
 800e704:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e708:	edc0 7a01 	vstr	s15, [r0, #4]
 800e70c:	2001      	movs	r0, #1
 800e70e:	b007      	add	sp, #28
 800e710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e712:	4293      	cmp	r3, r2
 800e714:	ee70 7a07 	vadd.f32	s15, s0, s14
 800e718:	bf09      	itett	eq
 800e71a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800e8e0 <__ieee754_rem_pio2f+0x238>
 800e71e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800e8e4 <__ieee754_rem_pio2f+0x23c>
 800e722:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800e8e8 <__ieee754_rem_pio2f+0x240>
 800e726:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800e72a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e72e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e732:	ed80 7a00 	vstr	s14, [r0]
 800e736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e73a:	edc0 7a01 	vstr	s15, [r0, #4]
 800e73e:	f04f 30ff 	mov.w	r0, #4294967295
 800e742:	e7e4      	b.n	800e70e <__ieee754_rem_pio2f+0x66>
 800e744:	4b69      	ldr	r3, [pc, #420]	@ (800e8ec <__ieee754_rem_pio2f+0x244>)
 800e746:	429d      	cmp	r5, r3
 800e748:	d873      	bhi.n	800e832 <__ieee754_rem_pio2f+0x18a>
 800e74a:	f000 f8dd 	bl	800e908 <fabsf>
 800e74e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800e8f0 <__ieee754_rem_pio2f+0x248>
 800e752:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800e756:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e75a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e75e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e762:	ee17 0a90 	vmov	r0, s15
 800e766:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800e8d8 <__ieee754_rem_pio2f+0x230>
 800e76a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800e76e:	281f      	cmp	r0, #31
 800e770:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800e8e4 <__ieee754_rem_pio2f+0x23c>
 800e774:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e778:	eeb1 6a47 	vneg.f32	s12, s14
 800e77c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800e780:	ee16 1a90 	vmov	r1, s13
 800e784:	dc09      	bgt.n	800e79a <__ieee754_rem_pio2f+0xf2>
 800e786:	4a5b      	ldr	r2, [pc, #364]	@ (800e8f4 <__ieee754_rem_pio2f+0x24c>)
 800e788:	1e47      	subs	r7, r0, #1
 800e78a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800e78e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800e792:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e796:	4293      	cmp	r3, r2
 800e798:	d107      	bne.n	800e7aa <__ieee754_rem_pio2f+0x102>
 800e79a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800e79e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800e7a2:	2a08      	cmp	r2, #8
 800e7a4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800e7a8:	dc14      	bgt.n	800e7d4 <__ieee754_rem_pio2f+0x12c>
 800e7aa:	6021      	str	r1, [r4, #0]
 800e7ac:	ed94 7a00 	vldr	s14, [r4]
 800e7b0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e7b4:	2e00      	cmp	r6, #0
 800e7b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e7ba:	ed84 0a01 	vstr	s0, [r4, #4]
 800e7be:	daa6      	bge.n	800e70e <__ieee754_rem_pio2f+0x66>
 800e7c0:	eeb1 7a47 	vneg.f32	s14, s14
 800e7c4:	eeb1 0a40 	vneg.f32	s0, s0
 800e7c8:	ed84 7a00 	vstr	s14, [r4]
 800e7cc:	ed84 0a01 	vstr	s0, [r4, #4]
 800e7d0:	4240      	negs	r0, r0
 800e7d2:	e79c      	b.n	800e70e <__ieee754_rem_pio2f+0x66>
 800e7d4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800e8e0 <__ieee754_rem_pio2f+0x238>
 800e7d8:	eef0 6a40 	vmov.f32	s13, s0
 800e7dc:	eee6 6a25 	vfma.f32	s13, s12, s11
 800e7e0:	ee70 7a66 	vsub.f32	s15, s0, s13
 800e7e4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e7e8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800e8e8 <__ieee754_rem_pio2f+0x240>
 800e7ec:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800e7f0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800e7f4:	ee15 2a90 	vmov	r2, s11
 800e7f8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e7fc:	1a5b      	subs	r3, r3, r1
 800e7fe:	2b19      	cmp	r3, #25
 800e800:	dc04      	bgt.n	800e80c <__ieee754_rem_pio2f+0x164>
 800e802:	edc4 5a00 	vstr	s11, [r4]
 800e806:	eeb0 0a66 	vmov.f32	s0, s13
 800e80a:	e7cf      	b.n	800e7ac <__ieee754_rem_pio2f+0x104>
 800e80c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800e8f8 <__ieee754_rem_pio2f+0x250>
 800e810:	eeb0 0a66 	vmov.f32	s0, s13
 800e814:	eea6 0a25 	vfma.f32	s0, s12, s11
 800e818:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800e81c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800e8fc <__ieee754_rem_pio2f+0x254>
 800e820:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e824:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800e828:	ee30 7a67 	vsub.f32	s14, s0, s15
 800e82c:	ed84 7a00 	vstr	s14, [r4]
 800e830:	e7bc      	b.n	800e7ac <__ieee754_rem_pio2f+0x104>
 800e832:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800e836:	d306      	bcc.n	800e846 <__ieee754_rem_pio2f+0x19e>
 800e838:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e83c:	edc0 7a01 	vstr	s15, [r0, #4]
 800e840:	edc0 7a00 	vstr	s15, [r0]
 800e844:	e73e      	b.n	800e6c4 <__ieee754_rem_pio2f+0x1c>
 800e846:	15ea      	asrs	r2, r5, #23
 800e848:	3a86      	subs	r2, #134	@ 0x86
 800e84a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e84e:	ee07 3a90 	vmov	s15, r3
 800e852:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e856:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800e900 <__ieee754_rem_pio2f+0x258>
 800e85a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e85e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e862:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e866:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e86a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e86e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e872:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e876:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e87a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e87e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e886:	edcd 7a05 	vstr	s15, [sp, #20]
 800e88a:	d11e      	bne.n	800e8ca <__ieee754_rem_pio2f+0x222>
 800e88c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e894:	bf0c      	ite	eq
 800e896:	2301      	moveq	r3, #1
 800e898:	2302      	movne	r3, #2
 800e89a:	491a      	ldr	r1, [pc, #104]	@ (800e904 <__ieee754_rem_pio2f+0x25c>)
 800e89c:	9101      	str	r1, [sp, #4]
 800e89e:	2102      	movs	r1, #2
 800e8a0:	9100      	str	r1, [sp, #0]
 800e8a2:	a803      	add	r0, sp, #12
 800e8a4:	4621      	mov	r1, r4
 800e8a6:	f000 f837 	bl	800e918 <__kernel_rem_pio2f>
 800e8aa:	2e00      	cmp	r6, #0
 800e8ac:	f6bf af2f 	bge.w	800e70e <__ieee754_rem_pio2f+0x66>
 800e8b0:	edd4 7a00 	vldr	s15, [r4]
 800e8b4:	eef1 7a67 	vneg.f32	s15, s15
 800e8b8:	edc4 7a00 	vstr	s15, [r4]
 800e8bc:	edd4 7a01 	vldr	s15, [r4, #4]
 800e8c0:	eef1 7a67 	vneg.f32	s15, s15
 800e8c4:	edc4 7a01 	vstr	s15, [r4, #4]
 800e8c8:	e782      	b.n	800e7d0 <__ieee754_rem_pio2f+0x128>
 800e8ca:	2303      	movs	r3, #3
 800e8cc:	e7e5      	b.n	800e89a <__ieee754_rem_pio2f+0x1f2>
 800e8ce:	bf00      	nop
 800e8d0:	3f490fd8 	.word	0x3f490fd8
 800e8d4:	4016cbe3 	.word	0x4016cbe3
 800e8d8:	3fc90f80 	.word	0x3fc90f80
 800e8dc:	3fc90fd0 	.word	0x3fc90fd0
 800e8e0:	37354400 	.word	0x37354400
 800e8e4:	37354443 	.word	0x37354443
 800e8e8:	2e85a308 	.word	0x2e85a308
 800e8ec:	43490f80 	.word	0x43490f80
 800e8f0:	3f22f984 	.word	0x3f22f984
 800e8f4:	08014268 	.word	0x08014268
 800e8f8:	2e85a300 	.word	0x2e85a300
 800e8fc:	248d3132 	.word	0x248d3132
 800e900:	43800000 	.word	0x43800000
 800e904:	080142e8 	.word	0x080142e8

0800e908 <fabsf>:
 800e908:	ee10 3a10 	vmov	r3, s0
 800e90c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e910:	ee00 3a10 	vmov	s0, r3
 800e914:	4770      	bx	lr
	...

0800e918 <__kernel_rem_pio2f>:
 800e918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e91c:	ed2d 8b04 	vpush	{d8-d9}
 800e920:	b0d9      	sub	sp, #356	@ 0x164
 800e922:	4690      	mov	r8, r2
 800e924:	9001      	str	r0, [sp, #4]
 800e926:	4ab6      	ldr	r2, [pc, #728]	@ (800ec00 <__kernel_rem_pio2f+0x2e8>)
 800e928:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800e92a:	f118 0f04 	cmn.w	r8, #4
 800e92e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800e932:	460f      	mov	r7, r1
 800e934:	f103 3bff 	add.w	fp, r3, #4294967295
 800e938:	db26      	blt.n	800e988 <__kernel_rem_pio2f+0x70>
 800e93a:	f1b8 0203 	subs.w	r2, r8, #3
 800e93e:	bf48      	it	mi
 800e940:	f108 0204 	addmi.w	r2, r8, #4
 800e944:	10d2      	asrs	r2, r2, #3
 800e946:	1c55      	adds	r5, r2, #1
 800e948:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800e94a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800ec10 <__kernel_rem_pio2f+0x2f8>
 800e94e:	00e8      	lsls	r0, r5, #3
 800e950:	eba2 060b 	sub.w	r6, r2, fp
 800e954:	9002      	str	r0, [sp, #8]
 800e956:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800e95a:	eb0a 0c0b 	add.w	ip, sl, fp
 800e95e:	ac1c      	add	r4, sp, #112	@ 0x70
 800e960:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800e964:	2000      	movs	r0, #0
 800e966:	4560      	cmp	r0, ip
 800e968:	dd10      	ble.n	800e98c <__kernel_rem_pio2f+0x74>
 800e96a:	a91c      	add	r1, sp, #112	@ 0x70
 800e96c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800e970:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800e974:	2600      	movs	r6, #0
 800e976:	4556      	cmp	r6, sl
 800e978:	dc24      	bgt.n	800e9c4 <__kernel_rem_pio2f+0xac>
 800e97a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e97e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800ec10 <__kernel_rem_pio2f+0x2f8>
 800e982:	4684      	mov	ip, r0
 800e984:	2400      	movs	r4, #0
 800e986:	e016      	b.n	800e9b6 <__kernel_rem_pio2f+0x9e>
 800e988:	2200      	movs	r2, #0
 800e98a:	e7dc      	b.n	800e946 <__kernel_rem_pio2f+0x2e>
 800e98c:	42c6      	cmn	r6, r0
 800e98e:	bf5d      	ittte	pl
 800e990:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800e994:	ee07 1a90 	vmovpl	s15, r1
 800e998:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800e99c:	eef0 7a47 	vmovmi.f32	s15, s14
 800e9a0:	ece4 7a01 	vstmia	r4!, {s15}
 800e9a4:	3001      	adds	r0, #1
 800e9a6:	e7de      	b.n	800e966 <__kernel_rem_pio2f+0x4e>
 800e9a8:	ecfe 6a01 	vldmia	lr!, {s13}
 800e9ac:	ed3c 7a01 	vldmdb	ip!, {s14}
 800e9b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e9b4:	3401      	adds	r4, #1
 800e9b6:	455c      	cmp	r4, fp
 800e9b8:	ddf6      	ble.n	800e9a8 <__kernel_rem_pio2f+0x90>
 800e9ba:	ece9 7a01 	vstmia	r9!, {s15}
 800e9be:	3601      	adds	r6, #1
 800e9c0:	3004      	adds	r0, #4
 800e9c2:	e7d8      	b.n	800e976 <__kernel_rem_pio2f+0x5e>
 800e9c4:	a908      	add	r1, sp, #32
 800e9c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e9ca:	9104      	str	r1, [sp, #16]
 800e9cc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800e9ce:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800ec0c <__kernel_rem_pio2f+0x2f4>
 800e9d2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800ec08 <__kernel_rem_pio2f+0x2f0>
 800e9d6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e9da:	9203      	str	r2, [sp, #12]
 800e9dc:	4654      	mov	r4, sl
 800e9de:	00a2      	lsls	r2, r4, #2
 800e9e0:	9205      	str	r2, [sp, #20]
 800e9e2:	aa58      	add	r2, sp, #352	@ 0x160
 800e9e4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800e9e8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800e9ec:	a944      	add	r1, sp, #272	@ 0x110
 800e9ee:	aa08      	add	r2, sp, #32
 800e9f0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800e9f4:	4694      	mov	ip, r2
 800e9f6:	4626      	mov	r6, r4
 800e9f8:	2e00      	cmp	r6, #0
 800e9fa:	dc4c      	bgt.n	800ea96 <__kernel_rem_pio2f+0x17e>
 800e9fc:	4628      	mov	r0, r5
 800e9fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ea02:	f000 f9f1 	bl	800ede8 <scalbnf>
 800ea06:	eeb0 8a40 	vmov.f32	s16, s0
 800ea0a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800ea0e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800ea12:	f000 fa4f 	bl	800eeb4 <floorf>
 800ea16:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800ea1a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800ea1e:	2d00      	cmp	r5, #0
 800ea20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea24:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ea28:	ee17 9a90 	vmov	r9, s15
 800ea2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ea30:	ee38 8a67 	vsub.f32	s16, s16, s15
 800ea34:	dd41      	ble.n	800eaba <__kernel_rem_pio2f+0x1a2>
 800ea36:	f104 3cff 	add.w	ip, r4, #4294967295
 800ea3a:	a908      	add	r1, sp, #32
 800ea3c:	f1c5 0e08 	rsb	lr, r5, #8
 800ea40:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800ea44:	fa46 f00e 	asr.w	r0, r6, lr
 800ea48:	4481      	add	r9, r0
 800ea4a:	fa00 f00e 	lsl.w	r0, r0, lr
 800ea4e:	1a36      	subs	r6, r6, r0
 800ea50:	f1c5 0007 	rsb	r0, r5, #7
 800ea54:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800ea58:	4106      	asrs	r6, r0
 800ea5a:	2e00      	cmp	r6, #0
 800ea5c:	dd3c      	ble.n	800ead8 <__kernel_rem_pio2f+0x1c0>
 800ea5e:	f04f 0e00 	mov.w	lr, #0
 800ea62:	f109 0901 	add.w	r9, r9, #1
 800ea66:	4670      	mov	r0, lr
 800ea68:	4574      	cmp	r4, lr
 800ea6a:	dc68      	bgt.n	800eb3e <__kernel_rem_pio2f+0x226>
 800ea6c:	2d00      	cmp	r5, #0
 800ea6e:	dd03      	ble.n	800ea78 <__kernel_rem_pio2f+0x160>
 800ea70:	2d01      	cmp	r5, #1
 800ea72:	d074      	beq.n	800eb5e <__kernel_rem_pio2f+0x246>
 800ea74:	2d02      	cmp	r5, #2
 800ea76:	d07d      	beq.n	800eb74 <__kernel_rem_pio2f+0x25c>
 800ea78:	2e02      	cmp	r6, #2
 800ea7a:	d12d      	bne.n	800ead8 <__kernel_rem_pio2f+0x1c0>
 800ea7c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ea80:	ee30 8a48 	vsub.f32	s16, s0, s16
 800ea84:	b340      	cbz	r0, 800ead8 <__kernel_rem_pio2f+0x1c0>
 800ea86:	4628      	mov	r0, r5
 800ea88:	9306      	str	r3, [sp, #24]
 800ea8a:	f000 f9ad 	bl	800ede8 <scalbnf>
 800ea8e:	9b06      	ldr	r3, [sp, #24]
 800ea90:	ee38 8a40 	vsub.f32	s16, s16, s0
 800ea94:	e020      	b.n	800ead8 <__kernel_rem_pio2f+0x1c0>
 800ea96:	ee60 7a28 	vmul.f32	s15, s0, s17
 800ea9a:	3e01      	subs	r6, #1
 800ea9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eaa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800eaa4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800eaa8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800eaac:	ecac 0a01 	vstmia	ip!, {s0}
 800eab0:	ed30 0a01 	vldmdb	r0!, {s0}
 800eab4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800eab8:	e79e      	b.n	800e9f8 <__kernel_rem_pio2f+0xe0>
 800eaba:	d105      	bne.n	800eac8 <__kernel_rem_pio2f+0x1b0>
 800eabc:	1e60      	subs	r0, r4, #1
 800eabe:	a908      	add	r1, sp, #32
 800eac0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800eac4:	11f6      	asrs	r6, r6, #7
 800eac6:	e7c8      	b.n	800ea5a <__kernel_rem_pio2f+0x142>
 800eac8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800eacc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ead0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ead4:	da31      	bge.n	800eb3a <__kernel_rem_pio2f+0x222>
 800ead6:	2600      	movs	r6, #0
 800ead8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800eadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eae0:	f040 8098 	bne.w	800ec14 <__kernel_rem_pio2f+0x2fc>
 800eae4:	1e60      	subs	r0, r4, #1
 800eae6:	2200      	movs	r2, #0
 800eae8:	4550      	cmp	r0, sl
 800eaea:	da4b      	bge.n	800eb84 <__kernel_rem_pio2f+0x26c>
 800eaec:	2a00      	cmp	r2, #0
 800eaee:	d065      	beq.n	800ebbc <__kernel_rem_pio2f+0x2a4>
 800eaf0:	3c01      	subs	r4, #1
 800eaf2:	ab08      	add	r3, sp, #32
 800eaf4:	3d08      	subs	r5, #8
 800eaf6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d0f8      	beq.n	800eaf0 <__kernel_rem_pio2f+0x1d8>
 800eafe:	4628      	mov	r0, r5
 800eb00:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800eb04:	f000 f970 	bl	800ede8 <scalbnf>
 800eb08:	1c63      	adds	r3, r4, #1
 800eb0a:	aa44      	add	r2, sp, #272	@ 0x110
 800eb0c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800ec0c <__kernel_rem_pio2f+0x2f4>
 800eb10:	0099      	lsls	r1, r3, #2
 800eb12:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800eb16:	4623      	mov	r3, r4
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	f280 80a9 	bge.w	800ec70 <__kernel_rem_pio2f+0x358>
 800eb1e:	4623      	mov	r3, r4
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	f2c0 80c7 	blt.w	800ecb4 <__kernel_rem_pio2f+0x39c>
 800eb26:	aa44      	add	r2, sp, #272	@ 0x110
 800eb28:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800eb2c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800ec04 <__kernel_rem_pio2f+0x2ec>
 800eb30:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800ec10 <__kernel_rem_pio2f+0x2f8>
 800eb34:	2000      	movs	r0, #0
 800eb36:	1ae2      	subs	r2, r4, r3
 800eb38:	e0b1      	b.n	800ec9e <__kernel_rem_pio2f+0x386>
 800eb3a:	2602      	movs	r6, #2
 800eb3c:	e78f      	b.n	800ea5e <__kernel_rem_pio2f+0x146>
 800eb3e:	f852 1b04 	ldr.w	r1, [r2], #4
 800eb42:	b948      	cbnz	r0, 800eb58 <__kernel_rem_pio2f+0x240>
 800eb44:	b121      	cbz	r1, 800eb50 <__kernel_rem_pio2f+0x238>
 800eb46:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800eb4a:	f842 1c04 	str.w	r1, [r2, #-4]
 800eb4e:	2101      	movs	r1, #1
 800eb50:	f10e 0e01 	add.w	lr, lr, #1
 800eb54:	4608      	mov	r0, r1
 800eb56:	e787      	b.n	800ea68 <__kernel_rem_pio2f+0x150>
 800eb58:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800eb5c:	e7f5      	b.n	800eb4a <__kernel_rem_pio2f+0x232>
 800eb5e:	f104 3cff 	add.w	ip, r4, #4294967295
 800eb62:	aa08      	add	r2, sp, #32
 800eb64:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800eb68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800eb6c:	a908      	add	r1, sp, #32
 800eb6e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800eb72:	e781      	b.n	800ea78 <__kernel_rem_pio2f+0x160>
 800eb74:	f104 3cff 	add.w	ip, r4, #4294967295
 800eb78:	aa08      	add	r2, sp, #32
 800eb7a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800eb7e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800eb82:	e7f3      	b.n	800eb6c <__kernel_rem_pio2f+0x254>
 800eb84:	a908      	add	r1, sp, #32
 800eb86:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800eb8a:	3801      	subs	r0, #1
 800eb8c:	430a      	orrs	r2, r1
 800eb8e:	e7ab      	b.n	800eae8 <__kernel_rem_pio2f+0x1d0>
 800eb90:	3201      	adds	r2, #1
 800eb92:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800eb96:	2e00      	cmp	r6, #0
 800eb98:	d0fa      	beq.n	800eb90 <__kernel_rem_pio2f+0x278>
 800eb9a:	9905      	ldr	r1, [sp, #20]
 800eb9c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800eba0:	eb0d 0001 	add.w	r0, sp, r1
 800eba4:	18e6      	adds	r6, r4, r3
 800eba6:	a91c      	add	r1, sp, #112	@ 0x70
 800eba8:	f104 0c01 	add.w	ip, r4, #1
 800ebac:	384c      	subs	r0, #76	@ 0x4c
 800ebae:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800ebb2:	4422      	add	r2, r4
 800ebb4:	4562      	cmp	r2, ip
 800ebb6:	da04      	bge.n	800ebc2 <__kernel_rem_pio2f+0x2aa>
 800ebb8:	4614      	mov	r4, r2
 800ebba:	e710      	b.n	800e9de <__kernel_rem_pio2f+0xc6>
 800ebbc:	9804      	ldr	r0, [sp, #16]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	e7e7      	b.n	800eb92 <__kernel_rem_pio2f+0x27a>
 800ebc2:	9903      	ldr	r1, [sp, #12]
 800ebc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ebc8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800ebcc:	9105      	str	r1, [sp, #20]
 800ebce:	ee07 1a90 	vmov	s15, r1
 800ebd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ebd6:	2400      	movs	r4, #0
 800ebd8:	ece6 7a01 	vstmia	r6!, {s15}
 800ebdc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800ec10 <__kernel_rem_pio2f+0x2f8>
 800ebe0:	46b1      	mov	r9, r6
 800ebe2:	455c      	cmp	r4, fp
 800ebe4:	dd04      	ble.n	800ebf0 <__kernel_rem_pio2f+0x2d8>
 800ebe6:	ece0 7a01 	vstmia	r0!, {s15}
 800ebea:	f10c 0c01 	add.w	ip, ip, #1
 800ebee:	e7e1      	b.n	800ebb4 <__kernel_rem_pio2f+0x29c>
 800ebf0:	ecfe 6a01 	vldmia	lr!, {s13}
 800ebf4:	ed39 7a01 	vldmdb	r9!, {s14}
 800ebf8:	3401      	adds	r4, #1
 800ebfa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ebfe:	e7f0      	b.n	800ebe2 <__kernel_rem_pio2f+0x2ca>
 800ec00:	0801462c 	.word	0x0801462c
 800ec04:	08014600 	.word	0x08014600
 800ec08:	43800000 	.word	0x43800000
 800ec0c:	3b800000 	.word	0x3b800000
 800ec10:	00000000 	.word	0x00000000
 800ec14:	9b02      	ldr	r3, [sp, #8]
 800ec16:	eeb0 0a48 	vmov.f32	s0, s16
 800ec1a:	eba3 0008 	sub.w	r0, r3, r8
 800ec1e:	f000 f8e3 	bl	800ede8 <scalbnf>
 800ec22:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800ec08 <__kernel_rem_pio2f+0x2f0>
 800ec26:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ec2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec2e:	db19      	blt.n	800ec64 <__kernel_rem_pio2f+0x34c>
 800ec30:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800ec0c <__kernel_rem_pio2f+0x2f4>
 800ec34:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ec38:	aa08      	add	r2, sp, #32
 800ec3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec3e:	3508      	adds	r5, #8
 800ec40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec44:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ec48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ec4c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ec50:	ee10 3a10 	vmov	r3, s0
 800ec54:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ec58:	ee17 3a90 	vmov	r3, s15
 800ec5c:	3401      	adds	r4, #1
 800ec5e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ec62:	e74c      	b.n	800eafe <__kernel_rem_pio2f+0x1e6>
 800ec64:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ec68:	aa08      	add	r2, sp, #32
 800ec6a:	ee10 3a10 	vmov	r3, s0
 800ec6e:	e7f6      	b.n	800ec5e <__kernel_rem_pio2f+0x346>
 800ec70:	a808      	add	r0, sp, #32
 800ec72:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ec76:	9001      	str	r0, [sp, #4]
 800ec78:	ee07 0a90 	vmov	s15, r0
 800ec7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ec80:	3b01      	subs	r3, #1
 800ec82:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ec86:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ec8a:	ed62 7a01 	vstmdb	r2!, {s15}
 800ec8e:	e743      	b.n	800eb18 <__kernel_rem_pio2f+0x200>
 800ec90:	ecfc 6a01 	vldmia	ip!, {s13}
 800ec94:	ecb5 7a01 	vldmia	r5!, {s14}
 800ec98:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ec9c:	3001      	adds	r0, #1
 800ec9e:	4550      	cmp	r0, sl
 800eca0:	dc01      	bgt.n	800eca6 <__kernel_rem_pio2f+0x38e>
 800eca2:	4290      	cmp	r0, r2
 800eca4:	ddf4      	ble.n	800ec90 <__kernel_rem_pio2f+0x378>
 800eca6:	a858      	add	r0, sp, #352	@ 0x160
 800eca8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ecac:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800ecb0:	3b01      	subs	r3, #1
 800ecb2:	e735      	b.n	800eb20 <__kernel_rem_pio2f+0x208>
 800ecb4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ecb6:	2b02      	cmp	r3, #2
 800ecb8:	dc09      	bgt.n	800ecce <__kernel_rem_pio2f+0x3b6>
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	dc27      	bgt.n	800ed0e <__kernel_rem_pio2f+0x3f6>
 800ecbe:	d040      	beq.n	800ed42 <__kernel_rem_pio2f+0x42a>
 800ecc0:	f009 0007 	and.w	r0, r9, #7
 800ecc4:	b059      	add	sp, #356	@ 0x164
 800ecc6:	ecbd 8b04 	vpop	{d8-d9}
 800ecca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecce:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ecd0:	2b03      	cmp	r3, #3
 800ecd2:	d1f5      	bne.n	800ecc0 <__kernel_rem_pio2f+0x3a8>
 800ecd4:	aa30      	add	r2, sp, #192	@ 0xc0
 800ecd6:	1f0b      	subs	r3, r1, #4
 800ecd8:	4413      	add	r3, r2
 800ecda:	461a      	mov	r2, r3
 800ecdc:	4620      	mov	r0, r4
 800ecde:	2800      	cmp	r0, #0
 800ece0:	dc50      	bgt.n	800ed84 <__kernel_rem_pio2f+0x46c>
 800ece2:	4622      	mov	r2, r4
 800ece4:	2a01      	cmp	r2, #1
 800ece6:	dc5d      	bgt.n	800eda4 <__kernel_rem_pio2f+0x48c>
 800ece8:	ab30      	add	r3, sp, #192	@ 0xc0
 800ecea:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800ec10 <__kernel_rem_pio2f+0x2f8>
 800ecee:	440b      	add	r3, r1
 800ecf0:	2c01      	cmp	r4, #1
 800ecf2:	dc67      	bgt.n	800edc4 <__kernel_rem_pio2f+0x4ac>
 800ecf4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800ecf8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800ecfc:	2e00      	cmp	r6, #0
 800ecfe:	d167      	bne.n	800edd0 <__kernel_rem_pio2f+0x4b8>
 800ed00:	edc7 6a00 	vstr	s13, [r7]
 800ed04:	ed87 7a01 	vstr	s14, [r7, #4]
 800ed08:	edc7 7a02 	vstr	s15, [r7, #8]
 800ed0c:	e7d8      	b.n	800ecc0 <__kernel_rem_pio2f+0x3a8>
 800ed0e:	ab30      	add	r3, sp, #192	@ 0xc0
 800ed10:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800ec10 <__kernel_rem_pio2f+0x2f8>
 800ed14:	440b      	add	r3, r1
 800ed16:	4622      	mov	r2, r4
 800ed18:	2a00      	cmp	r2, #0
 800ed1a:	da24      	bge.n	800ed66 <__kernel_rem_pio2f+0x44e>
 800ed1c:	b34e      	cbz	r6, 800ed72 <__kernel_rem_pio2f+0x45a>
 800ed1e:	eef1 7a47 	vneg.f32	s15, s14
 800ed22:	edc7 7a00 	vstr	s15, [r7]
 800ed26:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800ed2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed2e:	aa31      	add	r2, sp, #196	@ 0xc4
 800ed30:	2301      	movs	r3, #1
 800ed32:	429c      	cmp	r4, r3
 800ed34:	da20      	bge.n	800ed78 <__kernel_rem_pio2f+0x460>
 800ed36:	b10e      	cbz	r6, 800ed3c <__kernel_rem_pio2f+0x424>
 800ed38:	eef1 7a67 	vneg.f32	s15, s15
 800ed3c:	edc7 7a01 	vstr	s15, [r7, #4]
 800ed40:	e7be      	b.n	800ecc0 <__kernel_rem_pio2f+0x3a8>
 800ed42:	ab30      	add	r3, sp, #192	@ 0xc0
 800ed44:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800ec10 <__kernel_rem_pio2f+0x2f8>
 800ed48:	440b      	add	r3, r1
 800ed4a:	2c00      	cmp	r4, #0
 800ed4c:	da05      	bge.n	800ed5a <__kernel_rem_pio2f+0x442>
 800ed4e:	b10e      	cbz	r6, 800ed54 <__kernel_rem_pio2f+0x43c>
 800ed50:	eef1 7a67 	vneg.f32	s15, s15
 800ed54:	edc7 7a00 	vstr	s15, [r7]
 800ed58:	e7b2      	b.n	800ecc0 <__kernel_rem_pio2f+0x3a8>
 800ed5a:	ed33 7a01 	vldmdb	r3!, {s14}
 800ed5e:	3c01      	subs	r4, #1
 800ed60:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed64:	e7f1      	b.n	800ed4a <__kernel_rem_pio2f+0x432>
 800ed66:	ed73 7a01 	vldmdb	r3!, {s15}
 800ed6a:	3a01      	subs	r2, #1
 800ed6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ed70:	e7d2      	b.n	800ed18 <__kernel_rem_pio2f+0x400>
 800ed72:	eef0 7a47 	vmov.f32	s15, s14
 800ed76:	e7d4      	b.n	800ed22 <__kernel_rem_pio2f+0x40a>
 800ed78:	ecb2 7a01 	vldmia	r2!, {s14}
 800ed7c:	3301      	adds	r3, #1
 800ed7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ed82:	e7d6      	b.n	800ed32 <__kernel_rem_pio2f+0x41a>
 800ed84:	ed72 7a01 	vldmdb	r2!, {s15}
 800ed88:	edd2 6a01 	vldr	s13, [r2, #4]
 800ed8c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ed90:	3801      	subs	r0, #1
 800ed92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed96:	ed82 7a00 	vstr	s14, [r2]
 800ed9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed9e:	edc2 7a01 	vstr	s15, [r2, #4]
 800eda2:	e79c      	b.n	800ecde <__kernel_rem_pio2f+0x3c6>
 800eda4:	ed73 7a01 	vldmdb	r3!, {s15}
 800eda8:	edd3 6a01 	vldr	s13, [r3, #4]
 800edac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800edb0:	3a01      	subs	r2, #1
 800edb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800edb6:	ed83 7a00 	vstr	s14, [r3]
 800edba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800edbe:	edc3 7a01 	vstr	s15, [r3, #4]
 800edc2:	e78f      	b.n	800ece4 <__kernel_rem_pio2f+0x3cc>
 800edc4:	ed33 7a01 	vldmdb	r3!, {s14}
 800edc8:	3c01      	subs	r4, #1
 800edca:	ee77 7a87 	vadd.f32	s15, s15, s14
 800edce:	e78f      	b.n	800ecf0 <__kernel_rem_pio2f+0x3d8>
 800edd0:	eef1 6a66 	vneg.f32	s13, s13
 800edd4:	eeb1 7a47 	vneg.f32	s14, s14
 800edd8:	edc7 6a00 	vstr	s13, [r7]
 800eddc:	ed87 7a01 	vstr	s14, [r7, #4]
 800ede0:	eef1 7a67 	vneg.f32	s15, s15
 800ede4:	e790      	b.n	800ed08 <__kernel_rem_pio2f+0x3f0>
 800ede6:	bf00      	nop

0800ede8 <scalbnf>:
 800ede8:	ee10 3a10 	vmov	r3, s0
 800edec:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800edf0:	d02b      	beq.n	800ee4a <scalbnf+0x62>
 800edf2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800edf6:	d302      	bcc.n	800edfe <scalbnf+0x16>
 800edf8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800edfc:	4770      	bx	lr
 800edfe:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800ee02:	d123      	bne.n	800ee4c <scalbnf+0x64>
 800ee04:	4b24      	ldr	r3, [pc, #144]	@ (800ee98 <scalbnf+0xb0>)
 800ee06:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800ee9c <scalbnf+0xb4>
 800ee0a:	4298      	cmp	r0, r3
 800ee0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ee10:	db17      	blt.n	800ee42 <scalbnf+0x5a>
 800ee12:	ee10 3a10 	vmov	r3, s0
 800ee16:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ee1a:	3a19      	subs	r2, #25
 800ee1c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ee20:	4288      	cmp	r0, r1
 800ee22:	dd15      	ble.n	800ee50 <scalbnf+0x68>
 800ee24:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800eea0 <scalbnf+0xb8>
 800ee28:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800eea4 <scalbnf+0xbc>
 800ee2c:	ee10 3a10 	vmov	r3, s0
 800ee30:	eeb0 7a67 	vmov.f32	s14, s15
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	bfb8      	it	lt
 800ee38:	eef0 7a66 	vmovlt.f32	s15, s13
 800ee3c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800ee40:	4770      	bx	lr
 800ee42:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800eea8 <scalbnf+0xc0>
 800ee46:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ee4a:	4770      	bx	lr
 800ee4c:	0dd2      	lsrs	r2, r2, #23
 800ee4e:	e7e5      	b.n	800ee1c <scalbnf+0x34>
 800ee50:	4410      	add	r0, r2
 800ee52:	28fe      	cmp	r0, #254	@ 0xfe
 800ee54:	dce6      	bgt.n	800ee24 <scalbnf+0x3c>
 800ee56:	2800      	cmp	r0, #0
 800ee58:	dd06      	ble.n	800ee68 <scalbnf+0x80>
 800ee5a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ee5e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ee62:	ee00 3a10 	vmov	s0, r3
 800ee66:	4770      	bx	lr
 800ee68:	f110 0f16 	cmn.w	r0, #22
 800ee6c:	da09      	bge.n	800ee82 <scalbnf+0x9a>
 800ee6e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800eea8 <scalbnf+0xc0>
 800ee72:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800eeac <scalbnf+0xc4>
 800ee76:	ee10 3a10 	vmov	r3, s0
 800ee7a:	eeb0 7a67 	vmov.f32	s14, s15
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	e7d9      	b.n	800ee36 <scalbnf+0x4e>
 800ee82:	3019      	adds	r0, #25
 800ee84:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ee88:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800ee8c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800eeb0 <scalbnf+0xc8>
 800ee90:	ee07 3a90 	vmov	s15, r3
 800ee94:	e7d7      	b.n	800ee46 <scalbnf+0x5e>
 800ee96:	bf00      	nop
 800ee98:	ffff3cb0 	.word	0xffff3cb0
 800ee9c:	4c000000 	.word	0x4c000000
 800eea0:	7149f2ca 	.word	0x7149f2ca
 800eea4:	f149f2ca 	.word	0xf149f2ca
 800eea8:	0da24260 	.word	0x0da24260
 800eeac:	8da24260 	.word	0x8da24260
 800eeb0:	33000000 	.word	0x33000000

0800eeb4 <floorf>:
 800eeb4:	ee10 3a10 	vmov	r3, s0
 800eeb8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800eebc:	3a7f      	subs	r2, #127	@ 0x7f
 800eebe:	2a16      	cmp	r2, #22
 800eec0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800eec4:	dc2b      	bgt.n	800ef1e <floorf+0x6a>
 800eec6:	2a00      	cmp	r2, #0
 800eec8:	da12      	bge.n	800eef0 <floorf+0x3c>
 800eeca:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ef30 <floorf+0x7c>
 800eece:	ee30 0a27 	vadd.f32	s0, s0, s15
 800eed2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800eed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeda:	dd06      	ble.n	800eeea <floorf+0x36>
 800eedc:	2b00      	cmp	r3, #0
 800eede:	da24      	bge.n	800ef2a <floorf+0x76>
 800eee0:	2900      	cmp	r1, #0
 800eee2:	4b14      	ldr	r3, [pc, #80]	@ (800ef34 <floorf+0x80>)
 800eee4:	bf08      	it	eq
 800eee6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800eeea:	ee00 3a10 	vmov	s0, r3
 800eeee:	4770      	bx	lr
 800eef0:	4911      	ldr	r1, [pc, #68]	@ (800ef38 <floorf+0x84>)
 800eef2:	4111      	asrs	r1, r2
 800eef4:	420b      	tst	r3, r1
 800eef6:	d0fa      	beq.n	800eeee <floorf+0x3a>
 800eef8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800ef30 <floorf+0x7c>
 800eefc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ef00:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ef04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef08:	ddef      	ble.n	800eeea <floorf+0x36>
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	bfbe      	ittt	lt
 800ef0e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800ef12:	fa40 f202 	asrlt.w	r2, r0, r2
 800ef16:	189b      	addlt	r3, r3, r2
 800ef18:	ea23 0301 	bic.w	r3, r3, r1
 800ef1c:	e7e5      	b.n	800eeea <floorf+0x36>
 800ef1e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ef22:	d3e4      	bcc.n	800eeee <floorf+0x3a>
 800ef24:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ef28:	4770      	bx	lr
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	e7dd      	b.n	800eeea <floorf+0x36>
 800ef2e:	bf00      	nop
 800ef30:	7149f2ca 	.word	0x7149f2ca
 800ef34:	bf800000 	.word	0xbf800000
 800ef38:	007fffff 	.word	0x007fffff

0800ef3c <_init>:
 800ef3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef3e:	bf00      	nop
 800ef40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef42:	bc08      	pop	{r3}
 800ef44:	469e      	mov	lr, r3
 800ef46:	4770      	bx	lr

0800ef48 <_fini>:
 800ef48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef4a:	bf00      	nop
 800ef4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef4e:	bc08      	pop	{r3}
 800ef50:	469e      	mov	lr, r3
 800ef52:	4770      	bx	lr
