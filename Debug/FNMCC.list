
FNMCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c494  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df8  0800c62c  0800c62c  0000d62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d424  0800d424  0000f114  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d424  0800d424  0000e424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d42c  0800d42c  0000f114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d42c  0800d42c  0000e42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d430  0800d430  0000e430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000114  20000000  0800d434  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001854  20000114  0800d548  0000f114  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001968  0800d548  0000f968  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f114  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a12f  00000000  00000000  0000f144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004118  00000000  00000000  00029273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  0002d390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001231  00000000  00000000  0002eb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5d7  00000000  00000000  0002fd51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e9aa  00000000  00000000  0004b328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ee6a  00000000  00000000  00069cd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108b3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000631c  00000000  00000000  00108b80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0010ee9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000114 	.word	0x20000114
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c614 	.word	0x0800c614

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000118 	.word	0x20000118
 80001d4:	0800c614 	.word	0x0800c614

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++) {
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	e00a      	b.n	8000528 <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 8000512:	4a0a      	ldr	r2, [pc, #40]	@ (800053c <HAL_ADC_ConvCpltCallback+0x38>)
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800051a:	4a09      	ldr	r2, [pc, #36]	@ (8000540 <HAL_ADC_ConvCpltCallback+0x3c>)
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	3301      	adds	r3, #1
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b07      	cmp	r3, #7
 800052c:	ddf1      	ble.n	8000512 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 800052e:	bf00      	nop
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	20000338 	.word	0x20000338
 8000540:	20000348 	.word	0x20000348

08000544 <HAL_I2C_MemTxCpltCallback>:
//void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	//Control del final de operaciones
    //if (hi2c->Instance == hi2c1.Instance) {
        SSD1306_TxCplt = 1;
 800054c:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <HAL_I2C_MemTxCpltCallback+0x24>)
 800054e:	2201      	movs	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000558:	4804      	ldr	r0, [pc, #16]	@ (800056c <HAL_I2C_MemTxCpltCallback+0x28>)
 800055a:	f002 ffa7 	bl	80034ac <HAL_GPIO_WritePin>
    //}
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000571 	.word	0x20000571
 800056c:	40020800 	.word	0x40020800

08000570 <HAL_TIM_PeriodElapsedCallback>:
//}
//void HAL_I2C_ER_IRQHandler(){
//	HAL_I2C_ER_IRQHandler(&hi2c1);
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a0e      	ldr	r2, [pc, #56]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d116      	bne.n	80005b0 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000582:	4b0e      	ldr	r3, [pc, #56]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	3301      	adds	r3, #1
 8000588:	b2da      	uxtb	r2, r3
 800058a:	4b0c      	ldr	r3, [pc, #48]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800058c:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 800058e:	4b0b      	ldr	r3, [pc, #44]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b28      	cmp	r3, #40	@ 0x28
 8000594:	d107      	bne.n	80005a6 <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 8000596:	4b09      	ldr	r3, [pc, #36]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
			IS10MS=TRUE;
 800059c:	4a08      	ldr	r2, [pc, #32]	@ (80005c0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800059e:	7813      	ldrb	r3, [r2, #0]
 80005a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005a4:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 80005a6:	2208      	movs	r2, #8
 80005a8:	4906      	ldr	r1, [pc, #24]	@ (80005c4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80005aa:	4807      	ldr	r0, [pc, #28]	@ (80005c8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80005ac:	f001 fd70 	bl	8002090 <HAL_ADC_Start_DMA>
	}
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40010000 	.word	0x40010000
 80005bc:	20000334 	.word	0x20000334
 80005c0:	20000570 	.word	0x20000570
 80005c4:	20000338 	.word	0x20000338
 80005c8:	20000130 	.word	0x20000130

080005cc <USBRxData>:

void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 80005cc:	b490      	push	{r4, r7}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 80005d6:	2300      	movs	r3, #0
 80005d8:	73fb      	strb	r3, [r7, #15]
 80005da:	e018      	b.n	800060e <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	441a      	add	r2, r3
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <USBRxData+0x58>)
 80005e4:	6819      	ldr	r1, [r3, #0]
 80005e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <USBRxData+0x58>)
 80005e8:	795b      	ldrb	r3, [r3, #5]
 80005ea:	1c58      	adds	r0, r3, #1
 80005ec:	b2c4      	uxtb	r4, r0
 80005ee:	480d      	ldr	r0, [pc, #52]	@ (8000624 <USBRxData+0x58>)
 80005f0:	7144      	strb	r4, [r0, #5]
 80005f2:	440b      	add	r3, r1
 80005f4:	7812      	ldrb	r2, [r2, #0]
 80005f6:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <USBRxData+0x58>)
 80005fa:	795a      	ldrb	r2, [r3, #5]
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <USBRxData+0x58>)
 80005fe:	799b      	ldrb	r3, [r3, #6]
 8000600:	4013      	ands	r3, r2
 8000602:	b2da      	uxtb	r2, r3
 8000604:	4b07      	ldr	r3, [pc, #28]	@ (8000624 <USBRxData+0x58>)
 8000606:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	3301      	adds	r3, #1
 800060c:	73fb      	strb	r3, [r7, #15]
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	683a      	ldr	r2, [r7, #0]
 8000612:	429a      	cmp	r2, r3
 8000614:	d8e2      	bhi.n	80005dc <USBRxData+0x10>
	}

}
 8000616:	bf00      	nop
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bc90      	pop	{r4, r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000364 	.word	0x20000364

08000628 <USBTask>:

void USBTask() {
 8000628:	b580      	push	{r7, lr}
 800062a:	b0c2      	sub	sp, #264	@ 0x108
 800062c:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 800062e:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <USBTask+0x90>)
 8000630:	791a      	ldrb	r2, [r3, #4]
 8000632:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <USBTask+0x90>)
 8000634:	795b      	ldrb	r3, [r3, #5]
 8000636:	429a      	cmp	r2, r3
 8000638:	d039      	beq.n	80006ae <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (decodeHeader(&USBRx))
 800063a:	481f      	ldr	r0, [pc, #124]	@ (80006b8 <USBTask+0x90>)
 800063c:	f000 fc9c 	bl	8000f78 <decodeHeader>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d003      	beq.n	800064e <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 8000646:	491d      	ldr	r1, [pc, #116]	@ (80006bc <USBTask+0x94>)
 8000648:	481b      	ldr	r0, [pc, #108]	@ (80006b8 <USBTask+0x90>)
 800064a:	f000 f839 	bl	80006c0 <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 800064e:	2300      	movs	r3, #0
 8000650:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000654:	e01d      	b.n	8000692 <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 8000656:	4b19      	ldr	r3, [pc, #100]	@ (80006bc <USBTask+0x94>)
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <USBTask+0x94>)
 800065c:	7a1b      	ldrb	r3, [r3, #8]
 800065e:	1c59      	adds	r1, r3, #1
 8000660:	b2c8      	uxtb	r0, r1
 8000662:	4916      	ldr	r1, [pc, #88]	@ (80006bc <USBTask+0x94>)
 8000664:	7208      	strb	r0, [r1, #8]
 8000666:	441a      	add	r2, r3
 8000668:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800066c:	7811      	ldrb	r1, [r2, #0]
 800066e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000672:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000676:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 8000678:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <USBTask+0x94>)
 800067a:	7a1a      	ldrb	r2, [r3, #8]
 800067c:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <USBTask+0x94>)
 800067e:	799b      	ldrb	r3, [r3, #6]
 8000680:	4013      	ands	r3, r2
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <USBTask+0x94>)
 8000686:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000688:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800068c:	3301      	adds	r3, #1
 800068e:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000692:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <USBTask+0x94>)
 8000694:	79db      	ldrb	r3, [r3, #7]
 8000696:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 800069a:	429a      	cmp	r2, r3
 800069c:	d3db      	bcc.n	8000656 <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 800069e:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <USBTask+0x94>)
 80006a0:	79db      	ldrb	r3, [r3, #7]
 80006a2:	461a      	mov	r2, r3
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4611      	mov	r1, r2
 80006a8:	4618      	mov	r0, r3
 80006aa:	f00b fb25 	bl	800bcf8 <CDC_Transmit_FS>
	}

}
 80006ae:	bf00      	nop
 80006b0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000364 	.word	0x20000364
 80006bc:	20000358 	.word	0x20000358

080006c0 <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	7a12      	ldrb	r2, [r2, #8]
 80006d2:	4413      	add	r3, r2
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2bf0      	cmp	r3, #240	@ 0xf0
 80006d8:	d002      	beq.n	80006e0 <decodeCommand+0x20>
 80006da:	2bf1      	cmp	r3, #241	@ 0xf1
 80006dc:	d010      	beq.n	8000700 <decodeCommand+0x40>
 80006de:	e01f      	b.n	8000720 <decodeCommand+0x60>
	case ALIVE:
		putHeaderOnTx(dataTx, ALIVE, 2);
 80006e0:	2202      	movs	r2, #2
 80006e2:	21f0      	movs	r1, #240	@ 0xf0
 80006e4:	6838      	ldr	r0, [r7, #0]
 80006e6:	f000 fb25 	bl	8000d34 <putHeaderOnTx>
		putByteOnTx(dataTx, ACK);
 80006ea:	210d      	movs	r1, #13
 80006ec:	6838      	ldr	r0, [r7, #0]
 80006ee:	f000 fbd0 	bl	8000e92 <putByteOnTx>
		putByteOnTx(dataTx, dataTx->chk);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	7a5b      	ldrb	r3, [r3, #9]
 80006f6:	4619      	mov	r1, r3
 80006f8:	6838      	ldr	r0, [r7, #0]
 80006fa:	f000 fbca 	bl	8000e92 <putByteOnTx>
		break;
 80006fe:	e025      	b.n	800074c <decodeCommand+0x8c>
	case FIRMWARE:
		putHeaderOnTx(dataTx, FIRMWARE, 13);
 8000700:	220d      	movs	r2, #13
 8000702:	21f1      	movs	r1, #241	@ 0xf1
 8000704:	6838      	ldr	r0, [r7, #0]
 8000706:	f000 fb15 	bl	8000d34 <putHeaderOnTx>
		putStrOntx(dataTx, firmware);
 800070a:	4912      	ldr	r1, [pc, #72]	@ (8000754 <decodeCommand+0x94>)
 800070c:	6838      	ldr	r0, [r7, #0]
 800070e:	f000 fbee 	bl	8000eee <putStrOntx>
		putByteOnTx(dataTx, dataTx->chk);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	7a5b      	ldrb	r3, [r3, #9]
 8000716:	4619      	mov	r1, r3
 8000718:	6838      	ldr	r0, [r7, #0]
 800071a:	f000 fbba 	bl	8000e92 <putByteOnTx>
		break;
 800071e:	e015      	b.n	800074c <decodeCommand+0x8c>
	default:
		putHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	7a12      	ldrb	r2, [r2, #8]
 8000728:	4413      	add	r3, r2
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2202      	movs	r2, #2
 800072e:	4619      	mov	r1, r3
 8000730:	6838      	ldr	r0, [r7, #0]
 8000732:	f000 faff 	bl	8000d34 <putHeaderOnTx>
		putByteOnTx(dataTx, UNKNOWN);
 8000736:	21ff      	movs	r1, #255	@ 0xff
 8000738:	6838      	ldr	r0, [r7, #0]
 800073a:	f000 fbaa 	bl	8000e92 <putByteOnTx>
		putByteOnTx(dataTx, dataTx->chk);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	7a5b      	ldrb	r3, [r3, #9]
 8000742:	4619      	mov	r1, r3
 8000744:	6838      	ldr	r0, [r7, #0]
 8000746:	f000 fba4 	bl	8000e92 <putByteOnTx>
		break;
 800074a:	bf00      	nop
	}
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	0800d3f4 	.word	0x0800d3f4

08000758 <do10ms>:

void do10ms() {
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
	if(IS10MS){
 800075c:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <do10ms+0x48>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d015      	beq.n	8000796 <do10ms+0x3e>
		IS10MS=FALSE;
 800076a:	4a0d      	ldr	r2, [pc, #52]	@ (80007a0 <do10ms+0x48>)
 800076c:	7813      	ldrb	r3, [r2, #0]
 800076e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000772:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 8000774:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <do10ms+0x4c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	3b01      	subs	r3, #1
 800077a:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <do10ms+0x4c>)
 800077c:	6013      	str	r3, [r2, #0]
		if (tmo100ms == 0) {
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <do10ms+0x4c>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d107      	bne.n	8000796 <do10ms+0x3e>
			tmo100ms = 10;
 8000786:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <do10ms+0x4c>)
 8000788:	220a      	movs	r2, #10
 800078a:	601a      	str	r2, [r3, #0]
			IS100MS=TRUE;
 800078c:	4a04      	ldr	r2, [pc, #16]	@ (80007a0 <do10ms+0x48>)
 800078e:	7813      	ldrb	r3, [r2, #0]
 8000790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000794:	7013      	strb	r3, [r2, #0]
			//heartBeatTask();
		}
	}
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	20000570 	.word	0x20000570
 80007a4:	20000008 	.word	0x20000008

080007a8 <SSD1306Data>:

	times++;
	times &= 31;
}

void SSD1306Data(){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	//if(IS100MS){
	//	IS100MS=FALSE;
		SSD1306_GotoXY(10, 0);
 80007ac:	2100      	movs	r1, #0
 80007ae:	200a      	movs	r0, #10
 80007b0:	f000 feb0 	bl	8001514 <SSD1306_GotoXY>
		SSD1306_Puts("CONEXION", &Font_11x18, WHITE);
 80007b4:	2201      	movs	r2, #1
 80007b6:	490c      	ldr	r1, [pc, #48]	@ (80007e8 <SSD1306Data+0x40>)
 80007b8:	480c      	ldr	r0, [pc, #48]	@ (80007ec <SSD1306Data+0x44>)
 80007ba:	f000 ff3f 	bl	800163c <SSD1306_Puts>
		SSD1306_GotoXY(10, 20);
 80007be:	2114      	movs	r1, #20
 80007c0:	200a      	movs	r0, #10
 80007c2:	f000 fea7 	bl	8001514 <SSD1306_GotoXY>
		SSD1306_Puts("OLED I2C", &Font_11x18, WHITE);
 80007c6:	2201      	movs	r2, #1
 80007c8:	4907      	ldr	r1, [pc, #28]	@ (80007e8 <SSD1306Data+0x40>)
 80007ca:	4809      	ldr	r0, [pc, #36]	@ (80007f0 <SSD1306Data+0x48>)
 80007cc:	f000 ff36 	bl	800163c <SSD1306_Puts>
		SSD1306_GotoXY(10, 40);
 80007d0:	2128      	movs	r1, #40	@ 0x28
 80007d2:	200a      	movs	r0, #10
 80007d4:	f000 fe9e 	bl	8001514 <SSD1306_GotoXY>
		SSD1306_Puts("BLACK PILL", &Font_11x18, WHITE);
 80007d8:	2201      	movs	r2, #1
 80007da:	4903      	ldr	r1, [pc, #12]	@ (80007e8 <SSD1306Data+0x40>)
 80007dc:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <SSD1306Data+0x4c>)
 80007de:	f000 ff2d 	bl	800163c <SSD1306_Puts>
	//}
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000000 	.word	0x20000000
 80007ec:	0800c62c 	.word	0x0800c62c
 80007f0:	0800c638 	.word	0x0800c638
 80007f4:	0800c644 	.word	0x0800c644

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fc:	f001 fa5e 	bl	8001cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000800:	f000 f844 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000804:	f000 fa30 	bl	8000c68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000808:	f000 f9f0 	bl	8000bec <MX_DMA_Init>
  MX_ADC1_Init();
 800080c:	f000 f8a6 	bl	800095c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000810:	f000 f958 	bl	8000ac4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000814:	f000 f984 	bl	8000b20 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000818:	f00b f954 	bl	800bac4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 800081c:	4812      	ldr	r0, [pc, #72]	@ (8000868 <main+0x70>)
 800081e:	f00b faa3 	bl	800bd68 <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1); //timer
 8000822:	4812      	ldr	r0, [pc, #72]	@ (800086c <main+0x74>)
 8000824:	f007 f958 	bl	8007ad8 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 8000828:	2201      	movs	r2, #1
 800082a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800082e:	4810      	ldr	r0, [pc, #64]	@ (8000870 <main+0x78>)
 8000830:	f002 fe3c 	bl	80034ac <HAL_GPIO_WritePin>

	//Display
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000834:	2201      	movs	r2, #1
 8000836:	2102      	movs	r1, #2
 8000838:	480e      	ldr	r0, [pc, #56]	@ (8000874 <main+0x7c>)
 800083a:	f002 fe37 	bl	80034ac <HAL_GPIO_WritePin>

	SSD1306_Init();
 800083e:	f000 fcd1 	bl	80011e4 <SSD1306_Init>

	//Inicializacion de protocolo
	initComm(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 8000842:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <main+0x80>)
 8000844:	4a0d      	ldr	r2, [pc, #52]	@ (800087c <main+0x84>)
 8000846:	490e      	ldr	r1, [pc, #56]	@ (8000880 <main+0x88>)
 8000848:	480e      	ldr	r0, [pc, #56]	@ (8000884 <main+0x8c>)
 800084a:	f000 fc93 	bl	8001174 <initComm>

	//Variables
	ALLFLAGS = RESET;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <main+0x90>)
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	do10ms();
 8000854:	f7ff ff80 	bl	8000758 <do10ms>
		USBTask();
 8000858:	f7ff fee6 	bl	8000628 <USBTask>
		SSD1306Data();
 800085c:	f7ff ffa4 	bl	80007a8 <SSD1306Data>
		SSD1306_UpdateScreen();
 8000860:	f000 fd84 	bl	800136c <SSD1306_UpdateScreen>
	  	do10ms();
 8000864:	bf00      	nop
 8000866:	e7f5      	b.n	8000854 <main+0x5c>
 8000868:	080005cd 	.word	0x080005cd
 800086c:	200002ec 	.word	0x200002ec
 8000870:	40020800 	.word	0x40020800
 8000874:	40020400 	.word	0x40020400
 8000878:	20000370 	.word	0x20000370
 800087c:	20000470 	.word	0x20000470
 8000880:	20000358 	.word	0x20000358
 8000884:	20000364 	.word	0x20000364
 8000888:	20000570 	.word	0x20000570

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b094      	sub	sp, #80	@ 0x50
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0320 	add.w	r3, r7, #32
 8000896:	2230      	movs	r2, #48	@ 0x30
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f00b fe8e 	bl	800c5bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b0:	2300      	movs	r3, #0
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	4b27      	ldr	r3, [pc, #156]	@ (8000954 <SystemClock_Config+0xc8>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b8:	4a26      	ldr	r2, [pc, #152]	@ (8000954 <SystemClock_Config+0xc8>)
 80008ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008be:	6413      	str	r3, [r2, #64]	@ 0x40
 80008c0:	4b24      	ldr	r3, [pc, #144]	@ (8000954 <SystemClock_Config+0xc8>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008cc:	2300      	movs	r3, #0
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <SystemClock_Config+0xcc>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a20      	ldr	r2, [pc, #128]	@ (8000958 <SystemClock_Config+0xcc>)
 80008d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008da:	6013      	str	r3, [r2, #0]
 80008dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <SystemClock_Config+0xcc>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008e8:	2301      	movs	r3, #1
 80008ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f2:	2302      	movs	r3, #2
 80008f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008fc:	2319      	movs	r3, #25
 80008fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000900:	23c0      	movs	r3, #192	@ 0xc0
 8000902:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000904:	2302      	movs	r3, #2
 8000906:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000908:	2304      	movs	r3, #4
 800090a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090c:	f107 0320 	add.w	r3, r7, #32
 8000910:	4618      	mov	r0, r3
 8000912:	f006 fc4d 	bl	80071b0 <HAL_RCC_OscConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800091c:	f000 fa04 	bl	8000d28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	230f      	movs	r3, #15
 8000922:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000924:	2302      	movs	r3, #2
 8000926:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800092c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000930:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	2103      	movs	r1, #3
 800093c:	4618      	mov	r0, r3
 800093e:	f006 feaf 	bl	80076a0 <HAL_RCC_ClockConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000948:	f000 f9ee 	bl	8000d28 <Error_Handler>
  }
}
 800094c:	bf00      	nop
 800094e:	3750      	adds	r7, #80	@ 0x50
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000962:	463b      	mov	r3, r7
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800096e:	4b52      	ldr	r3, [pc, #328]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 8000970:	4a52      	ldr	r2, [pc, #328]	@ (8000abc <MX_ADC1_Init+0x160>)
 8000972:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000974:	4b50      	ldr	r3, [pc, #320]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 8000976:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800097a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800097c:	4b4e      	ldr	r3, [pc, #312]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000982:	4b4d      	ldr	r3, [pc, #308]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 8000984:	2201      	movs	r2, #1
 8000986:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000988:	4b4b      	ldr	r3, [pc, #300]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 800098a:	2200      	movs	r2, #0
 800098c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800098e:	4b4a      	ldr	r3, [pc, #296]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 8000990:	2200      	movs	r2, #0
 8000992:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000996:	4b48      	ldr	r3, [pc, #288]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 8000998:	2200      	movs	r2, #0
 800099a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800099c:	4b46      	ldr	r3, [pc, #280]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 800099e:	4a48      	ldr	r2, [pc, #288]	@ (8000ac0 <MX_ADC1_Init+0x164>)
 80009a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009a2:	4b45      	ldr	r3, [pc, #276]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80009a8:	4b43      	ldr	r3, [pc, #268]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 80009aa:	2208      	movs	r2, #8
 80009ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009ae:	4b42      	ldr	r3, [pc, #264]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009b6:	4b40      	ldr	r3, [pc, #256]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009bc:	483e      	ldr	r0, [pc, #248]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 80009be:	f001 fa13 	bl	8001de8 <HAL_ADC_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009c8:	f000 f9ae 	bl	8000d28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4836      	ldr	r0, [pc, #216]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 80009de:	f001 fc69 	bl	80022b4 <HAL_ADC_ConfigChannel>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009e8:	f000 f99e 	bl	8000d28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	4619      	mov	r1, r3
 80009f8:	482f      	ldr	r0, [pc, #188]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 80009fa:	f001 fc5b 	bl	80022b4 <HAL_ADC_ConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a04:	f000 f990 	bl	8000d28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a10:	463b      	mov	r3, r7
 8000a12:	4619      	mov	r1, r3
 8000a14:	4828      	ldr	r0, [pc, #160]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 8000a16:	f001 fc4d 	bl	80022b4 <HAL_ADC_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000a20:	f000 f982 	bl	8000d28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a24:	2303      	movs	r3, #3
 8000a26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4821      	ldr	r0, [pc, #132]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 8000a32:	f001 fc3f 	bl	80022b4 <HAL_ADC_ConfigChannel>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000a3c:	f000 f974 	bl	8000d28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a40:	2304      	movs	r3, #4
 8000a42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000a44:	2305      	movs	r3, #5
 8000a46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a48:	463b      	mov	r3, r7
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	481a      	ldr	r0, [pc, #104]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 8000a4e:	f001 fc31 	bl	80022b4 <HAL_ADC_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000a58:	f000 f966 	bl	8000d28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a5c:	2305      	movs	r3, #5
 8000a5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000a60:	2306      	movs	r3, #6
 8000a62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4813      	ldr	r0, [pc, #76]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 8000a6a:	f001 fc23 	bl	80022b4 <HAL_ADC_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000a74:	f000 f958 	bl	8000d28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a78:	2306      	movs	r3, #6
 8000a7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000a7c:	2307      	movs	r3, #7
 8000a7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	4619      	mov	r1, r3
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 8000a86:	f001 fc15 	bl	80022b4 <HAL_ADC_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000a90:	f000 f94a 	bl	8000d28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a94:	2307      	movs	r3, #7
 8000a96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000a98:	2308      	movs	r3, #8
 8000a9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	@ (8000ab8 <MX_ADC1_Init+0x15c>)
 8000aa2:	f001 fc07 	bl	80022b4 <HAL_ADC_ConfigChannel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000aac:	f000 f93c 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000130 	.word	0x20000130
 8000abc:	40012000 	.word	0x40012000
 8000ac0:	0f000001 	.word	0x0f000001

08000ac4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000aca:	4a13      	ldr	r2, [pc, #76]	@ (8000b18 <MX_I2C1_Init+0x54>)
 8000acc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ace:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000ad0:	4a12      	ldr	r2, [pc, #72]	@ (8000b1c <MX_I2C1_Init+0x58>)
 8000ad2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000ae2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ae6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aee:	4b09      	ldr	r3, [pc, #36]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af4:	4b07      	ldr	r3, [pc, #28]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000afa:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b00:	4804      	ldr	r0, [pc, #16]	@ (8000b14 <MX_I2C1_Init+0x50>)
 8000b02:	f002 fced 	bl	80034e0 <HAL_I2C_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b0c:	f000 f90c 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	200001d8 	.word	0x200001d8
 8000b18:	40005400 	.word	0x40005400
 8000b1c:	00061a80 	.word	0x00061a80

08000b20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08c      	sub	sp, #48	@ 0x30
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b4c:	4b25      	ldr	r3, [pc, #148]	@ (8000be4 <MX_TIM1_Init+0xc4>)
 8000b4e:	4a26      	ldr	r2, [pc, #152]	@ (8000be8 <MX_TIM1_Init+0xc8>)
 8000b50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8000b52:	4b24      	ldr	r3, [pc, #144]	@ (8000be4 <MX_TIM1_Init+0xc4>)
 8000b54:	225f      	movs	r2, #95	@ 0x5f
 8000b56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b58:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <MX_TIM1_Init+0xc4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000b5e:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <MX_TIM1_Init+0xc4>)
 8000b60:	22f9      	movs	r2, #249	@ 0xf9
 8000b62:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b64:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <MX_TIM1_Init+0xc4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000be4 <MX_TIM1_Init+0xc4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b70:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <MX_TIM1_Init+0xc4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b76:	481b      	ldr	r0, [pc, #108]	@ (8000be4 <MX_TIM1_Init+0xc4>)
 8000b78:	f006 ff5e 	bl	8007a38 <HAL_TIM_Base_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000b82:	f000 f8d1 	bl	8000d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b8a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b8c:	f107 0320 	add.w	r3, r7, #32
 8000b90:	4619      	mov	r1, r3
 8000b92:	4814      	ldr	r0, [pc, #80]	@ (8000be4 <MX_TIM1_Init+0xc4>)
 8000b94:	f007 f8f2 	bl	8007d7c <HAL_TIM_ConfigClockSource>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000b9e:	f000 f8c3 	bl	8000d28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480c      	ldr	r0, [pc, #48]	@ (8000be4 <MX_TIM1_Init+0xc4>)
 8000bb2:	f007 f9aa 	bl	8007f0a <HAL_TIM_SlaveConfigSynchro>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000bbc:	f000 f8b4 	bl	8000d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	@ (8000be4 <MX_TIM1_Init+0xc4>)
 8000bce:	f007 fbb9 	bl	8008344 <HAL_TIMEx_MasterConfigSynchronization>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000bd8:	f000 f8a6 	bl	8000d28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bdc:	bf00      	nop
 8000bde:	3730      	adds	r7, #48	@ 0x30
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200002ec 	.word	0x200002ec
 8000be8:	40010000 	.word	0x40010000

08000bec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c64 <MX_DMA_Init+0x78>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a1a      	ldr	r2, [pc, #104]	@ (8000c64 <MX_DMA_Init+0x78>)
 8000bfc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b18      	ldr	r3, [pc, #96]	@ (8000c64 <MX_DMA_Init+0x78>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <MX_DMA_Init+0x78>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a13      	ldr	r2, [pc, #76]	@ (8000c64 <MX_DMA_Init+0x78>)
 8000c18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b11      	ldr	r3, [pc, #68]	@ (8000c64 <MX_DMA_Init+0x78>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	200b      	movs	r0, #11
 8000c30:	f001 fed5 	bl	80029de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c34:	200b      	movs	r0, #11
 8000c36:	f001 feee 	bl	8002a16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	200c      	movs	r0, #12
 8000c40:	f001 fecd 	bl	80029de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c44:	200c      	movs	r0, #12
 8000c46:	f001 fee6 	bl	8002a16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	2038      	movs	r0, #56	@ 0x38
 8000c50:	f001 fec5 	bl	80029de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c54:	2038      	movs	r0, #56	@ 0x38
 8000c56:	f001 fede 	bl	8002a16 <HAL_NVIC_EnableIRQ>

}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800

08000c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	@ 0x28
 8000c6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6e:	f107 0314 	add.w	r3, r7, #20
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b27      	ldr	r3, [pc, #156]	@ (8000d20 <MX_GPIO_Init+0xb8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a26      	ldr	r2, [pc, #152]	@ (8000d20 <MX_GPIO_Init+0xb8>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b24      	ldr	r3, [pc, #144]	@ (8000d20 <MX_GPIO_Init+0xb8>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b20      	ldr	r3, [pc, #128]	@ (8000d20 <MX_GPIO_Init+0xb8>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8000d20 <MX_GPIO_Init+0xb8>)
 8000ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <MX_GPIO_Init+0xb8>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
 8000cba:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <MX_GPIO_Init+0xb8>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a18      	ldr	r2, [pc, #96]	@ (8000d20 <MX_GPIO_Init+0xb8>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <MX_GPIO_Init+0xb8>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <MX_GPIO_Init+0xb8>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a11      	ldr	r2, [pc, #68]	@ (8000d20 <MX_GPIO_Init+0xb8>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_GPIO_Init+0xb8>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cf4:	480b      	ldr	r0, [pc, #44]	@ (8000d24 <MX_GPIO_Init+0xbc>)
 8000cf6:	f002 fbd9 	bl	80034ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cfa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	4804      	ldr	r0, [pc, #16]	@ (8000d24 <MX_GPIO_Init+0xbc>)
 8000d14:	f002 fa46 	bl	80031a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	@ 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020800 	.word	0x40020800

08000d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d2c:	b672      	cpsid	i
}
 8000d2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <Error_Handler+0x8>

08000d34 <putHeaderOnTx>:


//Function definitions

uint8_t putHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	70fb      	strb	r3, [r7, #3]
 8000d40:	4613      	mov	r3, r2
 8000d42:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 8000d44:	78bb      	ldrb	r3, [r7, #2]
 8000d46:	3301      	adds	r3, #1
 8000d48:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	795a      	ldrb	r2, [r3, #5]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	795b      	ldrb	r3, [r3, #5]
 8000d60:	1c59      	adds	r1, r3, #1
 8000d62:	b2c8      	uxtb	r0, r1
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	7148      	strb	r0, [r1, #5]
 8000d68:	4413      	add	r3, r2
 8000d6a:	2255      	movs	r2, #85	@ 0x55
 8000d6c:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	795a      	ldrb	r2, [r3, #5]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	799b      	ldrb	r3, [r3, #6]
 8000d76:	4013      	ands	r3, r2
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	795b      	ldrb	r3, [r3, #5]
 8000d86:	1c59      	adds	r1, r3, #1
 8000d88:	b2c8      	uxtb	r0, r1
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	7148      	strb	r0, [r1, #5]
 8000d8e:	4413      	add	r3, r2
 8000d90:	224e      	movs	r2, #78	@ 0x4e
 8000d92:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	795a      	ldrb	r2, [r3, #5]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	799b      	ldrb	r3, [r3, #6]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	795b      	ldrb	r3, [r3, #5]
 8000dac:	1c59      	adds	r1, r3, #1
 8000dae:	b2c8      	uxtb	r0, r1
 8000db0:	6879      	ldr	r1, [r7, #4]
 8000db2:	7148      	strb	r0, [r1, #5]
 8000db4:	4413      	add	r3, r2
 8000db6:	2245      	movs	r2, #69	@ 0x45
 8000db8:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	795a      	ldrb	r2, [r3, #5]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	799b      	ldrb	r3, [r3, #6]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	795b      	ldrb	r3, [r3, #5]
 8000dd2:	1c59      	adds	r1, r3, #1
 8000dd4:	b2c8      	uxtb	r0, r1
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	7148      	strb	r0, [r1, #5]
 8000dda:	4413      	add	r3, r2
 8000ddc:	2252      	movs	r2, #82	@ 0x52
 8000dde:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	795a      	ldrb	r2, [r3, #5]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	799b      	ldrb	r3, [r3, #6]
 8000de8:	4013      	ands	r3, r2
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	795b      	ldrb	r3, [r3, #5]
 8000df8:	1c59      	adds	r1, r3, #1
 8000dfa:	b2c8      	uxtb	r0, r1
 8000dfc:	6879      	ldr	r1, [r7, #4]
 8000dfe:	7148      	strb	r0, [r1, #5]
 8000e00:	4413      	add	r3, r2
 8000e02:	78ba      	ldrb	r2, [r7, #2]
 8000e04:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	795a      	ldrb	r2, [r3, #5]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	799b      	ldrb	r3, [r3, #6]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	795b      	ldrb	r3, [r3, #5]
 8000e1e:	1c59      	adds	r1, r3, #1
 8000e20:	b2c8      	uxtb	r0, r1
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	7148      	strb	r0, [r1, #5]
 8000e26:	4413      	add	r3, r2
 8000e28:	223a      	movs	r2, #58	@ 0x3a
 8000e2a:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	795a      	ldrb	r2, [r3, #5]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	799b      	ldrb	r3, [r3, #6]
 8000e34:	4013      	ands	r3, r2
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	795b      	ldrb	r3, [r3, #5]
 8000e44:	1c59      	adds	r1, r3, #1
 8000e46:	b2c8      	uxtb	r0, r1
 8000e48:	6879      	ldr	r1, [r7, #4]
 8000e4a:	7148      	strb	r0, [r1, #5]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	78fa      	ldrb	r2, [r7, #3]
 8000e50:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	795a      	ldrb	r2, [r3, #5]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	799b      	ldrb	r3, [r3, #6]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2207      	movs	r2, #7
 8000e66:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	7a5a      	ldrb	r2, [r3, #9]
 8000e6c:	78b9      	ldrb	r1, [r7, #2]
 8000e6e:	78fb      	ldrb	r3, [r7, #3]
 8000e70:	404b      	eors	r3, r1
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	4053      	eors	r3, r2
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7a5b      	ldrb	r3, [r3, #9]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <putByteOnTx>:

uint8_t putByteOnTx(_sTx *dataTx, uint8_t byte)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	79db      	ldrb	r3, [r3, #7]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	795b      	ldrb	r3, [r3, #5]
 8000eb2:	1c59      	adds	r1, r3, #1
 8000eb4:	b2c8      	uxtb	r0, r1
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	7148      	strb	r0, [r1, #5]
 8000eba:	4413      	add	r3, r2
 8000ebc:	78fa      	ldrb	r2, [r7, #3]
 8000ebe:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	795a      	ldrb	r2, [r3, #5]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	799b      	ldrb	r3, [r3, #6]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7a5a      	ldrb	r2, [r3, #9]
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	4053      	eors	r3, r2
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	7a5b      	ldrb	r3, [r3, #9]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <putStrOntx>:

uint8_t putStrOntx(_sTx *dataTx, const char *str)
{
 8000eee:	b490      	push	{r4, r7}
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 8000efc:	e02c      	b.n	8000f58 <putStrOntx+0x6a>
    	dataTx->bytes++;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	79db      	ldrb	r3, [r3, #7]
 8000f02:	3301      	adds	r3, #1
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	461a      	mov	r2, r3
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	441a      	add	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6819      	ldr	r1, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	795b      	ldrb	r3, [r3, #5]
 8000f1c:	1c58      	adds	r0, r3, #1
 8000f1e:	b2c4      	uxtb	r4, r0
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	7144      	strb	r4, [r0, #5]
 8000f24:	440b      	add	r3, r1
 8000f26:	7812      	ldrb	r2, [r2, #0]
 8000f28:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	795a      	ldrb	r2, [r3, #5]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	799b      	ldrb	r3, [r3, #6]
 8000f32:	4013      	ands	r3, r2
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	73fa      	strb	r2, [r7, #15]
 8000f44:	461a      	mov	r2, r3
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	4413      	add	r3, r2
 8000f4a:	781a      	ldrb	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	7a5b      	ldrb	r3, [r3, #9]
 8000f50:	4053      	eors	r3, r2
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	4413      	add	r3, r2
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1ca      	bne.n	8000efe <putStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	7a5b      	ldrb	r3, [r3, #9]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc90      	pop	{r4, r7}
 8000f74:	4770      	bx	lr
	...

08000f78 <decodeHeader>:
	return getByte;
}


uint8_t decodeHeader(_sTx *dataRx)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	795b      	ldrb	r3, [r3, #5]
 8000f88:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 8000f8a:	e0e4      	b.n	8001156 <decodeHeader+0x1de>
        switch(header)
 8000f8c:	4b78      	ldr	r3, [pc, #480]	@ (8001170 <decodeHeader+0x1f8>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b07      	cmp	r3, #7
 8000f92:	f200 80c9 	bhi.w	8001128 <decodeHeader+0x1b0>
 8000f96:	a201      	add	r2, pc, #4	@ (adr r2, 8000f9c <decodeHeader+0x24>)
 8000f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9c:	08000fbd 	.word	0x08000fbd
 8000fa0:	08000fd7 	.word	0x08000fd7
 8000fa4:	08001015 	.word	0x08001015
 8000fa8:	08001041 	.word	0x08001041
 8000fac:	0800106d 	.word	0x0800106d
 8000fb0:	08001083 	.word	0x08001083
 8000fb4:	08001129 	.word	0x08001129
 8000fb8:	080010e5 	.word	0x080010e5
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	7912      	ldrb	r2, [r2, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b55      	cmp	r3, #85	@ 0x55
 8000fca:	f040 80b1 	bne.w	8001130 <decodeHeader+0x1b8>
                   header = HEADER_N;
 8000fce:	4b68      	ldr	r3, [pc, #416]	@ (8001170 <decodeHeader+0x1f8>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
                }
            break;
 8000fd4:	e0ac      	b.n	8001130 <decodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	7912      	ldrb	r2, [r2, #4]
 8000fde:	4413      	add	r3, r2
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b4e      	cmp	r3, #78	@ 0x4e
 8000fe4:	d103      	bne.n	8000fee <decodeHeader+0x76>
                    header = HEADER_E;
 8000fe6:	4b62      	ldr	r3, [pc, #392]	@ (8001170 <decodeHeader+0x1f8>)
 8000fe8:	2202      	movs	r2, #2
 8000fea:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 8000fec:	e0a2      	b.n	8001134 <decodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	7912      	ldrb	r2, [r2, #4]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b55      	cmp	r3, #85	@ 0x55
 8000ffc:	f000 809a 	beq.w	8001134 <decodeHeader+0x1bc>
                    	header = HEADER_U;
 8001000:	4b5b      	ldr	r3, [pc, #364]	@ (8001170 <decodeHeader+0x1f8>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	791b      	ldrb	r3, [r3, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	b2da      	uxtb	r2, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	711a      	strb	r2, [r3, #4]
            break;
 8001012:	e08f      	b.n	8001134 <decodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	7912      	ldrb	r2, [r2, #4]
 800101c:	4413      	add	r3, r2
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b45      	cmp	r3, #69	@ 0x45
 8001022:	d103      	bne.n	800102c <decodeHeader+0xb4>
                    header = HEADER_R;
 8001024:	4b52      	ldr	r3, [pc, #328]	@ (8001170 <decodeHeader+0x1f8>)
 8001026:	2203      	movs	r2, #3
 8001028:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 800102a:	e086      	b.n	800113a <decodeHeader+0x1c2>
                    header = HEADER_U;
 800102c:	4b50      	ldr	r3, [pc, #320]	@ (8001170 <decodeHeader+0x1f8>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	791b      	ldrb	r3, [r3, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	b2da      	uxtb	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	711a      	strb	r2, [r3, #4]
            break;
 800103e:	e07c      	b.n	800113a <decodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	7912      	ldrb	r2, [r2, #4]
 8001048:	4413      	add	r3, r2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b52      	cmp	r3, #82	@ 0x52
 800104e:	d103      	bne.n	8001058 <decodeHeader+0xe0>
                    header = NBYTES;
 8001050:	4b47      	ldr	r3, [pc, #284]	@ (8001170 <decodeHeader+0x1f8>)
 8001052:	2204      	movs	r2, #4
 8001054:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8001056:	e070      	b.n	800113a <decodeHeader+0x1c2>
                    header = HEADER_U;
 8001058:	4b45      	ldr	r3, [pc, #276]	@ (8001170 <decodeHeader+0x1f8>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	791b      	ldrb	r3, [r3, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	b2da      	uxtb	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	711a      	strb	r2, [r3, #4]
            break;
 800106a:	e066      	b.n	800113a <decodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	7912      	ldrb	r2, [r2, #4]
 8001074:	4413      	add	r3, r2
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 800107a:	4b3d      	ldr	r3, [pc, #244]	@ (8001170 <decodeHeader+0x1f8>)
 800107c:	2205      	movs	r2, #5
 800107e:	701a      	strb	r2, [r3, #0]
            break;
 8001080:	e05b      	b.n	800113a <decodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	7912      	ldrb	r2, [r2, #4]
 800108a:	4413      	add	r3, r2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b3a      	cmp	r3, #58	@ 0x3a
 8001090:	d11e      	bne.n	80010d0 <decodeHeader+0x158>
                    header = PAYLOAD;
 8001092:	4b37      	ldr	r3, [pc, #220]	@ (8001170 <decodeHeader+0x1f8>)
 8001094:	2207      	movs	r2, #7
 8001096:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	791b      	ldrb	r3, [r3, #4]
 800109c:	3301      	adds	r3, #1
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	7a1a      	ldrb	r2, [r3, #8]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	799b      	ldrb	r3, [r3, #6]
 80010ac:	4013      	ands	r3, r2
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7a5a      	ldrb	r2, [r3, #9]
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	4053      	eors	r3, r2
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 80010ce:	e034      	b.n	800113a <decodeHeader+0x1c2>
                    header = HEADER_U;
 80010d0:	4b27      	ldr	r3, [pc, #156]	@ (8001170 <decodeHeader+0x1f8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	791b      	ldrb	r3, [r3, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	711a      	strb	r2, [r3, #4]
            break;
 80010e2:	e02a      	b.n	800113a <decodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00c      	beq.n	800110a <decodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	7a5a      	ldrb	r2, [r3, #9]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	7909      	ldrb	r1, [r1, #4]
 80010fc:	440b      	add	r3, r1
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4053      	eors	r3, r2
 8001102:	b2da      	uxtb	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 8001108:	e016      	b.n	8001138 <decodeHeader+0x1c0>
                    header = HEADER_U;
 800110a:	4b19      	ldr	r3, [pc, #100]	@ (8001170 <decodeHeader+0x1f8>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	7912      	ldrb	r2, [r2, #4]
 8001118:	4413      	add	r3, r2
 800111a:	781a      	ldrb	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	7a5b      	ldrb	r3, [r3, #9]
 8001120:	429a      	cmp	r2, r3
 8001122:	d109      	bne.n	8001138 <decodeHeader+0x1c0>
                        return TRUE;
 8001124:	2301      	movs	r3, #1
 8001126:	e01d      	b.n	8001164 <decodeHeader+0x1ec>
            default:
                header = HEADER_U;
 8001128:	4b11      	ldr	r3, [pc, #68]	@ (8001170 <decodeHeader+0x1f8>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
            break;
 800112e:	e004      	b.n	800113a <decodeHeader+0x1c2>
            break;
 8001130:	bf00      	nop
 8001132:	e002      	b.n	800113a <decodeHeader+0x1c2>
            break;
 8001134:	bf00      	nop
 8001136:	e000      	b.n	800113a <decodeHeader+0x1c2>
            break;
 8001138:	bf00      	nop
        }
        dataRx->indexR++;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	791b      	ldrb	r3, [r3, #4]
 800113e:	3301      	adds	r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	791a      	ldrb	r2, [r3, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	799b      	ldrb	r3, [r3, #6]
 800114e:	4013      	ands	r3, r2
 8001150:	b2da      	uxtb	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	791b      	ldrb	r3, [r3, #4]
 800115a:	7bba      	ldrb	r2, [r7, #14]
 800115c:	429a      	cmp	r2, r3
 800115e:	f47f af15 	bne.w	8000f8c <decodeHeader+0x14>
    }
    return FALSE;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	20000572 	.word	0x20000572

08001174 <initComm>:

void initComm(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	603b      	str	r3, [r7, #0]
    //INICIALIZAMOS VARIABLES
	Rx->buff = (uint8_t *)buffRx;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2200      	movs	r2, #0
 800118c:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2200      	movs	r2, #0
 8001198:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2200      	movs	r2, #0
 800119e:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	22ff      	movs	r2, #255	@ 0xff
 80011a4:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2200      	movs	r2, #0
 80011aa:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	2200      	movs	r2, #0
 80011b6:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2200      	movs	r2, #0
 80011bc:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	2200      	movs	r2, #0
 80011c2:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	2200      	movs	r2, #0
 80011c8:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	22ff      	movs	r2, #255	@ 0xff
 80011ce:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	2200      	movs	r2, #0
 80011d4:	725a      	strb	r2, [r3, #9]

}
 80011d6:	bf00      	nop
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <SSD1306_Init>:
        }
    }
}

uint8_t SSD1306_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
	SSD1306_I2C_Init();
 80011ea:	f000 fa4d 	bl	8001688 <SSD1306_I2C_Init>
	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK){
 80011ee:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80011f2:	2201      	movs	r2, #1
 80011f4:	2178      	movs	r1, #120	@ 0x78
 80011f6:	485b      	ldr	r0, [pc, #364]	@ (8001364 <SSD1306_Init+0x180>)
 80011f8:	f002 fc2a 	bl	8003a50 <HAL_I2C_IsDeviceReady>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SSD1306_Init+0x22>
		return 0;
 8001202:	2300      	movs	r3, #0
 8001204:	e0a9      	b.n	800135a <SSD1306_Init+0x176>
	}

	uint32_t p = 2500;
 8001206:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800120a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800120c:	e002      	b.n	8001214 <SSD1306_Init+0x30>
		p--;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3b01      	subs	r3, #1
 8001212:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f9      	bne.n	800120e <SSD1306_Init+0x2a>

	SSD1306_WRITECOMMAND(0xAE);
 800121a:	22ae      	movs	r2, #174	@ 0xae
 800121c:	2100      	movs	r1, #0
 800121e:	2078      	movs	r0, #120	@ 0x78
 8001220:	f000 fab0 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8001224:	2220      	movs	r2, #32
 8001226:	2100      	movs	r1, #0
 8001228:	2078      	movs	r0, #120	@ 0x78
 800122a:	f000 faab 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 800122e:	2210      	movs	r2, #16
 8001230:	2100      	movs	r1, #0
 8001232:	2078      	movs	r0, #120	@ 0x78
 8001234:	f000 faa6 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 8001238:	22b0      	movs	r2, #176	@ 0xb0
 800123a:	2100      	movs	r1, #0
 800123c:	2078      	movs	r0, #120	@ 0x78
 800123e:	f000 faa1 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 8001242:	22c8      	movs	r2, #200	@ 0xc8
 8001244:	2100      	movs	r1, #0
 8001246:	2078      	movs	r0, #120	@ 0x78
 8001248:	f000 fa9c 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	2078      	movs	r0, #120	@ 0x78
 8001252:	f000 fa97 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001256:	2210      	movs	r2, #16
 8001258:	2100      	movs	r1, #0
 800125a:	2078      	movs	r0, #120	@ 0x78
 800125c:	f000 fa92 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 8001260:	2240      	movs	r2, #64	@ 0x40
 8001262:	2100      	movs	r1, #0
 8001264:	2078      	movs	r0, #120	@ 0x78
 8001266:	f000 fa8d 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 800126a:	2281      	movs	r2, #129	@ 0x81
 800126c:	2100      	movs	r1, #0
 800126e:	2078      	movs	r0, #120	@ 0x78
 8001270:	f000 fa88 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001274:	22ff      	movs	r2, #255	@ 0xff
 8001276:	2100      	movs	r1, #0
 8001278:	2078      	movs	r0, #120	@ 0x78
 800127a:	f000 fa83 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 800127e:	22a1      	movs	r2, #161	@ 0xa1
 8001280:	2100      	movs	r1, #0
 8001282:	2078      	movs	r0, #120	@ 0x78
 8001284:	f000 fa7e 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 8001288:	22a6      	movs	r2, #166	@ 0xa6
 800128a:	2100      	movs	r1, #0
 800128c:	2078      	movs	r0, #120	@ 0x78
 800128e:	f000 fa79 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 8001292:	22a8      	movs	r2, #168	@ 0xa8
 8001294:	2100      	movs	r1, #0
 8001296:	2078      	movs	r0, #120	@ 0x78
 8001298:	f000 fa74 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 800129c:	223f      	movs	r2, #63	@ 0x3f
 800129e:	2100      	movs	r1, #0
 80012a0:	2078      	movs	r0, #120	@ 0x78
 80012a2:	f000 fa6f 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 80012a6:	22a4      	movs	r2, #164	@ 0xa4
 80012a8:	2100      	movs	r1, #0
 80012aa:	2078      	movs	r0, #120	@ 0x78
 80012ac:	f000 fa6a 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 80012b0:	22d3      	movs	r2, #211	@ 0xd3
 80012b2:	2100      	movs	r1, #0
 80012b4:	2078      	movs	r0, #120	@ 0x78
 80012b6:	f000 fa65 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2100      	movs	r1, #0
 80012be:	2078      	movs	r0, #120	@ 0x78
 80012c0:	f000 fa60 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 80012c4:	22d5      	movs	r2, #213	@ 0xd5
 80012c6:	2100      	movs	r1, #0
 80012c8:	2078      	movs	r0, #120	@ 0x78
 80012ca:	f000 fa5b 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 80012ce:	22f0      	movs	r2, #240	@ 0xf0
 80012d0:	2100      	movs	r1, #0
 80012d2:	2078      	movs	r0, #120	@ 0x78
 80012d4:	f000 fa56 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 80012d8:	22d9      	movs	r2, #217	@ 0xd9
 80012da:	2100      	movs	r1, #0
 80012dc:	2078      	movs	r0, #120	@ 0x78
 80012de:	f000 fa51 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 80012e2:	2222      	movs	r2, #34	@ 0x22
 80012e4:	2100      	movs	r1, #0
 80012e6:	2078      	movs	r0, #120	@ 0x78
 80012e8:	f000 fa4c 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 80012ec:	22da      	movs	r2, #218	@ 0xda
 80012ee:	2100      	movs	r1, #0
 80012f0:	2078      	movs	r0, #120	@ 0x78
 80012f2:	f000 fa47 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80012f6:	2212      	movs	r2, #18
 80012f8:	2100      	movs	r1, #0
 80012fa:	2078      	movs	r0, #120	@ 0x78
 80012fc:	f000 fa42 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 8001300:	22db      	movs	r2, #219	@ 0xdb
 8001302:	2100      	movs	r1, #0
 8001304:	2078      	movs	r0, #120	@ 0x78
 8001306:	f000 fa3d 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 800130a:	2220      	movs	r2, #32
 800130c:	2100      	movs	r1, #0
 800130e:	2078      	movs	r0, #120	@ 0x78
 8001310:	f000 fa38 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 8001314:	228d      	movs	r2, #141	@ 0x8d
 8001316:	2100      	movs	r1, #0
 8001318:	2078      	movs	r0, #120	@ 0x78
 800131a:	f000 fa33 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 800131e:	2214      	movs	r2, #20
 8001320:	2100      	movs	r1, #0
 8001322:	2078      	movs	r0, #120	@ 0x78
 8001324:	f000 fa2e 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 8001328:	22af      	movs	r2, #175	@ 0xaf
 800132a:	2100      	movs	r1, #0
 800132c:	2078      	movs	r0, #120	@ 0x78
 800132e:	f000 fa29 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001332:	222e      	movs	r2, #46	@ 0x2e
 8001334:	2100      	movs	r1, #0
 8001336:	2078      	movs	r0, #120	@ 0x78
 8001338:	f000 fa24 	bl	8001784 <SSD1306_I2C_Write>
	SSD1306_Fill(BLACK);
 800133c:	2000      	movs	r0, #0
 800133e:	f000 f871 	bl	8001424 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8001342:	f000 f813 	bl	800136c <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 8001346:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <SSD1306_Init+0x184>)
 8001348:	2200      	movs	r2, #0
 800134a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <SSD1306_Init+0x184>)
 800134e:	2200      	movs	r2, #0
 8001350:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8001352:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <SSD1306_Init+0x184>)
 8001354:	2201      	movs	r2, #1
 8001356:	715a      	strb	r2, [r3, #5]
	return 1;
 8001358:	2301      	movs	r3, #1
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200001d8 	.word	0x200001d8
 8001368:	20000974 	.word	0x20000974

0800136c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
	static uint8_t current_page = 0;
	static uint8_t state = 1;

	// Only proceed if I2C is ready or we're starting a new transaction
	if (SSD1306_TxCplt || state == 1) {
 8001370:	4b28      	ldr	r3, [pc, #160]	@ (8001414 <SSD1306_UpdateScreen+0xa8>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d103      	bne.n	8001382 <SSD1306_UpdateScreen+0x16>
 800137a:	4b27      	ldr	r3, [pc, #156]	@ (8001418 <SSD1306_UpdateScreen+0xac>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d146      	bne.n	8001410 <SSD1306_UpdateScreen+0xa4>
		SSD1306_TxCplt = 0;  // Reset completion flag
 8001382:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <SSD1306_UpdateScreen+0xa8>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]

		switch (state) {
 8001388:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <SSD1306_UpdateScreen+0xac>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	3b01      	subs	r3, #1
 800138e:	2b03      	cmp	r3, #3
 8001390:	d83e      	bhi.n	8001410 <SSD1306_UpdateScreen+0xa4>
 8001392:	a201      	add	r2, pc, #4	@ (adr r2, 8001398 <SSD1306_UpdateScreen+0x2c>)
 8001394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001398:	080013a9 	.word	0x080013a9
 800139c:	080013c3 	.word	0x080013c3
 80013a0:	080013d5 	.word	0x080013d5
 80013a4:	080013e7 	.word	0x080013e7
		case 1:  // Set page address
			SSD1306_WRITECOMMAND(0xB0 + current_page);
 80013a8:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <SSD1306_UpdateScreen+0xb0>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	3b50      	subs	r3, #80	@ 0x50
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	461a      	mov	r2, r3
 80013b2:	2100      	movs	r1, #0
 80013b4:	2078      	movs	r0, #120	@ 0x78
 80013b6:	f000 f9e5 	bl	8001784 <SSD1306_I2C_Write>
			state = 2;
 80013ba:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <SSD1306_UpdateScreen+0xac>)
 80013bc:	2202      	movs	r2, #2
 80013be:	701a      	strb	r2, [r3, #0]
			break;
 80013c0:	e026      	b.n	8001410 <SSD1306_UpdateScreen+0xa4>
		case 2:  // Set column address low nibble
			SSD1306_WRITECOMMAND(0x00);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	2078      	movs	r0, #120	@ 0x78
 80013c8:	f000 f9dc 	bl	8001784 <SSD1306_I2C_Write>
			state = 3;
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <SSD1306_UpdateScreen+0xac>)
 80013ce:	2203      	movs	r2, #3
 80013d0:	701a      	strb	r2, [r3, #0]
			break;
 80013d2:	e01d      	b.n	8001410 <SSD1306_UpdateScreen+0xa4>
		case 3:  // Set column address high nibble
			SSD1306_WRITECOMMAND(0x10);
 80013d4:	2210      	movs	r2, #16
 80013d6:	2100      	movs	r1, #0
 80013d8:	2078      	movs	r0, #120	@ 0x78
 80013da:	f000 f9d3 	bl	8001784 <SSD1306_I2C_Write>
			state = 4;
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <SSD1306_UpdateScreen+0xac>)
 80013e0:	2204      	movs	r2, #4
 80013e2:	701a      	strb	r2, [r3, #0]
			break;
 80013e4:	e014      	b.n	8001410 <SSD1306_UpdateScreen+0xa4>
		case 4:  // Write page data
			SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40,
					&SSD1306_Buffer[SSD1306_WIDTH * current_page],
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <SSD1306_UpdateScreen+0xb0>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	01db      	lsls	r3, r3, #7
			SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40,
 80013ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001420 <SSD1306_UpdateScreen+0xb4>)
 80013ee:	441a      	add	r2, r3
 80013f0:	2380      	movs	r3, #128	@ 0x80
 80013f2:	2140      	movs	r1, #64	@ 0x40
 80013f4:	2078      	movs	r0, #120	@ 0x78
 80013f6:	f000 f95d 	bl	80016b4 <SSD1306_I2C_WriteMulti>
					SSD1306_WIDTH);
			//current_page++;
			if (current_page >= 8) {
 80013fa:	4b08      	ldr	r3, [pc, #32]	@ (800141c <SSD1306_UpdateScreen+0xb0>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b07      	cmp	r3, #7
 8001400:	d902      	bls.n	8001408 <SSD1306_UpdateScreen+0x9c>
				current_page = 0;
 8001402:	4b06      	ldr	r3, [pc, #24]	@ (800141c <SSD1306_UpdateScreen+0xb0>)
 8001404:	2200      	movs	r2, #0
 8001406:	701a      	strb	r2, [r3, #0]
			}
			state = 1;  // Start over with next page
 8001408:	4b03      	ldr	r3, [pc, #12]	@ (8001418 <SSD1306_UpdateScreen+0xac>)
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
			break;
 800140e:	bf00      	nop
		}
	}
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000571 	.word	0x20000571
 8001418:	2000000c 	.word	0x2000000c
 800141c:	2000097a 	.word	0x2000097a
 8001420:	20000574 	.word	0x20000574

08001424 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d101      	bne.n	8001438 <SSD1306_Fill+0x14>
 8001434:	2300      	movs	r3, #0
 8001436:	e000      	b.n	800143a <SSD1306_Fill+0x16>
 8001438:	23ff      	movs	r3, #255	@ 0xff
 800143a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800143e:	4619      	mov	r1, r3
 8001440:	4803      	ldr	r0, [pc, #12]	@ (8001450 <SSD1306_Fill+0x2c>)
 8001442:	f00b f8bb 	bl	800c5bc <memset>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000574 	.word	0x20000574

08001454 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	80fb      	strh	r3, [r7, #6]
 800145e:	460b      	mov	r3, r1
 8001460:	80bb      	strh	r3, [r7, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	2b7f      	cmp	r3, #127	@ 0x7f
 800146a:	d848      	bhi.n	80014fe <SSD1306_DrawPixel+0xaa>
 800146c:	88bb      	ldrh	r3, [r7, #4]
 800146e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001470:	d845      	bhi.n	80014fe <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 8001472:	4b26      	ldr	r3, [pc, #152]	@ (800150c <SSD1306_DrawPixel+0xb8>)
 8001474:	791b      	ldrb	r3, [r3, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d006      	beq.n	8001488 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800147a:	78fb      	ldrb	r3, [r7, #3]
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	70fb      	strb	r3, [r7, #3]
	}

	if(color == WHITE){
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d11a      	bne.n	80014c4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800148e:	88fa      	ldrh	r2, [r7, #6]
 8001490:	88bb      	ldrh	r3, [r7, #4]
 8001492:	08db      	lsrs	r3, r3, #3
 8001494:	b298      	uxth	r0, r3
 8001496:	4603      	mov	r3, r0
 8001498:	01db      	lsls	r3, r3, #7
 800149a:	4413      	add	r3, r2
 800149c:	4a1c      	ldr	r2, [pc, #112]	@ (8001510 <SSD1306_DrawPixel+0xbc>)
 800149e:	5cd3      	ldrb	r3, [r2, r3]
 80014a0:	b25a      	sxtb	r2, r3
 80014a2:	88bb      	ldrh	r3, [r7, #4]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	2101      	movs	r1, #1
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	b25b      	sxtb	r3, r3
 80014b0:	4313      	orrs	r3, r2
 80014b2:	b259      	sxtb	r1, r3
 80014b4:	88fa      	ldrh	r2, [r7, #6]
 80014b6:	4603      	mov	r3, r0
 80014b8:	01db      	lsls	r3, r3, #7
 80014ba:	4413      	add	r3, r2
 80014bc:	b2c9      	uxtb	r1, r1
 80014be:	4a14      	ldr	r2, [pc, #80]	@ (8001510 <SSD1306_DrawPixel+0xbc>)
 80014c0:	54d1      	strb	r1, [r2, r3]
 80014c2:	e01d      	b.n	8001500 <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80014c4:	88fa      	ldrh	r2, [r7, #6]
 80014c6:	88bb      	ldrh	r3, [r7, #4]
 80014c8:	08db      	lsrs	r3, r3, #3
 80014ca:	b298      	uxth	r0, r3
 80014cc:	4603      	mov	r3, r0
 80014ce:	01db      	lsls	r3, r3, #7
 80014d0:	4413      	add	r3, r2
 80014d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001510 <SSD1306_DrawPixel+0xbc>)
 80014d4:	5cd3      	ldrb	r3, [r2, r3]
 80014d6:	b25a      	sxtb	r2, r3
 80014d8:	88bb      	ldrh	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	2101      	movs	r1, #1
 80014e0:	fa01 f303 	lsl.w	r3, r1, r3
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	b25b      	sxtb	r3, r3
 80014ea:	4013      	ands	r3, r2
 80014ec:	b259      	sxtb	r1, r3
 80014ee:	88fa      	ldrh	r2, [r7, #6]
 80014f0:	4603      	mov	r3, r0
 80014f2:	01db      	lsls	r3, r3, #7
 80014f4:	4413      	add	r3, r2
 80014f6:	b2c9      	uxtb	r1, r1
 80014f8:	4a05      	ldr	r2, [pc, #20]	@ (8001510 <SSD1306_DrawPixel+0xbc>)
 80014fa:	54d1      	strb	r1, [r2, r3]
 80014fc:	e000      	b.n	8001500 <SSD1306_DrawPixel+0xac>
		return;
 80014fe:	bf00      	nop
	}
}
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000974 	.word	0x20000974
 8001510:	20000574 	.word	0x20000574

08001514 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	460a      	mov	r2, r1
 800151e:	80fb      	strh	r3, [r7, #6]
 8001520:	4613      	mov	r3, r2
 8001522:	80bb      	strh	r3, [r7, #4]
	SSD1306.CurrentX = x;
 8001524:	4a05      	ldr	r2, [pc, #20]	@ (800153c <SSD1306_GotoXY+0x28>)
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800152a:	4a04      	ldr	r2, [pc, #16]	@ (800153c <SSD1306_GotoXY+0x28>)
 800152c:	88bb      	ldrh	r3, [r7, #4]
 800152e:	8053      	strh	r3, [r2, #2]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	20000974 	.word	0x20000974

08001540 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
 800154c:	4613      	mov	r3, r2
 800154e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	if(SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)){
 8001550:	4b39      	ldr	r3, [pc, #228]	@ (8001638 <SSD1306_Putc+0xf8>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	2b7f      	cmp	r3, #127	@ 0x7f
 800155e:	dc07      	bgt.n	8001570 <SSD1306_Putc+0x30>
 8001560:	4b35      	ldr	r3, [pc, #212]	@ (8001638 <SSD1306_Putc+0xf8>)
 8001562:	885b      	ldrh	r3, [r3, #2]
 8001564:	461a      	mov	r2, r3
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	785b      	ldrb	r3, [r3, #1]
 800156a:	4413      	add	r3, r2
 800156c:	2b3f      	cmp	r3, #63	@ 0x3f
 800156e:	dd01      	ble.n	8001574 <SSD1306_Putc+0x34>
		return 0;
 8001570:	2300      	movs	r3, #0
 8001572:	e05d      	b.n	8001630 <SSD1306_Putc+0xf0>
	}

	for(i=0; i<Font->FontHeight; i++){
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	e04b      	b.n	8001612 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	3b20      	subs	r3, #32
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	7849      	ldrb	r1, [r1, #1]
 8001586:	fb01 f303 	mul.w	r3, r1, r3
 800158a:	4619      	mov	r1, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	440b      	add	r3, r1
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	60fb      	str	r3, [r7, #12]
		for(j=0; j<Font->FontWidth; j++){
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	e030      	b.n	8001600 <SSD1306_Putc+0xc0>
			if((b << j) & 0x8000){
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d010      	beq.n	80015d0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80015ae:	4b22      	ldr	r3, [pc, #136]	@ (8001638 <SSD1306_Putc+0xf8>)
 80015b0:	881a      	ldrh	r2, [r3, #0]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	4413      	add	r3, r2
 80015b8:	b298      	uxth	r0, r3
 80015ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <SSD1306_Putc+0xf8>)
 80015bc:	885a      	ldrh	r2, [r3, #2]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	4413      	add	r3, r2
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	79ba      	ldrb	r2, [r7, #6]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f7ff ff43 	bl	8001454 <SSD1306_DrawPixel>
 80015ce:	e014      	b.n	80015fa <SSD1306_Putc+0xba>
			}else{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80015d0:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <SSD1306_Putc+0xf8>)
 80015d2:	881a      	ldrh	r2, [r3, #0]
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	4413      	add	r3, r2
 80015da:	b298      	uxth	r0, r3
 80015dc:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <SSD1306_Putc+0xf8>)
 80015de:	885a      	ldrh	r2, [r3, #2]
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	4413      	add	r3, r2
 80015e6:	b299      	uxth	r1, r3
 80015e8:	79bb      	ldrb	r3, [r7, #6]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	bf0c      	ite	eq
 80015ee:	2301      	moveq	r3, #1
 80015f0:	2300      	movne	r3, #0
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	f7ff ff2d 	bl	8001454 <SSD1306_DrawPixel>
		for(j=0; j<Font->FontWidth; j++){
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	3301      	adds	r3, #1
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	4293      	cmp	r3, r2
 800160a:	d3c8      	bcc.n	800159e <SSD1306_Putc+0x5e>
	for(i=0; i<Font->FontHeight; i++){
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	3301      	adds	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	785b      	ldrb	r3, [r3, #1]
 8001616:	461a      	mov	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	4293      	cmp	r3, r2
 800161c:	d3ad      	bcc.n	800157a <SSD1306_Putc+0x3a>
			}
		}
	}
	SSD1306.CurrentX += Font->FontWidth;
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <SSD1306_Putc+0xf8>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	683a      	ldr	r2, [r7, #0]
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	4413      	add	r3, r2
 8001628:	b29a      	uxth	r2, r3
 800162a:	4b03      	ldr	r3, [pc, #12]	@ (8001638 <SSD1306_Putc+0xf8>)
 800162c:	801a      	strh	r2, [r3, #0]
	return ch;
 800162e:	79fb      	ldrb	r3, [r7, #7]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000974 	.word	0x20000974

0800163c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	4613      	mov	r3, r2
 8001648:	71fb      	strb	r3, [r7, #7]
	while(*str)
 800164a:	e012      	b.n	8001672 <SSD1306_Puts+0x36>
	{
		if(SSD1306_Putc(*str, Font, color) != *str){
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	79fa      	ldrb	r2, [r7, #7]
 8001652:	68b9      	ldr	r1, [r7, #8]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff73 	bl	8001540 <SSD1306_Putc>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d002      	beq.n	800166c <SSD1306_Puts+0x30>
			return *str;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	e008      	b.n	800167e <SSD1306_Puts+0x42>
		}
		str++;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3301      	adds	r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
	while(*str)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1e8      	bne.n	800164c <SSD1306_Puts+0x10>
	}
	return *str;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	781b      	ldrb	r3, [r3, #0]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <SSD1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);
}

void SSD1306_I2C_Init(void)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 800168e:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <SSD1306_I2C_Init+0x28>)
 8001690:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001692:	e002      	b.n	800169a <SSD1306_I2C_Init+0x12>
		p--;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3b01      	subs	r3, #1
 8001698:	607b      	str	r3, [r7, #4]
	while(p>0)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f9      	bne.n	8001694 <SSD1306_I2C_Init+0xc>
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	0003d090 	.word	0x0003d090

080016b4 <SSD1306_I2C_WriteMulti>:

void SSD1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b0c7      	sub	sp, #284	@ 0x11c
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	4604      	mov	r4, r0
 80016bc:	4608      	mov	r0, r1
 80016be:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80016c2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80016c6:	600a      	str	r2, [r1, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016ce:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80016d2:	4622      	mov	r2, r4
 80016d4:	701a      	strb	r2, [r3, #0]
 80016d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016da:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016de:	4602      	mov	r2, r0
 80016e0:	701a      	strb	r2, [r3, #0]
 80016e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016ea:	460a      	mov	r2, r1
 80016ec:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 80016ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016f6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016fa:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8001702:	2300      	movs	r3, #0
 8001704:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001708:	e015      	b.n	8001736 <SSD1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 800170a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800170e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001712:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	441a      	add	r2, r3
 800171a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800171e:	3301      	adds	r3, #1
 8001720:	7811      	ldrb	r1, [r2, #0]
 8001722:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001726:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800172a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 800172c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001730:	3301      	adds	r3, #1
 8001732:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001736:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800173a:	b29b      	uxth	r3, r3
 800173c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001740:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001744:	8812      	ldrh	r2, [r2, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d8df      	bhi.n	800170a <SSD1306_I2C_WriteMulti+0x56>
	//HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
	//HAL_I2C_Master_Transmit_DMA(&hi2c1, address, dt, count+1);
	HAL_I2C_Mem_Write_DMA(&hi2c1, address, 0x40, 1, dt, count+1);
 800174a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800174e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	b299      	uxth	r1, r3
 8001756:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800175a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	b29b      	uxth	r3, r3
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2301      	movs	r3, #1
 800176e:	2240      	movs	r2, #64	@ 0x40
 8001770:	4803      	ldr	r0, [pc, #12]	@ (8001780 <SSD1306_I2C_WriteMulti+0xcc>)
 8001772:	f002 f80f 	bl	8003794 <HAL_I2C_Mem_Write_DMA>
}
 8001776:	bf00      	nop
 8001778:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800177c:	46bd      	mov	sp, r7
 800177e:	bd90      	pop	{r4, r7, pc}
 8001780:	200001d8 	.word	0x200001d8

08001784 <SSD1306_I2C_Write>:


void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af02      	add	r7, sp, #8
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
 800178e:	460b      	mov	r3, r1
 8001790:	71bb      	strb	r3, [r7, #6]
 8001792:	4613      	mov	r3, r2
 8001794:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001796:	79bb      	ldrb	r3, [r7, #6]
 8001798:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800179a:	797b      	ldrb	r3, [r7, #5]
 800179c:	737b      	strb	r3, [r7, #13]
	//HAL_I2C_Master_Transmit_DMA(&hi2c1, address, dt, 2);
//	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
	HAL_I2C_Mem_Write_DMA(&hi2c1, address, 0x40, 1, dt, 2);
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	b299      	uxth	r1, r3
 80017a2:	2302      	movs	r3, #2
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2301      	movs	r3, #1
 80017ae:	2240      	movs	r2, #64	@ 0x40
 80017b0:	4803      	ldr	r0, [pc, #12]	@ (80017c0 <SSD1306_I2C_Write+0x3c>)
 80017b2:	f001 ffef 	bl	8003794 <HAL_I2C_Mem_Write_DMA>
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200001d8 	.word	0x200001d8

080017c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <HAL_MspInit+0x4c>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001810 <HAL_MspInit+0x4c>)
 80017d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017da:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <HAL_MspInit+0x4c>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	4b09      	ldr	r3, [pc, #36]	@ (8001810 <HAL_MspInit+0x4c>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	4a08      	ldr	r2, [pc, #32]	@ (8001810 <HAL_MspInit+0x4c>)
 80017f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f6:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <HAL_MspInit+0x4c>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fe:	603b      	str	r3, [r7, #0]
 8001800:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800

08001814 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	@ 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a32      	ldr	r2, [pc, #200]	@ (80018fc <HAL_ADC_MspInit+0xe8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d15e      	bne.n	80018f4 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	4b31      	ldr	r3, [pc, #196]	@ (8001900 <HAL_ADC_MspInit+0xec>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183e:	4a30      	ldr	r2, [pc, #192]	@ (8001900 <HAL_ADC_MspInit+0xec>)
 8001840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001844:	6453      	str	r3, [r2, #68]	@ 0x44
 8001846:	4b2e      	ldr	r3, [pc, #184]	@ (8001900 <HAL_ADC_MspInit+0xec>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b2a      	ldr	r3, [pc, #168]	@ (8001900 <HAL_ADC_MspInit+0xec>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	4a29      	ldr	r2, [pc, #164]	@ (8001900 <HAL_ADC_MspInit+0xec>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6313      	str	r3, [r2, #48]	@ 0x30
 8001862:	4b27      	ldr	r3, [pc, #156]	@ (8001900 <HAL_ADC_MspInit+0xec>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800186e:	23ff      	movs	r3, #255	@ 0xff
 8001870:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001872:	2303      	movs	r3, #3
 8001874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	4820      	ldr	r0, [pc, #128]	@ (8001904 <HAL_ADC_MspInit+0xf0>)
 8001882:	f001 fc8f 	bl	80031a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001886:	4b20      	ldr	r3, [pc, #128]	@ (8001908 <HAL_ADC_MspInit+0xf4>)
 8001888:	4a20      	ldr	r2, [pc, #128]	@ (800190c <HAL_ADC_MspInit+0xf8>)
 800188a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800188c:	4b1e      	ldr	r3, [pc, #120]	@ (8001908 <HAL_ADC_MspInit+0xf4>)
 800188e:	2200      	movs	r2, #0
 8001890:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001892:	4b1d      	ldr	r3, [pc, #116]	@ (8001908 <HAL_ADC_MspInit+0xf4>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001898:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <HAL_ADC_MspInit+0xf4>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800189e:	4b1a      	ldr	r3, [pc, #104]	@ (8001908 <HAL_ADC_MspInit+0xf4>)
 80018a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018a6:	4b18      	ldr	r3, [pc, #96]	@ (8001908 <HAL_ADC_MspInit+0xf4>)
 80018a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018ae:	4b16      	ldr	r3, [pc, #88]	@ (8001908 <HAL_ADC_MspInit+0xf4>)
 80018b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80018b6:	4b14      	ldr	r3, [pc, #80]	@ (8001908 <HAL_ADC_MspInit+0xf4>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018bc:	4b12      	ldr	r3, [pc, #72]	@ (8001908 <HAL_ADC_MspInit+0xf4>)
 80018be:	2200      	movs	r2, #0
 80018c0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018c2:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <HAL_ADC_MspInit+0xf4>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018c8:	480f      	ldr	r0, [pc, #60]	@ (8001908 <HAL_ADC_MspInit+0xf4>)
 80018ca:	f001 f8bf 	bl	8002a4c <HAL_DMA_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80018d4:	f7ff fa28 	bl	8000d28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a0b      	ldr	r2, [pc, #44]	@ (8001908 <HAL_ADC_MspInit+0xf4>)
 80018dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80018de:	4a0a      	ldr	r2, [pc, #40]	@ (8001908 <HAL_ADC_MspInit+0xf4>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2100      	movs	r1, #0
 80018e8:	2012      	movs	r0, #18
 80018ea:	f001 f878 	bl	80029de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80018ee:	2012      	movs	r0, #18
 80018f0:	f001 f891 	bl	8002a16 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80018f4:	bf00      	nop
 80018f6:	3728      	adds	r7, #40	@ 0x28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40012000 	.word	0x40012000
 8001900:	40023800 	.word	0x40023800
 8001904:	40020000 	.word	0x40020000
 8001908:	20000178 	.word	0x20000178
 800190c:	40026410 	.word	0x40026410

08001910 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	@ 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a4f      	ldr	r2, [pc, #316]	@ (8001a6c <HAL_I2C_MspInit+0x15c>)
 800192e:	4293      	cmp	r3, r2
 8001930:	f040 8097 	bne.w	8001a62 <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001934:	2300      	movs	r3, #0
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	4b4d      	ldr	r3, [pc, #308]	@ (8001a70 <HAL_I2C_MspInit+0x160>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193c:	4a4c      	ldr	r2, [pc, #304]	@ (8001a70 <HAL_I2C_MspInit+0x160>)
 800193e:	f043 0302 	orr.w	r3, r3, #2
 8001942:	6313      	str	r3, [r2, #48]	@ 0x30
 8001944:	4b4a      	ldr	r3, [pc, #296]	@ (8001a70 <HAL_I2C_MspInit+0x160>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001950:	23c0      	movs	r3, #192	@ 0xc0
 8001952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001954:	2312      	movs	r3, #18
 8001956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001960:	2304      	movs	r3, #4
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4619      	mov	r1, r3
 800196a:	4842      	ldr	r0, [pc, #264]	@ (8001a74 <HAL_I2C_MspInit+0x164>)
 800196c:	f001 fc1a 	bl	80031a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	4b3e      	ldr	r3, [pc, #248]	@ (8001a70 <HAL_I2C_MspInit+0x160>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001978:	4a3d      	ldr	r2, [pc, #244]	@ (8001a70 <HAL_I2C_MspInit+0x160>)
 800197a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800197e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001980:	4b3b      	ldr	r3, [pc, #236]	@ (8001a70 <HAL_I2C_MspInit+0x160>)
 8001982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001984:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800198c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a78 <HAL_I2C_MspInit+0x168>)
 800198e:	4a3b      	ldr	r2, [pc, #236]	@ (8001a7c <HAL_I2C_MspInit+0x16c>)
 8001990:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001992:	4b39      	ldr	r3, [pc, #228]	@ (8001a78 <HAL_I2C_MspInit+0x168>)
 8001994:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001998:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800199a:	4b37      	ldr	r3, [pc, #220]	@ (8001a78 <HAL_I2C_MspInit+0x168>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a0:	4b35      	ldr	r3, [pc, #212]	@ (8001a78 <HAL_I2C_MspInit+0x168>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019a6:	4b34      	ldr	r3, [pc, #208]	@ (8001a78 <HAL_I2C_MspInit+0x168>)
 80019a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019ac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ae:	4b32      	ldr	r3, [pc, #200]	@ (8001a78 <HAL_I2C_MspInit+0x168>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019b4:	4b30      	ldr	r3, [pc, #192]	@ (8001a78 <HAL_I2C_MspInit+0x168>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80019ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001a78 <HAL_I2C_MspInit+0x168>)
 80019bc:	2200      	movs	r2, #0
 80019be:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a78 <HAL_I2C_MspInit+0x168>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001a78 <HAL_I2C_MspInit+0x168>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80019cc:	482a      	ldr	r0, [pc, #168]	@ (8001a78 <HAL_I2C_MspInit+0x168>)
 80019ce:	f001 f83d 	bl	8002a4c <HAL_DMA_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80019d8:	f7ff f9a6 	bl	8000d28 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a26      	ldr	r2, [pc, #152]	@ (8001a78 <HAL_I2C_MspInit+0x168>)
 80019e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80019e2:	4a25      	ldr	r2, [pc, #148]	@ (8001a78 <HAL_I2C_MspInit+0x168>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80019e8:	4b25      	ldr	r3, [pc, #148]	@ (8001a80 <HAL_I2C_MspInit+0x170>)
 80019ea:	4a26      	ldr	r2, [pc, #152]	@ (8001a84 <HAL_I2C_MspInit+0x174>)
 80019ec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80019ee:	4b24      	ldr	r3, [pc, #144]	@ (8001a80 <HAL_I2C_MspInit+0x170>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019f4:	4b22      	ldr	r3, [pc, #136]	@ (8001a80 <HAL_I2C_MspInit+0x170>)
 80019f6:	2240      	movs	r2, #64	@ 0x40
 80019f8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019fa:	4b21      	ldr	r3, [pc, #132]	@ (8001a80 <HAL_I2C_MspInit+0x170>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a00:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <HAL_I2C_MspInit+0x170>)
 8001a02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a06:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a08:	4b1d      	ldr	r3, [pc, #116]	@ (8001a80 <HAL_I2C_MspInit+0x170>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a80 <HAL_I2C_MspInit+0x170>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001a14:	4b1a      	ldr	r3, [pc, #104]	@ (8001a80 <HAL_I2C_MspInit+0x170>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a1a:	4b19      	ldr	r3, [pc, #100]	@ (8001a80 <HAL_I2C_MspInit+0x170>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a20:	4b17      	ldr	r3, [pc, #92]	@ (8001a80 <HAL_I2C_MspInit+0x170>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001a26:	4816      	ldr	r0, [pc, #88]	@ (8001a80 <HAL_I2C_MspInit+0x170>)
 8001a28:	f001 f810 	bl	8002a4c <HAL_DMA_Init>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8001a32:	f7ff f979 	bl	8000d28 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a11      	ldr	r2, [pc, #68]	@ (8001a80 <HAL_I2C_MspInit+0x170>)
 8001a3a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a3c:	4a10      	ldr	r2, [pc, #64]	@ (8001a80 <HAL_I2C_MspInit+0x170>)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	201f      	movs	r0, #31
 8001a48:	f000 ffc9 	bl	80029de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a4c:	201f      	movs	r0, #31
 8001a4e:	f000 ffe2 	bl	8002a16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	2020      	movs	r0, #32
 8001a58:	f000 ffc1 	bl	80029de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a5c:	2020      	movs	r0, #32
 8001a5e:	f000 ffda 	bl	8002a16 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	@ 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40005400 	.word	0x40005400
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40020400 	.word	0x40020400
 8001a78:	2000022c 	.word	0x2000022c
 8001a7c:	40026010 	.word	0x40026010
 8001a80:	2000028c 	.word	0x2000028c
 8001a84:	40026028 	.word	0x40026028

08001a88 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1a      	ldr	r2, [pc, #104]	@ (8001b00 <HAL_TIM_Base_MspInit+0x78>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d12d      	bne.n	8001af6 <HAL_TIM_Base_MspInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <HAL_TIM_Base_MspInit+0x7c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	4a18      	ldr	r2, [pc, #96]	@ (8001b04 <HAL_TIM_Base_MspInit+0x7c>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aaa:	4b16      	ldr	r3, [pc, #88]	@ (8001b04 <HAL_TIM_Base_MspInit+0x7c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2018      	movs	r0, #24
 8001abc:	f000 ff8f 	bl	80029de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001ac0:	2018      	movs	r0, #24
 8001ac2:	f000 ffa8 	bl	8002a16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	2019      	movs	r0, #25
 8001acc:	f000 ff87 	bl	80029de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ad0:	2019      	movs	r0, #25
 8001ad2:	f000 ffa0 	bl	8002a16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	201a      	movs	r0, #26
 8001adc:	f000 ff7f 	bl	80029de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001ae0:	201a      	movs	r0, #26
 8001ae2:	f000 ff98 	bl	8002a16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	201b      	movs	r0, #27
 8001aec:	f000 ff77 	bl	80029de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001af0:	201b      	movs	r0, #27
 8001af2:	f000 ff90 	bl	8002a16 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40010000 	.word	0x40010000
 8001b04:	40023800 	.word	0x40023800

08001b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <NMI_Handler+0x4>

08001b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <HardFault_Handler+0x4>

08001b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <MemManage_Handler+0x4>

08001b20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b24:	bf00      	nop
 8001b26:	e7fd      	b.n	8001b24 <BusFault_Handler+0x4>

08001b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <UsageFault_Handler+0x4>

08001b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b5e:	f000 f8ff 	bl	8001d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001b6c:	4802      	ldr	r0, [pc, #8]	@ (8001b78 <DMA1_Stream0_IRQHandler+0x10>)
 8001b6e:	f001 f895 	bl	8002c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	2000022c 	.word	0x2000022c

08001b7c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001b80:	4802      	ldr	r0, [pc, #8]	@ (8001b8c <DMA1_Stream1_IRQHandler+0x10>)
 8001b82:	f001 f88b 	bl	8002c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000028c 	.word	0x2000028c

08001b90 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b94:	4802      	ldr	r0, [pc, #8]	@ (8001ba0 <ADC_IRQHandler+0x10>)
 8001b96:	f000 f96a 	bl	8001e6e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000130 	.word	0x20000130

08001ba4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ba8:	4802      	ldr	r0, [pc, #8]	@ (8001bb4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001baa:	f005 fff7 	bl	8007b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	200002ec 	.word	0x200002ec

08001bb8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bbc:	4802      	ldr	r0, [pc, #8]	@ (8001bc8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001bbe:	f005 ffed 	bl	8007b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200002ec 	.word	0x200002ec

08001bcc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bd0:	4802      	ldr	r0, [pc, #8]	@ (8001bdc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001bd2:	f005 ffe3 	bl	8007b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200002ec 	.word	0x200002ec

08001be0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001be4:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <TIM1_CC_IRQHandler+0x10>)
 8001be6:	f005 ffd9 	bl	8007b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200002ec 	.word	0x200002ec

08001bf4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001bf8:	4802      	ldr	r0, [pc, #8]	@ (8001c04 <I2C1_EV_IRQHandler+0x10>)
 8001bfa:	f002 f857 	bl	8003cac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	200001d8 	.word	0x200001d8

08001c08 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c0c:	4802      	ldr	r0, [pc, #8]	@ (8001c18 <I2C1_ER_IRQHandler+0x10>)
 8001c0e:	f002 f9be 	bl	8003f8e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200001d8 	.word	0x200001d8

08001c1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c20:	4802      	ldr	r0, [pc, #8]	@ (8001c2c <DMA2_Stream0_IRQHandler+0x10>)
 8001c22:	f001 f83b 	bl	8002c9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000178 	.word	0x20000178

08001c30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c34:	4802      	ldr	r0, [pc, #8]	@ (8001c40 <OTG_FS_IRQHandler+0x10>)
 8001c36:	f004 f9ad 	bl	8005f94 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20001264 	.word	0x20001264

08001c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <SystemInit+0x20>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c4e:	4a05      	ldr	r2, [pc, #20]	@ (8001c64 <SystemInit+0x20>)
 8001c50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ca0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c6c:	f7ff ffea 	bl	8001c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c70:	480c      	ldr	r0, [pc, #48]	@ (8001ca4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c72:	490d      	ldr	r1, [pc, #52]	@ (8001ca8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c74:	4a0d      	ldr	r2, [pc, #52]	@ (8001cac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c78:	e002      	b.n	8001c80 <LoopCopyDataInit>

08001c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7e:	3304      	adds	r3, #4

08001c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c84:	d3f9      	bcc.n	8001c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c86:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c88:	4c0a      	ldr	r4, [pc, #40]	@ (8001cb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c8c:	e001      	b.n	8001c92 <LoopFillZerobss>

08001c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c90:	3204      	adds	r2, #4

08001c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c94:	d3fb      	bcc.n	8001c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c96:	f00a fc99 	bl	800c5cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c9a:	f7fe fdad 	bl	80007f8 <main>
  bx  lr    
 8001c9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca8:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 8001cac:	0800d434 	.word	0x0800d434
  ldr r2, =_sbss
 8001cb0:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 8001cb4:	20001968 	.word	0x20001968

08001cb8 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <DMA1_Stream2_IRQHandler>
	...

08001cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001cfc <HAL_Init+0x40>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cfc <HAL_Init+0x40>)
 8001cc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <HAL_Init+0x40>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001cfc <HAL_Init+0x40>)
 8001cd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd8:	4b08      	ldr	r3, [pc, #32]	@ (8001cfc <HAL_Init+0x40>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a07      	ldr	r2, [pc, #28]	@ (8001cfc <HAL_Init+0x40>)
 8001cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce4:	2003      	movs	r0, #3
 8001ce6:	f000 fe6f 	bl	80029c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cea:	200f      	movs	r0, #15
 8001cec:	f000 f808 	bl	8001d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cf0:	f7ff fd68 	bl	80017c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023c00 	.word	0x40023c00

08001d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d08:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <HAL_InitTick+0x54>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b12      	ldr	r3, [pc, #72]	@ (8001d58 <HAL_InitTick+0x58>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	4619      	mov	r1, r3
 8001d12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 fe87 	bl	8002a32 <HAL_SYSTICK_Config>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00e      	b.n	8001d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b0f      	cmp	r3, #15
 8001d32:	d80a      	bhi.n	8001d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d34:	2200      	movs	r2, #0
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f000 fe4f 	bl	80029de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d40:	4a06      	ldr	r2, [pc, #24]	@ (8001d5c <HAL_InitTick+0x5c>)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e000      	b.n	8001d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000010 	.word	0x20000010
 8001d58:	20000018 	.word	0x20000018
 8001d5c:	20000014 	.word	0x20000014

08001d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d64:	4b06      	ldr	r3, [pc, #24]	@ (8001d80 <HAL_IncTick+0x20>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <HAL_IncTick+0x24>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	4a04      	ldr	r2, [pc, #16]	@ (8001d84 <HAL_IncTick+0x24>)
 8001d72:	6013      	str	r3, [r2, #0]
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000018 	.word	0x20000018
 8001d84:	2000097c 	.word	0x2000097c

08001d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	@ (8001d9c <HAL_GetTick+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	2000097c 	.word	0x2000097c

08001da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da8:	f7ff ffee 	bl	8001d88 <HAL_GetTick>
 8001dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db8:	d005      	beq.n	8001dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dba:	4b0a      	ldr	r3, [pc, #40]	@ (8001de4 <HAL_Delay+0x44>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dc6:	bf00      	nop
 8001dc8:	f7ff ffde 	bl	8001d88 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d8f7      	bhi.n	8001dc8 <HAL_Delay+0x28>
  {
  }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000018 	.word	0x20000018

08001de8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e033      	b.n	8001e66 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d109      	bne.n	8001e1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff fd04 	bl	8001814 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	f003 0310 	and.w	r3, r3, #16
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d118      	bne.n	8001e58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e2e:	f023 0302 	bic.w	r3, r3, #2
 8001e32:	f043 0202 	orr.w	r2, r3, #2
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fb6c 	bl	8002518 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	f023 0303 	bic.w	r3, r3, #3
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e56:	e001      	b.n	8001e5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f003 0320 	and.w	r3, r3, #32
 8001e9c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d049      	beq.n	8001f38 <HAL_ADC_IRQHandler+0xca>
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d046      	beq.n	8001f38 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	f003 0310 	and.w	r3, r3, #16
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d105      	bne.n	8001ec2 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d12b      	bne.n	8001f28 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d127      	bne.n	8001f28 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ede:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d006      	beq.n	8001ef4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d119      	bne.n	8001f28 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0220 	bic.w	r2, r2, #32
 8001f02:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d105      	bne.n	8001f28 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7fe faeb 	bl	8000504 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f06f 0212 	mvn.w	r2, #18
 8001f36:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f46:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d057      	beq.n	8001ffe <HAL_ADC_IRQHandler+0x190>
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d054      	beq.n	8001ffe <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d105      	bne.n	8001f6c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f64:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d139      	bne.n	8001fee <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f80:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d006      	beq.n	8001f96 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d12b      	bne.n	8001fee <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d124      	bne.n	8001fee <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d11d      	bne.n	8001fee <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d119      	bne.n	8001fee <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fc8:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d105      	bne.n	8001fee <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	f043 0201 	orr.w	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fc10 	bl	8002814 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 020c 	mvn.w	r2, #12
 8001ffc:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800200c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d017      	beq.n	8002044 <HAL_ADC_IRQHandler+0x1d6>
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d014      	beq.n	8002044 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	2b01      	cmp	r3, #1
 8002026:	d10d      	bne.n	8002044 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f929 	bl	800228c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f06f 0201 	mvn.w	r2, #1
 8002042:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002052:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d015      	beq.n	8002086 <HAL_ADC_IRQHandler+0x218>
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d012      	beq.n	8002086 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002064:	f043 0202 	orr.w	r2, r3, #2
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0220 	mvn.w	r2, #32
 8002074:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f912 	bl	80022a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0220 	mvn.w	r2, #32
 8002084:	601a      	str	r2, [r3, #0]
  }
}
 8002086:	bf00      	nop
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_Start_DMA+0x22>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e0d0      	b.n	8002254 <HAL_ADC_Start_DMA+0x1c4>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d018      	beq.n	80020fa <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020d8:	4b60      	ldr	r3, [pc, #384]	@ (800225c <HAL_ADC_Start_DMA+0x1cc>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a60      	ldr	r2, [pc, #384]	@ (8002260 <HAL_ADC_Start_DMA+0x1d0>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	0c9a      	lsrs	r2, r3, #18
 80020e4:	4613      	mov	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4413      	add	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80020ec:	e002      	b.n	80020f4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f9      	bne.n	80020ee <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002104:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002108:	d107      	bne.n	800211a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002118:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b01      	cmp	r3, #1
 8002126:	f040 8088 	bne.w	800223a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002132:	f023 0301 	bic.w	r3, r3, #1
 8002136:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002148:	2b00      	cmp	r3, #0
 800214a:	d007      	beq.n	800215c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002154:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002160:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002164:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002168:	d106      	bne.n	8002178 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800216e:	f023 0206 	bic.w	r2, r3, #6
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	645a      	str	r2, [r3, #68]	@ 0x44
 8002176:	e002      	b.n	800217e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002186:	4b37      	ldr	r3, [pc, #220]	@ (8002264 <HAL_ADC_Start_DMA+0x1d4>)
 8002188:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800218e:	4a36      	ldr	r2, [pc, #216]	@ (8002268 <HAL_ADC_Start_DMA+0x1d8>)
 8002190:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002196:	4a35      	ldr	r2, [pc, #212]	@ (800226c <HAL_ADC_Start_DMA+0x1dc>)
 8002198:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800219e:	4a34      	ldr	r2, [pc, #208]	@ (8002270 <HAL_ADC_Start_DMA+0x1e0>)
 80021a0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80021aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80021ba:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021ca:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	334c      	adds	r3, #76	@ 0x4c
 80021d6:	4619      	mov	r1, r3
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f000 fce4 	bl	8002ba8 <HAL_DMA_Start_IT>
 80021e0:	4603      	mov	r3, r0
 80021e2:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 031f 	and.w	r3, r3, #31
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10f      	bne.n	8002210 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d129      	bne.n	8002252 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800220c:	609a      	str	r2, [r3, #8]
 800220e:	e020      	b.n	8002252 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a17      	ldr	r2, [pc, #92]	@ (8002274 <HAL_ADC_Start_DMA+0x1e4>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d11b      	bne.n	8002252 <HAL_ADC_Start_DMA+0x1c2>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d114      	bne.n	8002252 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	e00b      	b.n	8002252 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	f043 0210 	orr.w	r2, r3, #16
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	f043 0201 	orr.w	r2, r3, #1
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002252:	7ffb      	ldrb	r3, [r7, #31]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3720      	adds	r7, #32
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000010 	.word	0x20000010
 8002260:	431bde83 	.word	0x431bde83
 8002264:	40012300 	.word	0x40012300
 8002268:	08002711 	.word	0x08002711
 800226c:	080027cb 	.word	0x080027cb
 8002270:	080027e7 	.word	0x080027e7
 8002274:	40012000 	.word	0x40012000

08002278 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x1c>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e113      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x244>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b09      	cmp	r3, #9
 80022de:	d925      	bls.n	800232c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68d9      	ldr	r1, [r3, #12]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	3b1e      	subs	r3, #30
 80022f6:	2207      	movs	r2, #7
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43da      	mvns	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	400a      	ands	r2, r1
 8002304:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68d9      	ldr	r1, [r3, #12]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	b29b      	uxth	r3, r3
 8002316:	4618      	mov	r0, r3
 8002318:	4603      	mov	r3, r0
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4403      	add	r3, r0
 800231e:	3b1e      	subs	r3, #30
 8002320:	409a      	lsls	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	e022      	b.n	8002372 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6919      	ldr	r1, [r3, #16]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	4613      	mov	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	2207      	movs	r2, #7
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	400a      	ands	r2, r1
 800234e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6919      	ldr	r1, [r3, #16]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	4603      	mov	r3, r0
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4403      	add	r3, r0
 8002368:	409a      	lsls	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b06      	cmp	r3, #6
 8002378:	d824      	bhi.n	80023c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	3b05      	subs	r3, #5
 800238c:	221f      	movs	r2, #31
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	400a      	ands	r2, r1
 800239a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	3b05      	subs	r3, #5
 80023b6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80023c2:	e04c      	b.n	800245e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b0c      	cmp	r3, #12
 80023ca:	d824      	bhi.n	8002416 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	3b23      	subs	r3, #35	@ 0x23
 80023de:	221f      	movs	r2, #31
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43da      	mvns	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	400a      	ands	r2, r1
 80023ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	4618      	mov	r0, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	3b23      	subs	r3, #35	@ 0x23
 8002408:	fa00 f203 	lsl.w	r2, r0, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	631a      	str	r2, [r3, #48]	@ 0x30
 8002414:	e023      	b.n	800245e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	3b41      	subs	r3, #65	@ 0x41
 8002428:	221f      	movs	r2, #31
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	400a      	ands	r2, r1
 8002436:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	4618      	mov	r0, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	3b41      	subs	r3, #65	@ 0x41
 8002452:	fa00 f203 	lsl.w	r2, r0, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800245e:	4b29      	ldr	r3, [pc, #164]	@ (8002504 <HAL_ADC_ConfigChannel+0x250>)
 8002460:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a28      	ldr	r2, [pc, #160]	@ (8002508 <HAL_ADC_ConfigChannel+0x254>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d10f      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1d8>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b12      	cmp	r3, #18
 8002472:	d10b      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1d      	ldr	r2, [pc, #116]	@ (8002508 <HAL_ADC_ConfigChannel+0x254>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d12b      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x23a>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1c      	ldr	r2, [pc, #112]	@ (800250c <HAL_ADC_ConfigChannel+0x258>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0x1f4>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b11      	cmp	r3, #17
 80024a6:	d122      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a11      	ldr	r2, [pc, #68]	@ (800250c <HAL_ADC_ConfigChannel+0x258>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d111      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <HAL_ADC_ConfigChannel+0x25c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a11      	ldr	r2, [pc, #68]	@ (8002514 <HAL_ADC_ConfigChannel+0x260>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	0c9a      	lsrs	r2, r3, #18
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024e0:	e002      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f9      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	40012300 	.word	0x40012300
 8002508:	40012000 	.word	0x40012000
 800250c:	10000012 	.word	0x10000012
 8002510:	20000010 	.word	0x20000010
 8002514:	431bde83 	.word	0x431bde83

08002518 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002520:	4b79      	ldr	r3, [pc, #484]	@ (8002708 <ADC_Init+0x1f0>)
 8002522:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	431a      	orrs	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800254c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	021a      	lsls	r2, r3, #8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002570:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002592:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6899      	ldr	r1, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025aa:	4a58      	ldr	r2, [pc, #352]	@ (800270c <ADC_Init+0x1f4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d022      	beq.n	80025f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6899      	ldr	r1, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6899      	ldr	r1, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	e00f      	b.n	8002616 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002604:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002614:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0202 	bic.w	r2, r2, #2
 8002624:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6899      	ldr	r1, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7e1b      	ldrb	r3, [r3, #24]
 8002630:	005a      	lsls	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d01b      	beq.n	800267c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002652:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002662:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800266e:	3b01      	subs	r3, #1
 8002670:	035a      	lsls	r2, r3, #13
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	e007      	b.n	800268c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800268a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800269a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	051a      	lsls	r2, r3, #20
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6899      	ldr	r1, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026ce:	025a      	lsls	r2, r3, #9
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6899      	ldr	r1, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	029a      	lsls	r2, r3, #10
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	609a      	str	r2, [r3, #8]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	40012300 	.word	0x40012300
 800270c:	0f000001 	.word	0x0f000001

08002710 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800271c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002726:	2b00      	cmp	r3, #0
 8002728:	d13c      	bne.n	80027a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d12b      	bne.n	800279c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002748:	2b00      	cmp	r3, #0
 800274a:	d127      	bne.n	800279c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002752:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002756:	2b00      	cmp	r3, #0
 8002758:	d006      	beq.n	8002768 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002764:	2b00      	cmp	r3, #0
 8002766:	d119      	bne.n	800279c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0220 	bic.w	r2, r2, #32
 8002776:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002788:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d105      	bne.n	800279c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	f043 0201 	orr.w	r2, r3, #1
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f7fd feb1 	bl	8000504 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80027a2:	e00e      	b.n	80027c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7ff fd75 	bl	80022a0 <HAL_ADC_ErrorCallback>
}
 80027b6:	e004      	b.n	80027c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	4798      	blx	r3
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027d6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f7ff fd4d 	bl	8002278 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2240      	movs	r2, #64	@ 0x40
 80027f8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fe:	f043 0204 	orr.w	r2, r3, #4
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f7ff fd4a 	bl	80022a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002838:	4b0c      	ldr	r3, [pc, #48]	@ (800286c <__NVIC_SetPriorityGrouping+0x44>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002844:	4013      	ands	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002850:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800285a:	4a04      	ldr	r2, [pc, #16]	@ (800286c <__NVIC_SetPriorityGrouping+0x44>)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	60d3      	str	r3, [r2, #12]
}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002874:	4b04      	ldr	r3, [pc, #16]	@ (8002888 <__NVIC_GetPriorityGrouping+0x18>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	f003 0307 	and.w	r3, r3, #7
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289a:	2b00      	cmp	r3, #0
 800289c:	db0b      	blt.n	80028b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	f003 021f 	and.w	r2, r3, #31
 80028a4:	4907      	ldr	r1, [pc, #28]	@ (80028c4 <__NVIC_EnableIRQ+0x38>)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	2001      	movs	r0, #1
 80028ae:	fa00 f202 	lsl.w	r2, r0, r2
 80028b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	e000e100 	.word	0xe000e100

080028c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	6039      	str	r1, [r7, #0]
 80028d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	db0a      	blt.n	80028f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	490c      	ldr	r1, [pc, #48]	@ (8002914 <__NVIC_SetPriority+0x4c>)
 80028e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e6:	0112      	lsls	r2, r2, #4
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	440b      	add	r3, r1
 80028ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028f0:	e00a      	b.n	8002908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	4908      	ldr	r1, [pc, #32]	@ (8002918 <__NVIC_SetPriority+0x50>)
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	3b04      	subs	r3, #4
 8002900:	0112      	lsls	r2, r2, #4
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	440b      	add	r3, r1
 8002906:	761a      	strb	r2, [r3, #24]
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000e100 	.word	0xe000e100
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800291c:	b480      	push	{r7}
 800291e:	b089      	sub	sp, #36	@ 0x24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f1c3 0307 	rsb	r3, r3, #7
 8002936:	2b04      	cmp	r3, #4
 8002938:	bf28      	it	cs
 800293a:	2304      	movcs	r3, #4
 800293c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3304      	adds	r3, #4
 8002942:	2b06      	cmp	r3, #6
 8002944:	d902      	bls.n	800294c <NVIC_EncodePriority+0x30>
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	3b03      	subs	r3, #3
 800294a:	e000      	b.n	800294e <NVIC_EncodePriority+0x32>
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002950:	f04f 32ff 	mov.w	r2, #4294967295
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43da      	mvns	r2, r3
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	401a      	ands	r2, r3
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002964:	f04f 31ff 	mov.w	r1, #4294967295
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	fa01 f303 	lsl.w	r3, r1, r3
 800296e:	43d9      	mvns	r1, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	4313      	orrs	r3, r2
         );
}
 8002976:	4618      	mov	r0, r3
 8002978:	3724      	adds	r7, #36	@ 0x24
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002994:	d301      	bcc.n	800299a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002996:	2301      	movs	r3, #1
 8002998:	e00f      	b.n	80029ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800299a:	4a0a      	ldr	r2, [pc, #40]	@ (80029c4 <SysTick_Config+0x40>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3b01      	subs	r3, #1
 80029a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029a2:	210f      	movs	r1, #15
 80029a4:	f04f 30ff 	mov.w	r0, #4294967295
 80029a8:	f7ff ff8e 	bl	80028c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029ac:	4b05      	ldr	r3, [pc, #20]	@ (80029c4 <SysTick_Config+0x40>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029b2:	4b04      	ldr	r3, [pc, #16]	@ (80029c4 <SysTick_Config+0x40>)
 80029b4:	2207      	movs	r2, #7
 80029b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	e000e010 	.word	0xe000e010

080029c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff ff29 	bl	8002828 <__NVIC_SetPriorityGrouping>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029de:	b580      	push	{r7, lr}
 80029e0:	b086      	sub	sp, #24
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	4603      	mov	r3, r0
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
 80029ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029f0:	f7ff ff3e 	bl	8002870 <__NVIC_GetPriorityGrouping>
 80029f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68b9      	ldr	r1, [r7, #8]
 80029fa:	6978      	ldr	r0, [r7, #20]
 80029fc:	f7ff ff8e 	bl	800291c <NVIC_EncodePriority>
 8002a00:	4602      	mov	r2, r0
 8002a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff5d 	bl	80028c8 <__NVIC_SetPriority>
}
 8002a0e:	bf00      	nop
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff31 	bl	800288c <__NVIC_EnableIRQ>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff ffa2 	bl	8002984 <SysTick_Config>
 8002a40:	4603      	mov	r3, r0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a58:	f7ff f996 	bl	8001d88 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d101      	bne.n	8002a68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e099      	b.n	8002b9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a88:	e00f      	b.n	8002aaa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a8a:	f7ff f97d 	bl	8001d88 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b05      	cmp	r3, #5
 8002a96:	d908      	bls.n	8002aaa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e078      	b.n	8002b9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1e8      	bne.n	8002a8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	4b38      	ldr	r3, [pc, #224]	@ (8002ba4 <HAL_DMA_Init+0x158>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ad6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d107      	bne.n	8002b14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f023 0307 	bic.w	r3, r3, #7
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d117      	bne.n	8002b6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00e      	beq.n	8002b6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 faab 	bl	80030ac <DMA_CheckFifoParam>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2240      	movs	r2, #64	@ 0x40
 8002b60:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e016      	b.n	8002b9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fa62 	bl	8003040 <DMA_CalcBaseAndBitshift>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b84:	223f      	movs	r2, #63	@ 0x3f
 8002b86:	409a      	lsls	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3718      	adds	r7, #24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	f010803f 	.word	0xf010803f

08002ba8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_DMA_Start_IT+0x26>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e040      	b.n	8002c50 <HAL_DMA_Start_IT+0xa8>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d12f      	bne.n	8002c42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2202      	movs	r2, #2
 8002be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f9f4 	bl	8002fe4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c00:	223f      	movs	r2, #63	@ 0x3f
 8002c02:	409a      	lsls	r2, r3
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0216 	orr.w	r2, r2, #22
 8002c16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d007      	beq.n	8002c30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0208 	orr.w	r2, r2, #8
 8002c2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	e005      	b.n	8002c4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d004      	beq.n	8002c76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2280      	movs	r2, #128	@ 0x80
 8002c70:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e00c      	b.n	8002c90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2205      	movs	r2, #5
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0201 	bic.w	r2, r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ca8:	4b8e      	ldr	r3, [pc, #568]	@ (8002ee4 <HAL_DMA_IRQHandler+0x248>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a8e      	ldr	r2, [pc, #568]	@ (8002ee8 <HAL_DMA_IRQHandler+0x24c>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	0a9b      	lsrs	r3, r3, #10
 8002cb4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	409a      	lsls	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d01a      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d013      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0204 	bic.w	r2, r2, #4
 8002cee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf4:	2208      	movs	r2, #8
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d00:	f043 0201 	orr.w	r2, r3, #1
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d012      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00b      	beq.n	8002d3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d36:	f043 0202 	orr.w	r2, r3, #2
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d42:	2204      	movs	r2, #4
 8002d44:	409a      	lsls	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d012      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00b      	beq.n	8002d74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d60:	2204      	movs	r2, #4
 8002d62:	409a      	lsls	r2, r3
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6c:	f043 0204 	orr.w	r2, r3, #4
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d78:	2210      	movs	r2, #16
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d043      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d03c      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d96:	2210      	movs	r2, #16
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d018      	beq.n	8002dde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d108      	bne.n	8002dcc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d024      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	4798      	blx	r3
 8002dca:	e01f      	b.n	8002e0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01b      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	4798      	blx	r3
 8002ddc:	e016      	b.n	8002e0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d107      	bne.n	8002dfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f022 0208 	bic.w	r2, r2, #8
 8002dfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e10:	2220      	movs	r2, #32
 8002e12:	409a      	lsls	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 808f 	beq.w	8002f3c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8087 	beq.w	8002f3c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e32:	2220      	movs	r2, #32
 8002e34:	409a      	lsls	r2, r3
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b05      	cmp	r3, #5
 8002e44:	d136      	bne.n	8002eb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0216 	bic.w	r2, r2, #22
 8002e54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695a      	ldr	r2, [r3, #20]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <HAL_DMA_IRQHandler+0x1da>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0208 	bic.w	r2, r2, #8
 8002e84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8a:	223f      	movs	r2, #63	@ 0x3f
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d07e      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	4798      	blx	r3
        }
        return;
 8002eb2:	e079      	b.n	8002fa8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d01d      	beq.n	8002efe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10d      	bne.n	8002eec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d031      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	4798      	blx	r3
 8002ee0:	e02c      	b.n	8002f3c <HAL_DMA_IRQHandler+0x2a0>
 8002ee2:	bf00      	nop
 8002ee4:	20000010 	.word	0x20000010
 8002ee8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d023      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	4798      	blx	r3
 8002efc:	e01e      	b.n	8002f3c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10f      	bne.n	8002f2c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0210 	bic.w	r2, r2, #16
 8002f1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d032      	beq.n	8002faa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d022      	beq.n	8002f96 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2205      	movs	r2, #5
 8002f54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0201 	bic.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d307      	bcc.n	8002f84 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f2      	bne.n	8002f68 <HAL_DMA_IRQHandler+0x2cc>
 8002f82:	e000      	b.n	8002f86 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f84:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	4798      	blx	r3
 8002fa6:	e000      	b.n	8002faa <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fa8:	bf00      	nop
    }
  }
}
 8002faa:	3718      	adds	r7, #24
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fbe:	b2db      	uxtb	r3, r3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003000:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2b40      	cmp	r3, #64	@ 0x40
 8003010:	d108      	bne.n	8003024 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003022:	e007      	b.n	8003034 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	60da      	str	r2, [r3, #12]
}
 8003034:	bf00      	nop
 8003036:	3714      	adds	r7, #20
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	3b10      	subs	r3, #16
 8003050:	4a14      	ldr	r2, [pc, #80]	@ (80030a4 <DMA_CalcBaseAndBitshift+0x64>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	091b      	lsrs	r3, r3, #4
 8003058:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800305a:	4a13      	ldr	r2, [pc, #76]	@ (80030a8 <DMA_CalcBaseAndBitshift+0x68>)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4413      	add	r3, r2
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d909      	bls.n	8003082 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003076:	f023 0303 	bic.w	r3, r3, #3
 800307a:	1d1a      	adds	r2, r3, #4
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003080:	e007      	b.n	8003092 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800308a:	f023 0303 	bic.w	r3, r3, #3
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003096:	4618      	mov	r0, r3
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	aaaaaaab 	.word	0xaaaaaaab
 80030a8:	0800d41c 	.word	0x0800d41c

080030ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d11f      	bne.n	8003106 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d856      	bhi.n	800317a <DMA_CheckFifoParam+0xce>
 80030cc:	a201      	add	r2, pc, #4	@ (adr r2, 80030d4 <DMA_CheckFifoParam+0x28>)
 80030ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d2:	bf00      	nop
 80030d4:	080030e5 	.word	0x080030e5
 80030d8:	080030f7 	.word	0x080030f7
 80030dc:	080030e5 	.word	0x080030e5
 80030e0:	0800317b 	.word	0x0800317b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d046      	beq.n	800317e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f4:	e043      	b.n	800317e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030fe:	d140      	bne.n	8003182 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003104:	e03d      	b.n	8003182 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800310e:	d121      	bne.n	8003154 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b03      	cmp	r3, #3
 8003114:	d837      	bhi.n	8003186 <DMA_CheckFifoParam+0xda>
 8003116:	a201      	add	r2, pc, #4	@ (adr r2, 800311c <DMA_CheckFifoParam+0x70>)
 8003118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311c:	0800312d 	.word	0x0800312d
 8003120:	08003133 	.word	0x08003133
 8003124:	0800312d 	.word	0x0800312d
 8003128:	08003145 	.word	0x08003145
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
      break;
 8003130:	e030      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003136:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d025      	beq.n	800318a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003142:	e022      	b.n	800318a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003148:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800314c:	d11f      	bne.n	800318e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003152:	e01c      	b.n	800318e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d903      	bls.n	8003162 <DMA_CheckFifoParam+0xb6>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b03      	cmp	r3, #3
 800315e:	d003      	beq.n	8003168 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003160:	e018      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	73fb      	strb	r3, [r7, #15]
      break;
 8003166:	e015      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00e      	beq.n	8003192 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
      break;
 8003178:	e00b      	b.n	8003192 <DMA_CheckFifoParam+0xe6>
      break;
 800317a:	bf00      	nop
 800317c:	e00a      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      break;
 800317e:	bf00      	nop
 8003180:	e008      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      break;
 8003182:	bf00      	nop
 8003184:	e006      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      break;
 8003186:	bf00      	nop
 8003188:	e004      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      break;
 800318a:	bf00      	nop
 800318c:	e002      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      break;   
 800318e:	bf00      	nop
 8003190:	e000      	b.n	8003194 <DMA_CheckFifoParam+0xe8>
      break;
 8003192:	bf00      	nop
    }
  } 
  
  return status; 
 8003194:	7bfb      	ldrb	r3, [r7, #15]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop

080031a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b089      	sub	sp, #36	@ 0x24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ba:	2300      	movs	r3, #0
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	e159      	b.n	8003474 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031c0:	2201      	movs	r2, #1
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	4013      	ands	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	429a      	cmp	r2, r3
 80031da:	f040 8148 	bne.w	800346e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d005      	beq.n	80031f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d130      	bne.n	8003258 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	2203      	movs	r2, #3
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800322c:	2201      	movs	r2, #1
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 0201 	and.w	r2, r3, #1
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 0303 	and.w	r3, r3, #3
 8003260:	2b03      	cmp	r3, #3
 8003262:	d017      	beq.n	8003294 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	2203      	movs	r2, #3
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d123      	bne.n	80032e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	08da      	lsrs	r2, r3, #3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3208      	adds	r2, #8
 80032a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	220f      	movs	r2, #15
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	08da      	lsrs	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3208      	adds	r2, #8
 80032e2:	69b9      	ldr	r1, [r7, #24]
 80032e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	2203      	movs	r2, #3
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 0203 	and.w	r2, r3, #3
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80a2 	beq.w	800346e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	4b57      	ldr	r3, [pc, #348]	@ (800348c <HAL_GPIO_Init+0x2e8>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	4a56      	ldr	r2, [pc, #344]	@ (800348c <HAL_GPIO_Init+0x2e8>)
 8003334:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003338:	6453      	str	r3, [r2, #68]	@ 0x44
 800333a:	4b54      	ldr	r3, [pc, #336]	@ (800348c <HAL_GPIO_Init+0x2e8>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003346:	4a52      	ldr	r2, [pc, #328]	@ (8003490 <HAL_GPIO_Init+0x2ec>)
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	3302      	adds	r3, #2
 800334e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	220f      	movs	r2, #15
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	4013      	ands	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a49      	ldr	r2, [pc, #292]	@ (8003494 <HAL_GPIO_Init+0x2f0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d019      	beq.n	80033a6 <HAL_GPIO_Init+0x202>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a48      	ldr	r2, [pc, #288]	@ (8003498 <HAL_GPIO_Init+0x2f4>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d013      	beq.n	80033a2 <HAL_GPIO_Init+0x1fe>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a47      	ldr	r2, [pc, #284]	@ (800349c <HAL_GPIO_Init+0x2f8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00d      	beq.n	800339e <HAL_GPIO_Init+0x1fa>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a46      	ldr	r2, [pc, #280]	@ (80034a0 <HAL_GPIO_Init+0x2fc>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d007      	beq.n	800339a <HAL_GPIO_Init+0x1f6>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a45      	ldr	r2, [pc, #276]	@ (80034a4 <HAL_GPIO_Init+0x300>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d101      	bne.n	8003396 <HAL_GPIO_Init+0x1f2>
 8003392:	2304      	movs	r3, #4
 8003394:	e008      	b.n	80033a8 <HAL_GPIO_Init+0x204>
 8003396:	2307      	movs	r3, #7
 8003398:	e006      	b.n	80033a8 <HAL_GPIO_Init+0x204>
 800339a:	2303      	movs	r3, #3
 800339c:	e004      	b.n	80033a8 <HAL_GPIO_Init+0x204>
 800339e:	2302      	movs	r3, #2
 80033a0:	e002      	b.n	80033a8 <HAL_GPIO_Init+0x204>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_GPIO_Init+0x204>
 80033a6:	2300      	movs	r3, #0
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	f002 0203 	and.w	r2, r2, #3
 80033ae:	0092      	lsls	r2, r2, #2
 80033b0:	4093      	lsls	r3, r2
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033b8:	4935      	ldr	r1, [pc, #212]	@ (8003490 <HAL_GPIO_Init+0x2ec>)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	3302      	adds	r3, #2
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033c6:	4b38      	ldr	r3, [pc, #224]	@ (80034a8 <HAL_GPIO_Init+0x304>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	43db      	mvns	r3, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ea:	4a2f      	ldr	r2, [pc, #188]	@ (80034a8 <HAL_GPIO_Init+0x304>)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033f0:	4b2d      	ldr	r3, [pc, #180]	@ (80034a8 <HAL_GPIO_Init+0x304>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003414:	4a24      	ldr	r2, [pc, #144]	@ (80034a8 <HAL_GPIO_Init+0x304>)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800341a:	4b23      	ldr	r3, [pc, #140]	@ (80034a8 <HAL_GPIO_Init+0x304>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	43db      	mvns	r3, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4013      	ands	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800343e:	4a1a      	ldr	r2, [pc, #104]	@ (80034a8 <HAL_GPIO_Init+0x304>)
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003444:	4b18      	ldr	r3, [pc, #96]	@ (80034a8 <HAL_GPIO_Init+0x304>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003468:	4a0f      	ldr	r2, [pc, #60]	@ (80034a8 <HAL_GPIO_Init+0x304>)
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	3301      	adds	r3, #1
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	2b0f      	cmp	r3, #15
 8003478:	f67f aea2 	bls.w	80031c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800347c:	bf00      	nop
 800347e:	bf00      	nop
 8003480:	3724      	adds	r7, #36	@ 0x24
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
 8003490:	40013800 	.word	0x40013800
 8003494:	40020000 	.word	0x40020000
 8003498:	40020400 	.word	0x40020400
 800349c:	40020800 	.word	0x40020800
 80034a0:	40020c00 	.word	0x40020c00
 80034a4:	40021000 	.word	0x40021000
 80034a8:	40013c00 	.word	0x40013c00

080034ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	460b      	mov	r3, r1
 80034b6:	807b      	strh	r3, [r7, #2]
 80034b8:	4613      	mov	r3, r2
 80034ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034bc:	787b      	ldrb	r3, [r7, #1]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034c2:	887a      	ldrh	r2, [r7, #2]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034c8:	e003      	b.n	80034d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034ca:	887b      	ldrh	r3, [r7, #2]
 80034cc:	041a      	lsls	r2, r3, #16
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	619a      	str	r2, [r3, #24]
}
 80034d2:	bf00      	nop
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e12b      	b.n	800374a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d106      	bne.n	800350c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7fe fa02 	bl	8001910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2224      	movs	r2, #36	@ 0x24
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0201 	bic.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003532:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003542:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003544:	f004 fa64 	bl	8007a10 <HAL_RCC_GetPCLK1Freq>
 8003548:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	4a81      	ldr	r2, [pc, #516]	@ (8003754 <HAL_I2C_Init+0x274>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d807      	bhi.n	8003564 <HAL_I2C_Init+0x84>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4a80      	ldr	r2, [pc, #512]	@ (8003758 <HAL_I2C_Init+0x278>)
 8003558:	4293      	cmp	r3, r2
 800355a:	bf94      	ite	ls
 800355c:	2301      	movls	r3, #1
 800355e:	2300      	movhi	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	e006      	b.n	8003572 <HAL_I2C_Init+0x92>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	4a7d      	ldr	r2, [pc, #500]	@ (800375c <HAL_I2C_Init+0x27c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	bf94      	ite	ls
 800356c:	2301      	movls	r3, #1
 800356e:	2300      	movhi	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e0e7      	b.n	800374a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4a78      	ldr	r2, [pc, #480]	@ (8003760 <HAL_I2C_Init+0x280>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	0c9b      	lsrs	r3, r3, #18
 8003584:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4a6a      	ldr	r2, [pc, #424]	@ (8003754 <HAL_I2C_Init+0x274>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d802      	bhi.n	80035b4 <HAL_I2C_Init+0xd4>
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	3301      	adds	r3, #1
 80035b2:	e009      	b.n	80035c8 <HAL_I2C_Init+0xe8>
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035ba:	fb02 f303 	mul.w	r3, r2, r3
 80035be:	4a69      	ldr	r2, [pc, #420]	@ (8003764 <HAL_I2C_Init+0x284>)
 80035c0:	fba2 2303 	umull	r2, r3, r2, r3
 80035c4:	099b      	lsrs	r3, r3, #6
 80035c6:	3301      	adds	r3, #1
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6812      	ldr	r2, [r2, #0]
 80035cc:	430b      	orrs	r3, r1
 80035ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	495c      	ldr	r1, [pc, #368]	@ (8003754 <HAL_I2C_Init+0x274>)
 80035e4:	428b      	cmp	r3, r1
 80035e6:	d819      	bhi.n	800361c <HAL_I2C_Init+0x13c>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	1e59      	subs	r1, r3, #1
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80035f6:	1c59      	adds	r1, r3, #1
 80035f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035fc:	400b      	ands	r3, r1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <HAL_I2C_Init+0x138>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1e59      	subs	r1, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003610:	3301      	adds	r3, #1
 8003612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003616:	e051      	b.n	80036bc <HAL_I2C_Init+0x1dc>
 8003618:	2304      	movs	r3, #4
 800361a:	e04f      	b.n	80036bc <HAL_I2C_Init+0x1dc>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d111      	bne.n	8003648 <HAL_I2C_Init+0x168>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1e58      	subs	r0, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	460b      	mov	r3, r1
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	440b      	add	r3, r1
 8003632:	fbb0 f3f3 	udiv	r3, r0, r3
 8003636:	3301      	adds	r3, #1
 8003638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf0c      	ite	eq
 8003640:	2301      	moveq	r3, #1
 8003642:	2300      	movne	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	e012      	b.n	800366e <HAL_I2C_Init+0x18e>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1e58      	subs	r0, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6859      	ldr	r1, [r3, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	0099      	lsls	r1, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	fbb0 f3f3 	udiv	r3, r0, r3
 800365e:	3301      	adds	r3, #1
 8003660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003664:	2b00      	cmp	r3, #0
 8003666:	bf0c      	ite	eq
 8003668:	2301      	moveq	r3, #1
 800366a:	2300      	movne	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_I2C_Init+0x196>
 8003672:	2301      	movs	r3, #1
 8003674:	e022      	b.n	80036bc <HAL_I2C_Init+0x1dc>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10e      	bne.n	800369c <HAL_I2C_Init+0x1bc>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1e58      	subs	r0, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6859      	ldr	r1, [r3, #4]
 8003686:	460b      	mov	r3, r1
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	440b      	add	r3, r1
 800368c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003690:	3301      	adds	r3, #1
 8003692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800369a:	e00f      	b.n	80036bc <HAL_I2C_Init+0x1dc>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	1e58      	subs	r0, r3, #1
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6859      	ldr	r1, [r3, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	0099      	lsls	r1, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80036b2:	3301      	adds	r3, #1
 80036b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	6809      	ldr	r1, [r1, #0]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69da      	ldr	r2, [r3, #28]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6911      	ldr	r1, [r2, #16]
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	68d2      	ldr	r2, [r2, #12]
 80036f6:	4311      	orrs	r1, r2
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	000186a0 	.word	0x000186a0
 8003758:	001e847f 	.word	0x001e847f
 800375c:	003d08ff 	.word	0x003d08ff
 8003760:	431bde83 	.word	0x431bde83
 8003764:	10624dd3 	.word	0x10624dd3

08003768 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377a:	2b80      	cmp	r3, #128	@ 0x80
 800377c:	d103      	bne.n	8003786 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2200      	movs	r2, #0
 8003784:	611a      	str	r2, [r3, #16]
  }
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	@ 0x28
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	4608      	mov	r0, r1
 800379e:	4611      	mov	r1, r2
 80037a0:	461a      	mov	r2, r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	817b      	strh	r3, [r7, #10]
 80037a6:	460b      	mov	r3, r1
 80037a8:	813b      	strh	r3, [r7, #8]
 80037aa:	4613      	mov	r3, r2
 80037ac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037b2:	f7fe fae9 	bl	8001d88 <HAL_GetTick>
 80037b6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	f040 8136 	bne.w	8003a32 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80037c6:	4b9d      	ldr	r3, [pc, #628]	@ (8003a3c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	08db      	lsrs	r3, r3, #3
 80037cc:	4a9c      	ldr	r2, [pc, #624]	@ (8003a40 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 80037ce:	fba2 2303 	umull	r2, r3, r2, r3
 80037d2:	0a1a      	lsrs	r2, r3, #8
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	009a      	lsls	r2, r3, #2
 80037dc:	4413      	add	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d112      	bne.n	8003812 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	f043 0220 	orr.w	r2, r3, #32
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800380e:	2302      	movs	r3, #2
 8003810:	e110      	b.n	8003a34 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b02      	cmp	r3, #2
 800381e:	d0df      	beq.n	80037e0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_I2C_Mem_Write_DMA+0x9a>
 800382a:	2302      	movs	r3, #2
 800382c:	e102      	b.n	8003a34 <HAL_I2C_Mem_Write_DMA+0x2a0>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b01      	cmp	r3, #1
 8003842:	d007      	beq.n	8003854 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003862:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2221      	movs	r2, #33	@ 0x21
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2240      	movs	r2, #64	@ 0x40
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800387e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003884:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4a6c      	ldr	r2, [pc, #432]	@ (8003a44 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8003894:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003896:	897a      	ldrh	r2, [r7, #10]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800389c:	893a      	ldrh	r2, [r7, #8]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80038a2:	88fa      	ldrh	r2, [r7, #6]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 80a9 	beq.w	8003a0a <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d02a      	beq.n	8003916 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c4:	4a60      	ldr	r2, [pc, #384]	@ (8003a48 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80038c6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038cc:	4a5f      	ldr	r2, [pc, #380]	@ (8003a4c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80038ce:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d4:	2200      	movs	r2, #0
 80038d6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038dc:	2200      	movs	r2, #0
 80038de:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e4:	2200      	movs	r2, #0
 80038e6:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ec:	2200      	movs	r2, #0
 80038ee:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f8:	4619      	mov	r1, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3310      	adds	r3, #16
 8003900:	461a      	mov	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003906:	f7ff f94f 	bl	8002ba8 <HAL_DMA_Start_IT>
 800390a:	4603      	mov	r3, r0
 800390c:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800390e:	7efb      	ldrb	r3, [r7, #27]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d166      	bne.n	80039e2 <HAL_I2C_Mem_Write_DMA+0x24e>
 8003914:	e013      	b.n	800393e <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2220      	movs	r2, #32
 800391a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e07a      	b.n	8003a34 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800393e:	88f8      	ldrh	r0, [r7, #6]
 8003940:	893a      	ldrh	r2, [r7, #8]
 8003942:	8979      	ldrh	r1, [r7, #10]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	9301      	str	r3, [sp, #4]
 8003948:	2323      	movs	r3, #35	@ 0x23
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	4603      	mov	r3, r0
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f001 fda4 	bl	800549c <I2C_RequestMemoryWrite>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d022      	beq.n	80039a0 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff f97a 	bl	8002c58 <HAL_DMA_Abort_IT>
 8003964:	4603      	mov	r3, r0
 8003966:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800396c:	2200      	movs	r2, #0
 800396e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800397e:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0201 	bic.w	r2, r2, #1
 800399a:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e049      	b.n	8003a34 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039a0:	2300      	movs	r3, #0
 80039a2:	613b      	str	r3, [r7, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039cc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685a      	ldr	r2, [r3, #4]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039dc:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80039de:	2300      	movs	r3, #0
 80039e0:	e028      	b.n	8003a34 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f6:	f043 0210 	orr.w	r2, r3, #16
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e014      	b.n	8003a34 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e000      	b.n	8003a34 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8003a32:	2302      	movs	r3, #2
  }
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3720      	adds	r7, #32
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20000010 	.word	0x20000010
 8003a40:	14f8b589 	.word	0x14f8b589
 8003a44:	ffff0000 	.word	0xffff0000
 8003a48:	080055c9 	.word	0x080055c9
 8003a4c:	08005787 	.word	0x08005787

08003a50 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08a      	sub	sp, #40	@ 0x28
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003a60:	f7fe f992 	bl	8001d88 <HAL_GetTick>
 8003a64:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b20      	cmp	r3, #32
 8003a74:	f040 8111 	bne.w	8003c9a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	2319      	movs	r3, #25
 8003a7e:	2201      	movs	r2, #1
 8003a80:	4988      	ldr	r1, [pc, #544]	@ (8003ca4 <HAL_I2C_IsDeviceReady+0x254>)
 8003a82:	68f8      	ldr	r0, [r7, #12]
 8003a84:	f001 ff64 	bl	8005950 <I2C_WaitOnFlagUntilTimeout>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e104      	b.n	8003c9c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_I2C_IsDeviceReady+0x50>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e0fd      	b.n	8003c9c <HAL_I2C_IsDeviceReady+0x24c>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d007      	beq.n	8003ac6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ad4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2224      	movs	r2, #36	@ 0x24
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4a70      	ldr	r2, [pc, #448]	@ (8003ca8 <HAL_I2C_IsDeviceReady+0x258>)
 8003ae8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003af8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f001 ff22 	bl	8005950 <I2C_WaitOnFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00d      	beq.n	8003b2e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b20:	d103      	bne.n	8003b2a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b28:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e0b6      	b.n	8003c9c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b2e:	897b      	ldrh	r3, [r7, #10]
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	461a      	mov	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b3c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003b3e:	f7fe f923 	bl	8001d88 <HAL_GetTick>
 8003b42:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	bf0c      	ite	eq
 8003b52:	2301      	moveq	r3, #1
 8003b54:	2300      	movne	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b68:	bf0c      	ite	eq
 8003b6a:	2301      	moveq	r3, #1
 8003b6c:	2300      	movne	r3, #0
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b72:	e025      	b.n	8003bc0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b74:	f7fe f908 	bl	8001d88 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d302      	bcc.n	8003b8a <HAL_I2C_IsDeviceReady+0x13a>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d103      	bne.n	8003b92 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	22a0      	movs	r2, #160	@ 0xa0
 8003b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	f003 0302 	and.w	r3, r3, #2
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	bf0c      	ite	eq
 8003ba0:	2301      	moveq	r3, #1
 8003ba2:	2300      	movne	r3, #0
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb6:	bf0c      	ite	eq
 8003bb8:	2301      	moveq	r3, #1
 8003bba:	2300      	movne	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2ba0      	cmp	r3, #160	@ 0xa0
 8003bca:	d005      	beq.n	8003bd8 <HAL_I2C_IsDeviceReady+0x188>
 8003bcc:	7dfb      	ldrb	r3, [r7, #23]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d102      	bne.n	8003bd8 <HAL_I2C_IsDeviceReady+0x188>
 8003bd2:	7dbb      	ldrb	r3, [r7, #22]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0cd      	beq.n	8003b74 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d129      	bne.n	8003c42 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bfc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	2319      	movs	r3, #25
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	4921      	ldr	r1, [pc, #132]	@ (8003ca4 <HAL_I2C_IsDeviceReady+0x254>)
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f001 fe96 	bl	8005950 <I2C_WaitOnFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e036      	b.n	8003c9c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e02c      	b.n	8003c9c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c50:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c5a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	2319      	movs	r3, #25
 8003c62:	2201      	movs	r2, #1
 8003c64:	490f      	ldr	r1, [pc, #60]	@ (8003ca4 <HAL_I2C_IsDeviceReady+0x254>)
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f001 fe72 	bl	8005950 <I2C_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e012      	b.n	8003c9c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	f4ff af32 	bcc.w	8003aea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003c9a:	2302      	movs	r3, #2
  }
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3720      	adds	r7, #32
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	00100002 	.word	0x00100002
 8003ca8:	ffff0000 	.word	0xffff0000

08003cac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ccc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cd4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	d003      	beq.n	8003ce4 <HAL_I2C_EV_IRQHandler+0x38>
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	2b40      	cmp	r3, #64	@ 0x40
 8003ce0:	f040 80c1 	bne.w	8003e66 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10d      	bne.n	8003d1a <HAL_I2C_EV_IRQHandler+0x6e>
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003d04:	d003      	beq.n	8003d0e <HAL_I2C_EV_IRQHandler+0x62>
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003d0c:	d101      	bne.n	8003d12 <HAL_I2C_EV_IRQHandler+0x66>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e000      	b.n	8003d14 <HAL_I2C_EV_IRQHandler+0x68>
 8003d12:	2300      	movs	r3, #0
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	f000 8132 	beq.w	8003f7e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00c      	beq.n	8003d3e <HAL_I2C_EV_IRQHandler+0x92>
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	0a5b      	lsrs	r3, r3, #9
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d006      	beq.n	8003d3e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f001 ffd0 	bl	8005cd6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fd91 	bl	800485e <I2C_Master_SB>
 8003d3c:	e092      	b.n	8003e64 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	08db      	lsrs	r3, r3, #3
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <HAL_I2C_EV_IRQHandler+0xb2>
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	0a5b      	lsrs	r3, r3, #9
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fe07 	bl	800496a <I2C_Master_ADD10>
 8003d5c:	e082      	b.n	8003e64 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	085b      	lsrs	r3, r3, #1
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d009      	beq.n	8003d7e <HAL_I2C_EV_IRQHandler+0xd2>
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	0a5b      	lsrs	r3, r3, #9
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d003      	beq.n	8003d7e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fe21 	bl	80049be <I2C_Master_ADDR>
 8003d7c:	e072      	b.n	8003e64 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	089b      	lsrs	r3, r3, #2
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d03b      	beq.n	8003e02 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d98:	f000 80f3 	beq.w	8003f82 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	09db      	lsrs	r3, r3, #7
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00f      	beq.n	8003dc8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	0a9b      	lsrs	r3, r3, #10
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d009      	beq.n	8003dc8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	089b      	lsrs	r3, r3, #2
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d103      	bne.n	8003dc8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f9e9 	bl	8004198 <I2C_MasterTransmit_TXE>
 8003dc6:	e04d      	b.n	8003e64 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80d6 	beq.w	8003f82 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	0a5b      	lsrs	r3, r3, #9
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 80cf 	beq.w	8003f82 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003de4:	7bbb      	ldrb	r3, [r7, #14]
 8003de6:	2b21      	cmp	r3, #33	@ 0x21
 8003de8:	d103      	bne.n	8003df2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fa70 	bl	80042d0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003df0:	e0c7      	b.n	8003f82 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	2b40      	cmp	r3, #64	@ 0x40
 8003df6:	f040 80c4 	bne.w	8003f82 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fade 	bl	80043bc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e00:	e0bf      	b.n	8003f82 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e10:	f000 80b7 	beq.w	8003f82 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00f      	beq.n	8003e40 <HAL_I2C_EV_IRQHandler+0x194>
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	0a9b      	lsrs	r3, r3, #10
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d009      	beq.n	8003e40 <HAL_I2C_EV_IRQHandler+0x194>
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	089b      	lsrs	r3, r3, #2
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d103      	bne.n	8003e40 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fb57 	bl	80044ec <I2C_MasterReceive_RXNE>
 8003e3e:	e011      	b.n	8003e64 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 809a 	beq.w	8003f82 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	0a5b      	lsrs	r3, r3, #9
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8093 	beq.w	8003f82 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fc0d 	bl	800467c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e62:	e08e      	b.n	8003f82 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e64:	e08d      	b.n	8003f82 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d004      	beq.n	8003e78 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	e007      	b.n	8003e88 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	085b      	lsrs	r3, r3, #1
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d012      	beq.n	8003eba <HAL_I2C_EV_IRQHandler+0x20e>
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	0a5b      	lsrs	r3, r3, #9
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00c      	beq.n	8003eba <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003eb0:	69b9      	ldr	r1, [r7, #24]
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 ffd2 	bl	8004e5c <I2C_Slave_ADDR>
 8003eb8:	e066      	b.n	8003f88 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d009      	beq.n	8003eda <HAL_I2C_EV_IRQHandler+0x22e>
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	0a5b      	lsrs	r3, r3, #9
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f001 f80c 	bl	8004ef0 <I2C_Slave_STOPF>
 8003ed8:	e056      	b.n	8003f88 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003eda:	7bbb      	ldrb	r3, [r7, #14]
 8003edc:	2b21      	cmp	r3, #33	@ 0x21
 8003ede:	d002      	beq.n	8003ee6 <HAL_I2C_EV_IRQHandler+0x23a>
 8003ee0:	7bbb      	ldrb	r3, [r7, #14]
 8003ee2:	2b29      	cmp	r3, #41	@ 0x29
 8003ee4:	d125      	bne.n	8003f32 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	09db      	lsrs	r3, r3, #7
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00f      	beq.n	8003f12 <HAL_I2C_EV_IRQHandler+0x266>
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	0a9b      	lsrs	r3, r3, #10
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d009      	beq.n	8003f12 <HAL_I2C_EV_IRQHandler+0x266>
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	089b      	lsrs	r3, r3, #2
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d103      	bne.n	8003f12 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fee8 	bl	8004ce0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f10:	e039      	b.n	8003f86 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	089b      	lsrs	r3, r3, #2
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d033      	beq.n	8003f86 <HAL_I2C_EV_IRQHandler+0x2da>
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	0a5b      	lsrs	r3, r3, #9
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d02d      	beq.n	8003f86 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 ff15 	bl	8004d5a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f30:	e029      	b.n	8003f86 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	099b      	lsrs	r3, r3, #6
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00f      	beq.n	8003f5e <HAL_I2C_EV_IRQHandler+0x2b2>
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	0a9b      	lsrs	r3, r3, #10
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <HAL_I2C_EV_IRQHandler+0x2b2>
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	089b      	lsrs	r3, r3, #2
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d103      	bne.n	8003f5e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 ff20 	bl	8004d9c <I2C_SlaveReceive_RXNE>
 8003f5c:	e014      	b.n	8003f88 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	089b      	lsrs	r3, r3, #2
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00e      	beq.n	8003f88 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	0a5b      	lsrs	r3, r3, #9
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d008      	beq.n	8003f88 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 ff4e 	bl	8004e18 <I2C_SlaveReceive_BTF>
 8003f7c:	e004      	b.n	8003f88 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003f7e:	bf00      	nop
 8003f80:	e002      	b.n	8003f88 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f82:	bf00      	nop
 8003f84:	e000      	b.n	8003f88 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f86:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003f88:	3720      	adds	r7, #32
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b08a      	sub	sp, #40	@ 0x28
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fb0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	0a1b      	lsrs	r3, r3, #8
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00e      	beq.n	8003fdc <HAL_I2C_ER_IRQHandler+0x4e>
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	0a1b      	lsrs	r3, r3, #8
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d008      	beq.n	8003fdc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003fda:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	0a5b      	lsrs	r3, r3, #9
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00e      	beq.n	8004006 <HAL_I2C_ER_IRQHandler+0x78>
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	0a1b      	lsrs	r3, r3, #8
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff6:	f043 0302 	orr.w	r3, r3, #2
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004004:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	0a9b      	lsrs	r3, r3, #10
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d03f      	beq.n	8004092 <HAL_I2C_ER_IRQHandler+0x104>
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	0a1b      	lsrs	r3, r3, #8
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d039      	beq.n	8004092 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800401e:	7efb      	ldrb	r3, [r7, #27]
 8004020:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004026:	b29b      	uxth	r3, r3
 8004028:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004030:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004036:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004038:	7ebb      	ldrb	r3, [r7, #26]
 800403a:	2b20      	cmp	r3, #32
 800403c:	d112      	bne.n	8004064 <HAL_I2C_ER_IRQHandler+0xd6>
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10f      	bne.n	8004064 <HAL_I2C_ER_IRQHandler+0xd6>
 8004044:	7cfb      	ldrb	r3, [r7, #19]
 8004046:	2b21      	cmp	r3, #33	@ 0x21
 8004048:	d008      	beq.n	800405c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800404a:	7cfb      	ldrb	r3, [r7, #19]
 800404c:	2b29      	cmp	r3, #41	@ 0x29
 800404e:	d005      	beq.n	800405c <HAL_I2C_ER_IRQHandler+0xce>
 8004050:	7cfb      	ldrb	r3, [r7, #19]
 8004052:	2b28      	cmp	r3, #40	@ 0x28
 8004054:	d106      	bne.n	8004064 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b21      	cmp	r3, #33	@ 0x21
 800405a:	d103      	bne.n	8004064 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f001 f877 	bl	8005150 <I2C_Slave_AF>
 8004062:	e016      	b.n	8004092 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800406c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	f043 0304 	orr.w	r3, r3, #4
 8004074:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004076:	7efb      	ldrb	r3, [r7, #27]
 8004078:	2b10      	cmp	r3, #16
 800407a:	d002      	beq.n	8004082 <HAL_I2C_ER_IRQHandler+0xf4>
 800407c:	7efb      	ldrb	r3, [r7, #27]
 800407e:	2b40      	cmp	r3, #64	@ 0x40
 8004080:	d107      	bne.n	8004092 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004090:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	0adb      	lsrs	r3, r3, #11
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00e      	beq.n	80040bc <HAL_I2C_ER_IRQHandler+0x12e>
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	0a1b      	lsrs	r3, r3, #8
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	f043 0308 	orr.w	r3, r3, #8
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80040ba:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d008      	beq.n	80040d4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f001 f8b2 	bl	8005238 <I2C_ITError>
  }
}
 80040d4:	bf00      	nop
 80040d6:	3728      	adds	r7, #40	@ 0x28
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	70fb      	strb	r3, [r7, #3]
 8004138:	4613      	mov	r3, r2
 800413a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004150:	bf00      	nop
 8004152:	370c      	adds	r7, #12
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d150      	bne.n	8004260 <I2C_MasterTransmit_TXE+0xc8>
 80041be:	7bfb      	ldrb	r3, [r7, #15]
 80041c0:	2b21      	cmp	r3, #33	@ 0x21
 80041c2:	d14d      	bne.n	8004260 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d01d      	beq.n	8004206 <I2C_MasterTransmit_TXE+0x6e>
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d01a      	beq.n	8004206 <I2C_MasterTransmit_TXE+0x6e>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041d6:	d016      	beq.n	8004206 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041e6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2211      	movs	r2, #17
 80041ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7ff ff6c 	bl	80040dc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004204:	e060      	b.n	80042c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004214:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004224:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800423a:	b2db      	uxtb	r3, r3
 800423c:	2b40      	cmp	r3, #64	@ 0x40
 800423e:	d107      	bne.n	8004250 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7fc f97b 	bl	8000544 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800424e:	e03b      	b.n	80042c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff ff3f 	bl	80040dc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800425e:	e033      	b.n	80042c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	2b21      	cmp	r3, #33	@ 0x21
 8004264:	d005      	beq.n	8004272 <I2C_MasterTransmit_TXE+0xda>
 8004266:	7bbb      	ldrb	r3, [r7, #14]
 8004268:	2b40      	cmp	r3, #64	@ 0x40
 800426a:	d12d      	bne.n	80042c8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	2b22      	cmp	r3, #34	@ 0x22
 8004270:	d12a      	bne.n	80042c8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004276:	b29b      	uxth	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	d108      	bne.n	800428e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800428a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800428c:	e01c      	b.n	80042c8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b40      	cmp	r3, #64	@ 0x40
 8004298:	d103      	bne.n	80042a2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f88e 	bl	80043bc <I2C_MemoryTransmit_TXE_BTF>
}
 80042a0:	e012      	b.n	80042c8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a6:	781a      	ldrb	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80042c6:	e7ff      	b.n	80042c8 <I2C_MasterTransmit_TXE+0x130>
 80042c8:	bf00      	nop
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042dc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b21      	cmp	r3, #33	@ 0x21
 80042e8:	d164      	bne.n	80043b4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d012      	beq.n	800431a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f8:	781a      	ldrb	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800430e:	b29b      	uxth	r3, r3
 8004310:	3b01      	subs	r3, #1
 8004312:	b29a      	uxth	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004318:	e04c      	b.n	80043b4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b08      	cmp	r3, #8
 800431e:	d01d      	beq.n	800435c <I2C_MasterTransmit_BTF+0x8c>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b20      	cmp	r3, #32
 8004324:	d01a      	beq.n	800435c <I2C_MasterTransmit_BTF+0x8c>
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800432c:	d016      	beq.n	800435c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800433c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2211      	movs	r2, #17
 8004342:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7ff fec1 	bl	80040dc <HAL_I2C_MasterTxCpltCallback>
}
 800435a:	e02b      	b.n	80043b4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800436a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800437a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b40      	cmp	r3, #64	@ 0x40
 8004394:	d107      	bne.n	80043a6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fc f8d0 	bl	8000544 <HAL_I2C_MemTxCpltCallback>
}
 80043a4:	e006      	b.n	80043b4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff fe94 	bl	80040dc <HAL_I2C_MasterTxCpltCallback>
}
 80043b4:	bf00      	nop
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d11d      	bne.n	8004410 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d10b      	bne.n	80043f4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ec:	1c9a      	adds	r2, r3, #2
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80043f2:	e077      	b.n	80044e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	121b      	asrs	r3, r3, #8
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800440e:	e069      	b.n	80044e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004414:	2b01      	cmp	r3, #1
 8004416:	d10b      	bne.n	8004430 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800441c:	b2da      	uxtb	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800442e:	e059      	b.n	80044e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004434:	2b02      	cmp	r3, #2
 8004436:	d152      	bne.n	80044de <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	2b22      	cmp	r3, #34	@ 0x22
 800443c:	d10d      	bne.n	800445a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800444c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004458:	e044      	b.n	80044e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d015      	beq.n	8004490 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	2b21      	cmp	r3, #33	@ 0x21
 8004468:	d112      	bne.n	8004490 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446e:	781a      	ldrb	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800448e:	e029      	b.n	80044e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d124      	bne.n	80044e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	2b21      	cmp	r3, #33	@ 0x21
 800449e:	d121      	bne.n	80044e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044ae:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f7fc f834 	bl	8000544 <HAL_I2C_MemTxCpltCallback>
}
 80044dc:	e002      	b.n	80044e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff f942 	bl	8003768 <I2C_Flush_DR>
}
 80044e4:	bf00      	nop
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b22      	cmp	r3, #34	@ 0x22
 80044fe:	f040 80b9 	bne.w	8004674 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004506:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800450c:	b29b      	uxth	r3, r3
 800450e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b03      	cmp	r3, #3
 8004514:	d921      	bls.n	800455a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b03      	cmp	r3, #3
 8004544:	f040 8096 	bne.w	8004674 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004556:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004558:	e08c      	b.n	8004674 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455e:	2b02      	cmp	r3, #2
 8004560:	d07f      	beq.n	8004662 <I2C_MasterReceive_RXNE+0x176>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d002      	beq.n	800456e <I2C_MasterReceive_RXNE+0x82>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d179      	bne.n	8004662 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f001 fb50 	bl	8005c14 <I2C_WaitOnSTOPRequestThroughIT>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d14c      	bne.n	8004614 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004588:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004598:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a4:	b2d2      	uxtb	r2, r2
 80045a6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b40      	cmp	r3, #64	@ 0x40
 80045d2:	d10a      	bne.n	80045ea <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff fdba 	bl	800415c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045e8:	e044      	b.n	8004674 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d002      	beq.n	80045fe <I2C_MasterReceive_RXNE+0x112>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d103      	bne.n	8004606 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	631a      	str	r2, [r3, #48]	@ 0x30
 8004604:	e002      	b.n	800460c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2212      	movs	r2, #18
 800460a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff fd6f 	bl	80040f0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004612:	e02f      	b.n	8004674 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004622:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691a      	ldr	r2, [r3, #16]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff fd88 	bl	8004170 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004660:	e008      	b.n	8004674 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004670:	605a      	str	r2, [r3, #4]
}
 8004672:	e7ff      	b.n	8004674 <I2C_MasterReceive_RXNE+0x188>
 8004674:	bf00      	nop
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004688:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b04      	cmp	r3, #4
 8004692:	d11b      	bne.n	80046cc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046a2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691a      	ldr	r2, [r3, #16]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80046ca:	e0c4      	b.n	8004856 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d129      	bne.n	800472a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046e4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	d00a      	beq.n	8004702 <I2C_MasterReceive_BTF+0x86>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d007      	beq.n	8004702 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004700:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	691a      	ldr	r2, [r3, #16]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004728:	e095      	b.n	8004856 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800472e:	b29b      	uxth	r3, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d17d      	bne.n	8004830 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d002      	beq.n	8004740 <I2C_MasterReceive_BTF+0xc4>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2b10      	cmp	r3, #16
 800473e:	d108      	bne.n	8004752 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	e016      	b.n	8004780 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b04      	cmp	r3, #4
 8004756:	d002      	beq.n	800475e <I2C_MasterReceive_BTF+0xe2>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d108      	bne.n	8004770 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	e007      	b.n	8004780 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800477e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b0:	b2d2      	uxtb	r2, r2
 80047b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80047da:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b40      	cmp	r3, #64	@ 0x40
 80047ee:	d10a      	bne.n	8004806 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7ff fcac 	bl	800415c <HAL_I2C_MemRxCpltCallback>
}
 8004804:	e027      	b.n	8004856 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b08      	cmp	r3, #8
 8004812:	d002      	beq.n	800481a <I2C_MasterReceive_BTF+0x19e>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b20      	cmp	r3, #32
 8004818:	d103      	bne.n	8004822 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004820:	e002      	b.n	8004828 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2212      	movs	r2, #18
 8004826:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7ff fc61 	bl	80040f0 <HAL_I2C_MasterRxCpltCallback>
}
 800482e:	e012      	b.n	8004856 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004856:	bf00      	nop
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b40      	cmp	r3, #64	@ 0x40
 8004870:	d117      	bne.n	80048a2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004876:	2b00      	cmp	r3, #0
 8004878:	d109      	bne.n	800488e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487e:	b2db      	uxtb	r3, r3
 8004880:	461a      	mov	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800488a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800488c:	e067      	b.n	800495e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004892:	b2db      	uxtb	r3, r3
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	b2da      	uxtb	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	611a      	str	r2, [r3, #16]
}
 80048a0:	e05d      	b.n	800495e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048aa:	d133      	bne.n	8004914 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b21      	cmp	r3, #33	@ 0x21
 80048b6:	d109      	bne.n	80048cc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	461a      	mov	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048c8:	611a      	str	r2, [r3, #16]
 80048ca:	e008      	b.n	80048de <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d004      	beq.n	80048f0 <I2C_Master_SB+0x92>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d108      	bne.n	8004902 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d032      	beq.n	800495e <I2C_Master_SB+0x100>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d02d      	beq.n	800495e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004910:	605a      	str	r2, [r3, #4]
}
 8004912:	e024      	b.n	800495e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10e      	bne.n	800493a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004920:	b29b      	uxth	r3, r3
 8004922:	11db      	asrs	r3, r3, #7
 8004924:	b2db      	uxtb	r3, r3
 8004926:	f003 0306 	and.w	r3, r3, #6
 800492a:	b2db      	uxtb	r3, r3
 800492c:	f063 030f 	orn	r3, r3, #15
 8004930:	b2da      	uxtb	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	611a      	str	r2, [r3, #16]
}
 8004938:	e011      	b.n	800495e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800493e:	2b01      	cmp	r3, #1
 8004940:	d10d      	bne.n	800495e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004946:	b29b      	uxth	r3, r3
 8004948:	11db      	asrs	r3, r3, #7
 800494a:	b2db      	uxtb	r3, r3
 800494c:	f003 0306 	and.w	r3, r3, #6
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f063 030e 	orn	r3, r3, #14
 8004956:	b2da      	uxtb	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	611a      	str	r2, [r3, #16]
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004976:	b2da      	uxtb	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004982:	2b00      	cmp	r3, #0
 8004984:	d004      	beq.n	8004990 <I2C_Master_ADD10+0x26>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800498a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800498c:	2b00      	cmp	r3, #0
 800498e:	d108      	bne.n	80049a2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00c      	beq.n	80049b2 <I2C_Master_ADD10+0x48>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d007      	beq.n	80049b2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049b0:	605a      	str	r2, [r3, #4]
  }
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80049be:	b480      	push	{r7}
 80049c0:	b091      	sub	sp, #68	@ 0x44
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049da:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b22      	cmp	r3, #34	@ 0x22
 80049e6:	f040 8169 	bne.w	8004cbc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10f      	bne.n	8004a12 <I2C_Master_ADDR+0x54>
 80049f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80049f6:	2b40      	cmp	r3, #64	@ 0x40
 80049f8:	d10b      	bne.n	8004a12 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049fa:	2300      	movs	r3, #0
 80049fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	699b      	ldr	r3, [r3, #24]
 8004a0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a10:	e160      	b.n	8004cd4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d11d      	bne.n	8004a56 <I2C_Master_ADDR+0x98>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004a22:	d118      	bne.n	8004a56 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a24:	2300      	movs	r3, #0
 8004a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a48:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	651a      	str	r2, [r3, #80]	@ 0x50
 8004a54:	e13e      	b.n	8004cd4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d113      	bne.n	8004a88 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a60:	2300      	movs	r3, #0
 8004a62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e115      	b.n	8004cb4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	f040 808a 	bne.w	8004ba8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a96:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a9a:	d137      	bne.n	8004b0c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aaa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ab6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004aba:	d113      	bne.n	8004ae4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004acc:	2300      	movs	r3, #0
 8004ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae2:	e0e7      	b.n	8004cb4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	623b      	str	r3, [r7, #32]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	623b      	str	r3, [r7, #32]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	623b      	str	r3, [r7, #32]
 8004af8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b08:	601a      	str	r2, [r3, #0]
 8004b0a:	e0d3      	b.n	8004cb4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d02e      	beq.n	8004b70 <I2C_Master_ADDR+0x1b2>
 8004b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d02b      	beq.n	8004b70 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b1a:	2b12      	cmp	r3, #18
 8004b1c:	d102      	bne.n	8004b24 <I2C_Master_ADDR+0x166>
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d125      	bne.n	8004b70 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d00e      	beq.n	8004b48 <I2C_Master_ADDR+0x18a>
 8004b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d00b      	beq.n	8004b48 <I2C_Master_ADDR+0x18a>
 8004b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b32:	2b10      	cmp	r3, #16
 8004b34:	d008      	beq.n	8004b48 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	e007      	b.n	8004b58 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b56:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b58:	2300      	movs	r3, #0
 8004b5a:	61fb      	str	r3, [r7, #28]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	61fb      	str	r3, [r7, #28]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	61fb      	str	r3, [r7, #28]
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	e0a1      	b.n	8004cb4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b7e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b80:	2300      	movs	r3, #0
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	61bb      	str	r3, [r7, #24]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	61bb      	str	r3, [r7, #24]
 8004b94:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	e085      	b.n	8004cb4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d14d      	bne.n	8004c4e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d016      	beq.n	8004be6 <I2C_Master_ADDR+0x228>
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d013      	beq.n	8004be6 <I2C_Master_ADDR+0x228>
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d010      	beq.n	8004be6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bd2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	e007      	b.n	8004bf6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bf4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c04:	d117      	bne.n	8004c36 <I2C_Master_ADDR+0x278>
 8004c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c08:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c0c:	d00b      	beq.n	8004c26 <I2C_Master_ADDR+0x268>
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d008      	beq.n	8004c26 <I2C_Master_ADDR+0x268>
 8004c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d005      	beq.n	8004c26 <I2C_Master_ADDR+0x268>
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1c:	2b10      	cmp	r3, #16
 8004c1e:	d002      	beq.n	8004c26 <I2C_Master_ADDR+0x268>
 8004c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c22:	2b20      	cmp	r3, #32
 8004c24:	d107      	bne.n	8004c36 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c34:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	e032      	b.n	8004cb4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c5c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c6c:	d117      	bne.n	8004c9e <I2C_Master_ADDR+0x2e0>
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c70:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c74:	d00b      	beq.n	8004c8e <I2C_Master_ADDR+0x2d0>
 8004c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d008      	beq.n	8004c8e <I2C_Master_ADDR+0x2d0>
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d005      	beq.n	8004c8e <I2C_Master_ADDR+0x2d0>
 8004c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c84:	2b10      	cmp	r3, #16
 8004c86:	d002      	beq.n	8004c8e <I2C_Master_ADDR+0x2d0>
 8004c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	d107      	bne.n	8004c9e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c9c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004cba:	e00b      	b.n	8004cd4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
}
 8004cd2:	e7ff      	b.n	8004cd4 <I2C_Master_ADDR+0x316>
 8004cd4:	bf00      	nop
 8004cd6:	3744      	adds	r7, #68	@ 0x44
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d02b      	beq.n	8004d52 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfe:	781a      	ldrb	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d114      	bne.n	8004d52 <I2C_SlaveTransmit_TXE+0x72>
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	2b29      	cmp	r3, #41	@ 0x29
 8004d2c:	d111      	bne.n	8004d52 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d3c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2221      	movs	r2, #33	@ 0x21
 8004d42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2228      	movs	r2, #40	@ 0x28
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff f9d9 	bl	8004104 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d52:	bf00      	nop
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d011      	beq.n	8004d90 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d70:	781a      	ldrb	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	1c5a      	adds	r2, r3, #1
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004daa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d02c      	beq.n	8004e10 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d114      	bne.n	8004e10 <I2C_SlaveReceive_RXNE+0x74>
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dea:	d111      	bne.n	8004e10 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dfa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2222      	movs	r2, #34	@ 0x22
 8004e00:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2228      	movs	r2, #40	@ 0x28
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f7ff f984 	bl	8004118 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004e10:	bf00      	nop
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d012      	beq.n	8004e50 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004e66:	2300      	movs	r3, #0
 8004e68:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e76:	2b28      	cmp	r3, #40	@ 0x28
 8004e78:	d127      	bne.n	8004eca <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e88:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	089b      	lsrs	r3, r3, #2
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004e96:	2301      	movs	r3, #1
 8004e98:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	09db      	lsrs	r3, r3, #7
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d103      	bne.n	8004eae <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	81bb      	strh	r3, [r7, #12]
 8004eac:	e002      	b.n	8004eb4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004ebc:	89ba      	ldrh	r2, [r7, #12]
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f7ff f932 	bl	800412c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004ec8:	e00e      	b.n	8004ee8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60bb      	str	r3, [r7, #8]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	60bb      	str	r3, [r7, #8]
 8004ede:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004ee8:	bf00      	nop
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004efe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f0e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004f10:	2300      	movs	r3, #0
 8004f12:	60bb      	str	r3, [r7, #8]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	60bb      	str	r3, [r7, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0201 	orr.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f3c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f4c:	d172      	bne.n	8005034 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	2b22      	cmp	r3, #34	@ 0x22
 8004f52:	d002      	beq.n	8004f5a <I2C_Slave_STOPF+0x6a>
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
 8004f56:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f58:	d135      	bne.n	8004fc6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d005      	beq.n	8004f7e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f76:	f043 0204 	orr.w	r2, r3, #4
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fe f80c 	bl	8002fb0 <HAL_DMA_GetState>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d049      	beq.n	8005032 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa2:	4a69      	ldr	r2, [pc, #420]	@ (8005148 <I2C_Slave_STOPF+0x258>)
 8004fa4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fd fe54 	bl	8002c58 <HAL_DMA_Abort_IT>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d03d      	beq.n	8005032 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fc4:	e035      	b.n	8005032 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe2:	f043 0204 	orr.w	r2, r3, #4
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ff8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fd ffd6 	bl	8002fb0 <HAL_DMA_GetState>
 8005004:	4603      	mov	r3, r0
 8005006:	2b01      	cmp	r3, #1
 8005008:	d014      	beq.n	8005034 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800500e:	4a4e      	ldr	r2, [pc, #312]	@ (8005148 <I2C_Slave_STOPF+0x258>)
 8005010:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005016:	4618      	mov	r0, r3
 8005018:	f7fd fe1e 	bl	8002c58 <HAL_DMA_Abort_IT>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d008      	beq.n	8005034 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800502c:	4610      	mov	r0, r2
 800502e:	4798      	blx	r3
 8005030:	e000      	b.n	8005034 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005032:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d03e      	beq.n	80050bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b04      	cmp	r3, #4
 800504a:	d112      	bne.n	8005072 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691a      	ldr	r2, [r3, #16]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005056:	b2d2      	uxtb	r2, r2
 8005058:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b01      	subs	r3, #1
 800506c:	b29a      	uxth	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800507c:	2b40      	cmp	r3, #64	@ 0x40
 800507e:	d112      	bne.n	80050a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	691a      	ldr	r2, [r3, #16]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b4:	f043 0204 	orr.w	r2, r3, #4
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f8b7 	bl	8005238 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80050ca:	e039      	b.n	8005140 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
 80050ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80050d0:	d109      	bne.n	80050e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2228      	movs	r2, #40	@ 0x28
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7ff f819 	bl	8004118 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b28      	cmp	r3, #40	@ 0x28
 80050f0:	d111      	bne.n	8005116 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a15      	ldr	r2, [pc, #84]	@ (800514c <I2C_Slave_STOPF+0x25c>)
 80050f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2220      	movs	r2, #32
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f7ff f81a 	bl	8004148 <HAL_I2C_ListenCpltCallback>
}
 8005114:	e014      	b.n	8005140 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511a:	2b22      	cmp	r3, #34	@ 0x22
 800511c:	d002      	beq.n	8005124 <I2C_Slave_STOPF+0x234>
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	2b22      	cmp	r3, #34	@ 0x22
 8005122:	d10d      	bne.n	8005140 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2220      	movs	r2, #32
 800512e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fe ffec 	bl	8004118 <HAL_I2C_SlaveRxCpltCallback>
}
 8005140:	bf00      	nop
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	08005801 	.word	0x08005801
 800514c:	ffff0000 	.word	0xffff0000

08005150 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800515e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005164:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	2b08      	cmp	r3, #8
 800516a:	d002      	beq.n	8005172 <I2C_Slave_AF+0x22>
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b20      	cmp	r3, #32
 8005170:	d129      	bne.n	80051c6 <I2C_Slave_AF+0x76>
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	2b28      	cmp	r3, #40	@ 0x28
 8005176:	d126      	bne.n	80051c6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a2e      	ldr	r2, [pc, #184]	@ (8005234 <I2C_Slave_AF+0xe4>)
 800517c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800518c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005196:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051a6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fe ffc2 	bl	8004148 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80051c4:	e031      	b.n	800522a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	2b21      	cmp	r3, #33	@ 0x21
 80051ca:	d129      	bne.n	8005220 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a19      	ldr	r2, [pc, #100]	@ (8005234 <I2C_Slave_AF+0xe4>)
 80051d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2221      	movs	r2, #33	@ 0x21
 80051d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80051f6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005200:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005210:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fe faa8 	bl	8003768 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7fe ff73 	bl	8004104 <HAL_I2C_SlaveTxCpltCallback>
}
 800521e:	e004      	b.n	800522a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005228:	615a      	str	r2, [r3, #20]
}
 800522a:	bf00      	nop
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	ffff0000 	.word	0xffff0000

08005238 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005246:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800524e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005250:	7bbb      	ldrb	r3, [r7, #14]
 8005252:	2b10      	cmp	r3, #16
 8005254:	d002      	beq.n	800525c <I2C_ITError+0x24>
 8005256:	7bbb      	ldrb	r3, [r7, #14]
 8005258:	2b40      	cmp	r3, #64	@ 0x40
 800525a:	d10a      	bne.n	8005272 <I2C_ITError+0x3a>
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	2b22      	cmp	r3, #34	@ 0x22
 8005260:	d107      	bne.n	8005272 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005270:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005272:	7bfb      	ldrb	r3, [r7, #15]
 8005274:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005278:	2b28      	cmp	r3, #40	@ 0x28
 800527a:	d107      	bne.n	800528c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2228      	movs	r2, #40	@ 0x28
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800528a:	e015      	b.n	80052b8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005296:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800529a:	d00a      	beq.n	80052b2 <I2C_ITError+0x7a>
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	2b60      	cmp	r3, #96	@ 0x60
 80052a0:	d007      	beq.n	80052b2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052c6:	d162      	bne.n	800538e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052d6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d020      	beq.n	8005328 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ea:	4a6a      	ldr	r2, [pc, #424]	@ (8005494 <I2C_ITError+0x25c>)
 80052ec:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fd fcb0 	bl	8002c58 <HAL_DMA_Abort_IT>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 8089 	beq.w	8005412 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0201 	bic.w	r2, r2, #1
 800530e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2220      	movs	r2, #32
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800531c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005322:	4610      	mov	r0, r2
 8005324:	4798      	blx	r3
 8005326:	e074      	b.n	8005412 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800532c:	4a59      	ldr	r2, [pc, #356]	@ (8005494 <I2C_ITError+0x25c>)
 800532e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005334:	4618      	mov	r0, r3
 8005336:	f7fd fc8f 	bl	8002c58 <HAL_DMA_Abort_IT>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d068      	beq.n	8005412 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534a:	2b40      	cmp	r3, #64	@ 0x40
 800534c:	d10b      	bne.n	8005366 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691a      	ldr	r2, [r3, #16]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 0201 	bic.w	r2, r2, #1
 8005374:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2220      	movs	r2, #32
 800537a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005382:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005388:	4610      	mov	r0, r2
 800538a:	4798      	blx	r3
 800538c:	e041      	b.n	8005412 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b60      	cmp	r3, #96	@ 0x60
 8005398:	d125      	bne.n	80053e6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2220      	movs	r2, #32
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b2:	2b40      	cmp	r3, #64	@ 0x40
 80053b4:	d10b      	bne.n	80053ce <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053c8:	1c5a      	adds	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0201 	bic.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fe fed0 	bl	8004184 <HAL_I2C_AbortCpltCallback>
 80053e4:	e015      	b.n	8005412 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f0:	2b40      	cmp	r3, #64	@ 0x40
 80053f2:	d10b      	bne.n	800540c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691a      	ldr	r2, [r3, #16]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f7fe feaf 	bl	8004170 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005416:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10e      	bne.n	8005440 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005428:	2b00      	cmp	r3, #0
 800542a:	d109      	bne.n	8005440 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800544e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005456:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b04      	cmp	r3, #4
 8005462:	d113      	bne.n	800548c <I2C_ITError+0x254>
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	2b28      	cmp	r3, #40	@ 0x28
 8005468:	d110      	bne.n	800548c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a0a      	ldr	r2, [pc, #40]	@ (8005498 <I2C_ITError+0x260>)
 800546e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7fe fe5e 	bl	8004148 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800548c:	bf00      	nop
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	08005801 	.word	0x08005801
 8005498:	ffff0000 	.word	0xffff0000

0800549c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b088      	sub	sp, #32
 80054a0:	af02      	add	r7, sp, #8
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	4608      	mov	r0, r1
 80054a6:	4611      	mov	r1, r2
 80054a8:	461a      	mov	r2, r3
 80054aa:	4603      	mov	r3, r0
 80054ac:	817b      	strh	r3, [r7, #10]
 80054ae:	460b      	mov	r3, r1
 80054b0:	813b      	strh	r3, [r7, #8]
 80054b2:	4613      	mov	r3, r2
 80054b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 fa3c 	bl	8005950 <I2C_WaitOnFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00d      	beq.n	80054fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ec:	d103      	bne.n	80054f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e05f      	b.n	80055ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054fa:	897b      	ldrh	r3, [r7, #10]
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	461a      	mov	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005508:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800550a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550c:	6a3a      	ldr	r2, [r7, #32]
 800550e:	492d      	ldr	r1, [pc, #180]	@ (80055c4 <I2C_RequestMemoryWrite+0x128>)
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 fa97 	bl	8005a44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e04c      	b.n	80055ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005538:	6a39      	ldr	r1, [r7, #32]
 800553a:	68f8      	ldr	r0, [r7, #12]
 800553c:	f000 fb22 	bl	8005b84 <I2C_WaitOnTXEFlagUntilTimeout>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00d      	beq.n	8005562 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554a:	2b04      	cmp	r3, #4
 800554c:	d107      	bne.n	800555e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800555c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e02b      	b.n	80055ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005562:	88fb      	ldrh	r3, [r7, #6]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d105      	bne.n	8005574 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005568:	893b      	ldrh	r3, [r7, #8]
 800556a:	b2da      	uxtb	r2, r3
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	611a      	str	r2, [r3, #16]
 8005572:	e021      	b.n	80055b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005574:	893b      	ldrh	r3, [r7, #8]
 8005576:	0a1b      	lsrs	r3, r3, #8
 8005578:	b29b      	uxth	r3, r3
 800557a:	b2da      	uxtb	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005582:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005584:	6a39      	ldr	r1, [r7, #32]
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f000 fafc 	bl	8005b84 <I2C_WaitOnTXEFlagUntilTimeout>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00d      	beq.n	80055ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005596:	2b04      	cmp	r3, #4
 8005598:	d107      	bne.n	80055aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e005      	b.n	80055ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055ae:	893b      	ldrh	r3, [r7, #8]
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	00010002 	.word	0x00010002

080055c8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b086      	sub	sp, #24
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055d4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055dc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055e4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ea:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80055fa:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005600:	2b00      	cmp	r3, #0
 8005602:	d003      	beq.n	800560c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005608:	2200      	movs	r2, #0
 800560a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005618:	2200      	movs	r2, #0
 800561a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800561c:	7cfb      	ldrb	r3, [r7, #19]
 800561e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005622:	2b21      	cmp	r3, #33	@ 0x21
 8005624:	d007      	beq.n	8005636 <I2C_DMAXferCplt+0x6e>
 8005626:	7cfb      	ldrb	r3, [r7, #19]
 8005628:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800562c:	2b22      	cmp	r3, #34	@ 0x22
 800562e:	d131      	bne.n	8005694 <I2C_DMAXferCplt+0xcc>
 8005630:	7cbb      	ldrb	r3, [r7, #18]
 8005632:	2b20      	cmp	r3, #32
 8005634:	d12e      	bne.n	8005694 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005644:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2200      	movs	r2, #0
 800564a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800564c:	7cfb      	ldrb	r3, [r7, #19]
 800564e:	2b29      	cmp	r3, #41	@ 0x29
 8005650:	d10a      	bne.n	8005668 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2221      	movs	r2, #33	@ 0x21
 8005656:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	2228      	movs	r2, #40	@ 0x28
 800565c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005660:	6978      	ldr	r0, [r7, #20]
 8005662:	f7fe fd4f 	bl	8004104 <HAL_I2C_SlaveTxCpltCallback>
 8005666:	e00c      	b.n	8005682 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005668:	7cfb      	ldrb	r3, [r7, #19]
 800566a:	2b2a      	cmp	r3, #42	@ 0x2a
 800566c:	d109      	bne.n	8005682 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2222      	movs	r2, #34	@ 0x22
 8005672:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2228      	movs	r2, #40	@ 0x28
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800567c:	6978      	ldr	r0, [r7, #20]
 800567e:	f7fe fd4b 	bl	8004118 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005690:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005692:	e074      	b.n	800577e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d06e      	beq.n	800577e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d107      	bne.n	80056ba <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056b8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80056c8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80056d0:	d009      	beq.n	80056e6 <I2C_DMAXferCplt+0x11e>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d006      	beq.n	80056e6 <I2C_DMAXferCplt+0x11e>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80056de:	d002      	beq.n	80056e6 <I2C_DMAXferCplt+0x11e>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b20      	cmp	r3, #32
 80056e4:	d107      	bne.n	80056f6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056f4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005704:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005714:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2200      	movs	r2, #0
 800571a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	d003      	beq.n	800572c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005724:	6978      	ldr	r0, [r7, #20]
 8005726:	f7fe fd23 	bl	8004170 <HAL_I2C_ErrorCallback>
}
 800572a:	e028      	b.n	800577e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b40      	cmp	r3, #64	@ 0x40
 800573e:	d10a      	bne.n	8005756 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2200      	movs	r2, #0
 800574c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800574e:	6978      	ldr	r0, [r7, #20]
 8005750:	f7fe fd04 	bl	800415c <HAL_I2C_MemRxCpltCallback>
}
 8005754:	e013      	b.n	800577e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b08      	cmp	r3, #8
 8005762:	d002      	beq.n	800576a <I2C_DMAXferCplt+0x1a2>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b20      	cmp	r3, #32
 8005768:	d103      	bne.n	8005772 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2200      	movs	r2, #0
 800576e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005770:	e002      	b.n	8005778 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2212      	movs	r2, #18
 8005776:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005778:	6978      	ldr	r0, [r7, #20]
 800577a:	f7fe fcb9 	bl	80040f0 <HAL_I2C_MasterRxCpltCallback>
}
 800577e:	bf00      	nop
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b084      	sub	sp, #16
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005792:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a0:	2200      	movs	r2, #0
 80057a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b0:	2200      	movs	r2, #0
 80057b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7fd fc09 	bl	8002fcc <HAL_DMA_GetError>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d01b      	beq.n	80057f8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057ce:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2220      	movs	r2, #32
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ea:	f043 0210 	orr.w	r2, r3, #16
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f7fe fcbc 	bl	8004170 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80057f8:	bf00      	nop
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005810:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005818:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800581a:	4b4b      	ldr	r3, [pc, #300]	@ (8005948 <I2C_DMAAbort+0x148>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	08db      	lsrs	r3, r3, #3
 8005820:	4a4a      	ldr	r2, [pc, #296]	@ (800594c <I2C_DMAAbort+0x14c>)
 8005822:	fba2 2303 	umull	r2, r3, r2, r3
 8005826:	0a1a      	lsrs	r2, r3, #8
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	00da      	lsls	r2, r3, #3
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583e:	f043 0220 	orr.w	r2, r3, #32
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005846:	e00a      	b.n	800585e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	3b01      	subs	r3, #1
 800584c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800585c:	d0ea      	beq.n	8005834 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800586a:	2200      	movs	r2, #0
 800586c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587a:	2200      	movs	r2, #0
 800587c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800588c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2200      	movs	r2, #0
 8005892:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058a0:	2200      	movs	r2, #0
 80058a2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b0:	2200      	movs	r2, #0
 80058b2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 0201 	bic.w	r2, r2, #1
 80058c2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b60      	cmp	r3, #96	@ 0x60
 80058ce:	d10e      	bne.n	80058ee <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2200      	movs	r2, #0
 80058e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80058e6:	6978      	ldr	r0, [r7, #20]
 80058e8:	f7fe fc4c 	bl	8004184 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80058ec:	e027      	b.n	800593e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80058ee:	7cfb      	ldrb	r3, [r7, #19]
 80058f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80058f4:	2b28      	cmp	r3, #40	@ 0x28
 80058f6:	d117      	bne.n	8005928 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0201 	orr.w	r2, r2, #1
 8005906:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005916:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2200      	movs	r2, #0
 800591c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2228      	movs	r2, #40	@ 0x28
 8005922:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005926:	e007      	b.n	8005938 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2220      	movs	r2, #32
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005938:	6978      	ldr	r0, [r7, #20]
 800593a:	f7fe fc19 	bl	8004170 <HAL_I2C_ErrorCallback>
}
 800593e:	bf00      	nop
 8005940:	3718      	adds	r7, #24
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20000010 	.word	0x20000010
 800594c:	14f8b589 	.word	0x14f8b589

08005950 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	603b      	str	r3, [r7, #0]
 800595c:	4613      	mov	r3, r2
 800595e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005960:	e048      	b.n	80059f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005968:	d044      	beq.n	80059f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596a:	f7fc fa0d 	bl	8001d88 <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	683a      	ldr	r2, [r7, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d302      	bcc.n	8005980 <I2C_WaitOnFlagUntilTimeout+0x30>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d139      	bne.n	80059f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	0c1b      	lsrs	r3, r3, #16
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b01      	cmp	r3, #1
 8005988:	d10d      	bne.n	80059a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	43da      	mvns	r2, r3
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	4013      	ands	r3, r2
 8005996:	b29b      	uxth	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	bf0c      	ite	eq
 800599c:	2301      	moveq	r3, #1
 800599e:	2300      	movne	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	461a      	mov	r2, r3
 80059a4:	e00c      	b.n	80059c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	43da      	mvns	r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	4013      	ands	r3, r2
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	bf0c      	ite	eq
 80059b8:	2301      	moveq	r3, #1
 80059ba:	2300      	movne	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	461a      	mov	r2, r3
 80059c0:	79fb      	ldrb	r3, [r7, #7]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d116      	bne.n	80059f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e0:	f043 0220 	orr.w	r2, r3, #32
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e023      	b.n	8005a3c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	0c1b      	lsrs	r3, r3, #16
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d10d      	bne.n	8005a1a <I2C_WaitOnFlagUntilTimeout+0xca>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	43da      	mvns	r2, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	bf0c      	ite	eq
 8005a10:	2301      	moveq	r3, #1
 8005a12:	2300      	movne	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	e00c      	b.n	8005a34 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	43da      	mvns	r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	4013      	ands	r3, r2
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	bf0c      	ite	eq
 8005a2c:	2301      	moveq	r3, #1
 8005a2e:	2300      	movne	r3, #0
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	461a      	mov	r2, r3
 8005a34:	79fb      	ldrb	r3, [r7, #7]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d093      	beq.n	8005962 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a52:	e071      	b.n	8005b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a62:	d123      	bne.n	8005aac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a72:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a98:	f043 0204 	orr.w	r2, r3, #4
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e067      	b.n	8005b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab2:	d041      	beq.n	8005b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ab4:	f7fc f968 	bl	8001d88 <HAL_GetTick>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d302      	bcc.n	8005aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d136      	bne.n	8005b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	0c1b      	lsrs	r3, r3, #16
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d10c      	bne.n	8005aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	43da      	mvns	r2, r3
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	4013      	ands	r3, r2
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	bf14      	ite	ne
 8005ae6:	2301      	movne	r3, #1
 8005ae8:	2300      	moveq	r3, #0
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	e00b      	b.n	8005b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	43da      	mvns	r2, r3
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	4013      	ands	r3, r2
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	bf14      	ite	ne
 8005b00:	2301      	movne	r3, #1
 8005b02:	2300      	moveq	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d016      	beq.n	8005b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2220      	movs	r2, #32
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b24:	f043 0220 	orr.w	r2, r3, #32
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e021      	b.n	8005b7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	0c1b      	lsrs	r3, r3, #16
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d10c      	bne.n	8005b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	43da      	mvns	r2, r3
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	bf14      	ite	ne
 8005b54:	2301      	movne	r3, #1
 8005b56:	2300      	moveq	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	e00b      	b.n	8005b74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	43da      	mvns	r2, r3
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4013      	ands	r3, r2
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	bf14      	ite	ne
 8005b6e:	2301      	movne	r3, #1
 8005b70:	2300      	moveq	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f47f af6d 	bne.w	8005a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b90:	e034      	b.n	8005bfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f000 f870 	bl	8005c78 <I2C_IsAcknowledgeFailed>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e034      	b.n	8005c0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba8:	d028      	beq.n	8005bfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005baa:	f7fc f8ed 	bl	8001d88 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d302      	bcc.n	8005bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d11d      	bne.n	8005bfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bca:	2b80      	cmp	r3, #128	@ 0x80
 8005bcc:	d016      	beq.n	8005bfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be8:	f043 0220 	orr.w	r2, r3, #32
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e007      	b.n	8005c0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c06:	2b80      	cmp	r3, #128	@ 0x80
 8005c08:	d1c3      	bne.n	8005b92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c20:	4b13      	ldr	r3, [pc, #76]	@ (8005c70 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	08db      	lsrs	r3, r3, #3
 8005c26:	4a13      	ldr	r2, [pc, #76]	@ (8005c74 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005c28:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2c:	0a1a      	lsrs	r2, r3, #8
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d107      	bne.n	8005c52 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c46:	f043 0220 	orr.w	r2, r3, #32
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e008      	b.n	8005c64 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c60:	d0e9      	beq.n	8005c36 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	20000010 	.word	0x20000010
 8005c74:	14f8b589 	.word	0x14f8b589

08005c78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c8e:	d11b      	bne.n	8005cc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb4:	f043 0204 	orr.w	r2, r3, #4
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e000      	b.n	8005cca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005ce6:	d103      	bne.n	8005cf0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005cee:	e007      	b.n	8005d00 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005cf8:	d102      	bne.n	8005d00 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2208      	movs	r2, #8
 8005cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b086      	sub	sp, #24
 8005d10:	af02      	add	r7, sp, #8
 8005d12:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e101      	b.n	8005f22 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d106      	bne.n	8005d3e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f006 f935 	bl	800bfa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2203      	movs	r2, #3
 8005d42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d4c:	d102      	bne.n	8005d54 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f002 fc8c 	bl	8008676 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6818      	ldr	r0, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	7c1a      	ldrb	r2, [r3, #16]
 8005d66:	f88d 2000 	strb.w	r2, [sp]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005d6e:	f002 fb6b 	bl	8008448 <USB_CoreInit>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d005      	beq.n	8005d84 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e0ce      	b.n	8005f22 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2100      	movs	r1, #0
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f002 fc84 	bl	8008698 <USB_SetCurrentMode>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d005      	beq.n	8005da2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2202      	movs	r2, #2
 8005d9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e0bf      	b.n	8005f22 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005da2:	2300      	movs	r3, #0
 8005da4:	73fb      	strb	r3, [r7, #15]
 8005da6:	e04a      	b.n	8005e3e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005da8:	7bfa      	ldrb	r2, [r7, #15]
 8005daa:	6879      	ldr	r1, [r7, #4]
 8005dac:	4613      	mov	r3, r2
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	4413      	add	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	440b      	add	r3, r1
 8005db6:	3315      	adds	r3, #21
 8005db8:	2201      	movs	r2, #1
 8005dba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005dbc:	7bfa      	ldrb	r2, [r7, #15]
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	4413      	add	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	440b      	add	r3, r1
 8005dca:	3314      	adds	r3, #20
 8005dcc:	7bfa      	ldrb	r2, [r7, #15]
 8005dce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005dd0:	7bfa      	ldrb	r2, [r7, #15]
 8005dd2:	7bfb      	ldrb	r3, [r7, #15]
 8005dd4:	b298      	uxth	r0, r3
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	4413      	add	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	440b      	add	r3, r1
 8005de2:	332e      	adds	r3, #46	@ 0x2e
 8005de4:	4602      	mov	r2, r0
 8005de6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005de8:	7bfa      	ldrb	r2, [r7, #15]
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	4613      	mov	r3, r2
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	4413      	add	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	440b      	add	r3, r1
 8005df6:	3318      	adds	r3, #24
 8005df8:	2200      	movs	r2, #0
 8005dfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005dfc:	7bfa      	ldrb	r2, [r7, #15]
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	4613      	mov	r3, r2
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	4413      	add	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	440b      	add	r3, r1
 8005e0a:	331c      	adds	r3, #28
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005e10:	7bfa      	ldrb	r2, [r7, #15]
 8005e12:	6879      	ldr	r1, [r7, #4]
 8005e14:	4613      	mov	r3, r2
 8005e16:	00db      	lsls	r3, r3, #3
 8005e18:	4413      	add	r3, r2
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	440b      	add	r3, r1
 8005e1e:	3320      	adds	r3, #32
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005e24:	7bfa      	ldrb	r2, [r7, #15]
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	4413      	add	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	440b      	add	r3, r1
 8005e32:	3324      	adds	r3, #36	@ 0x24
 8005e34:	2200      	movs	r2, #0
 8005e36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	73fb      	strb	r3, [r7, #15]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	791b      	ldrb	r3, [r3, #4]
 8005e42:	7bfa      	ldrb	r2, [r7, #15]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d3af      	bcc.n	8005da8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e48:	2300      	movs	r3, #0
 8005e4a:	73fb      	strb	r3, [r7, #15]
 8005e4c:	e044      	b.n	8005ed8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005e4e:	7bfa      	ldrb	r2, [r7, #15]
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	4613      	mov	r3, r2
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005e60:	2200      	movs	r2, #0
 8005e62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005e64:	7bfa      	ldrb	r2, [r7, #15]
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	440b      	add	r3, r1
 8005e72:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005e76:	7bfa      	ldrb	r2, [r7, #15]
 8005e78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005e7a:	7bfa      	ldrb	r2, [r7, #15]
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	4413      	add	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	440b      	add	r3, r1
 8005e88:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005e90:	7bfa      	ldrb	r2, [r7, #15]
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	4613      	mov	r3, r2
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	4413      	add	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	440b      	add	r3, r1
 8005e9e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005ea6:	7bfa      	ldrb	r2, [r7, #15]
 8005ea8:	6879      	ldr	r1, [r7, #4]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	4413      	add	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	440b      	add	r3, r1
 8005eb4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005eb8:	2200      	movs	r2, #0
 8005eba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005ebc:	7bfa      	ldrb	r2, [r7, #15]
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	73fb      	strb	r3, [r7, #15]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	791b      	ldrb	r3, [r3, #4]
 8005edc:	7bfa      	ldrb	r2, [r7, #15]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d3b5      	bcc.n	8005e4e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	7c1a      	ldrb	r2, [r3, #16]
 8005eea:	f88d 2000 	strb.w	r2, [sp]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ef2:	f002 fc1d 	bl	8008730 <USB_DevInit>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d005      	beq.n	8005f08 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e00c      	b.n	8005f22 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2201      	movs	r2, #1
 8005f12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f003 fc67 	bl	80097ee <USB_DevDisconnect>

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <HAL_PCD_Start+0x1c>
 8005f42:	2302      	movs	r3, #2
 8005f44:	e022      	b.n	8005f8c <HAL_PCD_Start+0x62>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d009      	beq.n	8005f6e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d105      	bne.n	8005f6e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f66:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f002 fb6e 	bl	8008654 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f003 fc15 	bl	80097ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005f94:	b590      	push	{r4, r7, lr}
 8005f96:	b08d      	sub	sp, #52	@ 0x34
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f003 fcd3 	bl	8009956 <USB_GetMode>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f040 848c 	bne.w	80068d0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f003 fc37 	bl	8009830 <USB_ReadInterrupts>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 8482 	beq.w	80068ce <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	0a1b      	lsrs	r3, r3, #8
 8005fd4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f003 fc24 	bl	8009830 <USB_ReadInterrupts>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d107      	bne.n	8006002 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	695a      	ldr	r2, [r3, #20]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f002 0202 	and.w	r2, r2, #2
 8006000:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4618      	mov	r0, r3
 8006008:	f003 fc12 	bl	8009830 <USB_ReadInterrupts>
 800600c:	4603      	mov	r3, r0
 800600e:	f003 0310 	and.w	r3, r3, #16
 8006012:	2b10      	cmp	r3, #16
 8006014:	d161      	bne.n	80060da <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	699a      	ldr	r2, [r3, #24]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0210 	bic.w	r2, r2, #16
 8006024:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	f003 020f 	and.w	r2, r3, #15
 8006032:	4613      	mov	r3, r2
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	4413      	add	r3, r2
 8006042:	3304      	adds	r3, #4
 8006044:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800604c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006050:	d124      	bne.n	800609c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006058:	4013      	ands	r3, r2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d035      	beq.n	80060ca <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	091b      	lsrs	r3, r3, #4
 8006066:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006068:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800606c:	b29b      	uxth	r3, r3
 800606e:	461a      	mov	r2, r3
 8006070:	6a38      	ldr	r0, [r7, #32]
 8006072:	f003 fa49 	bl	8009508 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	091b      	lsrs	r3, r3, #4
 800607e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006082:	441a      	add	r2, r3
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	695a      	ldr	r2, [r3, #20]
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	091b      	lsrs	r3, r3, #4
 8006090:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006094:	441a      	add	r2, r3
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	615a      	str	r2, [r3, #20]
 800609a:	e016      	b.n	80060ca <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80060a2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80060a6:	d110      	bne.n	80060ca <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80060ae:	2208      	movs	r2, #8
 80060b0:	4619      	mov	r1, r3
 80060b2:	6a38      	ldr	r0, [r7, #32]
 80060b4:	f003 fa28 	bl	8009508 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	695a      	ldr	r2, [r3, #20]
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	091b      	lsrs	r3, r3, #4
 80060c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060c4:	441a      	add	r2, r3
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	699a      	ldr	r2, [r3, #24]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0210 	orr.w	r2, r2, #16
 80060d8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4618      	mov	r0, r3
 80060e0:	f003 fba6 	bl	8009830 <USB_ReadInterrupts>
 80060e4:	4603      	mov	r3, r0
 80060e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80060ee:	f040 80a7 	bne.w	8006240 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f003 fbab 	bl	8009856 <USB_ReadDevAllOutEpInterrupt>
 8006100:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006102:	e099      	b.n	8006238 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 808e 	beq.w	800622c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	4611      	mov	r1, r2
 800611a:	4618      	mov	r0, r3
 800611c:	f003 fbcf 	bl	80098be <USB_ReadDevOutEPInterrupt>
 8006120:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00c      	beq.n	8006146 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800612c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006138:	461a      	mov	r2, r3
 800613a:	2301      	movs	r3, #1
 800613c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800613e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 fea3 	bl	8006e8c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f003 0308 	and.w	r3, r3, #8
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00c      	beq.n	800616a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800615c:	461a      	mov	r2, r3
 800615e:	2308      	movs	r3, #8
 8006160:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006162:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 ff79 	bl	800705c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	2b00      	cmp	r3, #0
 8006172:	d008      	beq.n	8006186 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006180:	461a      	mov	r2, r3
 8006182:	2310      	movs	r3, #16
 8006184:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d030      	beq.n	80061f2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006198:	2b80      	cmp	r3, #128	@ 0x80
 800619a:	d109      	bne.n	80061b0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80061ae:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80061b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061b2:	4613      	mov	r3, r2
 80061b4:	00db      	lsls	r3, r3, #3
 80061b6:	4413      	add	r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	4413      	add	r3, r2
 80061c2:	3304      	adds	r3, #4
 80061c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	78db      	ldrb	r3, [r3, #3]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d108      	bne.n	80061e0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2200      	movs	r2, #0
 80061d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	4619      	mov	r1, r3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f005 ffe0 	bl	800c1a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80061e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ec:	461a      	mov	r2, r3
 80061ee:	2302      	movs	r3, #2
 80061f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d008      	beq.n	800620e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80061fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006208:	461a      	mov	r2, r3
 800620a:	2320      	movs	r3, #32
 800620c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d009      	beq.n	800622c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006224:	461a      	mov	r2, r3
 8006226:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800622a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800622c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622e:	3301      	adds	r3, #1
 8006230:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006234:	085b      	lsrs	r3, r3, #1
 8006236:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623a:	2b00      	cmp	r3, #0
 800623c:	f47f af62 	bne.w	8006104 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4618      	mov	r0, r3
 8006246:	f003 faf3 	bl	8009830 <USB_ReadInterrupts>
 800624a:	4603      	mov	r3, r0
 800624c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006250:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006254:	f040 80db 	bne.w	800640e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4618      	mov	r0, r3
 800625e:	f003 fb14 	bl	800988a <USB_ReadDevAllInEpInterrupt>
 8006262:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006264:	2300      	movs	r3, #0
 8006266:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006268:	e0cd      	b.n	8006406 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800626a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 80c2 	beq.w	80063fa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800627c:	b2d2      	uxtb	r2, r2
 800627e:	4611      	mov	r1, r2
 8006280:	4618      	mov	r0, r3
 8006282:	f003 fb3a 	bl	80098fa <USB_ReadDevInEPInterrupt>
 8006286:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	d057      	beq.n	8006342 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006294:	f003 030f 	and.w	r3, r3, #15
 8006298:	2201      	movs	r2, #1
 800629a:	fa02 f303 	lsl.w	r3, r2, r3
 800629e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	43db      	mvns	r3, r3
 80062ac:	69f9      	ldr	r1, [r7, #28]
 80062ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062b2:	4013      	ands	r3, r2
 80062b4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062c2:	461a      	mov	r2, r3
 80062c4:	2301      	movs	r3, #1
 80062c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	799b      	ldrb	r3, [r3, #6]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d132      	bne.n	8006336 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80062d0:	6879      	ldr	r1, [r7, #4]
 80062d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062d4:	4613      	mov	r3, r2
 80062d6:	00db      	lsls	r3, r3, #3
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	440b      	add	r3, r1
 80062de:	3320      	adds	r3, #32
 80062e0:	6819      	ldr	r1, [r3, #0]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e6:	4613      	mov	r3, r2
 80062e8:	00db      	lsls	r3, r3, #3
 80062ea:	4413      	add	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4403      	add	r3, r0
 80062f0:	331c      	adds	r3, #28
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4419      	add	r1, r3
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062fa:	4613      	mov	r3, r2
 80062fc:	00db      	lsls	r3, r3, #3
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4403      	add	r3, r0
 8006304:	3320      	adds	r3, #32
 8006306:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630a:	2b00      	cmp	r3, #0
 800630c:	d113      	bne.n	8006336 <HAL_PCD_IRQHandler+0x3a2>
 800630e:	6879      	ldr	r1, [r7, #4]
 8006310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006312:	4613      	mov	r3, r2
 8006314:	00db      	lsls	r3, r3, #3
 8006316:	4413      	add	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	440b      	add	r3, r1
 800631c:	3324      	adds	r3, #36	@ 0x24
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d108      	bne.n	8006336 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6818      	ldr	r0, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800632e:	461a      	mov	r2, r3
 8006330:	2101      	movs	r1, #1
 8006332:	f003 fb41 	bl	80099b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006338:	b2db      	uxtb	r3, r3
 800633a:	4619      	mov	r1, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f005 feb4 	bl	800c0aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	f003 0308 	and.w	r3, r3, #8
 8006348:	2b00      	cmp	r3, #0
 800634a:	d008      	beq.n	800635e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800634c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634e:	015a      	lsls	r2, r3, #5
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	4413      	add	r3, r2
 8006354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006358:	461a      	mov	r2, r3
 800635a:	2308      	movs	r3, #8
 800635c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f003 0310 	and.w	r3, r3, #16
 8006364:	2b00      	cmp	r3, #0
 8006366:	d008      	beq.n	800637a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006374:	461a      	mov	r2, r3
 8006376:	2310      	movs	r3, #16
 8006378:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006380:	2b00      	cmp	r3, #0
 8006382:	d008      	beq.n	8006396 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006390:	461a      	mov	r2, r3
 8006392:	2340      	movs	r3, #64	@ 0x40
 8006394:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f003 0302 	and.w	r3, r3, #2
 800639c:	2b00      	cmp	r3, #0
 800639e:	d023      	beq.n	80063e8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80063a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063a2:	6a38      	ldr	r0, [r7, #32]
 80063a4:	f002 fb28 	bl	80089f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80063a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063aa:	4613      	mov	r3, r2
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	4413      	add	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	3310      	adds	r3, #16
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	4413      	add	r3, r2
 80063b8:	3304      	adds	r3, #4
 80063ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	78db      	ldrb	r3, [r3, #3]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d108      	bne.n	80063d6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	2200      	movs	r2, #0
 80063c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	4619      	mov	r1, r3
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f005 fef7 	bl	800c1c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063e2:	461a      	mov	r2, r3
 80063e4:	2302      	movs	r3, #2
 80063e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80063f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fcbd 	bl	8006d74 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80063fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fc:	3301      	adds	r3, #1
 80063fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006402:	085b      	lsrs	r3, r3, #1
 8006404:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006408:	2b00      	cmp	r3, #0
 800640a:	f47f af2e 	bne.w	800626a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	f003 fa0c 	bl	8009830 <USB_ReadInterrupts>
 8006418:	4603      	mov	r3, r0
 800641a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800641e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006422:	d122      	bne.n	800646a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006432:	f023 0301 	bic.w	r3, r3, #1
 8006436:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800643e:	2b01      	cmp	r3, #1
 8006440:	d108      	bne.n	8006454 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800644a:	2100      	movs	r1, #0
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fea3 	bl	8007198 <HAL_PCDEx_LPM_Callback>
 8006452:	e002      	b.n	800645a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f005 fe95 	bl	800c184 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	695a      	ldr	r2, [r3, #20]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006468:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f003 f9de 	bl	8009830 <USB_ReadInterrupts>
 8006474:	4603      	mov	r3, r0
 8006476:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800647a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800647e:	d112      	bne.n	80064a6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b01      	cmp	r3, #1
 800648e:	d102      	bne.n	8006496 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f005 fe51 	bl	800c138 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	695a      	ldr	r2, [r3, #20]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80064a4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f003 f9c0 	bl	8009830 <USB_ReadInterrupts>
 80064b0:	4603      	mov	r3, r0
 80064b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ba:	f040 80b7 	bne.w	800662c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	69fa      	ldr	r2, [r7, #28]
 80064c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064cc:	f023 0301 	bic.w	r3, r3, #1
 80064d0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2110      	movs	r1, #16
 80064d8:	4618      	mov	r0, r3
 80064da:	f002 fa8d 	bl	80089f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064de:	2300      	movs	r3, #0
 80064e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064e2:	e046      	b.n	8006572 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80064e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064f0:	461a      	mov	r2, r3
 80064f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80064f6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80064f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006508:	0151      	lsls	r1, r2, #5
 800650a:	69fa      	ldr	r2, [r7, #28]
 800650c:	440a      	add	r2, r1
 800650e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006512:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006516:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006524:	461a      	mov	r2, r3
 8006526:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800652a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800652c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652e:	015a      	lsls	r2, r3, #5
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	4413      	add	r3, r2
 8006534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800653c:	0151      	lsls	r1, r2, #5
 800653e:	69fa      	ldr	r2, [r7, #28]
 8006540:	440a      	add	r2, r1
 8006542:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006546:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800654a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800654c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800655c:	0151      	lsls	r1, r2, #5
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	440a      	add	r2, r1
 8006562:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006566:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800656a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800656c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656e:	3301      	adds	r3, #1
 8006570:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	791b      	ldrb	r3, [r3, #4]
 8006576:	461a      	mov	r2, r3
 8006578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800657a:	4293      	cmp	r3, r2
 800657c:	d3b2      	bcc.n	80064e4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	69fa      	ldr	r2, [r7, #28]
 8006588:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800658c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006590:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	7bdb      	ldrb	r3, [r3, #15]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d016      	beq.n	80065c8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065a4:	69fa      	ldr	r2, [r7, #28]
 80065a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065aa:	f043 030b 	orr.w	r3, r3, #11
 80065ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ba:	69fa      	ldr	r2, [r7, #28]
 80065bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065c0:	f043 030b 	orr.w	r3, r3, #11
 80065c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80065c6:	e015      	b.n	80065f4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ce:	695b      	ldr	r3, [r3, #20]
 80065d0:	69fa      	ldr	r2, [r7, #28]
 80065d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80065da:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80065de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	69fa      	ldr	r2, [r7, #28]
 80065ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065ee:	f043 030b 	orr.w	r3, r3, #11
 80065f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	69fa      	ldr	r2, [r7, #28]
 80065fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006602:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006606:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6818      	ldr	r0, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006616:	461a      	mov	r2, r3
 8006618:	f003 f9ce 	bl	80099b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	695a      	ldr	r2, [r3, #20]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800662a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4618      	mov	r0, r3
 8006632:	f003 f8fd 	bl	8009830 <USB_ReadInterrupts>
 8006636:	4603      	mov	r3, r0
 8006638:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800663c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006640:	d123      	bne.n	800668a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4618      	mov	r0, r3
 8006648:	f003 f993 	bl	8009972 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4618      	mov	r0, r3
 8006652:	f002 fa4a 	bl	8008aea <USB_GetDevSpeed>
 8006656:	4603      	mov	r3, r0
 8006658:	461a      	mov	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681c      	ldr	r4, [r3, #0]
 8006662:	f001 f9c9 	bl	80079f8 <HAL_RCC_GetHCLKFreq>
 8006666:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800666c:	461a      	mov	r2, r3
 800666e:	4620      	mov	r0, r4
 8006670:	f001 ff4e 	bl	8008510 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f005 fd40 	bl	800c0fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	695a      	ldr	r2, [r3, #20]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006688:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4618      	mov	r0, r3
 8006690:	f003 f8ce 	bl	8009830 <USB_ReadInterrupts>
 8006694:	4603      	mov	r3, r0
 8006696:	f003 0308 	and.w	r3, r3, #8
 800669a:	2b08      	cmp	r3, #8
 800669c:	d10a      	bne.n	80066b4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f005 fd1d 	bl	800c0de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	695a      	ldr	r2, [r3, #20]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f002 0208 	and.w	r2, r2, #8
 80066b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f003 f8b9 	bl	8009830 <USB_ReadInterrupts>
 80066be:	4603      	mov	r3, r0
 80066c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066c4:	2b80      	cmp	r3, #128	@ 0x80
 80066c6:	d123      	bne.n	8006710 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066d4:	2301      	movs	r3, #1
 80066d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80066d8:	e014      	b.n	8006704 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066de:	4613      	mov	r3, r2
 80066e0:	00db      	lsls	r3, r3, #3
 80066e2:	4413      	add	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	440b      	add	r3, r1
 80066e8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d105      	bne.n	80066fe <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80066f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	4619      	mov	r1, r3
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fb0a 	bl	8006d12 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006700:	3301      	adds	r3, #1
 8006702:	627b      	str	r3, [r7, #36]	@ 0x24
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	791b      	ldrb	r3, [r3, #4]
 8006708:	461a      	mov	r2, r3
 800670a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670c:	4293      	cmp	r3, r2
 800670e:	d3e4      	bcc.n	80066da <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4618      	mov	r0, r3
 8006716:	f003 f88b 	bl	8009830 <USB_ReadInterrupts>
 800671a:	4603      	mov	r3, r0
 800671c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006720:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006724:	d13c      	bne.n	80067a0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006726:	2301      	movs	r3, #1
 8006728:	627b      	str	r3, [r7, #36]	@ 0x24
 800672a:	e02b      	b.n	8006784 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800672c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006740:	4613      	mov	r3, r2
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	4413      	add	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	440b      	add	r3, r1
 800674a:	3318      	adds	r3, #24
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d115      	bne.n	800677e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006752:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006754:	2b00      	cmp	r3, #0
 8006756:	da12      	bge.n	800677e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800675c:	4613      	mov	r3, r2
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	4413      	add	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	440b      	add	r3, r1
 8006766:	3317      	adds	r3, #23
 8006768:	2201      	movs	r2, #1
 800676a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676e:	b2db      	uxtb	r3, r3
 8006770:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006774:	b2db      	uxtb	r3, r3
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 faca 	bl	8006d12 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	3301      	adds	r3, #1
 8006782:	627b      	str	r3, [r7, #36]	@ 0x24
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	791b      	ldrb	r3, [r3, #4]
 8006788:	461a      	mov	r2, r3
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	4293      	cmp	r3, r2
 800678e:	d3cd      	bcc.n	800672c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695a      	ldr	r2, [r3, #20]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800679e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f003 f843 	bl	8009830 <USB_ReadInterrupts>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80067b4:	d156      	bne.n	8006864 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067b6:	2301      	movs	r3, #1
 80067b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067ba:	e045      	b.n	8006848 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80067bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80067cc:	6879      	ldr	r1, [r7, #4]
 80067ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d0:	4613      	mov	r3, r2
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	4413      	add	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	440b      	add	r3, r1
 80067da:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d12e      	bne.n	8006842 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80067e4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	da2b      	bge.n	8006842 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	0c1a      	lsrs	r2, r3, #16
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80067f4:	4053      	eors	r3, r2
 80067f6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d121      	bne.n	8006842 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006802:	4613      	mov	r3, r2
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	4413      	add	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	440b      	add	r3, r1
 800680c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006810:	2201      	movs	r2, #1
 8006812:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006820:	6a3b      	ldr	r3, [r7, #32]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10a      	bne.n	8006842 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	69fa      	ldr	r2, [r7, #28]
 8006836:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800683a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800683e:	6053      	str	r3, [r2, #4]
            break;
 8006840:	e008      	b.n	8006854 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006844:	3301      	adds	r3, #1
 8006846:	627b      	str	r3, [r7, #36]	@ 0x24
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	791b      	ldrb	r3, [r3, #4]
 800684c:	461a      	mov	r2, r3
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	4293      	cmp	r3, r2
 8006852:	d3b3      	bcc.n	80067bc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	695a      	ldr	r2, [r3, #20]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4618      	mov	r0, r3
 800686a:	f002 ffe1 	bl	8009830 <USB_ReadInterrupts>
 800686e:	4603      	mov	r3, r0
 8006870:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006878:	d10a      	bne.n	8006890 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f005 fcb4 	bl	800c1e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	695a      	ldr	r2, [r3, #20]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800688e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4618      	mov	r0, r3
 8006896:	f002 ffcb 	bl	8009830 <USB_ReadInterrupts>
 800689a:	4603      	mov	r3, r0
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	2b04      	cmp	r3, #4
 80068a2:	d115      	bne.n	80068d0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	f003 0304 	and.w	r3, r3, #4
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f005 fca4 	bl	800c204 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6859      	ldr	r1, [r3, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69ba      	ldr	r2, [r7, #24]
 80068c8:	430a      	orrs	r2, r1
 80068ca:	605a      	str	r2, [r3, #4]
 80068cc:	e000      	b.n	80068d0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80068ce:	bf00      	nop
    }
  }
}
 80068d0:	3734      	adds	r7, #52	@ 0x34
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd90      	pop	{r4, r7, pc}

080068d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b082      	sub	sp, #8
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
 80068de:	460b      	mov	r3, r1
 80068e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <HAL_PCD_SetAddress+0x1a>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e012      	b.n	8006916 <HAL_PCD_SetAddress+0x40>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	78fa      	ldrb	r2, [r7, #3]
 80068fc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	78fa      	ldrb	r2, [r7, #3]
 8006904:	4611      	mov	r1, r2
 8006906:	4618      	mov	r0, r3
 8006908:	f002 ff2a 	bl	8009760 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	4608      	mov	r0, r1
 8006928:	4611      	mov	r1, r2
 800692a:	461a      	mov	r2, r3
 800692c:	4603      	mov	r3, r0
 800692e:	70fb      	strb	r3, [r7, #3]
 8006930:	460b      	mov	r3, r1
 8006932:	803b      	strh	r3, [r7, #0]
 8006934:	4613      	mov	r3, r2
 8006936:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800693c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006940:	2b00      	cmp	r3, #0
 8006942:	da0f      	bge.n	8006964 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006944:	78fb      	ldrb	r3, [r7, #3]
 8006946:	f003 020f 	and.w	r2, r3, #15
 800694a:	4613      	mov	r3, r2
 800694c:	00db      	lsls	r3, r3, #3
 800694e:	4413      	add	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	3310      	adds	r3, #16
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	4413      	add	r3, r2
 8006958:	3304      	adds	r3, #4
 800695a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2201      	movs	r2, #1
 8006960:	705a      	strb	r2, [r3, #1]
 8006962:	e00f      	b.n	8006984 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	f003 020f 	and.w	r2, r3, #15
 800696a:	4613      	mov	r3, r2
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	4413      	add	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	4413      	add	r3, r2
 800697a:	3304      	adds	r3, #4
 800697c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006984:	78fb      	ldrb	r3, [r7, #3]
 8006986:	f003 030f 	and.w	r3, r3, #15
 800698a:	b2da      	uxtb	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006990:	883b      	ldrh	r3, [r7, #0]
 8006992:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	78ba      	ldrb	r2, [r7, #2]
 800699e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	785b      	ldrb	r3, [r3, #1]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d004      	beq.n	80069b2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	461a      	mov	r2, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80069b2:	78bb      	ldrb	r3, [r7, #2]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d102      	bne.n	80069be <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d101      	bne.n	80069cc <HAL_PCD_EP_Open+0xae>
 80069c8:	2302      	movs	r3, #2
 80069ca:	e00e      	b.n	80069ea <HAL_PCD_EP_Open+0xcc>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68f9      	ldr	r1, [r7, #12]
 80069da:	4618      	mov	r0, r3
 80069dc:	f002 f8aa 	bl	8008b34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80069e8:	7afb      	ldrb	r3, [r7, #11]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b084      	sub	sp, #16
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	460b      	mov	r3, r1
 80069fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	da0f      	bge.n	8006a26 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a06:	78fb      	ldrb	r3, [r7, #3]
 8006a08:	f003 020f 	and.w	r2, r3, #15
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	4413      	add	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	3310      	adds	r3, #16
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	4413      	add	r3, r2
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2201      	movs	r2, #1
 8006a22:	705a      	strb	r2, [r3, #1]
 8006a24:	e00f      	b.n	8006a46 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a26:	78fb      	ldrb	r3, [r7, #3]
 8006a28:	f003 020f 	and.w	r2, r3, #15
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	4413      	add	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a46:	78fb      	ldrb	r3, [r7, #3]
 8006a48:	f003 030f 	and.w	r3, r3, #15
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d101      	bne.n	8006a60 <HAL_PCD_EP_Close+0x6e>
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	e00e      	b.n	8006a7e <HAL_PCD_EP_Close+0x8c>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68f9      	ldr	r1, [r7, #12]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f002 f8e8 	bl	8008c44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b086      	sub	sp, #24
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	607a      	str	r2, [r7, #4]
 8006a90:	603b      	str	r3, [r7, #0]
 8006a92:	460b      	mov	r3, r1
 8006a94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a96:	7afb      	ldrb	r3, [r7, #11]
 8006a98:	f003 020f 	and.w	r2, r3, #15
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	4413      	add	r3, r2
 8006aac:	3304      	adds	r3, #4
 8006aae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ac8:	7afb      	ldrb	r3, [r7, #11]
 8006aca:	f003 030f 	and.w	r3, r3, #15
 8006ace:	b2da      	uxtb	r2, r3
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	799b      	ldrb	r3, [r3, #6]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d102      	bne.n	8006ae2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6818      	ldr	r0, [r3, #0]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	799b      	ldrb	r3, [r3, #6]
 8006aea:	461a      	mov	r2, r3
 8006aec:	6979      	ldr	r1, [r7, #20]
 8006aee:	f002 f985 	bl	8008dfc <USB_EPStartXfer>

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006b08:	78fb      	ldrb	r3, [r7, #3]
 8006b0a:	f003 020f 	and.w	r2, r3, #15
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	4613      	mov	r3, r2
 8006b12:	00db      	lsls	r3, r3, #3
 8006b14:	4413      	add	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	440b      	add	r3, r1
 8006b1a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006b1e:	681b      	ldr	r3, [r3, #0]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	607a      	str	r2, [r7, #4]
 8006b36:	603b      	str	r3, [r7, #0]
 8006b38:	460b      	mov	r3, r1
 8006b3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b3c:	7afb      	ldrb	r3, [r7, #11]
 8006b3e:	f003 020f 	and.w	r2, r3, #15
 8006b42:	4613      	mov	r3, r2
 8006b44:	00db      	lsls	r3, r3, #3
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	3310      	adds	r3, #16
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	4413      	add	r3, r2
 8006b50:	3304      	adds	r3, #4
 8006b52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2200      	movs	r2, #0
 8006b64:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b6c:	7afb      	ldrb	r3, [r7, #11]
 8006b6e:	f003 030f 	and.w	r3, r3, #15
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	799b      	ldrb	r3, [r3, #6]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d102      	bne.n	8006b86 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6818      	ldr	r0, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	799b      	ldrb	r3, [r3, #6]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	6979      	ldr	r1, [r7, #20]
 8006b92:	f002 f933 	bl	8008dfc <USB_EPStartXfer>

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006bac:	78fb      	ldrb	r3, [r7, #3]
 8006bae:	f003 030f 	and.w	r3, r3, #15
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	7912      	ldrb	r2, [r2, #4]
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d901      	bls.n	8006bbe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e04f      	b.n	8006c5e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	da0f      	bge.n	8006be6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bc6:	78fb      	ldrb	r3, [r7, #3]
 8006bc8:	f003 020f 	and.w	r2, r3, #15
 8006bcc:	4613      	mov	r3, r2
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	3310      	adds	r3, #16
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	4413      	add	r3, r2
 8006bda:	3304      	adds	r3, #4
 8006bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2201      	movs	r2, #1
 8006be2:	705a      	strb	r2, [r3, #1]
 8006be4:	e00d      	b.n	8006c02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006be6:	78fa      	ldrb	r2, [r7, #3]
 8006be8:	4613      	mov	r3, r2
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	4413      	add	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2201      	movs	r2, #1
 8006c06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c08:	78fb      	ldrb	r3, [r7, #3]
 8006c0a:	f003 030f 	and.w	r3, r3, #15
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d101      	bne.n	8006c22 <HAL_PCD_EP_SetStall+0x82>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	e01d      	b.n	8006c5e <HAL_PCD_EP_SetStall+0xbe>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68f9      	ldr	r1, [r7, #12]
 8006c30:	4618      	mov	r0, r3
 8006c32:	f002 fcc1 	bl	80095b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c36:	78fb      	ldrb	r3, [r7, #3]
 8006c38:	f003 030f 	and.w	r3, r3, #15
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d109      	bne.n	8006c54 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6818      	ldr	r0, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	7999      	ldrb	r1, [r3, #6]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f002 feb2 	bl	80099b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b084      	sub	sp, #16
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	460b      	mov	r3, r1
 8006c70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006c72:	78fb      	ldrb	r3, [r7, #3]
 8006c74:	f003 030f 	and.w	r3, r3, #15
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	7912      	ldrb	r2, [r2, #4]
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d901      	bls.n	8006c84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e042      	b.n	8006d0a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	da0f      	bge.n	8006cac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c8c:	78fb      	ldrb	r3, [r7, #3]
 8006c8e:	f003 020f 	and.w	r2, r3, #15
 8006c92:	4613      	mov	r3, r2
 8006c94:	00db      	lsls	r3, r3, #3
 8006c96:	4413      	add	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	3310      	adds	r3, #16
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	705a      	strb	r2, [r3, #1]
 8006caa:	e00f      	b.n	8006ccc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cac:	78fb      	ldrb	r3, [r7, #3]
 8006cae:	f003 020f 	and.w	r2, r3, #15
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cd2:	78fb      	ldrb	r3, [r7, #3]
 8006cd4:	f003 030f 	and.w	r3, r3, #15
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <HAL_PCD_EP_ClrStall+0x86>
 8006ce8:	2302      	movs	r3, #2
 8006cea:	e00e      	b.n	8006d0a <HAL_PCD_EP_ClrStall+0xa4>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68f9      	ldr	r1, [r7, #12]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f002 fcca 	bl	8009694 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006d1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	da0c      	bge.n	8006d40 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d26:	78fb      	ldrb	r3, [r7, #3]
 8006d28:	f003 020f 	and.w	r2, r3, #15
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	4413      	add	r3, r2
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	3310      	adds	r3, #16
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	4413      	add	r3, r2
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	e00c      	b.n	8006d5a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	f003 020f 	and.w	r2, r3, #15
 8006d46:	4613      	mov	r3, r2
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	4413      	add	r3, r2
 8006d4c:	009b      	lsls	r3, r3, #2
 8006d4e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	4413      	add	r3, r2
 8006d56:	3304      	adds	r3, #4
 8006d58:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68f9      	ldr	r1, [r7, #12]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f002 fae9 	bl	8009338 <USB_EPStopXfer>
 8006d66:	4603      	mov	r3, r0
 8006d68:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006d6a:	7afb      	ldrb	r3, [r7, #11]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3710      	adds	r7, #16
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08a      	sub	sp, #40	@ 0x28
 8006d78:	af02      	add	r7, sp, #8
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006d88:	683a      	ldr	r2, [r7, #0]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	00db      	lsls	r3, r3, #3
 8006d8e:	4413      	add	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	3310      	adds	r3, #16
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	4413      	add	r3, r2
 8006d98:	3304      	adds	r3, #4
 8006d9a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	695a      	ldr	r2, [r3, #20]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d901      	bls.n	8006dac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e06b      	b.n	8006e84 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	691a      	ldr	r2, [r3, #16]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	695b      	ldr	r3, [r3, #20]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	69fa      	ldr	r2, [r7, #28]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d902      	bls.n	8006dc8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	3303      	adds	r3, #3
 8006dcc:	089b      	lsrs	r3, r3, #2
 8006dce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006dd0:	e02a      	b.n	8006e28 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	691a      	ldr	r2, [r3, #16]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	69fa      	ldr	r2, [r7, #28]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d902      	bls.n	8006dee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	3303      	adds	r3, #3
 8006df2:	089b      	lsrs	r3, r3, #2
 8006df4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	68d9      	ldr	r1, [r3, #12]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	69fb      	ldr	r3, [r7, #28]
 8006e00:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006e06:	9300      	str	r3, [sp, #0]
 8006e08:	4603      	mov	r3, r0
 8006e0a:	6978      	ldr	r0, [r7, #20]
 8006e0c:	f002 fb3e 	bl	800948c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	441a      	add	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	695a      	ldr	r2, [r3, #20]
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	441a      	add	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d809      	bhi.n	8006e52 <PCD_WriteEmptyTxFifo+0xde>
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	695a      	ldr	r2, [r3, #20]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d203      	bcs.n	8006e52 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1bf      	bne.n	8006dd2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	691a      	ldr	r2, [r3, #16]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d811      	bhi.n	8006e82 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	f003 030f 	and.w	r3, r3, #15
 8006e64:	2201      	movs	r2, #1
 8006e66:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	43db      	mvns	r3, r3
 8006e78:	6939      	ldr	r1, [r7, #16]
 8006e7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e7e:	4013      	ands	r3, r2
 8006e80:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3720      	adds	r7, #32
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b088      	sub	sp, #32
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	333c      	adds	r3, #60	@ 0x3c
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	799b      	ldrb	r3, [r3, #6]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d17b      	bne.n	8006fba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f003 0308 	and.w	r3, r3, #8
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d015      	beq.n	8006ef8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	4a61      	ldr	r2, [pc, #388]	@ (8007054 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	f240 80b9 	bls.w	8007048 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 80b3 	beq.w	8007048 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ef4:	6093      	str	r3, [r2, #8]
 8006ef6:	e0a7      	b.n	8007048 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d009      	beq.n	8006f16 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	015a      	lsls	r2, r3, #5
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	4413      	add	r3, r2
 8006f0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f0e:	461a      	mov	r2, r3
 8006f10:	2320      	movs	r3, #32
 8006f12:	6093      	str	r3, [r2, #8]
 8006f14:	e098      	b.n	8007048 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f040 8093 	bne.w	8007048 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	4a4b      	ldr	r2, [pc, #300]	@ (8007054 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d90f      	bls.n	8006f4a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00a      	beq.n	8006f4a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f40:	461a      	mov	r2, r3
 8006f42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f46:	6093      	str	r3, [r2, #8]
 8006f48:	e07e      	b.n	8007048 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6a1a      	ldr	r2, [r3, #32]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	0159      	lsls	r1, r3, #5
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	440b      	add	r3, r1
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f76:	1ad2      	subs	r2, r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d114      	bne.n	8006fac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d109      	bne.n	8006f9e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6818      	ldr	r0, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006f94:	461a      	mov	r2, r3
 8006f96:	2101      	movs	r1, #1
 8006f98:	f002 fd0e 	bl	80099b8 <USB_EP0_OutStart>
 8006f9c:	e006      	b.n	8006fac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	68da      	ldr	r2, [r3, #12]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	441a      	add	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f005 f85e 	bl	800c074 <HAL_PCD_DataOutStageCallback>
 8006fb8:	e046      	b.n	8007048 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	4a26      	ldr	r2, [pc, #152]	@ (8007058 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d124      	bne.n	800700c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00a      	beq.n	8006fe2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fd8:	461a      	mov	r2, r3
 8006fda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fde:	6093      	str	r3, [r2, #8]
 8006fe0:	e032      	b.n	8007048 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f003 0320 	and.w	r3, r3, #32
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d008      	beq.n	8006ffe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	2320      	movs	r3, #32
 8006ffc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	b2db      	uxtb	r3, r3
 8007002:	4619      	mov	r1, r3
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f005 f835 	bl	800c074 <HAL_PCD_DataOutStageCallback>
 800700a:	e01d      	b.n	8007048 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d114      	bne.n	800703c <PCD_EP_OutXfrComplete_int+0x1b0>
 8007012:	6879      	ldr	r1, [r7, #4]
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	4613      	mov	r3, r2
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	4413      	add	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	440b      	add	r3, r1
 8007020:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d108      	bne.n	800703c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6818      	ldr	r0, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007034:	461a      	mov	r2, r3
 8007036:	2100      	movs	r1, #0
 8007038:	f002 fcbe 	bl	80099b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f005 f816 	bl	800c074 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3720      	adds	r7, #32
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	4f54300a 	.word	0x4f54300a
 8007058:	4f54310a 	.word	0x4f54310a

0800705c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	333c      	adds	r3, #60	@ 0x3c
 8007074:	3304      	adds	r3, #4
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	4413      	add	r3, r2
 8007082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4a15      	ldr	r2, [pc, #84]	@ (80070e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d90e      	bls.n	80070b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007098:	2b00      	cmp	r3, #0
 800709a:	d009      	beq.n	80070b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070a8:	461a      	mov	r2, r3
 80070aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f004 ffcd 	bl	800c050 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	4a0a      	ldr	r2, [pc, #40]	@ (80070e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d90c      	bls.n	80070d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	799b      	ldrb	r3, [r3, #6]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d108      	bne.n	80070d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6818      	ldr	r0, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80070d0:	461a      	mov	r2, r3
 80070d2:	2101      	movs	r1, #1
 80070d4:	f002 fc70 	bl	80099b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3718      	adds	r7, #24
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	4f54300a 	.word	0x4f54300a

080070e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	460b      	mov	r3, r1
 80070f2:	70fb      	strb	r3, [r7, #3]
 80070f4:	4613      	mov	r3, r2
 80070f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007100:	78fb      	ldrb	r3, [r7, #3]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d107      	bne.n	8007116 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007106:	883b      	ldrh	r3, [r7, #0]
 8007108:	0419      	lsls	r1, r3, #16
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	430a      	orrs	r2, r1
 8007112:	629a      	str	r2, [r3, #40]	@ 0x28
 8007114:	e028      	b.n	8007168 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800711c:	0c1b      	lsrs	r3, r3, #16
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	4413      	add	r3, r2
 8007122:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]
 8007128:	e00d      	b.n	8007146 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	7bfb      	ldrb	r3, [r7, #15]
 8007130:	3340      	adds	r3, #64	@ 0x40
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	0c1b      	lsrs	r3, r3, #16
 800713a:	68ba      	ldr	r2, [r7, #8]
 800713c:	4413      	add	r3, r2
 800713e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	3301      	adds	r3, #1
 8007144:	73fb      	strb	r3, [r7, #15]
 8007146:	7bfa      	ldrb	r2, [r7, #15]
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	3b01      	subs	r3, #1
 800714c:	429a      	cmp	r2, r3
 800714e:	d3ec      	bcc.n	800712a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007150:	883b      	ldrh	r3, [r7, #0]
 8007152:	0418      	lsls	r0, r3, #16
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6819      	ldr	r1, [r3, #0]
 8007158:	78fb      	ldrb	r3, [r7, #3]
 800715a:	3b01      	subs	r3, #1
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	4302      	orrs	r2, r0
 8007160:	3340      	adds	r3, #64	@ 0x40
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	440b      	add	r3, r1
 8007166:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr

08007176 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007176:	b480      	push	{r7}
 8007178:	b083      	sub	sp, #12
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	460b      	mov	r3, r1
 8007180:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	887a      	ldrh	r2, [r7, #2]
 8007188:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800718a:	2300      	movs	r3, #0
}
 800718c:	4618      	mov	r0, r3
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	460b      	mov	r3, r1
 80071a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d101      	bne.n	80071c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e267      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0301 	and.w	r3, r3, #1
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d075      	beq.n	80072ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80071ce:	4b88      	ldr	r3, [pc, #544]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f003 030c 	and.w	r3, r3, #12
 80071d6:	2b04      	cmp	r3, #4
 80071d8:	d00c      	beq.n	80071f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071da:	4b85      	ldr	r3, [pc, #532]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80071e2:	2b08      	cmp	r3, #8
 80071e4:	d112      	bne.n	800720c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80071e6:	4b82      	ldr	r3, [pc, #520]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071f2:	d10b      	bne.n	800720c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071f4:	4b7e      	ldr	r3, [pc, #504]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d05b      	beq.n	80072b8 <HAL_RCC_OscConfig+0x108>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d157      	bne.n	80072b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e242      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007214:	d106      	bne.n	8007224 <HAL_RCC_OscConfig+0x74>
 8007216:	4b76      	ldr	r3, [pc, #472]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a75      	ldr	r2, [pc, #468]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 800721c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007220:	6013      	str	r3, [r2, #0]
 8007222:	e01d      	b.n	8007260 <HAL_RCC_OscConfig+0xb0>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800722c:	d10c      	bne.n	8007248 <HAL_RCC_OscConfig+0x98>
 800722e:	4b70      	ldr	r3, [pc, #448]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a6f      	ldr	r2, [pc, #444]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007234:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	4b6d      	ldr	r3, [pc, #436]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a6c      	ldr	r2, [pc, #432]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	e00b      	b.n	8007260 <HAL_RCC_OscConfig+0xb0>
 8007248:	4b69      	ldr	r3, [pc, #420]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a68      	ldr	r2, [pc, #416]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 800724e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007252:	6013      	str	r3, [r2, #0]
 8007254:	4b66      	ldr	r3, [pc, #408]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a65      	ldr	r2, [pc, #404]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 800725a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800725e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d013      	beq.n	8007290 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007268:	f7fa fd8e 	bl	8001d88 <HAL_GetTick>
 800726c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007270:	f7fa fd8a 	bl	8001d88 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b64      	cmp	r3, #100	@ 0x64
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e207      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007282:	4b5b      	ldr	r3, [pc, #364]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0f0      	beq.n	8007270 <HAL_RCC_OscConfig+0xc0>
 800728e:	e014      	b.n	80072ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007290:	f7fa fd7a 	bl	8001d88 <HAL_GetTick>
 8007294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007296:	e008      	b.n	80072aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007298:	f7fa fd76 	bl	8001d88 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b64      	cmp	r3, #100	@ 0x64
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e1f3      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80072aa:	4b51      	ldr	r3, [pc, #324]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1f0      	bne.n	8007298 <HAL_RCC_OscConfig+0xe8>
 80072b6:	e000      	b.n	80072ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d063      	beq.n	800738e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80072c6:	4b4a      	ldr	r3, [pc, #296]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 030c 	and.w	r3, r3, #12
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00b      	beq.n	80072ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072d2:	4b47      	ldr	r3, [pc, #284]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80072da:	2b08      	cmp	r3, #8
 80072dc:	d11c      	bne.n	8007318 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80072de:	4b44      	ldr	r3, [pc, #272]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d116      	bne.n	8007318 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80072ea:	4b41      	ldr	r3, [pc, #260]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d005      	beq.n	8007302 <HAL_RCC_OscConfig+0x152>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d001      	beq.n	8007302 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e1c7      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007302:	4b3b      	ldr	r3, [pc, #236]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	4937      	ldr	r1, [pc, #220]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007312:	4313      	orrs	r3, r2
 8007314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007316:	e03a      	b.n	800738e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d020      	beq.n	8007362 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007320:	4b34      	ldr	r3, [pc, #208]	@ (80073f4 <HAL_RCC_OscConfig+0x244>)
 8007322:	2201      	movs	r2, #1
 8007324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007326:	f7fa fd2f 	bl	8001d88 <HAL_GetTick>
 800732a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800732c:	e008      	b.n	8007340 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800732e:	f7fa fd2b 	bl	8001d88 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	2b02      	cmp	r3, #2
 800733a:	d901      	bls.n	8007340 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e1a8      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007340:	4b2b      	ldr	r3, [pc, #172]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d0f0      	beq.n	800732e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800734c:	4b28      	ldr	r3, [pc, #160]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	00db      	lsls	r3, r3, #3
 800735a:	4925      	ldr	r1, [pc, #148]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 800735c:	4313      	orrs	r3, r2
 800735e:	600b      	str	r3, [r1, #0]
 8007360:	e015      	b.n	800738e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007362:	4b24      	ldr	r3, [pc, #144]	@ (80073f4 <HAL_RCC_OscConfig+0x244>)
 8007364:	2200      	movs	r2, #0
 8007366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007368:	f7fa fd0e 	bl	8001d88 <HAL_GetTick>
 800736c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800736e:	e008      	b.n	8007382 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007370:	f7fa fd0a 	bl	8001d88 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	1ad3      	subs	r3, r2, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d901      	bls.n	8007382 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800737e:	2303      	movs	r3, #3
 8007380:	e187      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007382:	4b1b      	ldr	r3, [pc, #108]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1f0      	bne.n	8007370 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0308 	and.w	r3, r3, #8
 8007396:	2b00      	cmp	r3, #0
 8007398:	d036      	beq.n	8007408 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d016      	beq.n	80073d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80073a2:	4b15      	ldr	r3, [pc, #84]	@ (80073f8 <HAL_RCC_OscConfig+0x248>)
 80073a4:	2201      	movs	r2, #1
 80073a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073a8:	f7fa fcee 	bl	8001d88 <HAL_GetTick>
 80073ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073ae:	e008      	b.n	80073c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073b0:	f7fa fcea 	bl	8001d88 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d901      	bls.n	80073c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e167      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80073c2:	4b0b      	ldr	r3, [pc, #44]	@ (80073f0 <HAL_RCC_OscConfig+0x240>)
 80073c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073c6:	f003 0302 	and.w	r3, r3, #2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d0f0      	beq.n	80073b0 <HAL_RCC_OscConfig+0x200>
 80073ce:	e01b      	b.n	8007408 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80073d0:	4b09      	ldr	r3, [pc, #36]	@ (80073f8 <HAL_RCC_OscConfig+0x248>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80073d6:	f7fa fcd7 	bl	8001d88 <HAL_GetTick>
 80073da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073dc:	e00e      	b.n	80073fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80073de:	f7fa fcd3 	bl	8001d88 <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d907      	bls.n	80073fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e150      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
 80073f0:	40023800 	.word	0x40023800
 80073f4:	42470000 	.word	0x42470000
 80073f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80073fc:	4b88      	ldr	r3, [pc, #544]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 80073fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1ea      	bne.n	80073de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 8097 	beq.w	8007544 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007416:	2300      	movs	r3, #0
 8007418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800741a:	4b81      	ldr	r3, [pc, #516]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 800741c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800741e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10f      	bne.n	8007446 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007426:	2300      	movs	r3, #0
 8007428:	60bb      	str	r3, [r7, #8]
 800742a:	4b7d      	ldr	r3, [pc, #500]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 800742c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742e:	4a7c      	ldr	r2, [pc, #496]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 8007430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007434:	6413      	str	r3, [r2, #64]	@ 0x40
 8007436:	4b7a      	ldr	r3, [pc, #488]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 8007438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800743e:	60bb      	str	r3, [r7, #8]
 8007440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007442:	2301      	movs	r3, #1
 8007444:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007446:	4b77      	ldr	r3, [pc, #476]	@ (8007624 <HAL_RCC_OscConfig+0x474>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800744e:	2b00      	cmp	r3, #0
 8007450:	d118      	bne.n	8007484 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007452:	4b74      	ldr	r3, [pc, #464]	@ (8007624 <HAL_RCC_OscConfig+0x474>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a73      	ldr	r2, [pc, #460]	@ (8007624 <HAL_RCC_OscConfig+0x474>)
 8007458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800745c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800745e:	f7fa fc93 	bl	8001d88 <HAL_GetTick>
 8007462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007464:	e008      	b.n	8007478 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007466:	f7fa fc8f 	bl	8001d88 <HAL_GetTick>
 800746a:	4602      	mov	r2, r0
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d901      	bls.n	8007478 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e10c      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007478:	4b6a      	ldr	r3, [pc, #424]	@ (8007624 <HAL_RCC_OscConfig+0x474>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0f0      	beq.n	8007466 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d106      	bne.n	800749a <HAL_RCC_OscConfig+0x2ea>
 800748c:	4b64      	ldr	r3, [pc, #400]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 800748e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007490:	4a63      	ldr	r2, [pc, #396]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 8007492:	f043 0301 	orr.w	r3, r3, #1
 8007496:	6713      	str	r3, [r2, #112]	@ 0x70
 8007498:	e01c      	b.n	80074d4 <HAL_RCC_OscConfig+0x324>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	2b05      	cmp	r3, #5
 80074a0:	d10c      	bne.n	80074bc <HAL_RCC_OscConfig+0x30c>
 80074a2:	4b5f      	ldr	r3, [pc, #380]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 80074a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074a6:	4a5e      	ldr	r2, [pc, #376]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 80074a8:	f043 0304 	orr.w	r3, r3, #4
 80074ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80074ae:	4b5c      	ldr	r3, [pc, #368]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 80074b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b2:	4a5b      	ldr	r2, [pc, #364]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 80074b4:	f043 0301 	orr.w	r3, r3, #1
 80074b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80074ba:	e00b      	b.n	80074d4 <HAL_RCC_OscConfig+0x324>
 80074bc:	4b58      	ldr	r3, [pc, #352]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 80074be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074c0:	4a57      	ldr	r2, [pc, #348]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 80074c2:	f023 0301 	bic.w	r3, r3, #1
 80074c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80074c8:	4b55      	ldr	r3, [pc, #340]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 80074ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074cc:	4a54      	ldr	r2, [pc, #336]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 80074ce:	f023 0304 	bic.w	r3, r3, #4
 80074d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d015      	beq.n	8007508 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074dc:	f7fa fc54 	bl	8001d88 <HAL_GetTick>
 80074e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074e2:	e00a      	b.n	80074fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074e4:	f7fa fc50 	bl	8001d88 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e0cb      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074fa:	4b49      	ldr	r3, [pc, #292]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 80074fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d0ee      	beq.n	80074e4 <HAL_RCC_OscConfig+0x334>
 8007506:	e014      	b.n	8007532 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007508:	f7fa fc3e 	bl	8001d88 <HAL_GetTick>
 800750c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800750e:	e00a      	b.n	8007526 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007510:	f7fa fc3a 	bl	8001d88 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800751e:	4293      	cmp	r3, r2
 8007520:	d901      	bls.n	8007526 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e0b5      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007526:	4b3e      	ldr	r3, [pc, #248]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 8007528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1ee      	bne.n	8007510 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007532:	7dfb      	ldrb	r3, [r7, #23]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d105      	bne.n	8007544 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007538:	4b39      	ldr	r3, [pc, #228]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 800753a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800753c:	4a38      	ldr	r2, [pc, #224]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 800753e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007542:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	699b      	ldr	r3, [r3, #24]
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 80a1 	beq.w	8007690 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800754e:	4b34      	ldr	r3, [pc, #208]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f003 030c 	and.w	r3, r3, #12
 8007556:	2b08      	cmp	r3, #8
 8007558:	d05c      	beq.n	8007614 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	2b02      	cmp	r3, #2
 8007560:	d141      	bne.n	80075e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007562:	4b31      	ldr	r3, [pc, #196]	@ (8007628 <HAL_RCC_OscConfig+0x478>)
 8007564:	2200      	movs	r2, #0
 8007566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007568:	f7fa fc0e 	bl	8001d88 <HAL_GetTick>
 800756c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800756e:	e008      	b.n	8007582 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007570:	f7fa fc0a 	bl	8001d88 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2b02      	cmp	r3, #2
 800757c:	d901      	bls.n	8007582 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e087      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007582:	4b27      	ldr	r3, [pc, #156]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1f0      	bne.n	8007570 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	69da      	ldr	r2, [r3, #28]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	431a      	orrs	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800759c:	019b      	lsls	r3, r3, #6
 800759e:	431a      	orrs	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a4:	085b      	lsrs	r3, r3, #1
 80075a6:	3b01      	subs	r3, #1
 80075a8:	041b      	lsls	r3, r3, #16
 80075aa:	431a      	orrs	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b0:	061b      	lsls	r3, r3, #24
 80075b2:	491b      	ldr	r1, [pc, #108]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007628 <HAL_RCC_OscConfig+0x478>)
 80075ba:	2201      	movs	r2, #1
 80075bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075be:	f7fa fbe3 	bl	8001d88 <HAL_GetTick>
 80075c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075c4:	e008      	b.n	80075d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075c6:	f7fa fbdf 	bl	8001d88 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d901      	bls.n	80075d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e05c      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075d8:	4b11      	ldr	r3, [pc, #68]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d0f0      	beq.n	80075c6 <HAL_RCC_OscConfig+0x416>
 80075e4:	e054      	b.n	8007690 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075e6:	4b10      	ldr	r3, [pc, #64]	@ (8007628 <HAL_RCC_OscConfig+0x478>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075ec:	f7fa fbcc 	bl	8001d88 <HAL_GetTick>
 80075f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80075f2:	e008      	b.n	8007606 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075f4:	f7fa fbc8 	bl	8001d88 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d901      	bls.n	8007606 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e045      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007606:	4b06      	ldr	r3, [pc, #24]	@ (8007620 <HAL_RCC_OscConfig+0x470>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1f0      	bne.n	80075f4 <HAL_RCC_OscConfig+0x444>
 8007612:	e03d      	b.n	8007690 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d107      	bne.n	800762c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e038      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
 8007620:	40023800 	.word	0x40023800
 8007624:	40007000 	.word	0x40007000
 8007628:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800762c:	4b1b      	ldr	r3, [pc, #108]	@ (800769c <HAL_RCC_OscConfig+0x4ec>)
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d028      	beq.n	800768c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007644:	429a      	cmp	r2, r3
 8007646:	d121      	bne.n	800768c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007652:	429a      	cmp	r2, r3
 8007654:	d11a      	bne.n	800768c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800765c:	4013      	ands	r3, r2
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007662:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007664:	4293      	cmp	r3, r2
 8007666:	d111      	bne.n	800768c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007672:	085b      	lsrs	r3, r3, #1
 8007674:	3b01      	subs	r3, #1
 8007676:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007678:	429a      	cmp	r2, r3
 800767a:	d107      	bne.n	800768c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007686:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007688:	429a      	cmp	r2, r3
 800768a:	d001      	beq.n	8007690 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e000      	b.n	8007692 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3718      	adds	r7, #24
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	40023800 	.word	0x40023800

080076a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e0cc      	b.n	800784e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076b4:	4b68      	ldr	r3, [pc, #416]	@ (8007858 <HAL_RCC_ClockConfig+0x1b8>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0307 	and.w	r3, r3, #7
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d90c      	bls.n	80076dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076c2:	4b65      	ldr	r3, [pc, #404]	@ (8007858 <HAL_RCC_ClockConfig+0x1b8>)
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	b2d2      	uxtb	r2, r2
 80076c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ca:	4b63      	ldr	r3, [pc, #396]	@ (8007858 <HAL_RCC_ClockConfig+0x1b8>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0307 	and.w	r3, r3, #7
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d001      	beq.n	80076dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e0b8      	b.n	800784e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0302 	and.w	r3, r3, #2
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d020      	beq.n	800772a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d005      	beq.n	8007700 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80076f4:	4b59      	ldr	r3, [pc, #356]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	4a58      	ldr	r2, [pc, #352]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 80076fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80076fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0308 	and.w	r3, r3, #8
 8007708:	2b00      	cmp	r3, #0
 800770a:	d005      	beq.n	8007718 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800770c:	4b53      	ldr	r3, [pc, #332]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	4a52      	ldr	r2, [pc, #328]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 8007712:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007716:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007718:	4b50      	ldr	r3, [pc, #320]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	494d      	ldr	r1, [pc, #308]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 8007726:	4313      	orrs	r3, r2
 8007728:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	d044      	beq.n	80077c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d107      	bne.n	800774e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800773e:	4b47      	ldr	r3, [pc, #284]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d119      	bne.n	800777e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e07f      	b.n	800784e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	2b02      	cmp	r3, #2
 8007754:	d003      	beq.n	800775e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800775a:	2b03      	cmp	r3, #3
 800775c:	d107      	bne.n	800776e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800775e:	4b3f      	ldr	r3, [pc, #252]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d109      	bne.n	800777e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e06f      	b.n	800784e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800776e:	4b3b      	ldr	r3, [pc, #236]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e067      	b.n	800784e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800777e:	4b37      	ldr	r3, [pc, #220]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f023 0203 	bic.w	r2, r3, #3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	4934      	ldr	r1, [pc, #208]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 800778c:	4313      	orrs	r3, r2
 800778e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007790:	f7fa fafa 	bl	8001d88 <HAL_GetTick>
 8007794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007796:	e00a      	b.n	80077ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007798:	f7fa faf6 	bl	8001d88 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	1ad3      	subs	r3, r2, r3
 80077a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d901      	bls.n	80077ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e04f      	b.n	800784e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ae:	4b2b      	ldr	r3, [pc, #172]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f003 020c 	and.w	r2, r3, #12
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	429a      	cmp	r2, r3
 80077be:	d1eb      	bne.n	8007798 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077c0:	4b25      	ldr	r3, [pc, #148]	@ (8007858 <HAL_RCC_ClockConfig+0x1b8>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0307 	and.w	r3, r3, #7
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d20c      	bcs.n	80077e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ce:	4b22      	ldr	r3, [pc, #136]	@ (8007858 <HAL_RCC_ClockConfig+0x1b8>)
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	b2d2      	uxtb	r2, r2
 80077d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077d6:	4b20      	ldr	r3, [pc, #128]	@ (8007858 <HAL_RCC_ClockConfig+0x1b8>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0307 	and.w	r3, r3, #7
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d001      	beq.n	80077e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e032      	b.n	800784e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0304 	and.w	r3, r3, #4
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d008      	beq.n	8007806 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077f4:	4b19      	ldr	r3, [pc, #100]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	4916      	ldr	r1, [pc, #88]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 8007802:	4313      	orrs	r3, r2
 8007804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0308 	and.w	r3, r3, #8
 800780e:	2b00      	cmp	r3, #0
 8007810:	d009      	beq.n	8007826 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007812:	4b12      	ldr	r3, [pc, #72]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	00db      	lsls	r3, r3, #3
 8007820:	490e      	ldr	r1, [pc, #56]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 8007822:	4313      	orrs	r3, r2
 8007824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007826:	f000 f821 	bl	800786c <HAL_RCC_GetSysClockFreq>
 800782a:	4602      	mov	r2, r0
 800782c:	4b0b      	ldr	r3, [pc, #44]	@ (800785c <HAL_RCC_ClockConfig+0x1bc>)
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	091b      	lsrs	r3, r3, #4
 8007832:	f003 030f 	and.w	r3, r3, #15
 8007836:	490a      	ldr	r1, [pc, #40]	@ (8007860 <HAL_RCC_ClockConfig+0x1c0>)
 8007838:	5ccb      	ldrb	r3, [r1, r3]
 800783a:	fa22 f303 	lsr.w	r3, r2, r3
 800783e:	4a09      	ldr	r2, [pc, #36]	@ (8007864 <HAL_RCC_ClockConfig+0x1c4>)
 8007840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007842:	4b09      	ldr	r3, [pc, #36]	@ (8007868 <HAL_RCC_ClockConfig+0x1c8>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4618      	mov	r0, r3
 8007848:	f7fa fa5a 	bl	8001d00 <HAL_InitTick>

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	40023c00 	.word	0x40023c00
 800785c:	40023800 	.word	0x40023800
 8007860:	0800d404 	.word	0x0800d404
 8007864:	20000010 	.word	0x20000010
 8007868:	20000014 	.word	0x20000014

0800786c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800786c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007870:	b090      	sub	sp, #64	@ 0x40
 8007872:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007884:	4b59      	ldr	r3, [pc, #356]	@ (80079ec <HAL_RCC_GetSysClockFreq+0x180>)
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f003 030c 	and.w	r3, r3, #12
 800788c:	2b08      	cmp	r3, #8
 800788e:	d00d      	beq.n	80078ac <HAL_RCC_GetSysClockFreq+0x40>
 8007890:	2b08      	cmp	r3, #8
 8007892:	f200 80a1 	bhi.w	80079d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <HAL_RCC_GetSysClockFreq+0x34>
 800789a:	2b04      	cmp	r3, #4
 800789c:	d003      	beq.n	80078a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800789e:	e09b      	b.n	80079d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80078a0:	4b53      	ldr	r3, [pc, #332]	@ (80079f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80078a2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80078a4:	e09b      	b.n	80079de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80078a6:	4b53      	ldr	r3, [pc, #332]	@ (80079f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80078a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80078aa:	e098      	b.n	80079de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078ac:	4b4f      	ldr	r3, [pc, #316]	@ (80079ec <HAL_RCC_GetSysClockFreq+0x180>)
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078b6:	4b4d      	ldr	r3, [pc, #308]	@ (80079ec <HAL_RCC_GetSysClockFreq+0x180>)
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d028      	beq.n	8007914 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078c2:	4b4a      	ldr	r3, [pc, #296]	@ (80079ec <HAL_RCC_GetSysClockFreq+0x180>)
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	099b      	lsrs	r3, r3, #6
 80078c8:	2200      	movs	r2, #0
 80078ca:	623b      	str	r3, [r7, #32]
 80078cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80078ce:	6a3b      	ldr	r3, [r7, #32]
 80078d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80078d4:	2100      	movs	r1, #0
 80078d6:	4b47      	ldr	r3, [pc, #284]	@ (80079f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80078d8:	fb03 f201 	mul.w	r2, r3, r1
 80078dc:	2300      	movs	r3, #0
 80078de:	fb00 f303 	mul.w	r3, r0, r3
 80078e2:	4413      	add	r3, r2
 80078e4:	4a43      	ldr	r2, [pc, #268]	@ (80079f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80078e6:	fba0 1202 	umull	r1, r2, r0, r2
 80078ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078ec:	460a      	mov	r2, r1
 80078ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80078f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078f2:	4413      	add	r3, r2
 80078f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80078f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f8:	2200      	movs	r2, #0
 80078fa:	61bb      	str	r3, [r7, #24]
 80078fc:	61fa      	str	r2, [r7, #28]
 80078fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007902:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007906:	f7f8 fc67 	bl	80001d8 <__aeabi_uldivmod>
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	4613      	mov	r3, r2
 8007910:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007912:	e053      	b.n	80079bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007914:	4b35      	ldr	r3, [pc, #212]	@ (80079ec <HAL_RCC_GetSysClockFreq+0x180>)
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	099b      	lsrs	r3, r3, #6
 800791a:	2200      	movs	r2, #0
 800791c:	613b      	str	r3, [r7, #16]
 800791e:	617a      	str	r2, [r7, #20]
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007926:	f04f 0b00 	mov.w	fp, #0
 800792a:	4652      	mov	r2, sl
 800792c:	465b      	mov	r3, fp
 800792e:	f04f 0000 	mov.w	r0, #0
 8007932:	f04f 0100 	mov.w	r1, #0
 8007936:	0159      	lsls	r1, r3, #5
 8007938:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800793c:	0150      	lsls	r0, r2, #5
 800793e:	4602      	mov	r2, r0
 8007940:	460b      	mov	r3, r1
 8007942:	ebb2 080a 	subs.w	r8, r2, sl
 8007946:	eb63 090b 	sbc.w	r9, r3, fp
 800794a:	f04f 0200 	mov.w	r2, #0
 800794e:	f04f 0300 	mov.w	r3, #0
 8007952:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007956:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800795a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800795e:	ebb2 0408 	subs.w	r4, r2, r8
 8007962:	eb63 0509 	sbc.w	r5, r3, r9
 8007966:	f04f 0200 	mov.w	r2, #0
 800796a:	f04f 0300 	mov.w	r3, #0
 800796e:	00eb      	lsls	r3, r5, #3
 8007970:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007974:	00e2      	lsls	r2, r4, #3
 8007976:	4614      	mov	r4, r2
 8007978:	461d      	mov	r5, r3
 800797a:	eb14 030a 	adds.w	r3, r4, sl
 800797e:	603b      	str	r3, [r7, #0]
 8007980:	eb45 030b 	adc.w	r3, r5, fp
 8007984:	607b      	str	r3, [r7, #4]
 8007986:	f04f 0200 	mov.w	r2, #0
 800798a:	f04f 0300 	mov.w	r3, #0
 800798e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007992:	4629      	mov	r1, r5
 8007994:	028b      	lsls	r3, r1, #10
 8007996:	4621      	mov	r1, r4
 8007998:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800799c:	4621      	mov	r1, r4
 800799e:	028a      	lsls	r2, r1, #10
 80079a0:	4610      	mov	r0, r2
 80079a2:	4619      	mov	r1, r3
 80079a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a6:	2200      	movs	r2, #0
 80079a8:	60bb      	str	r3, [r7, #8]
 80079aa:	60fa      	str	r2, [r7, #12]
 80079ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079b0:	f7f8 fc12 	bl	80001d8 <__aeabi_uldivmod>
 80079b4:	4602      	mov	r2, r0
 80079b6:	460b      	mov	r3, r1
 80079b8:	4613      	mov	r3, r2
 80079ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80079bc:	4b0b      	ldr	r3, [pc, #44]	@ (80079ec <HAL_RCC_GetSysClockFreq+0x180>)
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	0c1b      	lsrs	r3, r3, #16
 80079c2:	f003 0303 	and.w	r3, r3, #3
 80079c6:	3301      	adds	r3, #1
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80079cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80079ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80079d6:	e002      	b.n	80079de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80079d8:	4b05      	ldr	r3, [pc, #20]	@ (80079f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80079da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80079dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3740      	adds	r7, #64	@ 0x40
 80079e4:	46bd      	mov	sp, r7
 80079e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079ea:	bf00      	nop
 80079ec:	40023800 	.word	0x40023800
 80079f0:	00f42400 	.word	0x00f42400
 80079f4:	017d7840 	.word	0x017d7840

080079f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079f8:	b480      	push	{r7}
 80079fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079fc:	4b03      	ldr	r3, [pc, #12]	@ (8007a0c <HAL_RCC_GetHCLKFreq+0x14>)
 80079fe:	681b      	ldr	r3, [r3, #0]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	20000010 	.word	0x20000010

08007a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a14:	f7ff fff0 	bl	80079f8 <HAL_RCC_GetHCLKFreq>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	4b05      	ldr	r3, [pc, #20]	@ (8007a30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	0a9b      	lsrs	r3, r3, #10
 8007a20:	f003 0307 	and.w	r3, r3, #7
 8007a24:	4903      	ldr	r1, [pc, #12]	@ (8007a34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a26:	5ccb      	ldrb	r3, [r1, r3]
 8007a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	40023800 	.word	0x40023800
 8007a34:	0800d414 	.word	0x0800d414

08007a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d101      	bne.n	8007a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	e041      	b.n	8007ace <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d106      	bne.n	8007a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f7fa f812 	bl	8001a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	3304      	adds	r3, #4
 8007a74:	4619      	mov	r1, r3
 8007a76:	4610      	mov	r0, r2
 8007a78:	f000 fab2 	bl	8007fe0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
	...

08007ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b085      	sub	sp, #20
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d001      	beq.n	8007af0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e044      	b.n	8007b7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f042 0201 	orr.w	r2, r2, #1
 8007b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8007b88 <HAL_TIM_Base_Start_IT+0xb0>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d018      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x6c>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b1a:	d013      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x6c>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a1a      	ldr	r2, [pc, #104]	@ (8007b8c <HAL_TIM_Base_Start_IT+0xb4>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d00e      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x6c>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a19      	ldr	r2, [pc, #100]	@ (8007b90 <HAL_TIM_Base_Start_IT+0xb8>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d009      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x6c>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a17      	ldr	r2, [pc, #92]	@ (8007b94 <HAL_TIM_Base_Start_IT+0xbc>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d004      	beq.n	8007b44 <HAL_TIM_Base_Start_IT+0x6c>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a16      	ldr	r2, [pc, #88]	@ (8007b98 <HAL_TIM_Base_Start_IT+0xc0>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d111      	bne.n	8007b68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f003 0307 	and.w	r3, r3, #7
 8007b4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2b06      	cmp	r3, #6
 8007b54:	d010      	beq.n	8007b78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f042 0201 	orr.w	r2, r2, #1
 8007b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b66:	e007      	b.n	8007b78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0201 	orr.w	r2, r2, #1
 8007b76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	40010000 	.word	0x40010000
 8007b8c:	40000400 	.word	0x40000400
 8007b90:	40000800 	.word	0x40000800
 8007b94:	40000c00 	.word	0x40000c00
 8007b98:	40014000 	.word	0x40014000

08007b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f003 0302 	and.w	r3, r3, #2
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d020      	beq.n	8007c00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d01b      	beq.n	8007c00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f06f 0202 	mvn.w	r2, #2
 8007bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f9db 	bl	8007fa2 <HAL_TIM_IC_CaptureCallback>
 8007bec:	e005      	b.n	8007bfa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f9cd 	bl	8007f8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f9de 	bl	8007fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	f003 0304 	and.w	r3, r3, #4
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d020      	beq.n	8007c4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d01b      	beq.n	8007c4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f06f 0204 	mvn.w	r2, #4
 8007c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2202      	movs	r2, #2
 8007c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f9b5 	bl	8007fa2 <HAL_TIM_IC_CaptureCallback>
 8007c38:	e005      	b.n	8007c46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f9a7 	bl	8007f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f9b8 	bl	8007fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	f003 0308 	and.w	r3, r3, #8
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d020      	beq.n	8007c98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f003 0308 	and.w	r3, r3, #8
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d01b      	beq.n	8007c98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f06f 0208 	mvn.w	r2, #8
 8007c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2204      	movs	r2, #4
 8007c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	f003 0303 	and.w	r3, r3, #3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f98f 	bl	8007fa2 <HAL_TIM_IC_CaptureCallback>
 8007c84:	e005      	b.n	8007c92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f981 	bl	8007f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f992 	bl	8007fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	f003 0310 	and.w	r3, r3, #16
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d020      	beq.n	8007ce4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f003 0310 	and.w	r3, r3, #16
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d01b      	beq.n	8007ce4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f06f 0210 	mvn.w	r2, #16
 8007cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2208      	movs	r2, #8
 8007cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	69db      	ldr	r3, [r3, #28]
 8007cc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 f969 	bl	8007fa2 <HAL_TIM_IC_CaptureCallback>
 8007cd0:	e005      	b.n	8007cde <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f95b 	bl	8007f8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f96c 	bl	8007fb6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	f003 0301 	and.w	r3, r3, #1
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00c      	beq.n	8007d08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d007      	beq.n	8007d08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f06f 0201 	mvn.w	r2, #1
 8007d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7f8 fc34 	bl	8000570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00c      	beq.n	8007d2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d007      	beq.n	8007d2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fb84 	bl	8008434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00c      	beq.n	8007d50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d007      	beq.n	8007d50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f000 f93d 	bl	8007fca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	f003 0320 	and.w	r3, r3, #32
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00c      	beq.n	8007d74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f003 0320 	and.w	r3, r3, #32
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d007      	beq.n	8007d74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f06f 0220 	mvn.w	r2, #32
 8007d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fb56 	bl	8008420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d74:	bf00      	nop
 8007d76:	3710      	adds	r7, #16
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d86:	2300      	movs	r3, #0
 8007d88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d101      	bne.n	8007d98 <HAL_TIM_ConfigClockSource+0x1c>
 8007d94:	2302      	movs	r3, #2
 8007d96:	e0b4      	b.n	8007f02 <HAL_TIM_ConfigClockSource+0x186>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007dbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dd0:	d03e      	beq.n	8007e50 <HAL_TIM_ConfigClockSource+0xd4>
 8007dd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dd6:	f200 8087 	bhi.w	8007ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8007dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dde:	f000 8086 	beq.w	8007eee <HAL_TIM_ConfigClockSource+0x172>
 8007de2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007de6:	d87f      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8007de8:	2b70      	cmp	r3, #112	@ 0x70
 8007dea:	d01a      	beq.n	8007e22 <HAL_TIM_ConfigClockSource+0xa6>
 8007dec:	2b70      	cmp	r3, #112	@ 0x70
 8007dee:	d87b      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8007df0:	2b60      	cmp	r3, #96	@ 0x60
 8007df2:	d050      	beq.n	8007e96 <HAL_TIM_ConfigClockSource+0x11a>
 8007df4:	2b60      	cmp	r3, #96	@ 0x60
 8007df6:	d877      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8007df8:	2b50      	cmp	r3, #80	@ 0x50
 8007dfa:	d03c      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0xfa>
 8007dfc:	2b50      	cmp	r3, #80	@ 0x50
 8007dfe:	d873      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8007e00:	2b40      	cmp	r3, #64	@ 0x40
 8007e02:	d058      	beq.n	8007eb6 <HAL_TIM_ConfigClockSource+0x13a>
 8007e04:	2b40      	cmp	r3, #64	@ 0x40
 8007e06:	d86f      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8007e08:	2b30      	cmp	r3, #48	@ 0x30
 8007e0a:	d064      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8007e0c:	2b30      	cmp	r3, #48	@ 0x30
 8007e0e:	d86b      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8007e10:	2b20      	cmp	r3, #32
 8007e12:	d060      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8007e14:	2b20      	cmp	r3, #32
 8007e16:	d867      	bhi.n	8007ee8 <HAL_TIM_ConfigClockSource+0x16c>
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d05c      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8007e1c:	2b10      	cmp	r3, #16
 8007e1e:	d05a      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0x15a>
 8007e20:	e062      	b.n	8007ee8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e32:	f000 fa66 	bl	8008302 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	609a      	str	r2, [r3, #8]
      break;
 8007e4e:	e04f      	b.n	8007ef0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e60:	f000 fa4f 	bl	8008302 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689a      	ldr	r2, [r3, #8]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e72:	609a      	str	r2, [r3, #8]
      break;
 8007e74:	e03c      	b.n	8007ef0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e82:	461a      	mov	r2, r3
 8007e84:	f000 f9c3 	bl	800820e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2150      	movs	r1, #80	@ 0x50
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 fa1c 	bl	80082cc <TIM_ITRx_SetConfig>
      break;
 8007e94:	e02c      	b.n	8007ef0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f000 f9e2 	bl	800826c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2160      	movs	r1, #96	@ 0x60
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 fa0c 	bl	80082cc <TIM_ITRx_SetConfig>
      break;
 8007eb4:	e01c      	b.n	8007ef0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	f000 f9a3 	bl	800820e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2140      	movs	r1, #64	@ 0x40
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 f9fc 	bl	80082cc <TIM_ITRx_SetConfig>
      break;
 8007ed4:	e00c      	b.n	8007ef0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	f000 f9f3 	bl	80082cc <TIM_ITRx_SetConfig>
      break;
 8007ee6:	e003      	b.n	8007ef0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	73fb      	strb	r3, [r7, #15]
      break;
 8007eec:	e000      	b.n	8007ef0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007eee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}

08007f0a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b082      	sub	sp, #8
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e031      	b.n	8007f86 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007f32:	6839      	ldr	r1, [r7, #0]
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f8d9 	bl	80080ec <TIM_SlaveTimer_SetConfig>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d009      	beq.n	8007f54 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	e018      	b.n	8007f86 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68da      	ldr	r2, [r3, #12]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f62:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68da      	ldr	r2, [r3, #12]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007f72:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b083      	sub	sp, #12
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f96:	bf00      	nop
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007faa:	bf00      	nop
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b083      	sub	sp, #12
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr

08007fca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
	...

08007fe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	4a37      	ldr	r2, [pc, #220]	@ (80080d0 <TIM_Base_SetConfig+0xf0>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d00f      	beq.n	8008018 <TIM_Base_SetConfig+0x38>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ffe:	d00b      	beq.n	8008018 <TIM_Base_SetConfig+0x38>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a34      	ldr	r2, [pc, #208]	@ (80080d4 <TIM_Base_SetConfig+0xf4>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d007      	beq.n	8008018 <TIM_Base_SetConfig+0x38>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a33      	ldr	r2, [pc, #204]	@ (80080d8 <TIM_Base_SetConfig+0xf8>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d003      	beq.n	8008018 <TIM_Base_SetConfig+0x38>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a32      	ldr	r2, [pc, #200]	@ (80080dc <TIM_Base_SetConfig+0xfc>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d108      	bne.n	800802a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800801e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a28      	ldr	r2, [pc, #160]	@ (80080d0 <TIM_Base_SetConfig+0xf0>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d01b      	beq.n	800806a <TIM_Base_SetConfig+0x8a>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008038:	d017      	beq.n	800806a <TIM_Base_SetConfig+0x8a>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a25      	ldr	r2, [pc, #148]	@ (80080d4 <TIM_Base_SetConfig+0xf4>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d013      	beq.n	800806a <TIM_Base_SetConfig+0x8a>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a24      	ldr	r2, [pc, #144]	@ (80080d8 <TIM_Base_SetConfig+0xf8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d00f      	beq.n	800806a <TIM_Base_SetConfig+0x8a>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a23      	ldr	r2, [pc, #140]	@ (80080dc <TIM_Base_SetConfig+0xfc>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d00b      	beq.n	800806a <TIM_Base_SetConfig+0x8a>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a22      	ldr	r2, [pc, #136]	@ (80080e0 <TIM_Base_SetConfig+0x100>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d007      	beq.n	800806a <TIM_Base_SetConfig+0x8a>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a21      	ldr	r2, [pc, #132]	@ (80080e4 <TIM_Base_SetConfig+0x104>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d003      	beq.n	800806a <TIM_Base_SetConfig+0x8a>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a20      	ldr	r2, [pc, #128]	@ (80080e8 <TIM_Base_SetConfig+0x108>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d108      	bne.n	800807c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008070:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	4313      	orrs	r3, r2
 800807a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	4313      	orrs	r3, r2
 8008088:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	689a      	ldr	r2, [r3, #8]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a0c      	ldr	r2, [pc, #48]	@ (80080d0 <TIM_Base_SetConfig+0xf0>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d103      	bne.n	80080aa <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	691a      	ldr	r2, [r3, #16]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f043 0204 	orr.w	r2, r3, #4
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	601a      	str	r2, [r3, #0]
}
 80080c2:	bf00      	nop
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	40010000 	.word	0x40010000
 80080d4:	40000400 	.word	0x40000400
 80080d8:	40000800 	.word	0x40000800
 80080dc:	40000c00 	.word	0x40000c00
 80080e0:	40014000 	.word	0x40014000
 80080e4:	40014400 	.word	0x40014400
 80080e8:	40014800 	.word	0x40014800

080080ec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008108:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	4313      	orrs	r3, r2
 8008112:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f023 0307 	bic.w	r3, r3, #7
 800811a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	4313      	orrs	r3, r2
 8008124:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	2b70      	cmp	r3, #112	@ 0x70
 8008134:	d01a      	beq.n	800816c <TIM_SlaveTimer_SetConfig+0x80>
 8008136:	2b70      	cmp	r3, #112	@ 0x70
 8008138:	d860      	bhi.n	80081fc <TIM_SlaveTimer_SetConfig+0x110>
 800813a:	2b60      	cmp	r3, #96	@ 0x60
 800813c:	d054      	beq.n	80081e8 <TIM_SlaveTimer_SetConfig+0xfc>
 800813e:	2b60      	cmp	r3, #96	@ 0x60
 8008140:	d85c      	bhi.n	80081fc <TIM_SlaveTimer_SetConfig+0x110>
 8008142:	2b50      	cmp	r3, #80	@ 0x50
 8008144:	d046      	beq.n	80081d4 <TIM_SlaveTimer_SetConfig+0xe8>
 8008146:	2b50      	cmp	r3, #80	@ 0x50
 8008148:	d858      	bhi.n	80081fc <TIM_SlaveTimer_SetConfig+0x110>
 800814a:	2b40      	cmp	r3, #64	@ 0x40
 800814c:	d019      	beq.n	8008182 <TIM_SlaveTimer_SetConfig+0x96>
 800814e:	2b40      	cmp	r3, #64	@ 0x40
 8008150:	d854      	bhi.n	80081fc <TIM_SlaveTimer_SetConfig+0x110>
 8008152:	2b30      	cmp	r3, #48	@ 0x30
 8008154:	d055      	beq.n	8008202 <TIM_SlaveTimer_SetConfig+0x116>
 8008156:	2b30      	cmp	r3, #48	@ 0x30
 8008158:	d850      	bhi.n	80081fc <TIM_SlaveTimer_SetConfig+0x110>
 800815a:	2b20      	cmp	r3, #32
 800815c:	d051      	beq.n	8008202 <TIM_SlaveTimer_SetConfig+0x116>
 800815e:	2b20      	cmp	r3, #32
 8008160:	d84c      	bhi.n	80081fc <TIM_SlaveTimer_SetConfig+0x110>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d04d      	beq.n	8008202 <TIM_SlaveTimer_SetConfig+0x116>
 8008166:	2b10      	cmp	r3, #16
 8008168:	d04b      	beq.n	8008202 <TIM_SlaveTimer_SetConfig+0x116>
 800816a:	e047      	b.n	80081fc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800817c:	f000 f8c1 	bl	8008302 <TIM_ETR_SetConfig>
      break;
 8008180:	e040      	b.n	8008204 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2b05      	cmp	r3, #5
 8008188:	d101      	bne.n	800818e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e03b      	b.n	8008206 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	6a1a      	ldr	r2, [r3, #32]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f022 0201 	bic.w	r2, r2, #1
 80081a4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80081b4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	011b      	lsls	r3, r3, #4
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	4313      	orrs	r3, r2
 80081c0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	621a      	str	r2, [r3, #32]
      break;
 80081d2:	e017      	b.n	8008204 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081e0:	461a      	mov	r2, r3
 80081e2:	f000 f814 	bl	800820e <TIM_TI1_ConfigInputStage>
      break;
 80081e6:	e00d      	b.n	8008204 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081f4:	461a      	mov	r2, r3
 80081f6:	f000 f839 	bl	800826c <TIM_TI2_ConfigInputStage>
      break;
 80081fa:	e003      	b.n	8008204 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008200:	e000      	b.n	8008204 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008202:	bf00      	nop
  }

  return status;
 8008204:	7dfb      	ldrb	r3, [r7, #23]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3718      	adds	r7, #24
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800820e:	b480      	push	{r7}
 8008210:	b087      	sub	sp, #28
 8008212:	af00      	add	r7, sp, #0
 8008214:	60f8      	str	r0, [r7, #12]
 8008216:	60b9      	str	r1, [r7, #8]
 8008218:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6a1b      	ldr	r3, [r3, #32]
 800821e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6a1b      	ldr	r3, [r3, #32]
 8008224:	f023 0201 	bic.w	r2, r3, #1
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008238:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	011b      	lsls	r3, r3, #4
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	4313      	orrs	r3, r2
 8008242:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	f023 030a 	bic.w	r3, r3, #10
 800824a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	4313      	orrs	r3, r2
 8008252:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	697a      	ldr	r2, [r7, #20]
 800825e:	621a      	str	r2, [r3, #32]
}
 8008260:	bf00      	nop
 8008262:	371c      	adds	r7, #28
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800826c:	b480      	push	{r7}
 800826e:	b087      	sub	sp, #28
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6a1b      	ldr	r3, [r3, #32]
 8008282:	f023 0210 	bic.w	r2, r3, #16
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	031b      	lsls	r3, r3, #12
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	4313      	orrs	r3, r2
 80082a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80082a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	011b      	lsls	r3, r3, #4
 80082ae:	697a      	ldr	r2, [r7, #20]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	621a      	str	r2, [r3, #32]
}
 80082c0:	bf00      	nop
 80082c2:	371c      	adds	r7, #28
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	f043 0307 	orr.w	r3, r3, #7
 80082ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	609a      	str	r2, [r3, #8]
}
 80082f6:	bf00      	nop
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008302:	b480      	push	{r7}
 8008304:	b087      	sub	sp, #28
 8008306:	af00      	add	r7, sp, #0
 8008308:	60f8      	str	r0, [r7, #12]
 800830a:	60b9      	str	r1, [r7, #8]
 800830c:	607a      	str	r2, [r7, #4]
 800830e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800831c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	021a      	lsls	r2, r3, #8
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	431a      	orrs	r2, r3
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	4313      	orrs	r3, r2
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	4313      	orrs	r3, r2
 800832e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	609a      	str	r2, [r3, #8]
}
 8008336:	bf00      	nop
 8008338:	371c      	adds	r7, #28
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
	...

08008344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008354:	2b01      	cmp	r3, #1
 8008356:	d101      	bne.n	800835c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008358:	2302      	movs	r3, #2
 800835a:	e050      	b.n	80083fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	4313      	orrs	r3, r2
 800838c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a1c      	ldr	r2, [pc, #112]	@ (800840c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d018      	beq.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083a8:	d013      	beq.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a18      	ldr	r2, [pc, #96]	@ (8008410 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d00e      	beq.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a16      	ldr	r2, [pc, #88]	@ (8008414 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d009      	beq.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a15      	ldr	r2, [pc, #84]	@ (8008418 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d004      	beq.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a13      	ldr	r2, [pc, #76]	@ (800841c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d10c      	bne.n	80083ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	68ba      	ldr	r2, [r7, #8]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	40010000 	.word	0x40010000
 8008410:	40000400 	.word	0x40000400
 8008414:	40000800 	.word	0x40000800
 8008418:	40000c00 	.word	0x40000c00
 800841c:	40014000 	.word	0x40014000

08008420 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800843c:	bf00      	nop
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008448:	b084      	sub	sp, #16
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	f107 001c 	add.w	r0, r7, #28
 8008456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800845a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800845e:	2b01      	cmp	r3, #1
 8008460:	d123      	bne.n	80084aa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008466:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800848a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800848e:	2b01      	cmp	r3, #1
 8008490:	d105      	bne.n	800849e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f001 fae8 	bl	8009a74 <USB_CoreReset>
 80084a4:	4603      	mov	r3, r0
 80084a6:	73fb      	strb	r3, [r7, #15]
 80084a8:	e01b      	b.n	80084e2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f001 fadc 	bl	8009a74 <USB_CoreReset>
 80084bc:	4603      	mov	r3, r0
 80084be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80084c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d106      	bne.n	80084d6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80084d4:	e005      	b.n	80084e2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80084e2:	7fbb      	ldrb	r3, [r7, #30]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d10b      	bne.n	8008500 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f043 0206 	orr.w	r2, r3, #6
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	f043 0220 	orr.w	r2, r3, #32
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008500:	7bfb      	ldrb	r3, [r7, #15]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3710      	adds	r7, #16
 8008506:	46bd      	mov	sp, r7
 8008508:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800850c:	b004      	add	sp, #16
 800850e:	4770      	bx	lr

08008510 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008510:	b480      	push	{r7}
 8008512:	b087      	sub	sp, #28
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	4613      	mov	r3, r2
 800851c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800851e:	79fb      	ldrb	r3, [r7, #7]
 8008520:	2b02      	cmp	r3, #2
 8008522:	d165      	bne.n	80085f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	4a41      	ldr	r2, [pc, #260]	@ (800862c <USB_SetTurnaroundTime+0x11c>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d906      	bls.n	800853a <USB_SetTurnaroundTime+0x2a>
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	4a40      	ldr	r2, [pc, #256]	@ (8008630 <USB_SetTurnaroundTime+0x120>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d202      	bcs.n	800853a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008534:	230f      	movs	r3, #15
 8008536:	617b      	str	r3, [r7, #20]
 8008538:	e062      	b.n	8008600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	4a3c      	ldr	r2, [pc, #240]	@ (8008630 <USB_SetTurnaroundTime+0x120>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d306      	bcc.n	8008550 <USB_SetTurnaroundTime+0x40>
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	4a3b      	ldr	r2, [pc, #236]	@ (8008634 <USB_SetTurnaroundTime+0x124>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d202      	bcs.n	8008550 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800854a:	230e      	movs	r3, #14
 800854c:	617b      	str	r3, [r7, #20]
 800854e:	e057      	b.n	8008600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	4a38      	ldr	r2, [pc, #224]	@ (8008634 <USB_SetTurnaroundTime+0x124>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d306      	bcc.n	8008566 <USB_SetTurnaroundTime+0x56>
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	4a37      	ldr	r2, [pc, #220]	@ (8008638 <USB_SetTurnaroundTime+0x128>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d202      	bcs.n	8008566 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008560:	230d      	movs	r3, #13
 8008562:	617b      	str	r3, [r7, #20]
 8008564:	e04c      	b.n	8008600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	4a33      	ldr	r2, [pc, #204]	@ (8008638 <USB_SetTurnaroundTime+0x128>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d306      	bcc.n	800857c <USB_SetTurnaroundTime+0x6c>
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	4a32      	ldr	r2, [pc, #200]	@ (800863c <USB_SetTurnaroundTime+0x12c>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d802      	bhi.n	800857c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008576:	230c      	movs	r3, #12
 8008578:	617b      	str	r3, [r7, #20]
 800857a:	e041      	b.n	8008600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	4a2f      	ldr	r2, [pc, #188]	@ (800863c <USB_SetTurnaroundTime+0x12c>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d906      	bls.n	8008592 <USB_SetTurnaroundTime+0x82>
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	4a2e      	ldr	r2, [pc, #184]	@ (8008640 <USB_SetTurnaroundTime+0x130>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d802      	bhi.n	8008592 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800858c:	230b      	movs	r3, #11
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	e036      	b.n	8008600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	4a2a      	ldr	r2, [pc, #168]	@ (8008640 <USB_SetTurnaroundTime+0x130>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d906      	bls.n	80085a8 <USB_SetTurnaroundTime+0x98>
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	4a29      	ldr	r2, [pc, #164]	@ (8008644 <USB_SetTurnaroundTime+0x134>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d802      	bhi.n	80085a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80085a2:	230a      	movs	r3, #10
 80085a4:	617b      	str	r3, [r7, #20]
 80085a6:	e02b      	b.n	8008600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	4a26      	ldr	r2, [pc, #152]	@ (8008644 <USB_SetTurnaroundTime+0x134>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d906      	bls.n	80085be <USB_SetTurnaroundTime+0xae>
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	4a25      	ldr	r2, [pc, #148]	@ (8008648 <USB_SetTurnaroundTime+0x138>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d202      	bcs.n	80085be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80085b8:	2309      	movs	r3, #9
 80085ba:	617b      	str	r3, [r7, #20]
 80085bc:	e020      	b.n	8008600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	4a21      	ldr	r2, [pc, #132]	@ (8008648 <USB_SetTurnaroundTime+0x138>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d306      	bcc.n	80085d4 <USB_SetTurnaroundTime+0xc4>
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	4a20      	ldr	r2, [pc, #128]	@ (800864c <USB_SetTurnaroundTime+0x13c>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d802      	bhi.n	80085d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80085ce:	2308      	movs	r3, #8
 80085d0:	617b      	str	r3, [r7, #20]
 80085d2:	e015      	b.n	8008600 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	4a1d      	ldr	r2, [pc, #116]	@ (800864c <USB_SetTurnaroundTime+0x13c>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d906      	bls.n	80085ea <USB_SetTurnaroundTime+0xda>
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	4a1c      	ldr	r2, [pc, #112]	@ (8008650 <USB_SetTurnaroundTime+0x140>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d202      	bcs.n	80085ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80085e4:	2307      	movs	r3, #7
 80085e6:	617b      	str	r3, [r7, #20]
 80085e8:	e00a      	b.n	8008600 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80085ea:	2306      	movs	r3, #6
 80085ec:	617b      	str	r3, [r7, #20]
 80085ee:	e007      	b.n	8008600 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80085f0:	79fb      	ldrb	r3, [r7, #7]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d102      	bne.n	80085fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80085f6:	2309      	movs	r3, #9
 80085f8:	617b      	str	r3, [r7, #20]
 80085fa:	e001      	b.n	8008600 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80085fc:	2309      	movs	r3, #9
 80085fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	68da      	ldr	r2, [r3, #12]
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	029b      	lsls	r3, r3, #10
 8008614:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008618:	431a      	orrs	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	371c      	adds	r7, #28
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	00d8acbf 	.word	0x00d8acbf
 8008630:	00e4e1c0 	.word	0x00e4e1c0
 8008634:	00f42400 	.word	0x00f42400
 8008638:	01067380 	.word	0x01067380
 800863c:	011a499f 	.word	0x011a499f
 8008640:	01312cff 	.word	0x01312cff
 8008644:	014ca43f 	.word	0x014ca43f
 8008648:	016e3600 	.word	0x016e3600
 800864c:	01a6ab1f 	.word	0x01a6ab1f
 8008650:	01e84800 	.word	0x01e84800

08008654 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f043 0201 	orr.w	r2, r3, #1
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008676:	b480      	push	{r7}
 8008678:	b083      	sub	sp, #12
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f023 0201 	bic.w	r2, r3, #1
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	460b      	mov	r3, r1
 80086a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80086a4:	2300      	movs	r3, #0
 80086a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d115      	bne.n	80086e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80086c6:	200a      	movs	r0, #10
 80086c8:	f7f9 fb6a 	bl	8001da0 <HAL_Delay>
      ms += 10U;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	330a      	adds	r3, #10
 80086d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f001 f93f 	bl	8009956 <USB_GetMode>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d01e      	beq.n	800871c <USB_SetCurrentMode+0x84>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2bc7      	cmp	r3, #199	@ 0xc7
 80086e2:	d9f0      	bls.n	80086c6 <USB_SetCurrentMode+0x2e>
 80086e4:	e01a      	b.n	800871c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80086e6:	78fb      	ldrb	r3, [r7, #3]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d115      	bne.n	8008718 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80086f8:	200a      	movs	r0, #10
 80086fa:	f7f9 fb51 	bl	8001da0 <HAL_Delay>
      ms += 10U;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	330a      	adds	r3, #10
 8008702:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f001 f926 	bl	8009956 <USB_GetMode>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d005      	beq.n	800871c <USB_SetCurrentMode+0x84>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2bc7      	cmp	r3, #199	@ 0xc7
 8008714:	d9f0      	bls.n	80086f8 <USB_SetCurrentMode+0x60>
 8008716:	e001      	b.n	800871c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	e005      	b.n	8008728 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2bc8      	cmp	r3, #200	@ 0xc8
 8008720:	d101      	bne.n	8008726 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e000      	b.n	8008728 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008726:	2300      	movs	r3, #0
}
 8008728:	4618      	mov	r0, r3
 800872a:	3710      	adds	r7, #16
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008730:	b084      	sub	sp, #16
 8008732:	b580      	push	{r7, lr}
 8008734:	b086      	sub	sp, #24
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800873e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800874a:	2300      	movs	r3, #0
 800874c:	613b      	str	r3, [r7, #16]
 800874e:	e009      	b.n	8008764 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	3340      	adds	r3, #64	@ 0x40
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4413      	add	r3, r2
 800875a:	2200      	movs	r2, #0
 800875c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	3301      	adds	r3, #1
 8008762:	613b      	str	r3, [r7, #16]
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	2b0e      	cmp	r3, #14
 8008768:	d9f2      	bls.n	8008750 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800876a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800876e:	2b00      	cmp	r3, #0
 8008770:	d11c      	bne.n	80087ac <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008780:	f043 0302 	orr.w	r3, r3, #2
 8008784:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800878a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008796:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80087aa:	e00b      	b.n	80087c4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087bc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80087ca:	461a      	mov	r2, r3
 80087cc:	2300      	movs	r3, #0
 80087ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d10d      	bne.n	80087f4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80087d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d104      	bne.n	80087ea <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80087e0:	2100      	movs	r1, #0
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 f968 	bl	8008ab8 <USB_SetDevSpeed>
 80087e8:	e008      	b.n	80087fc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80087ea:	2101      	movs	r1, #1
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f963 	bl	8008ab8 <USB_SetDevSpeed>
 80087f2:	e003      	b.n	80087fc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80087f4:	2103      	movs	r1, #3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f95e 	bl	8008ab8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80087fc:	2110      	movs	r1, #16
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f000 f8fa 	bl	80089f8 <USB_FlushTxFifo>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800880a:	2301      	movs	r3, #1
 800880c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f924 	bl	8008a5c <USB_FlushRxFifo>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008824:	461a      	mov	r2, r3
 8008826:	2300      	movs	r3, #0
 8008828:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008830:	461a      	mov	r2, r3
 8008832:	2300      	movs	r3, #0
 8008834:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800883c:	461a      	mov	r2, r3
 800883e:	2300      	movs	r3, #0
 8008840:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008842:	2300      	movs	r3, #0
 8008844:	613b      	str	r3, [r7, #16]
 8008846:	e043      	b.n	80088d0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4413      	add	r3, r2
 8008850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800885a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800885e:	d118      	bne.n	8008892 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10a      	bne.n	800887c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	015a      	lsls	r2, r3, #5
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	4413      	add	r3, r2
 800886e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008872:	461a      	mov	r2, r3
 8008874:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008878:	6013      	str	r3, [r2, #0]
 800887a:	e013      	b.n	80088a4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008888:	461a      	mov	r2, r3
 800888a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800888e:	6013      	str	r3, [r2, #0]
 8008890:	e008      	b.n	80088a4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	4413      	add	r3, r2
 800889a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800889e:	461a      	mov	r2, r3
 80088a0:	2300      	movs	r3, #0
 80088a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	015a      	lsls	r2, r3, #5
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088b0:	461a      	mov	r2, r3
 80088b2:	2300      	movs	r3, #0
 80088b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80088b6:	693b      	ldr	r3, [r7, #16]
 80088b8:	015a      	lsls	r2, r3, #5
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088c2:	461a      	mov	r2, r3
 80088c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80088c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	3301      	adds	r3, #1
 80088ce:	613b      	str	r3, [r7, #16]
 80088d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80088d4:	461a      	mov	r2, r3
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	4293      	cmp	r3, r2
 80088da:	d3b5      	bcc.n	8008848 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088dc:	2300      	movs	r3, #0
 80088de:	613b      	str	r3, [r7, #16]
 80088e0:	e043      	b.n	800896a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	015a      	lsls	r2, r3, #5
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	4413      	add	r3, r2
 80088ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088f8:	d118      	bne.n	800892c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10a      	bne.n	8008916 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	015a      	lsls	r2, r3, #5
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	4413      	add	r3, r2
 8008908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800890c:	461a      	mov	r2, r3
 800890e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	e013      	b.n	800893e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	015a      	lsls	r2, r3, #5
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	4413      	add	r3, r2
 800891e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008922:	461a      	mov	r2, r3
 8008924:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008928:	6013      	str	r3, [r2, #0]
 800892a:	e008      	b.n	800893e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4413      	add	r3, r2
 8008934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008938:	461a      	mov	r2, r3
 800893a:	2300      	movs	r3, #0
 800893c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	4413      	add	r3, r2
 8008946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800894a:	461a      	mov	r2, r3
 800894c:	2300      	movs	r3, #0
 800894e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	015a      	lsls	r2, r3, #5
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	4413      	add	r3, r2
 8008958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800895c:	461a      	mov	r2, r3
 800895e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008962:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	3301      	adds	r3, #1
 8008968:	613b      	str	r3, [r7, #16]
 800896a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800896e:	461a      	mov	r2, r3
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	4293      	cmp	r3, r2
 8008974:	d3b5      	bcc.n	80088e2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008988:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008996:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008998:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800899c:	2b00      	cmp	r3, #0
 800899e:	d105      	bne.n	80089ac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	f043 0210 	orr.w	r2, r3, #16
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	699a      	ldr	r2, [r3, #24]
 80089b0:	4b10      	ldr	r3, [pc, #64]	@ (80089f4 <USB_DevInit+0x2c4>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80089b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d005      	beq.n	80089cc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	f043 0208 	orr.w	r2, r3, #8
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80089cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d107      	bne.n	80089e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80089dc:	f043 0304 	orr.w	r3, r3, #4
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80089e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3718      	adds	r7, #24
 80089ea:	46bd      	mov	sp, r7
 80089ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089f0:	b004      	add	sp, #16
 80089f2:	4770      	bx	lr
 80089f4:	803c3800 	.word	0x803c3800

080089f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a02:	2300      	movs	r3, #0
 8008a04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a12:	d901      	bls.n	8008a18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a14:	2303      	movs	r3, #3
 8008a16:	e01b      	b.n	8008a50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	691b      	ldr	r3, [r3, #16]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	daf2      	bge.n	8008a06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a20:	2300      	movs	r3, #0
 8008a22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	019b      	lsls	r3, r3, #6
 8008a28:	f043 0220 	orr.w	r2, r3, #32
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	3301      	adds	r3, #1
 8008a34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a3c:	d901      	bls.n	8008a42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e006      	b.n	8008a50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	f003 0320 	and.w	r3, r3, #32
 8008a4a:	2b20      	cmp	r3, #32
 8008a4c:	d0f0      	beq.n	8008a30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3714      	adds	r7, #20
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a74:	d901      	bls.n	8008a7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e018      	b.n	8008aac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	daf2      	bge.n	8008a68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2210      	movs	r2, #16
 8008a8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a98:	d901      	bls.n	8008a9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e006      	b.n	8008aac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	f003 0310 	and.w	r3, r3, #16
 8008aa6:	2b10      	cmp	r3, #16
 8008aa8:	d0f0      	beq.n	8008a8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	78fb      	ldrb	r3, [r7, #3]
 8008ad2:	68f9      	ldr	r1, [r7, #12]
 8008ad4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b087      	sub	sp, #28
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	f003 0306 	and.w	r3, r3, #6
 8008b02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d102      	bne.n	8008b10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	75fb      	strb	r3, [r7, #23]
 8008b0e:	e00a      	b.n	8008b26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d002      	beq.n	8008b1c <USB_GetDevSpeed+0x32>
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2b06      	cmp	r3, #6
 8008b1a:	d102      	bne.n	8008b22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	75fb      	strb	r3, [r7, #23]
 8008b20:	e001      	b.n	8008b26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008b22:	230f      	movs	r3, #15
 8008b24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	371c      	adds	r7, #28
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	785b      	ldrb	r3, [r3, #1]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d13a      	bne.n	8008bc6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b56:	69da      	ldr	r2, [r3, #28]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	f003 030f 	and.w	r3, r3, #15
 8008b60:	2101      	movs	r1, #1
 8008b62:	fa01 f303 	lsl.w	r3, r1, r3
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	68f9      	ldr	r1, [r7, #12]
 8008b6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d155      	bne.n	8008c34 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	015a      	lsls	r2, r3, #5
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4413      	add	r3, r2
 8008b90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	791b      	ldrb	r3, [r3, #4]
 8008ba2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008ba4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	059b      	lsls	r3, r3, #22
 8008baa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bac:	4313      	orrs	r3, r2
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	0151      	lsls	r1, r2, #5
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	440a      	add	r2, r1
 8008bb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bc2:	6013      	str	r3, [r2, #0]
 8008bc4:	e036      	b.n	8008c34 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bcc:	69da      	ldr	r2, [r3, #28]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	f003 030f 	and.w	r3, r3, #15
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bdc:	041b      	lsls	r3, r3, #16
 8008bde:	68f9      	ldr	r1, [r7, #12]
 8008be0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008be4:	4313      	orrs	r3, r2
 8008be6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	015a      	lsls	r2, r3, #5
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	4413      	add	r3, r2
 8008bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d11a      	bne.n	8008c34 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	015a      	lsls	r2, r3, #5
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	4413      	add	r3, r2
 8008c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	791b      	ldrb	r3, [r3, #4]
 8008c18:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c1a:	430b      	orrs	r3, r1
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	68ba      	ldr	r2, [r7, #8]
 8008c20:	0151      	lsls	r1, r2, #5
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	440a      	add	r2, r1
 8008c26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c32:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3714      	adds	r7, #20
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
	...

08008c44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	785b      	ldrb	r3, [r3, #1]
 8008c5c:	2b01      	cmp	r3, #1
 8008c5e:	d161      	bne.n	8008d24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c76:	d11f      	bne.n	8008cb8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	0151      	lsls	r1, r2, #5
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	440a      	add	r2, r1
 8008c8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c92:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008c96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	015a      	lsls	r2, r3, #5
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	0151      	lsls	r1, r2, #5
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	440a      	add	r2, r1
 8008cae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cb2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008cb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	f003 030f 	and.w	r3, r3, #15
 8008cc8:	2101      	movs	r1, #1
 8008cca:	fa01 f303 	lsl.w	r3, r1, r3
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	43db      	mvns	r3, r3
 8008cd2:	68f9      	ldr	r1, [r7, #12]
 8008cd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cd8:	4013      	ands	r3, r2
 8008cda:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ce2:	69da      	ldr	r2, [r3, #28]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	f003 030f 	and.w	r3, r3, #15
 8008cec:	2101      	movs	r1, #1
 8008cee:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	43db      	mvns	r3, r3
 8008cf6:	68f9      	ldr	r1, [r7, #12]
 8008cf8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	0159      	lsls	r1, r3, #5
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	440b      	add	r3, r1
 8008d16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	4b35      	ldr	r3, [pc, #212]	@ (8008df4 <USB_DeactivateEndpoint+0x1b0>)
 8008d1e:	4013      	ands	r3, r2
 8008d20:	600b      	str	r3, [r1, #0]
 8008d22:	e060      	b.n	8008de6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	015a      	lsls	r2, r3, #5
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d3a:	d11f      	bne.n	8008d7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	015a      	lsls	r2, r3, #5
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4413      	add	r3, r2
 8008d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	68ba      	ldr	r2, [r7, #8]
 8008d4c:	0151      	lsls	r1, r2, #5
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	440a      	add	r2, r1
 8008d52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	015a      	lsls	r2, r3, #5
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	4413      	add	r3, r2
 8008d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	0151      	lsls	r1, r2, #5
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	440a      	add	r2, r1
 8008d72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	f003 030f 	and.w	r3, r3, #15
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d92:	041b      	lsls	r3, r3, #16
 8008d94:	43db      	mvns	r3, r3
 8008d96:	68f9      	ldr	r1, [r7, #12]
 8008d98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008da6:	69da      	ldr	r2, [r3, #28]
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	f003 030f 	and.w	r3, r3, #15
 8008db0:	2101      	movs	r1, #1
 8008db2:	fa01 f303 	lsl.w	r3, r1, r3
 8008db6:	041b      	lsls	r3, r3, #16
 8008db8:	43db      	mvns	r3, r3
 8008dba:	68f9      	ldr	r1, [r7, #12]
 8008dbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	015a      	lsls	r2, r3, #5
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	0159      	lsls	r1, r3, #5
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	440b      	add	r3, r1
 8008dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dde:	4619      	mov	r1, r3
 8008de0:	4b05      	ldr	r3, [pc, #20]	@ (8008df8 <USB_DeactivateEndpoint+0x1b4>)
 8008de2:	4013      	ands	r3, r2
 8008de4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3714      	adds	r7, #20
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr
 8008df4:	ec337800 	.word	0xec337800
 8008df8:	eff37800 	.word	0xeff37800

08008dfc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b08a      	sub	sp, #40	@ 0x28
 8008e00:	af02      	add	r7, sp, #8
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	4613      	mov	r3, r2
 8008e08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	785b      	ldrb	r3, [r3, #1]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	f040 817f 	bne.w	800911c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d132      	bne.n	8008e8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	0151      	lsls	r1, r2, #5
 8008e38:	69fa      	ldr	r2, [r7, #28]
 8008e3a:	440a      	add	r2, r1
 8008e3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e40:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008e44:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008e48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	015a      	lsls	r2, r3, #5
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	4413      	add	r3, r2
 8008e52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	69ba      	ldr	r2, [r7, #24]
 8008e5a:	0151      	lsls	r1, r2, #5
 8008e5c:	69fa      	ldr	r2, [r7, #28]
 8008e5e:	440a      	add	r2, r1
 8008e60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	015a      	lsls	r2, r3, #5
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	69ba      	ldr	r2, [r7, #24]
 8008e7a:	0151      	lsls	r1, r2, #5
 8008e7c:	69fa      	ldr	r2, [r7, #28]
 8008e7e:	440a      	add	r2, r1
 8008e80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e84:	0cdb      	lsrs	r3, r3, #19
 8008e86:	04db      	lsls	r3, r3, #19
 8008e88:	6113      	str	r3, [r2, #16]
 8008e8a:	e097      	b.n	8008fbc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	015a      	lsls	r2, r3, #5
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	4413      	add	r3, r2
 8008e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	69ba      	ldr	r2, [r7, #24]
 8008e9c:	0151      	lsls	r1, r2, #5
 8008e9e:	69fa      	ldr	r2, [r7, #28]
 8008ea0:	440a      	add	r2, r1
 8008ea2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ea6:	0cdb      	lsrs	r3, r3, #19
 8008ea8:	04db      	lsls	r3, r3, #19
 8008eaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	015a      	lsls	r2, r3, #5
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	69ba      	ldr	r2, [r7, #24]
 8008ebc:	0151      	lsls	r1, r2, #5
 8008ebe:	69fa      	ldr	r2, [r7, #28]
 8008ec0:	440a      	add	r2, r1
 8008ec2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ec6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008eca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008ece:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008ed0:	69bb      	ldr	r3, [r7, #24]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d11a      	bne.n	8008f0c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	691a      	ldr	r2, [r3, #16]
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d903      	bls.n	8008eea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	689a      	ldr	r2, [r3, #8]
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	015a      	lsls	r2, r3, #5
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	69ba      	ldr	r2, [r7, #24]
 8008efa:	0151      	lsls	r1, r2, #5
 8008efc:	69fa      	ldr	r2, [r7, #28]
 8008efe:	440a      	add	r2, r1
 8008f00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f08:	6113      	str	r3, [r2, #16]
 8008f0a:	e044      	b.n	8008f96 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	691a      	ldr	r2, [r3, #16]
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	4413      	add	r3, r2
 8008f16:	1e5a      	subs	r2, r3, #1
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f20:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	015a      	lsls	r2, r3, #5
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	4413      	add	r3, r2
 8008f2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f2e:	691a      	ldr	r2, [r3, #16]
 8008f30:	8afb      	ldrh	r3, [r7, #22]
 8008f32:	04d9      	lsls	r1, r3, #19
 8008f34:	4ba4      	ldr	r3, [pc, #656]	@ (80091c8 <USB_EPStartXfer+0x3cc>)
 8008f36:	400b      	ands	r3, r1
 8008f38:	69b9      	ldr	r1, [r7, #24]
 8008f3a:	0148      	lsls	r0, r1, #5
 8008f3c:	69f9      	ldr	r1, [r7, #28]
 8008f3e:	4401      	add	r1, r0
 8008f40:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008f44:	4313      	orrs	r3, r2
 8008f46:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	791b      	ldrb	r3, [r3, #4]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d122      	bne.n	8008f96 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	69ba      	ldr	r2, [r7, #24]
 8008f60:	0151      	lsls	r1, r2, #5
 8008f62:	69fa      	ldr	r2, [r7, #28]
 8008f64:	440a      	add	r2, r1
 8008f66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f6a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008f6e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	015a      	lsls	r2, r3, #5
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f7c:	691a      	ldr	r2, [r3, #16]
 8008f7e:	8afb      	ldrh	r3, [r7, #22]
 8008f80:	075b      	lsls	r3, r3, #29
 8008f82:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008f86:	69b9      	ldr	r1, [r7, #24]
 8008f88:	0148      	lsls	r0, r1, #5
 8008f8a:	69f9      	ldr	r1, [r7, #28]
 8008f8c:	4401      	add	r1, r0
 8008f8e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008f92:	4313      	orrs	r3, r2
 8008f94:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	015a      	lsls	r2, r3, #5
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fa2:	691a      	ldr	r2, [r3, #16]
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fac:	69b9      	ldr	r1, [r7, #24]
 8008fae:	0148      	lsls	r0, r1, #5
 8008fb0:	69f9      	ldr	r1, [r7, #28]
 8008fb2:	4401      	add	r1, r0
 8008fb4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008fbc:	79fb      	ldrb	r3, [r7, #7]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d14b      	bne.n	800905a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d009      	beq.n	8008fde <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	69db      	ldr	r3, [r3, #28]
 8008fdc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	791b      	ldrb	r3, [r3, #4]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d128      	bne.n	8009038 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fe6:	69fb      	ldr	r3, [r7, #28]
 8008fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d110      	bne.n	8009018 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	69ba      	ldr	r2, [r7, #24]
 8009006:	0151      	lsls	r1, r2, #5
 8009008:	69fa      	ldr	r2, [r7, #28]
 800900a:	440a      	add	r2, r1
 800900c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009010:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009014:	6013      	str	r3, [r2, #0]
 8009016:	e00f      	b.n	8009038 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	69ba      	ldr	r2, [r7, #24]
 8009028:	0151      	lsls	r1, r2, #5
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	440a      	add	r2, r1
 800902e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009032:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009036:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009038:	69bb      	ldr	r3, [r7, #24]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	4413      	add	r3, r2
 8009040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	69ba      	ldr	r2, [r7, #24]
 8009048:	0151      	lsls	r1, r2, #5
 800904a:	69fa      	ldr	r2, [r7, #28]
 800904c:	440a      	add	r2, r1
 800904e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009052:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	e166      	b.n	8009328 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	015a      	lsls	r2, r3, #5
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	4413      	add	r3, r2
 8009062:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	69ba      	ldr	r2, [r7, #24]
 800906a:	0151      	lsls	r1, r2, #5
 800906c:	69fa      	ldr	r2, [r7, #28]
 800906e:	440a      	add	r2, r1
 8009070:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009074:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009078:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	791b      	ldrb	r3, [r3, #4]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d015      	beq.n	80090ae <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	2b00      	cmp	r3, #0
 8009088:	f000 814e 	beq.w	8009328 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	f003 030f 	and.w	r3, r3, #15
 800909c:	2101      	movs	r1, #1
 800909e:	fa01 f303 	lsl.w	r3, r1, r3
 80090a2:	69f9      	ldr	r1, [r7, #28]
 80090a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80090a8:	4313      	orrs	r3, r2
 80090aa:	634b      	str	r3, [r1, #52]	@ 0x34
 80090ac:	e13c      	b.n	8009328 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d110      	bne.n	80090e0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	015a      	lsls	r2, r3, #5
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	4413      	add	r3, r2
 80090c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	69ba      	ldr	r2, [r7, #24]
 80090ce:	0151      	lsls	r1, r2, #5
 80090d0:	69fa      	ldr	r2, [r7, #28]
 80090d2:	440a      	add	r2, r1
 80090d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	e00f      	b.n	8009100 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	015a      	lsls	r2, r3, #5
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	4413      	add	r3, r2
 80090e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	69ba      	ldr	r2, [r7, #24]
 80090f0:	0151      	lsls	r1, r2, #5
 80090f2:	69fa      	ldr	r2, [r7, #28]
 80090f4:	440a      	add	r2, r1
 80090f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090fe:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	68d9      	ldr	r1, [r3, #12]
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	781a      	ldrb	r2, [r3, #0]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	b298      	uxth	r0, r3
 800910e:	79fb      	ldrb	r3, [r7, #7]
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	4603      	mov	r3, r0
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f000 f9b9 	bl	800948c <USB_WritePacket>
 800911a:	e105      	b.n	8009328 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	015a      	lsls	r2, r3, #5
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	4413      	add	r3, r2
 8009124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	69ba      	ldr	r2, [r7, #24]
 800912c:	0151      	lsls	r1, r2, #5
 800912e:	69fa      	ldr	r2, [r7, #28]
 8009130:	440a      	add	r2, r1
 8009132:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009136:	0cdb      	lsrs	r3, r3, #19
 8009138:	04db      	lsls	r3, r3, #19
 800913a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	015a      	lsls	r2, r3, #5
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	4413      	add	r3, r2
 8009144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	69ba      	ldr	r2, [r7, #24]
 800914c:	0151      	lsls	r1, r2, #5
 800914e:	69fa      	ldr	r2, [r7, #28]
 8009150:	440a      	add	r2, r1
 8009152:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009156:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800915a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800915e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d132      	bne.n	80091cc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d003      	beq.n	8009176 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	689a      	ldr	r2, [r3, #8]
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	689a      	ldr	r2, [r3, #8]
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	4413      	add	r3, r2
 8009186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800918a:	691a      	ldr	r2, [r3, #16]
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	6a1b      	ldr	r3, [r3, #32]
 8009190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009194:	69b9      	ldr	r1, [r7, #24]
 8009196:	0148      	lsls	r0, r1, #5
 8009198:	69f9      	ldr	r1, [r7, #28]
 800919a:	4401      	add	r1, r0
 800919c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80091a0:	4313      	orrs	r3, r2
 80091a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	69ba      	ldr	r2, [r7, #24]
 80091b4:	0151      	lsls	r1, r2, #5
 80091b6:	69fa      	ldr	r2, [r7, #28]
 80091b8:	440a      	add	r2, r1
 80091ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80091c2:	6113      	str	r3, [r2, #16]
 80091c4:	e062      	b.n	800928c <USB_EPStartXfer+0x490>
 80091c6:	bf00      	nop
 80091c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d123      	bne.n	800921c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091e0:	691a      	ldr	r2, [r3, #16]
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091ea:	69b9      	ldr	r1, [r7, #24]
 80091ec:	0148      	lsls	r0, r1, #5
 80091ee:	69f9      	ldr	r1, [r7, #28]
 80091f0:	4401      	add	r1, r0
 80091f2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80091f6:	4313      	orrs	r3, r2
 80091f8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091fa:	69bb      	ldr	r3, [r7, #24]
 80091fc:	015a      	lsls	r2, r3, #5
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	4413      	add	r3, r2
 8009202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	69ba      	ldr	r2, [r7, #24]
 800920a:	0151      	lsls	r1, r2, #5
 800920c:	69fa      	ldr	r2, [r7, #28]
 800920e:	440a      	add	r2, r1
 8009210:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009214:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009218:	6113      	str	r3, [r2, #16]
 800921a:	e037      	b.n	800928c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	691a      	ldr	r2, [r3, #16]
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	4413      	add	r3, r2
 8009226:	1e5a      	subs	r2, r3, #1
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009230:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	8afa      	ldrh	r2, [r7, #22]
 8009238:	fb03 f202 	mul.w	r2, r3, r2
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800924c:	691a      	ldr	r2, [r3, #16]
 800924e:	8afb      	ldrh	r3, [r7, #22]
 8009250:	04d9      	lsls	r1, r3, #19
 8009252:	4b38      	ldr	r3, [pc, #224]	@ (8009334 <USB_EPStartXfer+0x538>)
 8009254:	400b      	ands	r3, r1
 8009256:	69b9      	ldr	r1, [r7, #24]
 8009258:	0148      	lsls	r0, r1, #5
 800925a:	69f9      	ldr	r1, [r7, #28]
 800925c:	4401      	add	r1, r0
 800925e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009262:	4313      	orrs	r3, r2
 8009264:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	4413      	add	r3, r2
 800926e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009272:	691a      	ldr	r2, [r3, #16]
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	6a1b      	ldr	r3, [r3, #32]
 8009278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800927c:	69b9      	ldr	r1, [r7, #24]
 800927e:	0148      	lsls	r0, r1, #5
 8009280:	69f9      	ldr	r1, [r7, #28]
 8009282:	4401      	add	r1, r0
 8009284:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009288:	4313      	orrs	r3, r2
 800928a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800928c:	79fb      	ldrb	r3, [r7, #7]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d10d      	bne.n	80092ae <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d009      	beq.n	80092ae <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	68d9      	ldr	r1, [r3, #12]
 800929e:	69bb      	ldr	r3, [r7, #24]
 80092a0:	015a      	lsls	r2, r3, #5
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	4413      	add	r3, r2
 80092a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092aa:	460a      	mov	r2, r1
 80092ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	791b      	ldrb	r3, [r3, #4]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d128      	bne.n	8009308 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d110      	bne.n	80092e8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	015a      	lsls	r2, r3, #5
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	4413      	add	r3, r2
 80092ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	69ba      	ldr	r2, [r7, #24]
 80092d6:	0151      	lsls	r1, r2, #5
 80092d8:	69fa      	ldr	r2, [r7, #28]
 80092da:	440a      	add	r2, r1
 80092dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	e00f      	b.n	8009308 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	015a      	lsls	r2, r3, #5
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	4413      	add	r3, r2
 80092f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	69ba      	ldr	r2, [r7, #24]
 80092f8:	0151      	lsls	r1, r2, #5
 80092fa:	69fa      	ldr	r2, [r7, #28]
 80092fc:	440a      	add	r2, r1
 80092fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009306:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	015a      	lsls	r2, r3, #5
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	4413      	add	r3, r2
 8009310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	69ba      	ldr	r2, [r7, #24]
 8009318:	0151      	lsls	r1, r2, #5
 800931a:	69fa      	ldr	r2, [r7, #28]
 800931c:	440a      	add	r2, r1
 800931e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009322:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009326:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3720      	adds	r7, #32
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	1ff80000 	.word	0x1ff80000

08009338 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009338:	b480      	push	{r7}
 800933a:	b087      	sub	sp, #28
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009342:	2300      	movs	r3, #0
 8009344:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009346:	2300      	movs	r3, #0
 8009348:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	785b      	ldrb	r3, [r3, #1]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d14a      	bne.n	80093ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	015a      	lsls	r2, r3, #5
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	4413      	add	r3, r2
 8009360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800936a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800936e:	f040 8086 	bne.w	800947e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	015a      	lsls	r2, r3, #5
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	4413      	add	r3, r2
 800937c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	7812      	ldrb	r2, [r2, #0]
 8009386:	0151      	lsls	r1, r2, #5
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	440a      	add	r2, r1
 800938c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009390:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009394:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	015a      	lsls	r2, r3, #5
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	4413      	add	r3, r2
 80093a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	7812      	ldrb	r2, [r2, #0]
 80093aa:	0151      	lsls	r1, r2, #5
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	440a      	add	r2, r1
 80093b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80093b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80093b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	3301      	adds	r3, #1
 80093be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d902      	bls.n	80093d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	75fb      	strb	r3, [r7, #23]
          break;
 80093ce:	e056      	b.n	800947e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	015a      	lsls	r2, r3, #5
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	4413      	add	r3, r2
 80093da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093e8:	d0e7      	beq.n	80093ba <USB_EPStopXfer+0x82>
 80093ea:	e048      	b.n	800947e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	015a      	lsls	r2, r3, #5
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	4413      	add	r3, r2
 80093f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009400:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009404:	d13b      	bne.n	800947e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	4413      	add	r3, r2
 8009410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	683a      	ldr	r2, [r7, #0]
 8009418:	7812      	ldrb	r2, [r2, #0]
 800941a:	0151      	lsls	r1, r2, #5
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	440a      	add	r2, r1
 8009420:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009424:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009428:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	4413      	add	r3, r2
 8009434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	7812      	ldrb	r2, [r2, #0]
 800943e:	0151      	lsls	r1, r2, #5
 8009440:	693a      	ldr	r2, [r7, #16]
 8009442:	440a      	add	r2, r1
 8009444:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009448:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800944c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	3301      	adds	r3, #1
 8009452:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f242 7210 	movw	r2, #10000	@ 0x2710
 800945a:	4293      	cmp	r3, r2
 800945c:	d902      	bls.n	8009464 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	75fb      	strb	r3, [r7, #23]
          break;
 8009462:	e00c      	b.n	800947e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	4413      	add	r3, r2
 800946e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009478:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800947c:	d0e7      	beq.n	800944e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800947e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009480:	4618      	mov	r0, r3
 8009482:	371c      	adds	r7, #28
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800948c:	b480      	push	{r7}
 800948e:	b089      	sub	sp, #36	@ 0x24
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	4611      	mov	r1, r2
 8009498:	461a      	mov	r2, r3
 800949a:	460b      	mov	r3, r1
 800949c:	71fb      	strb	r3, [r7, #7]
 800949e:	4613      	mov	r3, r2
 80094a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80094aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d123      	bne.n	80094fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80094b2:	88bb      	ldrh	r3, [r7, #4]
 80094b4:	3303      	adds	r3, #3
 80094b6:	089b      	lsrs	r3, r3, #2
 80094b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80094ba:	2300      	movs	r3, #0
 80094bc:	61bb      	str	r3, [r7, #24]
 80094be:	e018      	b.n	80094f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80094c0:	79fb      	ldrb	r3, [r7, #7]
 80094c2:	031a      	lsls	r2, r3, #12
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	4413      	add	r3, r2
 80094c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094cc:	461a      	mov	r2, r3
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	3301      	adds	r3, #1
 80094d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094da:	69fb      	ldr	r3, [r7, #28]
 80094dc:	3301      	adds	r3, #1
 80094de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	3301      	adds	r3, #1
 80094e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	3301      	adds	r3, #1
 80094ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	3301      	adds	r3, #1
 80094f0:	61bb      	str	r3, [r7, #24]
 80094f2:	69ba      	ldr	r2, [r7, #24]
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d3e2      	bcc.n	80094c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3724      	adds	r7, #36	@ 0x24
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009508:	b480      	push	{r7}
 800950a:	b08b      	sub	sp, #44	@ 0x2c
 800950c:	af00      	add	r7, sp, #0
 800950e:	60f8      	str	r0, [r7, #12]
 8009510:	60b9      	str	r1, [r7, #8]
 8009512:	4613      	mov	r3, r2
 8009514:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800951e:	88fb      	ldrh	r3, [r7, #6]
 8009520:	089b      	lsrs	r3, r3, #2
 8009522:	b29b      	uxth	r3, r3
 8009524:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009526:	88fb      	ldrh	r3, [r7, #6]
 8009528:	f003 0303 	and.w	r3, r3, #3
 800952c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800952e:	2300      	movs	r3, #0
 8009530:	623b      	str	r3, [r7, #32]
 8009532:	e014      	b.n	800955e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800953e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009542:	3301      	adds	r3, #1
 8009544:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009548:	3301      	adds	r3, #1
 800954a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800954c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954e:	3301      	adds	r3, #1
 8009550:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009554:	3301      	adds	r3, #1
 8009556:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009558:	6a3b      	ldr	r3, [r7, #32]
 800955a:	3301      	adds	r3, #1
 800955c:	623b      	str	r3, [r7, #32]
 800955e:	6a3a      	ldr	r2, [r7, #32]
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	429a      	cmp	r2, r3
 8009564:	d3e6      	bcc.n	8009534 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009566:	8bfb      	ldrh	r3, [r7, #30]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d01e      	beq.n	80095aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800956c:	2300      	movs	r3, #0
 800956e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009576:	461a      	mov	r2, r3
 8009578:	f107 0310 	add.w	r3, r7, #16
 800957c:	6812      	ldr	r2, [r2, #0]
 800957e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009580:	693a      	ldr	r2, [r7, #16]
 8009582:	6a3b      	ldr	r3, [r7, #32]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	00db      	lsls	r3, r3, #3
 8009588:	fa22 f303 	lsr.w	r3, r2, r3
 800958c:	b2da      	uxtb	r2, r3
 800958e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009590:	701a      	strb	r2, [r3, #0]
      i++;
 8009592:	6a3b      	ldr	r3, [r7, #32]
 8009594:	3301      	adds	r3, #1
 8009596:	623b      	str	r3, [r7, #32]
      pDest++;
 8009598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800959a:	3301      	adds	r3, #1
 800959c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800959e:	8bfb      	ldrh	r3, [r7, #30]
 80095a0:	3b01      	subs	r3, #1
 80095a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80095a4:	8bfb      	ldrh	r3, [r7, #30]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1ea      	bne.n	8009580 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80095aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	372c      	adds	r7, #44	@ 0x2c
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	785b      	ldrb	r3, [r3, #1]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d12c      	bne.n	800962e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	015a      	lsls	r2, r3, #5
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	4413      	add	r3, r2
 80095dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	db12      	blt.n	800960c <USB_EPSetStall+0x54>
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00f      	beq.n	800960c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	0151      	lsls	r1, r2, #5
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	440a      	add	r2, r1
 8009602:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009606:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800960a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	4413      	add	r3, r2
 8009614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	0151      	lsls	r1, r2, #5
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	440a      	add	r2, r1
 8009622:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009626:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800962a:	6013      	str	r3, [r2, #0]
 800962c:	e02b      	b.n	8009686 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	015a      	lsls	r2, r3, #5
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	4413      	add	r3, r2
 8009636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	db12      	blt.n	8009666 <USB_EPSetStall+0xae>
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00f      	beq.n	8009666 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	015a      	lsls	r2, r3, #5
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	4413      	add	r3, r2
 800964e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	0151      	lsls	r1, r2, #5
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	440a      	add	r2, r1
 800965c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009660:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009664:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	015a      	lsls	r2, r3, #5
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	4413      	add	r3, r2
 800966e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68ba      	ldr	r2, [r7, #8]
 8009676:	0151      	lsls	r1, r2, #5
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	440a      	add	r2, r1
 800967c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009680:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009684:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3714      	adds	r7, #20
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	785b      	ldrb	r3, [r3, #1]
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d128      	bne.n	8009702 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	015a      	lsls	r2, r3, #5
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	4413      	add	r3, r2
 80096b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	0151      	lsls	r1, r2, #5
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	440a      	add	r2, r1
 80096c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80096ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	791b      	ldrb	r3, [r3, #4]
 80096d4:	2b03      	cmp	r3, #3
 80096d6:	d003      	beq.n	80096e0 <USB_EPClearStall+0x4c>
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	791b      	ldrb	r3, [r3, #4]
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d138      	bne.n	8009752 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	015a      	lsls	r2, r3, #5
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	4413      	add	r3, r2
 80096e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	0151      	lsls	r1, r2, #5
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	440a      	add	r2, r1
 80096f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096fe:	6013      	str	r3, [r2, #0]
 8009700:	e027      	b.n	8009752 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	015a      	lsls	r2, r3, #5
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	4413      	add	r3, r2
 800970a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	68ba      	ldr	r2, [r7, #8]
 8009712:	0151      	lsls	r1, r2, #5
 8009714:	68fa      	ldr	r2, [r7, #12]
 8009716:	440a      	add	r2, r1
 8009718:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800971c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009720:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	791b      	ldrb	r3, [r3, #4]
 8009726:	2b03      	cmp	r3, #3
 8009728:	d003      	beq.n	8009732 <USB_EPClearStall+0x9e>
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	791b      	ldrb	r3, [r3, #4]
 800972e:	2b02      	cmp	r3, #2
 8009730:	d10f      	bne.n	8009752 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	015a      	lsls	r2, r3, #5
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	4413      	add	r3, r2
 800973a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68ba      	ldr	r2, [r7, #8]
 8009742:	0151      	lsls	r1, r2, #5
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	440a      	add	r2, r1
 8009748:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800974c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009750:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3714      	adds	r7, #20
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	460b      	mov	r3, r1
 800976a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800977e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009782:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	78fb      	ldrb	r3, [r7, #3]
 800978e:	011b      	lsls	r3, r3, #4
 8009790:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009794:	68f9      	ldr	r1, [r7, #12]
 8009796:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800979a:	4313      	orrs	r3, r2
 800979c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3714      	adds	r7, #20
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr

080097ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80097c6:	f023 0303 	bic.w	r3, r3, #3
 80097ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097da:	f023 0302 	bic.w	r3, r3, #2
 80097de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b085      	sub	sp, #20
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009808:	f023 0303 	bic.w	r3, r3, #3
 800980c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800981c:	f043 0302 	orr.w	r3, r3, #2
 8009820:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	695b      	ldr	r3, [r3, #20]
 800983c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	68fa      	ldr	r2, [r7, #12]
 8009844:	4013      	ands	r3, r2
 8009846:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009848:	68fb      	ldr	r3, [r7, #12]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3714      	adds	r7, #20
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr

08009856 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009856:	b480      	push	{r7}
 8009858:	b085      	sub	sp, #20
 800985a:	af00      	add	r7, sp, #0
 800985c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009868:	699b      	ldr	r3, [r3, #24]
 800986a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009872:	69db      	ldr	r3, [r3, #28]
 8009874:	68ba      	ldr	r2, [r7, #8]
 8009876:	4013      	ands	r3, r2
 8009878:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	0c1b      	lsrs	r3, r3, #16
}
 800987e:	4618      	mov	r0, r3
 8009880:	3714      	adds	r7, #20
 8009882:	46bd      	mov	sp, r7
 8009884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009888:	4770      	bx	lr

0800988a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800988a:	b480      	push	{r7}
 800988c:	b085      	sub	sp, #20
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800989c:	699b      	ldr	r3, [r3, #24]
 800989e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098a6:	69db      	ldr	r3, [r3, #28]
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	4013      	ands	r3, r2
 80098ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	b29b      	uxth	r3, r3
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3714      	adds	r7, #20
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80098be:	b480      	push	{r7}
 80098c0:	b085      	sub	sp, #20
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	460b      	mov	r3, r1
 80098c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80098ce:	78fb      	ldrb	r3, [r7, #3]
 80098d0:	015a      	lsls	r2, r3, #5
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	4413      	add	r3, r2
 80098d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	4013      	ands	r3, r2
 80098ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80098ec:	68bb      	ldr	r3, [r7, #8]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3714      	adds	r7, #20
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr

080098fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80098fa:	b480      	push	{r7}
 80098fc:	b087      	sub	sp, #28
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	460b      	mov	r3, r1
 8009904:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800991a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800991c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800991e:	78fb      	ldrb	r3, [r7, #3]
 8009920:	f003 030f 	and.w	r3, r3, #15
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	fa22 f303 	lsr.w	r3, r2, r3
 800992a:	01db      	lsls	r3, r3, #7
 800992c:	b2db      	uxtb	r3, r3
 800992e:	693a      	ldr	r2, [r7, #16]
 8009930:	4313      	orrs	r3, r2
 8009932:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009934:	78fb      	ldrb	r3, [r7, #3]
 8009936:	015a      	lsls	r2, r3, #5
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	4413      	add	r3, r2
 800993c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	4013      	ands	r3, r2
 8009946:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009948:	68bb      	ldr	r3, [r7, #8]
}
 800994a:	4618      	mov	r0, r3
 800994c:	371c      	adds	r7, #28
 800994e:	46bd      	mov	sp, r7
 8009950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009954:	4770      	bx	lr

08009956 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009956:	b480      	push	{r7}
 8009958:	b083      	sub	sp, #12
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	695b      	ldr	r3, [r3, #20]
 8009962:	f003 0301 	and.w	r3, r3, #1
}
 8009966:	4618      	mov	r0, r3
 8009968:	370c      	adds	r7, #12
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009972:	b480      	push	{r7}
 8009974:	b085      	sub	sp, #20
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800998c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009990:	f023 0307 	bic.w	r3, r3, #7
 8009994:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80099a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80099aa:	2300      	movs	r3, #0
}
 80099ac:	4618      	mov	r0, r3
 80099ae:	3714      	adds	r7, #20
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b087      	sub	sp, #28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	460b      	mov	r3, r1
 80099c2:	607a      	str	r2, [r7, #4]
 80099c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	333c      	adds	r3, #60	@ 0x3c
 80099ce:	3304      	adds	r3, #4
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	4a26      	ldr	r2, [pc, #152]	@ (8009a70 <USB_EP0_OutStart+0xb8>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d90a      	bls.n	80099f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099ec:	d101      	bne.n	80099f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	e037      	b.n	8009a62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099f8:	461a      	mov	r2, r3
 80099fa:	2300      	movs	r3, #0
 80099fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	697a      	ldr	r2, [r7, #20]
 8009a08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a18:	691b      	ldr	r3, [r3, #16]
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a20:	f043 0318 	orr.w	r3, r3, #24
 8009a24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a34:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009a38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009a3a:	7afb      	ldrb	r3, [r7, #11]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d10f      	bne.n	8009a60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a46:	461a      	mov	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a5a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009a5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a60:	2300      	movs	r3, #0
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	371c      	adds	r7, #28
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	4f54300a 	.word	0x4f54300a

08009a74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b085      	sub	sp, #20
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	3301      	adds	r3, #1
 8009a84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a8c:	d901      	bls.n	8009a92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	e022      	b.n	8009ad8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	691b      	ldr	r3, [r3, #16]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	daf2      	bge.n	8009a80 <USB_CoreReset+0xc>

  count = 10U;
 8009a9a:	230a      	movs	r3, #10
 8009a9c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8009a9e:	e002      	b.n	8009aa6 <USB_CoreReset+0x32>
  {
    count--;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1f9      	bne.n	8009aa0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	f043 0201 	orr.w	r2, r3, #1
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	3301      	adds	r3, #1
 8009abc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ac4:	d901      	bls.n	8009aca <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	e006      	b.n	8009ad8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	f003 0301 	and.w	r3, r3, #1
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d0f0      	beq.n	8009ab8 <USB_CoreReset+0x44>

  return HAL_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3714      	adds	r7, #20
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	460b      	mov	r3, r1
 8009aee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009af0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009af4:	f002 fd1e 	bl	800c534 <USBD_static_malloc>
 8009af8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d109      	bne.n	8009b14 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	32b0      	adds	r2, #176	@ 0xb0
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009b10:	2302      	movs	r3, #2
 8009b12:	e0d4      	b.n	8009cbe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009b14:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009b18:	2100      	movs	r1, #0
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f002 fd4e 	bl	800c5bc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	32b0      	adds	r2, #176	@ 0xb0
 8009b2a:	68f9      	ldr	r1, [r7, #12]
 8009b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	32b0      	adds	r2, #176	@ 0xb0
 8009b3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	7c1b      	ldrb	r3, [r3, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d138      	bne.n	8009bbe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009b4c:	4b5e      	ldr	r3, [pc, #376]	@ (8009cc8 <USBD_CDC_Init+0x1e4>)
 8009b4e:	7819      	ldrb	r1, [r3, #0]
 8009b50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b54:	2202      	movs	r2, #2
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f002 fbc9 	bl	800c2ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b5c:	4b5a      	ldr	r3, [pc, #360]	@ (8009cc8 <USBD_CDC_Init+0x1e4>)
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	f003 020f 	and.w	r2, r3, #15
 8009b64:	6879      	ldr	r1, [r7, #4]
 8009b66:	4613      	mov	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	440b      	add	r3, r1
 8009b70:	3323      	adds	r3, #35	@ 0x23
 8009b72:	2201      	movs	r2, #1
 8009b74:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009b76:	4b55      	ldr	r3, [pc, #340]	@ (8009ccc <USBD_CDC_Init+0x1e8>)
 8009b78:	7819      	ldrb	r1, [r3, #0]
 8009b7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b7e:	2202      	movs	r2, #2
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f002 fbb4 	bl	800c2ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b86:	4b51      	ldr	r3, [pc, #324]	@ (8009ccc <USBD_CDC_Init+0x1e8>)
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	f003 020f 	and.w	r2, r3, #15
 8009b8e:	6879      	ldr	r1, [r7, #4]
 8009b90:	4613      	mov	r3, r2
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	4413      	add	r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	440b      	add	r3, r1
 8009b9a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009ba2:	4b4b      	ldr	r3, [pc, #300]	@ (8009cd0 <USBD_CDC_Init+0x1ec>)
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	f003 020f 	and.w	r2, r3, #15
 8009baa:	6879      	ldr	r1, [r7, #4]
 8009bac:	4613      	mov	r3, r2
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	4413      	add	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	440b      	add	r3, r1
 8009bb6:	331c      	adds	r3, #28
 8009bb8:	2210      	movs	r2, #16
 8009bba:	601a      	str	r2, [r3, #0]
 8009bbc:	e035      	b.n	8009c2a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009bbe:	4b42      	ldr	r3, [pc, #264]	@ (8009cc8 <USBD_CDC_Init+0x1e4>)
 8009bc0:	7819      	ldrb	r1, [r3, #0]
 8009bc2:	2340      	movs	r3, #64	@ 0x40
 8009bc4:	2202      	movs	r2, #2
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f002 fb91 	bl	800c2ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8009cc8 <USBD_CDC_Init+0x1e4>)
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	f003 020f 	and.w	r2, r3, #15
 8009bd4:	6879      	ldr	r1, [r7, #4]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	4413      	add	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	440b      	add	r3, r1
 8009be0:	3323      	adds	r3, #35	@ 0x23
 8009be2:	2201      	movs	r2, #1
 8009be4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009be6:	4b39      	ldr	r3, [pc, #228]	@ (8009ccc <USBD_CDC_Init+0x1e8>)
 8009be8:	7819      	ldrb	r1, [r3, #0]
 8009bea:	2340      	movs	r3, #64	@ 0x40
 8009bec:	2202      	movs	r2, #2
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f002 fb7d 	bl	800c2ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009bf4:	4b35      	ldr	r3, [pc, #212]	@ (8009ccc <USBD_CDC_Init+0x1e8>)
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	f003 020f 	and.w	r2, r3, #15
 8009bfc:	6879      	ldr	r1, [r7, #4]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4413      	add	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	440b      	add	r3, r1
 8009c08:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c10:	4b2f      	ldr	r3, [pc, #188]	@ (8009cd0 <USBD_CDC_Init+0x1ec>)
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	f003 020f 	and.w	r2, r3, #15
 8009c18:	6879      	ldr	r1, [r7, #4]
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	4413      	add	r3, r2
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	440b      	add	r3, r1
 8009c24:	331c      	adds	r3, #28
 8009c26:	2210      	movs	r2, #16
 8009c28:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c2a:	4b29      	ldr	r3, [pc, #164]	@ (8009cd0 <USBD_CDC_Init+0x1ec>)
 8009c2c:	7819      	ldrb	r1, [r3, #0]
 8009c2e:	2308      	movs	r3, #8
 8009c30:	2203      	movs	r2, #3
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f002 fb5b 	bl	800c2ee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009c38:	4b25      	ldr	r3, [pc, #148]	@ (8009cd0 <USBD_CDC_Init+0x1ec>)
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	f003 020f 	and.w	r2, r3, #15
 8009c40:	6879      	ldr	r1, [r7, #4]
 8009c42:	4613      	mov	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	4413      	add	r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	440b      	add	r3, r1
 8009c4c:	3323      	adds	r3, #35	@ 0x23
 8009c4e:	2201      	movs	r2, #1
 8009c50:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2200      	movs	r2, #0
 8009c56:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	33b0      	adds	r3, #176	@ 0xb0
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d101      	bne.n	8009c8c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009c88:	2302      	movs	r3, #2
 8009c8a:	e018      	b.n	8009cbe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	7c1b      	ldrb	r3, [r3, #16]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10a      	bne.n	8009caa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c94:	4b0d      	ldr	r3, [pc, #52]	@ (8009ccc <USBD_CDC_Init+0x1e8>)
 8009c96:	7819      	ldrb	r1, [r3, #0]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009c9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f002 fc12 	bl	800c4cc <USBD_LL_PrepareReceive>
 8009ca8:	e008      	b.n	8009cbc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009caa:	4b08      	ldr	r3, [pc, #32]	@ (8009ccc <USBD_CDC_Init+0x1e8>)
 8009cac:	7819      	ldrb	r1, [r3, #0]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009cb4:	2340      	movs	r3, #64	@ 0x40
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f002 fc08 	bl	800c4cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009cbc:	2300      	movs	r3, #0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	200000a3 	.word	0x200000a3
 8009ccc:	200000a4 	.word	0x200000a4
 8009cd0:	200000a5 	.word	0x200000a5

08009cd4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009ce0:	4b3a      	ldr	r3, [pc, #232]	@ (8009dcc <USBD_CDC_DeInit+0xf8>)
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f002 fb27 	bl	800c33a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009cec:	4b37      	ldr	r3, [pc, #220]	@ (8009dcc <USBD_CDC_DeInit+0xf8>)
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	f003 020f 	and.w	r2, r3, #15
 8009cf4:	6879      	ldr	r1, [r7, #4]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4413      	add	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	440b      	add	r3, r1
 8009d00:	3323      	adds	r3, #35	@ 0x23
 8009d02:	2200      	movs	r2, #0
 8009d04:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009d06:	4b32      	ldr	r3, [pc, #200]	@ (8009dd0 <USBD_CDC_DeInit+0xfc>)
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f002 fb14 	bl	800c33a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009d12:	4b2f      	ldr	r3, [pc, #188]	@ (8009dd0 <USBD_CDC_DeInit+0xfc>)
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	f003 020f 	and.w	r2, r3, #15
 8009d1a:	6879      	ldr	r1, [r7, #4]
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	4413      	add	r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	440b      	add	r3, r1
 8009d26:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009d2e:	4b29      	ldr	r3, [pc, #164]	@ (8009dd4 <USBD_CDC_DeInit+0x100>)
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	4619      	mov	r1, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f002 fb00 	bl	800c33a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009d3a:	4b26      	ldr	r3, [pc, #152]	@ (8009dd4 <USBD_CDC_DeInit+0x100>)
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	f003 020f 	and.w	r2, r3, #15
 8009d42:	6879      	ldr	r1, [r7, #4]
 8009d44:	4613      	mov	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	4413      	add	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	440b      	add	r3, r1
 8009d4e:	3323      	adds	r3, #35	@ 0x23
 8009d50:	2200      	movs	r2, #0
 8009d52:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009d54:	4b1f      	ldr	r3, [pc, #124]	@ (8009dd4 <USBD_CDC_DeInit+0x100>)
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	f003 020f 	and.w	r2, r3, #15
 8009d5c:	6879      	ldr	r1, [r7, #4]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	440b      	add	r3, r1
 8009d68:	331c      	adds	r3, #28
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	32b0      	adds	r2, #176	@ 0xb0
 8009d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d01f      	beq.n	8009dc0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	33b0      	adds	r3, #176	@ 0xb0
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	32b0      	adds	r2, #176	@ 0xb0
 8009d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f002 fbd4 	bl	800c550 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	32b0      	adds	r2, #176	@ 0xb0
 8009db2:	2100      	movs	r1, #0
 8009db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	200000a3 	.word	0x200000a3
 8009dd0:	200000a4 	.word	0x200000a4
 8009dd4:	200000a5 	.word	0x200000a5

08009dd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	32b0      	adds	r2, #176	@ 0xb0
 8009dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009df2:	2300      	movs	r3, #0
 8009df4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009df6:	2300      	movs	r3, #0
 8009df8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009e04:	2303      	movs	r3, #3
 8009e06:	e0bf      	b.n	8009f88 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d050      	beq.n	8009eb6 <USBD_CDC_Setup+0xde>
 8009e14:	2b20      	cmp	r3, #32
 8009e16:	f040 80af 	bne.w	8009f78 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	88db      	ldrh	r3, [r3, #6]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d03a      	beq.n	8009e98 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	b25b      	sxtb	r3, r3
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	da1b      	bge.n	8009e64 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	33b0      	adds	r3, #176	@ 0xb0
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	4413      	add	r3, r2
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	683a      	ldr	r2, [r7, #0]
 8009e40:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009e42:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e44:	683a      	ldr	r2, [r7, #0]
 8009e46:	88d2      	ldrh	r2, [r2, #6]
 8009e48:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	88db      	ldrh	r3, [r3, #6]
 8009e4e:	2b07      	cmp	r3, #7
 8009e50:	bf28      	it	cs
 8009e52:	2307      	movcs	r3, #7
 8009e54:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	89fa      	ldrh	r2, [r7, #14]
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f001 fda9 	bl	800b9b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009e62:	e090      	b.n	8009f86 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	785a      	ldrb	r2, [r3, #1]
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	88db      	ldrh	r3, [r3, #6]
 8009e72:	2b3f      	cmp	r3, #63	@ 0x3f
 8009e74:	d803      	bhi.n	8009e7e <USBD_CDC_Setup+0xa6>
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	88db      	ldrh	r3, [r3, #6]
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	e000      	b.n	8009e80 <USBD_CDC_Setup+0xa8>
 8009e7e:	2240      	movs	r2, #64	@ 0x40
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009e86:	6939      	ldr	r1, [r7, #16]
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009e8e:	461a      	mov	r2, r3
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f001 fdbe 	bl	800ba12 <USBD_CtlPrepareRx>
      break;
 8009e96:	e076      	b.n	8009f86 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	33b0      	adds	r3, #176	@ 0xb0
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4413      	add	r3, r2
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	683a      	ldr	r2, [r7, #0]
 8009eac:	7850      	ldrb	r0, [r2, #1]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	6839      	ldr	r1, [r7, #0]
 8009eb2:	4798      	blx	r3
      break;
 8009eb4:	e067      	b.n	8009f86 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	785b      	ldrb	r3, [r3, #1]
 8009eba:	2b0b      	cmp	r3, #11
 8009ebc:	d851      	bhi.n	8009f62 <USBD_CDC_Setup+0x18a>
 8009ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8009ec4 <USBD_CDC_Setup+0xec>)
 8009ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec4:	08009ef5 	.word	0x08009ef5
 8009ec8:	08009f71 	.word	0x08009f71
 8009ecc:	08009f63 	.word	0x08009f63
 8009ed0:	08009f63 	.word	0x08009f63
 8009ed4:	08009f63 	.word	0x08009f63
 8009ed8:	08009f63 	.word	0x08009f63
 8009edc:	08009f63 	.word	0x08009f63
 8009ee0:	08009f63 	.word	0x08009f63
 8009ee4:	08009f63 	.word	0x08009f63
 8009ee8:	08009f63 	.word	0x08009f63
 8009eec:	08009f1f 	.word	0x08009f1f
 8009ef0:	08009f49 	.word	0x08009f49
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009efa:	b2db      	uxtb	r3, r3
 8009efc:	2b03      	cmp	r3, #3
 8009efe:	d107      	bne.n	8009f10 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f00:	f107 030a 	add.w	r3, r7, #10
 8009f04:	2202      	movs	r2, #2
 8009f06:	4619      	mov	r1, r3
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f001 fd53 	bl	800b9b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f0e:	e032      	b.n	8009f76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f10:	6839      	ldr	r1, [r7, #0]
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f001 fcd1 	bl	800b8ba <USBD_CtlError>
            ret = USBD_FAIL;
 8009f18:	2303      	movs	r3, #3
 8009f1a:	75fb      	strb	r3, [r7, #23]
          break;
 8009f1c:	e02b      	b.n	8009f76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d107      	bne.n	8009f3a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009f2a:	f107 030d 	add.w	r3, r7, #13
 8009f2e:	2201      	movs	r2, #1
 8009f30:	4619      	mov	r1, r3
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f001 fd3e 	bl	800b9b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f38:	e01d      	b.n	8009f76 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f3a:	6839      	ldr	r1, [r7, #0]
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f001 fcbc 	bl	800b8ba <USBD_CtlError>
            ret = USBD_FAIL;
 8009f42:	2303      	movs	r3, #3
 8009f44:	75fb      	strb	r3, [r7, #23]
          break;
 8009f46:	e016      	b.n	8009f76 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	2b03      	cmp	r3, #3
 8009f52:	d00f      	beq.n	8009f74 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009f54:	6839      	ldr	r1, [r7, #0]
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f001 fcaf 	bl	800b8ba <USBD_CtlError>
            ret = USBD_FAIL;
 8009f5c:	2303      	movs	r3, #3
 8009f5e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f60:	e008      	b.n	8009f74 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009f62:	6839      	ldr	r1, [r7, #0]
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f001 fca8 	bl	800b8ba <USBD_CtlError>
          ret = USBD_FAIL;
 8009f6a:	2303      	movs	r3, #3
 8009f6c:	75fb      	strb	r3, [r7, #23]
          break;
 8009f6e:	e002      	b.n	8009f76 <USBD_CDC_Setup+0x19e>
          break;
 8009f70:	bf00      	nop
 8009f72:	e008      	b.n	8009f86 <USBD_CDC_Setup+0x1ae>
          break;
 8009f74:	bf00      	nop
      }
      break;
 8009f76:	e006      	b.n	8009f86 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f001 fc9d 	bl	800b8ba <USBD_CtlError>
      ret = USBD_FAIL;
 8009f80:	2303      	movs	r3, #3
 8009f82:	75fb      	strb	r3, [r7, #23]
      break;
 8009f84:	bf00      	nop
  }

  return (uint8_t)ret;
 8009f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3718      	adds	r7, #24
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009fa2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	32b0      	adds	r2, #176	@ 0xb0
 8009fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d101      	bne.n	8009fba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	e065      	b.n	800a086 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	32b0      	adds	r2, #176	@ 0xb0
 8009fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009fca:	78fb      	ldrb	r3, [r7, #3]
 8009fcc:	f003 020f 	and.w	r2, r3, #15
 8009fd0:	6879      	ldr	r1, [r7, #4]
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	4413      	add	r3, r2
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	440b      	add	r3, r1
 8009fdc:	3314      	adds	r3, #20
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d02f      	beq.n	800a044 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009fe4:	78fb      	ldrb	r3, [r7, #3]
 8009fe6:	f003 020f 	and.w	r2, r3, #15
 8009fea:	6879      	ldr	r1, [r7, #4]
 8009fec:	4613      	mov	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	4413      	add	r3, r2
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	440b      	add	r3, r1
 8009ff6:	3314      	adds	r3, #20
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	78fb      	ldrb	r3, [r7, #3]
 8009ffc:	f003 010f 	and.w	r1, r3, #15
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	460b      	mov	r3, r1
 800a004:	00db      	lsls	r3, r3, #3
 800a006:	440b      	add	r3, r1
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4403      	add	r3, r0
 800a00c:	331c      	adds	r3, #28
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	fbb2 f1f3 	udiv	r1, r2, r3
 800a014:	fb01 f303 	mul.w	r3, r1, r3
 800a018:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d112      	bne.n	800a044 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a01e:	78fb      	ldrb	r3, [r7, #3]
 800a020:	f003 020f 	and.w	r2, r3, #15
 800a024:	6879      	ldr	r1, [r7, #4]
 800a026:	4613      	mov	r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	4413      	add	r3, r2
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	440b      	add	r3, r1
 800a030:	3314      	adds	r3, #20
 800a032:	2200      	movs	r2, #0
 800a034:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a036:	78f9      	ldrb	r1, [r7, #3]
 800a038:	2300      	movs	r3, #0
 800a03a:	2200      	movs	r2, #0
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f002 fa24 	bl	800c48a <USBD_LL_Transmit>
 800a042:	e01f      	b.n	800a084 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	2200      	movs	r2, #0
 800a048:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	33b0      	adds	r3, #176	@ 0xb0
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4413      	add	r3, r2
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d010      	beq.n	800a084 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	33b0      	adds	r3, #176	@ 0xb0
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	4413      	add	r3, r2
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a080:	78fa      	ldrb	r2, [r7, #3]
 800a082:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	460b      	mov	r3, r1
 800a098:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	32b0      	adds	r2, #176	@ 0xb0
 800a0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	32b0      	adds	r2, #176	@ 0xb0
 800a0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d101      	bne.n	800a0c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	e01a      	b.n	800a0f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a0c0:	78fb      	ldrb	r3, [r7, #3]
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f002 fa22 	bl	800c50e <USBD_LL_GetRxDataSize>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	33b0      	adds	r3, #176	@ 0xb0
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	685b      	ldr	r3, [r3, #4]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a0ea:	68fa      	ldr	r2, [r7, #12]
 800a0ec:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a0f0:	4611      	mov	r1, r2
 800a0f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}

0800a0fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a0fe:	b580      	push	{r7, lr}
 800a100:	b084      	sub	sp, #16
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	32b0      	adds	r2, #176	@ 0xb0
 800a110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a114:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d101      	bne.n	800a120 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a11c:	2303      	movs	r3, #3
 800a11e:	e024      	b.n	800a16a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	33b0      	adds	r3, #176	@ 0xb0
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4413      	add	r3, r2
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d019      	beq.n	800a168 <USBD_CDC_EP0_RxReady+0x6a>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a13a:	2bff      	cmp	r3, #255	@ 0xff
 800a13c:	d014      	beq.n	800a168 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	33b0      	adds	r3, #176	@ 0xb0
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4413      	add	r3, r2
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a156:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a15e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	22ff      	movs	r2, #255	@ 0xff
 800a164:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
	...

0800a174 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b086      	sub	sp, #24
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a17c:	2182      	movs	r1, #130	@ 0x82
 800a17e:	4818      	ldr	r0, [pc, #96]	@ (800a1e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a180:	f000 fd62 	bl	800ac48 <USBD_GetEpDesc>
 800a184:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a186:	2101      	movs	r1, #1
 800a188:	4815      	ldr	r0, [pc, #84]	@ (800a1e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a18a:	f000 fd5d 	bl	800ac48 <USBD_GetEpDesc>
 800a18e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a190:	2181      	movs	r1, #129	@ 0x81
 800a192:	4813      	ldr	r0, [pc, #76]	@ (800a1e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a194:	f000 fd58 	bl	800ac48 <USBD_GetEpDesc>
 800a198:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d002      	beq.n	800a1a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	2210      	movs	r2, #16
 800a1a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d006      	beq.n	800a1ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1b4:	711a      	strb	r2, [r3, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d006      	beq.n	800a1ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1c8:	711a      	strb	r2, [r3, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2243      	movs	r2, #67	@ 0x43
 800a1d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a1d4:	4b02      	ldr	r3, [pc, #8]	@ (800a1e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3718      	adds	r7, #24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	20000060 	.word	0x20000060

0800a1e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b086      	sub	sp, #24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a1ec:	2182      	movs	r1, #130	@ 0x82
 800a1ee:	4818      	ldr	r0, [pc, #96]	@ (800a250 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1f0:	f000 fd2a 	bl	800ac48 <USBD_GetEpDesc>
 800a1f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a1f6:	2101      	movs	r1, #1
 800a1f8:	4815      	ldr	r0, [pc, #84]	@ (800a250 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a1fa:	f000 fd25 	bl	800ac48 <USBD_GetEpDesc>
 800a1fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a200:	2181      	movs	r1, #129	@ 0x81
 800a202:	4813      	ldr	r0, [pc, #76]	@ (800a250 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a204:	f000 fd20 	bl	800ac48 <USBD_GetEpDesc>
 800a208:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d002      	beq.n	800a216 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	2210      	movs	r2, #16
 800a214:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d006      	beq.n	800a22a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	2200      	movs	r2, #0
 800a220:	711a      	strb	r2, [r3, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	f042 0202 	orr.w	r2, r2, #2
 800a228:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d006      	beq.n	800a23e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	711a      	strb	r2, [r3, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	f042 0202 	orr.w	r2, r2, #2
 800a23c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2243      	movs	r2, #67	@ 0x43
 800a242:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a244:	4b02      	ldr	r3, [pc, #8]	@ (800a250 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a246:	4618      	mov	r0, r3
 800a248:	3718      	adds	r7, #24
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	20000060 	.word	0x20000060

0800a254 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a25c:	2182      	movs	r1, #130	@ 0x82
 800a25e:	4818      	ldr	r0, [pc, #96]	@ (800a2c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a260:	f000 fcf2 	bl	800ac48 <USBD_GetEpDesc>
 800a264:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a266:	2101      	movs	r1, #1
 800a268:	4815      	ldr	r0, [pc, #84]	@ (800a2c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a26a:	f000 fced 	bl	800ac48 <USBD_GetEpDesc>
 800a26e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a270:	2181      	movs	r1, #129	@ 0x81
 800a272:	4813      	ldr	r0, [pc, #76]	@ (800a2c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a274:	f000 fce8 	bl	800ac48 <USBD_GetEpDesc>
 800a278:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d002      	beq.n	800a286 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	2210      	movs	r2, #16
 800a284:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d006      	beq.n	800a29a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	2200      	movs	r2, #0
 800a290:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a294:	711a      	strb	r2, [r3, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d006      	beq.n	800a2ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2a8:	711a      	strb	r2, [r3, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2243      	movs	r2, #67	@ 0x43
 800a2b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2b4:	4b02      	ldr	r3, [pc, #8]	@ (800a2c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3718      	adds	r7, #24
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	20000060 	.word	0x20000060

0800a2c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	220a      	movs	r2, #10
 800a2d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a2d2:	4b03      	ldr	r3, [pc, #12]	@ (800a2e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr
 800a2e0:	2000001c 	.word	0x2000001c

0800a2e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d101      	bne.n	800a2f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	e009      	b.n	800a30c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a2fe:	687a      	ldr	r2, [r7, #4]
 800a300:	33b0      	adds	r3, #176	@ 0xb0
 800a302:	009b      	lsls	r3, r3, #2
 800a304:	4413      	add	r3, r2
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a318:	b480      	push	{r7}
 800a31a:	b087      	sub	sp, #28
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	32b0      	adds	r2, #176	@ 0xb0
 800a32e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a332:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a33a:	2303      	movs	r3, #3
 800a33c:	e008      	b.n	800a350 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	68ba      	ldr	r2, [r7, #8]
 800a342:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a346:	697b      	ldr	r3, [r7, #20]
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	371c      	adds	r7, #28
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a35c:	b480      	push	{r7}
 800a35e:	b085      	sub	sp, #20
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	32b0      	adds	r2, #176	@ 0xb0
 800a370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a374:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d101      	bne.n	800a380 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a37c:	2303      	movs	r3, #3
 800a37e:	e004      	b.n	800a38a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	683a      	ldr	r2, [r7, #0]
 800a384:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3714      	adds	r7, #20
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
	...

0800a398 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	32b0      	adds	r2, #176	@ 0xb0
 800a3aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ae:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d101      	bne.n	800a3be <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	e025      	b.n	800a40a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d11f      	bne.n	800a408 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a3d0:	4b10      	ldr	r3, [pc, #64]	@ (800a414 <USBD_CDC_TransmitPacket+0x7c>)
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	f003 020f 	and.w	r2, r3, #15
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	4613      	mov	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	4413      	add	r3, r2
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	4403      	add	r3, r0
 800a3ea:	3314      	adds	r3, #20
 800a3ec:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a3ee:	4b09      	ldr	r3, [pc, #36]	@ (800a414 <USBD_CDC_TransmitPacket+0x7c>)
 800a3f0:	7819      	ldrb	r1, [r3, #0]
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f002 f843 	bl	800c48a <USBD_LL_Transmit>

    ret = USBD_OK;
 800a404:	2300      	movs	r3, #0
 800a406:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a408:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3710      	adds	r7, #16
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	200000a3 	.word	0x200000a3

0800a418 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	32b0      	adds	r2, #176	@ 0xb0
 800a42a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a42e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	32b0      	adds	r2, #176	@ 0xb0
 800a43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d101      	bne.n	800a446 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a442:	2303      	movs	r3, #3
 800a444:	e018      	b.n	800a478 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	7c1b      	ldrb	r3, [r3, #16]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d10a      	bne.n	800a464 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a44e:	4b0c      	ldr	r3, [pc, #48]	@ (800a480 <USBD_CDC_ReceivePacket+0x68>)
 800a450:	7819      	ldrb	r1, [r3, #0]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a458:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f002 f835 	bl	800c4cc <USBD_LL_PrepareReceive>
 800a462:	e008      	b.n	800a476 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a464:	4b06      	ldr	r3, [pc, #24]	@ (800a480 <USBD_CDC_ReceivePacket+0x68>)
 800a466:	7819      	ldrb	r1, [r3, #0]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a46e:	2340      	movs	r3, #64	@ 0x40
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f002 f82b 	bl	800c4cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	200000a4 	.word	0x200000a4

0800a484 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	4613      	mov	r3, r2
 800a490:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d101      	bne.n	800a49c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a498:	2303      	movs	r3, #3
 800a49a:	e01f      	b.n	800a4dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2200      	movs	r2, #0
 800a4a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d003      	beq.n	800a4c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	79fa      	ldrb	r2, [r7, #7]
 800a4ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f001 fea5 	bl	800c220 <USBD_LL_Init>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a4da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3718      	adds	r7, #24
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	e025      	b.n	800a548 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	683a      	ldr	r2, [r7, #0]
 800a500:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	32ae      	adds	r2, #174	@ 0xae
 800a50e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00f      	beq.n	800a538 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	32ae      	adds	r2, #174	@ 0xae
 800a522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a528:	f107 020e 	add.w	r2, r7, #14
 800a52c:	4610      	mov	r0, r2
 800a52e:	4798      	blx	r3
 800a530:	4602      	mov	r2, r0
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a53e:	1c5a      	adds	r2, r3, #1
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a546:	2300      	movs	r3, #0
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3710      	adds	r7, #16
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b082      	sub	sp, #8
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f001 fead 	bl	800c2b8 <USBD_LL_Start>
 800a55e:	4603      	mov	r3, r0
}
 800a560:	4618      	mov	r0, r3
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a570:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a572:	4618      	mov	r0, r3
 800a574:	370c      	adds	r7, #12
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr

0800a57e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b084      	sub	sp, #16
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	460b      	mov	r3, r1
 800a588:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a58a:	2300      	movs	r3, #0
 800a58c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a594:	2b00      	cmp	r3, #0
 800a596:	d009      	beq.n	800a5ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	78fa      	ldrb	r2, [r7, #3]
 800a5a2:	4611      	mov	r1, r2
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	4798      	blx	r3
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b084      	sub	sp, #16
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
 800a5be:	460b      	mov	r3, r1
 800a5c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	78fa      	ldrb	r2, [r7, #3]
 800a5d0:	4611      	mov	r1, r2
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	4798      	blx	r3
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d001      	beq.n	800a5e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f001 f922 	bl	800b846 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a610:	461a      	mov	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a61e:	f003 031f 	and.w	r3, r3, #31
 800a622:	2b02      	cmp	r3, #2
 800a624:	d01a      	beq.n	800a65c <USBD_LL_SetupStage+0x72>
 800a626:	2b02      	cmp	r3, #2
 800a628:	d822      	bhi.n	800a670 <USBD_LL_SetupStage+0x86>
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d002      	beq.n	800a634 <USBD_LL_SetupStage+0x4a>
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d00a      	beq.n	800a648 <USBD_LL_SetupStage+0x5e>
 800a632:	e01d      	b.n	800a670 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a63a:	4619      	mov	r1, r3
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 fb77 	bl	800ad30 <USBD_StdDevReq>
 800a642:	4603      	mov	r3, r0
 800a644:	73fb      	strb	r3, [r7, #15]
      break;
 800a646:	e020      	b.n	800a68a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a64e:	4619      	mov	r1, r3
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 fbdf 	bl	800ae14 <USBD_StdItfReq>
 800a656:	4603      	mov	r3, r0
 800a658:	73fb      	strb	r3, [r7, #15]
      break;
 800a65a:	e016      	b.n	800a68a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a662:	4619      	mov	r1, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fc41 	bl	800aeec <USBD_StdEPReq>
 800a66a:	4603      	mov	r3, r0
 800a66c:	73fb      	strb	r3, [r7, #15]
      break;
 800a66e:	e00c      	b.n	800a68a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a676:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	4619      	mov	r1, r3
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f001 fe7a 	bl	800c378 <USBD_LL_StallEP>
 800a684:	4603      	mov	r3, r0
 800a686:	73fb      	strb	r3, [r7, #15]
      break;
 800a688:	bf00      	nop
  }

  return ret;
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b086      	sub	sp, #24
 800a698:	af00      	add	r7, sp, #0
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	460b      	mov	r3, r1
 800a69e:	607a      	str	r2, [r7, #4]
 800a6a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a6a6:	7afb      	ldrb	r3, [r7, #11]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d177      	bne.n	800a79c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a6b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	f040 80a1 	bne.w	800a802 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	693a      	ldr	r2, [r7, #16]
 800a6c6:	8992      	ldrh	r2, [r2, #12]
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d91c      	bls.n	800a706 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	693a      	ldr	r2, [r7, #16]
 800a6d2:	8992      	ldrh	r2, [r2, #12]
 800a6d4:	1a9a      	subs	r2, r3, r2
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	693a      	ldr	r2, [r7, #16]
 800a6e0:	8992      	ldrh	r2, [r2, #12]
 800a6e2:	441a      	add	r2, r3
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	6919      	ldr	r1, [r3, #16]
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	899b      	ldrh	r3, [r3, #12]
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	bf38      	it	cc
 800a6fa:	4613      	movcc	r3, r2
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f001 f9a8 	bl	800ba54 <USBD_CtlContinueRx>
 800a704:	e07d      	b.n	800a802 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a70c:	f003 031f 	and.w	r3, r3, #31
 800a710:	2b02      	cmp	r3, #2
 800a712:	d014      	beq.n	800a73e <USBD_LL_DataOutStage+0xaa>
 800a714:	2b02      	cmp	r3, #2
 800a716:	d81d      	bhi.n	800a754 <USBD_LL_DataOutStage+0xc0>
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <USBD_LL_DataOutStage+0x8e>
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d003      	beq.n	800a728 <USBD_LL_DataOutStage+0x94>
 800a720:	e018      	b.n	800a754 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a722:	2300      	movs	r3, #0
 800a724:	75bb      	strb	r3, [r7, #22]
            break;
 800a726:	e018      	b.n	800a75a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a72e:	b2db      	uxtb	r3, r3
 800a730:	4619      	mov	r1, r3
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f000 fa6e 	bl	800ac14 <USBD_CoreFindIF>
 800a738:	4603      	mov	r3, r0
 800a73a:	75bb      	strb	r3, [r7, #22]
            break;
 800a73c:	e00d      	b.n	800a75a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a744:	b2db      	uxtb	r3, r3
 800a746:	4619      	mov	r1, r3
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f000 fa70 	bl	800ac2e <USBD_CoreFindEP>
 800a74e:	4603      	mov	r3, r0
 800a750:	75bb      	strb	r3, [r7, #22]
            break;
 800a752:	e002      	b.n	800a75a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a754:	2300      	movs	r3, #0
 800a756:	75bb      	strb	r3, [r7, #22]
            break;
 800a758:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a75a:	7dbb      	ldrb	r3, [r7, #22]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d119      	bne.n	800a794 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a766:	b2db      	uxtb	r3, r3
 800a768:	2b03      	cmp	r3, #3
 800a76a:	d113      	bne.n	800a794 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a76c:	7dba      	ldrb	r2, [r7, #22]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	32ae      	adds	r2, #174	@ 0xae
 800a772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d00b      	beq.n	800a794 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800a77c:	7dba      	ldrb	r2, [r7, #22]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a784:	7dba      	ldrb	r2, [r7, #22]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	32ae      	adds	r2, #174	@ 0xae
 800a78a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a78e:	691b      	ldr	r3, [r3, #16]
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f001 f96e 	bl	800ba76 <USBD_CtlSendStatus>
 800a79a:	e032      	b.n	800a802 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a79c:	7afb      	ldrb	r3, [r7, #11]
 800a79e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f000 fa41 	bl	800ac2e <USBD_CoreFindEP>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7b0:	7dbb      	ldrb	r3, [r7, #22]
 800a7b2:	2bff      	cmp	r3, #255	@ 0xff
 800a7b4:	d025      	beq.n	800a802 <USBD_LL_DataOutStage+0x16e>
 800a7b6:	7dbb      	ldrb	r3, [r7, #22]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d122      	bne.n	800a802 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	2b03      	cmp	r3, #3
 800a7c6:	d117      	bne.n	800a7f8 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a7c8:	7dba      	ldrb	r2, [r7, #22]
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	32ae      	adds	r2, #174	@ 0xae
 800a7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7d2:	699b      	ldr	r3, [r3, #24]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00f      	beq.n	800a7f8 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800a7d8:	7dba      	ldrb	r2, [r7, #22]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a7e0:	7dba      	ldrb	r2, [r7, #22]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	32ae      	adds	r2, #174	@ 0xae
 800a7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	7afa      	ldrb	r2, [r7, #11]
 800a7ee:	4611      	mov	r1, r2
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	4798      	blx	r3
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a7f8:	7dfb      	ldrb	r3, [r7, #23]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800a7fe:	7dfb      	ldrb	r3, [r7, #23]
 800a800:	e000      	b.n	800a804 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3718      	adds	r7, #24
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b086      	sub	sp, #24
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	460b      	mov	r3, r1
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a81a:	7afb      	ldrb	r3, [r7, #11]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d178      	bne.n	800a912 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	3314      	adds	r3, #20
 800a824:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	d163      	bne.n	800a8f8 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	693a      	ldr	r2, [r7, #16]
 800a836:	8992      	ldrh	r2, [r2, #12]
 800a838:	4293      	cmp	r3, r2
 800a83a:	d91c      	bls.n	800a876 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	8992      	ldrh	r2, [r2, #12]
 800a844:	1a9a      	subs	r2, r3, r2
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	8992      	ldrh	r2, [r2, #12]
 800a852:	441a      	add	r2, r3
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	6919      	ldr	r1, [r3, #16]
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	461a      	mov	r2, r3
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f001 f8c4 	bl	800b9f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a868:	2300      	movs	r3, #0
 800a86a:	2200      	movs	r2, #0
 800a86c:	2100      	movs	r1, #0
 800a86e:	68f8      	ldr	r0, [r7, #12]
 800a870:	f001 fe2c 	bl	800c4cc <USBD_LL_PrepareReceive>
 800a874:	e040      	b.n	800a8f8 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	899b      	ldrh	r3, [r3, #12]
 800a87a:	461a      	mov	r2, r3
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	429a      	cmp	r2, r3
 800a882:	d11c      	bne.n	800a8be <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	693a      	ldr	r2, [r7, #16]
 800a88a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d316      	bcc.n	800a8be <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d20f      	bcs.n	800a8be <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a89e:	2200      	movs	r2, #0
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f001 f8a4 	bl	800b9f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	2100      	movs	r1, #0
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f001 fe08 	bl	800c4cc <USBD_LL_PrepareReceive>
 800a8bc:	e01c      	b.n	800a8f8 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	d10f      	bne.n	800a8ea <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d009      	beq.n	800a8ea <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8ea:	2180      	movs	r1, #128	@ 0x80
 800a8ec:	68f8      	ldr	r0, [r7, #12]
 800a8ee:	f001 fd43 	bl	800c378 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f001 f8d2 	bl	800ba9c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d03a      	beq.n	800a978 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f7ff fe30 	bl	800a568 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2200      	movs	r2, #0
 800a90c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a910:	e032      	b.n	800a978 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a912:	7afb      	ldrb	r3, [r7, #11]
 800a914:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a918:	b2db      	uxtb	r3, r3
 800a91a:	4619      	mov	r1, r3
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	f000 f986 	bl	800ac2e <USBD_CoreFindEP>
 800a922:	4603      	mov	r3, r0
 800a924:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a926:	7dfb      	ldrb	r3, [r7, #23]
 800a928:	2bff      	cmp	r3, #255	@ 0xff
 800a92a:	d025      	beq.n	800a978 <USBD_LL_DataInStage+0x16c>
 800a92c:	7dfb      	ldrb	r3, [r7, #23]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d122      	bne.n	800a978 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	2b03      	cmp	r3, #3
 800a93c:	d11c      	bne.n	800a978 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a93e:	7dfa      	ldrb	r2, [r7, #23]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	32ae      	adds	r2, #174	@ 0xae
 800a944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a948:	695b      	ldr	r3, [r3, #20]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d014      	beq.n	800a978 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800a94e:	7dfa      	ldrb	r2, [r7, #23]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a956:	7dfa      	ldrb	r2, [r7, #23]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	32ae      	adds	r2, #174	@ 0xae
 800a95c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	7afa      	ldrb	r2, [r7, #11]
 800a964:	4611      	mov	r1, r2
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	4798      	blx	r3
 800a96a:	4603      	mov	r3, r0
 800a96c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a96e:	7dbb      	ldrb	r3, [r7, #22]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d001      	beq.n	800a978 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800a974:	7dbb      	ldrb	r3, [r7, #22]
 800a976:	e000      	b.n	800a97a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3718      	adds	r7, #24
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b084      	sub	sp, #16
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a98a:	2300      	movs	r3, #0
 800a98c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2201      	movs	r2, #1
 800a992:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d014      	beq.n	800a9e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00e      	beq.n	800a9e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	6852      	ldr	r2, [r2, #4]
 800a9d6:	b2d2      	uxtb	r2, r2
 800a9d8:	4611      	mov	r1, r2
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	4798      	blx	r3
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d001      	beq.n	800a9e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9e8:	2340      	movs	r3, #64	@ 0x40
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	2100      	movs	r1, #0
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f001 fc7d 	bl	800c2ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2240      	movs	r2, #64	@ 0x40
 800aa00:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa04:	2340      	movs	r3, #64	@ 0x40
 800aa06:	2200      	movs	r2, #0
 800aa08:	2180      	movs	r1, #128	@ 0x80
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f001 fc6f 	bl	800c2ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2240      	movs	r2, #64	@ 0x40
 800aa1c:	841a      	strh	r2, [r3, #32]

  return ret;
 800aa1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3710      	adds	r7, #16
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	460b      	mov	r3, r1
 800aa32:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	78fa      	ldrb	r2, [r7, #3]
 800aa38:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa3a:	2300      	movs	r3, #0
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	2b04      	cmp	r3, #4
 800aa5a:	d006      	beq.n	800aa6a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa62:	b2da      	uxtb	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2204      	movs	r2, #4
 800aa6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800aa72:	2300      	movs	r3, #0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	2b04      	cmp	r3, #4
 800aa92:	d106      	bne.n	800aaa2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800aa9a:	b2da      	uxtb	r2, r3
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	370c      	adds	r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	2b03      	cmp	r3, #3
 800aac2:	d110      	bne.n	800aae6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d00b      	beq.n	800aae6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aad4:	69db      	ldr	r3, [r3, #28]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d005      	beq.n	800aae6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aae0:	69db      	ldr	r3, [r3, #28]
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	32ae      	adds	r2, #174	@ 0xae
 800ab06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d101      	bne.n	800ab12 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	e01c      	b.n	800ab4c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab18:	b2db      	uxtb	r3, r3
 800ab1a:	2b03      	cmp	r3, #3
 800ab1c:	d115      	bne.n	800ab4a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	32ae      	adds	r2, #174	@ 0xae
 800ab28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d00b      	beq.n	800ab4a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	32ae      	adds	r2, #174	@ 0xae
 800ab3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab40:	6a1b      	ldr	r3, [r3, #32]
 800ab42:	78fa      	ldrb	r2, [r7, #3]
 800ab44:	4611      	mov	r1, r2
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3708      	adds	r7, #8
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}

0800ab54 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	32ae      	adds	r2, #174	@ 0xae
 800ab6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d101      	bne.n	800ab76 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab72:	2303      	movs	r3, #3
 800ab74:	e01c      	b.n	800abb0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab7c:	b2db      	uxtb	r3, r3
 800ab7e:	2b03      	cmp	r3, #3
 800ab80:	d115      	bne.n	800abae <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	32ae      	adds	r2, #174	@ 0xae
 800ab8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d00b      	beq.n	800abae <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	32ae      	adds	r2, #174	@ 0xae
 800aba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aba6:	78fa      	ldrb	r2, [r7, #3]
 800aba8:	4611      	mov	r1, r2
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abae:	2300      	movs	r3, #0
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3708      	adds	r7, #8
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}

0800abb8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800abc0:	2300      	movs	r3, #0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	370c      	adds	r7, #12
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b084      	sub	sp, #16
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2201      	movs	r2, #1
 800abde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00e      	beq.n	800ac0a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	6852      	ldr	r2, [r2, #4]
 800abf8:	b2d2      	uxtb	r2, r2
 800abfa:	4611      	mov	r1, r2
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	4798      	blx	r3
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d001      	beq.n	800ac0a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ac06:	2303      	movs	r3, #3
 800ac08:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3710      	adds	r7, #16
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac20:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	370c      	adds	r7, #12
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr

0800ac2e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac2e:	b480      	push	{r7}
 800ac30:	b083      	sub	sp, #12
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	460b      	mov	r3, r1
 800ac38:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac3a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
 800ac50:	460b      	mov	r3, r1
 800ac52:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	885b      	ldrh	r3, [r3, #2]
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	7812      	ldrb	r2, [r2, #0]
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d91f      	bls.n	800acae <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ac74:	e013      	b.n	800ac9e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ac76:	f107 030a 	add.w	r3, r7, #10
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	6978      	ldr	r0, [r7, #20]
 800ac7e:	f000 f81b 	bl	800acb8 <USBD_GetNextDesc>
 800ac82:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	785b      	ldrb	r3, [r3, #1]
 800ac88:	2b05      	cmp	r3, #5
 800ac8a:	d108      	bne.n	800ac9e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	789b      	ldrb	r3, [r3, #2]
 800ac94:	78fa      	ldrb	r2, [r7, #3]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d008      	beq.n	800acac <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	885b      	ldrh	r3, [r3, #2]
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	897b      	ldrh	r3, [r7, #10]
 800aca6:	429a      	cmp	r2, r3
 800aca8:	d8e5      	bhi.n	800ac76 <USBD_GetEpDesc+0x2e>
 800acaa:	e000      	b.n	800acae <USBD_GetEpDesc+0x66>
          break;
 800acac:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800acae:	693b      	ldr	r3, [r7, #16]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3718      	adds	r7, #24
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800acb8:	b480      	push	{r7}
 800acba:	b085      	sub	sp, #20
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	881b      	ldrh	r3, [r3, #0]
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	7812      	ldrb	r2, [r2, #0]
 800acce:	4413      	add	r3, r2
 800acd0:	b29a      	uxth	r2, r3
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	4413      	add	r3, r2
 800ace0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ace2:	68fb      	ldr	r3, [r7, #12]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b087      	sub	sp, #28
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	3301      	adds	r3, #1
 800ad06:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad0e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ad12:	021b      	lsls	r3, r3, #8
 800ad14:	b21a      	sxth	r2, r3
 800ad16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	b21b      	sxth	r3, r3
 800ad1e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad20:	89fb      	ldrh	r3, [r7, #14]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	371c      	adds	r7, #28
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
	...

0800ad30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad46:	2b40      	cmp	r3, #64	@ 0x40
 800ad48:	d005      	beq.n	800ad56 <USBD_StdDevReq+0x26>
 800ad4a:	2b40      	cmp	r3, #64	@ 0x40
 800ad4c:	d857      	bhi.n	800adfe <USBD_StdDevReq+0xce>
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00f      	beq.n	800ad72 <USBD_StdDevReq+0x42>
 800ad52:	2b20      	cmp	r3, #32
 800ad54:	d153      	bne.n	800adfe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	32ae      	adds	r2, #174	@ 0xae
 800ad60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	4798      	blx	r3
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad70:	e04a      	b.n	800ae08 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	785b      	ldrb	r3, [r3, #1]
 800ad76:	2b09      	cmp	r3, #9
 800ad78:	d83b      	bhi.n	800adf2 <USBD_StdDevReq+0xc2>
 800ad7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad80 <USBD_StdDevReq+0x50>)
 800ad7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad80:	0800add5 	.word	0x0800add5
 800ad84:	0800ade9 	.word	0x0800ade9
 800ad88:	0800adf3 	.word	0x0800adf3
 800ad8c:	0800addf 	.word	0x0800addf
 800ad90:	0800adf3 	.word	0x0800adf3
 800ad94:	0800adb3 	.word	0x0800adb3
 800ad98:	0800ada9 	.word	0x0800ada9
 800ad9c:	0800adf3 	.word	0x0800adf3
 800ada0:	0800adcb 	.word	0x0800adcb
 800ada4:	0800adbd 	.word	0x0800adbd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ada8:	6839      	ldr	r1, [r7, #0]
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 fa3e 	bl	800b22c <USBD_GetDescriptor>
          break;
 800adb0:	e024      	b.n	800adfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 fba3 	bl	800b500 <USBD_SetAddress>
          break;
 800adba:	e01f      	b.n	800adfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800adbc:	6839      	ldr	r1, [r7, #0]
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 fbe2 	bl	800b588 <USBD_SetConfig>
 800adc4:	4603      	mov	r3, r0
 800adc6:	73fb      	strb	r3, [r7, #15]
          break;
 800adc8:	e018      	b.n	800adfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800adca:	6839      	ldr	r1, [r7, #0]
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 fc85 	bl	800b6dc <USBD_GetConfig>
          break;
 800add2:	e013      	b.n	800adfc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800add4:	6839      	ldr	r1, [r7, #0]
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 fcb6 	bl	800b748 <USBD_GetStatus>
          break;
 800addc:	e00e      	b.n	800adfc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800adde:	6839      	ldr	r1, [r7, #0]
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fce5 	bl	800b7b0 <USBD_SetFeature>
          break;
 800ade6:	e009      	b.n	800adfc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ade8:	6839      	ldr	r1, [r7, #0]
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 fd09 	bl	800b802 <USBD_ClrFeature>
          break;
 800adf0:	e004      	b.n	800adfc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 fd60 	bl	800b8ba <USBD_CtlError>
          break;
 800adfa:	bf00      	nop
      }
      break;
 800adfc:	e004      	b.n	800ae08 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800adfe:	6839      	ldr	r1, [r7, #0]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 fd5a 	bl	800b8ba <USBD_CtlError>
      break;
 800ae06:	bf00      	nop
  }

  return ret;
 800ae08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3710      	adds	r7, #16
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop

0800ae14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae2a:	2b40      	cmp	r3, #64	@ 0x40
 800ae2c:	d005      	beq.n	800ae3a <USBD_StdItfReq+0x26>
 800ae2e:	2b40      	cmp	r3, #64	@ 0x40
 800ae30:	d852      	bhi.n	800aed8 <USBD_StdItfReq+0xc4>
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d001      	beq.n	800ae3a <USBD_StdItfReq+0x26>
 800ae36:	2b20      	cmp	r3, #32
 800ae38:	d14e      	bne.n	800aed8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	3b01      	subs	r3, #1
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d840      	bhi.n	800aeca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	889b      	ldrh	r3, [r3, #4]
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d836      	bhi.n	800aec0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	889b      	ldrh	r3, [r3, #4]
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	4619      	mov	r1, r3
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f7ff feda 	bl	800ac14 <USBD_CoreFindIF>
 800ae60:	4603      	mov	r3, r0
 800ae62:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae64:	7bbb      	ldrb	r3, [r7, #14]
 800ae66:	2bff      	cmp	r3, #255	@ 0xff
 800ae68:	d01d      	beq.n	800aea6 <USBD_StdItfReq+0x92>
 800ae6a:	7bbb      	ldrb	r3, [r7, #14]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d11a      	bne.n	800aea6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ae70:	7bba      	ldrb	r2, [r7, #14]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	32ae      	adds	r2, #174	@ 0xae
 800ae76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00f      	beq.n	800aea0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ae80:	7bba      	ldrb	r2, [r7, #14]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae88:	7bba      	ldrb	r2, [r7, #14]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	32ae      	adds	r2, #174	@ 0xae
 800ae8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	6839      	ldr	r1, [r7, #0]
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	4798      	blx	r3
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae9e:	e004      	b.n	800aeaa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aea0:	2303      	movs	r3, #3
 800aea2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aea4:	e001      	b.n	800aeaa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aea6:	2303      	movs	r3, #3
 800aea8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	88db      	ldrh	r3, [r3, #6]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d110      	bne.n	800aed4 <USBD_StdItfReq+0xc0>
 800aeb2:	7bfb      	ldrb	r3, [r7, #15]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10d      	bne.n	800aed4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fddc 	bl	800ba76 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aebe:	e009      	b.n	800aed4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aec0:	6839      	ldr	r1, [r7, #0]
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fcf9 	bl	800b8ba <USBD_CtlError>
          break;
 800aec8:	e004      	b.n	800aed4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aeca:	6839      	ldr	r1, [r7, #0]
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fcf4 	bl	800b8ba <USBD_CtlError>
          break;
 800aed2:	e000      	b.n	800aed6 <USBD_StdItfReq+0xc2>
          break;
 800aed4:	bf00      	nop
      }
      break;
 800aed6:	e004      	b.n	800aee2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aed8:	6839      	ldr	r1, [r7, #0]
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fced 	bl	800b8ba <USBD_CtlError>
      break;
 800aee0:	bf00      	nop
  }

  return ret;
 800aee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aef6:	2300      	movs	r3, #0
 800aef8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	889b      	ldrh	r3, [r3, #4]
 800aefe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af08:	2b40      	cmp	r3, #64	@ 0x40
 800af0a:	d007      	beq.n	800af1c <USBD_StdEPReq+0x30>
 800af0c:	2b40      	cmp	r3, #64	@ 0x40
 800af0e:	f200 8181 	bhi.w	800b214 <USBD_StdEPReq+0x328>
 800af12:	2b00      	cmp	r3, #0
 800af14:	d02a      	beq.n	800af6c <USBD_StdEPReq+0x80>
 800af16:	2b20      	cmp	r3, #32
 800af18:	f040 817c 	bne.w	800b214 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800af1c:	7bbb      	ldrb	r3, [r7, #14]
 800af1e:	4619      	mov	r1, r3
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f7ff fe84 	bl	800ac2e <USBD_CoreFindEP>
 800af26:	4603      	mov	r3, r0
 800af28:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af2a:	7b7b      	ldrb	r3, [r7, #13]
 800af2c:	2bff      	cmp	r3, #255	@ 0xff
 800af2e:	f000 8176 	beq.w	800b21e <USBD_StdEPReq+0x332>
 800af32:	7b7b      	ldrb	r3, [r7, #13]
 800af34:	2b00      	cmp	r3, #0
 800af36:	f040 8172 	bne.w	800b21e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800af3a:	7b7a      	ldrb	r2, [r7, #13]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800af42:	7b7a      	ldrb	r2, [r7, #13]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	32ae      	adds	r2, #174	@ 0xae
 800af48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	f000 8165 	beq.w	800b21e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800af54:	7b7a      	ldrb	r2, [r7, #13]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	32ae      	adds	r2, #174	@ 0xae
 800af5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	6839      	ldr	r1, [r7, #0]
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	4798      	blx	r3
 800af66:	4603      	mov	r3, r0
 800af68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af6a:	e158      	b.n	800b21e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	785b      	ldrb	r3, [r3, #1]
 800af70:	2b03      	cmp	r3, #3
 800af72:	d008      	beq.n	800af86 <USBD_StdEPReq+0x9a>
 800af74:	2b03      	cmp	r3, #3
 800af76:	f300 8147 	bgt.w	800b208 <USBD_StdEPReq+0x31c>
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f000 809b 	beq.w	800b0b6 <USBD_StdEPReq+0x1ca>
 800af80:	2b01      	cmp	r3, #1
 800af82:	d03c      	beq.n	800affe <USBD_StdEPReq+0x112>
 800af84:	e140      	b.n	800b208 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d002      	beq.n	800af98 <USBD_StdEPReq+0xac>
 800af92:	2b03      	cmp	r3, #3
 800af94:	d016      	beq.n	800afc4 <USBD_StdEPReq+0xd8>
 800af96:	e02c      	b.n	800aff2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af98:	7bbb      	ldrb	r3, [r7, #14]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00d      	beq.n	800afba <USBD_StdEPReq+0xce>
 800af9e:	7bbb      	ldrb	r3, [r7, #14]
 800afa0:	2b80      	cmp	r3, #128	@ 0x80
 800afa2:	d00a      	beq.n	800afba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800afa4:	7bbb      	ldrb	r3, [r7, #14]
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f001 f9e5 	bl	800c378 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800afae:	2180      	movs	r1, #128	@ 0x80
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f001 f9e1 	bl	800c378 <USBD_LL_StallEP>
 800afb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800afb8:	e020      	b.n	800affc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 fc7c 	bl	800b8ba <USBD_CtlError>
              break;
 800afc2:	e01b      	b.n	800affc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	885b      	ldrh	r3, [r3, #2]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d10e      	bne.n	800afea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800afcc:	7bbb      	ldrb	r3, [r7, #14]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00b      	beq.n	800afea <USBD_StdEPReq+0xfe>
 800afd2:	7bbb      	ldrb	r3, [r7, #14]
 800afd4:	2b80      	cmp	r3, #128	@ 0x80
 800afd6:	d008      	beq.n	800afea <USBD_StdEPReq+0xfe>
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	88db      	ldrh	r3, [r3, #6]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d104      	bne.n	800afea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
 800afe2:	4619      	mov	r1, r3
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f001 f9c7 	bl	800c378 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 fd43 	bl	800ba76 <USBD_CtlSendStatus>

              break;
 800aff0:	e004      	b.n	800affc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800aff2:	6839      	ldr	r1, [r7, #0]
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f000 fc60 	bl	800b8ba <USBD_CtlError>
              break;
 800affa:	bf00      	nop
          }
          break;
 800affc:	e109      	b.n	800b212 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b004:	b2db      	uxtb	r3, r3
 800b006:	2b02      	cmp	r3, #2
 800b008:	d002      	beq.n	800b010 <USBD_StdEPReq+0x124>
 800b00a:	2b03      	cmp	r3, #3
 800b00c:	d016      	beq.n	800b03c <USBD_StdEPReq+0x150>
 800b00e:	e04b      	b.n	800b0a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b010:	7bbb      	ldrb	r3, [r7, #14]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00d      	beq.n	800b032 <USBD_StdEPReq+0x146>
 800b016:	7bbb      	ldrb	r3, [r7, #14]
 800b018:	2b80      	cmp	r3, #128	@ 0x80
 800b01a:	d00a      	beq.n	800b032 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b01c:	7bbb      	ldrb	r3, [r7, #14]
 800b01e:	4619      	mov	r1, r3
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f001 f9a9 	bl	800c378 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b026:	2180      	movs	r1, #128	@ 0x80
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f001 f9a5 	bl	800c378 <USBD_LL_StallEP>
 800b02e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b030:	e040      	b.n	800b0b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f000 fc40 	bl	800b8ba <USBD_CtlError>
              break;
 800b03a:	e03b      	b.n	800b0b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	885b      	ldrh	r3, [r3, #2]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d136      	bne.n	800b0b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b044:	7bbb      	ldrb	r3, [r7, #14]
 800b046:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d004      	beq.n	800b058 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b04e:	7bbb      	ldrb	r3, [r7, #14]
 800b050:	4619      	mov	r1, r3
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f001 f9af 	bl	800c3b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 fd0c 	bl	800ba76 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b05e:	7bbb      	ldrb	r3, [r7, #14]
 800b060:	4619      	mov	r1, r3
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f7ff fde3 	bl	800ac2e <USBD_CoreFindEP>
 800b068:	4603      	mov	r3, r0
 800b06a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b06c:	7b7b      	ldrb	r3, [r7, #13]
 800b06e:	2bff      	cmp	r3, #255	@ 0xff
 800b070:	d01f      	beq.n	800b0b2 <USBD_StdEPReq+0x1c6>
 800b072:	7b7b      	ldrb	r3, [r7, #13]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d11c      	bne.n	800b0b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b078:	7b7a      	ldrb	r2, [r7, #13]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b080:	7b7a      	ldrb	r2, [r7, #13]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	32ae      	adds	r2, #174	@ 0xae
 800b086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d010      	beq.n	800b0b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b090:	7b7a      	ldrb	r2, [r7, #13]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	32ae      	adds	r2, #174	@ 0xae
 800b096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b09a:	689b      	ldr	r3, [r3, #8]
 800b09c:	6839      	ldr	r1, [r7, #0]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	4798      	blx	r3
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b0a6:	e004      	b.n	800b0b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b0a8:	6839      	ldr	r1, [r7, #0]
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f000 fc05 	bl	800b8ba <USBD_CtlError>
              break;
 800b0b0:	e000      	b.n	800b0b4 <USBD_StdEPReq+0x1c8>
              break;
 800b0b2:	bf00      	nop
          }
          break;
 800b0b4:	e0ad      	b.n	800b212 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	2b02      	cmp	r3, #2
 800b0c0:	d002      	beq.n	800b0c8 <USBD_StdEPReq+0x1dc>
 800b0c2:	2b03      	cmp	r3, #3
 800b0c4:	d033      	beq.n	800b12e <USBD_StdEPReq+0x242>
 800b0c6:	e099      	b.n	800b1fc <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0c8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d007      	beq.n	800b0de <USBD_StdEPReq+0x1f2>
 800b0ce:	7bbb      	ldrb	r3, [r7, #14]
 800b0d0:	2b80      	cmp	r3, #128	@ 0x80
 800b0d2:	d004      	beq.n	800b0de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b0d4:	6839      	ldr	r1, [r7, #0]
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 fbef 	bl	800b8ba <USBD_CtlError>
                break;
 800b0dc:	e093      	b.n	800b206 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	da0b      	bge.n	800b0fe <USBD_StdEPReq+0x212>
 800b0e6:	7bbb      	ldrb	r3, [r7, #14]
 800b0e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	009b      	lsls	r3, r3, #2
 800b0f0:	4413      	add	r3, r2
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	3310      	adds	r3, #16
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	3304      	adds	r3, #4
 800b0fc:	e00b      	b.n	800b116 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0fe:	7bbb      	ldrb	r3, [r7, #14]
 800b100:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b104:	4613      	mov	r3, r2
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	4413      	add	r3, r2
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	4413      	add	r3, r2
 800b114:	3304      	adds	r3, #4
 800b116:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	2200      	movs	r2, #0
 800b11c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	330e      	adds	r3, #14
 800b122:	2202      	movs	r2, #2
 800b124:	4619      	mov	r1, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f000 fc44 	bl	800b9b4 <USBD_CtlSendData>
              break;
 800b12c:	e06b      	b.n	800b206 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b12e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b132:	2b00      	cmp	r3, #0
 800b134:	da11      	bge.n	800b15a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b136:	7bbb      	ldrb	r3, [r7, #14]
 800b138:	f003 020f 	and.w	r2, r3, #15
 800b13c:	6879      	ldr	r1, [r7, #4]
 800b13e:	4613      	mov	r3, r2
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	4413      	add	r3, r2
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	440b      	add	r3, r1
 800b148:	3323      	adds	r3, #35	@ 0x23
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d117      	bne.n	800b180 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b150:	6839      	ldr	r1, [r7, #0]
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fbb1 	bl	800b8ba <USBD_CtlError>
                  break;
 800b158:	e055      	b.n	800b206 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b15a:	7bbb      	ldrb	r3, [r7, #14]
 800b15c:	f003 020f 	and.w	r2, r3, #15
 800b160:	6879      	ldr	r1, [r7, #4]
 800b162:	4613      	mov	r3, r2
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4413      	add	r3, r2
 800b168:	009b      	lsls	r3, r3, #2
 800b16a:	440b      	add	r3, r1
 800b16c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d104      	bne.n	800b180 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b176:	6839      	ldr	r1, [r7, #0]
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f000 fb9e 	bl	800b8ba <USBD_CtlError>
                  break;
 800b17e:	e042      	b.n	800b206 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b180:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b184:	2b00      	cmp	r3, #0
 800b186:	da0b      	bge.n	800b1a0 <USBD_StdEPReq+0x2b4>
 800b188:	7bbb      	ldrb	r3, [r7, #14]
 800b18a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b18e:	4613      	mov	r3, r2
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	4413      	add	r3, r2
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	3310      	adds	r3, #16
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	4413      	add	r3, r2
 800b19c:	3304      	adds	r3, #4
 800b19e:	e00b      	b.n	800b1b8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1a0:	7bbb      	ldrb	r3, [r7, #14]
 800b1a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	4413      	add	r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b1ba:	7bbb      	ldrb	r3, [r7, #14]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d002      	beq.n	800b1c6 <USBD_StdEPReq+0x2da>
 800b1c0:	7bbb      	ldrb	r3, [r7, #14]
 800b1c2:	2b80      	cmp	r3, #128	@ 0x80
 800b1c4:	d103      	bne.n	800b1ce <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	739a      	strb	r2, [r3, #14]
 800b1cc:	e00e      	b.n	800b1ec <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b1ce:	7bbb      	ldrb	r3, [r7, #14]
 800b1d0:	4619      	mov	r1, r3
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f001 f90e 	bl	800c3f4 <USBD_LL_IsStallEP>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d003      	beq.n	800b1e6 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	739a      	strb	r2, [r3, #14]
 800b1e4:	e002      	b.n	800b1ec <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	330e      	adds	r3, #14
 800b1f0:	2202      	movs	r2, #2
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 fbdd 	bl	800b9b4 <USBD_CtlSendData>
              break;
 800b1fa:	e004      	b.n	800b206 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800b1fc:	6839      	ldr	r1, [r7, #0]
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 fb5b 	bl	800b8ba <USBD_CtlError>
              break;
 800b204:	bf00      	nop
          }
          break;
 800b206:	e004      	b.n	800b212 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800b208:	6839      	ldr	r1, [r7, #0]
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 fb55 	bl	800b8ba <USBD_CtlError>
          break;
 800b210:	bf00      	nop
      }
      break;
 800b212:	e005      	b.n	800b220 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800b214:	6839      	ldr	r1, [r7, #0]
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f000 fb4f 	bl	800b8ba <USBD_CtlError>
      break;
 800b21c:	e000      	b.n	800b220 <USBD_StdEPReq+0x334>
      break;
 800b21e:	bf00      	nop
  }

  return ret;
 800b220:	7bfb      	ldrb	r3, [r7, #15]
}
 800b222:	4618      	mov	r0, r3
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
	...

0800b22c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b236:	2300      	movs	r3, #0
 800b238:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b23a:	2300      	movs	r3, #0
 800b23c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b23e:	2300      	movs	r3, #0
 800b240:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	885b      	ldrh	r3, [r3, #2]
 800b246:	0a1b      	lsrs	r3, r3, #8
 800b248:	b29b      	uxth	r3, r3
 800b24a:	3b01      	subs	r3, #1
 800b24c:	2b06      	cmp	r3, #6
 800b24e:	f200 8128 	bhi.w	800b4a2 <USBD_GetDescriptor+0x276>
 800b252:	a201      	add	r2, pc, #4	@ (adr r2, 800b258 <USBD_GetDescriptor+0x2c>)
 800b254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b258:	0800b275 	.word	0x0800b275
 800b25c:	0800b28d 	.word	0x0800b28d
 800b260:	0800b2cd 	.word	0x0800b2cd
 800b264:	0800b4a3 	.word	0x0800b4a3
 800b268:	0800b4a3 	.word	0x0800b4a3
 800b26c:	0800b443 	.word	0x0800b443
 800b270:	0800b46f 	.word	0x0800b46f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	7c12      	ldrb	r2, [r2, #16]
 800b280:	f107 0108 	add.w	r1, r7, #8
 800b284:	4610      	mov	r0, r2
 800b286:	4798      	blx	r3
 800b288:	60f8      	str	r0, [r7, #12]
      break;
 800b28a:	e112      	b.n	800b4b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	7c1b      	ldrb	r3, [r3, #16]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d10d      	bne.n	800b2b0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b29a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b29c:	f107 0208 	add.w	r2, r7, #8
 800b2a0:	4610      	mov	r0, r2
 800b2a2:	4798      	blx	r3
 800b2a4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	2202      	movs	r2, #2
 800b2ac:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b2ae:	e100      	b.n	800b4b2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2b8:	f107 0208 	add.w	r2, r7, #8
 800b2bc:	4610      	mov	r0, r2
 800b2be:	4798      	blx	r3
 800b2c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	2202      	movs	r2, #2
 800b2c8:	701a      	strb	r2, [r3, #0]
      break;
 800b2ca:	e0f2      	b.n	800b4b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	885b      	ldrh	r3, [r3, #2]
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	2b05      	cmp	r3, #5
 800b2d4:	f200 80ac 	bhi.w	800b430 <USBD_GetDescriptor+0x204>
 800b2d8:	a201      	add	r2, pc, #4	@ (adr r2, 800b2e0 <USBD_GetDescriptor+0xb4>)
 800b2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2de:	bf00      	nop
 800b2e0:	0800b2f9 	.word	0x0800b2f9
 800b2e4:	0800b32d 	.word	0x0800b32d
 800b2e8:	0800b361 	.word	0x0800b361
 800b2ec:	0800b395 	.word	0x0800b395
 800b2f0:	0800b3c9 	.word	0x0800b3c9
 800b2f4:	0800b3fd 	.word	0x0800b3fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d00b      	beq.n	800b31c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	7c12      	ldrb	r2, [r2, #16]
 800b310:	f107 0108 	add.w	r1, r7, #8
 800b314:	4610      	mov	r0, r2
 800b316:	4798      	blx	r3
 800b318:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b31a:	e091      	b.n	800b440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b31c:	6839      	ldr	r1, [r7, #0]
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 facb 	bl	800b8ba <USBD_CtlError>
            err++;
 800b324:	7afb      	ldrb	r3, [r7, #11]
 800b326:	3301      	adds	r3, #1
 800b328:	72fb      	strb	r3, [r7, #11]
          break;
 800b32a:	e089      	b.n	800b440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b332:	689b      	ldr	r3, [r3, #8]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d00b      	beq.n	800b350 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b33e:	689b      	ldr	r3, [r3, #8]
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	7c12      	ldrb	r2, [r2, #16]
 800b344:	f107 0108 	add.w	r1, r7, #8
 800b348:	4610      	mov	r0, r2
 800b34a:	4798      	blx	r3
 800b34c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b34e:	e077      	b.n	800b440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b350:	6839      	ldr	r1, [r7, #0]
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 fab1 	bl	800b8ba <USBD_CtlError>
            err++;
 800b358:	7afb      	ldrb	r3, [r7, #11]
 800b35a:	3301      	adds	r3, #1
 800b35c:	72fb      	strb	r3, [r7, #11]
          break;
 800b35e:	e06f      	b.n	800b440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b366:	68db      	ldr	r3, [r3, #12]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00b      	beq.n	800b384 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b372:	68db      	ldr	r3, [r3, #12]
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	7c12      	ldrb	r2, [r2, #16]
 800b378:	f107 0108 	add.w	r1, r7, #8
 800b37c:	4610      	mov	r0, r2
 800b37e:	4798      	blx	r3
 800b380:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b382:	e05d      	b.n	800b440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 fa97 	bl	800b8ba <USBD_CtlError>
            err++;
 800b38c:	7afb      	ldrb	r3, [r7, #11]
 800b38e:	3301      	adds	r3, #1
 800b390:	72fb      	strb	r3, [r7, #11]
          break;
 800b392:	e055      	b.n	800b440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b39a:	691b      	ldr	r3, [r3, #16]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00b      	beq.n	800b3b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3a6:	691b      	ldr	r3, [r3, #16]
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	7c12      	ldrb	r2, [r2, #16]
 800b3ac:	f107 0108 	add.w	r1, r7, #8
 800b3b0:	4610      	mov	r0, r2
 800b3b2:	4798      	blx	r3
 800b3b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3b6:	e043      	b.n	800b440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 fa7d 	bl	800b8ba <USBD_CtlError>
            err++;
 800b3c0:	7afb      	ldrb	r3, [r7, #11]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3c6:	e03b      	b.n	800b440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3ce:	695b      	ldr	r3, [r3, #20]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00b      	beq.n	800b3ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3da:	695b      	ldr	r3, [r3, #20]
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	7c12      	ldrb	r2, [r2, #16]
 800b3e0:	f107 0108 	add.w	r1, r7, #8
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	4798      	blx	r3
 800b3e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3ea:	e029      	b.n	800b440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3ec:	6839      	ldr	r1, [r7, #0]
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fa63 	bl	800b8ba <USBD_CtlError>
            err++;
 800b3f4:	7afb      	ldrb	r3, [r7, #11]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3fa:	e021      	b.n	800b440 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b402:	699b      	ldr	r3, [r3, #24]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00b      	beq.n	800b420 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	7c12      	ldrb	r2, [r2, #16]
 800b414:	f107 0108 	add.w	r1, r7, #8
 800b418:	4610      	mov	r0, r2
 800b41a:	4798      	blx	r3
 800b41c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b41e:	e00f      	b.n	800b440 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b420:	6839      	ldr	r1, [r7, #0]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fa49 	bl	800b8ba <USBD_CtlError>
            err++;
 800b428:	7afb      	ldrb	r3, [r7, #11]
 800b42a:	3301      	adds	r3, #1
 800b42c:	72fb      	strb	r3, [r7, #11]
          break;
 800b42e:	e007      	b.n	800b440 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b430:	6839      	ldr	r1, [r7, #0]
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f000 fa41 	bl	800b8ba <USBD_CtlError>
          err++;
 800b438:	7afb      	ldrb	r3, [r7, #11]
 800b43a:	3301      	adds	r3, #1
 800b43c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b43e:	bf00      	nop
      }
      break;
 800b440:	e037      	b.n	800b4b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	7c1b      	ldrb	r3, [r3, #16]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d109      	bne.n	800b45e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b452:	f107 0208 	add.w	r2, r7, #8
 800b456:	4610      	mov	r0, r2
 800b458:	4798      	blx	r3
 800b45a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b45c:	e029      	b.n	800b4b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b45e:	6839      	ldr	r1, [r7, #0]
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 fa2a 	bl	800b8ba <USBD_CtlError>
        err++;
 800b466:	7afb      	ldrb	r3, [r7, #11]
 800b468:	3301      	adds	r3, #1
 800b46a:	72fb      	strb	r3, [r7, #11]
      break;
 800b46c:	e021      	b.n	800b4b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	7c1b      	ldrb	r3, [r3, #16]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d10d      	bne.n	800b492 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b47c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b47e:	f107 0208 	add.w	r2, r7, #8
 800b482:	4610      	mov	r0, r2
 800b484:	4798      	blx	r3
 800b486:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	3301      	adds	r3, #1
 800b48c:	2207      	movs	r2, #7
 800b48e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b490:	e00f      	b.n	800b4b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b492:	6839      	ldr	r1, [r7, #0]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 fa10 	bl	800b8ba <USBD_CtlError>
        err++;
 800b49a:	7afb      	ldrb	r3, [r7, #11]
 800b49c:	3301      	adds	r3, #1
 800b49e:	72fb      	strb	r3, [r7, #11]
      break;
 800b4a0:	e007      	b.n	800b4b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b4a2:	6839      	ldr	r1, [r7, #0]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 fa08 	bl	800b8ba <USBD_CtlError>
      err++;
 800b4aa:	7afb      	ldrb	r3, [r7, #11]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	72fb      	strb	r3, [r7, #11]
      break;
 800b4b0:	bf00      	nop
  }

  if (err != 0U)
 800b4b2:	7afb      	ldrb	r3, [r7, #11]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d11e      	bne.n	800b4f6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	88db      	ldrh	r3, [r3, #6]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d016      	beq.n	800b4ee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b4c0:	893b      	ldrh	r3, [r7, #8]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00e      	beq.n	800b4e4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	88da      	ldrh	r2, [r3, #6]
 800b4ca:	893b      	ldrh	r3, [r7, #8]
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	bf28      	it	cs
 800b4d0:	4613      	movcs	r3, r2
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b4d6:	893b      	ldrh	r3, [r7, #8]
 800b4d8:	461a      	mov	r2, r3
 800b4da:	68f9      	ldr	r1, [r7, #12]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 fa69 	bl	800b9b4 <USBD_CtlSendData>
 800b4e2:	e009      	b.n	800b4f8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b4e4:	6839      	ldr	r1, [r7, #0]
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 f9e7 	bl	800b8ba <USBD_CtlError>
 800b4ec:	e004      	b.n	800b4f8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 fac1 	bl	800ba76 <USBD_CtlSendStatus>
 800b4f4:	e000      	b.n	800b4f8 <USBD_GetDescriptor+0x2cc>
    return;
 800b4f6:	bf00      	nop
  }
}
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop

0800b500 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	889b      	ldrh	r3, [r3, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d131      	bne.n	800b576 <USBD_SetAddress+0x76>
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	88db      	ldrh	r3, [r3, #6]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d12d      	bne.n	800b576 <USBD_SetAddress+0x76>
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	885b      	ldrh	r3, [r3, #2]
 800b51e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b520:	d829      	bhi.n	800b576 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	885b      	ldrh	r3, [r3, #2]
 800b526:	b2db      	uxtb	r3, r3
 800b528:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b52c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b534:	b2db      	uxtb	r3, r3
 800b536:	2b03      	cmp	r3, #3
 800b538:	d104      	bne.n	800b544 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b53a:	6839      	ldr	r1, [r7, #0]
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f000 f9bc 	bl	800b8ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b542:	e01d      	b.n	800b580 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	7bfa      	ldrb	r2, [r7, #15]
 800b548:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b54c:	7bfb      	ldrb	r3, [r7, #15]
 800b54e:	4619      	mov	r1, r3
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 ff7b 	bl	800c44c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 fa8d 	bl	800ba76 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d004      	beq.n	800b56c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2202      	movs	r2, #2
 800b566:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b56a:	e009      	b.n	800b580 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2201      	movs	r2, #1
 800b570:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b574:	e004      	b.n	800b580 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b576:	6839      	ldr	r1, [r7, #0]
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 f99e 	bl	800b8ba <USBD_CtlError>
  }
}
 800b57e:	bf00      	nop
 800b580:	bf00      	nop
 800b582:	3710      	adds	r7, #16
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b592:	2300      	movs	r3, #0
 800b594:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	885b      	ldrh	r3, [r3, #2]
 800b59a:	b2da      	uxtb	r2, r3
 800b59c:	4b4e      	ldr	r3, [pc, #312]	@ (800b6d8 <USBD_SetConfig+0x150>)
 800b59e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b5a0:	4b4d      	ldr	r3, [pc, #308]	@ (800b6d8 <USBD_SetConfig+0x150>)
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d905      	bls.n	800b5b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b5a8:	6839      	ldr	r1, [r7, #0]
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 f985 	bl	800b8ba <USBD_CtlError>
    return USBD_FAIL;
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	e08c      	b.n	800b6ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	2b02      	cmp	r3, #2
 800b5be:	d002      	beq.n	800b5c6 <USBD_SetConfig+0x3e>
 800b5c0:	2b03      	cmp	r3, #3
 800b5c2:	d029      	beq.n	800b618 <USBD_SetConfig+0x90>
 800b5c4:	e075      	b.n	800b6b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b5c6:	4b44      	ldr	r3, [pc, #272]	@ (800b6d8 <USBD_SetConfig+0x150>)
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d020      	beq.n	800b610 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b5ce:	4b42      	ldr	r3, [pc, #264]	@ (800b6d8 <USBD_SetConfig+0x150>)
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5d8:	4b3f      	ldr	r3, [pc, #252]	@ (800b6d8 <USBD_SetConfig+0x150>)
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	4619      	mov	r1, r3
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f7fe ffcd 	bl	800a57e <USBD_SetClassConfig>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d008      	beq.n	800b600 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b5ee:	6839      	ldr	r1, [r7, #0]
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 f962 	bl	800b8ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2202      	movs	r2, #2
 800b5fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5fe:	e065      	b.n	800b6cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 fa38 	bl	800ba76 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2203      	movs	r2, #3
 800b60a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b60e:	e05d      	b.n	800b6cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 fa30 	bl	800ba76 <USBD_CtlSendStatus>
      break;
 800b616:	e059      	b.n	800b6cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b618:	4b2f      	ldr	r3, [pc, #188]	@ (800b6d8 <USBD_SetConfig+0x150>)
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d112      	bne.n	800b646 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2202      	movs	r2, #2
 800b624:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b628:	4b2b      	ldr	r3, [pc, #172]	@ (800b6d8 <USBD_SetConfig+0x150>)
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	461a      	mov	r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b632:	4b29      	ldr	r3, [pc, #164]	@ (800b6d8 <USBD_SetConfig+0x150>)
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	4619      	mov	r1, r3
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f7fe ffbc 	bl	800a5b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 fa19 	bl	800ba76 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b644:	e042      	b.n	800b6cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b646:	4b24      	ldr	r3, [pc, #144]	@ (800b6d8 <USBD_SetConfig+0x150>)
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	461a      	mov	r2, r3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	429a      	cmp	r2, r3
 800b652:	d02a      	beq.n	800b6aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	4619      	mov	r1, r3
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f7fe ffaa 	bl	800a5b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b662:	4b1d      	ldr	r3, [pc, #116]	@ (800b6d8 <USBD_SetConfig+0x150>)
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	461a      	mov	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b66c:	4b1a      	ldr	r3, [pc, #104]	@ (800b6d8 <USBD_SetConfig+0x150>)
 800b66e:	781b      	ldrb	r3, [r3, #0]
 800b670:	4619      	mov	r1, r3
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f7fe ff83 	bl	800a57e <USBD_SetClassConfig>
 800b678:	4603      	mov	r3, r0
 800b67a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00f      	beq.n	800b6a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b682:	6839      	ldr	r1, [r7, #0]
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f918 	bl	800b8ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	685b      	ldr	r3, [r3, #4]
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f7fe ff8f 	bl	800a5b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2202      	movs	r2, #2
 800b69c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b6a0:	e014      	b.n	800b6cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 f9e7 	bl	800ba76 <USBD_CtlSendStatus>
      break;
 800b6a8:	e010      	b.n	800b6cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 f9e3 	bl	800ba76 <USBD_CtlSendStatus>
      break;
 800b6b0:	e00c      	b.n	800b6cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b6b2:	6839      	ldr	r1, [r7, #0]
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 f900 	bl	800b8ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b6ba:	4b07      	ldr	r3, [pc, #28]	@ (800b6d8 <USBD_SetConfig+0x150>)
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	4619      	mov	r1, r3
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7fe ff78 	bl	800a5b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b6c6:	2303      	movs	r3, #3
 800b6c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b6ca:	bf00      	nop
  }

  return ret;
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	20000980 	.word	0x20000980

0800b6dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	88db      	ldrh	r3, [r3, #6]
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d004      	beq.n	800b6f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b6ee:	6839      	ldr	r1, [r7, #0]
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 f8e2 	bl	800b8ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b6f6:	e023      	b.n	800b740 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	2b02      	cmp	r3, #2
 800b702:	dc02      	bgt.n	800b70a <USBD_GetConfig+0x2e>
 800b704:	2b00      	cmp	r3, #0
 800b706:	dc03      	bgt.n	800b710 <USBD_GetConfig+0x34>
 800b708:	e015      	b.n	800b736 <USBD_GetConfig+0x5a>
 800b70a:	2b03      	cmp	r3, #3
 800b70c:	d00b      	beq.n	800b726 <USBD_GetConfig+0x4a>
 800b70e:	e012      	b.n	800b736 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	3308      	adds	r3, #8
 800b71a:	2201      	movs	r2, #1
 800b71c:	4619      	mov	r1, r3
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 f948 	bl	800b9b4 <USBD_CtlSendData>
        break;
 800b724:	e00c      	b.n	800b740 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	3304      	adds	r3, #4
 800b72a:	2201      	movs	r2, #1
 800b72c:	4619      	mov	r1, r3
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 f940 	bl	800b9b4 <USBD_CtlSendData>
        break;
 800b734:	e004      	b.n	800b740 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b736:	6839      	ldr	r1, [r7, #0]
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 f8be 	bl	800b8ba <USBD_CtlError>
        break;
 800b73e:	bf00      	nop
}
 800b740:	bf00      	nop
 800b742:	3708      	adds	r7, #8
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b758:	b2db      	uxtb	r3, r3
 800b75a:	3b01      	subs	r3, #1
 800b75c:	2b02      	cmp	r3, #2
 800b75e:	d81e      	bhi.n	800b79e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	88db      	ldrh	r3, [r3, #6]
 800b764:	2b02      	cmp	r3, #2
 800b766:	d004      	beq.n	800b772 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b768:	6839      	ldr	r1, [r7, #0]
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 f8a5 	bl	800b8ba <USBD_CtlError>
        break;
 800b770:	e01a      	b.n	800b7a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2201      	movs	r2, #1
 800b776:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d005      	beq.n	800b78e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	f043 0202 	orr.w	r2, r3, #2
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	330c      	adds	r3, #12
 800b792:	2202      	movs	r2, #2
 800b794:	4619      	mov	r1, r3
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 f90c 	bl	800b9b4 <USBD_CtlSendData>
      break;
 800b79c:	e004      	b.n	800b7a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b79e:	6839      	ldr	r1, [r7, #0]
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 f88a 	bl	800b8ba <USBD_CtlError>
      break;
 800b7a6:	bf00      	nop
  }
}
 800b7a8:	bf00      	nop
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b082      	sub	sp, #8
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	885b      	ldrh	r3, [r3, #2]
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d107      	bne.n	800b7d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 f953 	bl	800ba76 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b7d0:	e013      	b.n	800b7fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	885b      	ldrh	r3, [r3, #2]
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d10b      	bne.n	800b7f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	889b      	ldrh	r3, [r3, #4]
 800b7de:	0a1b      	lsrs	r3, r3, #8
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	b2da      	uxtb	r2, r3
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 f943 	bl	800ba76 <USBD_CtlSendStatus>
}
 800b7f0:	e003      	b.n	800b7fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b7f2:	6839      	ldr	r1, [r7, #0]
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 f860 	bl	800b8ba <USBD_CtlError>
}
 800b7fa:	bf00      	nop
 800b7fc:	3708      	adds	r7, #8
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b082      	sub	sp, #8
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
 800b80a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b812:	b2db      	uxtb	r3, r3
 800b814:	3b01      	subs	r3, #1
 800b816:	2b02      	cmp	r3, #2
 800b818:	d80b      	bhi.n	800b832 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	885b      	ldrh	r3, [r3, #2]
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d10c      	bne.n	800b83c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 f923 	bl	800ba76 <USBD_CtlSendStatus>
      }
      break;
 800b830:	e004      	b.n	800b83c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b832:	6839      	ldr	r1, [r7, #0]
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 f840 	bl	800b8ba <USBD_CtlError>
      break;
 800b83a:	e000      	b.n	800b83e <USBD_ClrFeature+0x3c>
      break;
 800b83c:	bf00      	nop
  }
}
 800b83e:	bf00      	nop
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b846:	b580      	push	{r7, lr}
 800b848:	b084      	sub	sp, #16
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
 800b84e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	781a      	ldrb	r2, [r3, #0]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	3301      	adds	r3, #1
 800b860:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	781a      	ldrb	r2, [r3, #0]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	3301      	adds	r3, #1
 800b86e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f7ff fa3d 	bl	800acf0 <SWAPBYTE>
 800b876:	4603      	mov	r3, r0
 800b878:	461a      	mov	r2, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	3301      	adds	r3, #1
 800b882:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	3301      	adds	r3, #1
 800b888:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f7ff fa30 	bl	800acf0 <SWAPBYTE>
 800b890:	4603      	mov	r3, r0
 800b892:	461a      	mov	r2, r3
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	3301      	adds	r3, #1
 800b89c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f7ff fa23 	bl	800acf0 <SWAPBYTE>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	80da      	strh	r2, [r3, #6]
}
 800b8b2:	bf00      	nop
 800b8b4:	3710      	adds	r7, #16
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b082      	sub	sp, #8
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
 800b8c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8c4:	2180      	movs	r1, #128	@ 0x80
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 fd56 	bl	800c378 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b8cc:	2100      	movs	r1, #0
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 fd52 	bl	800c378 <USBD_LL_StallEP>
}
 800b8d4:	bf00      	nop
 800b8d6:	3708      	adds	r7, #8
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b086      	sub	sp, #24
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d042      	beq.n	800b978 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b8f6:	6938      	ldr	r0, [r7, #16]
 800b8f8:	f000 f842 	bl	800b980 <USBD_GetLen>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	3301      	adds	r3, #1
 800b900:	005b      	lsls	r3, r3, #1
 800b902:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b906:	d808      	bhi.n	800b91a <USBD_GetString+0x3e>
 800b908:	6938      	ldr	r0, [r7, #16]
 800b90a:	f000 f839 	bl	800b980 <USBD_GetLen>
 800b90e:	4603      	mov	r3, r0
 800b910:	3301      	adds	r3, #1
 800b912:	b29b      	uxth	r3, r3
 800b914:	005b      	lsls	r3, r3, #1
 800b916:	b29a      	uxth	r2, r3
 800b918:	e001      	b.n	800b91e <USBD_GetString+0x42>
 800b91a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b922:	7dfb      	ldrb	r3, [r7, #23]
 800b924:	68ba      	ldr	r2, [r7, #8]
 800b926:	4413      	add	r3, r2
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	7812      	ldrb	r2, [r2, #0]
 800b92c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b92e:	7dfb      	ldrb	r3, [r7, #23]
 800b930:	3301      	adds	r3, #1
 800b932:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b934:	7dfb      	ldrb	r3, [r7, #23]
 800b936:	68ba      	ldr	r2, [r7, #8]
 800b938:	4413      	add	r3, r2
 800b93a:	2203      	movs	r2, #3
 800b93c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b93e:	7dfb      	ldrb	r3, [r7, #23]
 800b940:	3301      	adds	r3, #1
 800b942:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b944:	e013      	b.n	800b96e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b946:	7dfb      	ldrb	r3, [r7, #23]
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	4413      	add	r3, r2
 800b94c:	693a      	ldr	r2, [r7, #16]
 800b94e:	7812      	ldrb	r2, [r2, #0]
 800b950:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	3301      	adds	r3, #1
 800b956:	613b      	str	r3, [r7, #16]
    idx++;
 800b958:	7dfb      	ldrb	r3, [r7, #23]
 800b95a:	3301      	adds	r3, #1
 800b95c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b95e:	7dfb      	ldrb	r3, [r7, #23]
 800b960:	68ba      	ldr	r2, [r7, #8]
 800b962:	4413      	add	r3, r2
 800b964:	2200      	movs	r2, #0
 800b966:	701a      	strb	r2, [r3, #0]
    idx++;
 800b968:	7dfb      	ldrb	r3, [r7, #23]
 800b96a:	3301      	adds	r3, #1
 800b96c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d1e7      	bne.n	800b946 <USBD_GetString+0x6a>
 800b976:	e000      	b.n	800b97a <USBD_GetString+0x9e>
    return;
 800b978:	bf00      	nop
  }
}
 800b97a:	3718      	adds	r7, #24
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b980:	b480      	push	{r7}
 800b982:	b085      	sub	sp, #20
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b988:	2300      	movs	r3, #0
 800b98a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b990:	e005      	b.n	800b99e <USBD_GetLen+0x1e>
  {
    len++;
 800b992:	7bfb      	ldrb	r3, [r7, #15]
 800b994:	3301      	adds	r3, #1
 800b996:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	3301      	adds	r3, #1
 800b99c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d1f5      	bne.n	800b992 <USBD_GetLen+0x12>
  }

  return len;
 800b9a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3714      	adds	r7, #20
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	687a      	ldr	r2, [r7, #4]
 800b9cc:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	68ba      	ldr	r2, [r7, #8]
 800b9d2:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	687a      	ldr	r2, [r7, #4]
 800b9d8:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	68ba      	ldr	r2, [r7, #8]
 800b9de:	2100      	movs	r1, #0
 800b9e0:	68f8      	ldr	r0, [r7, #12]
 800b9e2:	f000 fd52 	bl	800c48a <USBD_LL_Transmit>

  return USBD_OK;
 800b9e6:	2300      	movs	r3, #0
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	68ba      	ldr	r2, [r7, #8]
 800ba00:	2100      	movs	r1, #0
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	f000 fd41 	bl	800c48a <USBD_LL_Transmit>

  return USBD_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b084      	sub	sp, #16
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	60f8      	str	r0, [r7, #12]
 800ba1a:	60b9      	str	r1, [r7, #8]
 800ba1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2203      	movs	r2, #3
 800ba22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	687a      	ldr	r2, [r7, #4]
 800ba2a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	68ba      	ldr	r2, [r7, #8]
 800ba42:	2100      	movs	r1, #0
 800ba44:	68f8      	ldr	r0, [r7, #12]
 800ba46:	f000 fd41 	bl	800c4cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3710      	adds	r7, #16
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	60b9      	str	r1, [r7, #8]
 800ba5e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	2100      	movs	r1, #0
 800ba66:	68f8      	ldr	r0, [r7, #12]
 800ba68:	f000 fd30 	bl	800c4cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b082      	sub	sp, #8
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2204      	movs	r2, #4
 800ba82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba86:	2300      	movs	r3, #0
 800ba88:	2200      	movs	r2, #0
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 fcfc 	bl	800c48a <USBD_LL_Transmit>

  return USBD_OK;
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3708      	adds	r7, #8
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2205      	movs	r2, #5
 800baa8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800baac:	2300      	movs	r3, #0
 800baae:	2200      	movs	r2, #0
 800bab0:	2100      	movs	r1, #0
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 fd0a 	bl	800c4cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	3708      	adds	r7, #8
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
	...

0800bac4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bac8:	2200      	movs	r2, #0
 800baca:	4912      	ldr	r1, [pc, #72]	@ (800bb14 <MX_USB_DEVICE_Init+0x50>)
 800bacc:	4812      	ldr	r0, [pc, #72]	@ (800bb18 <MX_USB_DEVICE_Init+0x54>)
 800bace:	f7fe fcd9 	bl	800a484 <USBD_Init>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d001      	beq.n	800badc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bad8:	f7f5 f926 	bl	8000d28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800badc:	490f      	ldr	r1, [pc, #60]	@ (800bb1c <MX_USB_DEVICE_Init+0x58>)
 800bade:	480e      	ldr	r0, [pc, #56]	@ (800bb18 <MX_USB_DEVICE_Init+0x54>)
 800bae0:	f7fe fd00 	bl	800a4e4 <USBD_RegisterClass>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d001      	beq.n	800baee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800baea:	f7f5 f91d 	bl	8000d28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800baee:	490c      	ldr	r1, [pc, #48]	@ (800bb20 <MX_USB_DEVICE_Init+0x5c>)
 800baf0:	4809      	ldr	r0, [pc, #36]	@ (800bb18 <MX_USB_DEVICE_Init+0x54>)
 800baf2:	f7fe fbf7 	bl	800a2e4 <USBD_CDC_RegisterInterface>
 800baf6:	4603      	mov	r3, r0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d001      	beq.n	800bb00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bafc:	f7f5 f914 	bl	8000d28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bb00:	4805      	ldr	r0, [pc, #20]	@ (800bb18 <MX_USB_DEVICE_Init+0x54>)
 800bb02:	f7fe fd25 	bl	800a550 <USBD_Start>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d001      	beq.n	800bb10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bb0c:	f7f5 f90c 	bl	8000d28 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb10:	bf00      	nop
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	200000c4 	.word	0x200000c4
 800bb18:	20000984 	.word	0x20000984
 800bb1c:	20000028 	.word	0x20000028
 800bb20:	200000b0 	.word	0x200000b0

0800bb24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb28:	2200      	movs	r2, #0
 800bb2a:	4905      	ldr	r1, [pc, #20]	@ (800bb40 <CDC_Init_FS+0x1c>)
 800bb2c:	4805      	ldr	r0, [pc, #20]	@ (800bb44 <CDC_Init_FS+0x20>)
 800bb2e:	f7fe fbf3 	bl	800a318 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb32:	4905      	ldr	r1, [pc, #20]	@ (800bb48 <CDC_Init_FS+0x24>)
 800bb34:	4803      	ldr	r0, [pc, #12]	@ (800bb44 <CDC_Init_FS+0x20>)
 800bb36:	f7fe fc11 	bl	800a35c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	20000e60 	.word	0x20000e60
 800bb44:	20000984 	.word	0x20000984
 800bb48:	20000c60 	.word	0x20000c60

0800bb4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	4603      	mov	r3, r0
 800bb64:	6039      	str	r1, [r7, #0]
 800bb66:	71fb      	strb	r3, [r7, #7]
 800bb68:	4613      	mov	r3, r2
 800bb6a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bb6c:	79fb      	ldrb	r3, [r7, #7]
 800bb6e:	2b23      	cmp	r3, #35	@ 0x23
 800bb70:	f200 8098 	bhi.w	800bca4 <CDC_Control_FS+0x148>
 800bb74:	a201      	add	r2, pc, #4	@ (adr r2, 800bb7c <CDC_Control_FS+0x20>)
 800bb76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb7a:	bf00      	nop
 800bb7c:	0800bca5 	.word	0x0800bca5
 800bb80:	0800bca5 	.word	0x0800bca5
 800bb84:	0800bca5 	.word	0x0800bca5
 800bb88:	0800bca5 	.word	0x0800bca5
 800bb8c:	0800bca5 	.word	0x0800bca5
 800bb90:	0800bca5 	.word	0x0800bca5
 800bb94:	0800bca5 	.word	0x0800bca5
 800bb98:	0800bca5 	.word	0x0800bca5
 800bb9c:	0800bca5 	.word	0x0800bca5
 800bba0:	0800bca5 	.word	0x0800bca5
 800bba4:	0800bca5 	.word	0x0800bca5
 800bba8:	0800bca5 	.word	0x0800bca5
 800bbac:	0800bca5 	.word	0x0800bca5
 800bbb0:	0800bca5 	.word	0x0800bca5
 800bbb4:	0800bca5 	.word	0x0800bca5
 800bbb8:	0800bca5 	.word	0x0800bca5
 800bbbc:	0800bca5 	.word	0x0800bca5
 800bbc0:	0800bca5 	.word	0x0800bca5
 800bbc4:	0800bca5 	.word	0x0800bca5
 800bbc8:	0800bca5 	.word	0x0800bca5
 800bbcc:	0800bca5 	.word	0x0800bca5
 800bbd0:	0800bca5 	.word	0x0800bca5
 800bbd4:	0800bca5 	.word	0x0800bca5
 800bbd8:	0800bca5 	.word	0x0800bca5
 800bbdc:	0800bca5 	.word	0x0800bca5
 800bbe0:	0800bca5 	.word	0x0800bca5
 800bbe4:	0800bca5 	.word	0x0800bca5
 800bbe8:	0800bca5 	.word	0x0800bca5
 800bbec:	0800bca5 	.word	0x0800bca5
 800bbf0:	0800bca5 	.word	0x0800bca5
 800bbf4:	0800bca5 	.word	0x0800bca5
 800bbf8:	0800bca5 	.word	0x0800bca5
 800bbfc:	0800bc0d 	.word	0x0800bc0d
 800bc00:	0800bc51 	.word	0x0800bc51
 800bc04:	0800bca5 	.word	0x0800bca5
 800bc08:	0800bca5 	.word	0x0800bca5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	461a      	mov	r2, r3
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	3301      	adds	r3, #1
 800bc16:	781b      	ldrb	r3, [r3, #0]
 800bc18:	021b      	lsls	r3, r3, #8
 800bc1a:	431a      	orrs	r2, r3
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	3302      	adds	r3, #2
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	041b      	lsls	r3, r3, #16
 800bc24:	431a      	orrs	r2, r3
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	3303      	adds	r3, #3
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	061b      	lsls	r3, r3, #24
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	461a      	mov	r2, r3
 800bc32:	4b20      	ldr	r3, [pc, #128]	@ (800bcb4 <CDC_Control_FS+0x158>)
 800bc34:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	791a      	ldrb	r2, [r3, #4]
 800bc3a:	4b1e      	ldr	r3, [pc, #120]	@ (800bcb4 <CDC_Control_FS+0x158>)
 800bc3c:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	795a      	ldrb	r2, [r3, #5]
 800bc42:	4b1c      	ldr	r3, [pc, #112]	@ (800bcb4 <CDC_Control_FS+0x158>)
 800bc44:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	799a      	ldrb	r2, [r3, #6]
 800bc4a:	4b1a      	ldr	r3, [pc, #104]	@ (800bcb4 <CDC_Control_FS+0x158>)
 800bc4c:	719a      	strb	r2, [r3, #6]
    break;
 800bc4e:	e02a      	b.n	800bca6 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800bc50:	4b18      	ldr	r3, [pc, #96]	@ (800bcb4 <CDC_Control_FS+0x158>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	b2da      	uxtb	r2, r3
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800bc5a:	4b16      	ldr	r3, [pc, #88]	@ (800bcb4 <CDC_Control_FS+0x158>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	0a1a      	lsrs	r2, r3, #8
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	3301      	adds	r3, #1
 800bc64:	b2d2      	uxtb	r2, r2
 800bc66:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800bc68:	4b12      	ldr	r3, [pc, #72]	@ (800bcb4 <CDC_Control_FS+0x158>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	0c1a      	lsrs	r2, r3, #16
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	3302      	adds	r3, #2
 800bc72:	b2d2      	uxtb	r2, r2
 800bc74:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800bc76:	4b0f      	ldr	r3, [pc, #60]	@ (800bcb4 <CDC_Control_FS+0x158>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	0e1a      	lsrs	r2, r3, #24
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	3303      	adds	r3, #3
 800bc80:	b2d2      	uxtb	r2, r2
 800bc82:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	3304      	adds	r3, #4
 800bc88:	4a0a      	ldr	r2, [pc, #40]	@ (800bcb4 <CDC_Control_FS+0x158>)
 800bc8a:	7912      	ldrb	r2, [r2, #4]
 800bc8c:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	3305      	adds	r3, #5
 800bc92:	4a08      	ldr	r2, [pc, #32]	@ (800bcb4 <CDC_Control_FS+0x158>)
 800bc94:	7952      	ldrb	r2, [r2, #5]
 800bc96:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	3306      	adds	r3, #6
 800bc9c:	4a05      	ldr	r2, [pc, #20]	@ (800bcb4 <CDC_Control_FS+0x158>)
 800bc9e:	7992      	ldrb	r2, [r2, #6]
 800bca0:	701a      	strb	r2, [r3, #0]
    break;
 800bca2:	e000      	b.n	800bca6 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bca4:	bf00      	nop
  }

  return (USBD_OK);
 800bca6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr
 800bcb4:	200000a8 	.word	0x200000a8

0800bcb8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b082      	sub	sp, #8
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800bcc2:	4b0b      	ldr	r3, [pc, #44]	@ (800bcf0 <CDC_Receive_FS+0x38>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d006      	beq.n	800bcd8 <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800bcca:	4b09      	ldr	r3, [pc, #36]	@ (800bcf0 <CDC_Receive_FS+0x38>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	683a      	ldr	r2, [r7, #0]
 800bcd0:	6812      	ldr	r2, [r2, #0]
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bcd8:	6879      	ldr	r1, [r7, #4]
 800bcda:	4806      	ldr	r0, [pc, #24]	@ (800bcf4 <CDC_Receive_FS+0x3c>)
 800bcdc:	f7fe fb3e 	bl	800a35c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bce0:	4804      	ldr	r0, [pc, #16]	@ (800bcf4 <CDC_Receive_FS+0x3c>)
 800bce2:	f7fe fb99 	bl	800a418 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800bce6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3708      	adds	r7, #8
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	20001060 	.word	0x20001060
 800bcf4:	20000984 	.word	0x20000984

0800bcf8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	460b      	mov	r3, r1
 800bd02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bd04:	2300      	movs	r3, #0
 800bd06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bd08:	4b0d      	ldr	r3, [pc, #52]	@ (800bd40 <CDC_Transmit_FS+0x48>)
 800bd0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bd0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d001      	beq.n	800bd1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	e00b      	b.n	800bd36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bd1e:	887b      	ldrh	r3, [r7, #2]
 800bd20:	461a      	mov	r2, r3
 800bd22:	6879      	ldr	r1, [r7, #4]
 800bd24:	4806      	ldr	r0, [pc, #24]	@ (800bd40 <CDC_Transmit_FS+0x48>)
 800bd26:	f7fe faf7 	bl	800a318 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bd2a:	4805      	ldr	r0, [pc, #20]	@ (800bd40 <CDC_Transmit_FS+0x48>)
 800bd2c:	f7fe fb34 	bl	800a398 <USBD_CDC_TransmitPacket>
 800bd30:	4603      	mov	r3, r0
 800bd32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3710      	adds	r7, #16
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	20000984 	.word	0x20000984

0800bd44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b087      	sub	sp, #28
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	4613      	mov	r3, r2
 800bd50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bd52:	2300      	movs	r3, #0
 800bd54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bd56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	371c      	adds	r7, #28
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr
	...

0800bd68 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800bd70:	4a04      	ldr	r2, [pc, #16]	@ (800bd84 <CDC_Attach_Rx+0x1c>)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6013      	str	r3, [r2, #0]
}
 800bd76:	bf00      	nop
 800bd78:	370c      	adds	r7, #12
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd80:	4770      	bx	lr
 800bd82:	bf00      	nop
 800bd84:	20001060 	.word	0x20001060

0800bd88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b083      	sub	sp, #12
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	4603      	mov	r3, r0
 800bd90:	6039      	str	r1, [r7, #0]
 800bd92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	2212      	movs	r2, #18
 800bd98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bd9a:	4b03      	ldr	r3, [pc, #12]	@ (800bda8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr
 800bda8:	200000e0 	.word	0x200000e0

0800bdac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b083      	sub	sp, #12
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	6039      	str	r1, [r7, #0]
 800bdb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	2204      	movs	r2, #4
 800bdbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bdbe:	4b03      	ldr	r3, [pc, #12]	@ (800bdcc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr
 800bdcc:	200000f4 	.word	0x200000f4

0800bdd0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	6039      	str	r1, [r7, #0]
 800bdda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bddc:	79fb      	ldrb	r3, [r7, #7]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d105      	bne.n	800bdee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bde2:	683a      	ldr	r2, [r7, #0]
 800bde4:	4907      	ldr	r1, [pc, #28]	@ (800be04 <USBD_FS_ProductStrDescriptor+0x34>)
 800bde6:	4808      	ldr	r0, [pc, #32]	@ (800be08 <USBD_FS_ProductStrDescriptor+0x38>)
 800bde8:	f7ff fd78 	bl	800b8dc <USBD_GetString>
 800bdec:	e004      	b.n	800bdf8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bdee:	683a      	ldr	r2, [r7, #0]
 800bdf0:	4904      	ldr	r1, [pc, #16]	@ (800be04 <USBD_FS_ProductStrDescriptor+0x34>)
 800bdf2:	4805      	ldr	r0, [pc, #20]	@ (800be08 <USBD_FS_ProductStrDescriptor+0x38>)
 800bdf4:	f7ff fd72 	bl	800b8dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdf8:	4b02      	ldr	r3, [pc, #8]	@ (800be04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	20001064 	.word	0x20001064
 800be08:	0800c650 	.word	0x0800c650

0800be0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	4603      	mov	r3, r0
 800be14:	6039      	str	r1, [r7, #0]
 800be16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be18:	683a      	ldr	r2, [r7, #0]
 800be1a:	4904      	ldr	r1, [pc, #16]	@ (800be2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800be1c:	4804      	ldr	r0, [pc, #16]	@ (800be30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be1e:	f7ff fd5d 	bl	800b8dc <USBD_GetString>
  return USBD_StrDesc;
 800be22:	4b02      	ldr	r3, [pc, #8]	@ (800be2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be24:	4618      	mov	r0, r3
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	20001064 	.word	0x20001064
 800be30:	0800c668 	.word	0x0800c668

0800be34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	4603      	mov	r3, r0
 800be3c:	6039      	str	r1, [r7, #0]
 800be3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	221a      	movs	r2, #26
 800be44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be46:	f000 f843 	bl	800bed0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800be4a:	4b02      	ldr	r3, [pc, #8]	@ (800be54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3708      	adds	r7, #8
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	200000f8 	.word	0x200000f8

0800be58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	4603      	mov	r3, r0
 800be60:	6039      	str	r1, [r7, #0]
 800be62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be64:	79fb      	ldrb	r3, [r7, #7]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d105      	bne.n	800be76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be6a:	683a      	ldr	r2, [r7, #0]
 800be6c:	4907      	ldr	r1, [pc, #28]	@ (800be8c <USBD_FS_ConfigStrDescriptor+0x34>)
 800be6e:	4808      	ldr	r0, [pc, #32]	@ (800be90 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be70:	f7ff fd34 	bl	800b8dc <USBD_GetString>
 800be74:	e004      	b.n	800be80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be76:	683a      	ldr	r2, [r7, #0]
 800be78:	4904      	ldr	r1, [pc, #16]	@ (800be8c <USBD_FS_ConfigStrDescriptor+0x34>)
 800be7a:	4805      	ldr	r0, [pc, #20]	@ (800be90 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be7c:	f7ff fd2e 	bl	800b8dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800be80:	4b02      	ldr	r3, [pc, #8]	@ (800be8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800be82:	4618      	mov	r0, r3
 800be84:	3708      	adds	r7, #8
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	20001064 	.word	0x20001064
 800be90:	0800c67c 	.word	0x0800c67c

0800be94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	4603      	mov	r3, r0
 800be9c:	6039      	str	r1, [r7, #0]
 800be9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bea0:	79fb      	ldrb	r3, [r7, #7]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d105      	bne.n	800beb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bea6:	683a      	ldr	r2, [r7, #0]
 800bea8:	4907      	ldr	r1, [pc, #28]	@ (800bec8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800beaa:	4808      	ldr	r0, [pc, #32]	@ (800becc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800beac:	f7ff fd16 	bl	800b8dc <USBD_GetString>
 800beb0:	e004      	b.n	800bebc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800beb2:	683a      	ldr	r2, [r7, #0]
 800beb4:	4904      	ldr	r1, [pc, #16]	@ (800bec8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800beb6:	4805      	ldr	r0, [pc, #20]	@ (800becc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800beb8:	f7ff fd10 	bl	800b8dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bebc:	4b02      	ldr	r3, [pc, #8]	@ (800bec8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
 800bec6:	bf00      	nop
 800bec8:	20001064 	.word	0x20001064
 800becc:	0800c688 	.word	0x0800c688

0800bed0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bed6:	4b0f      	ldr	r3, [pc, #60]	@ (800bf14 <Get_SerialNum+0x44>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bedc:	4b0e      	ldr	r3, [pc, #56]	@ (800bf18 <Get_SerialNum+0x48>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bee2:	4b0e      	ldr	r3, [pc, #56]	@ (800bf1c <Get_SerialNum+0x4c>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bee8:	68fa      	ldr	r2, [r7, #12]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4413      	add	r3, r2
 800beee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d009      	beq.n	800bf0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bef6:	2208      	movs	r2, #8
 800bef8:	4909      	ldr	r1, [pc, #36]	@ (800bf20 <Get_SerialNum+0x50>)
 800befa:	68f8      	ldr	r0, [r7, #12]
 800befc:	f000 f814 	bl	800bf28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf00:	2204      	movs	r2, #4
 800bf02:	4908      	ldr	r1, [pc, #32]	@ (800bf24 <Get_SerialNum+0x54>)
 800bf04:	68b8      	ldr	r0, [r7, #8]
 800bf06:	f000 f80f 	bl	800bf28 <IntToUnicode>
  }
}
 800bf0a:	bf00      	nop
 800bf0c:	3710      	adds	r7, #16
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	1fff7a10 	.word	0x1fff7a10
 800bf18:	1fff7a14 	.word	0x1fff7a14
 800bf1c:	1fff7a18 	.word	0x1fff7a18
 800bf20:	200000fa 	.word	0x200000fa
 800bf24:	2000010a 	.word	0x2000010a

0800bf28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b087      	sub	sp, #28
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	60f8      	str	r0, [r7, #12]
 800bf30:	60b9      	str	r1, [r7, #8]
 800bf32:	4613      	mov	r3, r2
 800bf34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf36:	2300      	movs	r3, #0
 800bf38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	75fb      	strb	r3, [r7, #23]
 800bf3e:	e027      	b.n	800bf90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	0f1b      	lsrs	r3, r3, #28
 800bf44:	2b09      	cmp	r3, #9
 800bf46:	d80b      	bhi.n	800bf60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	0f1b      	lsrs	r3, r3, #28
 800bf4c:	b2da      	uxtb	r2, r3
 800bf4e:	7dfb      	ldrb	r3, [r7, #23]
 800bf50:	005b      	lsls	r3, r3, #1
 800bf52:	4619      	mov	r1, r3
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	440b      	add	r3, r1
 800bf58:	3230      	adds	r2, #48	@ 0x30
 800bf5a:	b2d2      	uxtb	r2, r2
 800bf5c:	701a      	strb	r2, [r3, #0]
 800bf5e:	e00a      	b.n	800bf76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	0f1b      	lsrs	r3, r3, #28
 800bf64:	b2da      	uxtb	r2, r3
 800bf66:	7dfb      	ldrb	r3, [r7, #23]
 800bf68:	005b      	lsls	r3, r3, #1
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	68bb      	ldr	r3, [r7, #8]
 800bf6e:	440b      	add	r3, r1
 800bf70:	3237      	adds	r2, #55	@ 0x37
 800bf72:	b2d2      	uxtb	r2, r2
 800bf74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	011b      	lsls	r3, r3, #4
 800bf7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf7c:	7dfb      	ldrb	r3, [r7, #23]
 800bf7e:	005b      	lsls	r3, r3, #1
 800bf80:	3301      	adds	r3, #1
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	4413      	add	r3, r2
 800bf86:	2200      	movs	r2, #0
 800bf88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf8a:	7dfb      	ldrb	r3, [r7, #23]
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	75fb      	strb	r3, [r7, #23]
 800bf90:	7dfa      	ldrb	r2, [r7, #23]
 800bf92:	79fb      	ldrb	r3, [r7, #7]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d3d3      	bcc.n	800bf40 <IntToUnicode+0x18>
  }
}
 800bf98:	bf00      	nop
 800bf9a:	bf00      	nop
 800bf9c:	371c      	adds	r7, #28
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
	...

0800bfa8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b08a      	sub	sp, #40	@ 0x28
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bfb0:	f107 0314 	add.w	r3, r7, #20
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	601a      	str	r2, [r3, #0]
 800bfb8:	605a      	str	r2, [r3, #4]
 800bfba:	609a      	str	r2, [r3, #8]
 800bfbc:	60da      	str	r2, [r3, #12]
 800bfbe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bfc8:	d13a      	bne.n	800c040 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bfca:	2300      	movs	r3, #0
 800bfcc:	613b      	str	r3, [r7, #16]
 800bfce:	4b1e      	ldr	r3, [pc, #120]	@ (800c048 <HAL_PCD_MspInit+0xa0>)
 800bfd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfd2:	4a1d      	ldr	r2, [pc, #116]	@ (800c048 <HAL_PCD_MspInit+0xa0>)
 800bfd4:	f043 0301 	orr.w	r3, r3, #1
 800bfd8:	6313      	str	r3, [r2, #48]	@ 0x30
 800bfda:	4b1b      	ldr	r3, [pc, #108]	@ (800c048 <HAL_PCD_MspInit+0xa0>)
 800bfdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfde:	f003 0301 	and.w	r3, r3, #1
 800bfe2:	613b      	str	r3, [r7, #16]
 800bfe4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bfe6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bfea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfec:	2302      	movs	r3, #2
 800bfee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bff0:	2300      	movs	r3, #0
 800bff2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bff4:	2303      	movs	r3, #3
 800bff6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bff8:	230a      	movs	r3, #10
 800bffa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bffc:	f107 0314 	add.w	r3, r7, #20
 800c000:	4619      	mov	r1, r3
 800c002:	4812      	ldr	r0, [pc, #72]	@ (800c04c <HAL_PCD_MspInit+0xa4>)
 800c004:	f7f7 f8ce 	bl	80031a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c008:	4b0f      	ldr	r3, [pc, #60]	@ (800c048 <HAL_PCD_MspInit+0xa0>)
 800c00a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c00c:	4a0e      	ldr	r2, [pc, #56]	@ (800c048 <HAL_PCD_MspInit+0xa0>)
 800c00e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c012:	6353      	str	r3, [r2, #52]	@ 0x34
 800c014:	2300      	movs	r3, #0
 800c016:	60fb      	str	r3, [r7, #12]
 800c018:	4b0b      	ldr	r3, [pc, #44]	@ (800c048 <HAL_PCD_MspInit+0xa0>)
 800c01a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c01c:	4a0a      	ldr	r2, [pc, #40]	@ (800c048 <HAL_PCD_MspInit+0xa0>)
 800c01e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c022:	6453      	str	r3, [r2, #68]	@ 0x44
 800c024:	4b08      	ldr	r3, [pc, #32]	@ (800c048 <HAL_PCD_MspInit+0xa0>)
 800c026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c028:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c02c:	60fb      	str	r3, [r7, #12]
 800c02e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c030:	2200      	movs	r2, #0
 800c032:	2100      	movs	r1, #0
 800c034:	2043      	movs	r0, #67	@ 0x43
 800c036:	f7f6 fcd2 	bl	80029de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c03a:	2043      	movs	r0, #67	@ 0x43
 800c03c:	f7f6 fceb 	bl	8002a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c040:	bf00      	nop
 800c042:	3728      	adds	r7, #40	@ 0x28
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}
 800c048:	40023800 	.word	0x40023800
 800c04c:	40020000 	.word	0x40020000

0800c050 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c064:	4619      	mov	r1, r3
 800c066:	4610      	mov	r0, r2
 800c068:	f7fe fabf 	bl	800a5ea <USBD_LL_SetupStage>
}
 800c06c:	bf00      	nop
 800c06e:	3708      	adds	r7, #8
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	460b      	mov	r3, r1
 800c07e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c086:	78fa      	ldrb	r2, [r7, #3]
 800c088:	6879      	ldr	r1, [r7, #4]
 800c08a:	4613      	mov	r3, r2
 800c08c:	00db      	lsls	r3, r3, #3
 800c08e:	4413      	add	r3, r2
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	440b      	add	r3, r1
 800c094:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	78fb      	ldrb	r3, [r7, #3]
 800c09c:	4619      	mov	r1, r3
 800c09e:	f7fe faf9 	bl	800a694 <USBD_LL_DataOutStage>
}
 800c0a2:	bf00      	nop
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}

0800c0aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0aa:	b580      	push	{r7, lr}
 800c0ac:	b082      	sub	sp, #8
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c0bc:	78fa      	ldrb	r2, [r7, #3]
 800c0be:	6879      	ldr	r1, [r7, #4]
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	00db      	lsls	r3, r3, #3
 800c0c4:	4413      	add	r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	440b      	add	r3, r1
 800c0ca:	3320      	adds	r3, #32
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	78fb      	ldrb	r3, [r7, #3]
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	f7fe fb9b 	bl	800a80c <USBD_LL_DataInStage>
}
 800c0d6:	bf00      	nop
 800c0d8:	3708      	adds	r7, #8
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b082      	sub	sp, #8
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7fe fcdf 	bl	800aab0 <USBD_LL_SOF>
}
 800c0f2:	bf00      	nop
 800c0f4:	3708      	adds	r7, #8
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b084      	sub	sp, #16
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c102:	2301      	movs	r3, #1
 800c104:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	79db      	ldrb	r3, [r3, #7]
 800c10a:	2b02      	cmp	r3, #2
 800c10c:	d001      	beq.n	800c112 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c10e:	f7f4 fe0b 	bl	8000d28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c118:	7bfa      	ldrb	r2, [r7, #15]
 800c11a:	4611      	mov	r1, r2
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fe fc83 	bl	800aa28 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c128:	4618      	mov	r0, r3
 800c12a:	f7fe fc2a 	bl	800a982 <USBD_LL_Reset>
}
 800c12e:	bf00      	nop
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
	...

0800c138 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c146:	4618      	mov	r0, r3
 800c148:	f7fe fc7e 	bl	800aa48 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	6812      	ldr	r2, [r2, #0]
 800c15a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c15e:	f043 0301 	orr.w	r3, r3, #1
 800c162:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	7adb      	ldrb	r3, [r3, #11]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d005      	beq.n	800c178 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c16c:	4b04      	ldr	r3, [pc, #16]	@ (800c180 <HAL_PCD_SuspendCallback+0x48>)
 800c16e:	691b      	ldr	r3, [r3, #16]
 800c170:	4a03      	ldr	r2, [pc, #12]	@ (800c180 <HAL_PCD_SuspendCallback+0x48>)
 800c172:	f043 0306 	orr.w	r3, r3, #6
 800c176:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c178:	bf00      	nop
 800c17a:	3708      	adds	r7, #8
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}
 800c180:	e000ed00 	.word	0xe000ed00

0800c184 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c192:	4618      	mov	r0, r3
 800c194:	f7fe fc74 	bl	800aa80 <USBD_LL_Resume>
}
 800c198:	bf00      	nop
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b082      	sub	sp, #8
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	460b      	mov	r3, r1
 800c1aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1b2:	78fa      	ldrb	r2, [r7, #3]
 800c1b4:	4611      	mov	r1, r2
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fe fccc 	bl	800ab54 <USBD_LL_IsoOUTIncomplete>
}
 800c1bc:	bf00      	nop
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1d6:	78fa      	ldrb	r2, [r7, #3]
 800c1d8:	4611      	mov	r1, r2
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7fe fc88 	bl	800aaf0 <USBD_LL_IsoINIncomplete>
}
 800c1e0:	bf00      	nop
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fe fcde 	bl	800abb8 <USBD_LL_DevConnected>
}
 800c1fc:	bf00      	nop
 800c1fe:	3708      	adds	r7, #8
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b082      	sub	sp, #8
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c212:	4618      	mov	r0, r3
 800c214:	f7fe fcdb 	bl	800abce <USBD_LL_DevDisconnected>
}
 800c218:	bf00      	nop
 800c21a:	3708      	adds	r7, #8
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b082      	sub	sp, #8
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d13c      	bne.n	800c2aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c230:	4a20      	ldr	r2, [pc, #128]	@ (800c2b4 <USBD_LL_Init+0x94>)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4a1e      	ldr	r2, [pc, #120]	@ (800c2b4 <USBD_LL_Init+0x94>)
 800c23c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c240:	4b1c      	ldr	r3, [pc, #112]	@ (800c2b4 <USBD_LL_Init+0x94>)
 800c242:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c246:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c248:	4b1a      	ldr	r3, [pc, #104]	@ (800c2b4 <USBD_LL_Init+0x94>)
 800c24a:	2204      	movs	r2, #4
 800c24c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c24e:	4b19      	ldr	r3, [pc, #100]	@ (800c2b4 <USBD_LL_Init+0x94>)
 800c250:	2202      	movs	r2, #2
 800c252:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c254:	4b17      	ldr	r3, [pc, #92]	@ (800c2b4 <USBD_LL_Init+0x94>)
 800c256:	2200      	movs	r2, #0
 800c258:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c25a:	4b16      	ldr	r3, [pc, #88]	@ (800c2b4 <USBD_LL_Init+0x94>)
 800c25c:	2202      	movs	r2, #2
 800c25e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c260:	4b14      	ldr	r3, [pc, #80]	@ (800c2b4 <USBD_LL_Init+0x94>)
 800c262:	2200      	movs	r2, #0
 800c264:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c266:	4b13      	ldr	r3, [pc, #76]	@ (800c2b4 <USBD_LL_Init+0x94>)
 800c268:	2200      	movs	r2, #0
 800c26a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c26c:	4b11      	ldr	r3, [pc, #68]	@ (800c2b4 <USBD_LL_Init+0x94>)
 800c26e:	2200      	movs	r2, #0
 800c270:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c272:	4b10      	ldr	r3, [pc, #64]	@ (800c2b4 <USBD_LL_Init+0x94>)
 800c274:	2200      	movs	r2, #0
 800c276:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c278:	4b0e      	ldr	r3, [pc, #56]	@ (800c2b4 <USBD_LL_Init+0x94>)
 800c27a:	2200      	movs	r2, #0
 800c27c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c27e:	480d      	ldr	r0, [pc, #52]	@ (800c2b4 <USBD_LL_Init+0x94>)
 800c280:	f7f9 fd44 	bl	8005d0c <HAL_PCD_Init>
 800c284:	4603      	mov	r3, r0
 800c286:	2b00      	cmp	r3, #0
 800c288:	d001      	beq.n	800c28e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c28a:	f7f4 fd4d 	bl	8000d28 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c28e:	2180      	movs	r1, #128	@ 0x80
 800c290:	4808      	ldr	r0, [pc, #32]	@ (800c2b4 <USBD_LL_Init+0x94>)
 800c292:	f7fa ff70 	bl	8007176 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c296:	2240      	movs	r2, #64	@ 0x40
 800c298:	2100      	movs	r1, #0
 800c29a:	4806      	ldr	r0, [pc, #24]	@ (800c2b4 <USBD_LL_Init+0x94>)
 800c29c:	f7fa ff24 	bl	80070e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c2a0:	2280      	movs	r2, #128	@ 0x80
 800c2a2:	2101      	movs	r1, #1
 800c2a4:	4803      	ldr	r0, [pc, #12]	@ (800c2b4 <USBD_LL_Init+0x94>)
 800c2a6:	f7fa ff1f 	bl	80070e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c2aa:	2300      	movs	r3, #0
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3708      	adds	r7, #8
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	20001264 	.word	0x20001264

0800c2b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7f9 fe2b 	bl	8005f2a <HAL_PCD_Start>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2d8:	7bfb      	ldrb	r3, [r7, #15]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f000 f942 	bl	800c564 <USBD_Get_USB_Status>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3710      	adds	r7, #16
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}

0800c2ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c2ee:	b580      	push	{r7, lr}
 800c2f0:	b084      	sub	sp, #16
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
 800c2f6:	4608      	mov	r0, r1
 800c2f8:	4611      	mov	r1, r2
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	70fb      	strb	r3, [r7, #3]
 800c300:	460b      	mov	r3, r1
 800c302:	70bb      	strb	r3, [r7, #2]
 800c304:	4613      	mov	r3, r2
 800c306:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c308:	2300      	movs	r3, #0
 800c30a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c30c:	2300      	movs	r3, #0
 800c30e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c316:	78bb      	ldrb	r3, [r7, #2]
 800c318:	883a      	ldrh	r2, [r7, #0]
 800c31a:	78f9      	ldrb	r1, [r7, #3]
 800c31c:	f7fa faff 	bl	800691e <HAL_PCD_EP_Open>
 800c320:	4603      	mov	r3, r0
 800c322:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c324:	7bfb      	ldrb	r3, [r7, #15]
 800c326:	4618      	mov	r0, r3
 800c328:	f000 f91c 	bl	800c564 <USBD_Get_USB_Status>
 800c32c:	4603      	mov	r3, r0
 800c32e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c330:	7bbb      	ldrb	r3, [r7, #14]
}
 800c332:	4618      	mov	r0, r3
 800c334:	3710      	adds	r7, #16
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c33a:	b580      	push	{r7, lr}
 800c33c:	b084      	sub	sp, #16
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
 800c342:	460b      	mov	r3, r1
 800c344:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c346:	2300      	movs	r3, #0
 800c348:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c34a:	2300      	movs	r3, #0
 800c34c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c354:	78fa      	ldrb	r2, [r7, #3]
 800c356:	4611      	mov	r1, r2
 800c358:	4618      	mov	r0, r3
 800c35a:	f7fa fb4a 	bl	80069f2 <HAL_PCD_EP_Close>
 800c35e:	4603      	mov	r3, r0
 800c360:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c362:	7bfb      	ldrb	r3, [r7, #15]
 800c364:	4618      	mov	r0, r3
 800c366:	f000 f8fd 	bl	800c564 <USBD_Get_USB_Status>
 800c36a:	4603      	mov	r3, r0
 800c36c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c36e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	460b      	mov	r3, r1
 800c382:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c388:	2300      	movs	r3, #0
 800c38a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c392:	78fa      	ldrb	r2, [r7, #3]
 800c394:	4611      	mov	r1, r2
 800c396:	4618      	mov	r0, r3
 800c398:	f7fa fc02 	bl	8006ba0 <HAL_PCD_EP_SetStall>
 800c39c:	4603      	mov	r3, r0
 800c39e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3a0:	7bfb      	ldrb	r3, [r7, #15]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f000 f8de 	bl	800c564 <USBD_Get_USB_Status>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}

0800c3b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3b6:	b580      	push	{r7, lr}
 800c3b8:	b084      	sub	sp, #16
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	6078      	str	r0, [r7, #4]
 800c3be:	460b      	mov	r3, r1
 800c3c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3d0:	78fa      	ldrb	r2, [r7, #3]
 800c3d2:	4611      	mov	r1, r2
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7fa fc46 	bl	8006c66 <HAL_PCD_EP_ClrStall>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3de:	7bfb      	ldrb	r3, [r7, #15]
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f000 f8bf 	bl	800c564 <USBD_Get_USB_Status>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3710      	adds	r7, #16
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b085      	sub	sp, #20
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c406:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	da0b      	bge.n	800c428 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c410:	78fb      	ldrb	r3, [r7, #3]
 800c412:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c416:	68f9      	ldr	r1, [r7, #12]
 800c418:	4613      	mov	r3, r2
 800c41a:	00db      	lsls	r3, r3, #3
 800c41c:	4413      	add	r3, r2
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	440b      	add	r3, r1
 800c422:	3316      	adds	r3, #22
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	e00b      	b.n	800c440 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c428:	78fb      	ldrb	r3, [r7, #3]
 800c42a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c42e:	68f9      	ldr	r1, [r7, #12]
 800c430:	4613      	mov	r3, r2
 800c432:	00db      	lsls	r3, r3, #3
 800c434:	4413      	add	r3, r2
 800c436:	009b      	lsls	r3, r3, #2
 800c438:	440b      	add	r3, r1
 800c43a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c43e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c440:	4618      	mov	r0, r3
 800c442:	3714      	adds	r7, #20
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr

0800c44c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	460b      	mov	r3, r1
 800c456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c458:	2300      	movs	r3, #0
 800c45a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c45c:	2300      	movs	r3, #0
 800c45e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c466:	78fa      	ldrb	r2, [r7, #3]
 800c468:	4611      	mov	r1, r2
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7fa fa33 	bl	80068d6 <HAL_PCD_SetAddress>
 800c470:	4603      	mov	r3, r0
 800c472:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c474:	7bfb      	ldrb	r3, [r7, #15]
 800c476:	4618      	mov	r0, r3
 800c478:	f000 f874 	bl	800c564 <USBD_Get_USB_Status>
 800c47c:	4603      	mov	r3, r0
 800c47e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c480:	7bbb      	ldrb	r3, [r7, #14]
}
 800c482:	4618      	mov	r0, r3
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b086      	sub	sp, #24
 800c48e:	af00      	add	r7, sp, #0
 800c490:	60f8      	str	r0, [r7, #12]
 800c492:	607a      	str	r2, [r7, #4]
 800c494:	603b      	str	r3, [r7, #0]
 800c496:	460b      	mov	r3, r1
 800c498:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c49a:	2300      	movs	r3, #0
 800c49c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c4a8:	7af9      	ldrb	r1, [r7, #11]
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	687a      	ldr	r2, [r7, #4]
 800c4ae:	f7fa fb3d 	bl	8006b2c <HAL_PCD_EP_Transmit>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4b6:	7dfb      	ldrb	r3, [r7, #23]
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f000 f853 	bl	800c564 <USBD_Get_USB_Status>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3718      	adds	r7, #24
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b086      	sub	sp, #24
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	607a      	str	r2, [r7, #4]
 800c4d6:	603b      	str	r3, [r7, #0]
 800c4d8:	460b      	mov	r3, r1
 800c4da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c4ea:	7af9      	ldrb	r1, [r7, #11]
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	f7fa fac9 	bl	8006a86 <HAL_PCD_EP_Receive>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4f8:	7dfb      	ldrb	r3, [r7, #23]
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f000 f832 	bl	800c564 <USBD_Get_USB_Status>
 800c500:	4603      	mov	r3, r0
 800c502:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c504:	7dbb      	ldrb	r3, [r7, #22]
}
 800c506:	4618      	mov	r0, r3
 800c508:	3718      	adds	r7, #24
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c50e:	b580      	push	{r7, lr}
 800c510:	b082      	sub	sp, #8
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
 800c516:	460b      	mov	r3, r1
 800c518:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c520:	78fa      	ldrb	r2, [r7, #3]
 800c522:	4611      	mov	r1, r2
 800c524:	4618      	mov	r0, r3
 800c526:	f7fa fae9 	bl	8006afc <HAL_PCD_EP_GetRxCount>
 800c52a:	4603      	mov	r3, r0
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3708      	adds	r7, #8
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c534:	b480      	push	{r7}
 800c536:	b083      	sub	sp, #12
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c53c:	4b03      	ldr	r3, [pc, #12]	@ (800c54c <USBD_static_malloc+0x18>)
}
 800c53e:	4618      	mov	r0, r3
 800c540:	370c      	adds	r7, #12
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	20001748 	.word	0x20001748

0800c550 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c550:	b480      	push	{r7}
 800c552:	b083      	sub	sp, #12
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]

}
 800c558:	bf00      	nop
 800c55a:	370c      	adds	r7, #12
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c564:	b480      	push	{r7}
 800c566:	b085      	sub	sp, #20
 800c568:	af00      	add	r7, sp, #0
 800c56a:	4603      	mov	r3, r0
 800c56c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c56e:	2300      	movs	r3, #0
 800c570:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c572:	79fb      	ldrb	r3, [r7, #7]
 800c574:	2b03      	cmp	r3, #3
 800c576:	d817      	bhi.n	800c5a8 <USBD_Get_USB_Status+0x44>
 800c578:	a201      	add	r2, pc, #4	@ (adr r2, 800c580 <USBD_Get_USB_Status+0x1c>)
 800c57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c57e:	bf00      	nop
 800c580:	0800c591 	.word	0x0800c591
 800c584:	0800c597 	.word	0x0800c597
 800c588:	0800c59d 	.word	0x0800c59d
 800c58c:	0800c5a3 	.word	0x0800c5a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c590:	2300      	movs	r3, #0
 800c592:	73fb      	strb	r3, [r7, #15]
    break;
 800c594:	e00b      	b.n	800c5ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c596:	2303      	movs	r3, #3
 800c598:	73fb      	strb	r3, [r7, #15]
    break;
 800c59a:	e008      	b.n	800c5ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c59c:	2301      	movs	r3, #1
 800c59e:	73fb      	strb	r3, [r7, #15]
    break;
 800c5a0:	e005      	b.n	800c5ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5a2:	2303      	movs	r3, #3
 800c5a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c5a6:	e002      	b.n	800c5ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ac:	bf00      	nop
  }
  return usb_status;
 800c5ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3714      	adds	r7, #20
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <memset>:
 800c5bc:	4402      	add	r2, r0
 800c5be:	4603      	mov	r3, r0
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d100      	bne.n	800c5c6 <memset+0xa>
 800c5c4:	4770      	bx	lr
 800c5c6:	f803 1b01 	strb.w	r1, [r3], #1
 800c5ca:	e7f9      	b.n	800c5c0 <memset+0x4>

0800c5cc <__libc_init_array>:
 800c5cc:	b570      	push	{r4, r5, r6, lr}
 800c5ce:	4d0d      	ldr	r5, [pc, #52]	@ (800c604 <__libc_init_array+0x38>)
 800c5d0:	4c0d      	ldr	r4, [pc, #52]	@ (800c608 <__libc_init_array+0x3c>)
 800c5d2:	1b64      	subs	r4, r4, r5
 800c5d4:	10a4      	asrs	r4, r4, #2
 800c5d6:	2600      	movs	r6, #0
 800c5d8:	42a6      	cmp	r6, r4
 800c5da:	d109      	bne.n	800c5f0 <__libc_init_array+0x24>
 800c5dc:	4d0b      	ldr	r5, [pc, #44]	@ (800c60c <__libc_init_array+0x40>)
 800c5de:	4c0c      	ldr	r4, [pc, #48]	@ (800c610 <__libc_init_array+0x44>)
 800c5e0:	f000 f818 	bl	800c614 <_init>
 800c5e4:	1b64      	subs	r4, r4, r5
 800c5e6:	10a4      	asrs	r4, r4, #2
 800c5e8:	2600      	movs	r6, #0
 800c5ea:	42a6      	cmp	r6, r4
 800c5ec:	d105      	bne.n	800c5fa <__libc_init_array+0x2e>
 800c5ee:	bd70      	pop	{r4, r5, r6, pc}
 800c5f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5f4:	4798      	blx	r3
 800c5f6:	3601      	adds	r6, #1
 800c5f8:	e7ee      	b.n	800c5d8 <__libc_init_array+0xc>
 800c5fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5fe:	4798      	blx	r3
 800c600:	3601      	adds	r6, #1
 800c602:	e7f2      	b.n	800c5ea <__libc_init_array+0x1e>
 800c604:	0800d42c 	.word	0x0800d42c
 800c608:	0800d42c 	.word	0x0800d42c
 800c60c:	0800d42c 	.word	0x0800d42c
 800c610:	0800d430 	.word	0x0800d430

0800c614 <_init>:
 800c614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c616:	bf00      	nop
 800c618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c61a:	bc08      	pop	{r3}
 800c61c:	469e      	mov	lr, r3
 800c61e:	4770      	bx	lr

0800c620 <_fini>:
 800c620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c622:	bf00      	nop
 800c624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c626:	bc08      	pop	{r3}
 800c628:	469e      	mov	lr, r3
 800c62a:	4770      	bx	lr
