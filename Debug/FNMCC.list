
FNMCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096ec  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08009884  08009884  0000a884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098fc  080098fc  0000b130  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080098fc  080098fc  0000a8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009904  08009904  0000b130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009904  08009904  0000a904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009908  08009908  0000a908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000130  20000000  0800990c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000138c  20000130  08009a3c  0000b130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014bc  08009a3c  0000b4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b130  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018975  00000000  00000000  0000b160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cd1  00000000  00000000  00023ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  000277a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001130  00000000  00000000  00028de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005294  00000000  00000000  00029f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce04  00000000  00000000  0002f1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e90d  00000000  00000000  0004bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea8bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e04  00000000  00000000  000ea900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f0704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000130 	.word	0x20000130
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800986c 	.word	0x0800986c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000134 	.word	0x20000134
 80001d4:	0800986c 	.word	0x0800986c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	myFlag.bits.bit1 = 1;
 800050c:	4a0e      	ldr	r2, [pc, #56]	@ (8000548 <HAL_ADC_ConvCpltCallback+0x44>)
 800050e:	7813      	ldrb	r3, [r2, #0]
 8000510:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000514:	7013      	strb	r3, [r2, #0]

	for (int i = 0; i < 8; i++) {
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	e00a      	b.n	8000532 <HAL_ADC_ConvCpltCallback+0x2e>
		adcDataTx[i] = adcData[i];
 800051c:	4a0b      	ldr	r2, [pc, #44]	@ (800054c <HAL_ADC_ConvCpltCallback+0x48>)
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000524:	4a0a      	ldr	r2, [pc, #40]	@ (8000550 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	3301      	adds	r3, #1
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	2b07      	cmp	r3, #7
 8000536:	ddf1      	ble.n	800051c <HAL_ADC_ConvCpltCallback+0x18>
	}
}
 8000538:	bf00      	nop
 800053a:	bf00      	nop
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	200004cc 	.word	0x200004cc
 800054c:	20000294 	.word	0x20000294
 8000550:	200002a4 	.word	0x200002a4

08000554 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0d      	ldr	r2, [pc, #52]	@ (8000598 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d113      	bne.n	800058e <HAL_TIM_PeriodElapsedCallback+0x3a>
		time10ms++;
 8000566:	4b0d      	ldr	r3, [pc, #52]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	3301      	adds	r3, #1
 800056c:	b2da      	uxtb	r2, r3
 800056e:	4b0b      	ldr	r3, [pc, #44]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000570:	701a      	strb	r2, [r3, #0]

		if (time10ms == TO10MS) {
 8000572:	4b0a      	ldr	r3, [pc, #40]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b28      	cmp	r3, #40	@ 0x28
 8000578:	d104      	bne.n	8000584 <HAL_TIM_PeriodElapsedCallback+0x30>
			time10ms = 0;
 800057a:	4b08      	ldr	r3, [pc, #32]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800057c:	2200      	movs	r2, #0
 800057e:	701a      	strb	r2, [r3, #0]
			is10ms();
 8000580:	f000 f8d0 	bl	8000724 <is10ms>
		}

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 8000584:	2208      	movs	r2, #8
 8000586:	4906      	ldr	r1, [pc, #24]	@ (80005a0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000588:	4806      	ldr	r0, [pc, #24]	@ (80005a4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800058a:	f001 f9a1 	bl	80018d0 <HAL_ADC_Start_DMA>

	}
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40010000 	.word	0x40010000
 800059c:	20000290 	.word	0x20000290
 80005a0:	20000294 	.word	0x20000294
 80005a4:	2000014c 	.word	0x2000014c

080005a8 <USBRxData>:

void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 80005a8:	b490      	push	{r4, r7}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]

	myFlag.bits.bit0 = TRUE;
 80005b2:	4a15      	ldr	r2, [pc, #84]	@ (8000608 <USBRxData+0x60>)
 80005b4:	7813      	ldrb	r3, [r2, #0]
 80005b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005ba:	7013      	strb	r3, [r2, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	e018      	b.n	80005f4 <USBRxData+0x4c>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	441a      	add	r2, r3
 80005c8:	4b10      	ldr	r3, [pc, #64]	@ (800060c <USBRxData+0x64>)
 80005ca:	6819      	ldr	r1, [r3, #0]
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <USBRxData+0x64>)
 80005ce:	795b      	ldrb	r3, [r3, #5]
 80005d0:	1c58      	adds	r0, r3, #1
 80005d2:	b2c4      	uxtb	r4, r0
 80005d4:	480d      	ldr	r0, [pc, #52]	@ (800060c <USBRxData+0x64>)
 80005d6:	7144      	strb	r4, [r0, #5]
 80005d8:	440b      	add	r3, r1
 80005da:	7812      	ldrb	r2, [r2, #0]
 80005dc:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 80005de:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <USBRxData+0x64>)
 80005e0:	795a      	ldrb	r2, [r3, #5]
 80005e2:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <USBRxData+0x64>)
 80005e4:	799b      	ldrb	r3, [r3, #6]
 80005e6:	4013      	ands	r3, r2
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <USBRxData+0x64>)
 80005ec:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	3301      	adds	r3, #1
 80005f2:	73fb      	strb	r3, [r7, #15]
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	683a      	ldr	r2, [r7, #0]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d8e2      	bhi.n	80005c2 <USBRxData+0x1a>
	}

}
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bc90      	pop	{r4, r7}
 8000606:	4770      	bx	lr
 8000608:	200004cc 	.word	0x200004cc
 800060c:	200002c0 	.word	0x200002c0

08000610 <USBTask>:

void USBTask(){
 8000610:	b580      	push	{r7, lr}
 8000612:	b0c2      	sub	sp, #264	@ 0x108
 8000614:	af00      	add	r7, sp, #0

	//if(USBRx.indexR != USBRx.indexW){
	if(myFlag.bits.bit0){
 8000616:	4b25      	ldr	r3, [pc, #148]	@ (80006ac <USBTask+0x9c>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d03e      	beq.n	80006a2 <USBTask+0x92>

		myFlag.bits.bit0 = FALSE;
 8000624:	4a21      	ldr	r2, [pc, #132]	@ (80006ac <USBTask+0x9c>)
 8000626:	7813      	ldrb	r3, [r2, #0]
 8000628:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800062c:	7013      	strb	r3, [r2, #0]

		uint8_t sendBuffer[TXBUFSIZE];

		if(decodeHeader(&USBRx))
 800062e:	4820      	ldr	r0, [pc, #128]	@ (80006b0 <USBTask+0xa0>)
 8000630:	f000 fc4e 	bl	8000ed0 <decodeHeader>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <USBTask+0x32>
			decodeCommand(&USBRx, &USBTx);
 800063a:	491e      	ldr	r1, [pc, #120]	@ (80006b4 <USBTask+0xa4>)
 800063c:	481c      	ldr	r0, [pc, #112]	@ (80006b0 <USBTask+0xa0>)
 800063e:	f000 f83b 	bl	80006b8 <decodeCommand>

		for(uint8_t i=0; i<USBTx.bytes;i++){ //Paso limpio, error ultima posición
 8000642:	2300      	movs	r3, #0
 8000644:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000648:	e01d      	b.n	8000686 <USBTask+0x76>
			sendBuffer[i]=USBTx.buff[USBTx.indexData++];
 800064a:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <USBTask+0xa4>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	4b19      	ldr	r3, [pc, #100]	@ (80006b4 <USBTask+0xa4>)
 8000650:	7a1b      	ldrb	r3, [r3, #8]
 8000652:	1c59      	adds	r1, r3, #1
 8000654:	b2c8      	uxtb	r0, r1
 8000656:	4917      	ldr	r1, [pc, #92]	@ (80006b4 <USBTask+0xa4>)
 8000658:	7208      	strb	r0, [r1, #8]
 800065a:	441a      	add	r2, r3
 800065c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000660:	7811      	ldrb	r1, [r2, #0]
 8000662:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000666:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800066a:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 800066c:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <USBTask+0xa4>)
 800066e:	7a1a      	ldrb	r2, [r3, #8]
 8000670:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <USBTask+0xa4>)
 8000672:	799b      	ldrb	r3, [r3, #6]
 8000674:	4013      	ands	r3, r2
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b0e      	ldr	r3, [pc, #56]	@ (80006b4 <USBTask+0xa4>)
 800067a:	721a      	strb	r2, [r3, #8]
		for(uint8_t i=0; i<USBTx.bytes;i++){ //Paso limpio, error ultima posición
 800067c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000680:	3301      	adds	r3, #1
 8000682:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000686:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <USBTask+0xa4>)
 8000688:	79db      	ldrb	r3, [r3, #7]
 800068a:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 800068e:	429a      	cmp	r2, r3
 8000690:	d3db      	bcc.n	800064a <USBTask+0x3a>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 8000692:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <USBTask+0xa4>)
 8000694:	79db      	ldrb	r3, [r3, #7]
 8000696:	461a      	mov	r2, r3
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4611      	mov	r1, r2
 800069c:	4618      	mov	r0, r3
 800069e:	f008 fc57 	bl	8008f50 <CDC_Transmit_FS>
//			if ((CDC_Transmit_FS(sendBuffer, nBytesTx) == USBD_OK)) //&USBTx.buff[USBTx.indexData] pos inicio datos
//				nBytesTx = 0;
//		}
	}

}
 80006a2:	bf00      	nop
 80006a4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	200004cc 	.word	0x200004cc
 80006b0:	200002c0 	.word	0x200002c0
 80006b4:	200002b4 	.word	0x200002b4

080006b8 <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
	switch (dataRx->buff[dataRx->indexData]) {
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	7a12      	ldrb	r2, [r2, #8]
 80006ca:	4413      	add	r3, r2
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2bf0      	cmp	r3, #240	@ 0xf0
 80006d0:	d002      	beq.n	80006d8 <decodeCommand+0x20>
 80006d2:	2bf1      	cmp	r3, #241	@ 0xf1
 80006d4:	d010      	beq.n	80006f8 <decodeCommand+0x40>
		break;
	default:
//            putHeaderOnTx(dataTx, (_eCmd)dataRx->buff[dataRx->indexData], 2);
//            putByteOnTx(dataTx,UNKNOWN );
//            putByteOnTx(dataTx, dataTx->chk);
		break;
 80006d6:	e01f      	b.n	8000718 <decodeCommand+0x60>
            putHeaderOnTx(dataTx, ALIVE, 2);
 80006d8:	2202      	movs	r2, #2
 80006da:	21f0      	movs	r1, #240	@ 0xf0
 80006dc:	6838      	ldr	r0, [r7, #0]
 80006de:	f000 fad5 	bl	8000c8c <putHeaderOnTx>
            putByteOnTx(dataTx, ACK);
 80006e2:	210d      	movs	r1, #13
 80006e4:	6838      	ldr	r0, [r7, #0]
 80006e6:	f000 fb80 	bl	8000dea <putByteOnTx>
            putByteOnTx(dataTx, dataTx->chk);
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	7a5b      	ldrb	r3, [r3, #9]
 80006ee:	4619      	mov	r1, r3
 80006f0:	6838      	ldr	r0, [r7, #0]
 80006f2:	f000 fb7a 	bl	8000dea <putByteOnTx>
		break;
 80006f6:	e00f      	b.n	8000718 <decodeCommand+0x60>
            putHeaderOnTx(dataTx, FIRMWARE, 13);
 80006f8:	220d      	movs	r2, #13
 80006fa:	21f1      	movs	r1, #241	@ 0xf1
 80006fc:	6838      	ldr	r0, [r7, #0]
 80006fe:	f000 fac5 	bl	8000c8c <putHeaderOnTx>
            putStrOntx(dataTx, firmware);
 8000702:	4907      	ldr	r1, [pc, #28]	@ (8000720 <decodeCommand+0x68>)
 8000704:	6838      	ldr	r0, [r7, #0]
 8000706:	f000 fb9e 	bl	8000e46 <putStrOntx>
            putByteOnTx(dataTx, dataTx->chk);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	7a5b      	ldrb	r3, [r3, #9]
 800070e:	4619      	mov	r1, r3
 8000710:	6838      	ldr	r0, [r7, #0]
 8000712:	f000 fb6a 	bl	8000dea <putByteOnTx>
		break;
 8000716:	bf00      	nop

	}
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	080098cc 	.word	0x080098cc

08000724 <is10ms>:

void is10ms(){
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	static uint32_t tmo100ms=10; //Time

	tmo100ms--;
 8000728:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <is10ms+0x24>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3b01      	subs	r3, #1
 800072e:	4a06      	ldr	r2, [pc, #24]	@ (8000748 <is10ms+0x24>)
 8000730:	6013      	str	r3, [r2, #0]
	if (tmo100ms == 0) {
 8000732:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <is10ms+0x24>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d104      	bne.n	8000744 <is10ms+0x20>
		tmo100ms = 10;
 800073a:	4b03      	ldr	r3, [pc, #12]	@ (8000748 <is10ms+0x24>)
 800073c:	220a      	movs	r2, #10
 800073e:	601a      	str	r2, [r3, #0]
		heartBeatTask();
 8000740:	f000 f804 	bl	800074c <heartBeatTask>
	}
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000028 	.word	0x20000028

0800074c <heartBeatTask>:

void heartBeatTask(){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	static uint8_t times=0;

	if(~heartBeatMask[0] & (1<<times)) //Add index
 8000750:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <heartBeatTask+0x44>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	43db      	mvns	r3, r3
 8000756:	4a0f      	ldr	r2, [pc, #60]	@ (8000794 <heartBeatTask+0x48>)
 8000758:	7812      	ldrb	r2, [r2, #0]
 800075a:	4611      	mov	r1, r2
 800075c:	2201      	movs	r2, #1
 800075e:	408a      	lsls	r2, r1
 8000760:	4013      	ands	r3, r2
 8000762:	2b00      	cmp	r3, #0
 8000764:	d004      	beq.n	8000770 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 8000766:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800076a:	480b      	ldr	r0, [pc, #44]	@ (8000798 <heartBeatTask+0x4c>)
 800076c:	f002 fa9b 	bl	8002ca6 <HAL_GPIO_TogglePin>

	times++;
 8000770:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <heartBeatTask+0x48>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <heartBeatTask+0x48>)
 800077a:	701a      	strb	r2, [r3, #0]
	times &= 31; //control de times
 800077c:	4b05      	ldr	r3, [pc, #20]	@ (8000794 <heartBeatTask+0x48>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	f003 031f 	and.w	r3, r3, #31
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4b03      	ldr	r3, [pc, #12]	@ (8000794 <heartBeatTask+0x48>)
 8000788:	701a      	strb	r2, [r3, #0]
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000000 	.word	0x20000000
 8000794:	200004cd 	.word	0x200004cd
 8000798:	40020800 	.word	0x40020800

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a0:	f000 feac 	bl	80014fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a4:	f000 f83c 	bl	8000820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a8:	f000 fa0a 	bl	8000bc0 <MX_GPIO_Init>
  MX_DMA_Init();
 80007ac:	f000 f9e8 	bl	8000b80 <MX_DMA_Init>
  MX_ADC1_Init();
 80007b0:	f000 f89e 	bl	80008f0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80007b4:	f000 f950 	bl	8000a58 <MX_I2C1_Init>
  MX_TIM1_Init();
 80007b8:	f000 f97c 	bl	8000ab4 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80007bc:	f008 faae 	bl	8008d1c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 80007c0:	480e      	ldr	r0, [pc, #56]	@ (80007fc <main+0x60>)
 80007c2:	f008 fbfd 	bl	8008fc0 <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1); //timer
 80007c6:	480e      	ldr	r0, [pc, #56]	@ (8000800 <main+0x64>)
 80007c8:	f004 fab2 	bl	8004d30 <HAL_TIM_Base_Start_IT>
//	tmo100ms = 10;
//	tmo1000ms = 25;
//	is10ms = 0;
//	is1000ms = 0;

	myFlag.bytes = 0;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <main+0x68>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 80007d2:	2201      	movs	r2, #1
 80007d4:	2102      	movs	r1, #2
 80007d6:	480c      	ldr	r0, [pc, #48]	@ (8000808 <main+0x6c>)
 80007d8:	f002 fa4c 	bl	8002c74 <HAL_GPIO_WritePin>
	//SSD1306_Init();

//	counter = 0;

	initComm(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 80007dc:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <main+0x70>)
 80007de:	4a0c      	ldr	r2, [pc, #48]	@ (8000810 <main+0x74>)
 80007e0:	490c      	ldr	r1, [pc, #48]	@ (8000814 <main+0x78>)
 80007e2:	480d      	ldr	r0, [pc, #52]	@ (8000818 <main+0x7c>)
 80007e4:	f000 fc72 	bl	80010cc <initComm>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ee:	480b      	ldr	r0, [pc, #44]	@ (800081c <main+0x80>)
 80007f0:	f002 fa40 	bl	8002c74 <HAL_GPIO_WritePin>
//			is1000ms = 0;
//			myFlag.bits.bit1 = 0;
//			CDC_Transmit_FS((uint8_t*) adcDataTx, 16);
//		}

		USBTask();
 80007f4:	f7ff ff0c 	bl	8000610 <USBTask>
 80007f8:	e7fc      	b.n	80007f4 <main+0x58>
 80007fa:	bf00      	nop
 80007fc:	080005a9 	.word	0x080005a9
 8000800:	20000248 	.word	0x20000248
 8000804:	200004cc 	.word	0x200004cc
 8000808:	40020400 	.word	0x40020400
 800080c:	200002cc 	.word	0x200002cc
 8000810:	200003cc 	.word	0x200003cc
 8000814:	200002b4 	.word	0x200002b4
 8000818:	200002c0 	.word	0x200002c0
 800081c:	40020800 	.word	0x40020800

08000820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b094      	sub	sp, #80	@ 0x50
 8000824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000826:	f107 0320 	add.w	r3, r7, #32
 800082a:	2230      	movs	r2, #48	@ 0x30
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f008 fff0 	bl	8009814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	4b27      	ldr	r3, [pc, #156]	@ (80008e8 <SystemClock_Config+0xc8>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084c:	4a26      	ldr	r2, [pc, #152]	@ (80008e8 <SystemClock_Config+0xc8>)
 800084e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000852:	6413      	str	r3, [r2, #64]	@ 0x40
 8000854:	4b24      	ldr	r3, [pc, #144]	@ (80008e8 <SystemClock_Config+0xc8>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <SystemClock_Config+0xcc>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a20      	ldr	r2, [pc, #128]	@ (80008ec <SystemClock_Config+0xcc>)
 800086a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b1e      	ldr	r3, [pc, #120]	@ (80008ec <SystemClock_Config+0xcc>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000880:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000886:	2302      	movs	r3, #2
 8000888:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800088a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800088e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000890:	2319      	movs	r3, #25
 8000892:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000894:	23c0      	movs	r3, #192	@ 0xc0
 8000896:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000898:	2302      	movs	r3, #2
 800089a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800089c:	2304      	movs	r3, #4
 800089e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a0:	f107 0320 	add.w	r3, r7, #32
 80008a4:	4618      	mov	r0, r3
 80008a6:	f003 fdaf 	bl	8004408 <HAL_RCC_OscConfig>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008b0:	f000 f9e6 	bl	8000c80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b4:	230f      	movs	r3, #15
 80008b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b8:	2302      	movs	r3, #2
 80008ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2103      	movs	r1, #3
 80008d0:	4618      	mov	r0, r3
 80008d2:	f004 f811 	bl	80048f8 <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008dc:	f000 f9d0 	bl	8000c80 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3750      	adds	r7, #80	@ 0x50
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008f6:	463b      	mov	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000902:	4b52      	ldr	r3, [pc, #328]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 8000904:	4a52      	ldr	r2, [pc, #328]	@ (8000a50 <MX_ADC1_Init+0x160>)
 8000906:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000908:	4b50      	ldr	r3, [pc, #320]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 800090a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800090e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000910:	4b4e      	ldr	r3, [pc, #312]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000916:	4b4d      	ldr	r3, [pc, #308]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 8000918:	2201      	movs	r2, #1
 800091a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800091c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 800091e:	2200      	movs	r2, #0
 8000920:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000922:	4b4a      	ldr	r3, [pc, #296]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 8000924:	2200      	movs	r2, #0
 8000926:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800092a:	4b48      	ldr	r3, [pc, #288]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 800092c:	2200      	movs	r2, #0
 800092e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000930:	4b46      	ldr	r3, [pc, #280]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 8000932:	4a48      	ldr	r2, [pc, #288]	@ (8000a54 <MX_ADC1_Init+0x164>)
 8000934:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000936:	4b45      	ldr	r3, [pc, #276]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 800093c:	4b43      	ldr	r3, [pc, #268]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 800093e:	2208      	movs	r2, #8
 8000940:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000942:	4b42      	ldr	r3, [pc, #264]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 8000944:	2201      	movs	r2, #1
 8000946:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800094a:	4b40      	ldr	r3, [pc, #256]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 800094c:	2201      	movs	r2, #1
 800094e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000950:	483e      	ldr	r0, [pc, #248]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 8000952:	f000 fe69 	bl	8001628 <HAL_ADC_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800095c:	f000 f990 	bl	8000c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000960:	2300      	movs	r3, #0
 8000962:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000964:	2301      	movs	r3, #1
 8000966:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	4619      	mov	r1, r3
 8000970:	4836      	ldr	r0, [pc, #216]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 8000972:	f001 f8bf 	bl	8001af4 <HAL_ADC_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800097c:	f000 f980 	bl	8000c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000980:	2301      	movs	r3, #1
 8000982:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000984:	2302      	movs	r3, #2
 8000986:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000988:	463b      	mov	r3, r7
 800098a:	4619      	mov	r1, r3
 800098c:	482f      	ldr	r0, [pc, #188]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 800098e:	f001 f8b1 	bl	8001af4 <HAL_ADC_ConfigChannel>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000998:	f000 f972 	bl	8000c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800099c:	2302      	movs	r3, #2
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80009a0:	2303      	movs	r3, #3
 80009a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a4:	463b      	mov	r3, r7
 80009a6:	4619      	mov	r1, r3
 80009a8:	4828      	ldr	r0, [pc, #160]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 80009aa:	f001 f8a3 	bl	8001af4 <HAL_ADC_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80009b4:	f000 f964 	bl	8000c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009b8:	2303      	movs	r3, #3
 80009ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80009bc:	2304      	movs	r3, #4
 80009be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c0:	463b      	mov	r3, r7
 80009c2:	4619      	mov	r1, r3
 80009c4:	4821      	ldr	r0, [pc, #132]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 80009c6:	f001 f895 	bl	8001af4 <HAL_ADC_ConfigChannel>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80009d0:	f000 f956 	bl	8000c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80009d4:	2304      	movs	r3, #4
 80009d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80009d8:	2305      	movs	r3, #5
 80009da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009dc:	463b      	mov	r3, r7
 80009de:	4619      	mov	r1, r3
 80009e0:	481a      	ldr	r0, [pc, #104]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 80009e2:	f001 f887 	bl	8001af4 <HAL_ADC_ConfigChannel>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80009ec:	f000 f948 	bl	8000c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009f0:	2305      	movs	r3, #5
 80009f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80009f4:	2306      	movs	r3, #6
 80009f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f8:	463b      	mov	r3, r7
 80009fa:	4619      	mov	r1, r3
 80009fc:	4813      	ldr	r0, [pc, #76]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 80009fe:	f001 f879 	bl	8001af4 <HAL_ADC_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000a08:	f000 f93a 	bl	8000c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a0c:	2306      	movs	r3, #6
 8000a0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000a10:	2307      	movs	r3, #7
 8000a12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a14:	463b      	mov	r3, r7
 8000a16:	4619      	mov	r1, r3
 8000a18:	480c      	ldr	r0, [pc, #48]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 8000a1a:	f001 f86b 	bl	8001af4 <HAL_ADC_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000a24:	f000 f92c 	bl	8000c80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a28:	2307      	movs	r3, #7
 8000a2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <MX_ADC1_Init+0x15c>)
 8000a36:	f001 f85d 	bl	8001af4 <HAL_ADC_ConfigChannel>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000a40:	f000 f91e 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2000014c 	.word	0x2000014c
 8000a50:	40012000 	.word	0x40012000
 8000a54:	0f000001 	.word	0x0f000001

08000a58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a5c:	4b12      	ldr	r3, [pc, #72]	@ (8000aa8 <MX_I2C1_Init+0x50>)
 8000a5e:	4a13      	ldr	r2, [pc, #76]	@ (8000aac <MX_I2C1_Init+0x54>)
 8000a60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <MX_I2C1_Init+0x50>)
 8000a64:	4a12      	ldr	r2, [pc, #72]	@ (8000ab0 <MX_I2C1_Init+0x58>)
 8000a66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_I2C1_Init+0x50>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <MX_I2C1_Init+0x50>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <MX_I2C1_Init+0x50>)
 8000a76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa8 <MX_I2C1_Init+0x50>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a82:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <MX_I2C1_Init+0x50>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a88:	4b07      	ldr	r3, [pc, #28]	@ (8000aa8 <MX_I2C1_Init+0x50>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a8e:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <MX_I2C1_Init+0x50>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <MX_I2C1_Init+0x50>)
 8000a96:	f002 f921 	bl	8002cdc <HAL_I2C_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aa0:	f000 f8ee 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200001f4 	.word	0x200001f4
 8000aac:	40005400 	.word	0x40005400
 8000ab0:	00061a80 	.word	0x00061a80

08000ab4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	@ 0x30
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aba:	f107 0320 	add.w	r3, r7, #32
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ae0:	4b25      	ldr	r3, [pc, #148]	@ (8000b78 <MX_TIM1_Init+0xc4>)
 8000ae2:	4a26      	ldr	r2, [pc, #152]	@ (8000b7c <MX_TIM1_Init+0xc8>)
 8000ae4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8000ae6:	4b24      	ldr	r3, [pc, #144]	@ (8000b78 <MX_TIM1_Init+0xc4>)
 8000ae8:	225f      	movs	r2, #95	@ 0x5f
 8000aea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aec:	4b22      	ldr	r3, [pc, #136]	@ (8000b78 <MX_TIM1_Init+0xc4>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000af2:	4b21      	ldr	r3, [pc, #132]	@ (8000b78 <MX_TIM1_Init+0xc4>)
 8000af4:	22f9      	movs	r2, #249	@ 0xf9
 8000af6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b78 <MX_TIM1_Init+0xc4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000afe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b78 <MX_TIM1_Init+0xc4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b04:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <MX_TIM1_Init+0xc4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b0a:	481b      	ldr	r0, [pc, #108]	@ (8000b78 <MX_TIM1_Init+0xc4>)
 8000b0c:	f004 f8c0 	bl	8004c90 <HAL_TIM_Base_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000b16:	f000 f8b3 	bl	8000c80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b20:	f107 0320 	add.w	r3, r7, #32
 8000b24:	4619      	mov	r1, r3
 8000b26:	4814      	ldr	r0, [pc, #80]	@ (8000b78 <MX_TIM1_Init+0xc4>)
 8000b28:	f004 fa54 	bl	8004fd4 <HAL_TIM_ConfigClockSource>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000b32:	f000 f8a5 	bl	8000c80 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	4619      	mov	r1, r3
 8000b44:	480c      	ldr	r0, [pc, #48]	@ (8000b78 <MX_TIM1_Init+0xc4>)
 8000b46:	f004 fb0c 	bl	8005162 <HAL_TIM_SlaveConfigSynchro>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000b50:	f000 f896 	bl	8000c80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_TIM1_Init+0xc4>)
 8000b62:	f004 fd1b 	bl	800559c <HAL_TIMEx_MasterConfigSynchronization>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000b6c:	f000 f888 	bl	8000c80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b70:	bf00      	nop
 8000b72:	3730      	adds	r7, #48	@ 0x30
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000248 	.word	0x20000248
 8000b7c:	40010000 	.word	0x40010000

08000b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <MX_DMA_Init+0x3c>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000bbc <MX_DMA_Init+0x3c>)
 8000b90:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b09      	ldr	r3, [pc, #36]	@ (8000bbc <MX_DMA_Init+0x3c>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2038      	movs	r0, #56	@ 0x38
 8000ba8:	f001 fb39 	bl	800221e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bac:	2038      	movs	r0, #56	@ 0x38
 8000bae:	f001 fb52 	bl	8002256 <HAL_NVIC_EnableIRQ>

}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	@ 0x28
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	4b27      	ldr	r3, [pc, #156]	@ (8000c78 <MX_GPIO_Init+0xb8>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a26      	ldr	r2, [pc, #152]	@ (8000c78 <MX_GPIO_Init+0xb8>)
 8000be0:	f043 0304 	orr.w	r3, r3, #4
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b24      	ldr	r3, [pc, #144]	@ (8000c78 <MX_GPIO_Init+0xb8>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	4b20      	ldr	r3, [pc, #128]	@ (8000c78 <MX_GPIO_Init+0xb8>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a1f      	ldr	r2, [pc, #124]	@ (8000c78 <MX_GPIO_Init+0xb8>)
 8000bfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <MX_GPIO_Init+0xb8>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	4b19      	ldr	r3, [pc, #100]	@ (8000c78 <MX_GPIO_Init+0xb8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a18      	ldr	r2, [pc, #96]	@ (8000c78 <MX_GPIO_Init+0xb8>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <MX_GPIO_Init+0xb8>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <MX_GPIO_Init+0xb8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	4a11      	ldr	r2, [pc, #68]	@ (8000c78 <MX_GPIO_Init+0xb8>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <MX_GPIO_Init+0xb8>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c4c:	480b      	ldr	r0, [pc, #44]	@ (8000c7c <MX_GPIO_Init+0xbc>)
 8000c4e:	f002 f811 	bl	8002c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <MX_GPIO_Init+0xbc>)
 8000c6c:	f001 fe7e 	bl	800296c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	@ 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020800 	.word	0x40020800

08000c80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c84:	b672      	cpsid	i
}
 8000c86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <Error_Handler+0x8>

08000c8c <putHeaderOnTx>:


//Function definitions

uint8_t putHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	70fb      	strb	r3, [r7, #3]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 8000c9c:	78bb      	ldrb	r3, [r7, #2]
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	795a      	ldrb	r2, [r3, #5]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	795b      	ldrb	r3, [r3, #5]
 8000cb8:	1c59      	adds	r1, r3, #1
 8000cba:	b2c8      	uxtb	r0, r1
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	7148      	strb	r0, [r1, #5]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	2255      	movs	r2, #85	@ 0x55
 8000cc4:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	795a      	ldrb	r2, [r3, #5]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	799b      	ldrb	r3, [r3, #6]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	795b      	ldrb	r3, [r3, #5]
 8000cde:	1c59      	adds	r1, r3, #1
 8000ce0:	b2c8      	uxtb	r0, r1
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	7148      	strb	r0, [r1, #5]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	224e      	movs	r2, #78	@ 0x4e
 8000cea:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	795a      	ldrb	r2, [r3, #5]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	799b      	ldrb	r3, [r3, #6]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	795b      	ldrb	r3, [r3, #5]
 8000d04:	1c59      	adds	r1, r3, #1
 8000d06:	b2c8      	uxtb	r0, r1
 8000d08:	6879      	ldr	r1, [r7, #4]
 8000d0a:	7148      	strb	r0, [r1, #5]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	2245      	movs	r2, #69	@ 0x45
 8000d10:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	795a      	ldrb	r2, [r3, #5]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	799b      	ldrb	r3, [r3, #6]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	795b      	ldrb	r3, [r3, #5]
 8000d2a:	1c59      	adds	r1, r3, #1
 8000d2c:	b2c8      	uxtb	r0, r1
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	7148      	strb	r0, [r1, #5]
 8000d32:	4413      	add	r3, r2
 8000d34:	2252      	movs	r2, #82	@ 0x52
 8000d36:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	795a      	ldrb	r2, [r3, #5]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	799b      	ldrb	r3, [r3, #6]
 8000d40:	4013      	ands	r3, r2
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	795b      	ldrb	r3, [r3, #5]
 8000d50:	1c59      	adds	r1, r3, #1
 8000d52:	b2c8      	uxtb	r0, r1
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	7148      	strb	r0, [r1, #5]
 8000d58:	4413      	add	r3, r2
 8000d5a:	78ba      	ldrb	r2, [r7, #2]
 8000d5c:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	795a      	ldrb	r2, [r3, #5]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	799b      	ldrb	r3, [r3, #6]
 8000d66:	4013      	ands	r3, r2
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	795b      	ldrb	r3, [r3, #5]
 8000d76:	1c59      	adds	r1, r3, #1
 8000d78:	b2c8      	uxtb	r0, r1
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	7148      	strb	r0, [r1, #5]
 8000d7e:	4413      	add	r3, r2
 8000d80:	223a      	movs	r2, #58	@ 0x3a
 8000d82:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	795a      	ldrb	r2, [r3, #5]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	799b      	ldrb	r3, [r3, #6]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	795b      	ldrb	r3, [r3, #5]
 8000d9c:	1c59      	adds	r1, r3, #1
 8000d9e:	b2c8      	uxtb	r0, r1
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	7148      	strb	r0, [r1, #5]
 8000da4:	4413      	add	r3, r2
 8000da6:	78fa      	ldrb	r2, [r7, #3]
 8000da8:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	795a      	ldrb	r2, [r3, #5]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	799b      	ldrb	r3, [r3, #6]
 8000db2:	4013      	ands	r3, r2
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7a5a      	ldrb	r2, [r3, #9]
 8000dc4:	78b9      	ldrb	r1, [r7, #2]
 8000dc6:	78fb      	ldrb	r3, [r7, #3]
 8000dc8:	404b      	eors	r3, r1
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	4053      	eors	r3, r2
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7a5b      	ldrb	r3, [r3, #9]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <putByteOnTx>:

uint8_t putByteOnTx(_sTx *dataTx, uint8_t byte)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	460b      	mov	r3, r1
 8000df4:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	79db      	ldrb	r3, [r3, #7]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	795b      	ldrb	r3, [r3, #5]
 8000e0a:	1c59      	adds	r1, r3, #1
 8000e0c:	b2c8      	uxtb	r0, r1
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	7148      	strb	r0, [r1, #5]
 8000e12:	4413      	add	r3, r2
 8000e14:	78fa      	ldrb	r2, [r7, #3]
 8000e16:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	795a      	ldrb	r2, [r3, #5]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	799b      	ldrb	r3, [r3, #6]
 8000e20:	4013      	ands	r3, r2
 8000e22:	b2da      	uxtb	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	7a5a      	ldrb	r2, [r3, #9]
 8000e2c:	78fb      	ldrb	r3, [r7, #3]
 8000e2e:	4053      	eors	r3, r2
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	7a5b      	ldrb	r3, [r3, #9]
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr

08000e46 <putStrOntx>:

uint8_t putStrOntx(_sTx *dataTx, const char *str)
{
 8000e46:	b490      	push	{r4, r7}
 8000e48:	b084      	sub	sp, #16
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
 8000e4e:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 8000e54:	e02c      	b.n	8000eb0 <putStrOntx+0x6a>
    	dataTx->bytes++;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	79db      	ldrb	r3, [r3, #7]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	461a      	mov	r2, r3
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	441a      	add	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6819      	ldr	r1, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	795b      	ldrb	r3, [r3, #5]
 8000e74:	1c58      	adds	r0, r3, #1
 8000e76:	b2c4      	uxtb	r4, r0
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	7144      	strb	r4, [r0, #5]
 8000e7c:	440b      	add	r3, r1
 8000e7e:	7812      	ldrb	r2, [r2, #0]
 8000e80:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	795a      	ldrb	r2, [r3, #5]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	799b      	ldrb	r3, [r3, #6]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	73fa      	strb	r2, [r7, #15]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	781a      	ldrb	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	7a5b      	ldrb	r3, [r3, #9]
 8000ea8:	4053      	eors	r3, r2
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	4413      	add	r3, r2
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d1ca      	bne.n	8000e56 <putStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	7a5b      	ldrb	r3, [r3, #9]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc90      	pop	{r4, r7}
 8000ecc:	4770      	bx	lr
	...

08000ed0 <decodeHeader>:
	return getByte;
}


uint8_t decodeHeader(_sTx *dataRx)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	795b      	ldrb	r3, [r3, #5]
 8000ee0:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 8000ee2:	e0e4      	b.n	80010ae <decodeHeader+0x1de>
        switch(header)
 8000ee4:	4b78      	ldr	r3, [pc, #480]	@ (80010c8 <decodeHeader+0x1f8>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b07      	cmp	r3, #7
 8000eea:	f200 80c9 	bhi.w	8001080 <decodeHeader+0x1b0>
 8000eee:	a201      	add	r2, pc, #4	@ (adr r2, 8000ef4 <decodeHeader+0x24>)
 8000ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef4:	08000f15 	.word	0x08000f15
 8000ef8:	08000f2f 	.word	0x08000f2f
 8000efc:	08000f6d 	.word	0x08000f6d
 8000f00:	08000f99 	.word	0x08000f99
 8000f04:	08000fc5 	.word	0x08000fc5
 8000f08:	08000fdb 	.word	0x08000fdb
 8000f0c:	08001081 	.word	0x08001081
 8000f10:	0800103d 	.word	0x0800103d
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	7912      	ldrb	r2, [r2, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b55      	cmp	r3, #85	@ 0x55
 8000f22:	f040 80b1 	bne.w	8001088 <decodeHeader+0x1b8>
                   header = HEADER_N;
 8000f26:	4b68      	ldr	r3, [pc, #416]	@ (80010c8 <decodeHeader+0x1f8>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
                }
            break;
 8000f2c:	e0ac      	b.n	8001088 <decodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	7912      	ldrb	r2, [r2, #4]
 8000f36:	4413      	add	r3, r2
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b4e      	cmp	r3, #78	@ 0x4e
 8000f3c:	d103      	bne.n	8000f46 <decodeHeader+0x76>
                    header = HEADER_E;
 8000f3e:	4b62      	ldr	r3, [pc, #392]	@ (80010c8 <decodeHeader+0x1f8>)
 8000f40:	2202      	movs	r2, #2
 8000f42:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 8000f44:	e0a2      	b.n	800108c <decodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	7912      	ldrb	r2, [r2, #4]
 8000f4e:	4413      	add	r3, r2
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b55      	cmp	r3, #85	@ 0x55
 8000f54:	f000 809a 	beq.w	800108c <decodeHeader+0x1bc>
                    	header = HEADER_U;
 8000f58:	4b5b      	ldr	r3, [pc, #364]	@ (80010c8 <decodeHeader+0x1f8>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	791b      	ldrb	r3, [r3, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	b2da      	uxtb	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	711a      	strb	r2, [r3, #4]
            break;
 8000f6a:	e08f      	b.n	800108c <decodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	7912      	ldrb	r2, [r2, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b45      	cmp	r3, #69	@ 0x45
 8000f7a:	d103      	bne.n	8000f84 <decodeHeader+0xb4>
                    header = HEADER_R;
 8000f7c:	4b52      	ldr	r3, [pc, #328]	@ (80010c8 <decodeHeader+0x1f8>)
 8000f7e:	2203      	movs	r2, #3
 8000f80:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8000f82:	e086      	b.n	8001092 <decodeHeader+0x1c2>
                    header = HEADER_U;
 8000f84:	4b50      	ldr	r3, [pc, #320]	@ (80010c8 <decodeHeader+0x1f8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	791b      	ldrb	r3, [r3, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	711a      	strb	r2, [r3, #4]
            break;
 8000f96:	e07c      	b.n	8001092 <decodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	7912      	ldrb	r2, [r2, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b52      	cmp	r3, #82	@ 0x52
 8000fa6:	d103      	bne.n	8000fb0 <decodeHeader+0xe0>
                    header = NBYTES;
 8000fa8:	4b47      	ldr	r3, [pc, #284]	@ (80010c8 <decodeHeader+0x1f8>)
 8000faa:	2204      	movs	r2, #4
 8000fac:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8000fae:	e070      	b.n	8001092 <decodeHeader+0x1c2>
                    header = HEADER_U;
 8000fb0:	4b45      	ldr	r3, [pc, #276]	@ (80010c8 <decodeHeader+0x1f8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	791b      	ldrb	r3, [r3, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	b2da      	uxtb	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	711a      	strb	r2, [r3, #4]
            break;
 8000fc2:	e066      	b.n	8001092 <decodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	7912      	ldrb	r2, [r2, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 8000fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80010c8 <decodeHeader+0x1f8>)
 8000fd4:	2205      	movs	r2, #5
 8000fd6:	701a      	strb	r2, [r3, #0]
            break;
 8000fd8:	e05b      	b.n	8001092 <decodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	7912      	ldrb	r2, [r2, #4]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b3a      	cmp	r3, #58	@ 0x3a
 8000fe8:	d11e      	bne.n	8001028 <decodeHeader+0x158>
                    header = PAYLOAD;
 8000fea:	4b37      	ldr	r3, [pc, #220]	@ (80010c8 <decodeHeader+0x1f8>)
 8000fec:	2207      	movs	r2, #7
 8000fee:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	791b      	ldrb	r3, [r3, #4]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7a1a      	ldrb	r2, [r3, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	799b      	ldrb	r3, [r3, #6]
 8001004:	4013      	ands	r3, r2
 8001006:	b2da      	uxtb	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7a5a      	ldrb	r2, [r3, #9]
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	4053      	eors	r3, r2
 800101a:	b2db      	uxtb	r3, r3
 800101c:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8001020:	b2da      	uxtb	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8001026:	e034      	b.n	8001092 <decodeHeader+0x1c2>
                    header = HEADER_U;
 8001028:	4b27      	ldr	r3, [pc, #156]	@ (80010c8 <decodeHeader+0x1f8>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	791b      	ldrb	r3, [r3, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	b2da      	uxtb	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	711a      	strb	r2, [r3, #4]
            break;
 800103a:	e02a      	b.n	8001092 <decodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	3b01      	subs	r3, #1
 8001040:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d00c      	beq.n	8001062 <decodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7a5a      	ldrb	r2, [r3, #9]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6879      	ldr	r1, [r7, #4]
 8001052:	7909      	ldrb	r1, [r1, #4]
 8001054:	440b      	add	r3, r1
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4053      	eors	r3, r2
 800105a:	b2da      	uxtb	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 8001060:	e016      	b.n	8001090 <decodeHeader+0x1c0>
                    header = HEADER_U;
 8001062:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <decodeHeader+0x1f8>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	7912      	ldrb	r2, [r2, #4]
 8001070:	4413      	add	r3, r2
 8001072:	781a      	ldrb	r2, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	7a5b      	ldrb	r3, [r3, #9]
 8001078:	429a      	cmp	r2, r3
 800107a:	d109      	bne.n	8001090 <decodeHeader+0x1c0>
                        return TRUE;
 800107c:	2301      	movs	r3, #1
 800107e:	e01d      	b.n	80010bc <decodeHeader+0x1ec>
            default:
                header = HEADER_U;
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <decodeHeader+0x1f8>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
            break;
 8001086:	e004      	b.n	8001092 <decodeHeader+0x1c2>
            break;
 8001088:	bf00      	nop
 800108a:	e002      	b.n	8001092 <decodeHeader+0x1c2>
            break;
 800108c:	bf00      	nop
 800108e:	e000      	b.n	8001092 <decodeHeader+0x1c2>
            break;
 8001090:	bf00      	nop
        }
        dataRx->indexR++;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	791b      	ldrb	r3, [r3, #4]
 8001096:	3301      	adds	r3, #1
 8001098:	b2da      	uxtb	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	791a      	ldrb	r2, [r3, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	799b      	ldrb	r3, [r3, #6]
 80010a6:	4013      	ands	r3, r2
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	791b      	ldrb	r3, [r3, #4]
 80010b2:	7bba      	ldrb	r2, [r7, #14]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	f47f af15 	bne.w	8000ee4 <decodeHeader+0x14>
    }
    return FALSE;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	200004ce 	.word	0x200004ce

080010cc <initComm>:

void initComm(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	603b      	str	r3, [r7, #0]
    //INICIALIZAMOS VARIABLES
	Rx->buff = (uint8_t *)buffRx;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2200      	movs	r2, #0
 80010e4:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2200      	movs	r2, #0
 80010ea:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	2200      	movs	r2, #0
 80010f0:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	2200      	movs	r2, #0
 80010f6:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	22ff      	movs	r2, #255	@ 0xff
 80010fc:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2200      	movs	r2, #0
 8001102:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	2200      	movs	r2, #0
 800110e:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	2200      	movs	r2, #0
 8001114:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	2200      	movs	r2, #0
 800111a:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2200      	movs	r2, #0
 8001120:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	22ff      	movs	r2, #255	@ 0xff
 8001126:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	2200      	movs	r2, #0
 800112c:	725a      	strb	r2, [r3, #9]

}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <HAL_MspInit+0x4c>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114a:	4a0f      	ldr	r2, [pc, #60]	@ (8001188 <HAL_MspInit+0x4c>)
 800114c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001150:	6453      	str	r3, [r2, #68]	@ 0x44
 8001152:	4b0d      	ldr	r3, [pc, #52]	@ (8001188 <HAL_MspInit+0x4c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <HAL_MspInit+0x4c>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001166:	4a08      	ldr	r2, [pc, #32]	@ (8001188 <HAL_MspInit+0x4c>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800116c:	6413      	str	r3, [r2, #64]	@ 0x40
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_MspInit+0x4c>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800

0800118c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	@ 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a32      	ldr	r2, [pc, #200]	@ (8001274 <HAL_ADC_MspInit+0xe8>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d15e      	bne.n	800126c <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	4b31      	ldr	r3, [pc, #196]	@ (8001278 <HAL_ADC_MspInit+0xec>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	4a30      	ldr	r2, [pc, #192]	@ (8001278 <HAL_ADC_MspInit+0xec>)
 80011b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80011be:	4b2e      	ldr	r3, [pc, #184]	@ (8001278 <HAL_ADC_MspInit+0xec>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001278 <HAL_ADC_MspInit+0xec>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a29      	ldr	r2, [pc, #164]	@ (8001278 <HAL_ADC_MspInit+0xec>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b27      	ldr	r3, [pc, #156]	@ (8001278 <HAL_ADC_MspInit+0xec>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011e6:	23ff      	movs	r3, #255	@ 0xff
 80011e8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ea:	2303      	movs	r3, #3
 80011ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4820      	ldr	r0, [pc, #128]	@ (800127c <HAL_ADC_MspInit+0xf0>)
 80011fa:	f001 fbb7 	bl	800296c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011fe:	4b20      	ldr	r3, [pc, #128]	@ (8001280 <HAL_ADC_MspInit+0xf4>)
 8001200:	4a20      	ldr	r2, [pc, #128]	@ (8001284 <HAL_ADC_MspInit+0xf8>)
 8001202:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001204:	4b1e      	ldr	r3, [pc, #120]	@ (8001280 <HAL_ADC_MspInit+0xf4>)
 8001206:	2200      	movs	r2, #0
 8001208:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800120a:	4b1d      	ldr	r3, [pc, #116]	@ (8001280 <HAL_ADC_MspInit+0xf4>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001210:	4b1b      	ldr	r3, [pc, #108]	@ (8001280 <HAL_ADC_MspInit+0xf4>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001216:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <HAL_ADC_MspInit+0xf4>)
 8001218:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800121c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800121e:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <HAL_ADC_MspInit+0xf4>)
 8001220:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001224:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001226:	4b16      	ldr	r3, [pc, #88]	@ (8001280 <HAL_ADC_MspInit+0xf4>)
 8001228:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800122c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800122e:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <HAL_ADC_MspInit+0xf4>)
 8001230:	2200      	movs	r2, #0
 8001232:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001234:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <HAL_ADC_MspInit+0xf4>)
 8001236:	2200      	movs	r2, #0
 8001238:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <HAL_ADC_MspInit+0xf4>)
 800123c:	2200      	movs	r2, #0
 800123e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001240:	480f      	ldr	r0, [pc, #60]	@ (8001280 <HAL_ADC_MspInit+0xf4>)
 8001242:	f001 f823 	bl	800228c <HAL_DMA_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800124c:	f7ff fd18 	bl	8000c80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a0b      	ldr	r2, [pc, #44]	@ (8001280 <HAL_ADC_MspInit+0xf4>)
 8001254:	639a      	str	r2, [r3, #56]	@ 0x38
 8001256:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <HAL_ADC_MspInit+0xf4>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2100      	movs	r1, #0
 8001260:	2012      	movs	r0, #18
 8001262:	f000 ffdc 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001266:	2012      	movs	r0, #18
 8001268:	f000 fff5 	bl	8002256 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800126c:	bf00      	nop
 800126e:	3728      	adds	r7, #40	@ 0x28
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40012000 	.word	0x40012000
 8001278:	40023800 	.word	0x40023800
 800127c:	40020000 	.word	0x40020000
 8001280:	20000194 	.word	0x20000194
 8001284:	40026410 	.word	0x40026410

08001288 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	@ 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a19      	ldr	r2, [pc, #100]	@ (800130c <HAL_I2C_MspInit+0x84>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d12b      	bne.n	8001302 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <HAL_I2C_MspInit+0x88>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a17      	ldr	r2, [pc, #92]	@ (8001310 <HAL_I2C_MspInit+0x88>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <HAL_I2C_MspInit+0x88>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012c6:	23c0      	movs	r3, #192	@ 0xc0
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ca:	2312      	movs	r3, #18
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012d6:	2304      	movs	r3, #4
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	480c      	ldr	r0, [pc, #48]	@ (8001314 <HAL_I2C_MspInit+0x8c>)
 80012e2:	f001 fb43 	bl	800296c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <HAL_I2C_MspInit+0x88>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	4a08      	ldr	r2, [pc, #32]	@ (8001310 <HAL_I2C_MspInit+0x88>)
 80012f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <HAL_I2C_MspInit+0x88>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001302:	bf00      	nop
 8001304:	3728      	adds	r7, #40	@ 0x28
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40005400 	.word	0x40005400
 8001310:	40023800 	.word	0x40023800
 8001314:	40020400 	.word	0x40020400

08001318 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a1a      	ldr	r2, [pc, #104]	@ (8001390 <HAL_TIM_Base_MspInit+0x78>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d12d      	bne.n	8001386 <HAL_TIM_Base_MspInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <HAL_TIM_Base_MspInit+0x7c>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001332:	4a18      	ldr	r2, [pc, #96]	@ (8001394 <HAL_TIM_Base_MspInit+0x7c>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6453      	str	r3, [r2, #68]	@ 0x44
 800133a:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <HAL_TIM_Base_MspInit+0x7c>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2018      	movs	r0, #24
 800134c:	f000 ff67 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001350:	2018      	movs	r0, #24
 8001352:	f000 ff80 	bl	8002256 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	2019      	movs	r0, #25
 800135c:	f000 ff5f 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001360:	2019      	movs	r0, #25
 8001362:	f000 ff78 	bl	8002256 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	201a      	movs	r0, #26
 800136c:	f000 ff57 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001370:	201a      	movs	r0, #26
 8001372:	f000 ff70 	bl	8002256 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	201b      	movs	r0, #27
 800137c:	f000 ff4f 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001380:	201b      	movs	r0, #27
 8001382:	f000 ff68 	bl	8002256 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40010000 	.word	0x40010000
 8001394:	40023800 	.word	0x40023800

08001398 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <NMI_Handler+0x4>

080013a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <MemManage_Handler+0x4>

080013b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <BusFault_Handler+0x4>

080013b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013bc:	bf00      	nop
 80013be:	e7fd      	b.n	80013bc <UsageFault_Handler+0x4>

080013c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ee:	f000 f8d7 	bl	80015a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013fc:	4802      	ldr	r0, [pc, #8]	@ (8001408 <ADC_IRQHandler+0x10>)
 80013fe:	f000 f956 	bl	80016ae <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000014c 	.word	0x2000014c

0800140c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001410:	4802      	ldr	r0, [pc, #8]	@ (800141c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001412:	f003 fcef 	bl	8004df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000248 	.word	0x20000248

08001420 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001424:	4802      	ldr	r0, [pc, #8]	@ (8001430 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001426:	f003 fce5 	bl	8004df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000248 	.word	0x20000248

08001434 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001438:	4802      	ldr	r0, [pc, #8]	@ (8001444 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800143a:	f003 fcdb 	bl	8004df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000248 	.word	0x20000248

08001448 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800144c:	4802      	ldr	r0, [pc, #8]	@ (8001458 <TIM1_CC_IRQHandler+0x10>)
 800144e:	f003 fcd1 	bl	8004df4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000248 	.word	0x20000248

0800145c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001460:	4802      	ldr	r0, [pc, #8]	@ (800146c <DMA2_Stream0_IRQHandler+0x10>)
 8001462:	f001 f819 	bl	8002498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000194 	.word	0x20000194

08001470 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <OTG_FS_IRQHandler+0x10>)
 8001476:	f001 feb9 	bl	80031ec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000db8 	.word	0x20000db8

08001484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <SystemInit+0x20>)
 800148a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800148e:	4a05      	ldr	r2, [pc, #20]	@ (80014a4 <SystemInit+0x20>)
 8001490:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001494:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014ac:	f7ff ffea 	bl	8001484 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014b0:	480c      	ldr	r0, [pc, #48]	@ (80014e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014b2:	490d      	ldr	r1, [pc, #52]	@ (80014e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014b4:	4a0d      	ldr	r2, [pc, #52]	@ (80014ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b8:	e002      	b.n	80014c0 <LoopCopyDataInit>

080014ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014be:	3304      	adds	r3, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c4:	d3f9      	bcc.n	80014ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c6:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c8:	4c0a      	ldr	r4, [pc, #40]	@ (80014f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014cc:	e001      	b.n	80014d2 <LoopFillZerobss>

080014ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d0:	3204      	adds	r2, #4

080014d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d4:	d3fb      	bcc.n	80014ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014d6:	f008 f9a5 	bl	8009824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014da:	f7ff f95f 	bl	800079c <main>
  bx  lr    
 80014de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e8:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 80014ec:	0800990c 	.word	0x0800990c
  ldr r2, =_sbss
 80014f0:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 80014f4:	200014bc 	.word	0x200014bc

080014f8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <DMA1_Stream0_IRQHandler>
	...

080014fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001500:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <HAL_Init+0x40>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a0d      	ldr	r2, [pc, #52]	@ (800153c <HAL_Init+0x40>)
 8001506:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800150a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800150c:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <HAL_Init+0x40>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0a      	ldr	r2, [pc, #40]	@ (800153c <HAL_Init+0x40>)
 8001512:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001518:	4b08      	ldr	r3, [pc, #32]	@ (800153c <HAL_Init+0x40>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a07      	ldr	r2, [pc, #28]	@ (800153c <HAL_Init+0x40>)
 800151e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001524:	2003      	movs	r0, #3
 8001526:	f000 fe6f 	bl	8002208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800152a:	200f      	movs	r0, #15
 800152c:	f000 f808 	bl	8001540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001530:	f7ff fe04 	bl	800113c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023c00 	.word	0x40023c00

08001540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001548:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <HAL_InitTick+0x54>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <HAL_InitTick+0x58>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001556:	fbb3 f3f1 	udiv	r3, r3, r1
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f000 fe87 	bl	8002272 <HAL_SYSTICK_Config>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e00e      	b.n	800158c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b0f      	cmp	r3, #15
 8001572:	d80a      	bhi.n	800158a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001574:	2200      	movs	r2, #0
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
 800157c:	f000 fe4f 	bl	800221e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001580:	4a06      	ldr	r2, [pc, #24]	@ (800159c <HAL_InitTick+0x5c>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001586:	2300      	movs	r3, #0
 8001588:	e000      	b.n	800158c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	2000002c 	.word	0x2000002c
 8001598:	20000034 	.word	0x20000034
 800159c:	20000030 	.word	0x20000030

080015a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <HAL_IncTick+0x20>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <HAL_IncTick+0x24>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4413      	add	r3, r2
 80015b0:	4a04      	ldr	r2, [pc, #16]	@ (80015c4 <HAL_IncTick+0x24>)
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000034 	.word	0x20000034
 80015c4:	200004d0 	.word	0x200004d0

080015c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return uwTick;
 80015cc:	4b03      	ldr	r3, [pc, #12]	@ (80015dc <HAL_GetTick+0x14>)
 80015ce:	681b      	ldr	r3, [r3, #0]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	200004d0 	.word	0x200004d0

080015e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e8:	f7ff ffee 	bl	80015c8 <HAL_GetTick>
 80015ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f8:	d005      	beq.n	8001606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <HAL_Delay+0x44>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4413      	add	r3, r2
 8001604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001606:	bf00      	nop
 8001608:	f7ff ffde 	bl	80015c8 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	429a      	cmp	r2, r3
 8001616:	d8f7      	bhi.n	8001608 <HAL_Delay+0x28>
  {
  }
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000034 	.word	0x20000034

08001628 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001630:	2300      	movs	r3, #0
 8001632:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e033      	b.n	80016a6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	2b00      	cmp	r3, #0
 8001644:	d109      	bne.n	800165a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff fda0 	bl	800118c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b00      	cmp	r3, #0
 8001664:	d118      	bne.n	8001698 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800166e:	f023 0302 	bic.w	r3, r3, #2
 8001672:	f043 0202 	orr.w	r2, r3, #2
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fb6c 	bl	8001d58 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	f023 0303 	bic.w	r3, r3, #3
 800168e:	f043 0201 	orr.w	r2, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	641a      	str	r2, [r3, #64]	@ 0x40
 8001696:	e001      	b.n	800169c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b086      	sub	sp, #24
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	f003 0320 	and.w	r3, r3, #32
 80016dc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d049      	beq.n	8001778 <HAL_ADC_IRQHandler+0xca>
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d046      	beq.n	8001778 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	f003 0310 	and.w	r3, r3, #16
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d105      	bne.n	8001702 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d12b      	bne.n	8001768 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001714:	2b00      	cmp	r3, #0
 8001716:	d127      	bne.n	8001768 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800171e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001722:	2b00      	cmp	r3, #0
 8001724:	d006      	beq.n	8001734 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001730:	2b00      	cmp	r3, #0
 8001732:	d119      	bne.n	8001768 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0220 	bic.w	r2, r2, #32
 8001742:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001748:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d105      	bne.n	8001768 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001760:	f043 0201 	orr.w	r2, r3, #1
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7fe fecb 	bl	8000504 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f06f 0212 	mvn.w	r2, #18
 8001776:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001786:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d057      	beq.n	800183e <HAL_ADC_IRQHandler+0x190>
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d054      	beq.n	800183e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	2b00      	cmp	r3, #0
 800179e:	d105      	bne.n	80017ac <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d139      	bne.n	800182e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017c0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d006      	beq.n	80017d6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d12b      	bne.n	800182e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d124      	bne.n	800182e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d11d      	bne.n	800182e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d119      	bne.n	800182e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001808:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800181e:	2b00      	cmp	r3, #0
 8001820:	d105      	bne.n	800182e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	f043 0201 	orr.w	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f000 fc10 	bl	8002054 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f06f 020c 	mvn.w	r2, #12
 800183c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800184c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d017      	beq.n	8001884 <HAL_ADC_IRQHandler+0x1d6>
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d014      	beq.n	8001884 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b01      	cmp	r3, #1
 8001866:	d10d      	bne.n	8001884 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f929 	bl	8001acc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f06f 0201 	mvn.w	r2, #1
 8001882:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0320 	and.w	r3, r3, #32
 800188a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001892:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d015      	beq.n	80018c6 <HAL_ADC_IRQHandler+0x218>
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d012      	beq.n	80018c6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a4:	f043 0202 	orr.w	r2, r3, #2
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f06f 0220 	mvn.w	r2, #32
 80018b4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f912 	bl	8001ae0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f06f 0220 	mvn.w	r2, #32
 80018c4:	601a      	str	r2, [r3, #0]
  }
}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b088      	sub	sp, #32
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_Start_DMA+0x22>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e0d0      	b.n	8001a94 <HAL_ADC_Start_DMA+0x1c4>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b01      	cmp	r3, #1
 8001906:	d018      	beq.n	800193a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0201 	orr.w	r2, r2, #1
 8001916:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001918:	4b60      	ldr	r3, [pc, #384]	@ (8001a9c <HAL_ADC_Start_DMA+0x1cc>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a60      	ldr	r2, [pc, #384]	@ (8001aa0 <HAL_ADC_Start_DMA+0x1d0>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	0c9a      	lsrs	r2, r3, #18
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800192c:	e002      	b.n	8001934 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3b01      	subs	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f9      	bne.n	800192e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001944:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001948:	d107      	bne.n	800195a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001958:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b01      	cmp	r3, #1
 8001966:	f040 8088 	bne.w	8001a7a <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001988:	2b00      	cmp	r3, #0
 800198a:	d007      	beq.n	800199c <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001990:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001994:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019a8:	d106      	bne.n	80019b8 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ae:	f023 0206 	bic.w	r2, r3, #6
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	645a      	str	r2, [r3, #68]	@ 0x44
 80019b6:	e002      	b.n	80019be <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019c6:	4b37      	ldr	r3, [pc, #220]	@ (8001aa4 <HAL_ADC_Start_DMA+0x1d4>)
 80019c8:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019ce:	4a36      	ldr	r2, [pc, #216]	@ (8001aa8 <HAL_ADC_Start_DMA+0x1d8>)
 80019d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019d6:	4a35      	ldr	r2, [pc, #212]	@ (8001aac <HAL_ADC_Start_DMA+0x1dc>)
 80019d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019de:	4a34      	ldr	r2, [pc, #208]	@ (8001ab0 <HAL_ADC_Start_DMA+0x1e0>)
 80019e0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80019ea:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80019fa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a0a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	334c      	adds	r3, #76	@ 0x4c
 8001a16:	4619      	mov	r1, r3
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f000 fce4 	bl	80023e8 <HAL_DMA_Start_IT>
 8001a20:	4603      	mov	r3, r0
 8001a22:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 031f 	and.w	r3, r3, #31
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10f      	bne.n	8001a50 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d129      	bne.n	8001a92 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	e020      	b.n	8001a92 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a17      	ldr	r2, [pc, #92]	@ (8001ab4 <HAL_ADC_Start_DMA+0x1e4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d11b      	bne.n	8001a92 <HAL_ADC_Start_DMA+0x1c2>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d114      	bne.n	8001a92 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	e00b      	b.n	8001a92 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f043 0210 	orr.w	r2, r3, #16
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8a:	f043 0201 	orr.w	r2, r3, #1
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001a92:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3720      	adds	r7, #32
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	2000002c 	.word	0x2000002c
 8001aa0:	431bde83 	.word	0x431bde83
 8001aa4:	40012300 	.word	0x40012300
 8001aa8:	08001f51 	.word	0x08001f51
 8001aac:	0800200b 	.word	0x0800200b
 8001ab0:	08002027 	.word	0x08002027
 8001ab4:	40012000 	.word	0x40012000

08001ab8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x1c>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e113      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x244>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b09      	cmp	r3, #9
 8001b1e:	d925      	bls.n	8001b6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68d9      	ldr	r1, [r3, #12]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4613      	mov	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	3b1e      	subs	r3, #30
 8001b36:	2207      	movs	r2, #7
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43da      	mvns	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	400a      	ands	r2, r1
 8001b44:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68d9      	ldr	r1, [r3, #12]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	4603      	mov	r3, r0
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4403      	add	r3, r0
 8001b5e:	3b1e      	subs	r3, #30
 8001b60:	409a      	lsls	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	e022      	b.n	8001bb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6919      	ldr	r1, [r3, #16]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	2207      	movs	r2, #7
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43da      	mvns	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	400a      	ands	r2, r1
 8001b8e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6919      	ldr	r1, [r3, #16]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	689a      	ldr	r2, [r3, #8]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4403      	add	r3, r0
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d824      	bhi.n	8001c04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	3b05      	subs	r3, #5
 8001bcc:	221f      	movs	r2, #31
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	400a      	ands	r2, r1
 8001bda:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3b05      	subs	r3, #5
 8001bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c02:	e04c      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b0c      	cmp	r3, #12
 8001c0a:	d824      	bhi.n	8001c56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3b23      	subs	r3, #35	@ 0x23
 8001c1e:	221f      	movs	r2, #31
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43da      	mvns	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	4413      	add	r3, r2
 8001c46:	3b23      	subs	r3, #35	@ 0x23
 8001c48:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c54:	e023      	b.n	8001c9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	3b41      	subs	r3, #65	@ 0x41
 8001c68:	221f      	movs	r2, #31
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43da      	mvns	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	400a      	ands	r2, r1
 8001c76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	4618      	mov	r0, r3
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	3b41      	subs	r3, #65	@ 0x41
 8001c92:	fa00 f203 	lsl.w	r2, r0, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c9e:	4b29      	ldr	r3, [pc, #164]	@ (8001d44 <HAL_ADC_ConfigChannel+0x250>)
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a28      	ldr	r2, [pc, #160]	@ (8001d48 <HAL_ADC_ConfigChannel+0x254>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d10f      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x1d8>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b12      	cmp	r3, #18
 8001cb2:	d10b      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8001d48 <HAL_ADC_ConfigChannel+0x254>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d12b      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x23a>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a1c      	ldr	r2, [pc, #112]	@ (8001d4c <HAL_ADC_ConfigChannel+0x258>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d003      	beq.n	8001ce8 <HAL_ADC_ConfigChannel+0x1f4>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b11      	cmp	r3, #17
 8001ce6:	d122      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a11      	ldr	r2, [pc, #68]	@ (8001d4c <HAL_ADC_ConfigChannel+0x258>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d111      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d0a:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <HAL_ADC_ConfigChannel+0x25c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a11      	ldr	r2, [pc, #68]	@ (8001d54 <HAL_ADC_ConfigChannel+0x260>)
 8001d10:	fba2 2303 	umull	r2, r3, r2, r3
 8001d14:	0c9a      	lsrs	r2, r3, #18
 8001d16:	4613      	mov	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d20:	e002      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f9      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	40012300 	.word	0x40012300
 8001d48:	40012000 	.word	0x40012000
 8001d4c:	10000012 	.word	0x10000012
 8001d50:	2000002c 	.word	0x2000002c
 8001d54:	431bde83 	.word	0x431bde83

08001d58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d60:	4b79      	ldr	r3, [pc, #484]	@ (8001f48 <ADC_Init+0x1f0>)
 8001d62:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	021a      	lsls	r2, r3, #8
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001db0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	6859      	ldr	r1, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6899      	ldr	r1, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dea:	4a58      	ldr	r2, [pc, #352]	@ (8001f4c <ADC_Init+0x1f4>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d022      	beq.n	8001e36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dfe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6899      	ldr	r1, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6899      	ldr	r1, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	e00f      	b.n	8001e56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e54:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0202 	bic.w	r2, r2, #2
 8001e64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6899      	ldr	r1, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	7e1b      	ldrb	r3, [r3, #24]
 8001e70:	005a      	lsls	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01b      	beq.n	8001ebc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e92:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001ea2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6859      	ldr	r1, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	035a      	lsls	r2, r3, #13
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	e007      	b.n	8001ecc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001eca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001eda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	051a      	lsls	r2, r3, #20
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6899      	ldr	r1, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f0e:	025a      	lsls	r2, r3, #9
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6899      	ldr	r1, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	029a      	lsls	r2, r3, #10
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	609a      	str	r2, [r3, #8]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	40012300 	.word	0x40012300
 8001f4c:	0f000001 	.word	0x0f000001

08001f50 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d13c      	bne.n	8001fe4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d12b      	bne.n	8001fdc <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d127      	bne.n	8001fdc <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f92:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d006      	beq.n	8001fa8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d119      	bne.n	8001fdc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0220 	bic.w	r2, r2, #32
 8001fb6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d105      	bne.n	8001fdc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	f043 0201 	orr.w	r2, r3, #1
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f7fe fa91 	bl	8000504 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001fe2:	e00e      	b.n	8002002 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f7ff fd75 	bl	8001ae0 <HAL_ADC_ErrorCallback>
}
 8001ff6:	e004      	b.n	8002002 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	4798      	blx	r3
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b084      	sub	sp, #16
 800200e:	af00      	add	r7, sp, #0
 8002010:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002016:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f7ff fd4d 	bl	8001ab8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002032:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2240      	movs	r2, #64	@ 0x40
 8002038:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203e:	f043 0204 	orr.w	r2, r3, #4
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f7ff fd4a 	bl	8001ae0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800204c:	bf00      	nop
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002078:	4b0c      	ldr	r3, [pc, #48]	@ (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002084:	4013      	ands	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002090:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209a:	4a04      	ldr	r2, [pc, #16]	@ (80020ac <__NVIC_SetPriorityGrouping+0x44>)
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	60d3      	str	r3, [r2, #12]
}
 80020a0:	bf00      	nop
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b4:	4b04      	ldr	r3, [pc, #16]	@ (80020c8 <__NVIC_GetPriorityGrouping+0x18>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	0a1b      	lsrs	r3, r3, #8
 80020ba:	f003 0307 	and.w	r3, r3, #7
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	db0b      	blt.n	80020f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	f003 021f 	and.w	r2, r3, #31
 80020e4:	4907      	ldr	r1, [pc, #28]	@ (8002104 <__NVIC_EnableIRQ+0x38>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	2001      	movs	r0, #1
 80020ee:	fa00 f202 	lsl.w	r2, r0, r2
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000e100 	.word	0xe000e100

08002108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	6039      	str	r1, [r7, #0]
 8002112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	2b00      	cmp	r3, #0
 800211a:	db0a      	blt.n	8002132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	b2da      	uxtb	r2, r3
 8002120:	490c      	ldr	r1, [pc, #48]	@ (8002154 <__NVIC_SetPriority+0x4c>)
 8002122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002126:	0112      	lsls	r2, r2, #4
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	440b      	add	r3, r1
 800212c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002130:	e00a      	b.n	8002148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4908      	ldr	r1, [pc, #32]	@ (8002158 <__NVIC_SetPriority+0x50>)
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	3b04      	subs	r3, #4
 8002140:	0112      	lsls	r2, r2, #4
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	440b      	add	r3, r1
 8002146:	761a      	strb	r2, [r3, #24]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000e100 	.word	0xe000e100
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	@ 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f1c3 0307 	rsb	r3, r3, #7
 8002176:	2b04      	cmp	r3, #4
 8002178:	bf28      	it	cs
 800217a:	2304      	movcs	r3, #4
 800217c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3304      	adds	r3, #4
 8002182:	2b06      	cmp	r3, #6
 8002184:	d902      	bls.n	800218c <NVIC_EncodePriority+0x30>
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3b03      	subs	r3, #3
 800218a:	e000      	b.n	800218e <NVIC_EncodePriority+0x32>
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	f04f 32ff 	mov.w	r2, #4294967295
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43da      	mvns	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	401a      	ands	r2, r3
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a4:	f04f 31ff 	mov.w	r1, #4294967295
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	fa01 f303 	lsl.w	r3, r1, r3
 80021ae:	43d9      	mvns	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b4:	4313      	orrs	r3, r2
         );
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3724      	adds	r7, #36	@ 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
	...

080021c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d4:	d301      	bcc.n	80021da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00f      	b.n	80021fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021da:	4a0a      	ldr	r2, [pc, #40]	@ (8002204 <SysTick_Config+0x40>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e2:	210f      	movs	r1, #15
 80021e4:	f04f 30ff 	mov.w	r0, #4294967295
 80021e8:	f7ff ff8e 	bl	8002108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ec:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <SysTick_Config+0x40>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f2:	4b04      	ldr	r3, [pc, #16]	@ (8002204 <SysTick_Config+0x40>)
 80021f4:	2207      	movs	r2, #7
 80021f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	e000e010 	.word	0xe000e010

08002208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff29 	bl	8002068 <__NVIC_SetPriorityGrouping>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af00      	add	r7, sp, #0
 8002224:	4603      	mov	r3, r0
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002230:	f7ff ff3e 	bl	80020b0 <__NVIC_GetPriorityGrouping>
 8002234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	6978      	ldr	r0, [r7, #20]
 800223c:	f7ff ff8e 	bl	800215c <NVIC_EncodePriority>
 8002240:	4602      	mov	r2, r0
 8002242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002246:	4611      	mov	r1, r2
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff5d 	bl	8002108 <__NVIC_SetPriority>
}
 800224e:	bf00      	nop
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff31 	bl	80020cc <__NVIC_EnableIRQ>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff ffa2 	bl	80021c4 <SysTick_Config>
 8002280:	4603      	mov	r3, r0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
	...

0800228c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002298:	f7ff f996 	bl	80015c8 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d101      	bne.n	80022a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e099      	b.n	80023dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0201 	bic.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c8:	e00f      	b.n	80022ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ca:	f7ff f97d 	bl	80015c8 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d908      	bls.n	80022ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2203      	movs	r2, #3
 80022e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e078      	b.n	80023dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1e8      	bne.n	80022ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	4b38      	ldr	r3, [pc, #224]	@ (80023e4 <HAL_DMA_Init+0x158>)
 8002304:	4013      	ands	r3, r2
 8002306:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002316:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002322:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	4313      	orrs	r3, r2
 800233a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002340:	2b04      	cmp	r3, #4
 8002342:	d107      	bne.n	8002354 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234c:	4313      	orrs	r3, r2
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4313      	orrs	r3, r2
 8002352:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f023 0307 	bic.w	r3, r3, #7
 800236a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	4313      	orrs	r3, r2
 8002374:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237a:	2b04      	cmp	r3, #4
 800237c:	d117      	bne.n	80023ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4313      	orrs	r3, r2
 8002386:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00e      	beq.n	80023ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 fa6f 	bl	8002874 <DMA_CheckFifoParam>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2240      	movs	r2, #64	@ 0x40
 80023a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80023aa:	2301      	movs	r3, #1
 80023ac:	e016      	b.n	80023dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fa26 	bl	8002808 <DMA_CalcBaseAndBitshift>
 80023bc:	4603      	mov	r3, r0
 80023be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c4:	223f      	movs	r2, #63	@ 0x3f
 80023c6:	409a      	lsls	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	f010803f 	.word	0xf010803f

080023e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_DMA_Start_IT+0x26>
 800240a:	2302      	movs	r3, #2
 800240c:	e040      	b.n	8002490 <HAL_DMA_Start_IT+0xa8>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b01      	cmp	r3, #1
 8002420:	d12f      	bne.n	8002482 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2202      	movs	r2, #2
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	f000 f9b8 	bl	80027ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002440:	223f      	movs	r2, #63	@ 0x3f
 8002442:	409a      	lsls	r2, r3
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0216 	orr.w	r2, r2, #22
 8002456:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f042 0208 	orr.w	r2, r2, #8
 800246e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e005      	b.n	800248e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800248a:	2302      	movs	r3, #2
 800248c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800248e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024a4:	4b8e      	ldr	r3, [pc, #568]	@ (80026e0 <HAL_DMA_IRQHandler+0x248>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a8e      	ldr	r2, [pc, #568]	@ (80026e4 <HAL_DMA_IRQHandler+0x24c>)
 80024aa:	fba2 2303 	umull	r2, r3, r2, r3
 80024ae:	0a9b      	lsrs	r3, r3, #10
 80024b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c2:	2208      	movs	r2, #8
 80024c4:	409a      	lsls	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d01a      	beq.n	8002504 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d013      	beq.n	8002504 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0204 	bic.w	r2, r2, #4
 80024ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f0:	2208      	movs	r2, #8
 80024f2:	409a      	lsls	r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024fc:	f043 0201 	orr.w	r2, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002508:	2201      	movs	r2, #1
 800250a:	409a      	lsls	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d012      	beq.n	800253a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00b      	beq.n	800253a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002526:	2201      	movs	r2, #1
 8002528:	409a      	lsls	r2, r3
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002532:	f043 0202 	orr.w	r2, r3, #2
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253e:	2204      	movs	r2, #4
 8002540:	409a      	lsls	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4013      	ands	r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d012      	beq.n	8002570 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00b      	beq.n	8002570 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255c:	2204      	movs	r2, #4
 800255e:	409a      	lsls	r2, r3
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002568:	f043 0204 	orr.w	r2, r3, #4
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002574:	2210      	movs	r2, #16
 8002576:	409a      	lsls	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d043      	beq.n	8002608 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d03c      	beq.n	8002608 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002592:	2210      	movs	r2, #16
 8002594:	409a      	lsls	r2, r3
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d018      	beq.n	80025da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d108      	bne.n	80025c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d024      	beq.n	8002608 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	4798      	blx	r3
 80025c6:	e01f      	b.n	8002608 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01b      	beq.n	8002608 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	4798      	blx	r3
 80025d8:	e016      	b.n	8002608 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d107      	bne.n	80025f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0208 	bic.w	r2, r2, #8
 80025f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260c:	2220      	movs	r2, #32
 800260e:	409a      	lsls	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 808f 	beq.w	8002738 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8087 	beq.w	8002738 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262e:	2220      	movs	r2, #32
 8002630:	409a      	lsls	r2, r3
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b05      	cmp	r3, #5
 8002640:	d136      	bne.n	80026b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0216 	bic.w	r2, r2, #22
 8002650:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695a      	ldr	r2, [r3, #20]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002660:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	2b00      	cmp	r3, #0
 8002668:	d103      	bne.n	8002672 <HAL_DMA_IRQHandler+0x1da>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800266e:	2b00      	cmp	r3, #0
 8002670:	d007      	beq.n	8002682 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0208 	bic.w	r2, r2, #8
 8002680:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002686:	223f      	movs	r2, #63	@ 0x3f
 8002688:	409a      	lsls	r2, r3
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d07e      	beq.n	80027a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	4798      	blx	r3
        }
        return;
 80026ae:	e079      	b.n	80027a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d01d      	beq.n	80026fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10d      	bne.n	80026e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d031      	beq.n	8002738 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	4798      	blx	r3
 80026dc:	e02c      	b.n	8002738 <HAL_DMA_IRQHandler+0x2a0>
 80026de:	bf00      	nop
 80026e0:	2000002c 	.word	0x2000002c
 80026e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d023      	beq.n	8002738 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	4798      	blx	r3
 80026f8:	e01e      	b.n	8002738 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10f      	bne.n	8002728 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0210 	bic.w	r2, r2, #16
 8002716:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273c:	2b00      	cmp	r3, #0
 800273e:	d032      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d022      	beq.n	8002792 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2205      	movs	r2, #5
 8002750:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	3301      	adds	r3, #1
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	429a      	cmp	r2, r3
 800276e:	d307      	bcc.n	8002780 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f2      	bne.n	8002764 <HAL_DMA_IRQHandler+0x2cc>
 800277e:	e000      	b.n	8002782 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002780:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002796:	2b00      	cmp	r3, #0
 8002798:	d005      	beq.n	80027a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	4798      	blx	r3
 80027a2:	e000      	b.n	80027a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80027a4:	bf00      	nop
    }
  }
}
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b40      	cmp	r3, #64	@ 0x40
 80027d8:	d108      	bne.n	80027ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027ea:	e007      	b.n	80027fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	60da      	str	r2, [r3, #12]
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	3b10      	subs	r3, #16
 8002818:	4a14      	ldr	r2, [pc, #80]	@ (800286c <DMA_CalcBaseAndBitshift+0x64>)
 800281a:	fba2 2303 	umull	r2, r3, r2, r3
 800281e:	091b      	lsrs	r3, r3, #4
 8002820:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002822:	4a13      	ldr	r2, [pc, #76]	@ (8002870 <DMA_CalcBaseAndBitshift+0x68>)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4413      	add	r3, r2
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2b03      	cmp	r3, #3
 8002834:	d909      	bls.n	800284a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800283e:	f023 0303 	bic.w	r3, r3, #3
 8002842:	1d1a      	adds	r2, r3, #4
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	659a      	str	r2, [r3, #88]	@ 0x58
 8002848:	e007      	b.n	800285a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002852:	f023 0303 	bic.w	r3, r3, #3
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800285e:	4618      	mov	r0, r3
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	aaaaaaab 	.word	0xaaaaaaab
 8002870:	080098f4 	.word	0x080098f4

08002874 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002884:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d11f      	bne.n	80028ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d856      	bhi.n	8002942 <DMA_CheckFifoParam+0xce>
 8002894:	a201      	add	r2, pc, #4	@ (adr r2, 800289c <DMA_CheckFifoParam+0x28>)
 8002896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289a:	bf00      	nop
 800289c:	080028ad 	.word	0x080028ad
 80028a0:	080028bf 	.word	0x080028bf
 80028a4:	080028ad 	.word	0x080028ad
 80028a8:	08002943 	.word	0x08002943
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d046      	beq.n	8002946 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028bc:	e043      	b.n	8002946 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028c6:	d140      	bne.n	800294a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028cc:	e03d      	b.n	800294a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028d6:	d121      	bne.n	800291c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d837      	bhi.n	800294e <DMA_CheckFifoParam+0xda>
 80028de:	a201      	add	r2, pc, #4	@ (adr r2, 80028e4 <DMA_CheckFifoParam+0x70>)
 80028e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e4:	080028f5 	.word	0x080028f5
 80028e8:	080028fb 	.word	0x080028fb
 80028ec:	080028f5 	.word	0x080028f5
 80028f0:	0800290d 	.word	0x0800290d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	73fb      	strb	r3, [r7, #15]
      break;
 80028f8:	e030      	b.n	800295c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d025      	beq.n	8002952 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800290a:	e022      	b.n	8002952 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002910:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002914:	d11f      	bne.n	8002956 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800291a:	e01c      	b.n	8002956 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d903      	bls.n	800292a <DMA_CheckFifoParam+0xb6>
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b03      	cmp	r3, #3
 8002926:	d003      	beq.n	8002930 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002928:	e018      	b.n	800295c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
      break;
 800292e:	e015      	b.n	800295c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002934:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00e      	beq.n	800295a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
      break;
 8002940:	e00b      	b.n	800295a <DMA_CheckFifoParam+0xe6>
      break;
 8002942:	bf00      	nop
 8002944:	e00a      	b.n	800295c <DMA_CheckFifoParam+0xe8>
      break;
 8002946:	bf00      	nop
 8002948:	e008      	b.n	800295c <DMA_CheckFifoParam+0xe8>
      break;
 800294a:	bf00      	nop
 800294c:	e006      	b.n	800295c <DMA_CheckFifoParam+0xe8>
      break;
 800294e:	bf00      	nop
 8002950:	e004      	b.n	800295c <DMA_CheckFifoParam+0xe8>
      break;
 8002952:	bf00      	nop
 8002954:	e002      	b.n	800295c <DMA_CheckFifoParam+0xe8>
      break;   
 8002956:	bf00      	nop
 8002958:	e000      	b.n	800295c <DMA_CheckFifoParam+0xe8>
      break;
 800295a:	bf00      	nop
    }
  } 
  
  return status; 
 800295c:	7bfb      	ldrb	r3, [r7, #15]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop

0800296c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800296c:	b480      	push	{r7}
 800296e:	b089      	sub	sp, #36	@ 0x24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800297e:	2300      	movs	r3, #0
 8002980:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
 8002986:	e159      	b.n	8002c3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002988:	2201      	movs	r2, #1
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	4013      	ands	r3, r2
 800299a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	f040 8148 	bne.w	8002c36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d005      	beq.n	80029be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d130      	bne.n	8002a20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	2203      	movs	r2, #3
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029f4:	2201      	movs	r2, #1
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 0201 	and.w	r2, r3, #1
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d017      	beq.n	8002a5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	2203      	movs	r2, #3
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d123      	bne.n	8002ab0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	08da      	lsrs	r2, r3, #3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3208      	adds	r2, #8
 8002a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	220f      	movs	r2, #15
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	08da      	lsrs	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3208      	adds	r2, #8
 8002aaa:	69b9      	ldr	r1, [r7, #24]
 8002aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	2203      	movs	r2, #3
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0203 	and.w	r2, r3, #3
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 80a2 	beq.w	8002c36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	4b57      	ldr	r3, [pc, #348]	@ (8002c54 <HAL_GPIO_Init+0x2e8>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afa:	4a56      	ldr	r2, [pc, #344]	@ (8002c54 <HAL_GPIO_Init+0x2e8>)
 8002afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b02:	4b54      	ldr	r3, [pc, #336]	@ (8002c54 <HAL_GPIO_Init+0x2e8>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b0e:	4a52      	ldr	r2, [pc, #328]	@ (8002c58 <HAL_GPIO_Init+0x2ec>)
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	089b      	lsrs	r3, r3, #2
 8002b14:	3302      	adds	r3, #2
 8002b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	220f      	movs	r2, #15
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a49      	ldr	r2, [pc, #292]	@ (8002c5c <HAL_GPIO_Init+0x2f0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d019      	beq.n	8002b6e <HAL_GPIO_Init+0x202>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a48      	ldr	r2, [pc, #288]	@ (8002c60 <HAL_GPIO_Init+0x2f4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d013      	beq.n	8002b6a <HAL_GPIO_Init+0x1fe>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a47      	ldr	r2, [pc, #284]	@ (8002c64 <HAL_GPIO_Init+0x2f8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00d      	beq.n	8002b66 <HAL_GPIO_Init+0x1fa>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a46      	ldr	r2, [pc, #280]	@ (8002c68 <HAL_GPIO_Init+0x2fc>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d007      	beq.n	8002b62 <HAL_GPIO_Init+0x1f6>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a45      	ldr	r2, [pc, #276]	@ (8002c6c <HAL_GPIO_Init+0x300>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <HAL_GPIO_Init+0x1f2>
 8002b5a:	2304      	movs	r3, #4
 8002b5c:	e008      	b.n	8002b70 <HAL_GPIO_Init+0x204>
 8002b5e:	2307      	movs	r3, #7
 8002b60:	e006      	b.n	8002b70 <HAL_GPIO_Init+0x204>
 8002b62:	2303      	movs	r3, #3
 8002b64:	e004      	b.n	8002b70 <HAL_GPIO_Init+0x204>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e002      	b.n	8002b70 <HAL_GPIO_Init+0x204>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <HAL_GPIO_Init+0x204>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	f002 0203 	and.w	r2, r2, #3
 8002b76:	0092      	lsls	r2, r2, #2
 8002b78:	4093      	lsls	r3, r2
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b80:	4935      	ldr	r1, [pc, #212]	@ (8002c58 <HAL_GPIO_Init+0x2ec>)
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	089b      	lsrs	r3, r3, #2
 8002b86:	3302      	adds	r3, #2
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b8e:	4b38      	ldr	r3, [pc, #224]	@ (8002c70 <HAL_GPIO_Init+0x304>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	43db      	mvns	r3, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bb2:	4a2f      	ldr	r2, [pc, #188]	@ (8002c70 <HAL_GPIO_Init+0x304>)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c70 <HAL_GPIO_Init+0x304>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bdc:	4a24      	ldr	r2, [pc, #144]	@ (8002c70 <HAL_GPIO_Init+0x304>)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002be2:	4b23      	ldr	r3, [pc, #140]	@ (8002c70 <HAL_GPIO_Init+0x304>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	43db      	mvns	r3, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c06:	4a1a      	ldr	r2, [pc, #104]	@ (8002c70 <HAL_GPIO_Init+0x304>)
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c0c:	4b18      	ldr	r3, [pc, #96]	@ (8002c70 <HAL_GPIO_Init+0x304>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c30:	4a0f      	ldr	r2, [pc, #60]	@ (8002c70 <HAL_GPIO_Init+0x304>)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	61fb      	str	r3, [r7, #28]
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	2b0f      	cmp	r3, #15
 8002c40:	f67f aea2 	bls.w	8002988 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	3724      	adds	r7, #36	@ 0x24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800
 8002c58:	40013800 	.word	0x40013800
 8002c5c:	40020000 	.word	0x40020000
 8002c60:	40020400 	.word	0x40020400
 8002c64:	40020800 	.word	0x40020800
 8002c68:	40020c00 	.word	0x40020c00
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40013c00 	.word	0x40013c00

08002c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
 8002c80:	4613      	mov	r3, r2
 8002c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c84:	787b      	ldrb	r3, [r7, #1]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c8a:	887a      	ldrh	r2, [r7, #2]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c90:	e003      	b.n	8002c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c92:	887b      	ldrh	r3, [r7, #2]
 8002c94:	041a      	lsls	r2, r3, #16
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	619a      	str	r2, [r3, #24]
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b085      	sub	sp, #20
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cb8:	887a      	ldrh	r2, [r7, #2]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	041a      	lsls	r2, r3, #16
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	43d9      	mvns	r1, r3
 8002cc4:	887b      	ldrh	r3, [r7, #2]
 8002cc6:	400b      	ands	r3, r1
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	619a      	str	r2, [r3, #24]
}
 8002cce:	bf00      	nop
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e12b      	b.n	8002f46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fe fac0 	bl	8001288 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2224      	movs	r2, #36	@ 0x24
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d40:	f001 ff92 	bl	8004c68 <HAL_RCC_GetPCLK1Freq>
 8002d44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4a81      	ldr	r2, [pc, #516]	@ (8002f50 <HAL_I2C_Init+0x274>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d807      	bhi.n	8002d60 <HAL_I2C_Init+0x84>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	4a80      	ldr	r2, [pc, #512]	@ (8002f54 <HAL_I2C_Init+0x278>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	bf94      	ite	ls
 8002d58:	2301      	movls	r3, #1
 8002d5a:	2300      	movhi	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e006      	b.n	8002d6e <HAL_I2C_Init+0x92>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4a7d      	ldr	r2, [pc, #500]	@ (8002f58 <HAL_I2C_Init+0x27c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	bf94      	ite	ls
 8002d68:	2301      	movls	r3, #1
 8002d6a:	2300      	movhi	r3, #0
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0e7      	b.n	8002f46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	4a78      	ldr	r2, [pc, #480]	@ (8002f5c <HAL_I2C_Init+0x280>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	0c9b      	lsrs	r3, r3, #18
 8002d80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	430a      	orrs	r2, r1
 8002d94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	4a6a      	ldr	r2, [pc, #424]	@ (8002f50 <HAL_I2C_Init+0x274>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d802      	bhi.n	8002db0 <HAL_I2C_Init+0xd4>
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	3301      	adds	r3, #1
 8002dae:	e009      	b.n	8002dc4 <HAL_I2C_Init+0xe8>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	4a69      	ldr	r2, [pc, #420]	@ (8002f60 <HAL_I2C_Init+0x284>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002dd6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	495c      	ldr	r1, [pc, #368]	@ (8002f50 <HAL_I2C_Init+0x274>)
 8002de0:	428b      	cmp	r3, r1
 8002de2:	d819      	bhi.n	8002e18 <HAL_I2C_Init+0x13c>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1e59      	subs	r1, r3, #1
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df2:	1c59      	adds	r1, r3, #1
 8002df4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002df8:	400b      	ands	r3, r1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_I2C_Init+0x138>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1e59      	subs	r1, r3, #1
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e12:	e051      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e14:	2304      	movs	r3, #4
 8002e16:	e04f      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d111      	bne.n	8002e44 <HAL_I2C_Init+0x168>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	1e58      	subs	r0, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6859      	ldr	r1, [r3, #4]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	440b      	add	r3, r1
 8002e2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	e012      	b.n	8002e6a <HAL_I2C_Init+0x18e>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1e58      	subs	r0, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	0099      	lsls	r1, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Init+0x196>
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e022      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10e      	bne.n	8002e98 <HAL_I2C_Init+0x1bc>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1e58      	subs	r0, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6859      	ldr	r1, [r3, #4]
 8002e82:	460b      	mov	r3, r1
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	440b      	add	r3, r1
 8002e88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e96:	e00f      	b.n	8002eb8 <HAL_I2C_Init+0x1dc>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1e58      	subs	r0, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6859      	ldr	r1, [r3, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	0099      	lsls	r1, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002eb8:	6879      	ldr	r1, [r7, #4]
 8002eba:	6809      	ldr	r1, [r1, #0]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69da      	ldr	r2, [r3, #28]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ee6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6911      	ldr	r1, [r2, #16]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68d2      	ldr	r2, [r2, #12]
 8002ef2:	4311      	orrs	r1, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	000186a0 	.word	0x000186a0
 8002f54:	001e847f 	.word	0x001e847f
 8002f58:	003d08ff 	.word	0x003d08ff
 8002f5c:	431bde83 	.word	0x431bde83
 8002f60:	10624dd3 	.word	0x10624dd3

08002f64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e101      	b.n	800317a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d106      	bne.n	8002f96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f006 f935 	bl	8009200 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fa4:	d102      	bne.n	8002fac <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f002 fc8c 	bl	80058ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	7c1a      	ldrb	r2, [r3, #16]
 8002fbe:	f88d 2000 	strb.w	r2, [sp]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fc6:	f002 fb6b 	bl	80056a0 <USB_CoreInit>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0ce      	b.n	800317a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f002 fc84 	bl	80058f0 <USB_SetCurrentMode>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0bf      	b.n	800317a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	73fb      	strb	r3, [r7, #15]
 8002ffe:	e04a      	b.n	8003096 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003000:	7bfa      	ldrb	r2, [r7, #15]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	3315      	adds	r3, #21
 8003010:	2201      	movs	r2, #1
 8003012:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003014:	7bfa      	ldrb	r2, [r7, #15]
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	4613      	mov	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	3314      	adds	r3, #20
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003028:	7bfa      	ldrb	r2, [r7, #15]
 800302a:	7bfb      	ldrb	r3, [r7, #15]
 800302c:	b298      	uxth	r0, r3
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	332e      	adds	r3, #46	@ 0x2e
 800303c:	4602      	mov	r2, r0
 800303e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	3318      	adds	r3, #24
 8003050:	2200      	movs	r2, #0
 8003052:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003054:	7bfa      	ldrb	r2, [r7, #15]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	331c      	adds	r3, #28
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003068:	7bfa      	ldrb	r2, [r7, #15]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	3320      	adds	r3, #32
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800307c:	7bfa      	ldrb	r2, [r7, #15]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	3324      	adds	r3, #36	@ 0x24
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	3301      	adds	r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	791b      	ldrb	r3, [r3, #4]
 800309a:	7bfa      	ldrb	r2, [r7, #15]
 800309c:	429a      	cmp	r2, r3
 800309e:	d3af      	bcc.n	8003000 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a0:	2300      	movs	r3, #0
 80030a2:	73fb      	strb	r3, [r7, #15]
 80030a4:	e044      	b.n	8003130 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80030ce:	7bfa      	ldrb	r2, [r7, #15]
 80030d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030d2:	7bfa      	ldrb	r2, [r7, #15]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030e8:	7bfa      	ldrb	r2, [r7, #15]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030fe:	7bfa      	ldrb	r2, [r7, #15]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003114:	7bfa      	ldrb	r2, [r7, #15]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	3301      	adds	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	791b      	ldrb	r3, [r3, #4]
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	429a      	cmp	r2, r3
 8003138:	d3b5      	bcc.n	80030a6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	7c1a      	ldrb	r2, [r3, #16]
 8003142:	f88d 2000 	strb.w	r2, [sp]
 8003146:	3304      	adds	r3, #4
 8003148:	cb0e      	ldmia	r3, {r1, r2, r3}
 800314a:	f002 fc1d 	bl	8005988 <USB_DevInit>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e00c      	b.n	800317a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f003 fc67 	bl	8006a46 <USB_DevDisconnect>

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_PCD_Start+0x1c>
 800319a:	2302      	movs	r3, #2
 800319c:	e022      	b.n	80031e4 <HAL_PCD_Start+0x62>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d105      	bne.n	80031c6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031be:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f002 fb6e 	bl	80058ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f003 fc15 	bl	8006a04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80031ec:	b590      	push	{r4, r7, lr}
 80031ee:	b08d      	sub	sp, #52	@ 0x34
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f003 fcd3 	bl	8006bae <USB_GetMode>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	f040 848c 	bne.w	8003b28 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f003 fc37 	bl	8006a88 <USB_ReadInterrupts>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 8482 	beq.w	8003b26 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	0a1b      	lsrs	r3, r3, #8
 800322c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f003 fc24 	bl	8006a88 <USB_ReadInterrupts>
 8003240:	4603      	mov	r3, r0
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b02      	cmp	r3, #2
 8003248:	d107      	bne.n	800325a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f002 0202 	and.w	r2, r2, #2
 8003258:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f003 fc12 	bl	8006a88 <USB_ReadInterrupts>
 8003264:	4603      	mov	r3, r0
 8003266:	f003 0310 	and.w	r3, r3, #16
 800326a:	2b10      	cmp	r3, #16
 800326c:	d161      	bne.n	8003332 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699a      	ldr	r2, [r3, #24]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0210 	bic.w	r2, r2, #16
 800327c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f003 020f 	and.w	r2, r3, #15
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	4413      	add	r3, r2
 800329a:	3304      	adds	r3, #4
 800329c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80032a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032a8:	d124      	bne.n	80032f4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d035      	beq.n	8003322 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	461a      	mov	r2, r3
 80032c8:	6a38      	ldr	r0, [r7, #32]
 80032ca:	f003 fa49 	bl	8006760 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	68da      	ldr	r2, [r3, #12]
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	091b      	lsrs	r3, r3, #4
 80032d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032da:	441a      	add	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ec:	441a      	add	r2, r3
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	615a      	str	r2, [r3, #20]
 80032f2:	e016      	b.n	8003322 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80032fa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80032fe:	d110      	bne.n	8003322 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003306:	2208      	movs	r2, #8
 8003308:	4619      	mov	r1, r3
 800330a:	6a38      	ldr	r0, [r7, #32]
 800330c:	f003 fa28 	bl	8006760 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	091b      	lsrs	r3, r3, #4
 8003318:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800331c:	441a      	add	r2, r3
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0210 	orr.w	r2, r2, #16
 8003330:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f003 fba6 	bl	8006a88 <USB_ReadInterrupts>
 800333c:	4603      	mov	r3, r0
 800333e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003342:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003346:	f040 80a7 	bne.w	8003498 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f003 fbab 	bl	8006aae <USB_ReadDevAllOutEpInterrupt>
 8003358:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800335a:	e099      	b.n	8003490 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800335c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 808e 	beq.w	8003484 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f003 fbcf 	bl	8006b16 <USB_ReadDevOutEPInterrupt>
 8003378:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00c      	beq.n	800339e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003390:	461a      	mov	r2, r3
 8003392:	2301      	movs	r3, #1
 8003394:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003396:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fea3 	bl	80040e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00c      	beq.n	80033c2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033b4:	461a      	mov	r2, r3
 80033b6:	2308      	movs	r3, #8
 80033b8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 ff79 	bl	80042b4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f003 0310 	and.w	r3, r3, #16
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d008      	beq.n	80033de <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033d8:	461a      	mov	r2, r3
 80033da:	2310      	movs	r3, #16
 80033dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d030      	beq.n	800344a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80033e8:	6a3b      	ldr	r3, [r7, #32]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f0:	2b80      	cmp	r3, #128	@ 0x80
 80033f2:	d109      	bne.n	8003408 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003402:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003406:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800340a:	4613      	mov	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	3304      	adds	r3, #4
 800341c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	78db      	ldrb	r3, [r3, #3]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d108      	bne.n	8003438 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2200      	movs	r2, #0
 800342a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800342c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800342e:	b2db      	uxtb	r3, r3
 8003430:	4619      	mov	r1, r3
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f005 ffe0 	bl	80093f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	4413      	add	r3, r2
 8003440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003444:	461a      	mov	r2, r3
 8003446:	2302      	movs	r3, #2
 8003448:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003460:	461a      	mov	r2, r3
 8003462:	2320      	movs	r3, #32
 8003464:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	4413      	add	r3, r2
 8003478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800347c:	461a      	mov	r2, r3
 800347e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003482:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003486:	3301      	adds	r3, #1
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800348a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003492:	2b00      	cmp	r3, #0
 8003494:	f47f af62 	bne.w	800335c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f003 faf3 	bl	8006a88 <USB_ReadInterrupts>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034ac:	f040 80db 	bne.w	8003666 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f003 fb14 	bl	8006ae2 <USB_ReadDevAllInEpInterrupt>
 80034ba:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80034c0:	e0cd      	b.n	800365e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80034c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80c2 	beq.w	8003652 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	4611      	mov	r1, r2
 80034d8:	4618      	mov	r0, r3
 80034da:	f003 fb3a 	bl	8006b52 <USB_ReadDevInEPInterrupt>
 80034de:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d057      	beq.n	800359a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	2201      	movs	r2, #1
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	43db      	mvns	r3, r3
 8003504:	69f9      	ldr	r1, [r7, #28]
 8003506:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800350a:	4013      	ands	r3, r2
 800350c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	4413      	add	r3, r2
 8003516:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800351a:	461a      	mov	r2, r3
 800351c:	2301      	movs	r3, #1
 800351e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	799b      	ldrb	r3, [r3, #6]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d132      	bne.n	800358e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800352c:	4613      	mov	r3, r2
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4413      	add	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	3320      	adds	r3, #32
 8003538:	6819      	ldr	r1, [r3, #0]
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800353e:	4613      	mov	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4403      	add	r3, r0
 8003548:	331c      	adds	r3, #28
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4419      	add	r1, r3
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4403      	add	r3, r0
 800355c:	3320      	adds	r3, #32
 800355e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003562:	2b00      	cmp	r3, #0
 8003564:	d113      	bne.n	800358e <HAL_PCD_IRQHandler+0x3a2>
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	3324      	adds	r3, #36	@ 0x24
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d108      	bne.n	800358e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6818      	ldr	r0, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003586:	461a      	mov	r2, r3
 8003588:	2101      	movs	r1, #1
 800358a:	f003 fb41 	bl	8006c10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	b2db      	uxtb	r3, r3
 8003592:	4619      	mov	r1, r3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f005 feb4 	bl	8009302 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80035a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035b0:	461a      	mov	r2, r3
 80035b2:	2308      	movs	r3, #8
 80035b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035cc:	461a      	mov	r2, r3
 80035ce:	2310      	movs	r3, #16
 80035d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d008      	beq.n	80035ee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035e8:	461a      	mov	r2, r3
 80035ea:	2340      	movs	r3, #64	@ 0x40
 80035ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d023      	beq.n	8003640 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80035f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035fa:	6a38      	ldr	r0, [r7, #32]
 80035fc:	f002 fb28 	bl	8005c50 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003602:	4613      	mov	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	3310      	adds	r3, #16
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	4413      	add	r3, r2
 8003610:	3304      	adds	r3, #4
 8003612:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	78db      	ldrb	r3, [r3, #3]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d108      	bne.n	800362e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2200      	movs	r2, #0
 8003620:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003624:	b2db      	uxtb	r3, r3
 8003626:	4619      	mov	r1, r3
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f005 fef7 	bl	800941c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800363a:	461a      	mov	r2, r3
 800363c:	2302      	movs	r3, #2
 800363e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800364a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fcbd 	bl	8003fcc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003654:	3301      	adds	r3, #1
 8003656:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365a:	085b      	lsrs	r3, r3, #1
 800365c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800365e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003660:	2b00      	cmp	r3, #0
 8003662:	f47f af2e 	bne.w	80034c2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f003 fa0c 	bl	8006a88 <USB_ReadInterrupts>
 8003670:	4603      	mov	r3, r0
 8003672:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003676:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800367a:	d122      	bne.n	80036c2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003696:	2b01      	cmp	r3, #1
 8003698:	d108      	bne.n	80036ac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036a2:	2100      	movs	r1, #0
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fea3 	bl	80043f0 <HAL_PCDEx_LPM_Callback>
 80036aa:	e002      	b.n	80036b2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f005 fe95 	bl	80093dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80036c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f003 f9de 	bl	8006a88 <USB_ReadInterrupts>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036d6:	d112      	bne.n	80036fe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d102      	bne.n	80036ee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f005 fe51 	bl	8009390 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695a      	ldr	r2, [r3, #20]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80036fc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f003 f9c0 	bl	8006a88 <USB_ReadInterrupts>
 8003708:	4603      	mov	r3, r0
 800370a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800370e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003712:	f040 80b7 	bne.w	8003884 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003724:	f023 0301 	bic.w	r3, r3, #1
 8003728:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2110      	movs	r1, #16
 8003730:	4618      	mov	r0, r3
 8003732:	f002 fa8d 	bl	8005c50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003736:	2300      	movs	r3, #0
 8003738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800373a:	e046      	b.n	80037ca <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800373c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003748:	461a      	mov	r2, r3
 800374a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800374e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003752:	015a      	lsls	r2, r3, #5
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	4413      	add	r3, r2
 8003758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003760:	0151      	lsls	r1, r2, #5
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	440a      	add	r2, r1
 8003766:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800376a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800376e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800377c:	461a      	mov	r2, r3
 800377e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003782:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003794:	0151      	lsls	r1, r2, #5
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	440a      	add	r2, r1
 800379a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800379e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037b4:	0151      	lsls	r1, r2, #5
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	440a      	add	r2, r1
 80037ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037be:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037c2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c6:	3301      	adds	r3, #1
 80037c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	791b      	ldrb	r3, [r3, #4]
 80037ce:	461a      	mov	r2, r3
 80037d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d3b2      	bcc.n	800373c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037e4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80037e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	7bdb      	ldrb	r3, [r3, #15]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d016      	beq.n	8003820 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003802:	f043 030b 	orr.w	r3, r3, #11
 8003806:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003818:	f043 030b 	orr.w	r3, r3, #11
 800381c:	6453      	str	r3, [r2, #68]	@ 0x44
 800381e:	e015      	b.n	800384c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800382e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003832:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003836:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003846:	f043 030b 	orr.w	r3, r3, #11
 800384a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	69fa      	ldr	r2, [r7, #28]
 8003856:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800385a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800385e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6818      	ldr	r0, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800386e:	461a      	mov	r2, r3
 8003870:	f003 f9ce 	bl	8006c10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003882:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f003 f8fd 	bl	8006a88 <USB_ReadInterrupts>
 800388e:	4603      	mov	r3, r0
 8003890:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003898:	d123      	bne.n	80038e2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f003 f993 	bl	8006bca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f002 fa4a 	bl	8005d42 <USB_GetDevSpeed>
 80038ae:	4603      	mov	r3, r0
 80038b0:	461a      	mov	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681c      	ldr	r4, [r3, #0]
 80038ba:	f001 f9c9 	bl	8004c50 <HAL_RCC_GetHCLKFreq>
 80038be:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038c4:	461a      	mov	r2, r3
 80038c6:	4620      	mov	r0, r4
 80038c8:	f001 ff4e 	bl	8005768 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f005 fd40 	bl	8009352 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695a      	ldr	r2, [r3, #20]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80038e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f003 f8ce 	bl	8006a88 <USB_ReadInterrupts>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d10a      	bne.n	800390c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f005 fd1d 	bl	8009336 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f002 0208 	and.w	r2, r2, #8
 800390a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f003 f8b9 	bl	8006a88 <USB_ReadInterrupts>
 8003916:	4603      	mov	r3, r0
 8003918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800391c:	2b80      	cmp	r3, #128	@ 0x80
 800391e:	d123      	bne.n	8003968 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800392c:	2301      	movs	r3, #1
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003930:	e014      	b.n	800395c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d105      	bne.n	8003956 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	b2db      	uxtb	r3, r3
 800394e:	4619      	mov	r1, r3
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fb0a 	bl	8003f6a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003958:	3301      	adds	r3, #1
 800395a:	627b      	str	r3, [r7, #36]	@ 0x24
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	791b      	ldrb	r3, [r3, #4]
 8003960:	461a      	mov	r2, r3
 8003962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003964:	4293      	cmp	r3, r2
 8003966:	d3e4      	bcc.n	8003932 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f003 f88b 	bl	8006a88 <USB_ReadInterrupts>
 8003972:	4603      	mov	r3, r0
 8003974:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003978:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800397c:	d13c      	bne.n	80039f8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800397e:	2301      	movs	r3, #1
 8003980:	627b      	str	r3, [r7, #36]	@ 0x24
 8003982:	e02b      	b.n	80039dc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003998:	4613      	mov	r3, r2
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	3318      	adds	r3, #24
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d115      	bne.n	80039d6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80039aa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	da12      	bge.n	80039d6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b4:	4613      	mov	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	4413      	add	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	3317      	adds	r3, #23
 80039c0:	2201      	movs	r2, #1
 80039c2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	4619      	mov	r1, r3
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 faca 	bl	8003f6a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d8:	3301      	adds	r3, #1
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	791b      	ldrb	r3, [r3, #4]
 80039e0:	461a      	mov	r2, r3
 80039e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d3cd      	bcc.n	8003984 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695a      	ldr	r2, [r3, #20]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80039f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f003 f843 	bl	8006a88 <USB_ReadInterrupts>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a0c:	d156      	bne.n	8003abc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a0e:	2301      	movs	r3, #1
 8003a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a12:	e045      	b.n	8003aa0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a28:	4613      	mov	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d12e      	bne.n	8003a9a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	da2b      	bge.n	8003a9a <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	0c1a      	lsrs	r2, r3, #16
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003a4c:	4053      	eors	r3, r2
 8003a4e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d121      	bne.n	8003a9a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003a68:	2201      	movs	r2, #1
 8003a6a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a78:	6a3b      	ldr	r3, [r7, #32]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a96:	6053      	str	r3, [r2, #4]
            break;
 8003a98:	e008      	b.n	8003aac <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	791b      	ldrb	r3, [r3, #4]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d3b3      	bcc.n	8003a14 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f002 ffe1 	bl	8006a88 <USB_ReadInterrupts>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad0:	d10a      	bne.n	8003ae8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f005 fcb4 	bl	8009440 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695a      	ldr	r2, [r3, #20]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003ae6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f002 ffcb 	bl	8006a88 <USB_ReadInterrupts>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f003 0304 	and.w	r3, r3, #4
 8003af8:	2b04      	cmp	r3, #4
 8003afa:	d115      	bne.n	8003b28 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	f003 0304 	and.w	r3, r3, #4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f005 fca4 	bl	800945c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6859      	ldr	r1, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	605a      	str	r2, [r3, #4]
 8003b24:	e000      	b.n	8003b28 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003b26:	bf00      	nop
    }
  }
}
 8003b28:	3734      	adds	r7, #52	@ 0x34
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd90      	pop	{r4, r7, pc}

08003b2e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
 8003b36:	460b      	mov	r3, r1
 8003b38:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_PCD_SetAddress+0x1a>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e012      	b.n	8003b6e <HAL_PCD_SetAddress+0x40>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	78fa      	ldrb	r2, [r7, #3]
 8003b54:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f002 ff2a 	bl	80069b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b76:	b580      	push	{r7, lr}
 8003b78:	b084      	sub	sp, #16
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	4608      	mov	r0, r1
 8003b80:	4611      	mov	r1, r2
 8003b82:	461a      	mov	r2, r3
 8003b84:	4603      	mov	r3, r0
 8003b86:	70fb      	strb	r3, [r7, #3]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	803b      	strh	r3, [r7, #0]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	da0f      	bge.n	8003bbc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	f003 020f 	and.w	r2, r3, #15
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	3310      	adds	r3, #16
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	4413      	add	r3, r2
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	705a      	strb	r2, [r3, #1]
 8003bba:	e00f      	b.n	8003bdc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bbc:	78fb      	ldrb	r3, [r7, #3]
 8003bbe:	f003 020f 	and.w	r2, r3, #15
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003be8:	883b      	ldrh	r3, [r7, #0]
 8003bea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	78ba      	ldrb	r2, [r7, #2]
 8003bf6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	785b      	ldrb	r3, [r3, #1]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d004      	beq.n	8003c0a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c0a:	78bb      	ldrb	r3, [r7, #2]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d102      	bne.n	8003c16 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_PCD_EP_Open+0xae>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e00e      	b.n	8003c42 <HAL_PCD_EP_Open+0xcc>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68f9      	ldr	r1, [r7, #12]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f002 f8aa 	bl	8005d8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003c40:	7afb      	ldrb	r3, [r7, #11]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b084      	sub	sp, #16
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
 8003c52:	460b      	mov	r3, r1
 8003c54:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	da0f      	bge.n	8003c7e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c5e:	78fb      	ldrb	r3, [r7, #3]
 8003c60:	f003 020f 	and.w	r2, r3, #15
 8003c64:	4613      	mov	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4413      	add	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	3310      	adds	r3, #16
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	4413      	add	r3, r2
 8003c72:	3304      	adds	r3, #4
 8003c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	705a      	strb	r2, [r3, #1]
 8003c7c:	e00f      	b.n	8003c9e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c7e:	78fb      	ldrb	r3, [r7, #3]
 8003c80:	f003 020f 	and.w	r2, r3, #15
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	4413      	add	r3, r2
 8003c94:	3304      	adds	r3, #4
 8003c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c9e:	78fb      	ldrb	r3, [r7, #3]
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_PCD_EP_Close+0x6e>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e00e      	b.n	8003cd6 <HAL_PCD_EP_Close+0x8c>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68f9      	ldr	r1, [r7, #12]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f002 f8e8 	bl	8005e9c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	460b      	mov	r3, r1
 8003cec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cee:	7afb      	ldrb	r3, [r7, #11]
 8003cf0:	f003 020f 	and.w	r2, r3, #15
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4413      	add	r3, r2
 8003d04:	3304      	adds	r3, #4
 8003d06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2200      	movs	r2, #0
 8003d18:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d20:	7afb      	ldrb	r3, [r7, #11]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	799b      	ldrb	r3, [r3, #6]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d102      	bne.n	8003d3a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	799b      	ldrb	r3, [r3, #6]
 8003d42:	461a      	mov	r2, r3
 8003d44:	6979      	ldr	r1, [r7, #20]
 8003d46:	f002 f985 	bl	8006054 <USB_EPStartXfer>

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	f003 020f 	and.w	r2, r3, #15
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	440b      	add	r3, r1
 8003d72:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003d76:	681b      	ldr	r3, [r3, #0]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	607a      	str	r2, [r7, #4]
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	460b      	mov	r3, r1
 8003d92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d94:	7afb      	ldrb	r3, [r7, #11]
 8003d96:	f003 020f 	and.w	r2, r3, #15
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	3310      	adds	r3, #16
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4413      	add	r3, r2
 8003da8:	3304      	adds	r3, #4
 8003daa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dc4:	7afb      	ldrb	r3, [r7, #11]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	799b      	ldrb	r3, [r3, #6]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d102      	bne.n	8003dde <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	799b      	ldrb	r3, [r3, #6]
 8003de6:	461a      	mov	r2, r3
 8003de8:	6979      	ldr	r1, [r7, #20]
 8003dea:	f002 f933 	bl	8006054 <USB_EPStartXfer>

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	460b      	mov	r3, r1
 8003e02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	7912      	ldrb	r2, [r2, #4]
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d901      	bls.n	8003e16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e04f      	b.n	8003eb6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	da0f      	bge.n	8003e3e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e1e:	78fb      	ldrb	r3, [r7, #3]
 8003e20:	f003 020f 	and.w	r2, r3, #15
 8003e24:	4613      	mov	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	3310      	adds	r3, #16
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	4413      	add	r3, r2
 8003e32:	3304      	adds	r3, #4
 8003e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	705a      	strb	r2, [r3, #1]
 8003e3c:	e00d      	b.n	8003e5a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e3e:	78fa      	ldrb	r2, [r7, #3]
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	4413      	add	r3, r2
 8003e50:	3304      	adds	r3, #4
 8003e52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_PCD_EP_SetStall+0x82>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e01d      	b.n	8003eb6 <HAL_PCD_EP_SetStall+0xbe>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68f9      	ldr	r1, [r7, #12]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f002 fcc1 	bl	8006810 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e8e:	78fb      	ldrb	r3, [r7, #3]
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d109      	bne.n	8003eac <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	7999      	ldrb	r1, [r3, #6]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f002 feb2 	bl	8006c10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	460b      	mov	r3, r1
 8003ec8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	f003 030f 	and.w	r3, r3, #15
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	7912      	ldrb	r2, [r2, #4]
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d901      	bls.n	8003edc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e042      	b.n	8003f62 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	da0f      	bge.n	8003f04 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	f003 020f 	and.w	r2, r3, #15
 8003eea:	4613      	mov	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	3310      	adds	r3, #16
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	3304      	adds	r3, #4
 8003efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	705a      	strb	r2, [r3, #1]
 8003f02:	e00f      	b.n	8003f24 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	f003 020f 	and.w	r2, r3, #15
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	4413      	add	r3, r2
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d101      	bne.n	8003f44 <HAL_PCD_EP_ClrStall+0x86>
 8003f40:	2302      	movs	r3, #2
 8003f42:	e00e      	b.n	8003f62 <HAL_PCD_EP_ClrStall+0xa4>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68f9      	ldr	r1, [r7, #12]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f002 fcca 	bl	80068ec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	460b      	mov	r3, r1
 8003f74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	da0c      	bge.n	8003f98 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	f003 020f 	and.w	r2, r3, #15
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	3310      	adds	r3, #16
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	4413      	add	r3, r2
 8003f92:	3304      	adds	r3, #4
 8003f94:	60fb      	str	r3, [r7, #12]
 8003f96:	e00c      	b.n	8003fb2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	f003 020f 	and.w	r2, r3, #15
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	4413      	add	r3, r2
 8003fae:	3304      	adds	r3, #4
 8003fb0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68f9      	ldr	r1, [r7, #12]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f002 fae9 	bl	8006590 <USB_EPStopXfer>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003fc2:	7afb      	ldrb	r3, [r7, #11]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	@ 0x28
 8003fd0:	af02      	add	r7, sp, #8
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	3310      	adds	r3, #16
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	4413      	add	r3, r2
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	695a      	ldr	r2, [r3, #20]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d901      	bls.n	8004004 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e06b      	b.n	80040dc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	429a      	cmp	r2, r3
 8004018:	d902      	bls.n	8004020 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	3303      	adds	r3, #3
 8004024:	089b      	lsrs	r3, r3, #2
 8004026:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004028:	e02a      	b.n	8004080 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	429a      	cmp	r2, r3
 800403e:	d902      	bls.n	8004046 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3303      	adds	r3, #3
 800404a:	089b      	lsrs	r3, r3, #2
 800404c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	68d9      	ldr	r1, [r3, #12]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	b2da      	uxtb	r2, r3
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	4603      	mov	r3, r0
 8004062:	6978      	ldr	r0, [r7, #20]
 8004064:	f002 fb3e 	bl	80066e4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	441a      	add	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	695a      	ldr	r2, [r3, #20]
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	441a      	add	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800408c:	699b      	ldr	r3, [r3, #24]
 800408e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	429a      	cmp	r2, r3
 8004094:	d809      	bhi.n	80040aa <PCD_WriteEmptyTxFifo+0xde>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800409e:	429a      	cmp	r2, r3
 80040a0:	d203      	bcs.n	80040aa <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1bf      	bne.n	800402a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d811      	bhi.n	80040da <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	2201      	movs	r2, #1
 80040be:	fa02 f303 	lsl.w	r3, r2, r3
 80040c2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	43db      	mvns	r3, r3
 80040d0:	6939      	ldr	r1, [r7, #16]
 80040d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040d6:	4013      	ands	r3, r2
 80040d8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3720      	adds	r7, #32
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b088      	sub	sp, #32
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	333c      	adds	r3, #60	@ 0x3c
 80040fc:	3304      	adds	r3, #4
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	4413      	add	r3, r2
 800410a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	799b      	ldrb	r3, [r3, #6]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d17b      	bne.n	8004212 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d015      	beq.n	8004150 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	4a61      	ldr	r2, [pc, #388]	@ (80042ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004128:	4293      	cmp	r3, r2
 800412a:	f240 80b9 	bls.w	80042a0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 80b3 	beq.w	80042a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004146:	461a      	mov	r2, r3
 8004148:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800414c:	6093      	str	r3, [r2, #8]
 800414e:	e0a7      	b.n	80042a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d009      	beq.n	800416e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004166:	461a      	mov	r2, r3
 8004168:	2320      	movs	r3, #32
 800416a:	6093      	str	r3, [r2, #8]
 800416c:	e098      	b.n	80042a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004174:	2b00      	cmp	r3, #0
 8004176:	f040 8093 	bne.w	80042a0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	4a4b      	ldr	r2, [pc, #300]	@ (80042ac <PCD_EP_OutXfrComplete_int+0x1c8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d90f      	bls.n	80041a2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004198:	461a      	mov	r2, r3
 800419a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800419e:	6093      	str	r3, [r2, #8]
 80041a0:	e07e      	b.n	80042a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	4613      	mov	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	4413      	add	r3, r2
 80041b4:	3304      	adds	r3, #4
 80041b6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a1a      	ldr	r2, [r3, #32]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	0159      	lsls	r1, r3, #5
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	440b      	add	r3, r1
 80041c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ce:	1ad2      	subs	r2, r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d114      	bne.n	8004204 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d109      	bne.n	80041f6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041ec:	461a      	mov	r2, r3
 80041ee:	2101      	movs	r1, #1
 80041f0:	f002 fd0e 	bl	8006c10 <USB_EP0_OutStart>
 80041f4:	e006      	b.n	8004204 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	441a      	add	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	4619      	mov	r1, r3
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f005 f85e 	bl	80092cc <HAL_PCD_DataOutStageCallback>
 8004210:	e046      	b.n	80042a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	4a26      	ldr	r2, [pc, #152]	@ (80042b0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d124      	bne.n	8004264 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004230:	461a      	mov	r2, r3
 8004232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004236:	6093      	str	r3, [r2, #8]
 8004238:	e032      	b.n	80042a0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f003 0320 	and.w	r3, r3, #32
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004250:	461a      	mov	r2, r3
 8004252:	2320      	movs	r3, #32
 8004254:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	b2db      	uxtb	r3, r3
 800425a:	4619      	mov	r1, r3
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f005 f835 	bl	80092cc <HAL_PCD_DataOutStageCallback>
 8004262:	e01d      	b.n	80042a0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d114      	bne.n	8004294 <PCD_EP_OutXfrComplete_int+0x1b0>
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	4613      	mov	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d108      	bne.n	8004294 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6818      	ldr	r0, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800428c:	461a      	mov	r2, r3
 800428e:	2100      	movs	r1, #0
 8004290:	f002 fcbe 	bl	8006c10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f005 f816 	bl	80092cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3720      	adds	r7, #32
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	4f54300a 	.word	0x4f54300a
 80042b0:	4f54310a 	.word	0x4f54310a

080042b4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	333c      	adds	r3, #60	@ 0x3c
 80042cc:	3304      	adds	r3, #4
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4a15      	ldr	r2, [pc, #84]	@ (800433c <PCD_EP_OutSetupPacket_int+0x88>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d90e      	bls.n	8004308 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d009      	beq.n	8004308 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004300:	461a      	mov	r2, r3
 8004302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004306:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f004 ffcd 	bl	80092a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4a0a      	ldr	r2, [pc, #40]	@ (800433c <PCD_EP_OutSetupPacket_int+0x88>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d90c      	bls.n	8004330 <PCD_EP_OutSetupPacket_int+0x7c>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	799b      	ldrb	r3, [r3, #6]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d108      	bne.n	8004330 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6818      	ldr	r0, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004328:	461a      	mov	r2, r3
 800432a:	2101      	movs	r1, #1
 800432c:	f002 fc70 	bl	8006c10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	4f54300a 	.word	0x4f54300a

08004340 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	70fb      	strb	r3, [r7, #3]
 800434c:	4613      	mov	r3, r2
 800434e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d107      	bne.n	800436e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800435e:	883b      	ldrh	r3, [r7, #0]
 8004360:	0419      	lsls	r1, r3, #16
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	430a      	orrs	r2, r1
 800436a:	629a      	str	r2, [r3, #40]	@ 0x28
 800436c:	e028      	b.n	80043c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004374:	0c1b      	lsrs	r3, r3, #16
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	4413      	add	r3, r2
 800437a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800437c:	2300      	movs	r3, #0
 800437e:	73fb      	strb	r3, [r7, #15]
 8004380:	e00d      	b.n	800439e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	7bfb      	ldrb	r3, [r7, #15]
 8004388:	3340      	adds	r3, #64	@ 0x40
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	0c1b      	lsrs	r3, r3, #16
 8004392:	68ba      	ldr	r2, [r7, #8]
 8004394:	4413      	add	r3, r2
 8004396:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004398:	7bfb      	ldrb	r3, [r7, #15]
 800439a:	3301      	adds	r3, #1
 800439c:	73fb      	strb	r3, [r7, #15]
 800439e:	7bfa      	ldrb	r2, [r7, #15]
 80043a0:	78fb      	ldrb	r3, [r7, #3]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d3ec      	bcc.n	8004382 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80043a8:	883b      	ldrh	r3, [r7, #0]
 80043aa:	0418      	lsls	r0, r3, #16
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6819      	ldr	r1, [r3, #0]
 80043b0:	78fb      	ldrb	r3, [r7, #3]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	4302      	orrs	r2, r0
 80043b8:	3340      	adds	r3, #64	@ 0x40
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	460b      	mov	r3, r1
 80043d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	887a      	ldrh	r2, [r7, #2]
 80043e0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e267      	b.n	80048ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	2b00      	cmp	r3, #0
 8004424:	d075      	beq.n	8004512 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004426:	4b88      	ldr	r3, [pc, #544]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 030c 	and.w	r3, r3, #12
 800442e:	2b04      	cmp	r3, #4
 8004430:	d00c      	beq.n	800444c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004432:	4b85      	ldr	r3, [pc, #532]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800443a:	2b08      	cmp	r3, #8
 800443c:	d112      	bne.n	8004464 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800443e:	4b82      	ldr	r3, [pc, #520]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004446:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800444a:	d10b      	bne.n	8004464 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444c:	4b7e      	ldr	r3, [pc, #504]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d05b      	beq.n	8004510 <HAL_RCC_OscConfig+0x108>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d157      	bne.n	8004510 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e242      	b.n	80048ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800446c:	d106      	bne.n	800447c <HAL_RCC_OscConfig+0x74>
 800446e:	4b76      	ldr	r3, [pc, #472]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a75      	ldr	r2, [pc, #468]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 8004474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	e01d      	b.n	80044b8 <HAL_RCC_OscConfig+0xb0>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004484:	d10c      	bne.n	80044a0 <HAL_RCC_OscConfig+0x98>
 8004486:	4b70      	ldr	r3, [pc, #448]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a6f      	ldr	r2, [pc, #444]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 800448c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	4b6d      	ldr	r3, [pc, #436]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a6c      	ldr	r2, [pc, #432]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 8004498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e00b      	b.n	80044b8 <HAL_RCC_OscConfig+0xb0>
 80044a0:	4b69      	ldr	r3, [pc, #420]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a68      	ldr	r2, [pc, #416]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 80044a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	4b66      	ldr	r3, [pc, #408]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a65      	ldr	r2, [pc, #404]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 80044b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d013      	beq.n	80044e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c0:	f7fd f882 	bl	80015c8 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044c8:	f7fd f87e 	bl	80015c8 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b64      	cmp	r3, #100	@ 0x64
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e207      	b.n	80048ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044da:	4b5b      	ldr	r3, [pc, #364]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0f0      	beq.n	80044c8 <HAL_RCC_OscConfig+0xc0>
 80044e6:	e014      	b.n	8004512 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e8:	f7fd f86e 	bl	80015c8 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f0:	f7fd f86a 	bl	80015c8 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b64      	cmp	r3, #100	@ 0x64
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e1f3      	b.n	80048ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004502:	4b51      	ldr	r3, [pc, #324]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0xe8>
 800450e:	e000      	b.n	8004512 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d063      	beq.n	80045e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800451e:	4b4a      	ldr	r3, [pc, #296]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f003 030c 	and.w	r3, r3, #12
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00b      	beq.n	8004542 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800452a:	4b47      	ldr	r3, [pc, #284]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004532:	2b08      	cmp	r3, #8
 8004534:	d11c      	bne.n	8004570 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004536:	4b44      	ldr	r3, [pc, #272]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d116      	bne.n	8004570 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004542:	4b41      	ldr	r3, [pc, #260]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <HAL_RCC_OscConfig+0x152>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d001      	beq.n	800455a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e1c7      	b.n	80048ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455a:	4b3b      	ldr	r3, [pc, #236]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	4937      	ldr	r1, [pc, #220]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 800456a:	4313      	orrs	r3, r2
 800456c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456e:	e03a      	b.n	80045e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d020      	beq.n	80045ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004578:	4b34      	ldr	r3, [pc, #208]	@ (800464c <HAL_RCC_OscConfig+0x244>)
 800457a:	2201      	movs	r2, #1
 800457c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457e:	f7fd f823 	bl	80015c8 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004584:	e008      	b.n	8004598 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004586:	f7fd f81f 	bl	80015c8 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d901      	bls.n	8004598 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e1a8      	b.n	80048ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004598:	4b2b      	ldr	r3, [pc, #172]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d0f0      	beq.n	8004586 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a4:	4b28      	ldr	r3, [pc, #160]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	4925      	ldr	r1, [pc, #148]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	600b      	str	r3, [r1, #0]
 80045b8:	e015      	b.n	80045e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ba:	4b24      	ldr	r3, [pc, #144]	@ (800464c <HAL_RCC_OscConfig+0x244>)
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c0:	f7fd f802 	bl	80015c8 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c8:	f7fc fffe 	bl	80015c8 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e187      	b.n	80048ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045da:	4b1b      	ldr	r3, [pc, #108]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f0      	bne.n	80045c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d036      	beq.n	8004660 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d016      	beq.n	8004628 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045fa:	4b15      	ldr	r3, [pc, #84]	@ (8004650 <HAL_RCC_OscConfig+0x248>)
 80045fc:	2201      	movs	r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004600:	f7fc ffe2 	bl	80015c8 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004608:	f7fc ffde 	bl	80015c8 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e167      	b.n	80048ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800461a:	4b0b      	ldr	r3, [pc, #44]	@ (8004648 <HAL_RCC_OscConfig+0x240>)
 800461c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0f0      	beq.n	8004608 <HAL_RCC_OscConfig+0x200>
 8004626:	e01b      	b.n	8004660 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004628:	4b09      	ldr	r3, [pc, #36]	@ (8004650 <HAL_RCC_OscConfig+0x248>)
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800462e:	f7fc ffcb 	bl	80015c8 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004634:	e00e      	b.n	8004654 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004636:	f7fc ffc7 	bl	80015c8 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d907      	bls.n	8004654 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e150      	b.n	80048ea <HAL_RCC_OscConfig+0x4e2>
 8004648:	40023800 	.word	0x40023800
 800464c:	42470000 	.word	0x42470000
 8004650:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004654:	4b88      	ldr	r3, [pc, #544]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 8004656:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1ea      	bne.n	8004636 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	2b00      	cmp	r3, #0
 800466a:	f000 8097 	beq.w	800479c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800466e:	2300      	movs	r3, #0
 8004670:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004672:	4b81      	ldr	r3, [pc, #516]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004676:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10f      	bne.n	800469e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800467e:	2300      	movs	r3, #0
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	4b7d      	ldr	r3, [pc, #500]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004686:	4a7c      	ldr	r2, [pc, #496]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 8004688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800468c:	6413      	str	r3, [r2, #64]	@ 0x40
 800468e:	4b7a      	ldr	r3, [pc, #488]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 8004690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004696:	60bb      	str	r3, [r7, #8]
 8004698:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800469a:	2301      	movs	r3, #1
 800469c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469e:	4b77      	ldr	r3, [pc, #476]	@ (800487c <HAL_RCC_OscConfig+0x474>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d118      	bne.n	80046dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046aa:	4b74      	ldr	r3, [pc, #464]	@ (800487c <HAL_RCC_OscConfig+0x474>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a73      	ldr	r2, [pc, #460]	@ (800487c <HAL_RCC_OscConfig+0x474>)
 80046b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046b6:	f7fc ff87 	bl	80015c8 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046be:	f7fc ff83 	bl	80015c8 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e10c      	b.n	80048ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d0:	4b6a      	ldr	r3, [pc, #424]	@ (800487c <HAL_RCC_OscConfig+0x474>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d106      	bne.n	80046f2 <HAL_RCC_OscConfig+0x2ea>
 80046e4:	4b64      	ldr	r3, [pc, #400]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 80046e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e8:	4a63      	ldr	r2, [pc, #396]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80046f0:	e01c      	b.n	800472c <HAL_RCC_OscConfig+0x324>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	2b05      	cmp	r3, #5
 80046f8:	d10c      	bne.n	8004714 <HAL_RCC_OscConfig+0x30c>
 80046fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 80046fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046fe:	4a5e      	ldr	r2, [pc, #376]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 8004700:	f043 0304 	orr.w	r3, r3, #4
 8004704:	6713      	str	r3, [r2, #112]	@ 0x70
 8004706:	4b5c      	ldr	r3, [pc, #368]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 8004708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470a:	4a5b      	ldr	r2, [pc, #364]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 800470c:	f043 0301 	orr.w	r3, r3, #1
 8004710:	6713      	str	r3, [r2, #112]	@ 0x70
 8004712:	e00b      	b.n	800472c <HAL_RCC_OscConfig+0x324>
 8004714:	4b58      	ldr	r3, [pc, #352]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 8004716:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004718:	4a57      	ldr	r2, [pc, #348]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 800471a:	f023 0301 	bic.w	r3, r3, #1
 800471e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004720:	4b55      	ldr	r3, [pc, #340]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 8004722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004724:	4a54      	ldr	r2, [pc, #336]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 8004726:	f023 0304 	bic.w	r3, r3, #4
 800472a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d015      	beq.n	8004760 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004734:	f7fc ff48 	bl	80015c8 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473a:	e00a      	b.n	8004752 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473c:	f7fc ff44 	bl	80015c8 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800474a:	4293      	cmp	r3, r2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e0cb      	b.n	80048ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004752:	4b49      	ldr	r3, [pc, #292]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 8004754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d0ee      	beq.n	800473c <HAL_RCC_OscConfig+0x334>
 800475e:	e014      	b.n	800478a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004760:	f7fc ff32 	bl	80015c8 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004766:	e00a      	b.n	800477e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004768:	f7fc ff2e 	bl	80015c8 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004776:	4293      	cmp	r3, r2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e0b5      	b.n	80048ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800477e:	4b3e      	ldr	r3, [pc, #248]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1ee      	bne.n	8004768 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800478a:	7dfb      	ldrb	r3, [r7, #23]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d105      	bne.n	800479c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004790:	4b39      	ldr	r3, [pc, #228]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 8004792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004794:	4a38      	ldr	r2, [pc, #224]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 8004796:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800479a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80a1 	beq.w	80048e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047a6:	4b34      	ldr	r3, [pc, #208]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 030c 	and.w	r3, r3, #12
 80047ae:	2b08      	cmp	r3, #8
 80047b0:	d05c      	beq.n	800486c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d141      	bne.n	800483e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ba:	4b31      	ldr	r3, [pc, #196]	@ (8004880 <HAL_RCC_OscConfig+0x478>)
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c0:	f7fc ff02 	bl	80015c8 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c8:	f7fc fefe 	bl	80015c8 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e087      	b.n	80048ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047da:	4b27      	ldr	r3, [pc, #156]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f0      	bne.n	80047c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	69da      	ldr	r2, [r3, #28]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f4:	019b      	lsls	r3, r3, #6
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047fc:	085b      	lsrs	r3, r3, #1
 80047fe:	3b01      	subs	r3, #1
 8004800:	041b      	lsls	r3, r3, #16
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004808:	061b      	lsls	r3, r3, #24
 800480a:	491b      	ldr	r1, [pc, #108]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 800480c:	4313      	orrs	r3, r2
 800480e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004810:	4b1b      	ldr	r3, [pc, #108]	@ (8004880 <HAL_RCC_OscConfig+0x478>)
 8004812:	2201      	movs	r2, #1
 8004814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004816:	f7fc fed7 	bl	80015c8 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800481e:	f7fc fed3 	bl	80015c8 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e05c      	b.n	80048ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004830:	4b11      	ldr	r3, [pc, #68]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0f0      	beq.n	800481e <HAL_RCC_OscConfig+0x416>
 800483c:	e054      	b.n	80048e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800483e:	4b10      	ldr	r3, [pc, #64]	@ (8004880 <HAL_RCC_OscConfig+0x478>)
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004844:	f7fc fec0 	bl	80015c8 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800484c:	f7fc febc 	bl	80015c8 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e045      	b.n	80048ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485e:	4b06      	ldr	r3, [pc, #24]	@ (8004878 <HAL_RCC_OscConfig+0x470>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f0      	bne.n	800484c <HAL_RCC_OscConfig+0x444>
 800486a:	e03d      	b.n	80048e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d107      	bne.n	8004884 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e038      	b.n	80048ea <HAL_RCC_OscConfig+0x4e2>
 8004878:	40023800 	.word	0x40023800
 800487c:	40007000 	.word	0x40007000
 8004880:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004884:	4b1b      	ldr	r3, [pc, #108]	@ (80048f4 <HAL_RCC_OscConfig+0x4ec>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d028      	beq.n	80048e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800489c:	429a      	cmp	r2, r3
 800489e:	d121      	bne.n	80048e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d11a      	bne.n	80048e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80048b4:	4013      	ands	r3, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048bc:	4293      	cmp	r3, r2
 80048be:	d111      	bne.n	80048e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ca:	085b      	lsrs	r3, r3, #1
 80048cc:	3b01      	subs	r3, #1
 80048ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d107      	bne.n	80048e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d001      	beq.n	80048e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3718      	adds	r7, #24
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40023800 	.word	0x40023800

080048f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e0cc      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800490c:	4b68      	ldr	r3, [pc, #416]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d90c      	bls.n	8004934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491a:	4b65      	ldr	r3, [pc, #404]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004922:	4b63      	ldr	r3, [pc, #396]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d001      	beq.n	8004934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e0b8      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d020      	beq.n	8004982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800494c:	4b59      	ldr	r3, [pc, #356]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	4a58      	ldr	r2, [pc, #352]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004956:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004964:	4b53      	ldr	r3, [pc, #332]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	4a52      	ldr	r2, [pc, #328]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800496e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004970:	4b50      	ldr	r3, [pc, #320]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	494d      	ldr	r1, [pc, #308]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	4313      	orrs	r3, r2
 8004980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d044      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d107      	bne.n	80049a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004996:	4b47      	ldr	r3, [pc, #284]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d119      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e07f      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d003      	beq.n	80049b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d107      	bne.n	80049c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e06f      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e067      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049d6:	4b37      	ldr	r3, [pc, #220]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f023 0203 	bic.w	r2, r3, #3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	4934      	ldr	r1, [pc, #208]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049e8:	f7fc fdee 	bl	80015c8 <HAL_GetTick>
 80049ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ee:	e00a      	b.n	8004a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f0:	f7fc fdea 	bl	80015c8 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e04f      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a06:	4b2b      	ldr	r3, [pc, #172]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 020c 	and.w	r2, r3, #12
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d1eb      	bne.n	80049f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a18:	4b25      	ldr	r3, [pc, #148]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d20c      	bcs.n	8004a40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a26:	4b22      	ldr	r3, [pc, #136]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2e:	4b20      	ldr	r3, [pc, #128]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e032      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d008      	beq.n	8004a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a4c:	4b19      	ldr	r3, [pc, #100]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	4916      	ldr	r1, [pc, #88]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d009      	beq.n	8004a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a6a:	4b12      	ldr	r3, [pc, #72]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	490e      	ldr	r1, [pc, #56]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a7e:	f000 f821 	bl	8004ac4 <HAL_RCC_GetSysClockFreq>
 8004a82:	4602      	mov	r2, r0
 8004a84:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	091b      	lsrs	r3, r3, #4
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	490a      	ldr	r1, [pc, #40]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a90:	5ccb      	ldrb	r3, [r1, r3]
 8004a92:	fa22 f303 	lsr.w	r3, r2, r3
 8004a96:	4a09      	ldr	r2, [pc, #36]	@ (8004abc <HAL_RCC_ClockConfig+0x1c4>)
 8004a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004a9a:	4b09      	ldr	r3, [pc, #36]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fc fd4e 	bl	8001540 <HAL_InitTick>

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40023c00 	.word	0x40023c00
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	080098dc 	.word	0x080098dc
 8004abc:	2000002c 	.word	0x2000002c
 8004ac0:	20000030 	.word	0x20000030

08004ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ac8:	b090      	sub	sp, #64	@ 0x40
 8004aca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004adc:	4b59      	ldr	r3, [pc, #356]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 030c 	and.w	r3, r3, #12
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d00d      	beq.n	8004b04 <HAL_RCC_GetSysClockFreq+0x40>
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	f200 80a1 	bhi.w	8004c30 <HAL_RCC_GetSysClockFreq+0x16c>
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <HAL_RCC_GetSysClockFreq+0x34>
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d003      	beq.n	8004afe <HAL_RCC_GetSysClockFreq+0x3a>
 8004af6:	e09b      	b.n	8004c30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004af8:	4b53      	ldr	r3, [pc, #332]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x184>)
 8004afa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004afc:	e09b      	b.n	8004c36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004afe:	4b53      	ldr	r3, [pc, #332]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0x188>)
 8004b00:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b02:	e098      	b.n	8004c36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b04:	4b4f      	ldr	r3, [pc, #316]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b0c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b0e:	4b4d      	ldr	r3, [pc, #308]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d028      	beq.n	8004b6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	099b      	lsrs	r3, r3, #6
 8004b20:	2200      	movs	r2, #0
 8004b22:	623b      	str	r3, [r7, #32]
 8004b24:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b26:	6a3b      	ldr	r3, [r7, #32]
 8004b28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	4b47      	ldr	r3, [pc, #284]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0x188>)
 8004b30:	fb03 f201 	mul.w	r2, r3, r1
 8004b34:	2300      	movs	r3, #0
 8004b36:	fb00 f303 	mul.w	r3, r0, r3
 8004b3a:	4413      	add	r3, r2
 8004b3c:	4a43      	ldr	r2, [pc, #268]	@ (8004c4c <HAL_RCC_GetSysClockFreq+0x188>)
 8004b3e:	fba0 1202 	umull	r1, r2, r0, r2
 8004b42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b44:	460a      	mov	r2, r1
 8004b46:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b4a:	4413      	add	r3, r2
 8004b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b50:	2200      	movs	r2, #0
 8004b52:	61bb      	str	r3, [r7, #24]
 8004b54:	61fa      	str	r2, [r7, #28]
 8004b56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004b5e:	f7fb fb3b 	bl	80001d8 <__aeabi_uldivmod>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4613      	mov	r3, r2
 8004b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b6a:	e053      	b.n	8004c14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b6c:	4b35      	ldr	r3, [pc, #212]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	099b      	lsrs	r3, r3, #6
 8004b72:	2200      	movs	r2, #0
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	617a      	str	r2, [r7, #20]
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b7e:	f04f 0b00 	mov.w	fp, #0
 8004b82:	4652      	mov	r2, sl
 8004b84:	465b      	mov	r3, fp
 8004b86:	f04f 0000 	mov.w	r0, #0
 8004b8a:	f04f 0100 	mov.w	r1, #0
 8004b8e:	0159      	lsls	r1, r3, #5
 8004b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b94:	0150      	lsls	r0, r2, #5
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	ebb2 080a 	subs.w	r8, r2, sl
 8004b9e:	eb63 090b 	sbc.w	r9, r3, fp
 8004ba2:	f04f 0200 	mov.w	r2, #0
 8004ba6:	f04f 0300 	mov.w	r3, #0
 8004baa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004bae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004bb2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004bb6:	ebb2 0408 	subs.w	r4, r2, r8
 8004bba:	eb63 0509 	sbc.w	r5, r3, r9
 8004bbe:	f04f 0200 	mov.w	r2, #0
 8004bc2:	f04f 0300 	mov.w	r3, #0
 8004bc6:	00eb      	lsls	r3, r5, #3
 8004bc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bcc:	00e2      	lsls	r2, r4, #3
 8004bce:	4614      	mov	r4, r2
 8004bd0:	461d      	mov	r5, r3
 8004bd2:	eb14 030a 	adds.w	r3, r4, sl
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	eb45 030b 	adc.w	r3, r5, fp
 8004bdc:	607b      	str	r3, [r7, #4]
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	f04f 0300 	mov.w	r3, #0
 8004be6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bea:	4629      	mov	r1, r5
 8004bec:	028b      	lsls	r3, r1, #10
 8004bee:	4621      	mov	r1, r4
 8004bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	028a      	lsls	r2, r1, #10
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bfe:	2200      	movs	r2, #0
 8004c00:	60bb      	str	r3, [r7, #8]
 8004c02:	60fa      	str	r2, [r7, #12]
 8004c04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c08:	f7fb fae6 	bl	80001d8 <__aeabi_uldivmod>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4613      	mov	r3, r2
 8004c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c14:	4b0b      	ldr	r3, [pc, #44]	@ (8004c44 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	3301      	adds	r3, #1
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004c24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c2e:	e002      	b.n	8004c36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c30:	4b05      	ldr	r3, [pc, #20]	@ (8004c48 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c32:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3740      	adds	r7, #64	@ 0x40
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c42:	bf00      	nop
 8004c44:	40023800 	.word	0x40023800
 8004c48:	00f42400 	.word	0x00f42400
 8004c4c:	017d7840 	.word	0x017d7840

08004c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c54:	4b03      	ldr	r3, [pc, #12]	@ (8004c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c56:	681b      	ldr	r3, [r3, #0]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	2000002c 	.word	0x2000002c

08004c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c6c:	f7ff fff0 	bl	8004c50 <HAL_RCC_GetHCLKFreq>
 8004c70:	4602      	mov	r2, r0
 8004c72:	4b05      	ldr	r3, [pc, #20]	@ (8004c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	0a9b      	lsrs	r3, r3, #10
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	4903      	ldr	r1, [pc, #12]	@ (8004c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c7e:	5ccb      	ldrb	r3, [r1, r3]
 8004c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	080098ec 	.word	0x080098ec

08004c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e041      	b.n	8004d26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fc fb2e 	bl	8001318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f000 fab2 	bl	8005238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d001      	beq.n	8004d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e044      	b.n	8004dd2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a1e      	ldr	r2, [pc, #120]	@ (8004de0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d018      	beq.n	8004d9c <HAL_TIM_Base_Start_IT+0x6c>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d72:	d013      	beq.n	8004d9c <HAL_TIM_Base_Start_IT+0x6c>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a1a      	ldr	r2, [pc, #104]	@ (8004de4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d00e      	beq.n	8004d9c <HAL_TIM_Base_Start_IT+0x6c>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a19      	ldr	r2, [pc, #100]	@ (8004de8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d009      	beq.n	8004d9c <HAL_TIM_Base_Start_IT+0x6c>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a17      	ldr	r2, [pc, #92]	@ (8004dec <HAL_TIM_Base_Start_IT+0xbc>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d004      	beq.n	8004d9c <HAL_TIM_Base_Start_IT+0x6c>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a16      	ldr	r2, [pc, #88]	@ (8004df0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d111      	bne.n	8004dc0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2b06      	cmp	r3, #6
 8004dac:	d010      	beq.n	8004dd0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f042 0201 	orr.w	r2, r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbe:	e007      	b.n	8004dd0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40010000 	.word	0x40010000
 8004de4:	40000400 	.word	0x40000400
 8004de8:	40000800 	.word	0x40000800
 8004dec:	40000c00 	.word	0x40000c00
 8004df0:	40014000 	.word	0x40014000

08004df4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d020      	beq.n	8004e58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d01b      	beq.n	8004e58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f06f 0202 	mvn.w	r2, #2
 8004e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f9db 	bl	80051fa <HAL_TIM_IC_CaptureCallback>
 8004e44:	e005      	b.n	8004e52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f9cd 	bl	80051e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f9de 	bl	800520e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d020      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f003 0304 	and.w	r3, r3, #4
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01b      	beq.n	8004ea4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0204 	mvn.w	r2, #4
 8004e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2202      	movs	r2, #2
 8004e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d003      	beq.n	8004e92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f9b5 	bl	80051fa <HAL_TIM_IC_CaptureCallback>
 8004e90:	e005      	b.n	8004e9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f9a7 	bl	80051e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f9b8 	bl	800520e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d020      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f003 0308 	and.w	r3, r3, #8
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01b      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f06f 0208 	mvn.w	r2, #8
 8004ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2204      	movs	r2, #4
 8004ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f98f 	bl	80051fa <HAL_TIM_IC_CaptureCallback>
 8004edc:	e005      	b.n	8004eea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f981 	bl	80051e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f992 	bl	800520e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f003 0310 	and.w	r3, r3, #16
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d020      	beq.n	8004f3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01b      	beq.n	8004f3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0210 	mvn.w	r2, #16
 8004f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2208      	movs	r2, #8
 8004f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f969 	bl	80051fa <HAL_TIM_IC_CaptureCallback>
 8004f28:	e005      	b.n	8004f36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f95b 	bl	80051e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f96c 	bl	800520e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00c      	beq.n	8004f60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d007      	beq.n	8004f60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0201 	mvn.w	r2, #1
 8004f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7fb fafa 	bl	8000554 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00c      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 fb84 	bl	800568c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00c      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f93d 	bl	8005222 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00c      	beq.n	8004fcc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d007      	beq.n	8004fcc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f06f 0220 	mvn.w	r2, #32
 8004fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fb56 	bl	8005678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_TIM_ConfigClockSource+0x1c>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e0b4      	b.n	800515a <HAL_TIM_ConfigClockSource+0x186>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800500e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005016:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005028:	d03e      	beq.n	80050a8 <HAL_TIM_ConfigClockSource+0xd4>
 800502a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800502e:	f200 8087 	bhi.w	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005036:	f000 8086 	beq.w	8005146 <HAL_TIM_ConfigClockSource+0x172>
 800503a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800503e:	d87f      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005040:	2b70      	cmp	r3, #112	@ 0x70
 8005042:	d01a      	beq.n	800507a <HAL_TIM_ConfigClockSource+0xa6>
 8005044:	2b70      	cmp	r3, #112	@ 0x70
 8005046:	d87b      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005048:	2b60      	cmp	r3, #96	@ 0x60
 800504a:	d050      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x11a>
 800504c:	2b60      	cmp	r3, #96	@ 0x60
 800504e:	d877      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005050:	2b50      	cmp	r3, #80	@ 0x50
 8005052:	d03c      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0xfa>
 8005054:	2b50      	cmp	r3, #80	@ 0x50
 8005056:	d873      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005058:	2b40      	cmp	r3, #64	@ 0x40
 800505a:	d058      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x13a>
 800505c:	2b40      	cmp	r3, #64	@ 0x40
 800505e:	d86f      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005060:	2b30      	cmp	r3, #48	@ 0x30
 8005062:	d064      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 8005064:	2b30      	cmp	r3, #48	@ 0x30
 8005066:	d86b      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005068:	2b20      	cmp	r3, #32
 800506a:	d060      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 800506c:	2b20      	cmp	r3, #32
 800506e:	d867      	bhi.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d05c      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 8005074:	2b10      	cmp	r3, #16
 8005076:	d05a      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x15a>
 8005078:	e062      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800508a:	f000 fa66 	bl	800555a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800509c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	609a      	str	r2, [r3, #8]
      break;
 80050a6:	e04f      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050b8:	f000 fa4f 	bl	800555a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050ca:	609a      	str	r2, [r3, #8]
      break;
 80050cc:	e03c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050da:	461a      	mov	r2, r3
 80050dc:	f000 f9c3 	bl	8005466 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2150      	movs	r1, #80	@ 0x50
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fa1c 	bl	8005524 <TIM_ITRx_SetConfig>
      break;
 80050ec:	e02c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050fa:	461a      	mov	r2, r3
 80050fc:	f000 f9e2 	bl	80054c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2160      	movs	r1, #96	@ 0x60
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fa0c 	bl	8005524 <TIM_ITRx_SetConfig>
      break;
 800510c:	e01c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800511a:	461a      	mov	r2, r3
 800511c:	f000 f9a3 	bl	8005466 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2140      	movs	r1, #64	@ 0x40
 8005126:	4618      	mov	r0, r3
 8005128:	f000 f9fc 	bl	8005524 <TIM_ITRx_SetConfig>
      break;
 800512c:	e00c      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4619      	mov	r1, r3
 8005138:	4610      	mov	r0, r2
 800513a:	f000 f9f3 	bl	8005524 <TIM_ITRx_SetConfig>
      break;
 800513e:	e003      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
      break;
 8005144:	e000      	b.n	8005148 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005146:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_TIM_SlaveConfigSynchro+0x18>
 8005176:	2302      	movs	r3, #2
 8005178:	e031      	b.n	80051de <HAL_TIM_SlaveConfigSynchro+0x7c>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2202      	movs	r2, #2
 8005186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800518a:	6839      	ldr	r1, [r7, #0]
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f8d9 	bl	8005344 <TIM_SlaveTimer_SetConfig>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d009      	beq.n	80051ac <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e018      	b.n	80051de <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051ba:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68da      	ldr	r2, [r3, #12]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051ca:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b083      	sub	sp, #12
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051ee:	bf00      	nop
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005216:	bf00      	nop
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
	...

08005238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a37      	ldr	r2, [pc, #220]	@ (8005328 <TIM_Base_SetConfig+0xf0>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00f      	beq.n	8005270 <TIM_Base_SetConfig+0x38>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005256:	d00b      	beq.n	8005270 <TIM_Base_SetConfig+0x38>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a34      	ldr	r2, [pc, #208]	@ (800532c <TIM_Base_SetConfig+0xf4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d007      	beq.n	8005270 <TIM_Base_SetConfig+0x38>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a33      	ldr	r2, [pc, #204]	@ (8005330 <TIM_Base_SetConfig+0xf8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d003      	beq.n	8005270 <TIM_Base_SetConfig+0x38>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a32      	ldr	r2, [pc, #200]	@ (8005334 <TIM_Base_SetConfig+0xfc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d108      	bne.n	8005282 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a28      	ldr	r2, [pc, #160]	@ (8005328 <TIM_Base_SetConfig+0xf0>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d01b      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005290:	d017      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a25      	ldr	r2, [pc, #148]	@ (800532c <TIM_Base_SetConfig+0xf4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a24      	ldr	r2, [pc, #144]	@ (8005330 <TIM_Base_SetConfig+0xf8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d00f      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a23      	ldr	r2, [pc, #140]	@ (8005334 <TIM_Base_SetConfig+0xfc>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d00b      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a22      	ldr	r2, [pc, #136]	@ (8005338 <TIM_Base_SetConfig+0x100>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d007      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a21      	ldr	r2, [pc, #132]	@ (800533c <TIM_Base_SetConfig+0x104>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d003      	beq.n	80052c2 <TIM_Base_SetConfig+0x8a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a20      	ldr	r2, [pc, #128]	@ (8005340 <TIM_Base_SetConfig+0x108>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d108      	bne.n	80052d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a0c      	ldr	r2, [pc, #48]	@ (8005328 <TIM_Base_SetConfig+0xf0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d103      	bne.n	8005302 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	691a      	ldr	r2, [r3, #16]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f043 0204 	orr.w	r2, r3, #4
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	601a      	str	r2, [r3, #0]
}
 800531a:	bf00      	nop
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	40010000 	.word	0x40010000
 800532c:	40000400 	.word	0x40000400
 8005330:	40000800 	.word	0x40000800
 8005334:	40000c00 	.word	0x40000c00
 8005338:	40014000 	.word	0x40014000
 800533c:	40014400 	.word	0x40014400
 8005340:	40014800 	.word	0x40014800

08005344 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005360:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f023 0307 	bic.w	r3, r3, #7
 8005372:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4313      	orrs	r3, r2
 800537c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b70      	cmp	r3, #112	@ 0x70
 800538c:	d01a      	beq.n	80053c4 <TIM_SlaveTimer_SetConfig+0x80>
 800538e:	2b70      	cmp	r3, #112	@ 0x70
 8005390:	d860      	bhi.n	8005454 <TIM_SlaveTimer_SetConfig+0x110>
 8005392:	2b60      	cmp	r3, #96	@ 0x60
 8005394:	d054      	beq.n	8005440 <TIM_SlaveTimer_SetConfig+0xfc>
 8005396:	2b60      	cmp	r3, #96	@ 0x60
 8005398:	d85c      	bhi.n	8005454 <TIM_SlaveTimer_SetConfig+0x110>
 800539a:	2b50      	cmp	r3, #80	@ 0x50
 800539c:	d046      	beq.n	800542c <TIM_SlaveTimer_SetConfig+0xe8>
 800539e:	2b50      	cmp	r3, #80	@ 0x50
 80053a0:	d858      	bhi.n	8005454 <TIM_SlaveTimer_SetConfig+0x110>
 80053a2:	2b40      	cmp	r3, #64	@ 0x40
 80053a4:	d019      	beq.n	80053da <TIM_SlaveTimer_SetConfig+0x96>
 80053a6:	2b40      	cmp	r3, #64	@ 0x40
 80053a8:	d854      	bhi.n	8005454 <TIM_SlaveTimer_SetConfig+0x110>
 80053aa:	2b30      	cmp	r3, #48	@ 0x30
 80053ac:	d055      	beq.n	800545a <TIM_SlaveTimer_SetConfig+0x116>
 80053ae:	2b30      	cmp	r3, #48	@ 0x30
 80053b0:	d850      	bhi.n	8005454 <TIM_SlaveTimer_SetConfig+0x110>
 80053b2:	2b20      	cmp	r3, #32
 80053b4:	d051      	beq.n	800545a <TIM_SlaveTimer_SetConfig+0x116>
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d84c      	bhi.n	8005454 <TIM_SlaveTimer_SetConfig+0x110>
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d04d      	beq.n	800545a <TIM_SlaveTimer_SetConfig+0x116>
 80053be:	2b10      	cmp	r3, #16
 80053c0:	d04b      	beq.n	800545a <TIM_SlaveTimer_SetConfig+0x116>
 80053c2:	e047      	b.n	8005454 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80053d4:	f000 f8c1 	bl	800555a <TIM_ETR_SetConfig>
      break;
 80053d8:	e040      	b.n	800545c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b05      	cmp	r3, #5
 80053e0:	d101      	bne.n	80053e6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e03b      	b.n	800545e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6a1a      	ldr	r2, [r3, #32]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0201 	bic.w	r2, r2, #1
 80053fc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800540c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	4313      	orrs	r3, r2
 8005418:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	621a      	str	r2, [r3, #32]
      break;
 800542a:	e017      	b.n	800545c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005438:	461a      	mov	r2, r3
 800543a:	f000 f814 	bl	8005466 <TIM_TI1_ConfigInputStage>
      break;
 800543e:	e00d      	b.n	800545c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800544c:	461a      	mov	r2, r3
 800544e:	f000 f839 	bl	80054c4 <TIM_TI2_ConfigInputStage>
      break;
 8005452:	e003      	b.n	800545c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	75fb      	strb	r3, [r7, #23]
      break;
 8005458:	e000      	b.n	800545c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800545a:	bf00      	nop
  }

  return status;
 800545c:	7dfb      	ldrb	r3, [r7, #23]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3718      	adds	r7, #24
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005466:	b480      	push	{r7}
 8005468:	b087      	sub	sp, #28
 800546a:	af00      	add	r7, sp, #0
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6a1b      	ldr	r3, [r3, #32]
 800547c:	f023 0201 	bic.w	r2, r3, #1
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005490:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	011b      	lsls	r3, r3, #4
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f023 030a 	bic.w	r3, r3, #10
 80054a2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	621a      	str	r2, [r3, #32]
}
 80054b8:	bf00      	nop
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f023 0210 	bic.w	r2, r3, #16
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	031b      	lsls	r3, r3, #12
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005500:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	621a      	str	r2, [r3, #32]
}
 8005518:	bf00      	nop
 800551a:	371c      	adds	r7, #28
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800553a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	f043 0307 	orr.w	r3, r3, #7
 8005546:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	609a      	str	r2, [r3, #8]
}
 800554e:	bf00      	nop
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800555a:	b480      	push	{r7}
 800555c:	b087      	sub	sp, #28
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	607a      	str	r2, [r7, #4]
 8005566:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005574:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	021a      	lsls	r2, r3, #8
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	431a      	orrs	r2, r3
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	4313      	orrs	r3, r2
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	609a      	str	r2, [r3, #8]
}
 800558e:	bf00      	nop
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
	...

0800559c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e050      	b.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d018      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005600:	d013      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a18      	ldr	r2, [pc, #96]	@ (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00e      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a16      	ldr	r2, [pc, #88]	@ (800566c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d009      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a15      	ldr	r2, [pc, #84]	@ (8005670 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a13      	ldr	r2, [pc, #76]	@ (8005674 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d10c      	bne.n	8005644 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	4313      	orrs	r3, r2
 800563a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	40010000 	.word	0x40010000
 8005668:	40000400 	.word	0x40000400
 800566c:	40000800 	.word	0x40000800
 8005670:	40000c00 	.word	0x40000c00
 8005674:	40014000 	.word	0x40014000

08005678 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056a0:	b084      	sub	sp, #16
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	f107 001c 	add.w	r0, r7, #28
 80056ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056b2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d123      	bne.n	8005702 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80056ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80056e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d105      	bne.n	80056f6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f001 fae8 	bl	8006ccc <USB_CoreReset>
 80056fc:	4603      	mov	r3, r0
 80056fe:	73fb      	strb	r3, [r7, #15]
 8005700:	e01b      	b.n	800573a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f001 fadc 	bl	8006ccc <USB_CoreReset>
 8005714:	4603      	mov	r3, r0
 8005716:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005718:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800571c:	2b00      	cmp	r3, #0
 800571e:	d106      	bne.n	800572e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005724:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	639a      	str	r2, [r3, #56]	@ 0x38
 800572c:	e005      	b.n	800573a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005732:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800573a:	7fbb      	ldrb	r3, [r7, #30]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d10b      	bne.n	8005758 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f043 0206 	orr.w	r2, r3, #6
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f043 0220 	orr.w	r2, r3, #32
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005758:	7bfb      	ldrb	r3, [r7, #15]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005764:	b004      	add	sp, #16
 8005766:	4770      	bx	lr

08005768 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	4613      	mov	r3, r2
 8005774:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	2b02      	cmp	r3, #2
 800577a:	d165      	bne.n	8005848 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	4a41      	ldr	r2, [pc, #260]	@ (8005884 <USB_SetTurnaroundTime+0x11c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d906      	bls.n	8005792 <USB_SetTurnaroundTime+0x2a>
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	4a40      	ldr	r2, [pc, #256]	@ (8005888 <USB_SetTurnaroundTime+0x120>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d202      	bcs.n	8005792 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800578c:	230f      	movs	r3, #15
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	e062      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	4a3c      	ldr	r2, [pc, #240]	@ (8005888 <USB_SetTurnaroundTime+0x120>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d306      	bcc.n	80057a8 <USB_SetTurnaroundTime+0x40>
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	4a3b      	ldr	r2, [pc, #236]	@ (800588c <USB_SetTurnaroundTime+0x124>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d202      	bcs.n	80057a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80057a2:	230e      	movs	r3, #14
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e057      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4a38      	ldr	r2, [pc, #224]	@ (800588c <USB_SetTurnaroundTime+0x124>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d306      	bcc.n	80057be <USB_SetTurnaroundTime+0x56>
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4a37      	ldr	r2, [pc, #220]	@ (8005890 <USB_SetTurnaroundTime+0x128>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d202      	bcs.n	80057be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80057b8:	230d      	movs	r3, #13
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	e04c      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	4a33      	ldr	r2, [pc, #204]	@ (8005890 <USB_SetTurnaroundTime+0x128>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d306      	bcc.n	80057d4 <USB_SetTurnaroundTime+0x6c>
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	4a32      	ldr	r2, [pc, #200]	@ (8005894 <USB_SetTurnaroundTime+0x12c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d802      	bhi.n	80057d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80057ce:	230c      	movs	r3, #12
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	e041      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4a2f      	ldr	r2, [pc, #188]	@ (8005894 <USB_SetTurnaroundTime+0x12c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d906      	bls.n	80057ea <USB_SetTurnaroundTime+0x82>
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4a2e      	ldr	r2, [pc, #184]	@ (8005898 <USB_SetTurnaroundTime+0x130>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d802      	bhi.n	80057ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80057e4:	230b      	movs	r3, #11
 80057e6:	617b      	str	r3, [r7, #20]
 80057e8:	e036      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005898 <USB_SetTurnaroundTime+0x130>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d906      	bls.n	8005800 <USB_SetTurnaroundTime+0x98>
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	4a29      	ldr	r2, [pc, #164]	@ (800589c <USB_SetTurnaroundTime+0x134>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d802      	bhi.n	8005800 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80057fa:	230a      	movs	r3, #10
 80057fc:	617b      	str	r3, [r7, #20]
 80057fe:	e02b      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4a26      	ldr	r2, [pc, #152]	@ (800589c <USB_SetTurnaroundTime+0x134>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d906      	bls.n	8005816 <USB_SetTurnaroundTime+0xae>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4a25      	ldr	r2, [pc, #148]	@ (80058a0 <USB_SetTurnaroundTime+0x138>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d202      	bcs.n	8005816 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005810:	2309      	movs	r3, #9
 8005812:	617b      	str	r3, [r7, #20]
 8005814:	e020      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	4a21      	ldr	r2, [pc, #132]	@ (80058a0 <USB_SetTurnaroundTime+0x138>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d306      	bcc.n	800582c <USB_SetTurnaroundTime+0xc4>
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	4a20      	ldr	r2, [pc, #128]	@ (80058a4 <USB_SetTurnaroundTime+0x13c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d802      	bhi.n	800582c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005826:	2308      	movs	r3, #8
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	e015      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4a1d      	ldr	r2, [pc, #116]	@ (80058a4 <USB_SetTurnaroundTime+0x13c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d906      	bls.n	8005842 <USB_SetTurnaroundTime+0xda>
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4a1c      	ldr	r2, [pc, #112]	@ (80058a8 <USB_SetTurnaroundTime+0x140>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d202      	bcs.n	8005842 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800583c:	2307      	movs	r3, #7
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	e00a      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005842:	2306      	movs	r3, #6
 8005844:	617b      	str	r3, [r7, #20]
 8005846:	e007      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d102      	bne.n	8005854 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800584e:	2309      	movs	r3, #9
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	e001      	b.n	8005858 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005854:	2309      	movs	r3, #9
 8005856:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	68da      	ldr	r2, [r3, #12]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	029b      	lsls	r3, r3, #10
 800586c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005870:	431a      	orrs	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	371c      	adds	r7, #28
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	00d8acbf 	.word	0x00d8acbf
 8005888:	00e4e1c0 	.word	0x00e4e1c0
 800588c:	00f42400 	.word	0x00f42400
 8005890:	01067380 	.word	0x01067380
 8005894:	011a499f 	.word	0x011a499f
 8005898:	01312cff 	.word	0x01312cff
 800589c:	014ca43f 	.word	0x014ca43f
 80058a0:	016e3600 	.word	0x016e3600
 80058a4:	01a6ab1f 	.word	0x01a6ab1f
 80058a8:	01e84800 	.word	0x01e84800

080058ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f043 0201 	orr.w	r2, r3, #1
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058ce:	b480      	push	{r7}
 80058d0:	b083      	sub	sp, #12
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f023 0201 	bic.w	r2, r3, #1
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d115      	bne.n	800593e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800591e:	200a      	movs	r0, #10
 8005920:	f7fb fe5e 	bl	80015e0 <HAL_Delay>
      ms += 10U;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	330a      	adds	r3, #10
 8005928:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f001 f93f 	bl	8006bae <USB_GetMode>
 8005930:	4603      	mov	r3, r0
 8005932:	2b01      	cmp	r3, #1
 8005934:	d01e      	beq.n	8005974 <USB_SetCurrentMode+0x84>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2bc7      	cmp	r3, #199	@ 0xc7
 800593a:	d9f0      	bls.n	800591e <USB_SetCurrentMode+0x2e>
 800593c:	e01a      	b.n	8005974 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800593e:	78fb      	ldrb	r3, [r7, #3]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d115      	bne.n	8005970 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005950:	200a      	movs	r0, #10
 8005952:	f7fb fe45 	bl	80015e0 <HAL_Delay>
      ms += 10U;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	330a      	adds	r3, #10
 800595a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f001 f926 	bl	8006bae <USB_GetMode>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d005      	beq.n	8005974 <USB_SetCurrentMode+0x84>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2bc7      	cmp	r3, #199	@ 0xc7
 800596c:	d9f0      	bls.n	8005950 <USB_SetCurrentMode+0x60>
 800596e:	e001      	b.n	8005974 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e005      	b.n	8005980 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2bc8      	cmp	r3, #200	@ 0xc8
 8005978:	d101      	bne.n	800597e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e000      	b.n	8005980 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005988:	b084      	sub	sp, #16
 800598a:	b580      	push	{r7, lr}
 800598c:	b086      	sub	sp, #24
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005996:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800599a:	2300      	movs	r3, #0
 800599c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059a2:	2300      	movs	r3, #0
 80059a4:	613b      	str	r3, [r7, #16]
 80059a6:	e009      	b.n	80059bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	3340      	adds	r3, #64	@ 0x40
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	2200      	movs	r2, #0
 80059b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	3301      	adds	r3, #1
 80059ba:	613b      	str	r3, [r7, #16]
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	2b0e      	cmp	r3, #14
 80059c0:	d9f2      	bls.n	80059a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80059c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d11c      	bne.n	8005a04 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059d8:	f043 0302 	orr.w	r3, r3, #2
 80059dc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ee:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a02:	e00b      	b.n	8005a1c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a08:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a14:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a22:	461a      	mov	r2, r3
 8005a24:	2300      	movs	r3, #0
 8005a26:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a28:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d10d      	bne.n	8005a4c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d104      	bne.n	8005a42 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a38:	2100      	movs	r1, #0
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f968 	bl	8005d10 <USB_SetDevSpeed>
 8005a40:	e008      	b.n	8005a54 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a42:	2101      	movs	r1, #1
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f963 	bl	8005d10 <USB_SetDevSpeed>
 8005a4a:	e003      	b.n	8005a54 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a4c:	2103      	movs	r1, #3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f95e 	bl	8005d10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a54:	2110      	movs	r1, #16
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f8fa 	bl	8005c50 <USB_FlushTxFifo>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d001      	beq.n	8005a66 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f924 	bl	8005cb4 <USB_FlushRxFifo>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	2300      	movs	r3, #0
 8005a80:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a88:	461a      	mov	r2, r3
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a94:	461a      	mov	r2, r3
 8005a96:	2300      	movs	r3, #0
 8005a98:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	e043      	b.n	8005b28 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ab6:	d118      	bne.n	8005aea <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10a      	bne.n	8005ad4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aca:	461a      	mov	r2, r3
 8005acc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	e013      	b.n	8005afc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	e008      	b.n	8005afc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005af6:	461a      	mov	r2, r3
 8005af8:	2300      	movs	r3, #0
 8005afa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b08:	461a      	mov	r2, r3
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	3301      	adds	r3, #1
 8005b26:	613b      	str	r3, [r7, #16]
 8005b28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d3b5      	bcc.n	8005aa0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b34:	2300      	movs	r3, #0
 8005b36:	613b      	str	r3, [r7, #16]
 8005b38:	e043      	b.n	8005bc2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b50:	d118      	bne.n	8005b84 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b64:	461a      	mov	r2, r3
 8005b66:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	e013      	b.n	8005b96 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	e008      	b.n	8005b96 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b90:	461a      	mov	r2, r3
 8005b92:	2300      	movs	r3, #0
 8005b94:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	015a      	lsls	r2, r3, #5
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005bba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	613b      	str	r3, [r7, #16]
 8005bc2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d3b5      	bcc.n	8005b3a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005bdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005be0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005bee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005bf0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d105      	bne.n	8005c04 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	f043 0210 	orr.w	r2, r3, #16
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	699a      	ldr	r2, [r3, #24]
 8005c08:	4b10      	ldr	r3, [pc, #64]	@ (8005c4c <USB_DevInit+0x2c4>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c10:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d005      	beq.n	8005c24 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f043 0208 	orr.w	r2, r3, #8
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c24:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d107      	bne.n	8005c3c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c34:	f043 0304 	orr.w	r3, r3, #4
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c48:	b004      	add	sp, #16
 8005c4a:	4770      	bx	lr
 8005c4c:	803c3800 	.word	0x803c3800

08005c50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3301      	adds	r3, #1
 8005c62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c6a:	d901      	bls.n	8005c70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e01b      	b.n	8005ca8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	daf2      	bge.n	8005c5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	019b      	lsls	r3, r3, #6
 8005c80:	f043 0220 	orr.w	r2, r3, #32
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c94:	d901      	bls.n	8005c9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e006      	b.n	8005ca8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	f003 0320 	and.w	r3, r3, #32
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	d0f0      	beq.n	8005c88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ccc:	d901      	bls.n	8005cd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e018      	b.n	8005d04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	daf2      	bge.n	8005cc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2210      	movs	r2, #16
 8005ce2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cf0:	d901      	bls.n	8005cf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e006      	b.n	8005d04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f003 0310 	and.w	r3, r3, #16
 8005cfe:	2b10      	cmp	r3, #16
 8005d00:	d0f0      	beq.n	8005ce4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3714      	adds	r7, #20
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	78fb      	ldrb	r3, [r7, #3]
 8005d2a:	68f9      	ldr	r1, [r7, #12]
 8005d2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d30:	4313      	orrs	r3, r2
 8005d32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b087      	sub	sp, #28
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f003 0306 	and.w	r3, r3, #6
 8005d5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d102      	bne.n	8005d68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d62:	2300      	movs	r3, #0
 8005d64:	75fb      	strb	r3, [r7, #23]
 8005d66:	e00a      	b.n	8005d7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d002      	beq.n	8005d74 <USB_GetDevSpeed+0x32>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2b06      	cmp	r3, #6
 8005d72:	d102      	bne.n	8005d7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d74:	2302      	movs	r3, #2
 8005d76:	75fb      	strb	r3, [r7, #23]
 8005d78:	e001      	b.n	8005d7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d7a:	230f      	movs	r3, #15
 8005d7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	371c      	adds	r7, #28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	785b      	ldrb	r3, [r3, #1]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d13a      	bne.n	8005e1e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dae:	69da      	ldr	r2, [r3, #28]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	f003 030f 	and.w	r3, r3, #15
 8005db8:	2101      	movs	r1, #1
 8005dba:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	68f9      	ldr	r1, [r7, #12]
 8005dc2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d155      	bne.n	8005e8c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	791b      	ldrb	r3, [r3, #4]
 8005dfa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005dfc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	059b      	lsls	r3, r3, #22
 8005e02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e04:	4313      	orrs	r3, r2
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	0151      	lsls	r1, r2, #5
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	440a      	add	r2, r1
 8005e0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	e036      	b.n	8005e8c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e24:	69da      	ldr	r2, [r3, #28]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	2101      	movs	r1, #1
 8005e30:	fa01 f303 	lsl.w	r3, r1, r3
 8005e34:	041b      	lsls	r3, r3, #16
 8005e36:	68f9      	ldr	r1, [r7, #12]
 8005e38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d11a      	bne.n	8005e8c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	791b      	ldrb	r3, [r3, #4]
 8005e70:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e72:	430b      	orrs	r3, r1
 8005e74:	4313      	orrs	r3, r2
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	0151      	lsls	r1, r2, #5
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	440a      	add	r2, r1
 8005e7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e8a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	785b      	ldrb	r3, [r3, #1]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d161      	bne.n	8005f7c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005eca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ece:	d11f      	bne.n	8005f10 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	0151      	lsls	r1, r2, #5
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	440a      	add	r2, r1
 8005ee6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005eee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	0151      	lsls	r1, r2, #5
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	440a      	add	r2, r1
 8005f06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	f003 030f 	and.w	r3, r3, #15
 8005f20:	2101      	movs	r1, #1
 8005f22:	fa01 f303 	lsl.w	r3, r1, r3
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	68f9      	ldr	r1, [r7, #12]
 8005f2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f30:	4013      	ands	r3, r2
 8005f32:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f3a:	69da      	ldr	r2, [r3, #28]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	2101      	movs	r1, #1
 8005f46:	fa01 f303 	lsl.w	r3, r1, r3
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	43db      	mvns	r3, r3
 8005f4e:	68f9      	ldr	r1, [r7, #12]
 8005f50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f54:	4013      	ands	r3, r2
 8005f56:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	0159      	lsls	r1, r3, #5
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	440b      	add	r3, r1
 8005f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f72:	4619      	mov	r1, r3
 8005f74:	4b35      	ldr	r3, [pc, #212]	@ (800604c <USB_DeactivateEndpoint+0x1b0>)
 8005f76:	4013      	ands	r3, r2
 8005f78:	600b      	str	r3, [r1, #0]
 8005f7a:	e060      	b.n	800603e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f92:	d11f      	bne.n	8005fd4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	0151      	lsls	r1, r2, #5
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	440a      	add	r2, r1
 8005faa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005fb2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fd2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8005fea:	041b      	lsls	r3, r3, #16
 8005fec:	43db      	mvns	r3, r3
 8005fee:	68f9      	ldr	r1, [r7, #12]
 8005ff0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ffe:	69da      	ldr	r2, [r3, #28]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	2101      	movs	r1, #1
 800600a:	fa01 f303 	lsl.w	r3, r1, r3
 800600e:	041b      	lsls	r3, r3, #16
 8006010:	43db      	mvns	r3, r3
 8006012:	68f9      	ldr	r1, [r7, #12]
 8006014:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006018:	4013      	ands	r3, r2
 800601a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	0159      	lsls	r1, r3, #5
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	440b      	add	r3, r1
 8006032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006036:	4619      	mov	r1, r3
 8006038:	4b05      	ldr	r3, [pc, #20]	@ (8006050 <USB_DeactivateEndpoint+0x1b4>)
 800603a:	4013      	ands	r3, r2
 800603c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3714      	adds	r7, #20
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	ec337800 	.word	0xec337800
 8006050:	eff37800 	.word	0xeff37800

08006054 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08a      	sub	sp, #40	@ 0x28
 8006058:	af02      	add	r7, sp, #8
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	4613      	mov	r3, r2
 8006060:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	785b      	ldrb	r3, [r3, #1]
 8006070:	2b01      	cmp	r3, #1
 8006072:	f040 817f 	bne.w	8006374 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d132      	bne.n	80060e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	0151      	lsls	r1, r2, #5
 8006090:	69fa      	ldr	r2, [r7, #28]
 8006092:	440a      	add	r2, r1
 8006094:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006098:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800609c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	69fa      	ldr	r2, [r7, #28]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	69ba      	ldr	r2, [r7, #24]
 80060d2:	0151      	lsls	r1, r2, #5
 80060d4:	69fa      	ldr	r2, [r7, #28]
 80060d6:	440a      	add	r2, r1
 80060d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060dc:	0cdb      	lsrs	r3, r3, #19
 80060de:	04db      	lsls	r3, r3, #19
 80060e0:	6113      	str	r3, [r2, #16]
 80060e2:	e097      	b.n	8006214 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	69fa      	ldr	r2, [r7, #28]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060fe:	0cdb      	lsrs	r3, r3, #19
 8006100:	04db      	lsls	r3, r3, #19
 8006102:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	0151      	lsls	r1, r2, #5
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	440a      	add	r2, r1
 800611a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800611e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006122:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006126:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d11a      	bne.n	8006164 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	691a      	ldr	r2, [r3, #16]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	429a      	cmp	r2, r3
 8006138:	d903      	bls.n	8006142 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	69ba      	ldr	r2, [r7, #24]
 8006152:	0151      	lsls	r1, r2, #5
 8006154:	69fa      	ldr	r2, [r7, #28]
 8006156:	440a      	add	r2, r1
 8006158:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800615c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006160:	6113      	str	r3, [r2, #16]
 8006162:	e044      	b.n	80061ee <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	691a      	ldr	r2, [r3, #16]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	4413      	add	r3, r2
 800616e:	1e5a      	subs	r2, r3, #1
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	fbb2 f3f3 	udiv	r3, r2, r3
 8006178:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	8afb      	ldrh	r3, [r7, #22]
 800618a:	04d9      	lsls	r1, r3, #19
 800618c:	4ba4      	ldr	r3, [pc, #656]	@ (8006420 <USB_EPStartXfer+0x3cc>)
 800618e:	400b      	ands	r3, r1
 8006190:	69b9      	ldr	r1, [r7, #24]
 8006192:	0148      	lsls	r0, r1, #5
 8006194:	69f9      	ldr	r1, [r7, #28]
 8006196:	4401      	add	r1, r0
 8006198:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800619c:	4313      	orrs	r3, r2
 800619e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	791b      	ldrb	r3, [r3, #4]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d122      	bne.n	80061ee <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	015a      	lsls	r2, r3, #5
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	4413      	add	r3, r2
 80061b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	69fa      	ldr	r2, [r7, #28]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061c2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80061c6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d4:	691a      	ldr	r2, [r3, #16]
 80061d6:	8afb      	ldrh	r3, [r7, #22]
 80061d8:	075b      	lsls	r3, r3, #29
 80061da:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80061de:	69b9      	ldr	r1, [r7, #24]
 80061e0:	0148      	lsls	r0, r1, #5
 80061e2:	69f9      	ldr	r1, [r7, #28]
 80061e4:	4401      	add	r1, r0
 80061e6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80061ea:	4313      	orrs	r3, r2
 80061ec:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006204:	69b9      	ldr	r1, [r7, #24]
 8006206:	0148      	lsls	r0, r1, #5
 8006208:	69f9      	ldr	r1, [r7, #28]
 800620a:	4401      	add	r1, r0
 800620c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006210:	4313      	orrs	r3, r2
 8006212:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006214:	79fb      	ldrb	r3, [r7, #7]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d14b      	bne.n	80062b2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800622e:	461a      	mov	r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	791b      	ldrb	r3, [r3, #4]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d128      	bne.n	8006290 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800624a:	2b00      	cmp	r3, #0
 800624c:	d110      	bne.n	8006270 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	4413      	add	r3, r2
 8006256:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	69fa      	ldr	r2, [r7, #28]
 8006262:	440a      	add	r2, r1
 8006264:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006268:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	e00f      	b.n	8006290 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	015a      	lsls	r2, r3, #5
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	4413      	add	r3, r2
 8006278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	0151      	lsls	r1, r2, #5
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	440a      	add	r2, r1
 8006286:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800628a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800628e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	0151      	lsls	r1, r2, #5
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	440a      	add	r2, r1
 80062a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062aa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	e166      	b.n	8006580 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	0151      	lsls	r1, r2, #5
 80062c4:	69fa      	ldr	r2, [r7, #28]
 80062c6:	440a      	add	r2, r1
 80062c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062cc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80062d0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	791b      	ldrb	r3, [r3, #4]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d015      	beq.n	8006306 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 814e 	beq.w	8006580 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	f003 030f 	and.w	r3, r3, #15
 80062f4:	2101      	movs	r1, #1
 80062f6:	fa01 f303 	lsl.w	r3, r1, r3
 80062fa:	69f9      	ldr	r1, [r7, #28]
 80062fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006300:	4313      	orrs	r3, r2
 8006302:	634b      	str	r3, [r1, #52]	@ 0x34
 8006304:	e13c      	b.n	8006580 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006312:	2b00      	cmp	r3, #0
 8006314:	d110      	bne.n	8006338 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	440a      	add	r2, r1
 800632c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006330:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	e00f      	b.n	8006358 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	0151      	lsls	r1, r2, #5
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	440a      	add	r2, r1
 800634e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006356:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	68d9      	ldr	r1, [r3, #12]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	781a      	ldrb	r2, [r3, #0]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	b298      	uxth	r0, r3
 8006366:	79fb      	ldrb	r3, [r7, #7]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	4603      	mov	r3, r0
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 f9b9 	bl	80066e4 <USB_WritePacket>
 8006372:	e105      	b.n	8006580 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	0151      	lsls	r1, r2, #5
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	440a      	add	r2, r1
 800638a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800638e:	0cdb      	lsrs	r3, r3, #19
 8006390:	04db      	lsls	r3, r3, #19
 8006392:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	0151      	lsls	r1, r2, #5
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	440a      	add	r2, r1
 80063aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063ae:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80063b2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80063b6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d132      	bne.n	8006424 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	689a      	ldr	r2, [r3, #8]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ec:	69b9      	ldr	r1, [r7, #24]
 80063ee:	0148      	lsls	r0, r1, #5
 80063f0:	69f9      	ldr	r1, [r7, #28]
 80063f2:	4401      	add	r1, r0
 80063f4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80063f8:	4313      	orrs	r3, r2
 80063fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	015a      	lsls	r2, r3, #5
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	4413      	add	r3, r2
 8006404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	69ba      	ldr	r2, [r7, #24]
 800640c:	0151      	lsls	r1, r2, #5
 800640e:	69fa      	ldr	r2, [r7, #28]
 8006410:	440a      	add	r2, r1
 8006412:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006416:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800641a:	6113      	str	r3, [r2, #16]
 800641c:	e062      	b.n	80064e4 <USB_EPStartXfer+0x490>
 800641e:	bf00      	nop
 8006420:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d123      	bne.n	8006474 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006438:	691a      	ldr	r2, [r3, #16]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006442:	69b9      	ldr	r1, [r7, #24]
 8006444:	0148      	lsls	r0, r1, #5
 8006446:	69f9      	ldr	r1, [r7, #28]
 8006448:	4401      	add	r1, r0
 800644a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800644e:	4313      	orrs	r3, r2
 8006450:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	015a      	lsls	r2, r3, #5
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	4413      	add	r3, r2
 800645a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	0151      	lsls	r1, r2, #5
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	440a      	add	r2, r1
 8006468:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800646c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006470:	6113      	str	r3, [r2, #16]
 8006472:	e037      	b.n	80064e4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	691a      	ldr	r2, [r3, #16]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	4413      	add	r3, r2
 800647e:	1e5a      	subs	r2, r3, #1
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	fbb2 f3f3 	udiv	r3, r2, r3
 8006488:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	8afa      	ldrh	r2, [r7, #22]
 8006490:	fb03 f202 	mul.w	r2, r3, r2
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a4:	691a      	ldr	r2, [r3, #16]
 80064a6:	8afb      	ldrh	r3, [r7, #22]
 80064a8:	04d9      	lsls	r1, r3, #19
 80064aa:	4b38      	ldr	r3, [pc, #224]	@ (800658c <USB_EPStartXfer+0x538>)
 80064ac:	400b      	ands	r3, r1
 80064ae:	69b9      	ldr	r1, [r7, #24]
 80064b0:	0148      	lsls	r0, r1, #5
 80064b2:	69f9      	ldr	r1, [r7, #28]
 80064b4:	4401      	add	r1, r0
 80064b6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80064ba:	4313      	orrs	r3, r2
 80064bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ca:	691a      	ldr	r2, [r3, #16]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	6a1b      	ldr	r3, [r3, #32]
 80064d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064d4:	69b9      	ldr	r1, [r7, #24]
 80064d6:	0148      	lsls	r0, r1, #5
 80064d8:	69f9      	ldr	r1, [r7, #28]
 80064da:	4401      	add	r1, r0
 80064dc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80064e0:	4313      	orrs	r3, r2
 80064e2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80064e4:	79fb      	ldrb	r3, [r7, #7]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d10d      	bne.n	8006506 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d009      	beq.n	8006506 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	68d9      	ldr	r1, [r3, #12]
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006502:	460a      	mov	r2, r1
 8006504:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	791b      	ldrb	r3, [r3, #4]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d128      	bne.n	8006560 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800651a:	2b00      	cmp	r3, #0
 800651c:	d110      	bne.n	8006540 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	4413      	add	r3, r2
 8006526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	0151      	lsls	r1, r2, #5
 8006530:	69fa      	ldr	r2, [r7, #28]
 8006532:	440a      	add	r2, r1
 8006534:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006538:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800653c:	6013      	str	r3, [r2, #0]
 800653e:	e00f      	b.n	8006560 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	440a      	add	r2, r1
 8006556:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800655a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800655e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	0151      	lsls	r1, r2, #5
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	440a      	add	r2, r1
 8006576:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800657a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800657e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3720      	adds	r7, #32
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	1ff80000 	.word	0x1ff80000

08006590 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	785b      	ldrb	r3, [r3, #1]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d14a      	bne.n	8006644 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	015a      	lsls	r2, r3, #5
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	4413      	add	r3, r2
 80065b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065c6:	f040 8086 	bne.w	80066d6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	7812      	ldrb	r2, [r2, #0]
 80065de:	0151      	lsls	r1, r2, #5
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	440a      	add	r2, r1
 80065e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065e8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80065ec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	7812      	ldrb	r2, [r2, #0]
 8006602:	0151      	lsls	r1, r2, #5
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	440a      	add	r2, r1
 8006608:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800660c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006610:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3301      	adds	r3, #1
 8006616:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800661e:	4293      	cmp	r3, r2
 8006620:	d902      	bls.n	8006628 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	75fb      	strb	r3, [r7, #23]
          break;
 8006626:	e056      	b.n	80066d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800663c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006640:	d0e7      	beq.n	8006612 <USB_EPStopXfer+0x82>
 8006642:	e048      	b.n	80066d6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006658:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800665c:	d13b      	bne.n	80066d6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	015a      	lsls	r2, r3, #5
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	4413      	add	r3, r2
 8006668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	683a      	ldr	r2, [r7, #0]
 8006670:	7812      	ldrb	r2, [r2, #0]
 8006672:	0151      	lsls	r1, r2, #5
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	440a      	add	r2, r1
 8006678:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800667c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006680:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	4413      	add	r3, r2
 800668c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	7812      	ldrb	r2, [r2, #0]
 8006696:	0151      	lsls	r1, r2, #5
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	440a      	add	r2, r1
 800669c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	3301      	adds	r3, #1
 80066aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f242 7210 	movw	r2, #10000	@ 0x2710
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d902      	bls.n	80066bc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	75fb      	strb	r3, [r7, #23]
          break;
 80066ba:	e00c      	b.n	80066d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066d4:	d0e7      	beq.n	80066a6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	371c      	adds	r7, #28
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b089      	sub	sp, #36	@ 0x24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	4611      	mov	r1, r2
 80066f0:	461a      	mov	r2, r3
 80066f2:	460b      	mov	r3, r1
 80066f4:	71fb      	strb	r3, [r7, #7]
 80066f6:	4613      	mov	r3, r2
 80066f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006702:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006706:	2b00      	cmp	r3, #0
 8006708:	d123      	bne.n	8006752 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800670a:	88bb      	ldrh	r3, [r7, #4]
 800670c:	3303      	adds	r3, #3
 800670e:	089b      	lsrs	r3, r3, #2
 8006710:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006712:	2300      	movs	r3, #0
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	e018      	b.n	800674a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	031a      	lsls	r2, r3, #12
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	4413      	add	r3, r2
 8006720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006724:	461a      	mov	r2, r3
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	3301      	adds	r3, #1
 8006730:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	3301      	adds	r3, #1
 8006736:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	3301      	adds	r3, #1
 800673c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	3301      	adds	r3, #1
 8006742:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	3301      	adds	r3, #1
 8006748:	61bb      	str	r3, [r7, #24]
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	429a      	cmp	r2, r3
 8006750:	d3e2      	bcc.n	8006718 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3724      	adds	r7, #36	@ 0x24
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006760:	b480      	push	{r7}
 8006762:	b08b      	sub	sp, #44	@ 0x2c
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	4613      	mov	r3, r2
 800676c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006776:	88fb      	ldrh	r3, [r7, #6]
 8006778:	089b      	lsrs	r3, r3, #2
 800677a:	b29b      	uxth	r3, r3
 800677c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800677e:	88fb      	ldrh	r3, [r7, #6]
 8006780:	f003 0303 	and.w	r3, r3, #3
 8006784:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006786:	2300      	movs	r3, #0
 8006788:	623b      	str	r3, [r7, #32]
 800678a:	e014      	b.n	80067b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006796:	601a      	str	r2, [r3, #0]
    pDest++;
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	3301      	adds	r3, #1
 800679c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800679e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a0:	3301      	adds	r3, #1
 80067a2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a6:	3301      	adds	r3, #1
 80067a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	3301      	adds	r3, #1
 80067ae:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	3301      	adds	r3, #1
 80067b4:	623b      	str	r3, [r7, #32]
 80067b6:	6a3a      	ldr	r2, [r7, #32]
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d3e6      	bcc.n	800678c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80067be:	8bfb      	ldrh	r3, [r7, #30]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d01e      	beq.n	8006802 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067ce:	461a      	mov	r2, r3
 80067d0:	f107 0310 	add.w	r3, r7, #16
 80067d4:	6812      	ldr	r2, [r2, #0]
 80067d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	fa22 f303 	lsr.w	r3, r2, r3
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e8:	701a      	strb	r2, [r3, #0]
      i++;
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	3301      	adds	r3, #1
 80067ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80067f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f2:	3301      	adds	r3, #1
 80067f4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80067f6:	8bfb      	ldrh	r3, [r7, #30]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80067fc:	8bfb      	ldrh	r3, [r7, #30]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1ea      	bne.n	80067d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006804:	4618      	mov	r0, r3
 8006806:	372c      	adds	r7, #44	@ 0x2c
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	785b      	ldrb	r3, [r3, #1]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d12c      	bne.n	8006886 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	db12      	blt.n	8006864 <USB_EPSetStall+0x54>
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00f      	beq.n	8006864 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	0151      	lsls	r1, r2, #5
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	440a      	add	r2, r1
 800685a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800685e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006862:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	015a      	lsls	r2, r3, #5
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4413      	add	r3, r2
 800686c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	0151      	lsls	r1, r2, #5
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	440a      	add	r2, r1
 800687a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800687e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006882:	6013      	str	r3, [r2, #0]
 8006884:	e02b      	b.n	80068de <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	db12      	blt.n	80068be <USB_EPSetStall+0xae>
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00f      	beq.n	80068be <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68ba      	ldr	r2, [r7, #8]
 80068ae:	0151      	lsls	r1, r2, #5
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	440a      	add	r2, r1
 80068b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80068bc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	0151      	lsls	r1, r2, #5
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	440a      	add	r2, r1
 80068d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80068dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3714      	adds	r7, #20
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	785b      	ldrb	r3, [r3, #1]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d128      	bne.n	800695a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	0151      	lsls	r1, r2, #5
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	440a      	add	r2, r1
 800691e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006922:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006926:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	791b      	ldrb	r3, [r3, #4]
 800692c:	2b03      	cmp	r3, #3
 800692e:	d003      	beq.n	8006938 <USB_EPClearStall+0x4c>
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	791b      	ldrb	r3, [r3, #4]
 8006934:	2b02      	cmp	r3, #2
 8006936:	d138      	bne.n	80069aa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	0151      	lsls	r1, r2, #5
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	440a      	add	r2, r1
 800694e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	e027      	b.n	80069aa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	440a      	add	r2, r1
 8006970:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006974:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006978:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	791b      	ldrb	r3, [r3, #4]
 800697e:	2b03      	cmp	r3, #3
 8006980:	d003      	beq.n	800698a <USB_EPClearStall+0x9e>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	791b      	ldrb	r3, [r3, #4]
 8006986:	2b02      	cmp	r3, #2
 8006988:	d10f      	bne.n	80069aa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4413      	add	r3, r2
 8006992:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	0151      	lsls	r1, r2, #5
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	440a      	add	r2, r1
 80069a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069a8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr

080069b8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80069da:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	78fb      	ldrb	r3, [r7, #3]
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80069ec:	68f9      	ldr	r1, [r7, #12]
 80069ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069f2:	4313      	orrs	r3, r2
 80069f4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a1e:	f023 0303 	bic.w	r3, r3, #3
 8006a22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a32:	f023 0302 	bic.w	r3, r3, #2
 8006a36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b085      	sub	sp, #20
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a60:	f023 0303 	bic.w	r3, r3, #3
 8006a64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a74:	f043 0302 	orr.w	r3, r3, #2
 8006a78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b085      	sub	sp, #20
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	0c1b      	lsrs	r3, r3, #16
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b085      	sub	sp, #20
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	4013      	ands	r3, r2
 8006b04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	b29b      	uxth	r3, r3
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b085      	sub	sp, #20
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	015a      	lsls	r2, r3, #5
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	4013      	ands	r3, r2
 8006b42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b44:	68bb      	ldr	r3, [r7, #8]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b087      	sub	sp, #28
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b74:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b76:	78fb      	ldrb	r3, [r7, #3]
 8006b78:	f003 030f 	and.w	r3, r3, #15
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b82:	01db      	lsls	r3, r3, #7
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b8c:	78fb      	ldrb	r3, [r7, #3]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f003 0301 	and.w	r3, r3, #1
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b085      	sub	sp, #20
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006be4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006be8:	f023 0307 	bic.w	r3, r3, #7
 8006bec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	333c      	adds	r3, #60	@ 0x3c
 8006c26:	3304      	adds	r3, #4
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	4a26      	ldr	r2, [pc, #152]	@ (8006cc8 <USB_EP0_OutStart+0xb8>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d90a      	bls.n	8006c4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c44:	d101      	bne.n	8006c4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	e037      	b.n	8006cba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c50:	461a      	mov	r2, r3
 8006c52:	2300      	movs	r3, #0
 8006c54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c78:	f043 0318 	orr.w	r3, r3, #24
 8006c7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c8c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006c90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c92:	7afb      	ldrb	r3, [r7, #11]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d10f      	bne.n	8006cb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cb2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006cb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	371c      	adds	r7, #28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	4f54300a 	.word	0x4f54300a

08006ccc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006ce4:	d901      	bls.n	8006cea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e022      	b.n	8006d30 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	daf2      	bge.n	8006cd8 <USB_CoreReset+0xc>

  count = 10U;
 8006cf2:	230a      	movs	r3, #10
 8006cf4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006cf6:	e002      	b.n	8006cfe <USB_CoreReset+0x32>
  {
    count--;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1f9      	bne.n	8006cf8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	f043 0201 	orr.w	r2, r3, #1
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	3301      	adds	r3, #1
 8006d14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d1c:	d901      	bls.n	8006d22 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e006      	b.n	8006d30 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d0f0      	beq.n	8006d10 <USB_CoreReset+0x44>

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	460b      	mov	r3, r1
 8006d46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d48:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006d4c:	f002 fd1e 	bl	800978c <USBD_static_malloc>
 8006d50:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d109      	bne.n	8006d6c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	32b0      	adds	r2, #176	@ 0xb0
 8006d62:	2100      	movs	r1, #0
 8006d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e0d4      	b.n	8006f16 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006d6c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006d70:	2100      	movs	r1, #0
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f002 fd4e 	bl	8009814 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	32b0      	adds	r2, #176	@ 0xb0
 8006d82:	68f9      	ldr	r1, [r7, #12]
 8006d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	32b0      	adds	r2, #176	@ 0xb0
 8006d92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	7c1b      	ldrb	r3, [r3, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d138      	bne.n	8006e16 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006da4:	4b5e      	ldr	r3, [pc, #376]	@ (8006f20 <USBD_CDC_Init+0x1e4>)
 8006da6:	7819      	ldrb	r1, [r3, #0]
 8006da8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006dac:	2202      	movs	r2, #2
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f002 fbc9 	bl	8009546 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006db4:	4b5a      	ldr	r3, [pc, #360]	@ (8006f20 <USBD_CDC_Init+0x1e4>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	f003 020f 	and.w	r2, r3, #15
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	440b      	add	r3, r1
 8006dc8:	3323      	adds	r3, #35	@ 0x23
 8006dca:	2201      	movs	r2, #1
 8006dcc:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006dce:	4b55      	ldr	r3, [pc, #340]	@ (8006f24 <USBD_CDC_Init+0x1e8>)
 8006dd0:	7819      	ldrb	r1, [r3, #0]
 8006dd2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f002 fbb4 	bl	8009546 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006dde:	4b51      	ldr	r3, [pc, #324]	@ (8006f24 <USBD_CDC_Init+0x1e8>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	f003 020f 	and.w	r2, r3, #15
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	4613      	mov	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	440b      	add	r3, r1
 8006df2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006df6:	2201      	movs	r2, #1
 8006df8:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006dfa:	4b4b      	ldr	r3, [pc, #300]	@ (8006f28 <USBD_CDC_Init+0x1ec>)
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	f003 020f 	and.w	r2, r3, #15
 8006e02:	6879      	ldr	r1, [r7, #4]
 8006e04:	4613      	mov	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	440b      	add	r3, r1
 8006e0e:	331c      	adds	r3, #28
 8006e10:	2210      	movs	r2, #16
 8006e12:	601a      	str	r2, [r3, #0]
 8006e14:	e035      	b.n	8006e82 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e16:	4b42      	ldr	r3, [pc, #264]	@ (8006f20 <USBD_CDC_Init+0x1e4>)
 8006e18:	7819      	ldrb	r1, [r3, #0]
 8006e1a:	2340      	movs	r3, #64	@ 0x40
 8006e1c:	2202      	movs	r2, #2
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f002 fb91 	bl	8009546 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e24:	4b3e      	ldr	r3, [pc, #248]	@ (8006f20 <USBD_CDC_Init+0x1e4>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	f003 020f 	and.w	r2, r3, #15
 8006e2c:	6879      	ldr	r1, [r7, #4]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	440b      	add	r3, r1
 8006e38:	3323      	adds	r3, #35	@ 0x23
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e3e:	4b39      	ldr	r3, [pc, #228]	@ (8006f24 <USBD_CDC_Init+0x1e8>)
 8006e40:	7819      	ldrb	r1, [r3, #0]
 8006e42:	2340      	movs	r3, #64	@ 0x40
 8006e44:	2202      	movs	r2, #2
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f002 fb7d 	bl	8009546 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e4c:	4b35      	ldr	r3, [pc, #212]	@ (8006f24 <USBD_CDC_Init+0x1e8>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	f003 020f 	and.w	r2, r3, #15
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	440b      	add	r3, r1
 8006e60:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006e64:	2201      	movs	r2, #1
 8006e66:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e68:	4b2f      	ldr	r3, [pc, #188]	@ (8006f28 <USBD_CDC_Init+0x1ec>)
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	f003 020f 	and.w	r2, r3, #15
 8006e70:	6879      	ldr	r1, [r7, #4]
 8006e72:	4613      	mov	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	4413      	add	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	440b      	add	r3, r1
 8006e7c:	331c      	adds	r3, #28
 8006e7e:	2210      	movs	r2, #16
 8006e80:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e82:	4b29      	ldr	r3, [pc, #164]	@ (8006f28 <USBD_CDC_Init+0x1ec>)
 8006e84:	7819      	ldrb	r1, [r3, #0]
 8006e86:	2308      	movs	r3, #8
 8006e88:	2203      	movs	r2, #3
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f002 fb5b 	bl	8009546 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006e90:	4b25      	ldr	r3, [pc, #148]	@ (8006f28 <USBD_CDC_Init+0x1ec>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	f003 020f 	and.w	r2, r3, #15
 8006e98:	6879      	ldr	r1, [r7, #4]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	440b      	add	r3, r1
 8006ea4:	3323      	adds	r3, #35	@ 0x23
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	33b0      	adds	r3, #176	@ 0xb0
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4413      	add	r3, r2
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e018      	b.n	8006f16 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	7c1b      	ldrb	r3, [r3, #16]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10a      	bne.n	8006f02 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006eec:	4b0d      	ldr	r3, [pc, #52]	@ (8006f24 <USBD_CDC_Init+0x1e8>)
 8006eee:	7819      	ldrb	r1, [r3, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ef6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f002 fc12 	bl	8009724 <USBD_LL_PrepareReceive>
 8006f00:	e008      	b.n	8006f14 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f02:	4b08      	ldr	r3, [pc, #32]	@ (8006f24 <USBD_CDC_Init+0x1e8>)
 8006f04:	7819      	ldrb	r1, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f0c:	2340      	movs	r3, #64	@ 0x40
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f002 fc08 	bl	8009724 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	200000bf 	.word	0x200000bf
 8006f24:	200000c0 	.word	0x200000c0
 8006f28:	200000c1 	.word	0x200000c1

08006f2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	460b      	mov	r3, r1
 8006f36:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006f38:	4b3a      	ldr	r3, [pc, #232]	@ (8007024 <USBD_CDC_DeInit+0xf8>)
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f002 fb27 	bl	8009592 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006f44:	4b37      	ldr	r3, [pc, #220]	@ (8007024 <USBD_CDC_DeInit+0xf8>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	f003 020f 	and.w	r2, r3, #15
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	3323      	adds	r3, #35	@ 0x23
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006f5e:	4b32      	ldr	r3, [pc, #200]	@ (8007028 <USBD_CDC_DeInit+0xfc>)
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	4619      	mov	r1, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f002 fb14 	bl	8009592 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8007028 <USBD_CDC_DeInit+0xfc>)
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	f003 020f 	and.w	r2, r3, #15
 8006f72:	6879      	ldr	r1, [r7, #4]
 8006f74:	4613      	mov	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	440b      	add	r3, r1
 8006f7e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006f82:	2200      	movs	r2, #0
 8006f84:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006f86:	4b29      	ldr	r3, [pc, #164]	@ (800702c <USBD_CDC_DeInit+0x100>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f002 fb00 	bl	8009592 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006f92:	4b26      	ldr	r3, [pc, #152]	@ (800702c <USBD_CDC_DeInit+0x100>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	f003 020f 	and.w	r2, r3, #15
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	440b      	add	r3, r1
 8006fa6:	3323      	adds	r3, #35	@ 0x23
 8006fa8:	2200      	movs	r2, #0
 8006faa:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006fac:	4b1f      	ldr	r3, [pc, #124]	@ (800702c <USBD_CDC_DeInit+0x100>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	f003 020f 	and.w	r2, r3, #15
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	440b      	add	r3, r1
 8006fc0:	331c      	adds	r3, #28
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	32b0      	adds	r2, #176	@ 0xb0
 8006fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d01f      	beq.n	8007018 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	33b0      	adds	r3, #176	@ 0xb0
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	32b0      	adds	r2, #176	@ 0xb0
 8006ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f002 fbd4 	bl	80097a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	32b0      	adds	r2, #176	@ 0xb0
 800700a:	2100      	movs	r1, #0
 800700c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	200000bf 	.word	0x200000bf
 8007028:	200000c0 	.word	0x200000c0
 800702c:	200000c1 	.word	0x200000c1

08007030 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	32b0      	adds	r2, #176	@ 0xb0
 8007044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007048:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800705c:	2303      	movs	r3, #3
 800705e:	e0bf      	b.n	80071e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007068:	2b00      	cmp	r3, #0
 800706a:	d050      	beq.n	800710e <USBD_CDC_Setup+0xde>
 800706c:	2b20      	cmp	r3, #32
 800706e:	f040 80af 	bne.w	80071d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	88db      	ldrh	r3, [r3, #6]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d03a      	beq.n	80070f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	b25b      	sxtb	r3, r3
 8007080:	2b00      	cmp	r3, #0
 8007082:	da1b      	bge.n	80070bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	33b0      	adds	r3, #176	@ 0xb0
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800709a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	88d2      	ldrh	r2, [r2, #6]
 80070a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	88db      	ldrh	r3, [r3, #6]
 80070a6:	2b07      	cmp	r3, #7
 80070a8:	bf28      	it	cs
 80070aa:	2307      	movcs	r3, #7
 80070ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	89fa      	ldrh	r2, [r7, #14]
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 fda9 	bl	8008c0c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80070ba:	e090      	b.n	80071de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	785a      	ldrb	r2, [r3, #1]
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	88db      	ldrh	r3, [r3, #6]
 80070ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80070cc:	d803      	bhi.n	80070d6 <USBD_CDC_Setup+0xa6>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	88db      	ldrh	r3, [r3, #6]
 80070d2:	b2da      	uxtb	r2, r3
 80070d4:	e000      	b.n	80070d8 <USBD_CDC_Setup+0xa8>
 80070d6:	2240      	movs	r2, #64	@ 0x40
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80070de:	6939      	ldr	r1, [r7, #16]
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80070e6:	461a      	mov	r2, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 fdbe 	bl	8008c6a <USBD_CtlPrepareRx>
      break;
 80070ee:	e076      	b.n	80071de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	33b0      	adds	r3, #176	@ 0xb0
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	7850      	ldrb	r0, [r2, #1]
 8007106:	2200      	movs	r2, #0
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	4798      	blx	r3
      break;
 800710c:	e067      	b.n	80071de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	785b      	ldrb	r3, [r3, #1]
 8007112:	2b0b      	cmp	r3, #11
 8007114:	d851      	bhi.n	80071ba <USBD_CDC_Setup+0x18a>
 8007116:	a201      	add	r2, pc, #4	@ (adr r2, 800711c <USBD_CDC_Setup+0xec>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	0800714d 	.word	0x0800714d
 8007120:	080071c9 	.word	0x080071c9
 8007124:	080071bb 	.word	0x080071bb
 8007128:	080071bb 	.word	0x080071bb
 800712c:	080071bb 	.word	0x080071bb
 8007130:	080071bb 	.word	0x080071bb
 8007134:	080071bb 	.word	0x080071bb
 8007138:	080071bb 	.word	0x080071bb
 800713c:	080071bb 	.word	0x080071bb
 8007140:	080071bb 	.word	0x080071bb
 8007144:	08007177 	.word	0x08007177
 8007148:	080071a1 	.word	0x080071a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b03      	cmp	r3, #3
 8007156:	d107      	bne.n	8007168 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007158:	f107 030a 	add.w	r3, r7, #10
 800715c:	2202      	movs	r2, #2
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f001 fd53 	bl	8008c0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007166:	e032      	b.n	80071ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f001 fcd1 	bl	8008b12 <USBD_CtlError>
            ret = USBD_FAIL;
 8007170:	2303      	movs	r3, #3
 8007172:	75fb      	strb	r3, [r7, #23]
          break;
 8007174:	e02b      	b.n	80071ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b03      	cmp	r3, #3
 8007180:	d107      	bne.n	8007192 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007182:	f107 030d 	add.w	r3, r7, #13
 8007186:	2201      	movs	r2, #1
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f001 fd3e 	bl	8008c0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007190:	e01d      	b.n	80071ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 fcbc 	bl	8008b12 <USBD_CtlError>
            ret = USBD_FAIL;
 800719a:	2303      	movs	r3, #3
 800719c:	75fb      	strb	r3, [r7, #23]
          break;
 800719e:	e016      	b.n	80071ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d00f      	beq.n	80071cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80071ac:	6839      	ldr	r1, [r7, #0]
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f001 fcaf 	bl	8008b12 <USBD_CtlError>
            ret = USBD_FAIL;
 80071b4:	2303      	movs	r3, #3
 80071b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80071b8:	e008      	b.n	80071cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80071ba:	6839      	ldr	r1, [r7, #0]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 fca8 	bl	8008b12 <USBD_CtlError>
          ret = USBD_FAIL;
 80071c2:	2303      	movs	r3, #3
 80071c4:	75fb      	strb	r3, [r7, #23]
          break;
 80071c6:	e002      	b.n	80071ce <USBD_CDC_Setup+0x19e>
          break;
 80071c8:	bf00      	nop
 80071ca:	e008      	b.n	80071de <USBD_CDC_Setup+0x1ae>
          break;
 80071cc:	bf00      	nop
      }
      break;
 80071ce:	e006      	b.n	80071de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f001 fc9d 	bl	8008b12 <USBD_CtlError>
      ret = USBD_FAIL;
 80071d8:	2303      	movs	r3, #3
 80071da:	75fb      	strb	r3, [r7, #23]
      break;
 80071dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80071de:	7dfb      	ldrb	r3, [r7, #23]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80071fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	32b0      	adds	r2, #176	@ 0xb0
 8007206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d101      	bne.n	8007212 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800720e:	2303      	movs	r3, #3
 8007210:	e065      	b.n	80072de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	32b0      	adds	r2, #176	@ 0xb0
 800721c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007220:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007222:	78fb      	ldrb	r3, [r7, #3]
 8007224:	f003 020f 	and.w	r2, r3, #15
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	4613      	mov	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	440b      	add	r3, r1
 8007234:	3314      	adds	r3, #20
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d02f      	beq.n	800729c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800723c:	78fb      	ldrb	r3, [r7, #3]
 800723e:	f003 020f 	and.w	r2, r3, #15
 8007242:	6879      	ldr	r1, [r7, #4]
 8007244:	4613      	mov	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	440b      	add	r3, r1
 800724e:	3314      	adds	r3, #20
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	78fb      	ldrb	r3, [r7, #3]
 8007254:	f003 010f 	and.w	r1, r3, #15
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	460b      	mov	r3, r1
 800725c:	00db      	lsls	r3, r3, #3
 800725e:	440b      	add	r3, r1
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4403      	add	r3, r0
 8007264:	331c      	adds	r3, #28
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	fbb2 f1f3 	udiv	r1, r2, r3
 800726c:	fb01 f303 	mul.w	r3, r1, r3
 8007270:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007272:	2b00      	cmp	r3, #0
 8007274:	d112      	bne.n	800729c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007276:	78fb      	ldrb	r3, [r7, #3]
 8007278:	f003 020f 	and.w	r2, r3, #15
 800727c:	6879      	ldr	r1, [r7, #4]
 800727e:	4613      	mov	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	440b      	add	r3, r1
 8007288:	3314      	adds	r3, #20
 800728a:	2200      	movs	r2, #0
 800728c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800728e:	78f9      	ldrb	r1, [r7, #3]
 8007290:	2300      	movs	r3, #0
 8007292:	2200      	movs	r2, #0
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f002 fa24 	bl	80096e2 <USBD_LL_Transmit>
 800729a:	e01f      	b.n	80072dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2200      	movs	r2, #0
 80072a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	33b0      	adds	r3, #176	@ 0xb0
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d010      	beq.n	80072dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	33b0      	adds	r3, #176	@ 0xb0
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80072d8:	78fa      	ldrb	r2, [r7, #3]
 80072da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	460b      	mov	r3, r1
 80072f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	32b0      	adds	r2, #176	@ 0xb0
 80072fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007300:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	32b0      	adds	r2, #176	@ 0xb0
 800730c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d101      	bne.n	8007318 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007314:	2303      	movs	r3, #3
 8007316:	e01a      	b.n	800734e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007318:	78fb      	ldrb	r3, [r7, #3]
 800731a:	4619      	mov	r1, r3
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f002 fa22 	bl	8009766 <USBD_LL_GetRxDataSize>
 8007322:	4602      	mov	r2, r0
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	33b0      	adds	r3, #176	@ 0xb0
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007348:	4611      	mov	r1, r2
 800734a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	32b0      	adds	r2, #176	@ 0xb0
 8007368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007374:	2303      	movs	r3, #3
 8007376:	e024      	b.n	80073c2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	33b0      	adds	r3, #176	@ 0xb0
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d019      	beq.n	80073c0 <USBD_CDC_EP0_RxReady+0x6a>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007392:	2bff      	cmp	r3, #255	@ 0xff
 8007394:	d014      	beq.n	80073c0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	33b0      	adds	r3, #176	@ 0xb0
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	4413      	add	r3, r2
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80073ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80073b6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	22ff      	movs	r2, #255	@ 0xff
 80073bc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
	...

080073cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073d4:	2182      	movs	r1, #130	@ 0x82
 80073d6:	4818      	ldr	r0, [pc, #96]	@ (8007438 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073d8:	f000 fd62 	bl	8007ea0 <USBD_GetEpDesc>
 80073dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073de:	2101      	movs	r1, #1
 80073e0:	4815      	ldr	r0, [pc, #84]	@ (8007438 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073e2:	f000 fd5d 	bl	8007ea0 <USBD_GetEpDesc>
 80073e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80073e8:	2181      	movs	r1, #129	@ 0x81
 80073ea:	4813      	ldr	r0, [pc, #76]	@ (8007438 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80073ec:	f000 fd58 	bl	8007ea0 <USBD_GetEpDesc>
 80073f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2210      	movs	r2, #16
 80073fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d006      	beq.n	8007412 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	2200      	movs	r2, #0
 8007408:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800740c:	711a      	strb	r2, [r3, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d006      	beq.n	8007426 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007420:	711a      	strb	r2, [r3, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2243      	movs	r2, #67	@ 0x43
 800742a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800742c:	4b02      	ldr	r3, [pc, #8]	@ (8007438 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800742e:	4618      	mov	r0, r3
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	2000007c 	.word	0x2000007c

0800743c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007444:	2182      	movs	r1, #130	@ 0x82
 8007446:	4818      	ldr	r0, [pc, #96]	@ (80074a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007448:	f000 fd2a 	bl	8007ea0 <USBD_GetEpDesc>
 800744c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800744e:	2101      	movs	r1, #1
 8007450:	4815      	ldr	r0, [pc, #84]	@ (80074a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007452:	f000 fd25 	bl	8007ea0 <USBD_GetEpDesc>
 8007456:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007458:	2181      	movs	r1, #129	@ 0x81
 800745a:	4813      	ldr	r0, [pc, #76]	@ (80074a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800745c:	f000 fd20 	bl	8007ea0 <USBD_GetEpDesc>
 8007460:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2210      	movs	r2, #16
 800746c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d006      	beq.n	8007482 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	2200      	movs	r2, #0
 8007478:	711a      	strb	r2, [r3, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f042 0202 	orr.w	r2, r2, #2
 8007480:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d006      	beq.n	8007496 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	711a      	strb	r2, [r3, #4]
 800748e:	2200      	movs	r2, #0
 8007490:	f042 0202 	orr.w	r2, r2, #2
 8007494:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2243      	movs	r2, #67	@ 0x43
 800749a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800749c:	4b02      	ldr	r3, [pc, #8]	@ (80074a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	2000007c 	.word	0x2000007c

080074ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074b4:	2182      	movs	r1, #130	@ 0x82
 80074b6:	4818      	ldr	r0, [pc, #96]	@ (8007518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074b8:	f000 fcf2 	bl	8007ea0 <USBD_GetEpDesc>
 80074bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074be:	2101      	movs	r1, #1
 80074c0:	4815      	ldr	r0, [pc, #84]	@ (8007518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074c2:	f000 fced 	bl	8007ea0 <USBD_GetEpDesc>
 80074c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074c8:	2181      	movs	r1, #129	@ 0x81
 80074ca:	4813      	ldr	r0, [pc, #76]	@ (8007518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074cc:	f000 fce8 	bl	8007ea0 <USBD_GetEpDesc>
 80074d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d002      	beq.n	80074de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2210      	movs	r2, #16
 80074dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d006      	beq.n	80074f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074ec:	711a      	strb	r2, [r3, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d006      	beq.n	8007506 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007500:	711a      	strb	r2, [r3, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2243      	movs	r2, #67	@ 0x43
 800750a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800750c:	4b02      	ldr	r3, [pc, #8]	@ (8007518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800750e:	4618      	mov	r0, r3
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	2000007c 	.word	0x2000007c

0800751c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	220a      	movs	r2, #10
 8007528:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800752a:	4b03      	ldr	r3, [pc, #12]	@ (8007538 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800752c:	4618      	mov	r0, r3
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr
 8007538:	20000038 	.word	0x20000038

0800753c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800754c:	2303      	movs	r3, #3
 800754e:	e009      	b.n	8007564 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	33b0      	adds	r3, #176	@ 0xb0
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4413      	add	r3, r2
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007570:	b480      	push	{r7}
 8007572:	b087      	sub	sp, #28
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	32b0      	adds	r2, #176	@ 0xb0
 8007586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800758a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007592:	2303      	movs	r3, #3
 8007594:	e008      	b.n	80075a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	371c      	adds	r7, #28
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	32b0      	adds	r2, #176	@ 0xb0
 80075c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e004      	b.n	80075e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
	...

080075f0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	32b0      	adds	r2, #176	@ 0xb0
 8007602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007606:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007608:	2301      	movs	r3, #1
 800760a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007612:	2303      	movs	r3, #3
 8007614:	e025      	b.n	8007662 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800761c:	2b00      	cmp	r3, #0
 800761e:	d11f      	bne.n	8007660 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2201      	movs	r2, #1
 8007624:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007628:	4b10      	ldr	r3, [pc, #64]	@ (800766c <USBD_CDC_TransmitPacket+0x7c>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	f003 020f 	and.w	r2, r3, #15
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	4613      	mov	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4403      	add	r3, r0
 8007642:	3314      	adds	r3, #20
 8007644:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007646:	4b09      	ldr	r3, [pc, #36]	@ (800766c <USBD_CDC_TransmitPacket+0x7c>)
 8007648:	7819      	ldrb	r1, [r3, #0]
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f002 f843 	bl	80096e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007660:	7bfb      	ldrb	r3, [r7, #15]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	200000bf 	.word	0x200000bf

08007670 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	32b0      	adds	r2, #176	@ 0xb0
 8007682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007686:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	32b0      	adds	r2, #176	@ 0xb0
 8007692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800769a:	2303      	movs	r3, #3
 800769c:	e018      	b.n	80076d0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	7c1b      	ldrb	r3, [r3, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10a      	bne.n	80076bc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076a6:	4b0c      	ldr	r3, [pc, #48]	@ (80076d8 <USBD_CDC_ReceivePacket+0x68>)
 80076a8:	7819      	ldrb	r1, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80076b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f002 f835 	bl	8009724 <USBD_LL_PrepareReceive>
 80076ba:	e008      	b.n	80076ce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076bc:	4b06      	ldr	r3, [pc, #24]	@ (80076d8 <USBD_CDC_ReceivePacket+0x68>)
 80076be:	7819      	ldrb	r1, [r3, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80076c6:	2340      	movs	r3, #64	@ 0x40
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f002 f82b 	bl	8009724 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	200000c0 	.word	0x200000c0

080076dc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b086      	sub	sp, #24
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	4613      	mov	r3, r2
 80076e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d101      	bne.n	80076f4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e01f      	b.n	8007734 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	68ba      	ldr	r2, [r7, #8]
 8007716:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2201      	movs	r2, #1
 800771e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	79fa      	ldrb	r2, [r7, #7]
 8007726:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f001 fea5 	bl	8009478 <USBD_LL_Init>
 800772e:	4603      	mov	r3, r0
 8007730:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007732:	7dfb      	ldrb	r3, [r7, #23]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007750:	2303      	movs	r3, #3
 8007752:	e025      	b.n	80077a0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	32ae      	adds	r2, #174	@ 0xae
 8007766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800776a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00f      	beq.n	8007790 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	32ae      	adds	r2, #174	@ 0xae
 800777a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007780:	f107 020e 	add.w	r2, r7, #14
 8007784:	4610      	mov	r0, r2
 8007786:	4798      	blx	r3
 8007788:	4602      	mov	r2, r0
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007796:	1c5a      	adds	r2, r3, #1
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800779e:	2300      	movs	r3, #0
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f001 fead 	bl	8009510 <USBD_LL_Start>
 80077b6:	4603      	mov	r3, r0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077c8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b084      	sub	sp, #16
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	460b      	mov	r3, r1
 80077e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d009      	beq.n	8007804 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	78fa      	ldrb	r2, [r7, #3]
 80077fa:	4611      	mov	r1, r2
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	4798      	blx	r3
 8007800:	4603      	mov	r3, r0
 8007802:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007804:	7bfb      	ldrb	r3, [r7, #15]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	460b      	mov	r3, r1
 8007818:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	78fa      	ldrb	r2, [r7, #3]
 8007828:	4611      	mov	r1, r2
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	4798      	blx	r3
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007834:	2303      	movs	r3, #3
 8007836:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007838:	7bfb      	ldrb	r3, [r7, #15]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	4618      	mov	r0, r3
 8007856:	f001 f922 	bl	8008a9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007868:	461a      	mov	r2, r3
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007876:	f003 031f 	and.w	r3, r3, #31
 800787a:	2b02      	cmp	r3, #2
 800787c:	d01a      	beq.n	80078b4 <USBD_LL_SetupStage+0x72>
 800787e:	2b02      	cmp	r3, #2
 8007880:	d822      	bhi.n	80078c8 <USBD_LL_SetupStage+0x86>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <USBD_LL_SetupStage+0x4a>
 8007886:	2b01      	cmp	r3, #1
 8007888:	d00a      	beq.n	80078a0 <USBD_LL_SetupStage+0x5e>
 800788a:	e01d      	b.n	80078c8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fb77 	bl	8007f88 <USBD_StdDevReq>
 800789a:	4603      	mov	r3, r0
 800789c:	73fb      	strb	r3, [r7, #15]
      break;
 800789e:	e020      	b.n	80078e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fbdf 	bl	800806c <USBD_StdItfReq>
 80078ae:	4603      	mov	r3, r0
 80078b0:	73fb      	strb	r3, [r7, #15]
      break;
 80078b2:	e016      	b.n	80078e2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078ba:	4619      	mov	r1, r3
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fc41 	bl	8008144 <USBD_StdEPReq>
 80078c2:	4603      	mov	r3, r0
 80078c4:	73fb      	strb	r3, [r7, #15]
      break;
 80078c6:	e00c      	b.n	80078e2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80078ce:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f001 fe7a 	bl	80095d0 <USBD_LL_StallEP>
 80078dc:	4603      	mov	r3, r0
 80078de:	73fb      	strb	r3, [r7, #15]
      break;
 80078e0:	bf00      	nop
  }

  return ret;
 80078e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	460b      	mov	r3, r1
 80078f6:	607a      	str	r2, [r7, #4]
 80078f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80078fa:	2300      	movs	r3, #0
 80078fc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80078fe:	7afb      	ldrb	r3, [r7, #11]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d177      	bne.n	80079f4 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800790a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007912:	2b03      	cmp	r3, #3
 8007914:	f040 80a1 	bne.w	8007a5a <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	8992      	ldrh	r2, [r2, #12]
 8007920:	4293      	cmp	r3, r2
 8007922:	d91c      	bls.n	800795e <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	693a      	ldr	r2, [r7, #16]
 800792a:	8992      	ldrh	r2, [r2, #12]
 800792c:	1a9a      	subs	r2, r3, r2
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	8992      	ldrh	r2, [r2, #12]
 800793a:	441a      	add	r2, r3
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	6919      	ldr	r1, [r3, #16]
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	899b      	ldrh	r3, [r3, #12]
 8007948:	461a      	mov	r2, r3
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	4293      	cmp	r3, r2
 8007950:	bf38      	it	cc
 8007952:	4613      	movcc	r3, r2
 8007954:	461a      	mov	r2, r3
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f001 f9a8 	bl	8008cac <USBD_CtlContinueRx>
 800795c:	e07d      	b.n	8007a5a <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007964:	f003 031f 	and.w	r3, r3, #31
 8007968:	2b02      	cmp	r3, #2
 800796a:	d014      	beq.n	8007996 <USBD_LL_DataOutStage+0xaa>
 800796c:	2b02      	cmp	r3, #2
 800796e:	d81d      	bhi.n	80079ac <USBD_LL_DataOutStage+0xc0>
 8007970:	2b00      	cmp	r3, #0
 8007972:	d002      	beq.n	800797a <USBD_LL_DataOutStage+0x8e>
 8007974:	2b01      	cmp	r3, #1
 8007976:	d003      	beq.n	8007980 <USBD_LL_DataOutStage+0x94>
 8007978:	e018      	b.n	80079ac <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	75bb      	strb	r3, [r7, #22]
            break;
 800797e:	e018      	b.n	80079b2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007986:	b2db      	uxtb	r3, r3
 8007988:	4619      	mov	r1, r3
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f000 fa6e 	bl	8007e6c <USBD_CoreFindIF>
 8007990:	4603      	mov	r3, r0
 8007992:	75bb      	strb	r3, [r7, #22]
            break;
 8007994:	e00d      	b.n	80079b2 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800799c:	b2db      	uxtb	r3, r3
 800799e:	4619      	mov	r1, r3
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f000 fa70 	bl	8007e86 <USBD_CoreFindEP>
 80079a6:	4603      	mov	r3, r0
 80079a8:	75bb      	strb	r3, [r7, #22]
            break;
 80079aa:	e002      	b.n	80079b2 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80079ac:	2300      	movs	r3, #0
 80079ae:	75bb      	strb	r3, [r7, #22]
            break;
 80079b0:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80079b2:	7dbb      	ldrb	r3, [r7, #22]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d119      	bne.n	80079ec <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d113      	bne.n	80079ec <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80079c4:	7dba      	ldrb	r2, [r7, #22]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	32ae      	adds	r2, #174	@ 0xae
 80079ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ce:	691b      	ldr	r3, [r3, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00b      	beq.n	80079ec <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80079d4:	7dba      	ldrb	r2, [r7, #22]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80079dc:	7dba      	ldrb	r2, [r7, #22]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	32ae      	adds	r2, #174	@ 0xae
 80079e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f001 f96e 	bl	8008cce <USBD_CtlSendStatus>
 80079f2:	e032      	b.n	8007a5a <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80079f4:	7afb      	ldrb	r3, [r7, #11]
 80079f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	4619      	mov	r1, r3
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 fa41 	bl	8007e86 <USBD_CoreFindEP>
 8007a04:	4603      	mov	r3, r0
 8007a06:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a08:	7dbb      	ldrb	r3, [r7, #22]
 8007a0a:	2bff      	cmp	r3, #255	@ 0xff
 8007a0c:	d025      	beq.n	8007a5a <USBD_LL_DataOutStage+0x16e>
 8007a0e:	7dbb      	ldrb	r3, [r7, #22]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d122      	bne.n	8007a5a <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	d117      	bne.n	8007a50 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007a20:	7dba      	ldrb	r2, [r7, #22]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	32ae      	adds	r2, #174	@ 0xae
 8007a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00f      	beq.n	8007a50 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007a30:	7dba      	ldrb	r2, [r7, #22]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007a38:	7dba      	ldrb	r2, [r7, #22]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	32ae      	adds	r2, #174	@ 0xae
 8007a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	7afa      	ldrb	r2, [r7, #11]
 8007a46:	4611      	mov	r1, r2
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	4798      	blx	r3
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007a50:	7dfb      	ldrb	r3, [r7, #23]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	e000      	b.n	8007a5c <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	607a      	str	r2, [r7, #4]
 8007a70:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007a72:	7afb      	ldrb	r3, [r7, #11]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d178      	bne.n	8007b6a <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	3314      	adds	r3, #20
 8007a7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d163      	bne.n	8007b50 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	8992      	ldrh	r2, [r2, #12]
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d91c      	bls.n	8007ace <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	8992      	ldrh	r2, [r2, #12]
 8007a9c:	1a9a      	subs	r2, r3, r2
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	693a      	ldr	r2, [r7, #16]
 8007aa8:	8992      	ldrh	r2, [r2, #12]
 8007aaa:	441a      	add	r2, r3
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	6919      	ldr	r1, [r3, #16]
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f001 f8c4 	bl	8008c48 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f001 fe2c 	bl	8009724 <USBD_LL_PrepareReceive>
 8007acc:	e040      	b.n	8007b50 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	899b      	ldrh	r3, [r3, #12]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d11c      	bne.n	8007b16 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d316      	bcc.n	8007b16 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d20f      	bcs.n	8007b16 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007af6:	2200      	movs	r2, #0
 8007af8:	2100      	movs	r1, #0
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f001 f8a4 	bl	8008c48 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b08:	2300      	movs	r3, #0
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f001 fe08 	bl	8009724 <USBD_LL_PrepareReceive>
 8007b14:	e01c      	b.n	8007b50 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b03      	cmp	r3, #3
 8007b20:	d10f      	bne.n	8007b42 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d009      	beq.n	8007b42 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b42:	2180      	movs	r1, #128	@ 0x80
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f001 fd43 	bl	80095d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f001 f8d2 	bl	8008cf4 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d03a      	beq.n	8007bd0 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f7ff fe30 	bl	80077c0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007b68:	e032      	b.n	8007bd0 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007b6a:	7afb      	ldrb	r3, [r7, #11]
 8007b6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	4619      	mov	r1, r3
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 f986 	bl	8007e86 <USBD_CoreFindEP>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
 8007b80:	2bff      	cmp	r3, #255	@ 0xff
 8007b82:	d025      	beq.n	8007bd0 <USBD_LL_DataInStage+0x16c>
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d122      	bne.n	8007bd0 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d11c      	bne.n	8007bd0 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007b96:	7dfa      	ldrb	r2, [r7, #23]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	32ae      	adds	r2, #174	@ 0xae
 8007b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ba0:	695b      	ldr	r3, [r3, #20]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d014      	beq.n	8007bd0 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007ba6:	7dfa      	ldrb	r2, [r7, #23]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007bae:	7dfa      	ldrb	r2, [r7, #23]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	32ae      	adds	r2, #174	@ 0xae
 8007bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	7afa      	ldrb	r2, [r7, #11]
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	4798      	blx	r3
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007bc6:	7dbb      	ldrb	r3, [r7, #22]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007bcc:	7dbb      	ldrb	r3, [r7, #22]
 8007bce:	e000      	b.n	8007bd2 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007be2:	2300      	movs	r3, #0
 8007be4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d014      	beq.n	8007c40 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00e      	beq.n	8007c40 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	6852      	ldr	r2, [r2, #4]
 8007c2e:	b2d2      	uxtb	r2, r2
 8007c30:	4611      	mov	r1, r2
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	4798      	blx	r3
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c40:	2340      	movs	r3, #64	@ 0x40
 8007c42:	2200      	movs	r2, #0
 8007c44:	2100      	movs	r1, #0
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f001 fc7d 	bl	8009546 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2240      	movs	r2, #64	@ 0x40
 8007c58:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c5c:	2340      	movs	r3, #64	@ 0x40
 8007c5e:	2200      	movs	r2, #0
 8007c60:	2180      	movs	r1, #128	@ 0x80
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f001 fc6f 	bl	8009546 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2240      	movs	r2, #64	@ 0x40
 8007c74:	841a      	strh	r2, [r3, #32]

  return ret;
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	78fa      	ldrb	r2, [r7, #3]
 8007c90:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b04      	cmp	r3, #4
 8007cb2:	d006      	beq.n	8007cc2 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cba:	b2da      	uxtb	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2204      	movs	r2, #4
 8007cc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ce6:	b2db      	uxtb	r3, r3
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	d106      	bne.n	8007cfa <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b03      	cmp	r3, #3
 8007d1a:	d110      	bne.n	8007d3e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00b      	beq.n	8007d3e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d005      	beq.n	8007d3e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	32ae      	adds	r2, #174	@ 0xae
 8007d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e01c      	b.n	8007da4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b03      	cmp	r3, #3
 8007d74:	d115      	bne.n	8007da2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	32ae      	adds	r2, #174	@ 0xae
 8007d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00b      	beq.n	8007da2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	32ae      	adds	r2, #174	@ 0xae
 8007d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	78fa      	ldrb	r2, [r7, #3]
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	32ae      	adds	r2, #174	@ 0xae
 8007dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e01c      	b.n	8007e08 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b03      	cmp	r3, #3
 8007dd8:	d115      	bne.n	8007e06 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	32ae      	adds	r2, #174	@ 0xae
 8007de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00b      	beq.n	8007e06 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	32ae      	adds	r2, #174	@ 0xae
 8007df8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dfe:	78fa      	ldrb	r2, [r7, #3]
 8007e00:	4611      	mov	r1, r2
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b084      	sub	sp, #16
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00e      	beq.n	8007e62 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	6852      	ldr	r2, [r2, #4]
 8007e50:	b2d2      	uxtb	r2, r2
 8007e52:	4611      	mov	r1, r2
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	4798      	blx	r3
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e78:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	460b      	mov	r3, r1
 8007e90:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e92:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	885b      	ldrh	r3, [r3, #2]
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	7812      	ldrb	r2, [r2, #0]
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d91f      	bls.n	8007f06 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007ecc:	e013      	b.n	8007ef6 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007ece:	f107 030a 	add.w	r3, r7, #10
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6978      	ldr	r0, [r7, #20]
 8007ed6:	f000 f81b 	bl	8007f10 <USBD_GetNextDesc>
 8007eda:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	785b      	ldrb	r3, [r3, #1]
 8007ee0:	2b05      	cmp	r3, #5
 8007ee2:	d108      	bne.n	8007ef6 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	789b      	ldrb	r3, [r3, #2]
 8007eec:	78fa      	ldrb	r2, [r7, #3]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d008      	beq.n	8007f04 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	885b      	ldrh	r3, [r3, #2]
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	897b      	ldrh	r3, [r7, #10]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d8e5      	bhi.n	8007ece <USBD_GetEpDesc+0x2e>
 8007f02:	e000      	b.n	8007f06 <USBD_GetEpDesc+0x66>
          break;
 8007f04:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f06:	693b      	ldr	r3, [r7, #16]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3718      	adds	r7, #24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	7812      	ldrb	r2, [r2, #0]
 8007f26:	4413      	add	r3, r2
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4413      	add	r3, r2
 8007f38:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f66:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007f6a:	021b      	lsls	r3, r3, #8
 8007f6c:	b21a      	sxth	r2, r3
 8007f6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	b21b      	sxth	r3, r3
 8007f76:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007f78:	89fb      	ldrh	r3, [r7, #14]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	371c      	adds	r7, #28
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
	...

08007f88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f92:	2300      	movs	r3, #0
 8007f94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f9e:	2b40      	cmp	r3, #64	@ 0x40
 8007fa0:	d005      	beq.n	8007fae <USBD_StdDevReq+0x26>
 8007fa2:	2b40      	cmp	r3, #64	@ 0x40
 8007fa4:	d857      	bhi.n	8008056 <USBD_StdDevReq+0xce>
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00f      	beq.n	8007fca <USBD_StdDevReq+0x42>
 8007faa:	2b20      	cmp	r3, #32
 8007fac:	d153      	bne.n	8008056 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	32ae      	adds	r2, #174	@ 0xae
 8007fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	4798      	blx	r3
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8007fc8:	e04a      	b.n	8008060 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	785b      	ldrb	r3, [r3, #1]
 8007fce:	2b09      	cmp	r3, #9
 8007fd0:	d83b      	bhi.n	800804a <USBD_StdDevReq+0xc2>
 8007fd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fd8 <USBD_StdDevReq+0x50>)
 8007fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd8:	0800802d 	.word	0x0800802d
 8007fdc:	08008041 	.word	0x08008041
 8007fe0:	0800804b 	.word	0x0800804b
 8007fe4:	08008037 	.word	0x08008037
 8007fe8:	0800804b 	.word	0x0800804b
 8007fec:	0800800b 	.word	0x0800800b
 8007ff0:	08008001 	.word	0x08008001
 8007ff4:	0800804b 	.word	0x0800804b
 8007ff8:	08008023 	.word	0x08008023
 8007ffc:	08008015 	.word	0x08008015
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008000:	6839      	ldr	r1, [r7, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 fa3e 	bl	8008484 <USBD_GetDescriptor>
          break;
 8008008:	e024      	b.n	8008054 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fba3 	bl	8008758 <USBD_SetAddress>
          break;
 8008012:	e01f      	b.n	8008054 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fbe2 	bl	80087e0 <USBD_SetConfig>
 800801c:	4603      	mov	r3, r0
 800801e:	73fb      	strb	r3, [r7, #15]
          break;
 8008020:	e018      	b.n	8008054 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fc85 	bl	8008934 <USBD_GetConfig>
          break;
 800802a:	e013      	b.n	8008054 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800802c:	6839      	ldr	r1, [r7, #0]
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 fcb6 	bl	80089a0 <USBD_GetStatus>
          break;
 8008034:	e00e      	b.n	8008054 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fce5 	bl	8008a08 <USBD_SetFeature>
          break;
 800803e:	e009      	b.n	8008054 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 fd09 	bl	8008a5a <USBD_ClrFeature>
          break;
 8008048:	e004      	b.n	8008054 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fd60 	bl	8008b12 <USBD_CtlError>
          break;
 8008052:	bf00      	nop
      }
      break;
 8008054:	e004      	b.n	8008060 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fd5a 	bl	8008b12 <USBD_CtlError>
      break;
 800805e:	bf00      	nop
  }

  return ret;
 8008060:	7bfb      	ldrb	r3, [r7, #15]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop

0800806c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008076:	2300      	movs	r3, #0
 8008078:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008082:	2b40      	cmp	r3, #64	@ 0x40
 8008084:	d005      	beq.n	8008092 <USBD_StdItfReq+0x26>
 8008086:	2b40      	cmp	r3, #64	@ 0x40
 8008088:	d852      	bhi.n	8008130 <USBD_StdItfReq+0xc4>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <USBD_StdItfReq+0x26>
 800808e:	2b20      	cmp	r3, #32
 8008090:	d14e      	bne.n	8008130 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008098:	b2db      	uxtb	r3, r3
 800809a:	3b01      	subs	r3, #1
 800809c:	2b02      	cmp	r3, #2
 800809e:	d840      	bhi.n	8008122 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	889b      	ldrh	r3, [r3, #4]
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d836      	bhi.n	8008118 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	889b      	ldrh	r3, [r3, #4]
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff feda 	bl	8007e6c <USBD_CoreFindIF>
 80080b8:	4603      	mov	r3, r0
 80080ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080bc:	7bbb      	ldrb	r3, [r7, #14]
 80080be:	2bff      	cmp	r3, #255	@ 0xff
 80080c0:	d01d      	beq.n	80080fe <USBD_StdItfReq+0x92>
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d11a      	bne.n	80080fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80080c8:	7bba      	ldrb	r2, [r7, #14]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	32ae      	adds	r2, #174	@ 0xae
 80080ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00f      	beq.n	80080f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80080d8:	7bba      	ldrb	r2, [r7, #14]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80080e0:	7bba      	ldrb	r2, [r7, #14]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	32ae      	adds	r2, #174	@ 0xae
 80080e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	6839      	ldr	r1, [r7, #0]
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	4798      	blx	r3
 80080f2:	4603      	mov	r3, r0
 80080f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80080f6:	e004      	b.n	8008102 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80080f8:	2303      	movs	r3, #3
 80080fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80080fc:	e001      	b.n	8008102 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80080fe:	2303      	movs	r3, #3
 8008100:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	88db      	ldrh	r3, [r3, #6]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d110      	bne.n	800812c <USBD_StdItfReq+0xc0>
 800810a:	7bfb      	ldrb	r3, [r7, #15]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10d      	bne.n	800812c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 fddc 	bl	8008cce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008116:	e009      	b.n	800812c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 fcf9 	bl	8008b12 <USBD_CtlError>
          break;
 8008120:	e004      	b.n	800812c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 fcf4 	bl	8008b12 <USBD_CtlError>
          break;
 800812a:	e000      	b.n	800812e <USBD_StdItfReq+0xc2>
          break;
 800812c:	bf00      	nop
      }
      break;
 800812e:	e004      	b.n	800813a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008130:	6839      	ldr	r1, [r7, #0]
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 fced 	bl	8008b12 <USBD_CtlError>
      break;
 8008138:	bf00      	nop
  }

  return ret;
 800813a:	7bfb      	ldrb	r3, [r7, #15]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3710      	adds	r7, #16
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800814e:	2300      	movs	r3, #0
 8008150:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	889b      	ldrh	r3, [r3, #4]
 8008156:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008160:	2b40      	cmp	r3, #64	@ 0x40
 8008162:	d007      	beq.n	8008174 <USBD_StdEPReq+0x30>
 8008164:	2b40      	cmp	r3, #64	@ 0x40
 8008166:	f200 8181 	bhi.w	800846c <USBD_StdEPReq+0x328>
 800816a:	2b00      	cmp	r3, #0
 800816c:	d02a      	beq.n	80081c4 <USBD_StdEPReq+0x80>
 800816e:	2b20      	cmp	r3, #32
 8008170:	f040 817c 	bne.w	800846c <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008174:	7bbb      	ldrb	r3, [r7, #14]
 8008176:	4619      	mov	r1, r3
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f7ff fe84 	bl	8007e86 <USBD_CoreFindEP>
 800817e:	4603      	mov	r3, r0
 8008180:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008182:	7b7b      	ldrb	r3, [r7, #13]
 8008184:	2bff      	cmp	r3, #255	@ 0xff
 8008186:	f000 8176 	beq.w	8008476 <USBD_StdEPReq+0x332>
 800818a:	7b7b      	ldrb	r3, [r7, #13]
 800818c:	2b00      	cmp	r3, #0
 800818e:	f040 8172 	bne.w	8008476 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008192:	7b7a      	ldrb	r2, [r7, #13]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800819a:	7b7a      	ldrb	r2, [r7, #13]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	32ae      	adds	r2, #174	@ 0xae
 80081a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	f000 8165 	beq.w	8008476 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80081ac:	7b7a      	ldrb	r2, [r7, #13]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	32ae      	adds	r2, #174	@ 0xae
 80081b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	4798      	blx	r3
 80081be:	4603      	mov	r3, r0
 80081c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081c2:	e158      	b.n	8008476 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	785b      	ldrb	r3, [r3, #1]
 80081c8:	2b03      	cmp	r3, #3
 80081ca:	d008      	beq.n	80081de <USBD_StdEPReq+0x9a>
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	f300 8147 	bgt.w	8008460 <USBD_StdEPReq+0x31c>
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 809b 	beq.w	800830e <USBD_StdEPReq+0x1ca>
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d03c      	beq.n	8008256 <USBD_StdEPReq+0x112>
 80081dc:	e140      	b.n	8008460 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d002      	beq.n	80081f0 <USBD_StdEPReq+0xac>
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d016      	beq.n	800821c <USBD_StdEPReq+0xd8>
 80081ee:	e02c      	b.n	800824a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081f0:	7bbb      	ldrb	r3, [r7, #14]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00d      	beq.n	8008212 <USBD_StdEPReq+0xce>
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
 80081f8:	2b80      	cmp	r3, #128	@ 0x80
 80081fa:	d00a      	beq.n	8008212 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
 80081fe:	4619      	mov	r1, r3
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f001 f9e5 	bl	80095d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008206:	2180      	movs	r1, #128	@ 0x80
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f001 f9e1 	bl	80095d0 <USBD_LL_StallEP>
 800820e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008210:	e020      	b.n	8008254 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fc7c 	bl	8008b12 <USBD_CtlError>
              break;
 800821a:	e01b      	b.n	8008254 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	885b      	ldrh	r3, [r3, #2]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10e      	bne.n	8008242 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008224:	7bbb      	ldrb	r3, [r7, #14]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00b      	beq.n	8008242 <USBD_StdEPReq+0xfe>
 800822a:	7bbb      	ldrb	r3, [r7, #14]
 800822c:	2b80      	cmp	r3, #128	@ 0x80
 800822e:	d008      	beq.n	8008242 <USBD_StdEPReq+0xfe>
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	88db      	ldrh	r3, [r3, #6]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d104      	bne.n	8008242 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008238:	7bbb      	ldrb	r3, [r7, #14]
 800823a:	4619      	mov	r1, r3
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f001 f9c7 	bl	80095d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fd43 	bl	8008cce <USBD_CtlSendStatus>

              break;
 8008248:	e004      	b.n	8008254 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fc60 	bl	8008b12 <USBD_CtlError>
              break;
 8008252:	bf00      	nop
          }
          break;
 8008254:	e109      	b.n	800846a <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800825c:	b2db      	uxtb	r3, r3
 800825e:	2b02      	cmp	r3, #2
 8008260:	d002      	beq.n	8008268 <USBD_StdEPReq+0x124>
 8008262:	2b03      	cmp	r3, #3
 8008264:	d016      	beq.n	8008294 <USBD_StdEPReq+0x150>
 8008266:	e04b      	b.n	8008300 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008268:	7bbb      	ldrb	r3, [r7, #14]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00d      	beq.n	800828a <USBD_StdEPReq+0x146>
 800826e:	7bbb      	ldrb	r3, [r7, #14]
 8008270:	2b80      	cmp	r3, #128	@ 0x80
 8008272:	d00a      	beq.n	800828a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008274:	7bbb      	ldrb	r3, [r7, #14]
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f001 f9a9 	bl	80095d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800827e:	2180      	movs	r1, #128	@ 0x80
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f001 f9a5 	bl	80095d0 <USBD_LL_StallEP>
 8008286:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008288:	e040      	b.n	800830c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fc40 	bl	8008b12 <USBD_CtlError>
              break;
 8008292:	e03b      	b.n	800830c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	885b      	ldrh	r3, [r3, #2]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d136      	bne.n	800830a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d004      	beq.n	80082b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80082a6:	7bbb      	ldrb	r3, [r7, #14]
 80082a8:	4619      	mov	r1, r3
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f001 f9af 	bl	800960e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 fd0c 	bl	8008cce <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80082b6:	7bbb      	ldrb	r3, [r7, #14]
 80082b8:	4619      	mov	r1, r3
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7ff fde3 	bl	8007e86 <USBD_CoreFindEP>
 80082c0:	4603      	mov	r3, r0
 80082c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082c4:	7b7b      	ldrb	r3, [r7, #13]
 80082c6:	2bff      	cmp	r3, #255	@ 0xff
 80082c8:	d01f      	beq.n	800830a <USBD_StdEPReq+0x1c6>
 80082ca:	7b7b      	ldrb	r3, [r7, #13]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d11c      	bne.n	800830a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80082d0:	7b7a      	ldrb	r2, [r7, #13]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80082d8:	7b7a      	ldrb	r2, [r7, #13]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	32ae      	adds	r2, #174	@ 0xae
 80082de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d010      	beq.n	800830a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80082e8:	7b7a      	ldrb	r2, [r7, #13]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	32ae      	adds	r2, #174	@ 0xae
 80082ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	4798      	blx	r3
 80082fa:	4603      	mov	r3, r0
 80082fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80082fe:	e004      	b.n	800830a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fc05 	bl	8008b12 <USBD_CtlError>
              break;
 8008308:	e000      	b.n	800830c <USBD_StdEPReq+0x1c8>
              break;
 800830a:	bf00      	nop
          }
          break;
 800830c:	e0ad      	b.n	800846a <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008314:	b2db      	uxtb	r3, r3
 8008316:	2b02      	cmp	r3, #2
 8008318:	d002      	beq.n	8008320 <USBD_StdEPReq+0x1dc>
 800831a:	2b03      	cmp	r3, #3
 800831c:	d033      	beq.n	8008386 <USBD_StdEPReq+0x242>
 800831e:	e099      	b.n	8008454 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008320:	7bbb      	ldrb	r3, [r7, #14]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d007      	beq.n	8008336 <USBD_StdEPReq+0x1f2>
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	2b80      	cmp	r3, #128	@ 0x80
 800832a:	d004      	beq.n	8008336 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fbef 	bl	8008b12 <USBD_CtlError>
                break;
 8008334:	e093      	b.n	800845e <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008336:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800833a:	2b00      	cmp	r3, #0
 800833c:	da0b      	bge.n	8008356 <USBD_StdEPReq+0x212>
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008344:	4613      	mov	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	3310      	adds	r3, #16
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	4413      	add	r3, r2
 8008352:	3304      	adds	r3, #4
 8008354:	e00b      	b.n	800836e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008356:	7bbb      	ldrb	r3, [r7, #14]
 8008358:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800835c:	4613      	mov	r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	4413      	add	r3, r2
 800836c:	3304      	adds	r3, #4
 800836e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	2200      	movs	r2, #0
 8008374:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	330e      	adds	r3, #14
 800837a:	2202      	movs	r2, #2
 800837c:	4619      	mov	r1, r3
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 fc44 	bl	8008c0c <USBD_CtlSendData>
              break;
 8008384:	e06b      	b.n	800845e <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008386:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800838a:	2b00      	cmp	r3, #0
 800838c:	da11      	bge.n	80083b2 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	f003 020f 	and.w	r2, r3, #15
 8008394:	6879      	ldr	r1, [r7, #4]
 8008396:	4613      	mov	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	009b      	lsls	r3, r3, #2
 800839e:	440b      	add	r3, r1
 80083a0:	3323      	adds	r3, #35	@ 0x23
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d117      	bne.n	80083d8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 fbb1 	bl	8008b12 <USBD_CtlError>
                  break;
 80083b0:	e055      	b.n	800845e <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083b2:	7bbb      	ldrb	r3, [r7, #14]
 80083b4:	f003 020f 	and.w	r2, r3, #15
 80083b8:	6879      	ldr	r1, [r7, #4]
 80083ba:	4613      	mov	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	440b      	add	r3, r1
 80083c4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d104      	bne.n	80083d8 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80083ce:	6839      	ldr	r1, [r7, #0]
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fb9e 	bl	8008b12 <USBD_CtlError>
                  break;
 80083d6:	e042      	b.n	800845e <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	da0b      	bge.n	80083f8 <USBD_StdEPReq+0x2b4>
 80083e0:	7bbb      	ldrb	r3, [r7, #14]
 80083e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80083e6:	4613      	mov	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	3310      	adds	r3, #16
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	4413      	add	r3, r2
 80083f4:	3304      	adds	r3, #4
 80083f6:	e00b      	b.n	8008410 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
 80083fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083fe:	4613      	mov	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	4413      	add	r3, r2
 800840e:	3304      	adds	r3, #4
 8008410:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008412:	7bbb      	ldrb	r3, [r7, #14]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d002      	beq.n	800841e <USBD_StdEPReq+0x2da>
 8008418:	7bbb      	ldrb	r3, [r7, #14]
 800841a:	2b80      	cmp	r3, #128	@ 0x80
 800841c:	d103      	bne.n	8008426 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	2200      	movs	r2, #0
 8008422:	739a      	strb	r2, [r3, #14]
 8008424:	e00e      	b.n	8008444 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008426:	7bbb      	ldrb	r3, [r7, #14]
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f001 f90e 	bl	800964c <USBD_LL_IsStallEP>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d003      	beq.n	800843e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2201      	movs	r2, #1
 800843a:	739a      	strb	r2, [r3, #14]
 800843c:	e002      	b.n	8008444 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2200      	movs	r2, #0
 8008442:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	330e      	adds	r3, #14
 8008448:	2202      	movs	r2, #2
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fbdd 	bl	8008c0c <USBD_CtlSendData>
              break;
 8008452:	e004      	b.n	800845e <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008454:	6839      	ldr	r1, [r7, #0]
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fb5b 	bl	8008b12 <USBD_CtlError>
              break;
 800845c:	bf00      	nop
          }
          break;
 800845e:	e004      	b.n	800846a <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fb55 	bl	8008b12 <USBD_CtlError>
          break;
 8008468:	bf00      	nop
      }
      break;
 800846a:	e005      	b.n	8008478 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fb4f 	bl	8008b12 <USBD_CtlError>
      break;
 8008474:	e000      	b.n	8008478 <USBD_StdEPReq+0x334>
      break;
 8008476:	bf00      	nop
  }

  return ret;
 8008478:	7bfb      	ldrb	r3, [r7, #15]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
	...

08008484 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008492:	2300      	movs	r3, #0
 8008494:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008496:	2300      	movs	r3, #0
 8008498:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	885b      	ldrh	r3, [r3, #2]
 800849e:	0a1b      	lsrs	r3, r3, #8
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	3b01      	subs	r3, #1
 80084a4:	2b06      	cmp	r3, #6
 80084a6:	f200 8128 	bhi.w	80086fa <USBD_GetDescriptor+0x276>
 80084aa:	a201      	add	r2, pc, #4	@ (adr r2, 80084b0 <USBD_GetDescriptor+0x2c>)
 80084ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b0:	080084cd 	.word	0x080084cd
 80084b4:	080084e5 	.word	0x080084e5
 80084b8:	08008525 	.word	0x08008525
 80084bc:	080086fb 	.word	0x080086fb
 80084c0:	080086fb 	.word	0x080086fb
 80084c4:	0800869b 	.word	0x0800869b
 80084c8:	080086c7 	.word	0x080086c7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	7c12      	ldrb	r2, [r2, #16]
 80084d8:	f107 0108 	add.w	r1, r7, #8
 80084dc:	4610      	mov	r0, r2
 80084de:	4798      	blx	r3
 80084e0:	60f8      	str	r0, [r7, #12]
      break;
 80084e2:	e112      	b.n	800870a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	7c1b      	ldrb	r3, [r3, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10d      	bne.n	8008508 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f4:	f107 0208 	add.w	r2, r7, #8
 80084f8:	4610      	mov	r0, r2
 80084fa:	4798      	blx	r3
 80084fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3301      	adds	r3, #1
 8008502:	2202      	movs	r2, #2
 8008504:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008506:	e100      	b.n	800870a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800850e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008510:	f107 0208 	add.w	r2, r7, #8
 8008514:	4610      	mov	r0, r2
 8008516:	4798      	blx	r3
 8008518:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	3301      	adds	r3, #1
 800851e:	2202      	movs	r2, #2
 8008520:	701a      	strb	r2, [r3, #0]
      break;
 8008522:	e0f2      	b.n	800870a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	885b      	ldrh	r3, [r3, #2]
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b05      	cmp	r3, #5
 800852c:	f200 80ac 	bhi.w	8008688 <USBD_GetDescriptor+0x204>
 8008530:	a201      	add	r2, pc, #4	@ (adr r2, 8008538 <USBD_GetDescriptor+0xb4>)
 8008532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008536:	bf00      	nop
 8008538:	08008551 	.word	0x08008551
 800853c:	08008585 	.word	0x08008585
 8008540:	080085b9 	.word	0x080085b9
 8008544:	080085ed 	.word	0x080085ed
 8008548:	08008621 	.word	0x08008621
 800854c:	08008655 	.word	0x08008655
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d00b      	beq.n	8008574 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	7c12      	ldrb	r2, [r2, #16]
 8008568:	f107 0108 	add.w	r1, r7, #8
 800856c:	4610      	mov	r0, r2
 800856e:	4798      	blx	r3
 8008570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008572:	e091      	b.n	8008698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 facb 	bl	8008b12 <USBD_CtlError>
            err++;
 800857c:	7afb      	ldrb	r3, [r7, #11]
 800857e:	3301      	adds	r3, #1
 8008580:	72fb      	strb	r3, [r7, #11]
          break;
 8008582:	e089      	b.n	8008698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00b      	beq.n	80085a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	7c12      	ldrb	r2, [r2, #16]
 800859c:	f107 0108 	add.w	r1, r7, #8
 80085a0:	4610      	mov	r0, r2
 80085a2:	4798      	blx	r3
 80085a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085a6:	e077      	b.n	8008698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 fab1 	bl	8008b12 <USBD_CtlError>
            err++;
 80085b0:	7afb      	ldrb	r3, [r7, #11]
 80085b2:	3301      	adds	r3, #1
 80085b4:	72fb      	strb	r3, [r7, #11]
          break;
 80085b6:	e06f      	b.n	8008698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00b      	beq.n	80085dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	7c12      	ldrb	r2, [r2, #16]
 80085d0:	f107 0108 	add.w	r1, r7, #8
 80085d4:	4610      	mov	r0, r2
 80085d6:	4798      	blx	r3
 80085d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085da:	e05d      	b.n	8008698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa97 	bl	8008b12 <USBD_CtlError>
            err++;
 80085e4:	7afb      	ldrb	r3, [r7, #11]
 80085e6:	3301      	adds	r3, #1
 80085e8:	72fb      	strb	r3, [r7, #11]
          break;
 80085ea:	e055      	b.n	8008698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00b      	beq.n	8008610 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	7c12      	ldrb	r2, [r2, #16]
 8008604:	f107 0108 	add.w	r1, r7, #8
 8008608:	4610      	mov	r0, r2
 800860a:	4798      	blx	r3
 800860c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800860e:	e043      	b.n	8008698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fa7d 	bl	8008b12 <USBD_CtlError>
            err++;
 8008618:	7afb      	ldrb	r3, [r7, #11]
 800861a:	3301      	adds	r3, #1
 800861c:	72fb      	strb	r3, [r7, #11]
          break;
 800861e:	e03b      	b.n	8008698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00b      	beq.n	8008644 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	7c12      	ldrb	r2, [r2, #16]
 8008638:	f107 0108 	add.w	r1, r7, #8
 800863c:	4610      	mov	r0, r2
 800863e:	4798      	blx	r3
 8008640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008642:	e029      	b.n	8008698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fa63 	bl	8008b12 <USBD_CtlError>
            err++;
 800864c:	7afb      	ldrb	r3, [r7, #11]
 800864e:	3301      	adds	r3, #1
 8008650:	72fb      	strb	r3, [r7, #11]
          break;
 8008652:	e021      	b.n	8008698 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00b      	beq.n	8008678 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	7c12      	ldrb	r2, [r2, #16]
 800866c:	f107 0108 	add.w	r1, r7, #8
 8008670:	4610      	mov	r0, r2
 8008672:	4798      	blx	r3
 8008674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008676:	e00f      	b.n	8008698 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa49 	bl	8008b12 <USBD_CtlError>
            err++;
 8008680:	7afb      	ldrb	r3, [r7, #11]
 8008682:	3301      	adds	r3, #1
 8008684:	72fb      	strb	r3, [r7, #11]
          break;
 8008686:	e007      	b.n	8008698 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008688:	6839      	ldr	r1, [r7, #0]
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 fa41 	bl	8008b12 <USBD_CtlError>
          err++;
 8008690:	7afb      	ldrb	r3, [r7, #11]
 8008692:	3301      	adds	r3, #1
 8008694:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008696:	bf00      	nop
      }
      break;
 8008698:	e037      	b.n	800870a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	7c1b      	ldrb	r3, [r3, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d109      	bne.n	80086b6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086aa:	f107 0208 	add.w	r2, r7, #8
 80086ae:	4610      	mov	r0, r2
 80086b0:	4798      	blx	r3
 80086b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086b4:	e029      	b.n	800870a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fa2a 	bl	8008b12 <USBD_CtlError>
        err++;
 80086be:	7afb      	ldrb	r3, [r7, #11]
 80086c0:	3301      	adds	r3, #1
 80086c2:	72fb      	strb	r3, [r7, #11]
      break;
 80086c4:	e021      	b.n	800870a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	7c1b      	ldrb	r3, [r3, #16]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10d      	bne.n	80086ea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d6:	f107 0208 	add.w	r2, r7, #8
 80086da:	4610      	mov	r0, r2
 80086dc:	4798      	blx	r3
 80086de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3301      	adds	r3, #1
 80086e4:	2207      	movs	r2, #7
 80086e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086e8:	e00f      	b.n	800870a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fa10 	bl	8008b12 <USBD_CtlError>
        err++;
 80086f2:	7afb      	ldrb	r3, [r7, #11]
 80086f4:	3301      	adds	r3, #1
 80086f6:	72fb      	strb	r3, [r7, #11]
      break;
 80086f8:	e007      	b.n	800870a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80086fa:	6839      	ldr	r1, [r7, #0]
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fa08 	bl	8008b12 <USBD_CtlError>
      err++;
 8008702:	7afb      	ldrb	r3, [r7, #11]
 8008704:	3301      	adds	r3, #1
 8008706:	72fb      	strb	r3, [r7, #11]
      break;
 8008708:	bf00      	nop
  }

  if (err != 0U)
 800870a:	7afb      	ldrb	r3, [r7, #11]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d11e      	bne.n	800874e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	88db      	ldrh	r3, [r3, #6]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d016      	beq.n	8008746 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008718:	893b      	ldrh	r3, [r7, #8]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00e      	beq.n	800873c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	88da      	ldrh	r2, [r3, #6]
 8008722:	893b      	ldrh	r3, [r7, #8]
 8008724:	4293      	cmp	r3, r2
 8008726:	bf28      	it	cs
 8008728:	4613      	movcs	r3, r2
 800872a:	b29b      	uxth	r3, r3
 800872c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800872e:	893b      	ldrh	r3, [r7, #8]
 8008730:	461a      	mov	r2, r3
 8008732:	68f9      	ldr	r1, [r7, #12]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fa69 	bl	8008c0c <USBD_CtlSendData>
 800873a:	e009      	b.n	8008750 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f9e7 	bl	8008b12 <USBD_CtlError>
 8008744:	e004      	b.n	8008750 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fac1 	bl	8008cce <USBD_CtlSendStatus>
 800874c:	e000      	b.n	8008750 <USBD_GetDescriptor+0x2cc>
    return;
 800874e:	bf00      	nop
  }
}
 8008750:	3710      	adds	r7, #16
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop

08008758 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	889b      	ldrh	r3, [r3, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d131      	bne.n	80087ce <USBD_SetAddress+0x76>
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	88db      	ldrh	r3, [r3, #6]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d12d      	bne.n	80087ce <USBD_SetAddress+0x76>
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	885b      	ldrh	r3, [r3, #2]
 8008776:	2b7f      	cmp	r3, #127	@ 0x7f
 8008778:	d829      	bhi.n	80087ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	885b      	ldrh	r3, [r3, #2]
 800877e:	b2db      	uxtb	r3, r3
 8008780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008784:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b03      	cmp	r3, #3
 8008790:	d104      	bne.n	800879c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008792:	6839      	ldr	r1, [r7, #0]
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f000 f9bc 	bl	8008b12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800879a:	e01d      	b.n	80087d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	7bfa      	ldrb	r2, [r7, #15]
 80087a0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 ff7b 	bl	80096a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fa8d 	bl	8008cce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80087b4:	7bfb      	ldrb	r3, [r7, #15]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d004      	beq.n	80087c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2202      	movs	r2, #2
 80087be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087c2:	e009      	b.n	80087d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087cc:	e004      	b.n	80087d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f99e 	bl	8008b12 <USBD_CtlError>
  }
}
 80087d6:	bf00      	nop
 80087d8:	bf00      	nop
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	885b      	ldrh	r3, [r3, #2]
 80087f2:	b2da      	uxtb	r2, r3
 80087f4:	4b4e      	ldr	r3, [pc, #312]	@ (8008930 <USBD_SetConfig+0x150>)
 80087f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80087f8:	4b4d      	ldr	r3, [pc, #308]	@ (8008930 <USBD_SetConfig+0x150>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d905      	bls.n	800880c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008800:	6839      	ldr	r1, [r7, #0]
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f985 	bl	8008b12 <USBD_CtlError>
    return USBD_FAIL;
 8008808:	2303      	movs	r3, #3
 800880a:	e08c      	b.n	8008926 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b02      	cmp	r3, #2
 8008816:	d002      	beq.n	800881e <USBD_SetConfig+0x3e>
 8008818:	2b03      	cmp	r3, #3
 800881a:	d029      	beq.n	8008870 <USBD_SetConfig+0x90>
 800881c:	e075      	b.n	800890a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800881e:	4b44      	ldr	r3, [pc, #272]	@ (8008930 <USBD_SetConfig+0x150>)
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d020      	beq.n	8008868 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008826:	4b42      	ldr	r3, [pc, #264]	@ (8008930 <USBD_SetConfig+0x150>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008830:	4b3f      	ldr	r3, [pc, #252]	@ (8008930 <USBD_SetConfig+0x150>)
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7fe ffcd 	bl	80077d6 <USBD_SetClassConfig>
 800883c:	4603      	mov	r3, r0
 800883e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d008      	beq.n	8008858 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008846:	6839      	ldr	r1, [r7, #0]
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f962 	bl	8008b12 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2202      	movs	r2, #2
 8008852:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008856:	e065      	b.n	8008924 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 fa38 	bl	8008cce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2203      	movs	r2, #3
 8008862:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008866:	e05d      	b.n	8008924 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	f000 fa30 	bl	8008cce <USBD_CtlSendStatus>
      break;
 800886e:	e059      	b.n	8008924 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008870:	4b2f      	ldr	r3, [pc, #188]	@ (8008930 <USBD_SetConfig+0x150>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d112      	bne.n	800889e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2202      	movs	r2, #2
 800887c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008880:	4b2b      	ldr	r3, [pc, #172]	@ (8008930 <USBD_SetConfig+0x150>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	461a      	mov	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800888a:	4b29      	ldr	r3, [pc, #164]	@ (8008930 <USBD_SetConfig+0x150>)
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	4619      	mov	r1, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7fe ffbc 	bl	800780e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fa19 	bl	8008cce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800889c:	e042      	b.n	8008924 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800889e:	4b24      	ldr	r3, [pc, #144]	@ (8008930 <USBD_SetConfig+0x150>)
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	461a      	mov	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d02a      	beq.n	8008902 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f7fe ffaa 	bl	800780e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80088ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008930 <USBD_SetConfig+0x150>)
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	461a      	mov	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088c4:	4b1a      	ldr	r3, [pc, #104]	@ (8008930 <USBD_SetConfig+0x150>)
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7fe ff83 	bl	80077d6 <USBD_SetClassConfig>
 80088d0:	4603      	mov	r3, r0
 80088d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00f      	beq.n	80088fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f918 	bl	8008b12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	4619      	mov	r1, r3
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7fe ff8f 	bl	800780e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2202      	movs	r2, #2
 80088f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80088f8:	e014      	b.n	8008924 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f9e7 	bl	8008cce <USBD_CtlSendStatus>
      break;
 8008900:	e010      	b.n	8008924 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f9e3 	bl	8008cce <USBD_CtlSendStatus>
      break;
 8008908:	e00c      	b.n	8008924 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f900 	bl	8008b12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008912:	4b07      	ldr	r3, [pc, #28]	@ (8008930 <USBD_SetConfig+0x150>)
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f7fe ff78 	bl	800780e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800891e:	2303      	movs	r3, #3
 8008920:	73fb      	strb	r3, [r7, #15]
      break;
 8008922:	bf00      	nop
  }

  return ret;
 8008924:	7bfb      	ldrb	r3, [r7, #15]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	200004d4 	.word	0x200004d4

08008934 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	88db      	ldrh	r3, [r3, #6]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d004      	beq.n	8008950 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008946:	6839      	ldr	r1, [r7, #0]
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f000 f8e2 	bl	8008b12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800894e:	e023      	b.n	8008998 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008956:	b2db      	uxtb	r3, r3
 8008958:	2b02      	cmp	r3, #2
 800895a:	dc02      	bgt.n	8008962 <USBD_GetConfig+0x2e>
 800895c:	2b00      	cmp	r3, #0
 800895e:	dc03      	bgt.n	8008968 <USBD_GetConfig+0x34>
 8008960:	e015      	b.n	800898e <USBD_GetConfig+0x5a>
 8008962:	2b03      	cmp	r3, #3
 8008964:	d00b      	beq.n	800897e <USBD_GetConfig+0x4a>
 8008966:	e012      	b.n	800898e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	3308      	adds	r3, #8
 8008972:	2201      	movs	r2, #1
 8008974:	4619      	mov	r1, r3
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f948 	bl	8008c0c <USBD_CtlSendData>
        break;
 800897c:	e00c      	b.n	8008998 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	3304      	adds	r3, #4
 8008982:	2201      	movs	r2, #1
 8008984:	4619      	mov	r1, r3
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f940 	bl	8008c0c <USBD_CtlSendData>
        break;
 800898c:	e004      	b.n	8008998 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800898e:	6839      	ldr	r1, [r7, #0]
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f8be 	bl	8008b12 <USBD_CtlError>
        break;
 8008996:	bf00      	nop
}
 8008998:	bf00      	nop
 800899a:	3708      	adds	r7, #8
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	3b01      	subs	r3, #1
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d81e      	bhi.n	80089f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	88db      	ldrh	r3, [r3, #6]
 80089bc:	2b02      	cmp	r3, #2
 80089be:	d004      	beq.n	80089ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f8a5 	bl	8008b12 <USBD_CtlError>
        break;
 80089c8:	e01a      	b.n	8008a00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d005      	beq.n	80089e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	f043 0202 	orr.w	r2, r3, #2
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	330c      	adds	r3, #12
 80089ea:	2202      	movs	r2, #2
 80089ec:	4619      	mov	r1, r3
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f90c 	bl	8008c0c <USBD_CtlSendData>
      break;
 80089f4:	e004      	b.n	8008a00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80089f6:	6839      	ldr	r1, [r7, #0]
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f000 f88a 	bl	8008b12 <USBD_CtlError>
      break;
 80089fe:	bf00      	nop
  }
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	885b      	ldrh	r3, [r3, #2]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d107      	bne.n	8008a2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f953 	bl	8008cce <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a28:	e013      	b.n	8008a52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	885b      	ldrh	r3, [r3, #2]
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d10b      	bne.n	8008a4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	889b      	ldrh	r3, [r3, #4]
 8008a36:	0a1b      	lsrs	r3, r3, #8
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	b2da      	uxtb	r2, r3
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f943 	bl	8008cce <USBD_CtlSendStatus>
}
 8008a48:	e003      	b.n	8008a52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 f860 	bl	8008b12 <USBD_CtlError>
}
 8008a52:	bf00      	nop
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b082      	sub	sp, #8
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d80b      	bhi.n	8008a8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	885b      	ldrh	r3, [r3, #2]
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d10c      	bne.n	8008a94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f923 	bl	8008cce <USBD_CtlSendStatus>
      }
      break;
 8008a88:	e004      	b.n	8008a94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 f840 	bl	8008b12 <USBD_CtlError>
      break;
 8008a92:	e000      	b.n	8008a96 <USBD_ClrFeature+0x3c>
      break;
 8008a94:	bf00      	nop
  }
}
 8008a96:	bf00      	nop
 8008a98:	3708      	adds	r7, #8
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b084      	sub	sp, #16
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	781a      	ldrb	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	781a      	ldrb	r2, [r3, #0]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ac8:	68f8      	ldr	r0, [r7, #12]
 8008aca:	f7ff fa3d 	bl	8007f48 <SWAPBYTE>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f7ff fa30 	bl	8007f48 <SWAPBYTE>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	461a      	mov	r2, r3
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	3301      	adds	r3, #1
 8008af4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3301      	adds	r3, #1
 8008afa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f7ff fa23 	bl	8007f48 <SWAPBYTE>
 8008b02:	4603      	mov	r3, r0
 8008b04:	461a      	mov	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	80da      	strh	r2, [r3, #6]
}
 8008b0a:	bf00      	nop
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b082      	sub	sp, #8
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b1c:	2180      	movs	r1, #128	@ 0x80
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fd56 	bl	80095d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b24:	2100      	movs	r1, #0
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fd52 	bl	80095d0 <USBD_LL_StallEP>
}
 8008b2c:	bf00      	nop
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b40:	2300      	movs	r3, #0
 8008b42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d042      	beq.n	8008bd0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008b4e:	6938      	ldr	r0, [r7, #16]
 8008b50:	f000 f842 	bl	8008bd8 <USBD_GetLen>
 8008b54:	4603      	mov	r3, r0
 8008b56:	3301      	adds	r3, #1
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b5e:	d808      	bhi.n	8008b72 <USBD_GetString+0x3e>
 8008b60:	6938      	ldr	r0, [r7, #16]
 8008b62:	f000 f839 	bl	8008bd8 <USBD_GetLen>
 8008b66:	4603      	mov	r3, r0
 8008b68:	3301      	adds	r3, #1
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	005b      	lsls	r3, r3, #1
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	e001      	b.n	8008b76 <USBD_GetString+0x42>
 8008b72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b7a:	7dfb      	ldrb	r3, [r7, #23]
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	4413      	add	r3, r2
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	7812      	ldrb	r2, [r2, #0]
 8008b84:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b86:	7dfb      	ldrb	r3, [r7, #23]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b8c:	7dfb      	ldrb	r3, [r7, #23]
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	4413      	add	r3, r2
 8008b92:	2203      	movs	r2, #3
 8008b94:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b9c:	e013      	b.n	8008bc6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008b9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	7812      	ldrb	r2, [r2, #0]
 8008ba8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	3301      	adds	r3, #1
 8008bae:	613b      	str	r3, [r7, #16]
    idx++;
 8008bb0:	7dfb      	ldrb	r3, [r7, #23]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008bb6:	7dfb      	ldrb	r3, [r7, #23]
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	4413      	add	r3, r2
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	701a      	strb	r2, [r3, #0]
    idx++;
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1e7      	bne.n	8008b9e <USBD_GetString+0x6a>
 8008bce:	e000      	b.n	8008bd2 <USBD_GetString+0x9e>
    return;
 8008bd0:	bf00      	nop
  }
}
 8008bd2:	3718      	adds	r7, #24
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008be0:	2300      	movs	r3, #0
 8008be2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008be8:	e005      	b.n	8008bf6 <USBD_GetLen+0x1e>
  {
    len++;
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	3301      	adds	r3, #1
 8008bee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1f5      	bne.n	8008bea <USBD_GetLen+0x12>
  }

  return len;
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	68ba      	ldr	r2, [r7, #8]
 8008c2a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	2100      	movs	r1, #0
 8008c38:	68f8      	ldr	r0, [r7, #12]
 8008c3a:	f000 fd52 	bl	80096e2 <USBD_LL_Transmit>

  return USBD_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	68ba      	ldr	r2, [r7, #8]
 8008c58:	2100      	movs	r1, #0
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f000 fd41 	bl	80096e2 <USBD_LL_Transmit>

  return USBD_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b084      	sub	sp, #16
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	60f8      	str	r0, [r7, #12]
 8008c72:	60b9      	str	r1, [r7, #8]
 8008c74:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2203      	movs	r2, #3
 8008c7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f000 fd41 	bl	8009724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f000 fd30 	bl	8009724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2204      	movs	r2, #4
 8008cda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008cde:	2300      	movs	r3, #0
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fcfc 	bl	80096e2 <USBD_LL_Transmit>

  return USBD_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2205      	movs	r2, #5
 8008d00:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d04:	2300      	movs	r3, #0
 8008d06:	2200      	movs	r2, #0
 8008d08:	2100      	movs	r1, #0
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fd0a 	bl	8009724 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d20:	2200      	movs	r2, #0
 8008d22:	4912      	ldr	r1, [pc, #72]	@ (8008d6c <MX_USB_DEVICE_Init+0x50>)
 8008d24:	4812      	ldr	r0, [pc, #72]	@ (8008d70 <MX_USB_DEVICE_Init+0x54>)
 8008d26:	f7fe fcd9 	bl	80076dc <USBD_Init>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d30:	f7f7 ffa6 	bl	8000c80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d34:	490f      	ldr	r1, [pc, #60]	@ (8008d74 <MX_USB_DEVICE_Init+0x58>)
 8008d36:	480e      	ldr	r0, [pc, #56]	@ (8008d70 <MX_USB_DEVICE_Init+0x54>)
 8008d38:	f7fe fd00 	bl	800773c <USBD_RegisterClass>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d42:	f7f7 ff9d 	bl	8000c80 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d46:	490c      	ldr	r1, [pc, #48]	@ (8008d78 <MX_USB_DEVICE_Init+0x5c>)
 8008d48:	4809      	ldr	r0, [pc, #36]	@ (8008d70 <MX_USB_DEVICE_Init+0x54>)
 8008d4a:	f7fe fbf7 	bl	800753c <USBD_CDC_RegisterInterface>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d001      	beq.n	8008d58 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d54:	f7f7 ff94 	bl	8000c80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d58:	4805      	ldr	r0, [pc, #20]	@ (8008d70 <MX_USB_DEVICE_Init+0x54>)
 8008d5a:	f7fe fd25 	bl	80077a8 <USBD_Start>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d64:	f7f7 ff8c 	bl	8000c80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d68:	bf00      	nop
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	200000e0 	.word	0x200000e0
 8008d70:	200004d8 	.word	0x200004d8
 8008d74:	20000044 	.word	0x20000044
 8008d78:	200000cc 	.word	0x200000cc

08008d7c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008d80:	2200      	movs	r2, #0
 8008d82:	4905      	ldr	r1, [pc, #20]	@ (8008d98 <CDC_Init_FS+0x1c>)
 8008d84:	4805      	ldr	r0, [pc, #20]	@ (8008d9c <CDC_Init_FS+0x20>)
 8008d86:	f7fe fbf3 	bl	8007570 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d8a:	4905      	ldr	r1, [pc, #20]	@ (8008da0 <CDC_Init_FS+0x24>)
 8008d8c:	4803      	ldr	r0, [pc, #12]	@ (8008d9c <CDC_Init_FS+0x20>)
 8008d8e:	f7fe fc11 	bl	80075b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	200009b4 	.word	0x200009b4
 8008d9c:	200004d8 	.word	0x200004d8
 8008da0:	200007b4 	.word	0x200007b4

08008da4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008da4:	b480      	push	{r7}
 8008da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008da8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	4603      	mov	r3, r0
 8008dbc:	6039      	str	r1, [r7, #0]
 8008dbe:	71fb      	strb	r3, [r7, #7]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008dc4:	79fb      	ldrb	r3, [r7, #7]
 8008dc6:	2b23      	cmp	r3, #35	@ 0x23
 8008dc8:	f200 8098 	bhi.w	8008efc <CDC_Control_FS+0x148>
 8008dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd4 <CDC_Control_FS+0x20>)
 8008dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd2:	bf00      	nop
 8008dd4:	08008efd 	.word	0x08008efd
 8008dd8:	08008efd 	.word	0x08008efd
 8008ddc:	08008efd 	.word	0x08008efd
 8008de0:	08008efd 	.word	0x08008efd
 8008de4:	08008efd 	.word	0x08008efd
 8008de8:	08008efd 	.word	0x08008efd
 8008dec:	08008efd 	.word	0x08008efd
 8008df0:	08008efd 	.word	0x08008efd
 8008df4:	08008efd 	.word	0x08008efd
 8008df8:	08008efd 	.word	0x08008efd
 8008dfc:	08008efd 	.word	0x08008efd
 8008e00:	08008efd 	.word	0x08008efd
 8008e04:	08008efd 	.word	0x08008efd
 8008e08:	08008efd 	.word	0x08008efd
 8008e0c:	08008efd 	.word	0x08008efd
 8008e10:	08008efd 	.word	0x08008efd
 8008e14:	08008efd 	.word	0x08008efd
 8008e18:	08008efd 	.word	0x08008efd
 8008e1c:	08008efd 	.word	0x08008efd
 8008e20:	08008efd 	.word	0x08008efd
 8008e24:	08008efd 	.word	0x08008efd
 8008e28:	08008efd 	.word	0x08008efd
 8008e2c:	08008efd 	.word	0x08008efd
 8008e30:	08008efd 	.word	0x08008efd
 8008e34:	08008efd 	.word	0x08008efd
 8008e38:	08008efd 	.word	0x08008efd
 8008e3c:	08008efd 	.word	0x08008efd
 8008e40:	08008efd 	.word	0x08008efd
 8008e44:	08008efd 	.word	0x08008efd
 8008e48:	08008efd 	.word	0x08008efd
 8008e4c:	08008efd 	.word	0x08008efd
 8008e50:	08008efd 	.word	0x08008efd
 8008e54:	08008e65 	.word	0x08008e65
 8008e58:	08008ea9 	.word	0x08008ea9
 8008e5c:	08008efd 	.word	0x08008efd
 8008e60:	08008efd 	.word	0x08008efd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	021b      	lsls	r3, r3, #8
 8008e72:	431a      	orrs	r2, r3
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	3302      	adds	r3, #2
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	041b      	lsls	r3, r3, #16
 8008e7c:	431a      	orrs	r2, r3
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	3303      	adds	r3, #3
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	061b      	lsls	r3, r3, #24
 8008e86:	4313      	orrs	r3, r2
 8008e88:	461a      	mov	r2, r3
 8008e8a:	4b20      	ldr	r3, [pc, #128]	@ (8008f0c <CDC_Control_FS+0x158>)
 8008e8c:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	791a      	ldrb	r2, [r3, #4]
 8008e92:	4b1e      	ldr	r3, [pc, #120]	@ (8008f0c <CDC_Control_FS+0x158>)
 8008e94:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	795a      	ldrb	r2, [r3, #5]
 8008e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8008f0c <CDC_Control_FS+0x158>)
 8008e9c:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	799a      	ldrb	r2, [r3, #6]
 8008ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8008f0c <CDC_Control_FS+0x158>)
 8008ea4:	719a      	strb	r2, [r3, #6]
    break;
 8008ea6:	e02a      	b.n	8008efe <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008ea8:	4b18      	ldr	r3, [pc, #96]	@ (8008f0c <CDC_Control_FS+0x158>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	b2da      	uxtb	r2, r3
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8008eb2:	4b16      	ldr	r3, [pc, #88]	@ (8008f0c <CDC_Control_FS+0x158>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	0a1a      	lsrs	r2, r3, #8
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	b2d2      	uxtb	r2, r2
 8008ebe:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8008ec0:	4b12      	ldr	r3, [pc, #72]	@ (8008f0c <CDC_Control_FS+0x158>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	0c1a      	lsrs	r2, r3, #16
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	3302      	adds	r3, #2
 8008eca:	b2d2      	uxtb	r2, r2
 8008ecc:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8008ece:	4b0f      	ldr	r3, [pc, #60]	@ (8008f0c <CDC_Control_FS+0x158>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	0e1a      	lsrs	r2, r3, #24
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	3303      	adds	r3, #3
 8008ed8:	b2d2      	uxtb	r2, r2
 8008eda:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	3304      	adds	r3, #4
 8008ee0:	4a0a      	ldr	r2, [pc, #40]	@ (8008f0c <CDC_Control_FS+0x158>)
 8008ee2:	7912      	ldrb	r2, [r2, #4]
 8008ee4:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	3305      	adds	r3, #5
 8008eea:	4a08      	ldr	r2, [pc, #32]	@ (8008f0c <CDC_Control_FS+0x158>)
 8008eec:	7952      	ldrb	r2, [r2, #5]
 8008eee:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	3306      	adds	r3, #6
 8008ef4:	4a05      	ldr	r2, [pc, #20]	@ (8008f0c <CDC_Control_FS+0x158>)
 8008ef6:	7992      	ldrb	r2, [r2, #6]
 8008ef8:	701a      	strb	r2, [r3, #0]
    break;
 8008efa:	e000      	b.n	8008efe <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008efc:	bf00      	nop
  }

  return (USBD_OK);
 8008efe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	200000c4 	.word	0x200000c4

08008f10 <CDC_Receive_FS>:
  *
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 8008f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f48 <CDC_Receive_FS+0x38>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d006      	beq.n	8008f30 <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 8008f22:	4b09      	ldr	r3, [pc, #36]	@ (8008f48 <CDC_Receive_FS+0x38>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	683a      	ldr	r2, [r7, #0]
 8008f28:	6812      	ldr	r2, [r2, #0]
 8008f2a:	4611      	mov	r1, r2
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f30:	6879      	ldr	r1, [r7, #4]
 8008f32:	4806      	ldr	r0, [pc, #24]	@ (8008f4c <CDC_Receive_FS+0x3c>)
 8008f34:	f7fe fb3e 	bl	80075b4 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f38:	4804      	ldr	r0, [pc, #16]	@ (8008f4c <CDC_Receive_FS+0x3c>)
 8008f3a:	f7fe fb99 	bl	8007670 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8008f3e:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	20000bb4 	.word	0x20000bb4
 8008f4c:	200004d8 	.word	0x200004d8

08008f50 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f60:	4b0d      	ldr	r3, [pc, #52]	@ (8008f98 <CDC_Transmit_FS+0x48>)
 8008f62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d001      	beq.n	8008f76 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008f72:	2301      	movs	r3, #1
 8008f74:	e00b      	b.n	8008f8e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008f76:	887b      	ldrh	r3, [r7, #2]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	6879      	ldr	r1, [r7, #4]
 8008f7c:	4806      	ldr	r0, [pc, #24]	@ (8008f98 <CDC_Transmit_FS+0x48>)
 8008f7e:	f7fe faf7 	bl	8007570 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008f82:	4805      	ldr	r0, [pc, #20]	@ (8008f98 <CDC_Transmit_FS+0x48>)
 8008f84:	f7fe fb34 	bl	80075f0 <USBD_CDC_TransmitPacket>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	200004d8 	.word	0x200004d8

08008f9c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008fae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	371c      	adds	r7, #28
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
	...

08008fc0 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 8008fc8:	4a04      	ldr	r2, [pc, #16]	@ (8008fdc <CDC_Attach_Rx+0x1c>)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6013      	str	r3, [r2, #0]
}
 8008fce:	bf00      	nop
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	20000bb4 	.word	0x20000bb4

08008fe0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	6039      	str	r1, [r7, #0]
 8008fea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	2212      	movs	r2, #18
 8008ff0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008ff2:	4b03      	ldr	r3, [pc, #12]	@ (8009000 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	200000fc 	.word	0x200000fc

08009004 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	4603      	mov	r3, r0
 800900c:	6039      	str	r1, [r7, #0]
 800900e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	2204      	movs	r2, #4
 8009014:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009016:	4b03      	ldr	r3, [pc, #12]	@ (8009024 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009018:	4618      	mov	r0, r3
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr
 8009024:	20000110 	.word	0x20000110

08009028 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	4603      	mov	r3, r0
 8009030:	6039      	str	r1, [r7, #0]
 8009032:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009034:	79fb      	ldrb	r3, [r7, #7]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d105      	bne.n	8009046 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	4907      	ldr	r1, [pc, #28]	@ (800905c <USBD_FS_ProductStrDescriptor+0x34>)
 800903e:	4808      	ldr	r0, [pc, #32]	@ (8009060 <USBD_FS_ProductStrDescriptor+0x38>)
 8009040:	f7ff fd78 	bl	8008b34 <USBD_GetString>
 8009044:	e004      	b.n	8009050 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	4904      	ldr	r1, [pc, #16]	@ (800905c <USBD_FS_ProductStrDescriptor+0x34>)
 800904a:	4805      	ldr	r0, [pc, #20]	@ (8009060 <USBD_FS_ProductStrDescriptor+0x38>)
 800904c:	f7ff fd72 	bl	8008b34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009050:	4b02      	ldr	r3, [pc, #8]	@ (800905c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009052:	4618      	mov	r0, r3
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	20000bb8 	.word	0x20000bb8
 8009060:	08009884 	.word	0x08009884

08009064 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	4603      	mov	r3, r0
 800906c:	6039      	str	r1, [r7, #0]
 800906e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	4904      	ldr	r1, [pc, #16]	@ (8009084 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009074:	4804      	ldr	r0, [pc, #16]	@ (8009088 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009076:	f7ff fd5d 	bl	8008b34 <USBD_GetString>
  return USBD_StrDesc;
 800907a:	4b02      	ldr	r3, [pc, #8]	@ (8009084 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800907c:	4618      	mov	r0, r3
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	20000bb8 	.word	0x20000bb8
 8009088:	0800989c 	.word	0x0800989c

0800908c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	4603      	mov	r3, r0
 8009094:	6039      	str	r1, [r7, #0]
 8009096:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	221a      	movs	r2, #26
 800909c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800909e:	f000 f843 	bl	8009128 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80090a2:	4b02      	ldr	r3, [pc, #8]	@ (80090ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	20000114 	.word	0x20000114

080090b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	4603      	mov	r3, r0
 80090b8:	6039      	str	r1, [r7, #0]
 80090ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80090bc:	79fb      	ldrb	r3, [r7, #7]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d105      	bne.n	80090ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	4907      	ldr	r1, [pc, #28]	@ (80090e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090c6:	4808      	ldr	r0, [pc, #32]	@ (80090e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090c8:	f7ff fd34 	bl	8008b34 <USBD_GetString>
 80090cc:	e004      	b.n	80090d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	4904      	ldr	r1, [pc, #16]	@ (80090e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090d2:	4805      	ldr	r0, [pc, #20]	@ (80090e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80090d4:	f7ff fd2e 	bl	8008b34 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090d8:	4b02      	ldr	r3, [pc, #8]	@ (80090e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20000bb8 	.word	0x20000bb8
 80090e8:	080098b0 	.word	0x080098b0

080090ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	4603      	mov	r3, r0
 80090f4:	6039      	str	r1, [r7, #0]
 80090f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090f8:	79fb      	ldrb	r3, [r7, #7]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d105      	bne.n	800910a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80090fe:	683a      	ldr	r2, [r7, #0]
 8009100:	4907      	ldr	r1, [pc, #28]	@ (8009120 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009102:	4808      	ldr	r0, [pc, #32]	@ (8009124 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009104:	f7ff fd16 	bl	8008b34 <USBD_GetString>
 8009108:	e004      	b.n	8009114 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	4904      	ldr	r1, [pc, #16]	@ (8009120 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800910e:	4805      	ldr	r0, [pc, #20]	@ (8009124 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009110:	f7ff fd10 	bl	8008b34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009114:	4b02      	ldr	r3, [pc, #8]	@ (8009120 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009116:	4618      	mov	r0, r3
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	20000bb8 	.word	0x20000bb8
 8009124:	080098bc 	.word	0x080098bc

08009128 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800912e:	4b0f      	ldr	r3, [pc, #60]	@ (800916c <Get_SerialNum+0x44>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009134:	4b0e      	ldr	r3, [pc, #56]	@ (8009170 <Get_SerialNum+0x48>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800913a:	4b0e      	ldr	r3, [pc, #56]	@ (8009174 <Get_SerialNum+0x4c>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4413      	add	r3, r2
 8009146:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d009      	beq.n	8009162 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800914e:	2208      	movs	r2, #8
 8009150:	4909      	ldr	r1, [pc, #36]	@ (8009178 <Get_SerialNum+0x50>)
 8009152:	68f8      	ldr	r0, [r7, #12]
 8009154:	f000 f814 	bl	8009180 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009158:	2204      	movs	r2, #4
 800915a:	4908      	ldr	r1, [pc, #32]	@ (800917c <Get_SerialNum+0x54>)
 800915c:	68b8      	ldr	r0, [r7, #8]
 800915e:	f000 f80f 	bl	8009180 <IntToUnicode>
  }
}
 8009162:	bf00      	nop
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	1fff7a10 	.word	0x1fff7a10
 8009170:	1fff7a14 	.word	0x1fff7a14
 8009174:	1fff7a18 	.word	0x1fff7a18
 8009178:	20000116 	.word	0x20000116
 800917c:	20000126 	.word	0x20000126

08009180 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009180:	b480      	push	{r7}
 8009182:	b087      	sub	sp, #28
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	4613      	mov	r3, r2
 800918c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800918e:	2300      	movs	r3, #0
 8009190:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009192:	2300      	movs	r3, #0
 8009194:	75fb      	strb	r3, [r7, #23]
 8009196:	e027      	b.n	80091e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	0f1b      	lsrs	r3, r3, #28
 800919c:	2b09      	cmp	r3, #9
 800919e:	d80b      	bhi.n	80091b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	0f1b      	lsrs	r3, r3, #28
 80091a4:	b2da      	uxtb	r2, r3
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	4619      	mov	r1, r3
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	440b      	add	r3, r1
 80091b0:	3230      	adds	r2, #48	@ 0x30
 80091b2:	b2d2      	uxtb	r2, r2
 80091b4:	701a      	strb	r2, [r3, #0]
 80091b6:	e00a      	b.n	80091ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	0f1b      	lsrs	r3, r3, #28
 80091bc:	b2da      	uxtb	r2, r3
 80091be:	7dfb      	ldrb	r3, [r7, #23]
 80091c0:	005b      	lsls	r3, r3, #1
 80091c2:	4619      	mov	r1, r3
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	440b      	add	r3, r1
 80091c8:	3237      	adds	r2, #55	@ 0x37
 80091ca:	b2d2      	uxtb	r2, r2
 80091cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	011b      	lsls	r3, r3, #4
 80091d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80091d4:	7dfb      	ldrb	r3, [r7, #23]
 80091d6:	005b      	lsls	r3, r3, #1
 80091d8:	3301      	adds	r3, #1
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	4413      	add	r3, r2
 80091de:	2200      	movs	r2, #0
 80091e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80091e2:	7dfb      	ldrb	r3, [r7, #23]
 80091e4:	3301      	adds	r3, #1
 80091e6:	75fb      	strb	r3, [r7, #23]
 80091e8:	7dfa      	ldrb	r2, [r7, #23]
 80091ea:	79fb      	ldrb	r3, [r7, #7]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d3d3      	bcc.n	8009198 <IntToUnicode+0x18>
  }
}
 80091f0:	bf00      	nop
 80091f2:	bf00      	nop
 80091f4:	371c      	adds	r7, #28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
	...

08009200 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b08a      	sub	sp, #40	@ 0x28
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009208:	f107 0314 	add.w	r3, r7, #20
 800920c:	2200      	movs	r2, #0
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	605a      	str	r2, [r3, #4]
 8009212:	609a      	str	r2, [r3, #8]
 8009214:	60da      	str	r2, [r3, #12]
 8009216:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009220:	d13a      	bne.n	8009298 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009222:	2300      	movs	r3, #0
 8009224:	613b      	str	r3, [r7, #16]
 8009226:	4b1e      	ldr	r3, [pc, #120]	@ (80092a0 <HAL_PCD_MspInit+0xa0>)
 8009228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800922a:	4a1d      	ldr	r2, [pc, #116]	@ (80092a0 <HAL_PCD_MspInit+0xa0>)
 800922c:	f043 0301 	orr.w	r3, r3, #1
 8009230:	6313      	str	r3, [r2, #48]	@ 0x30
 8009232:	4b1b      	ldr	r3, [pc, #108]	@ (80092a0 <HAL_PCD_MspInit+0xa0>)
 8009234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	613b      	str	r3, [r7, #16]
 800923c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800923e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009244:	2302      	movs	r3, #2
 8009246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009248:	2300      	movs	r3, #0
 800924a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800924c:	2303      	movs	r3, #3
 800924e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009250:	230a      	movs	r3, #10
 8009252:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009254:	f107 0314 	add.w	r3, r7, #20
 8009258:	4619      	mov	r1, r3
 800925a:	4812      	ldr	r0, [pc, #72]	@ (80092a4 <HAL_PCD_MspInit+0xa4>)
 800925c:	f7f9 fb86 	bl	800296c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009260:	4b0f      	ldr	r3, [pc, #60]	@ (80092a0 <HAL_PCD_MspInit+0xa0>)
 8009262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009264:	4a0e      	ldr	r2, [pc, #56]	@ (80092a0 <HAL_PCD_MspInit+0xa0>)
 8009266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800926a:	6353      	str	r3, [r2, #52]	@ 0x34
 800926c:	2300      	movs	r3, #0
 800926e:	60fb      	str	r3, [r7, #12]
 8009270:	4b0b      	ldr	r3, [pc, #44]	@ (80092a0 <HAL_PCD_MspInit+0xa0>)
 8009272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009274:	4a0a      	ldr	r2, [pc, #40]	@ (80092a0 <HAL_PCD_MspInit+0xa0>)
 8009276:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800927a:	6453      	str	r3, [r2, #68]	@ 0x44
 800927c:	4b08      	ldr	r3, [pc, #32]	@ (80092a0 <HAL_PCD_MspInit+0xa0>)
 800927e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009280:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009284:	60fb      	str	r3, [r7, #12]
 8009286:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009288:	2200      	movs	r2, #0
 800928a:	2100      	movs	r1, #0
 800928c:	2043      	movs	r0, #67	@ 0x43
 800928e:	f7f8 ffc6 	bl	800221e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009292:	2043      	movs	r0, #67	@ 0x43
 8009294:	f7f8 ffdf 	bl	8002256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009298:	bf00      	nop
 800929a:	3728      	adds	r7, #40	@ 0x28
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}
 80092a0:	40023800 	.word	0x40023800
 80092a4:	40020000 	.word	0x40020000

080092a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80092bc:	4619      	mov	r1, r3
 80092be:	4610      	mov	r0, r2
 80092c0:	f7fe fabf 	bl	8007842 <USBD_LL_SetupStage>
}
 80092c4:	bf00      	nop
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	460b      	mov	r3, r1
 80092d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80092de:	78fa      	ldrb	r2, [r7, #3]
 80092e0:	6879      	ldr	r1, [r7, #4]
 80092e2:	4613      	mov	r3, r2
 80092e4:	00db      	lsls	r3, r3, #3
 80092e6:	4413      	add	r3, r2
 80092e8:	009b      	lsls	r3, r3, #2
 80092ea:	440b      	add	r3, r1
 80092ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	78fb      	ldrb	r3, [r7, #3]
 80092f4:	4619      	mov	r1, r3
 80092f6:	f7fe faf9 	bl	80078ec <USBD_LL_DataOutStage>
}
 80092fa:	bf00      	nop
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b082      	sub	sp, #8
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	460b      	mov	r3, r1
 800930c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009314:	78fa      	ldrb	r2, [r7, #3]
 8009316:	6879      	ldr	r1, [r7, #4]
 8009318:	4613      	mov	r3, r2
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	4413      	add	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	440b      	add	r3, r1
 8009322:	3320      	adds	r3, #32
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	78fb      	ldrb	r3, [r7, #3]
 8009328:	4619      	mov	r1, r3
 800932a:	f7fe fb9b 	bl	8007a64 <USBD_LL_DataInStage>
}
 800932e:	bf00      	nop
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b082      	sub	sp, #8
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009344:	4618      	mov	r0, r3
 8009346:	f7fe fcdf 	bl	8007d08 <USBD_LL_SOF>
}
 800934a:	bf00      	nop
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b084      	sub	sp, #16
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800935a:	2301      	movs	r3, #1
 800935c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	79db      	ldrb	r3, [r3, #7]
 8009362:	2b02      	cmp	r3, #2
 8009364:	d001      	beq.n	800936a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009366:	f7f7 fc8b 	bl	8000c80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009370:	7bfa      	ldrb	r2, [r7, #15]
 8009372:	4611      	mov	r1, r2
 8009374:	4618      	mov	r0, r3
 8009376:	f7fe fc83 	bl	8007c80 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009380:	4618      	mov	r0, r3
 8009382:	f7fe fc2a 	bl	8007bda <USBD_LL_Reset>
}
 8009386:	bf00      	nop
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
	...

08009390 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fe fc7e 	bl	8007ca0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	6812      	ldr	r2, [r2, #0]
 80093b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80093b6:	f043 0301 	orr.w	r3, r3, #1
 80093ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	7adb      	ldrb	r3, [r3, #11]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d005      	beq.n	80093d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093c4:	4b04      	ldr	r3, [pc, #16]	@ (80093d8 <HAL_PCD_SuspendCallback+0x48>)
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	4a03      	ldr	r2, [pc, #12]	@ (80093d8 <HAL_PCD_SuspendCallback+0x48>)
 80093ca:	f043 0306 	orr.w	r3, r3, #6
 80093ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80093d0:	bf00      	nop
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	e000ed00 	.word	0xe000ed00

080093dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fe fc74 	bl	8007cd8 <USBD_LL_Resume>
}
 80093f0:	bf00      	nop
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	460b      	mov	r3, r1
 8009402:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800940a:	78fa      	ldrb	r2, [r7, #3]
 800940c:	4611      	mov	r1, r2
 800940e:	4618      	mov	r0, r3
 8009410:	f7fe fccc 	bl	8007dac <USBD_LL_IsoOUTIncomplete>
}
 8009414:	bf00      	nop
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	460b      	mov	r3, r1
 8009426:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800942e:	78fa      	ldrb	r2, [r7, #3]
 8009430:	4611      	mov	r1, r2
 8009432:	4618      	mov	r0, r3
 8009434:	f7fe fc88 	bl	8007d48 <USBD_LL_IsoINIncomplete>
}
 8009438:	bf00      	nop
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800944e:	4618      	mov	r0, r3
 8009450:	f7fe fcde 	bl	8007e10 <USBD_LL_DevConnected>
}
 8009454:	bf00      	nop
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800946a:	4618      	mov	r0, r3
 800946c:	f7fe fcdb 	bl	8007e26 <USBD_LL_DevDisconnected>
}
 8009470:	bf00      	nop
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d13c      	bne.n	8009502 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009488:	4a20      	ldr	r2, [pc, #128]	@ (800950c <USBD_LL_Init+0x94>)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a1e      	ldr	r2, [pc, #120]	@ (800950c <USBD_LL_Init+0x94>)
 8009494:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009498:	4b1c      	ldr	r3, [pc, #112]	@ (800950c <USBD_LL_Init+0x94>)
 800949a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800949e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80094a0:	4b1a      	ldr	r3, [pc, #104]	@ (800950c <USBD_LL_Init+0x94>)
 80094a2:	2204      	movs	r2, #4
 80094a4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80094a6:	4b19      	ldr	r3, [pc, #100]	@ (800950c <USBD_LL_Init+0x94>)
 80094a8:	2202      	movs	r2, #2
 80094aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80094ac:	4b17      	ldr	r3, [pc, #92]	@ (800950c <USBD_LL_Init+0x94>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80094b2:	4b16      	ldr	r3, [pc, #88]	@ (800950c <USBD_LL_Init+0x94>)
 80094b4:	2202      	movs	r2, #2
 80094b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80094b8:	4b14      	ldr	r3, [pc, #80]	@ (800950c <USBD_LL_Init+0x94>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80094be:	4b13      	ldr	r3, [pc, #76]	@ (800950c <USBD_LL_Init+0x94>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80094c4:	4b11      	ldr	r3, [pc, #68]	@ (800950c <USBD_LL_Init+0x94>)
 80094c6:	2200      	movs	r2, #0
 80094c8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80094ca:	4b10      	ldr	r3, [pc, #64]	@ (800950c <USBD_LL_Init+0x94>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80094d0:	4b0e      	ldr	r3, [pc, #56]	@ (800950c <USBD_LL_Init+0x94>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80094d6:	480d      	ldr	r0, [pc, #52]	@ (800950c <USBD_LL_Init+0x94>)
 80094d8:	f7f9 fd44 	bl	8002f64 <HAL_PCD_Init>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d001      	beq.n	80094e6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80094e2:	f7f7 fbcd 	bl	8000c80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80094e6:	2180      	movs	r1, #128	@ 0x80
 80094e8:	4808      	ldr	r0, [pc, #32]	@ (800950c <USBD_LL_Init+0x94>)
 80094ea:	f7fa ff70 	bl	80043ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80094ee:	2240      	movs	r2, #64	@ 0x40
 80094f0:	2100      	movs	r1, #0
 80094f2:	4806      	ldr	r0, [pc, #24]	@ (800950c <USBD_LL_Init+0x94>)
 80094f4:	f7fa ff24 	bl	8004340 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80094f8:	2280      	movs	r2, #128	@ 0x80
 80094fa:	2101      	movs	r1, #1
 80094fc:	4803      	ldr	r0, [pc, #12]	@ (800950c <USBD_LL_Init+0x94>)
 80094fe:	f7fa ff1f 	bl	8004340 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3708      	adds	r7, #8
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	20000db8 	.word	0x20000db8

08009510 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800951c:	2300      	movs	r3, #0
 800951e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009526:	4618      	mov	r0, r3
 8009528:	f7f9 fe2b 	bl	8003182 <HAL_PCD_Start>
 800952c:	4603      	mov	r3, r0
 800952e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	4618      	mov	r0, r3
 8009534:	f000 f942 	bl	80097bc <USBD_Get_USB_Status>
 8009538:	4603      	mov	r3, r0
 800953a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800953c:	7bbb      	ldrb	r3, [r7, #14]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b084      	sub	sp, #16
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	4608      	mov	r0, r1
 8009550:	4611      	mov	r1, r2
 8009552:	461a      	mov	r2, r3
 8009554:	4603      	mov	r3, r0
 8009556:	70fb      	strb	r3, [r7, #3]
 8009558:	460b      	mov	r3, r1
 800955a:	70bb      	strb	r3, [r7, #2]
 800955c:	4613      	mov	r3, r2
 800955e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009564:	2300      	movs	r3, #0
 8009566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800956e:	78bb      	ldrb	r3, [r7, #2]
 8009570:	883a      	ldrh	r2, [r7, #0]
 8009572:	78f9      	ldrb	r1, [r7, #3]
 8009574:	f7fa faff 	bl	8003b76 <HAL_PCD_EP_Open>
 8009578:	4603      	mov	r3, r0
 800957a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800957c:	7bfb      	ldrb	r3, [r7, #15]
 800957e:	4618      	mov	r0, r3
 8009580:	f000 f91c 	bl	80097bc <USBD_Get_USB_Status>
 8009584:	4603      	mov	r3, r0
 8009586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009588:	7bbb      	ldrb	r3, [r7, #14]
}
 800958a:	4618      	mov	r0, r3
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b084      	sub	sp, #16
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
 800959a:	460b      	mov	r3, r1
 800959c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a2:	2300      	movs	r3, #0
 80095a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095ac:	78fa      	ldrb	r2, [r7, #3]
 80095ae:	4611      	mov	r1, r2
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fa fb4a 	bl	8003c4a <HAL_PCD_EP_Close>
 80095b6:	4603      	mov	r3, r0
 80095b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 f8fd 	bl	80097bc <USBD_Get_USB_Status>
 80095c2:	4603      	mov	r3, r0
 80095c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	460b      	mov	r3, r1
 80095da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095dc:	2300      	movs	r3, #0
 80095de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095ea:	78fa      	ldrb	r2, [r7, #3]
 80095ec:	4611      	mov	r1, r2
 80095ee:	4618      	mov	r0, r3
 80095f0:	f7fa fc02 	bl	8003df8 <HAL_PCD_EP_SetStall>
 80095f4:	4603      	mov	r3, r0
 80095f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
 80095fa:	4618      	mov	r0, r3
 80095fc:	f000 f8de 	bl	80097bc <USBD_Get_USB_Status>
 8009600:	4603      	mov	r3, r0
 8009602:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009604:	7bbb      	ldrb	r3, [r7, #14]
}
 8009606:	4618      	mov	r0, r3
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b084      	sub	sp, #16
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
 8009616:	460b      	mov	r3, r1
 8009618:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009628:	78fa      	ldrb	r2, [r7, #3]
 800962a:	4611      	mov	r1, r2
 800962c:	4618      	mov	r0, r3
 800962e:	f7fa fc46 	bl	8003ebe <HAL_PCD_EP_ClrStall>
 8009632:	4603      	mov	r3, r0
 8009634:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009636:	7bfb      	ldrb	r3, [r7, #15]
 8009638:	4618      	mov	r0, r3
 800963a:	f000 f8bf 	bl	80097bc <USBD_Get_USB_Status>
 800963e:	4603      	mov	r3, r0
 8009640:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009642:	7bbb      	ldrb	r3, [r7, #14]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800964c:	b480      	push	{r7}
 800964e:	b085      	sub	sp, #20
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	460b      	mov	r3, r1
 8009656:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800965e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009660:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009664:	2b00      	cmp	r3, #0
 8009666:	da0b      	bge.n	8009680 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009668:	78fb      	ldrb	r3, [r7, #3]
 800966a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800966e:	68f9      	ldr	r1, [r7, #12]
 8009670:	4613      	mov	r3, r2
 8009672:	00db      	lsls	r3, r3, #3
 8009674:	4413      	add	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	440b      	add	r3, r1
 800967a:	3316      	adds	r3, #22
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	e00b      	b.n	8009698 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009686:	68f9      	ldr	r1, [r7, #12]
 8009688:	4613      	mov	r3, r2
 800968a:	00db      	lsls	r3, r3, #3
 800968c:	4413      	add	r3, r2
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	440b      	add	r3, r1
 8009692:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009696:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009698:	4618      	mov	r0, r3
 800969a:	3714      	adds	r7, #20
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	460b      	mov	r3, r1
 80096ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b0:	2300      	movs	r3, #0
 80096b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096be:	78fa      	ldrb	r2, [r7, #3]
 80096c0:	4611      	mov	r1, r2
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7fa fa33 	bl	8003b2e <HAL_PCD_SetAddress>
 80096c8:	4603      	mov	r3, r0
 80096ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 f874 	bl	80097bc <USBD_Get_USB_Status>
 80096d4:	4603      	mov	r3, r0
 80096d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b086      	sub	sp, #24
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	60f8      	str	r0, [r7, #12]
 80096ea:	607a      	str	r2, [r7, #4]
 80096ec:	603b      	str	r3, [r7, #0]
 80096ee:	460b      	mov	r3, r1
 80096f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096f2:	2300      	movs	r3, #0
 80096f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096f6:	2300      	movs	r3, #0
 80096f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009700:	7af9      	ldrb	r1, [r7, #11]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	f7fa fb3d 	bl	8003d84 <HAL_PCD_EP_Transmit>
 800970a:	4603      	mov	r3, r0
 800970c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800970e:	7dfb      	ldrb	r3, [r7, #23]
 8009710:	4618      	mov	r0, r3
 8009712:	f000 f853 	bl	80097bc <USBD_Get_USB_Status>
 8009716:	4603      	mov	r3, r0
 8009718:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800971a:	7dbb      	ldrb	r3, [r7, #22]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3718      	adds	r7, #24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	607a      	str	r2, [r7, #4]
 800972e:	603b      	str	r3, [r7, #0]
 8009730:	460b      	mov	r3, r1
 8009732:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009734:	2300      	movs	r3, #0
 8009736:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009742:	7af9      	ldrb	r1, [r7, #11]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	f7fa fac9 	bl	8003cde <HAL_PCD_EP_Receive>
 800974c:	4603      	mov	r3, r0
 800974e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009750:	7dfb      	ldrb	r3, [r7, #23]
 8009752:	4618      	mov	r0, r3
 8009754:	f000 f832 	bl	80097bc <USBD_Get_USB_Status>
 8009758:	4603      	mov	r3, r0
 800975a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800975c:	7dbb      	ldrb	r3, [r7, #22]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3718      	adds	r7, #24
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b082      	sub	sp, #8
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	460b      	mov	r3, r1
 8009770:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009778:	78fa      	ldrb	r2, [r7, #3]
 800977a:	4611      	mov	r1, r2
 800977c:	4618      	mov	r0, r3
 800977e:	f7fa fae9 	bl	8003d54 <HAL_PCD_EP_GetRxCount>
 8009782:	4603      	mov	r3, r0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3708      	adds	r7, #8
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009794:	4b03      	ldr	r3, [pc, #12]	@ (80097a4 <USBD_static_malloc+0x18>)
}
 8009796:	4618      	mov	r0, r3
 8009798:	370c      	adds	r7, #12
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr
 80097a2:	bf00      	nop
 80097a4:	2000129c 	.word	0x2000129c

080097a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]

}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097bc:	b480      	push	{r7}
 80097be:	b085      	sub	sp, #20
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	4603      	mov	r3, r0
 80097c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c6:	2300      	movs	r3, #0
 80097c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097ca:	79fb      	ldrb	r3, [r7, #7]
 80097cc:	2b03      	cmp	r3, #3
 80097ce:	d817      	bhi.n	8009800 <USBD_Get_USB_Status+0x44>
 80097d0:	a201      	add	r2, pc, #4	@ (adr r2, 80097d8 <USBD_Get_USB_Status+0x1c>)
 80097d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d6:	bf00      	nop
 80097d8:	080097e9 	.word	0x080097e9
 80097dc:	080097ef 	.word	0x080097ef
 80097e0:	080097f5 	.word	0x080097f5
 80097e4:	080097fb 	.word	0x080097fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	73fb      	strb	r3, [r7, #15]
    break;
 80097ec:	e00b      	b.n	8009806 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80097ee:	2303      	movs	r3, #3
 80097f0:	73fb      	strb	r3, [r7, #15]
    break;
 80097f2:	e008      	b.n	8009806 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80097f4:	2301      	movs	r3, #1
 80097f6:	73fb      	strb	r3, [r7, #15]
    break;
 80097f8:	e005      	b.n	8009806 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80097fa:	2303      	movs	r3, #3
 80097fc:	73fb      	strb	r3, [r7, #15]
    break;
 80097fe:	e002      	b.n	8009806 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009800:	2303      	movs	r3, #3
 8009802:	73fb      	strb	r3, [r7, #15]
    break;
 8009804:	bf00      	nop
  }
  return usb_status;
 8009806:	7bfb      	ldrb	r3, [r7, #15]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3714      	adds	r7, #20
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <memset>:
 8009814:	4402      	add	r2, r0
 8009816:	4603      	mov	r3, r0
 8009818:	4293      	cmp	r3, r2
 800981a:	d100      	bne.n	800981e <memset+0xa>
 800981c:	4770      	bx	lr
 800981e:	f803 1b01 	strb.w	r1, [r3], #1
 8009822:	e7f9      	b.n	8009818 <memset+0x4>

08009824 <__libc_init_array>:
 8009824:	b570      	push	{r4, r5, r6, lr}
 8009826:	4d0d      	ldr	r5, [pc, #52]	@ (800985c <__libc_init_array+0x38>)
 8009828:	4c0d      	ldr	r4, [pc, #52]	@ (8009860 <__libc_init_array+0x3c>)
 800982a:	1b64      	subs	r4, r4, r5
 800982c:	10a4      	asrs	r4, r4, #2
 800982e:	2600      	movs	r6, #0
 8009830:	42a6      	cmp	r6, r4
 8009832:	d109      	bne.n	8009848 <__libc_init_array+0x24>
 8009834:	4d0b      	ldr	r5, [pc, #44]	@ (8009864 <__libc_init_array+0x40>)
 8009836:	4c0c      	ldr	r4, [pc, #48]	@ (8009868 <__libc_init_array+0x44>)
 8009838:	f000 f818 	bl	800986c <_init>
 800983c:	1b64      	subs	r4, r4, r5
 800983e:	10a4      	asrs	r4, r4, #2
 8009840:	2600      	movs	r6, #0
 8009842:	42a6      	cmp	r6, r4
 8009844:	d105      	bne.n	8009852 <__libc_init_array+0x2e>
 8009846:	bd70      	pop	{r4, r5, r6, pc}
 8009848:	f855 3b04 	ldr.w	r3, [r5], #4
 800984c:	4798      	blx	r3
 800984e:	3601      	adds	r6, #1
 8009850:	e7ee      	b.n	8009830 <__libc_init_array+0xc>
 8009852:	f855 3b04 	ldr.w	r3, [r5], #4
 8009856:	4798      	blx	r3
 8009858:	3601      	adds	r6, #1
 800985a:	e7f2      	b.n	8009842 <__libc_init_array+0x1e>
 800985c:	08009904 	.word	0x08009904
 8009860:	08009904 	.word	0x08009904
 8009864:	08009904 	.word	0x08009904
 8009868:	08009908 	.word	0x08009908

0800986c <_init>:
 800986c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986e:	bf00      	nop
 8009870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009872:	bc08      	pop	{r3}
 8009874:	469e      	mov	lr, r3
 8009876:	4770      	bx	lr

08009878 <_fini>:
 8009878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987a:	bf00      	nop
 800987c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800987e:	bc08      	pop	{r3}
 8009880:	469e      	mov	lr, r3
 8009882:	4770      	bx	lr
