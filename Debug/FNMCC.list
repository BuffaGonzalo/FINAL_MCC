
FNMCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0f4  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df8  0800c28c  0800c28c  0000d28c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d084  0800d084  0000f138  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d084  0800d084  0000e084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d08c  0800d08c  0000f138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d08c  0800d08c  0000e08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d090  0800d090  0000e090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000138  20000000  0800d094  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001854  20000138  0800d1cc  0000f138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000198c  0800d1cc  0000f98c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a11b  00000000  00000000  0000f168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004135  00000000  00000000  00029283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001790  00000000  00000000  0002d3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001230  00000000  00000000  0002eb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5d1  00000000  00000000  0002fd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e993  00000000  00000000  0004b349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ee4f  00000000  00000000  00069cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108b2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006320  00000000  00000000  00108b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0010ee90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000138 	.word	0x20000138
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c274 	.word	0x0800c274

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000013c 	.word	0x2000013c
 80001d4:	0800c274 	.word	0x0800c274

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++) {
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	e00a      	b.n	8000528 <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 8000512:	4a0a      	ldr	r2, [pc, #40]	@ (800053c <HAL_ADC_ConvCpltCallback+0x38>)
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800051a:	4a09      	ldr	r2, [pc, #36]	@ (8000540 <HAL_ADC_ConvCpltCallback+0x3c>)
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	3301      	adds	r3, #1
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b07      	cmp	r3, #7
 800052c:	ddf1      	ble.n	8000512 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 800052e:	bf00      	nop
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	2000035c 	.word	0x2000035c
 8000540:	2000036c 	.word	0x2000036c

08000544 <HAL_I2C_MasterTxCpltCallback>:
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	//Control del final de operaciones
    //if (hi2c->Instance == hi2c1.Instance) {
        SSD1306_TxCplt = 1;
 800054c:	4b04      	ldr	r3, [pc, #16]	@ (8000560 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 800054e:	2201      	movs	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
    //}
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20000595 	.word	0x20000595

08000564 <HAL_TIM_PeriodElapsedCallback>:
//}
//void HAL_I2C_ER_IRQHandler(){
//	HAL_I2C_ER_IRQHandler(&hi2c1);
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a0e      	ldr	r2, [pc, #56]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d116      	bne.n	80005a4 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000576:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	3301      	adds	r3, #1
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000580:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 8000582:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b28      	cmp	r3, #40	@ 0x28
 8000588:	d107      	bne.n	800059a <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 800058a:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
			IS10MS=TRUE;
 8000590:	4a08      	ldr	r2, [pc, #32]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000592:	7813      	ldrb	r3, [r2, #0]
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 800059a:	2208      	movs	r2, #8
 800059c:	4906      	ldr	r1, [pc, #24]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800059e:	4807      	ldr	r0, [pc, #28]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80005a0:	f001 fd6a 	bl	8002078 <HAL_ADC_Start_DMA>
	}
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40010000 	.word	0x40010000
 80005b0:	20000358 	.word	0x20000358
 80005b4:	20000594 	.word	0x20000594
 80005b8:	2000035c 	.word	0x2000035c
 80005bc:	20000154 	.word	0x20000154

080005c0 <USBRxData>:

void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 80005c0:	b490      	push	{r4, r7}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	e018      	b.n	8000602 <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	441a      	add	r2, r3
 80005d6:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <USBRxData+0x58>)
 80005d8:	6819      	ldr	r1, [r3, #0]
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <USBRxData+0x58>)
 80005dc:	795b      	ldrb	r3, [r3, #5]
 80005de:	1c58      	adds	r0, r3, #1
 80005e0:	b2c4      	uxtb	r4, r0
 80005e2:	480d      	ldr	r0, [pc, #52]	@ (8000618 <USBRxData+0x58>)
 80005e4:	7144      	strb	r4, [r0, #5]
 80005e6:	440b      	add	r3, r1
 80005e8:	7812      	ldrb	r2, [r2, #0]
 80005ea:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <USBRxData+0x58>)
 80005ee:	795a      	ldrb	r2, [r3, #5]
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <USBRxData+0x58>)
 80005f2:	799b      	ldrb	r3, [r3, #6]
 80005f4:	4013      	ands	r3, r2
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <USBRxData+0x58>)
 80005fa:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	3301      	adds	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	429a      	cmp	r2, r3
 8000608:	d8e2      	bhi.n	80005d0 <USBRxData+0x10>
	}

}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bc90      	pop	{r4, r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000388 	.word	0x20000388

0800061c <USBTask>:

void USBTask() {
 800061c:	b580      	push	{r7, lr}
 800061e:	b0c2      	sub	sp, #264	@ 0x108
 8000620:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 8000622:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <USBTask+0x90>)
 8000624:	791a      	ldrb	r2, [r3, #4]
 8000626:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <USBTask+0x90>)
 8000628:	795b      	ldrb	r3, [r3, #5]
 800062a:	429a      	cmp	r2, r3
 800062c:	d039      	beq.n	80006a2 <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (decodeHeader(&USBRx))
 800062e:	481f      	ldr	r0, [pc, #124]	@ (80006ac <USBTask+0x90>)
 8000630:	f000 fcc4 	bl	8000fbc <decodeHeader>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 800063a:	491d      	ldr	r1, [pc, #116]	@ (80006b0 <USBTask+0x94>)
 800063c:	481b      	ldr	r0, [pc, #108]	@ (80006ac <USBTask+0x90>)
 800063e:	f000 f839 	bl	80006b4 <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000642:	2300      	movs	r3, #0
 8000644:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000648:	e01d      	b.n	8000686 <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 800064a:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <USBTask+0x94>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <USBTask+0x94>)
 8000650:	7a1b      	ldrb	r3, [r3, #8]
 8000652:	1c59      	adds	r1, r3, #1
 8000654:	b2c8      	uxtb	r0, r1
 8000656:	4916      	ldr	r1, [pc, #88]	@ (80006b0 <USBTask+0x94>)
 8000658:	7208      	strb	r0, [r1, #8]
 800065a:	441a      	add	r2, r3
 800065c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000660:	7811      	ldrb	r1, [r2, #0]
 8000662:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000666:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800066a:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 800066c:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <USBTask+0x94>)
 800066e:	7a1a      	ldrb	r2, [r3, #8]
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <USBTask+0x94>)
 8000672:	799b      	ldrb	r3, [r3, #6]
 8000674:	4013      	ands	r3, r2
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <USBTask+0x94>)
 800067a:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 800067c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000680:	3301      	adds	r3, #1
 8000682:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000686:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <USBTask+0x94>)
 8000688:	79db      	ldrb	r3, [r3, #7]
 800068a:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 800068e:	429a      	cmp	r2, r3
 8000690:	d3db      	bcc.n	800064a <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 8000692:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <USBTask+0x94>)
 8000694:	79db      	ldrb	r3, [r3, #7]
 8000696:	461a      	mov	r2, r3
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4611      	mov	r1, r2
 800069c:	4618      	mov	r0, r3
 800069e:	f00b f95b 	bl	800b958 <CDC_Transmit_FS>
	}

}
 80006a2:	bf00      	nop
 80006a4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000388 	.word	0x20000388
 80006b0:	2000037c 	.word	0x2000037c

080006b4 <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	7a12      	ldrb	r2, [r2, #8]
 80006c6:	4413      	add	r3, r2
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2bf0      	cmp	r3, #240	@ 0xf0
 80006cc:	d002      	beq.n	80006d4 <decodeCommand+0x20>
 80006ce:	2bf1      	cmp	r3, #241	@ 0xf1
 80006d0:	d010      	beq.n	80006f4 <decodeCommand+0x40>
 80006d2:	e01f      	b.n	8000714 <decodeCommand+0x60>
	case ALIVE:
		putHeaderOnTx(dataTx, ALIVE, 2);
 80006d4:	2202      	movs	r2, #2
 80006d6:	21f0      	movs	r1, #240	@ 0xf0
 80006d8:	6838      	ldr	r0, [r7, #0]
 80006da:	f000 fb4d 	bl	8000d78 <putHeaderOnTx>
		putByteOnTx(dataTx, ACK);
 80006de:	210d      	movs	r1, #13
 80006e0:	6838      	ldr	r0, [r7, #0]
 80006e2:	f000 fbf8 	bl	8000ed6 <putByteOnTx>
		putByteOnTx(dataTx, dataTx->chk);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	7a5b      	ldrb	r3, [r3, #9]
 80006ea:	4619      	mov	r1, r3
 80006ec:	6838      	ldr	r0, [r7, #0]
 80006ee:	f000 fbf2 	bl	8000ed6 <putByteOnTx>
		break;
 80006f2:	e025      	b.n	8000740 <decodeCommand+0x8c>
	case FIRMWARE:
		putHeaderOnTx(dataTx, FIRMWARE, 13);
 80006f4:	220d      	movs	r2, #13
 80006f6:	21f1      	movs	r1, #241	@ 0xf1
 80006f8:	6838      	ldr	r0, [r7, #0]
 80006fa:	f000 fb3d 	bl	8000d78 <putHeaderOnTx>
		putStrOntx(dataTx, firmware);
 80006fe:	4912      	ldr	r1, [pc, #72]	@ (8000748 <decodeCommand+0x94>)
 8000700:	6838      	ldr	r0, [r7, #0]
 8000702:	f000 fc16 	bl	8000f32 <putStrOntx>
		putByteOnTx(dataTx, dataTx->chk);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	7a5b      	ldrb	r3, [r3, #9]
 800070a:	4619      	mov	r1, r3
 800070c:	6838      	ldr	r0, [r7, #0]
 800070e:	f000 fbe2 	bl	8000ed6 <putByteOnTx>
		break;
 8000712:	e015      	b.n	8000740 <decodeCommand+0x8c>
	default:
		putHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	7a12      	ldrb	r2, [r2, #8]
 800071c:	4413      	add	r3, r2
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2202      	movs	r2, #2
 8000722:	4619      	mov	r1, r3
 8000724:	6838      	ldr	r0, [r7, #0]
 8000726:	f000 fb27 	bl	8000d78 <putHeaderOnTx>
		putByteOnTx(dataTx, UNKNOWN);
 800072a:	21ff      	movs	r1, #255	@ 0xff
 800072c:	6838      	ldr	r0, [r7, #0]
 800072e:	f000 fbd2 	bl	8000ed6 <putByteOnTx>
		putByteOnTx(dataTx, dataTx->chk);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	7a5b      	ldrb	r3, [r3, #9]
 8000736:	4619      	mov	r1, r3
 8000738:	6838      	ldr	r0, [r7, #0]
 800073a:	f000 fbcc 	bl	8000ed6 <putByteOnTx>
		break;
 800073e:	bf00      	nop
	}
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	0800d054 	.word	0x0800d054

0800074c <do10ms>:

void do10ms() {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	if(IS10MS){
 8000750:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <do10ms+0x48>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d017      	beq.n	800078e <do10ms+0x42>
		IS10MS=FALSE;
 800075e:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <do10ms+0x48>)
 8000760:	7813      	ldrb	r3, [r2, #0]
 8000762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000766:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 8000768:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <do10ms+0x4c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3b01      	subs	r3, #1
 800076e:	4a0a      	ldr	r2, [pc, #40]	@ (8000798 <do10ms+0x4c>)
 8000770:	6013      	str	r3, [r2, #0]
		if (tmo100ms == 0) {
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <do10ms+0x4c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d109      	bne.n	800078e <do10ms+0x42>
			tmo100ms = 10;
 800077a:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <do10ms+0x4c>)
 800077c:	220a      	movs	r2, #10
 800077e:	601a      	str	r2, [r3, #0]
			IS100MS=TRUE;
 8000780:	4a04      	ldr	r2, [pc, #16]	@ (8000794 <do10ms+0x48>)
 8000782:	7813      	ldrb	r3, [r2, #0]
 8000784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000788:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 800078a:	f000 f807 	bl	800079c <heartBeatTask>
		}
	}
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000594 	.word	0x20000594
 8000798:	20000030 	.word	0x20000030

0800079c <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <heartBeatTask+0x44>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	43db      	mvns	r3, r3
 80007a6:	4a0f      	ldr	r2, [pc, #60]	@ (80007e4 <heartBeatTask+0x48>)
 80007a8:	7812      	ldrb	r2, [r2, #0]
 80007aa:	4611      	mov	r1, r2
 80007ac:	2201      	movs	r2, #1
 80007ae:	408a      	lsls	r2, r1
 80007b0:	4013      	ands	r3, r2
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 80007b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ba:	480b      	ldr	r0, [pc, #44]	@ (80007e8 <heartBeatTask+0x4c>)
 80007bc:	f002 fe83 	bl	80034c6 <HAL_GPIO_TogglePin>

	times++;
 80007c0:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <heartBeatTask+0x48>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <heartBeatTask+0x48>)
 80007ca:	701a      	strb	r2, [r3, #0]
	times &= 31;
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <heartBeatTask+0x48>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	f003 031f 	and.w	r3, r3, #31
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b03      	ldr	r3, [pc, #12]	@ (80007e4 <heartBeatTask+0x48>)
 80007d8:	701a      	strb	r2, [r3, #0]
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000008 	.word	0x20000008
 80007e4:	20000596 	.word	0x20000596
 80007e8:	40020800 	.word	0x40020800

080007ec <SSD1306Upd>:

void SSD1306Upd(){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	SSD1306_GotoXY(10, 0);
 80007f0:	2100      	movs	r1, #0
 80007f2:	200a      	movs	r0, #10
 80007f4:	f000 fe8a 	bl	800150c <SSD1306_GotoXY>
	SSD1306_Puts("CONEXION", &Font_11x18, WHITE);
 80007f8:	2201      	movs	r2, #1
 80007fa:	490d      	ldr	r1, [pc, #52]	@ (8000830 <SSD1306Upd+0x44>)
 80007fc:	480d      	ldr	r0, [pc, #52]	@ (8000834 <SSD1306Upd+0x48>)
 80007fe:	f000 ff19 	bl	8001634 <SSD1306_Puts>
	SSD1306_GotoXY(10, 20);
 8000802:	2114      	movs	r1, #20
 8000804:	200a      	movs	r0, #10
 8000806:	f000 fe81 	bl	800150c <SSD1306_GotoXY>
	SSD1306_Puts("OLED I2C", &Font_11x18, WHITE);
 800080a:	2201      	movs	r2, #1
 800080c:	4908      	ldr	r1, [pc, #32]	@ (8000830 <SSD1306Upd+0x44>)
 800080e:	480a      	ldr	r0, [pc, #40]	@ (8000838 <SSD1306Upd+0x4c>)
 8000810:	f000 ff10 	bl	8001634 <SSD1306_Puts>
	SSD1306_GotoXY(10, 40);
 8000814:	2128      	movs	r1, #40	@ 0x28
 8000816:	200a      	movs	r0, #10
 8000818:	f000 fe78 	bl	800150c <SSD1306_GotoXY>
	SSD1306_Puts("BLACK PILL", &Font_11x18, WHITE);
 800081c:	2201      	movs	r2, #1
 800081e:	4904      	ldr	r1, [pc, #16]	@ (8000830 <SSD1306Upd+0x44>)
 8000820:	4806      	ldr	r0, [pc, #24]	@ (800083c <SSD1306Upd+0x50>)
 8000822:	f000 ff07 	bl	8001634 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000826:	f000 fdc3 	bl	80013b0 <SSD1306_UpdateScreen>
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000000 	.word	0x20000000
 8000834:	0800c28c 	.word	0x0800c28c
 8000838:	0800c298 	.word	0x0800c298
 800083c:	0800c2a4 	.word	0x0800c2a4

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f001 fa2e 	bl	8001ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f842 	bl	80008d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 fa2e 	bl	8000cac <MX_GPIO_Init>
  MX_DMA_Init();
 8000850:	f000 f9ee 	bl	8000c30 <MX_DMA_Init>
  MX_ADC1_Init();
 8000854:	f000 f8a4 	bl	80009a0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000858:	f000 f956 	bl	8000b08 <MX_I2C1_Init>
  MX_TIM1_Init();
 800085c:	f000 f982 	bl	8000b64 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000860:	f00a ff60 	bl	800b724 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 8000864:	4811      	ldr	r0, [pc, #68]	@ (80008ac <main+0x6c>)
 8000866:	f00b f8af 	bl	800b9c8 <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1); //timer
 800086a:	4811      	ldr	r0, [pc, #68]	@ (80008b0 <main+0x70>)
 800086c:	f006 ff64 	bl	8007738 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000876:	480f      	ldr	r0, [pc, #60]	@ (80008b4 <main+0x74>)
 8000878:	f002 fe0c 	bl	8003494 <HAL_GPIO_WritePin>

	//Display
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 800087c:	2201      	movs	r2, #1
 800087e:	2102      	movs	r1, #2
 8000880:	480d      	ldr	r0, [pc, #52]	@ (80008b8 <main+0x78>)
 8000882:	f002 fe07 	bl	8003494 <HAL_GPIO_WritePin>

	SSD1306_Init();
 8000886:	f000 fccf 	bl	8001228 <SSD1306_Init>

	//Inicializacion de protocolo
	initComm(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <main+0x7c>)
 800088c:	4a0c      	ldr	r2, [pc, #48]	@ (80008c0 <main+0x80>)
 800088e:	490d      	ldr	r1, [pc, #52]	@ (80008c4 <main+0x84>)
 8000890:	480d      	ldr	r0, [pc, #52]	@ (80008c8 <main+0x88>)
 8000892:	f000 fc91 	bl	80011b8 <initComm>

	//Variables
	ALLFLAGS = RESET;
 8000896:	4b0d      	ldr	r3, [pc, #52]	@ (80008cc <main+0x8c>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	do10ms();
 800089c:	f7ff ff56 	bl	800074c <do10ms>
		USBTask();
 80008a0:	f7ff febc 	bl	800061c <USBTask>
		SSD1306Upd();
 80008a4:	f7ff ffa2 	bl	80007ec <SSD1306Upd>
	  	do10ms();
 80008a8:	bf00      	nop
 80008aa:	e7f7      	b.n	800089c <main+0x5c>
 80008ac:	080005c1 	.word	0x080005c1
 80008b0:	20000310 	.word	0x20000310
 80008b4:	40020800 	.word	0x40020800
 80008b8:	40020400 	.word	0x40020400
 80008bc:	20000394 	.word	0x20000394
 80008c0:	20000494 	.word	0x20000494
 80008c4:	2000037c 	.word	0x2000037c
 80008c8:	20000388 	.word	0x20000388
 80008cc:	20000594 	.word	0x20000594

080008d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	@ 0x50
 80008d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	2230      	movs	r2, #48	@ 0x30
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f00b fc9c 	bl	800c21c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	4b27      	ldr	r3, [pc, #156]	@ (8000998 <SystemClock_Config+0xc8>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	4a26      	ldr	r2, [pc, #152]	@ (8000998 <SystemClock_Config+0xc8>)
 80008fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000902:	6413      	str	r3, [r2, #64]	@ 0x40
 8000904:	4b24      	ldr	r3, [pc, #144]	@ (8000998 <SystemClock_Config+0xc8>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000908:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	4b21      	ldr	r3, [pc, #132]	@ (800099c <SystemClock_Config+0xcc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a20      	ldr	r2, [pc, #128]	@ (800099c <SystemClock_Config+0xcc>)
 800091a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	4b1e      	ldr	r3, [pc, #120]	@ (800099c <SystemClock_Config+0xcc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092c:	2301      	movs	r3, #1
 800092e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000930:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000936:	2302      	movs	r3, #2
 8000938:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800093e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000940:	2319      	movs	r3, #25
 8000942:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000944:	23c0      	movs	r3, #192	@ 0xc0
 8000946:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000948:	2302      	movs	r3, #2
 800094a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800094c:	2304      	movs	r3, #4
 800094e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	f107 0320 	add.w	r3, r7, #32
 8000954:	4618      	mov	r0, r3
 8000956:	f006 fa5b 	bl	8006e10 <HAL_RCC_OscConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000960:	f000 fa04 	bl	8000d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000964:	230f      	movs	r3, #15
 8000966:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000968:	2302      	movs	r3, #2
 800096a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000970:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000974:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	2103      	movs	r1, #3
 8000980:	4618      	mov	r0, r3
 8000982:	f006 fcbd 	bl	8007300 <HAL_RCC_ClockConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800098c:	f000 f9ee 	bl	8000d6c <Error_Handler>
  }
}
 8000990:	bf00      	nop
 8000992:	3750      	adds	r7, #80	@ 0x50
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40007000 	.word	0x40007000

080009a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009a6:	463b      	mov	r3, r7
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009b2:	4b52      	ldr	r3, [pc, #328]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009b4:	4a52      	ldr	r2, [pc, #328]	@ (8000b00 <MX_ADC1_Init+0x160>)
 80009b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009b8:	4b50      	ldr	r3, [pc, #320]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009c0:	4b4e      	ldr	r3, [pc, #312]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80009c6:	4b4d      	ldr	r3, [pc, #308]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009cc:	4b4b      	ldr	r3, [pc, #300]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009d2:	4b4a      	ldr	r3, [pc, #296]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009da:	4b48      	ldr	r3, [pc, #288]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009e0:	4b46      	ldr	r3, [pc, #280]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009e2:	4a48      	ldr	r2, [pc, #288]	@ (8000b04 <MX_ADC1_Init+0x164>)
 80009e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009e6:	4b45      	ldr	r3, [pc, #276]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80009ec:	4b43      	ldr	r3, [pc, #268]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009ee:	2208      	movs	r2, #8
 80009f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009f2:	4b42      	ldr	r3, [pc, #264]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009fa:	4b40      	ldr	r3, [pc, #256]	@ (8000afc <MX_ADC1_Init+0x15c>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a00:	483e      	ldr	r0, [pc, #248]	@ (8000afc <MX_ADC1_Init+0x15c>)
 8000a02:	f001 f9e5 	bl	8001dd0 <HAL_ADC_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a0c:	f000 f9ae 	bl	8000d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4836      	ldr	r0, [pc, #216]	@ (8000afc <MX_ADC1_Init+0x15c>)
 8000a22:	f001 fc3b 	bl	800229c <HAL_ADC_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a2c:	f000 f99e 	bl	8000d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a30:	2301      	movs	r3, #1
 8000a32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	482f      	ldr	r0, [pc, #188]	@ (8000afc <MX_ADC1_Init+0x15c>)
 8000a3e:	f001 fc2d 	bl	800229c <HAL_ADC_ConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a48:	f000 f990 	bl	8000d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000a50:	2303      	movs	r3, #3
 8000a52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	4619      	mov	r1, r3
 8000a58:	4828      	ldr	r0, [pc, #160]	@ (8000afc <MX_ADC1_Init+0x15c>)
 8000a5a:	f001 fc1f 	bl	800229c <HAL_ADC_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000a64:	f000 f982 	bl	8000d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a70:	463b      	mov	r3, r7
 8000a72:	4619      	mov	r1, r3
 8000a74:	4821      	ldr	r0, [pc, #132]	@ (8000afc <MX_ADC1_Init+0x15c>)
 8000a76:	f001 fc11 	bl	800229c <HAL_ADC_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000a80:	f000 f974 	bl	8000d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a84:	2304      	movs	r3, #4
 8000a86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000a88:	2305      	movs	r3, #5
 8000a8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	4619      	mov	r1, r3
 8000a90:	481a      	ldr	r0, [pc, #104]	@ (8000afc <MX_ADC1_Init+0x15c>)
 8000a92:	f001 fc03 	bl	800229c <HAL_ADC_ConfigChannel>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000a9c:	f000 f966 	bl	8000d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000aa0:	2305      	movs	r3, #5
 8000aa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000aa4:	2306      	movs	r3, #6
 8000aa6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4813      	ldr	r0, [pc, #76]	@ (8000afc <MX_ADC1_Init+0x15c>)
 8000aae:	f001 fbf5 	bl	800229c <HAL_ADC_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000ab8:	f000 f958 	bl	8000d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000abc:	2306      	movs	r3, #6
 8000abe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480c      	ldr	r0, [pc, #48]	@ (8000afc <MX_ADC1_Init+0x15c>)
 8000aca:	f001 fbe7 	bl	800229c <HAL_ADC_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000ad4:	f000 f94a 	bl	8000d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000adc:	2308      	movs	r3, #8
 8000ade:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_ADC1_Init+0x15c>)
 8000ae6:	f001 fbd9 	bl	800229c <HAL_ADC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000af0:	f000 f93c 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000154 	.word	0x20000154
 8000b00:	40012000 	.word	0x40012000
 8000b04:	0f000001 	.word	0x0f000001

08000b08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b0c:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b0e:	4a13      	ldr	r2, [pc, #76]	@ (8000b5c <MX_I2C1_Init+0x54>)
 8000b10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b12:	4b11      	ldr	r3, [pc, #68]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b14:	4a12      	ldr	r2, [pc, #72]	@ (8000b60 <MX_I2C1_Init+0x58>)
 8000b16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b18:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b24:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b38:	4b07      	ldr	r3, [pc, #28]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b44:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <MX_I2C1_Init+0x50>)
 8000b46:	f002 fcd9 	bl	80034fc <HAL_I2C_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b50:	f000 f90c 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	200001fc 	.word	0x200001fc
 8000b5c:	40005400 	.word	0x40005400
 8000b60:	00061a80 	.word	0x00061a80

08000b64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08c      	sub	sp, #48	@ 0x30
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6a:	f107 0320 	add.w	r3, r7, #32
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b90:	4b25      	ldr	r3, [pc, #148]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000b92:	4a26      	ldr	r2, [pc, #152]	@ (8000c2c <MX_TIM1_Init+0xc8>)
 8000b94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8000b96:	4b24      	ldr	r3, [pc, #144]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000b98:	225f      	movs	r2, #95	@ 0x5f
 8000b9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000ba2:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000ba4:	22f9      	movs	r2, #249	@ 0xf9
 8000ba6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bae:	4b1e      	ldr	r3, [pc, #120]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bba:	481b      	ldr	r0, [pc, #108]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000bbc:	f006 fd6c 	bl	8007698 <HAL_TIM_Base_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000bc6:	f000 f8d1 	bl	8000d6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bce:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bd0:	f107 0320 	add.w	r3, r7, #32
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4814      	ldr	r0, [pc, #80]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000bd8:	f006 ff00 	bl	80079dc <HAL_TIM_ConfigClockSource>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000be2:	f000 f8c3 	bl	8000d6c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000bf6:	f006 ffb8 	bl	8007b6a <HAL_TIM_SlaveConfigSynchro>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000c00:	f000 f8b4 	bl	8000d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <MX_TIM1_Init+0xc4>)
 8000c12:	f007 f9c7 	bl	8007fa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000c1c:	f000 f8a6 	bl	8000d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3730      	adds	r7, #48	@ 0x30
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000310 	.word	0x20000310
 8000c2c:	40010000 	.word	0x40010000

08000c30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ca8 <MX_DMA_Init+0x78>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ca8 <MX_DMA_Init+0x78>)
 8000c40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b18      	ldr	r3, [pc, #96]	@ (8000ca8 <MX_DMA_Init+0x78>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	4b14      	ldr	r3, [pc, #80]	@ (8000ca8 <MX_DMA_Init+0x78>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a13      	ldr	r2, [pc, #76]	@ (8000ca8 <MX_DMA_Init+0x78>)
 8000c5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b11      	ldr	r3, [pc, #68]	@ (8000ca8 <MX_DMA_Init+0x78>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	200b      	movs	r0, #11
 8000c74:	f001 fea7 	bl	80029c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c78:	200b      	movs	r0, #11
 8000c7a:	f001 fec0 	bl	80029fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	200c      	movs	r0, #12
 8000c84:	f001 fe9f 	bl	80029c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c88:	200c      	movs	r0, #12
 8000c8a:	f001 feb8 	bl	80029fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2038      	movs	r0, #56	@ 0x38
 8000c94:	f001 fe97 	bl	80029c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c98:	2038      	movs	r0, #56	@ 0x38
 8000c9a:	f001 feb0 	bl	80029fe <HAL_NVIC_EnableIRQ>

}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	@ 0x28
 8000cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	f107 0314 	add.w	r3, r7, #20
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b27      	ldr	r3, [pc, #156]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a26      	ldr	r2, [pc, #152]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b24      	ldr	r3, [pc, #144]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b20      	ldr	r3, [pc, #128]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000ce8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b1d      	ldr	r3, [pc, #116]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a18      	ldr	r2, [pc, #96]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	4a11      	ldr	r2, [pc, #68]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d26:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <MX_GPIO_Init+0xb8>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d38:	480b      	ldr	r0, [pc, #44]	@ (8000d68 <MX_GPIO_Init+0xbc>)
 8000d3a:	f002 fbab 	bl	8003494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4619      	mov	r1, r3
 8000d56:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <MX_GPIO_Init+0xbc>)
 8000d58:	f002 fa18 	bl	800318c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d5c:	bf00      	nop
 8000d5e:	3728      	adds	r7, #40	@ 0x28
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020800 	.word	0x40020800

08000d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d70:	b672      	cpsid	i
}
 8000d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <Error_Handler+0x8>

08000d78 <putHeaderOnTx>:


//Function definitions

uint8_t putHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	70fb      	strb	r3, [r7, #3]
 8000d84:	4613      	mov	r3, r2
 8000d86:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 8000d88:	78bb      	ldrb	r3, [r7, #2]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	795a      	ldrb	r2, [r3, #5]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	795b      	ldrb	r3, [r3, #5]
 8000da4:	1c59      	adds	r1, r3, #1
 8000da6:	b2c8      	uxtb	r0, r1
 8000da8:	6879      	ldr	r1, [r7, #4]
 8000daa:	7148      	strb	r0, [r1, #5]
 8000dac:	4413      	add	r3, r2
 8000dae:	2255      	movs	r2, #85	@ 0x55
 8000db0:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	795a      	ldrb	r2, [r3, #5]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	799b      	ldrb	r3, [r3, #6]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	795b      	ldrb	r3, [r3, #5]
 8000dca:	1c59      	adds	r1, r3, #1
 8000dcc:	b2c8      	uxtb	r0, r1
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	7148      	strb	r0, [r1, #5]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	224e      	movs	r2, #78	@ 0x4e
 8000dd6:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	795a      	ldrb	r2, [r3, #5]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	799b      	ldrb	r3, [r3, #6]
 8000de0:	4013      	ands	r3, r2
 8000de2:	b2da      	uxtb	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	795b      	ldrb	r3, [r3, #5]
 8000df0:	1c59      	adds	r1, r3, #1
 8000df2:	b2c8      	uxtb	r0, r1
 8000df4:	6879      	ldr	r1, [r7, #4]
 8000df6:	7148      	strb	r0, [r1, #5]
 8000df8:	4413      	add	r3, r2
 8000dfa:	2245      	movs	r2, #69	@ 0x45
 8000dfc:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	795a      	ldrb	r2, [r3, #5]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	799b      	ldrb	r3, [r3, #6]
 8000e06:	4013      	ands	r3, r2
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	795b      	ldrb	r3, [r3, #5]
 8000e16:	1c59      	adds	r1, r3, #1
 8000e18:	b2c8      	uxtb	r0, r1
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	7148      	strb	r0, [r1, #5]
 8000e1e:	4413      	add	r3, r2
 8000e20:	2252      	movs	r2, #82	@ 0x52
 8000e22:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	795a      	ldrb	r2, [r3, #5]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	799b      	ldrb	r3, [r3, #6]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	795b      	ldrb	r3, [r3, #5]
 8000e3c:	1c59      	adds	r1, r3, #1
 8000e3e:	b2c8      	uxtb	r0, r1
 8000e40:	6879      	ldr	r1, [r7, #4]
 8000e42:	7148      	strb	r0, [r1, #5]
 8000e44:	4413      	add	r3, r2
 8000e46:	78ba      	ldrb	r2, [r7, #2]
 8000e48:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	795a      	ldrb	r2, [r3, #5]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	799b      	ldrb	r3, [r3, #6]
 8000e52:	4013      	ands	r3, r2
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	795b      	ldrb	r3, [r3, #5]
 8000e62:	1c59      	adds	r1, r3, #1
 8000e64:	b2c8      	uxtb	r0, r1
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	7148      	strb	r0, [r1, #5]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	223a      	movs	r2, #58	@ 0x3a
 8000e6e:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	795a      	ldrb	r2, [r3, #5]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	799b      	ldrb	r3, [r3, #6]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	795b      	ldrb	r3, [r3, #5]
 8000e88:	1c59      	adds	r1, r3, #1
 8000e8a:	b2c8      	uxtb	r0, r1
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	7148      	strb	r0, [r1, #5]
 8000e90:	4413      	add	r3, r2
 8000e92:	78fa      	ldrb	r2, [r7, #3]
 8000e94:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	795a      	ldrb	r2, [r3, #5]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	799b      	ldrb	r3, [r3, #6]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7a5a      	ldrb	r2, [r3, #9]
 8000eb0:	78b9      	ldrb	r1, [r7, #2]
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	404b      	eors	r3, r1
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	4053      	eors	r3, r2
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7a5b      	ldrb	r3, [r3, #9]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <putByteOnTx>:

uint8_t putByteOnTx(_sTx *dataTx, uint8_t byte)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	79db      	ldrb	r3, [r3, #7]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	795b      	ldrb	r3, [r3, #5]
 8000ef6:	1c59      	adds	r1, r3, #1
 8000ef8:	b2c8      	uxtb	r0, r1
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	7148      	strb	r0, [r1, #5]
 8000efe:	4413      	add	r3, r2
 8000f00:	78fa      	ldrb	r2, [r7, #3]
 8000f02:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	795a      	ldrb	r2, [r3, #5]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	799b      	ldrb	r3, [r3, #6]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	7a5a      	ldrb	r2, [r3, #9]
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	4053      	eors	r3, r2
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	7a5b      	ldrb	r3, [r3, #9]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <putStrOntx>:

uint8_t putStrOntx(_sTx *dataTx, const char *str)
{
 8000f32:	b490      	push	{r4, r7}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 8000f40:	e02c      	b.n	8000f9c <putStrOntx+0x6a>
    	dataTx->bytes++;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	79db      	ldrb	r3, [r3, #7]
 8000f46:	3301      	adds	r3, #1
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	461a      	mov	r2, r3
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	441a      	add	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6819      	ldr	r1, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	795b      	ldrb	r3, [r3, #5]
 8000f60:	1c58      	adds	r0, r3, #1
 8000f62:	b2c4      	uxtb	r4, r0
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	7144      	strb	r4, [r0, #5]
 8000f68:	440b      	add	r3, r1
 8000f6a:	7812      	ldrb	r2, [r2, #0]
 8000f6c:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	795a      	ldrb	r2, [r3, #5]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	799b      	ldrb	r3, [r3, #6]
 8000f76:	4013      	ands	r3, r2
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	1c5a      	adds	r2, r3, #1
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	73fa      	strb	r2, [r7, #15]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	781a      	ldrb	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	7a5b      	ldrb	r3, [r3, #9]
 8000f94:	4053      	eors	r3, r2
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1ca      	bne.n	8000f42 <putStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	7a5b      	ldrb	r3, [r3, #9]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc90      	pop	{r4, r7}
 8000fb8:	4770      	bx	lr
	...

08000fbc <decodeHeader>:
	return getByte;
}


uint8_t decodeHeader(_sTx *dataRx)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	795b      	ldrb	r3, [r3, #5]
 8000fcc:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 8000fce:	e0e4      	b.n	800119a <decodeHeader+0x1de>
        switch(header)
 8000fd0:	4b78      	ldr	r3, [pc, #480]	@ (80011b4 <decodeHeader+0x1f8>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b07      	cmp	r3, #7
 8000fd6:	f200 80c9 	bhi.w	800116c <decodeHeader+0x1b0>
 8000fda:	a201      	add	r2, pc, #4	@ (adr r2, 8000fe0 <decodeHeader+0x24>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	08001001 	.word	0x08001001
 8000fe4:	0800101b 	.word	0x0800101b
 8000fe8:	08001059 	.word	0x08001059
 8000fec:	08001085 	.word	0x08001085
 8000ff0:	080010b1 	.word	0x080010b1
 8000ff4:	080010c7 	.word	0x080010c7
 8000ff8:	0800116d 	.word	0x0800116d
 8000ffc:	08001129 	.word	0x08001129
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	7912      	ldrb	r2, [r2, #4]
 8001008:	4413      	add	r3, r2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b55      	cmp	r3, #85	@ 0x55
 800100e:	f040 80b1 	bne.w	8001174 <decodeHeader+0x1b8>
                   header = HEADER_N;
 8001012:	4b68      	ldr	r3, [pc, #416]	@ (80011b4 <decodeHeader+0x1f8>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
                }
            break;
 8001018:	e0ac      	b.n	8001174 <decodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	7912      	ldrb	r2, [r2, #4]
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b4e      	cmp	r3, #78	@ 0x4e
 8001028:	d103      	bne.n	8001032 <decodeHeader+0x76>
                    header = HEADER_E;
 800102a:	4b62      	ldr	r3, [pc, #392]	@ (80011b4 <decodeHeader+0x1f8>)
 800102c:	2202      	movs	r2, #2
 800102e:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 8001030:	e0a2      	b.n	8001178 <decodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	7912      	ldrb	r2, [r2, #4]
 800103a:	4413      	add	r3, r2
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b55      	cmp	r3, #85	@ 0x55
 8001040:	f000 809a 	beq.w	8001178 <decodeHeader+0x1bc>
                    	header = HEADER_U;
 8001044:	4b5b      	ldr	r3, [pc, #364]	@ (80011b4 <decodeHeader+0x1f8>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	791b      	ldrb	r3, [r3, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	711a      	strb	r2, [r3, #4]
            break;
 8001056:	e08f      	b.n	8001178 <decodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	687a      	ldr	r2, [r7, #4]
 800105e:	7912      	ldrb	r2, [r2, #4]
 8001060:	4413      	add	r3, r2
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b45      	cmp	r3, #69	@ 0x45
 8001066:	d103      	bne.n	8001070 <decodeHeader+0xb4>
                    header = HEADER_R;
 8001068:	4b52      	ldr	r3, [pc, #328]	@ (80011b4 <decodeHeader+0x1f8>)
 800106a:	2203      	movs	r2, #3
 800106c:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 800106e:	e086      	b.n	800117e <decodeHeader+0x1c2>
                    header = HEADER_U;
 8001070:	4b50      	ldr	r3, [pc, #320]	@ (80011b4 <decodeHeader+0x1f8>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	791b      	ldrb	r3, [r3, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	b2da      	uxtb	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	711a      	strb	r2, [r3, #4]
            break;
 8001082:	e07c      	b.n	800117e <decodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	7912      	ldrb	r2, [r2, #4]
 800108c:	4413      	add	r3, r2
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b52      	cmp	r3, #82	@ 0x52
 8001092:	d103      	bne.n	800109c <decodeHeader+0xe0>
                    header = NBYTES;
 8001094:	4b47      	ldr	r3, [pc, #284]	@ (80011b4 <decodeHeader+0x1f8>)
 8001096:	2204      	movs	r2, #4
 8001098:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 800109a:	e070      	b.n	800117e <decodeHeader+0x1c2>
                    header = HEADER_U;
 800109c:	4b45      	ldr	r3, [pc, #276]	@ (80011b4 <decodeHeader+0x1f8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	791b      	ldrb	r3, [r3, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	711a      	strb	r2, [r3, #4]
            break;
 80010ae:	e066      	b.n	800117e <decodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	7912      	ldrb	r2, [r2, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 80010be:	4b3d      	ldr	r3, [pc, #244]	@ (80011b4 <decodeHeader+0x1f8>)
 80010c0:	2205      	movs	r2, #5
 80010c2:	701a      	strb	r2, [r3, #0]
            break;
 80010c4:	e05b      	b.n	800117e <decodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	7912      	ldrb	r2, [r2, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b3a      	cmp	r3, #58	@ 0x3a
 80010d4:	d11e      	bne.n	8001114 <decodeHeader+0x158>
                    header = PAYLOAD;
 80010d6:	4b37      	ldr	r3, [pc, #220]	@ (80011b4 <decodeHeader+0x1f8>)
 80010d8:	2207      	movs	r2, #7
 80010da:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	791b      	ldrb	r3, [r3, #4]
 80010e0:	3301      	adds	r3, #1
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7a1a      	ldrb	r2, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	799b      	ldrb	r3, [r3, #6]
 80010f0:	4013      	ands	r3, r2
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	7a5a      	ldrb	r2, [r3, #9]
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	4053      	eors	r3, r2
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 800110c:	b2da      	uxtb	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8001112:	e034      	b.n	800117e <decodeHeader+0x1c2>
                    header = HEADER_U;
 8001114:	4b27      	ldr	r3, [pc, #156]	@ (80011b4 <decodeHeader+0x1f8>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	791b      	ldrb	r3, [r3, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	b2da      	uxtb	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	711a      	strb	r2, [r3, #4]
            break;
 8001126:	e02a      	b.n	800117e <decodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	3b01      	subs	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d00c      	beq.n	800114e <decodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7a5a      	ldrb	r2, [r3, #9]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	7909      	ldrb	r1, [r1, #4]
 8001140:	440b      	add	r3, r1
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4053      	eors	r3, r2
 8001146:	b2da      	uxtb	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 800114c:	e016      	b.n	800117c <decodeHeader+0x1c0>
                    header = HEADER_U;
 800114e:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <decodeHeader+0x1f8>)
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	7912      	ldrb	r2, [r2, #4]
 800115c:	4413      	add	r3, r2
 800115e:	781a      	ldrb	r2, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	7a5b      	ldrb	r3, [r3, #9]
 8001164:	429a      	cmp	r2, r3
 8001166:	d109      	bne.n	800117c <decodeHeader+0x1c0>
                        return TRUE;
 8001168:	2301      	movs	r3, #1
 800116a:	e01d      	b.n	80011a8 <decodeHeader+0x1ec>
            default:
                header = HEADER_U;
 800116c:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <decodeHeader+0x1f8>)
 800116e:	2200      	movs	r2, #0
 8001170:	701a      	strb	r2, [r3, #0]
            break;
 8001172:	e004      	b.n	800117e <decodeHeader+0x1c2>
            break;
 8001174:	bf00      	nop
 8001176:	e002      	b.n	800117e <decodeHeader+0x1c2>
            break;
 8001178:	bf00      	nop
 800117a:	e000      	b.n	800117e <decodeHeader+0x1c2>
            break;
 800117c:	bf00      	nop
        }
        dataRx->indexR++;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	791b      	ldrb	r3, [r3, #4]
 8001182:	3301      	adds	r3, #1
 8001184:	b2da      	uxtb	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	791a      	ldrb	r2, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	799b      	ldrb	r3, [r3, #6]
 8001192:	4013      	ands	r3, r2
 8001194:	b2da      	uxtb	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	791b      	ldrb	r3, [r3, #4]
 800119e:	7bba      	ldrb	r2, [r7, #14]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f47f af15 	bne.w	8000fd0 <decodeHeader+0x14>
    }
    return FALSE;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	20000597 	.word	0x20000597

080011b8 <initComm>:

void initComm(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
 80011c4:	603b      	str	r3, [r7, #0]
    //INICIALIZAMOS VARIABLES
	Rx->buff = (uint8_t *)buffRx;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2200      	movs	r2, #0
 80011d0:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2200      	movs	r2, #0
 80011d6:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2200      	movs	r2, #0
 80011dc:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2200      	movs	r2, #0
 80011e2:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	22ff      	movs	r2, #255	@ 0xff
 80011e8:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	2200      	movs	r2, #0
 80011fa:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	2200      	movs	r2, #0
 8001200:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	2200      	movs	r2, #0
 8001206:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	2200      	movs	r2, #0
 800120c:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	22ff      	movs	r2, #255	@ 0xff
 8001212:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2200      	movs	r2, #0
 8001218:	725a      	strb	r2, [r3, #9]

}
 800121a:	bf00      	nop
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SSD1306_Init>:
        }
    }
}

uint8_t SSD1306_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
	SSD1306_I2C_Init();
 800122e:	f000 fa27 	bl	8001680 <SSD1306_I2C_Init>
	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK){
 8001232:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001236:	2201      	movs	r2, #1
 8001238:	2178      	movs	r1, #120	@ 0x78
 800123a:	485b      	ldr	r0, [pc, #364]	@ (80013a8 <SSD1306_Init+0x180>)
 800123c:	f002 fbe4 	bl	8003a08 <HAL_I2C_IsDeviceReady>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SSD1306_Init+0x22>
		return 0;
 8001246:	2300      	movs	r3, #0
 8001248:	e0a9      	b.n	800139e <SSD1306_Init+0x176>
	}

	uint32_t p = 2500;
 800124a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800124e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001250:	e002      	b.n	8001258 <SSD1306_Init+0x30>
		p--;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3b01      	subs	r3, #1
 8001256:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f9      	bne.n	8001252 <SSD1306_Init+0x2a>

	SSD1306_WRITECOMMAND(0xAE);
 800125e:	22ae      	movs	r2, #174	@ 0xae
 8001260:	2100      	movs	r1, #0
 8001262:	2078      	movs	r0, #120	@ 0x78
 8001264:	f000 fa86 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8001268:	2220      	movs	r2, #32
 800126a:	2100      	movs	r1, #0
 800126c:	2078      	movs	r0, #120	@ 0x78
 800126e:	f000 fa81 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 8001272:	2210      	movs	r2, #16
 8001274:	2100      	movs	r1, #0
 8001276:	2078      	movs	r0, #120	@ 0x78
 8001278:	f000 fa7c 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 800127c:	22b0      	movs	r2, #176	@ 0xb0
 800127e:	2100      	movs	r1, #0
 8001280:	2078      	movs	r0, #120	@ 0x78
 8001282:	f000 fa77 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 8001286:	22c8      	movs	r2, #200	@ 0xc8
 8001288:	2100      	movs	r1, #0
 800128a:	2078      	movs	r0, #120	@ 0x78
 800128c:	f000 fa72 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	2078      	movs	r0, #120	@ 0x78
 8001296:	f000 fa6d 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 800129a:	2210      	movs	r2, #16
 800129c:	2100      	movs	r1, #0
 800129e:	2078      	movs	r0, #120	@ 0x78
 80012a0:	f000 fa68 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 80012a4:	2240      	movs	r2, #64	@ 0x40
 80012a6:	2100      	movs	r1, #0
 80012a8:	2078      	movs	r0, #120	@ 0x78
 80012aa:	f000 fa63 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 80012ae:	2281      	movs	r2, #129	@ 0x81
 80012b0:	2100      	movs	r1, #0
 80012b2:	2078      	movs	r0, #120	@ 0x78
 80012b4:	f000 fa5e 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80012b8:	22ff      	movs	r2, #255	@ 0xff
 80012ba:	2100      	movs	r1, #0
 80012bc:	2078      	movs	r0, #120	@ 0x78
 80012be:	f000 fa59 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 80012c2:	22a1      	movs	r2, #161	@ 0xa1
 80012c4:	2100      	movs	r1, #0
 80012c6:	2078      	movs	r0, #120	@ 0x78
 80012c8:	f000 fa54 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 80012cc:	22a6      	movs	r2, #166	@ 0xa6
 80012ce:	2100      	movs	r1, #0
 80012d0:	2078      	movs	r0, #120	@ 0x78
 80012d2:	f000 fa4f 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 80012d6:	22a8      	movs	r2, #168	@ 0xa8
 80012d8:	2100      	movs	r1, #0
 80012da:	2078      	movs	r0, #120	@ 0x78
 80012dc:	f000 fa4a 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 80012e0:	223f      	movs	r2, #63	@ 0x3f
 80012e2:	2100      	movs	r1, #0
 80012e4:	2078      	movs	r0, #120	@ 0x78
 80012e6:	f000 fa45 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 80012ea:	22a4      	movs	r2, #164	@ 0xa4
 80012ec:	2100      	movs	r1, #0
 80012ee:	2078      	movs	r0, #120	@ 0x78
 80012f0:	f000 fa40 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 80012f4:	22d3      	movs	r2, #211	@ 0xd3
 80012f6:	2100      	movs	r1, #0
 80012f8:	2078      	movs	r0, #120	@ 0x78
 80012fa:	f000 fa3b 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 80012fe:	2200      	movs	r2, #0
 8001300:	2100      	movs	r1, #0
 8001302:	2078      	movs	r0, #120	@ 0x78
 8001304:	f000 fa36 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 8001308:	22d5      	movs	r2, #213	@ 0xd5
 800130a:	2100      	movs	r1, #0
 800130c:	2078      	movs	r0, #120	@ 0x78
 800130e:	f000 fa31 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 8001312:	22f0      	movs	r2, #240	@ 0xf0
 8001314:	2100      	movs	r1, #0
 8001316:	2078      	movs	r0, #120	@ 0x78
 8001318:	f000 fa2c 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 800131c:	22d9      	movs	r2, #217	@ 0xd9
 800131e:	2100      	movs	r1, #0
 8001320:	2078      	movs	r0, #120	@ 0x78
 8001322:	f000 fa27 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 8001326:	2222      	movs	r2, #34	@ 0x22
 8001328:	2100      	movs	r1, #0
 800132a:	2078      	movs	r0, #120	@ 0x78
 800132c:	f000 fa22 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 8001330:	22da      	movs	r2, #218	@ 0xda
 8001332:	2100      	movs	r1, #0
 8001334:	2078      	movs	r0, #120	@ 0x78
 8001336:	f000 fa1d 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800133a:	2212      	movs	r2, #18
 800133c:	2100      	movs	r1, #0
 800133e:	2078      	movs	r0, #120	@ 0x78
 8001340:	f000 fa18 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 8001344:	22db      	movs	r2, #219	@ 0xdb
 8001346:	2100      	movs	r1, #0
 8001348:	2078      	movs	r0, #120	@ 0x78
 800134a:	f000 fa13 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 800134e:	2220      	movs	r2, #32
 8001350:	2100      	movs	r1, #0
 8001352:	2078      	movs	r0, #120	@ 0x78
 8001354:	f000 fa0e 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 8001358:	228d      	movs	r2, #141	@ 0x8d
 800135a:	2100      	movs	r1, #0
 800135c:	2078      	movs	r0, #120	@ 0x78
 800135e:	f000 fa09 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 8001362:	2214      	movs	r2, #20
 8001364:	2100      	movs	r1, #0
 8001366:	2078      	movs	r0, #120	@ 0x78
 8001368:	f000 fa04 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 800136c:	22af      	movs	r2, #175	@ 0xaf
 800136e:	2100      	movs	r1, #0
 8001370:	2078      	movs	r0, #120	@ 0x78
 8001372:	f000 f9ff 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001376:	222e      	movs	r2, #46	@ 0x2e
 8001378:	2100      	movs	r1, #0
 800137a:	2078      	movs	r0, #120	@ 0x78
 800137c:	f000 f9fa 	bl	8001774 <SSD1306_I2C_Write>
	SSD1306_Fill(BLACK);
 8001380:	2000      	movs	r0, #0
 8001382:	f000 f84b 	bl	800141c <SSD1306_Fill>
	SSD1306_UpdateScreen();
 8001386:	f000 f813 	bl	80013b0 <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 800138a:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <SSD1306_Init+0x184>)
 800138c:	2200      	movs	r2, #0
 800138e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <SSD1306_Init+0x184>)
 8001392:	2200      	movs	r2, #0
 8001394:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 8001396:	4b05      	ldr	r3, [pc, #20]	@ (80013ac <SSD1306_Init+0x184>)
 8001398:	2201      	movs	r2, #1
 800139a:	715a      	strb	r2, [r3, #5]
	return 1;
 800139c:	2301      	movs	r3, #1
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200001fc 	.word	0x200001fc
 80013ac:	20000998 	.word	0x20000998

080013b0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
//			flag = 0;
//			SSD1306_TxCplt = 0;
//			i &= 3;
//			i++;
//		}
	    for (uint8_t page = 0; page < 8; page++) {
 80013b6:	2300      	movs	r3, #0
 80013b8:	71fb      	strb	r3, [r7, #7]
 80013ba:	e022      	b.n	8001402 <SSD1306_UpdateScreen+0x52>
				SSD1306_WRITECOMMAND(0xB0 + page);
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	3b50      	subs	r3, #80	@ 0x50
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	461a      	mov	r2, r3
 80013c4:	2100      	movs	r1, #0
 80013c6:	2078      	movs	r0, #120	@ 0x78
 80013c8:	f000 f9d4 	bl	8001774 <SSD1306_I2C_Write>

				SSD1306_WRITECOMMAND(0x00);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	2078      	movs	r0, #120	@ 0x78
 80013d2:	f000 f9cf 	bl	8001774 <SSD1306_I2C_Write>

				SSD1306_WRITECOMMAND(0x10);
 80013d6:	2210      	movs	r2, #16
 80013d8:	2100      	movs	r1, #0
 80013da:	2078      	movs	r0, #120	@ 0x78
 80013dc:	f000 f9ca 	bl	8001774 <SSD1306_I2C_Write>

				SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40,&SSD1306_Buffer[SSD1306_WIDTH * page], SSD1306_WIDTH);
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	01db      	lsls	r3, r3, #7
 80013e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001414 <SSD1306_UpdateScreen+0x64>)
 80013e6:	441a      	add	r2, r3
 80013e8:	2380      	movs	r3, #128	@ 0x80
 80013ea:	2140      	movs	r1, #64	@ 0x40
 80013ec:	2078      	movs	r0, #120	@ 0x78
 80013ee:	f000 f95d 	bl	80016ac <SSD1306_I2C_WriteMulti>
	        while (!SSD1306_TxCplt) { /* wait */ }
 80013f2:	bf00      	nop
 80013f4:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <SSD1306_UpdateScreen+0x68>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0fb      	beq.n	80013f4 <SSD1306_UpdateScreen+0x44>
	    for (uint8_t page = 0; page < 8; page++) {
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	3301      	adds	r3, #1
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b07      	cmp	r3, #7
 8001406:	d9d9      	bls.n	80013bc <SSD1306_UpdateScreen+0xc>
	    }

	//}

}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000598 	.word	0x20000598
 8001418:	20000595 	.word	0x20000595

0800141c <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001426:	79fb      	ldrb	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d101      	bne.n	8001430 <SSD1306_Fill+0x14>
 800142c:	2300      	movs	r3, #0
 800142e:	e000      	b.n	8001432 <SSD1306_Fill+0x16>
 8001430:	23ff      	movs	r3, #255	@ 0xff
 8001432:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001436:	4619      	mov	r1, r3
 8001438:	4803      	ldr	r0, [pc, #12]	@ (8001448 <SSD1306_Fill+0x2c>)
 800143a:	f00a feef 	bl	800c21c <memset>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000598 	.word	0x20000598

0800144c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
 8001456:	460b      	mov	r3, r1
 8001458:	80bb      	strh	r3, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	2b7f      	cmp	r3, #127	@ 0x7f
 8001462:	d848      	bhi.n	80014f6 <SSD1306_DrawPixel+0xaa>
 8001464:	88bb      	ldrh	r3, [r7, #4]
 8001466:	2b3f      	cmp	r3, #63	@ 0x3f
 8001468:	d845      	bhi.n	80014f6 <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 800146a:	4b26      	ldr	r3, [pc, #152]	@ (8001504 <SSD1306_DrawPixel+0xb8>)
 800146c:	791b      	ldrb	r3, [r3, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d006      	beq.n	8001480 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	2b00      	cmp	r3, #0
 8001476:	bf0c      	ite	eq
 8001478:	2301      	moveq	r3, #1
 800147a:	2300      	movne	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	70fb      	strb	r3, [r7, #3]
	}

	if(color == WHITE){
 8001480:	78fb      	ldrb	r3, [r7, #3]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d11a      	bne.n	80014bc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001486:	88fa      	ldrh	r2, [r7, #6]
 8001488:	88bb      	ldrh	r3, [r7, #4]
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	b298      	uxth	r0, r3
 800148e:	4603      	mov	r3, r0
 8001490:	01db      	lsls	r3, r3, #7
 8001492:	4413      	add	r3, r2
 8001494:	4a1c      	ldr	r2, [pc, #112]	@ (8001508 <SSD1306_DrawPixel+0xbc>)
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	b25a      	sxtb	r2, r3
 800149a:	88bb      	ldrh	r3, [r7, #4]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	2101      	movs	r1, #1
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	4313      	orrs	r3, r2
 80014aa:	b259      	sxtb	r1, r3
 80014ac:	88fa      	ldrh	r2, [r7, #6]
 80014ae:	4603      	mov	r3, r0
 80014b0:	01db      	lsls	r3, r3, #7
 80014b2:	4413      	add	r3, r2
 80014b4:	b2c9      	uxtb	r1, r1
 80014b6:	4a14      	ldr	r2, [pc, #80]	@ (8001508 <SSD1306_DrawPixel+0xbc>)
 80014b8:	54d1      	strb	r1, [r2, r3]
 80014ba:	e01d      	b.n	80014f8 <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80014bc:	88fa      	ldrh	r2, [r7, #6]
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	08db      	lsrs	r3, r3, #3
 80014c2:	b298      	uxth	r0, r3
 80014c4:	4603      	mov	r3, r0
 80014c6:	01db      	lsls	r3, r3, #7
 80014c8:	4413      	add	r3, r2
 80014ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001508 <SSD1306_DrawPixel+0xbc>)
 80014cc:	5cd3      	ldrb	r3, [r2, r3]
 80014ce:	b25a      	sxtb	r2, r3
 80014d0:	88bb      	ldrh	r3, [r7, #4]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	2101      	movs	r1, #1
 80014d8:	fa01 f303 	lsl.w	r3, r1, r3
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	b25b      	sxtb	r3, r3
 80014e2:	4013      	ands	r3, r2
 80014e4:	b259      	sxtb	r1, r3
 80014e6:	88fa      	ldrh	r2, [r7, #6]
 80014e8:	4603      	mov	r3, r0
 80014ea:	01db      	lsls	r3, r3, #7
 80014ec:	4413      	add	r3, r2
 80014ee:	b2c9      	uxtb	r1, r1
 80014f0:	4a05      	ldr	r2, [pc, #20]	@ (8001508 <SSD1306_DrawPixel+0xbc>)
 80014f2:	54d1      	strb	r1, [r2, r3]
 80014f4:	e000      	b.n	80014f8 <SSD1306_DrawPixel+0xac>
		return;
 80014f6:	bf00      	nop
	}
}
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000998 	.word	0x20000998
 8001508:	20000598 	.word	0x20000598

0800150c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	4603      	mov	r3, r0
 8001514:	460a      	mov	r2, r1
 8001516:	80fb      	strh	r3, [r7, #6]
 8001518:	4613      	mov	r3, r2
 800151a:	80bb      	strh	r3, [r7, #4]
	SSD1306.CurrentX = x;
 800151c:	4a05      	ldr	r2, [pc, #20]	@ (8001534 <SSD1306_GotoXY+0x28>)
 800151e:	88fb      	ldrh	r3, [r7, #6]
 8001520:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001522:	4a04      	ldr	r2, [pc, #16]	@ (8001534 <SSD1306_GotoXY+0x28>)
 8001524:	88bb      	ldrh	r3, [r7, #4]
 8001526:	8053      	strh	r3, [r2, #2]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	20000998 	.word	0x20000998

08001538 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
 8001544:	4613      	mov	r3, r2
 8001546:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	if(SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)){
 8001548:	4b39      	ldr	r3, [pc, #228]	@ (8001630 <SSD1306_Putc+0xf8>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	461a      	mov	r2, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4413      	add	r3, r2
 8001554:	2b7f      	cmp	r3, #127	@ 0x7f
 8001556:	dc07      	bgt.n	8001568 <SSD1306_Putc+0x30>
 8001558:	4b35      	ldr	r3, [pc, #212]	@ (8001630 <SSD1306_Putc+0xf8>)
 800155a:	885b      	ldrh	r3, [r3, #2]
 800155c:	461a      	mov	r2, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	785b      	ldrb	r3, [r3, #1]
 8001562:	4413      	add	r3, r2
 8001564:	2b3f      	cmp	r3, #63	@ 0x3f
 8001566:	dd01      	ble.n	800156c <SSD1306_Putc+0x34>
		return 0;
 8001568:	2300      	movs	r3, #0
 800156a:	e05d      	b.n	8001628 <SSD1306_Putc+0xf0>
	}

	for(i=0; i<Font->FontHeight; i++){
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e04b      	b.n	800160a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	3b20      	subs	r3, #32
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	7849      	ldrb	r1, [r1, #1]
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	4619      	mov	r1, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	440b      	add	r3, r1
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	4413      	add	r3, r2
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	60fb      	str	r3, [r7, #12]
		for(j=0; j<Font->FontWidth; j++){
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	e030      	b.n	80015f8 <SSD1306_Putc+0xc0>
			if((b << j) & 0x8000){
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d010      	beq.n	80015c8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80015a6:	4b22      	ldr	r3, [pc, #136]	@ (8001630 <SSD1306_Putc+0xf8>)
 80015a8:	881a      	ldrh	r2, [r3, #0]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	4413      	add	r3, r2
 80015b0:	b298      	uxth	r0, r3
 80015b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001630 <SSD1306_Putc+0xf8>)
 80015b4:	885a      	ldrh	r2, [r3, #2]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4413      	add	r3, r2
 80015bc:	b29b      	uxth	r3, r3
 80015be:	79ba      	ldrb	r2, [r7, #6]
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff ff43 	bl	800144c <SSD1306_DrawPixel>
 80015c6:	e014      	b.n	80015f2 <SSD1306_Putc+0xba>
			}else{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80015c8:	4b19      	ldr	r3, [pc, #100]	@ (8001630 <SSD1306_Putc+0xf8>)
 80015ca:	881a      	ldrh	r2, [r3, #0]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	4413      	add	r3, r2
 80015d2:	b298      	uxth	r0, r3
 80015d4:	4b16      	ldr	r3, [pc, #88]	@ (8001630 <SSD1306_Putc+0xf8>)
 80015d6:	885a      	ldrh	r2, [r3, #2]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	4413      	add	r3, r2
 80015de:	b299      	uxth	r1, r3
 80015e0:	79bb      	ldrb	r3, [r7, #6]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	bf0c      	ite	eq
 80015e6:	2301      	moveq	r3, #1
 80015e8:	2300      	movne	r3, #0
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	f7ff ff2d 	bl	800144c <SSD1306_DrawPixel>
		for(j=0; j<Font->FontWidth; j++){
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	3301      	adds	r3, #1
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4293      	cmp	r3, r2
 8001602:	d3c8      	bcc.n	8001596 <SSD1306_Putc+0x5e>
	for(i=0; i<Font->FontHeight; i++){
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	3301      	adds	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	461a      	mov	r2, r3
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	4293      	cmp	r3, r2
 8001614:	d3ad      	bcc.n	8001572 <SSD1306_Putc+0x3a>
			}
		}
	}
	SSD1306.CurrentX += Font->FontWidth;
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <SSD1306_Putc+0xf8>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	4413      	add	r3, r2
 8001620:	b29a      	uxth	r2, r3
 8001622:	4b03      	ldr	r3, [pc, #12]	@ (8001630 <SSD1306_Putc+0xf8>)
 8001624:	801a      	strh	r2, [r3, #0]
	return ch;
 8001626:	79fb      	ldrb	r3, [r7, #7]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000998 	.word	0x20000998

08001634 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	4613      	mov	r3, r2
 8001640:	71fb      	strb	r3, [r7, #7]
	while(*str)
 8001642:	e012      	b.n	800166a <SSD1306_Puts+0x36>
	{
		if(SSD1306_Putc(*str, Font, color) != *str){
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	79fa      	ldrb	r2, [r7, #7]
 800164a:	68b9      	ldr	r1, [r7, #8]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff73 	bl	8001538 <SSD1306_Putc>
 8001652:	4603      	mov	r3, r0
 8001654:	461a      	mov	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d002      	beq.n	8001664 <SSD1306_Puts+0x30>
			return *str;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	e008      	b.n	8001676 <SSD1306_Puts+0x42>
		}
		str++;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	3301      	adds	r3, #1
 8001668:	60fb      	str	r3, [r7, #12]
	while(*str)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1e8      	bne.n	8001644 <SSD1306_Puts+0x10>
	}
	return *str;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	781b      	ldrb	r3, [r3, #0]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <SSD1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);
}

void SSD1306_I2C_Init(void)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 8001686:	4b08      	ldr	r3, [pc, #32]	@ (80016a8 <SSD1306_I2C_Init+0x28>)
 8001688:	607b      	str	r3, [r7, #4]
	while(p>0)
 800168a:	e002      	b.n	8001692 <SSD1306_I2C_Init+0x12>
		p--;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d1f9      	bne.n	800168c <SSD1306_I2C_Init+0xc>
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	0003d090 	.word	0x0003d090

080016ac <SSD1306_I2C_WriteMulti>:

void SSD1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b0c5      	sub	sp, #276	@ 0x114
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4604      	mov	r4, r0
 80016b4:	4608      	mov	r0, r1
 80016b6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80016ba:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80016be:	600a      	str	r2, [r1, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016c6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80016ca:	4622      	mov	r2, r4
 80016cc:	701a      	strb	r2, [r3, #0]
 80016ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016d2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016d6:	4602      	mov	r2, r0
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016e2:	460a      	mov	r2, r1
 80016e4:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 80016e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016ee:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016f2:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80016f6:	7812      	ldrb	r2, [r2, #0]
 80016f8:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001700:	e015      	b.n	800172e <SSD1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 8001702:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001706:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800170a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	441a      	add	r2, r3
 8001712:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001716:	3301      	adds	r3, #1
 8001718:	7811      	ldrb	r1, [r2, #0]
 800171a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800171e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001722:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8001724:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001728:	3301      	adds	r3, #1
 800172a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800172e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001732:	b29b      	uxth	r3, r3
 8001734:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001738:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800173c:	8812      	ldrh	r2, [r2, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d8df      	bhi.n	8001702 <SSD1306_I2C_WriteMulti+0x56>
	//HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
	HAL_I2C_Master_Transmit_DMA(&hi2c1, address, dt, count+1);
 8001742:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001746:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b299      	uxth	r1, r3
 800174e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001752:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	3301      	adds	r3, #1
 800175a:	b29b      	uxth	r3, r3
 800175c:	f107 020c 	add.w	r2, r7, #12
 8001760:	4803      	ldr	r0, [pc, #12]	@ (8001770 <SSD1306_I2C_WriteMulti+0xc4>)
 8001762:	f002 f825 	bl	80037b0 <HAL_I2C_Master_Transmit_DMA>
}
 8001766:	bf00      	nop
 8001768:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800176c:	46bd      	mov	sp, r7
 800176e:	bd90      	pop	{r4, r7, pc}
 8001770:	200001fc 	.word	0x200001fc

08001774 <SSD1306_I2C_Write>:


void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
 800177e:	460b      	mov	r3, r1
 8001780:	71bb      	strb	r3, [r7, #6]
 8001782:	4613      	mov	r3, r2
 8001784:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001786:	79bb      	ldrb	r3, [r7, #6]
 8001788:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800178a:	797b      	ldrb	r3, [r7, #5]
 800178c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit_DMA(&hi2c1, address, dt, 2);
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	b299      	uxth	r1, r3
 8001792:	f107 020c 	add.w	r2, r7, #12
 8001796:	2302      	movs	r3, #2
 8001798:	4803      	ldr	r0, [pc, #12]	@ (80017a8 <SSD1306_I2C_Write+0x34>)
 800179a:	f002 f809 	bl	80037b0 <HAL_I2C_Master_Transmit_DMA>
//	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
}
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200001fc 	.word	0x200001fc

080017ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	4a0f      	ldr	r2, [pc, #60]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c2:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4b09      	ldr	r3, [pc, #36]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d6:	4a08      	ldr	r2, [pc, #32]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_MspInit+0x4c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800

080017fc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	@ 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a32      	ldr	r2, [pc, #200]	@ (80018e4 <HAL_ADC_MspInit+0xe8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d15e      	bne.n	80018dc <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b31      	ldr	r3, [pc, #196]	@ (80018e8 <HAL_ADC_MspInit+0xec>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	4a30      	ldr	r2, [pc, #192]	@ (80018e8 <HAL_ADC_MspInit+0xec>)
 8001828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800182c:	6453      	str	r3, [r2, #68]	@ 0x44
 800182e:	4b2e      	ldr	r3, [pc, #184]	@ (80018e8 <HAL_ADC_MspInit+0xec>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b2a      	ldr	r3, [pc, #168]	@ (80018e8 <HAL_ADC_MspInit+0xec>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a29      	ldr	r2, [pc, #164]	@ (80018e8 <HAL_ADC_MspInit+0xec>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b27      	ldr	r3, [pc, #156]	@ (80018e8 <HAL_ADC_MspInit+0xec>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001856:	23ff      	movs	r3, #255	@ 0xff
 8001858:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800185a:	2303      	movs	r3, #3
 800185c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	4820      	ldr	r0, [pc, #128]	@ (80018ec <HAL_ADC_MspInit+0xf0>)
 800186a:	f001 fc8f 	bl	800318c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800186e:	4b20      	ldr	r3, [pc, #128]	@ (80018f0 <HAL_ADC_MspInit+0xf4>)
 8001870:	4a20      	ldr	r2, [pc, #128]	@ (80018f4 <HAL_ADC_MspInit+0xf8>)
 8001872:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001874:	4b1e      	ldr	r3, [pc, #120]	@ (80018f0 <HAL_ADC_MspInit+0xf4>)
 8001876:	2200      	movs	r2, #0
 8001878:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800187a:	4b1d      	ldr	r3, [pc, #116]	@ (80018f0 <HAL_ADC_MspInit+0xf4>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001880:	4b1b      	ldr	r3, [pc, #108]	@ (80018f0 <HAL_ADC_MspInit+0xf4>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001886:	4b1a      	ldr	r3, [pc, #104]	@ (80018f0 <HAL_ADC_MspInit+0xf4>)
 8001888:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800188c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800188e:	4b18      	ldr	r3, [pc, #96]	@ (80018f0 <HAL_ADC_MspInit+0xf4>)
 8001890:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001894:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001896:	4b16      	ldr	r3, [pc, #88]	@ (80018f0 <HAL_ADC_MspInit+0xf4>)
 8001898:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800189c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800189e:	4b14      	ldr	r3, [pc, #80]	@ (80018f0 <HAL_ADC_MspInit+0xf4>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018a4:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <HAL_ADC_MspInit+0xf4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018aa:	4b11      	ldr	r3, [pc, #68]	@ (80018f0 <HAL_ADC_MspInit+0xf4>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018b0:	480f      	ldr	r0, [pc, #60]	@ (80018f0 <HAL_ADC_MspInit+0xf4>)
 80018b2:	f001 f8bf 	bl	8002a34 <HAL_DMA_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80018bc:	f7ff fa56 	bl	8000d6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a0b      	ldr	r2, [pc, #44]	@ (80018f0 <HAL_ADC_MspInit+0xf4>)
 80018c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80018c6:	4a0a      	ldr	r2, [pc, #40]	@ (80018f0 <HAL_ADC_MspInit+0xf4>)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2100      	movs	r1, #0
 80018d0:	2012      	movs	r0, #18
 80018d2:	f001 f878 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80018d6:	2012      	movs	r0, #18
 80018d8:	f001 f891 	bl	80029fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80018dc:	bf00      	nop
 80018de:	3728      	adds	r7, #40	@ 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40012000 	.word	0x40012000
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40020000 	.word	0x40020000
 80018f0:	2000019c 	.word	0x2000019c
 80018f4:	40026410 	.word	0x40026410

080018f8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	@ 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a4f      	ldr	r2, [pc, #316]	@ (8001a54 <HAL_I2C_MspInit+0x15c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	f040 8097 	bne.w	8001a4a <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	4b4d      	ldr	r3, [pc, #308]	@ (8001a58 <HAL_I2C_MspInit+0x160>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001924:	4a4c      	ldr	r2, [pc, #304]	@ (8001a58 <HAL_I2C_MspInit+0x160>)
 8001926:	f043 0302 	orr.w	r3, r3, #2
 800192a:	6313      	str	r3, [r2, #48]	@ 0x30
 800192c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a58 <HAL_I2C_MspInit+0x160>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001938:	23c0      	movs	r3, #192	@ 0xc0
 800193a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800193c:	2312      	movs	r3, #18
 800193e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001944:	2303      	movs	r3, #3
 8001946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001948:	2304      	movs	r3, #4
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	4619      	mov	r1, r3
 8001952:	4842      	ldr	r0, [pc, #264]	@ (8001a5c <HAL_I2C_MspInit+0x164>)
 8001954:	f001 fc1a 	bl	800318c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a58 <HAL_I2C_MspInit+0x160>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001960:	4a3d      	ldr	r2, [pc, #244]	@ (8001a58 <HAL_I2C_MspInit+0x160>)
 8001962:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001966:	6413      	str	r3, [r2, #64]	@ 0x40
 8001968:	4b3b      	ldr	r3, [pc, #236]	@ (8001a58 <HAL_I2C_MspInit+0x160>)
 800196a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001974:	4b3a      	ldr	r3, [pc, #232]	@ (8001a60 <HAL_I2C_MspInit+0x168>)
 8001976:	4a3b      	ldr	r2, [pc, #236]	@ (8001a64 <HAL_I2C_MspInit+0x16c>)
 8001978:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800197a:	4b39      	ldr	r3, [pc, #228]	@ (8001a60 <HAL_I2C_MspInit+0x168>)
 800197c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001980:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001982:	4b37      	ldr	r3, [pc, #220]	@ (8001a60 <HAL_I2C_MspInit+0x168>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001988:	4b35      	ldr	r3, [pc, #212]	@ (8001a60 <HAL_I2C_MspInit+0x168>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800198e:	4b34      	ldr	r3, [pc, #208]	@ (8001a60 <HAL_I2C_MspInit+0x168>)
 8001990:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001994:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001996:	4b32      	ldr	r3, [pc, #200]	@ (8001a60 <HAL_I2C_MspInit+0x168>)
 8001998:	2200      	movs	r2, #0
 800199a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800199c:	4b30      	ldr	r3, [pc, #192]	@ (8001a60 <HAL_I2C_MspInit+0x168>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80019a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a60 <HAL_I2C_MspInit+0x168>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a60 <HAL_I2C_MspInit+0x168>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001a60 <HAL_I2C_MspInit+0x168>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80019b4:	482a      	ldr	r0, [pc, #168]	@ (8001a60 <HAL_I2C_MspInit+0x168>)
 80019b6:	f001 f83d 	bl	8002a34 <HAL_DMA_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80019c0:	f7ff f9d4 	bl	8000d6c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a26      	ldr	r2, [pc, #152]	@ (8001a60 <HAL_I2C_MspInit+0x168>)
 80019c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80019ca:	4a25      	ldr	r2, [pc, #148]	@ (8001a60 <HAL_I2C_MspInit+0x168>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80019d0:	4b25      	ldr	r3, [pc, #148]	@ (8001a68 <HAL_I2C_MspInit+0x170>)
 80019d2:	4a26      	ldr	r2, [pc, #152]	@ (8001a6c <HAL_I2C_MspInit+0x174>)
 80019d4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80019d6:	4b24      	ldr	r3, [pc, #144]	@ (8001a68 <HAL_I2C_MspInit+0x170>)
 80019d8:	2200      	movs	r2, #0
 80019da:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019dc:	4b22      	ldr	r3, [pc, #136]	@ (8001a68 <HAL_I2C_MspInit+0x170>)
 80019de:	2240      	movs	r2, #64	@ 0x40
 80019e0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e2:	4b21      	ldr	r3, [pc, #132]	@ (8001a68 <HAL_I2C_MspInit+0x170>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a68 <HAL_I2C_MspInit+0x170>)
 80019ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019ee:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a68 <HAL_I2C_MspInit+0x170>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a68 <HAL_I2C_MspInit+0x170>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80019fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a68 <HAL_I2C_MspInit+0x170>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a02:	4b19      	ldr	r3, [pc, #100]	@ (8001a68 <HAL_I2C_MspInit+0x170>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a08:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <HAL_I2C_MspInit+0x170>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001a0e:	4816      	ldr	r0, [pc, #88]	@ (8001a68 <HAL_I2C_MspInit+0x170>)
 8001a10:	f001 f810 	bl	8002a34 <HAL_DMA_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8001a1a:	f7ff f9a7 	bl	8000d6c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a11      	ldr	r2, [pc, #68]	@ (8001a68 <HAL_I2C_MspInit+0x170>)
 8001a22:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a24:	4a10      	ldr	r2, [pc, #64]	@ (8001a68 <HAL_I2C_MspInit+0x170>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	201f      	movs	r0, #31
 8001a30:	f000 ffc9 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a34:	201f      	movs	r0, #31
 8001a36:	f000 ffe2 	bl	80029fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2020      	movs	r0, #32
 8001a40:	f000 ffc1 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a44:	2020      	movs	r0, #32
 8001a46:	f000 ffda 	bl	80029fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a4a:	bf00      	nop
 8001a4c:	3728      	adds	r7, #40	@ 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40005400 	.word	0x40005400
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40020400 	.word	0x40020400
 8001a60:	20000250 	.word	0x20000250
 8001a64:	40026010 	.word	0x40026010
 8001a68:	200002b0 	.word	0x200002b0
 8001a6c:	40026028 	.word	0x40026028

08001a70 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x78>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d12d      	bne.n	8001ade <HAL_TIM_Base_MspInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <HAL_TIM_Base_MspInit+0x7c>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8a:	4a18      	ldr	r2, [pc, #96]	@ (8001aec <HAL_TIM_Base_MspInit+0x7c>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a92:	4b16      	ldr	r3, [pc, #88]	@ (8001aec <HAL_TIM_Base_MspInit+0x7c>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2018      	movs	r0, #24
 8001aa4:	f000 ff8f 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001aa8:	2018      	movs	r0, #24
 8001aaa:	f000 ffa8 	bl	80029fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2019      	movs	r0, #25
 8001ab4:	f000 ff87 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ab8:	2019      	movs	r0, #25
 8001aba:	f000 ffa0 	bl	80029fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	201a      	movs	r0, #26
 8001ac4:	f000 ff7f 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001ac8:	201a      	movs	r0, #26
 8001aca:	f000 ff98 	bl	80029fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	201b      	movs	r0, #27
 8001ad4:	f000 ff77 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001ad8:	201b      	movs	r0, #27
 8001ada:	f000 ff90 	bl	80029fe <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40010000 	.word	0x40010000
 8001aec:	40023800 	.word	0x40023800

08001af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <NMI_Handler+0x4>

08001af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <MemManage_Handler+0x4>

08001b08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <BusFault_Handler+0x4>

08001b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <UsageFault_Handler+0x4>

08001b18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b26:	b480      	push	{r7}
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b46:	f000 f8ff 	bl	8001d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b4a:	bf00      	nop
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001b54:	4802      	ldr	r0, [pc, #8]	@ (8001b60 <DMA1_Stream0_IRQHandler+0x10>)
 8001b56:	f001 f895 	bl	8002c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000250 	.word	0x20000250

08001b64 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001b68:	4802      	ldr	r0, [pc, #8]	@ (8001b74 <DMA1_Stream1_IRQHandler+0x10>)
 8001b6a:	f001 f88b 	bl	8002c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200002b0 	.word	0x200002b0

08001b78 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b7c:	4802      	ldr	r0, [pc, #8]	@ (8001b88 <ADC_IRQHandler+0x10>)
 8001b7e:	f000 f96a 	bl	8001e56 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000154 	.word	0x20000154

08001b8c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b90:	4802      	ldr	r0, [pc, #8]	@ (8001b9c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001b92:	f005 fe33 	bl	80077fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000310 	.word	0x20000310

08001ba0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ba4:	4802      	ldr	r0, [pc, #8]	@ (8001bb0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ba6:	f005 fe29 	bl	80077fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20000310 	.word	0x20000310

08001bb4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bb8:	4802      	ldr	r0, [pc, #8]	@ (8001bc4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001bba:	f005 fe1f 	bl	80077fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000310 	.word	0x20000310

08001bc8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bcc:	4802      	ldr	r0, [pc, #8]	@ (8001bd8 <TIM1_CC_IRQHandler+0x10>)
 8001bce:	f005 fe15 	bl	80077fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000310 	.word	0x20000310

08001bdc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001be0:	4802      	ldr	r0, [pc, #8]	@ (8001bec <I2C1_EV_IRQHandler+0x10>)
 8001be2:	f002 f83f 	bl	8003c64 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200001fc 	.word	0x200001fc

08001bf0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001bf4:	4802      	ldr	r0, [pc, #8]	@ (8001c00 <I2C1_ER_IRQHandler+0x10>)
 8001bf6:	f002 f9a6 	bl	8003f46 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200001fc 	.word	0x200001fc

08001c04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <DMA2_Stream0_IRQHandler+0x10>)
 8001c0a:	f001 f83b 	bl	8002c84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000019c 	.word	0x2000019c

08001c18 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <OTG_FS_IRQHandler+0x10>)
 8001c1e:	f003 ffe8 	bl	8005bf2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20001288 	.word	0x20001288

08001c2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c30:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <SystemInit+0x20>)
 8001c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c36:	4a05      	ldr	r2, [pc, #20]	@ (8001c4c <SystemInit+0x20>)
 8001c38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c54:	f7ff ffea 	bl	8001c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c58:	480c      	ldr	r0, [pc, #48]	@ (8001c8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c5a:	490d      	ldr	r1, [pc, #52]	@ (8001c90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c60:	e002      	b.n	8001c68 <LoopCopyDataInit>

08001c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c66:	3304      	adds	r3, #4

08001c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c6c:	d3f9      	bcc.n	8001c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c70:	4c0a      	ldr	r4, [pc, #40]	@ (8001c9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c74:	e001      	b.n	8001c7a <LoopFillZerobss>

08001c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c78:	3204      	adds	r2, #4

08001c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c7c:	d3fb      	bcc.n	8001c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c7e:	f00a fad5 	bl	800c22c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c82:	f7fe fddd 	bl	8000840 <main>
  bx  lr    
 8001c86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c90:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8001c94:	0800d094 	.word	0x0800d094
  ldr r2, =_sbss
 8001c98:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8001c9c:	2000198c 	.word	0x2000198c

08001ca0 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca0:	e7fe      	b.n	8001ca0 <DMA1_Stream2_IRQHandler>
	...

08001ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <HAL_Init+0x40>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0d      	ldr	r2, [pc, #52]	@ (8001ce4 <HAL_Init+0x40>)
 8001cae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <HAL_Init+0x40>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <HAL_Init+0x40>)
 8001cba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <HAL_Init+0x40>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	@ (8001ce4 <HAL_Init+0x40>)
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f000 fe6f 	bl	80029b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd2:	200f      	movs	r0, #15
 8001cd4:	f000 f808 	bl	8001ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd8:	f7ff fd68 	bl	80017ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023c00 	.word	0x40023c00

08001ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf0:	4b12      	ldr	r3, [pc, #72]	@ (8001d3c <HAL_InitTick+0x54>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <HAL_InitTick+0x58>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 fe87 	bl	8002a1a <HAL_SYSTICK_Config>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00e      	b.n	8001d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b0f      	cmp	r3, #15
 8001d1a:	d80a      	bhi.n	8001d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f000 fe4f 	bl	80029c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d28:	4a06      	ldr	r2, [pc, #24]	@ (8001d44 <HAL_InitTick+0x5c>)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000034 	.word	0x20000034
 8001d40:	2000003c 	.word	0x2000003c
 8001d44:	20000038 	.word	0x20000038

08001d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <HAL_IncTick+0x20>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b06      	ldr	r3, [pc, #24]	@ (8001d6c <HAL_IncTick+0x24>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4413      	add	r3, r2
 8001d58:	4a04      	ldr	r2, [pc, #16]	@ (8001d6c <HAL_IncTick+0x24>)
 8001d5a:	6013      	str	r3, [r2, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	2000003c 	.word	0x2000003c
 8001d6c:	200009a0 	.word	0x200009a0

08001d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return uwTick;
 8001d74:	4b03      	ldr	r3, [pc, #12]	@ (8001d84 <HAL_GetTick+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	200009a0 	.word	0x200009a0

08001d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d90:	f7ff ffee 	bl	8001d70 <HAL_GetTick>
 8001d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da0:	d005      	beq.n	8001dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001da2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <HAL_Delay+0x44>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4413      	add	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dae:	bf00      	nop
 8001db0:	f7ff ffde 	bl	8001d70 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d8f7      	bhi.n	8001db0 <HAL_Delay+0x28>
  {
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	2000003c 	.word	0x2000003c

08001dd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e033      	b.n	8001e4e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff fd04 	bl	80017fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f003 0310 	and.w	r3, r3, #16
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d118      	bne.n	8001e40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e16:	f023 0302 	bic.w	r3, r3, #2
 8001e1a:	f043 0202 	orr.w	r2, r3, #2
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 fb6c 	bl	8002500 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f023 0303 	bic.w	r3, r3, #3
 8001e36:	f043 0201 	orr.w	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e3e:	e001      	b.n	8001e44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	f003 0320 	and.w	r3, r3, #32
 8001e84:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d049      	beq.n	8001f20 <HAL_ADC_IRQHandler+0xca>
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d046      	beq.n	8001f20 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	f003 0310 	and.w	r3, r3, #16
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d105      	bne.n	8001eaa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d12b      	bne.n	8001f10 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d127      	bne.n	8001f10 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d006      	beq.n	8001edc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d119      	bne.n	8001f10 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0220 	bic.w	r2, r2, #32
 8001eea:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d105      	bne.n	8001f10 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f08:	f043 0201 	orr.w	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7fe faf7 	bl	8000504 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f06f 0212 	mvn.w	r2, #18
 8001f1e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f2e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d057      	beq.n	8001fe6 <HAL_ADC_IRQHandler+0x190>
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d054      	beq.n	8001fe6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d105      	bne.n	8001f54 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d139      	bne.n	8001fd6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f68:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d006      	beq.n	8001f7e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d12b      	bne.n	8001fd6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d124      	bne.n	8001fd6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d11d      	bne.n	8001fd6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d119      	bne.n	8001fd6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001fb0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d105      	bne.n	8001fd6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	f043 0201 	orr.w	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 fc10 	bl	80027fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 020c 	mvn.w	r2, #12
 8001fe4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d017      	beq.n	800202c <HAL_ADC_IRQHandler+0x1d6>
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d014      	beq.n	800202c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d10d      	bne.n	800202c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f929 	bl	8002274 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f06f 0201 	mvn.w	r2, #1
 800202a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800203a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d015      	beq.n	800206e <HAL_ADC_IRQHandler+0x218>
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d012      	beq.n	800206e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204c:	f043 0202 	orr.w	r2, r3, #2
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0220 	mvn.w	r2, #32
 800205c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f912 	bl	8002288 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f06f 0220 	mvn.w	r2, #32
 800206c:	601a      	str	r2, [r3, #0]
  }
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <HAL_ADC_Start_DMA+0x22>
 8002096:	2302      	movs	r3, #2
 8002098:	e0d0      	b.n	800223c <HAL_ADC_Start_DMA+0x1c4>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d018      	beq.n	80020e2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f042 0201 	orr.w	r2, r2, #1
 80020be:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020c0:	4b60      	ldr	r3, [pc, #384]	@ (8002244 <HAL_ADC_Start_DMA+0x1cc>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a60      	ldr	r2, [pc, #384]	@ (8002248 <HAL_ADC_Start_DMA+0x1d0>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	0c9a      	lsrs	r2, r3, #18
 80020cc:	4613      	mov	r3, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	4413      	add	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80020d4:	e002      	b.n	80020dc <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	3b01      	subs	r3, #1
 80020da:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f9      	bne.n	80020d6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020f0:	d107      	bne.n	8002102 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002100:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b01      	cmp	r3, #1
 800210e:	f040 8088 	bne.w	8002222 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002116:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800211a:	f023 0301 	bic.w	r3, r3, #1
 800211e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d007      	beq.n	8002144 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800213c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002148:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800214c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002150:	d106      	bne.n	8002160 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	f023 0206 	bic.w	r2, r3, #6
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	645a      	str	r2, [r3, #68]	@ 0x44
 800215e:	e002      	b.n	8002166 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800216e:	4b37      	ldr	r3, [pc, #220]	@ (800224c <HAL_ADC_Start_DMA+0x1d4>)
 8002170:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002176:	4a36      	ldr	r2, [pc, #216]	@ (8002250 <HAL_ADC_Start_DMA+0x1d8>)
 8002178:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217e:	4a35      	ldr	r2, [pc, #212]	@ (8002254 <HAL_ADC_Start_DMA+0x1dc>)
 8002180:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002186:	4a34      	ldr	r2, [pc, #208]	@ (8002258 <HAL_ADC_Start_DMA+0x1e0>)
 8002188:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002192:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80021a2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021b2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	334c      	adds	r3, #76	@ 0x4c
 80021be:	4619      	mov	r1, r3
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f000 fce4 	bl	8002b90 <HAL_DMA_Start_IT>
 80021c8:	4603      	mov	r3, r0
 80021ca:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10f      	bne.n	80021f8 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d129      	bne.n	800223a <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	e020      	b.n	800223a <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a17      	ldr	r2, [pc, #92]	@ (800225c <HAL_ADC_Start_DMA+0x1e4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d11b      	bne.n	800223a <HAL_ADC_Start_DMA+0x1c2>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d114      	bne.n	800223a <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	e00b      	b.n	800223a <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002226:	f043 0210 	orr.w	r2, r3, #16
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002232:	f043 0201 	orr.w	r2, r3, #1
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800223a:	7ffb      	ldrb	r3, [r7, #31]
}
 800223c:	4618      	mov	r0, r3
 800223e:	3720      	adds	r7, #32
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	20000034 	.word	0x20000034
 8002248:	431bde83 	.word	0x431bde83
 800224c:	40012300 	.word	0x40012300
 8002250:	080026f9 	.word	0x080026f9
 8002254:	080027b3 	.word	0x080027b3
 8002258:	080027cf 	.word	0x080027cf
 800225c:	40012000 	.word	0x40012000

08002260 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x1c>
 80022b4:	2302      	movs	r3, #2
 80022b6:	e113      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x244>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b09      	cmp	r3, #9
 80022c6:	d925      	bls.n	8002314 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68d9      	ldr	r1, [r3, #12]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	3b1e      	subs	r3, #30
 80022de:	2207      	movs	r2, #7
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43da      	mvns	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	400a      	ands	r2, r1
 80022ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68d9      	ldr	r1, [r3, #12]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	4618      	mov	r0, r3
 8002300:	4603      	mov	r3, r0
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4403      	add	r3, r0
 8002306:	3b1e      	subs	r3, #30
 8002308:	409a      	lsls	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	430a      	orrs	r2, r1
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	e022      	b.n	800235a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6919      	ldr	r1, [r3, #16]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	b29b      	uxth	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	2207      	movs	r2, #7
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	400a      	ands	r2, r1
 8002336:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6919      	ldr	r1, [r3, #16]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	4618      	mov	r0, r3
 800234a:	4603      	mov	r3, r0
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4403      	add	r3, r0
 8002350:	409a      	lsls	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b06      	cmp	r3, #6
 8002360:	d824      	bhi.n	80023ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	3b05      	subs	r3, #5
 8002374:	221f      	movs	r2, #31
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43da      	mvns	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	400a      	ands	r2, r1
 8002382:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	4618      	mov	r0, r3
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	3b05      	subs	r3, #5
 800239e:	fa00 f203 	lsl.w	r2, r0, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80023aa:	e04c      	b.n	8002446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	2b0c      	cmp	r3, #12
 80023b2:	d824      	bhi.n	80023fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	3b23      	subs	r3, #35	@ 0x23
 80023c6:	221f      	movs	r2, #31
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43da      	mvns	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	400a      	ands	r2, r1
 80023d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	4618      	mov	r0, r3
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	3b23      	subs	r3, #35	@ 0x23
 80023f0:	fa00 f203 	lsl.w	r2, r0, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80023fc:	e023      	b.n	8002446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	3b41      	subs	r3, #65	@ 0x41
 8002410:	221f      	movs	r2, #31
 8002412:	fa02 f303 	lsl.w	r3, r2, r3
 8002416:	43da      	mvns	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	400a      	ands	r2, r1
 800241e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	4618      	mov	r0, r3
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	3b41      	subs	r3, #65	@ 0x41
 800243a:	fa00 f203 	lsl.w	r2, r0, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002446:	4b29      	ldr	r3, [pc, #164]	@ (80024ec <HAL_ADC_ConfigChannel+0x250>)
 8002448:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a28      	ldr	r2, [pc, #160]	@ (80024f0 <HAL_ADC_ConfigChannel+0x254>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d10f      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1d8>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b12      	cmp	r3, #18
 800245a:	d10b      	bne.n	8002474 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a1d      	ldr	r2, [pc, #116]	@ (80024f0 <HAL_ADC_ConfigChannel+0x254>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d12b      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x23a>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a1c      	ldr	r2, [pc, #112]	@ (80024f4 <HAL_ADC_ConfigChannel+0x258>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d003      	beq.n	8002490 <HAL_ADC_ConfigChannel+0x1f4>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b11      	cmp	r3, #17
 800248e:	d122      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a11      	ldr	r2, [pc, #68]	@ (80024f4 <HAL_ADC_ConfigChannel+0x258>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d111      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024b2:	4b11      	ldr	r3, [pc, #68]	@ (80024f8 <HAL_ADC_ConfigChannel+0x25c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a11      	ldr	r2, [pc, #68]	@ (80024fc <HAL_ADC_ConfigChannel+0x260>)
 80024b8:	fba2 2303 	umull	r2, r3, r2, r3
 80024bc:	0c9a      	lsrs	r2, r3, #18
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024c8:	e002      	b.n	80024d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f9      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	40012300 	.word	0x40012300
 80024f0:	40012000 	.word	0x40012000
 80024f4:	10000012 	.word	0x10000012
 80024f8:	20000034 	.word	0x20000034
 80024fc:	431bde83 	.word	0x431bde83

08002500 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002508:	4b79      	ldr	r3, [pc, #484]	@ (80026f0 <ADC_Init+0x1f0>)
 800250a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	431a      	orrs	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002534:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	021a      	lsls	r2, r3, #8
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800257a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6899      	ldr	r1, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002592:	4a58      	ldr	r2, [pc, #352]	@ (80026f4 <ADC_Init+0x1f4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d022      	beq.n	80025de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6899      	ldr	r1, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6899      	ldr	r1, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	430a      	orrs	r2, r1
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	e00f      	b.n	80025fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 0202 	bic.w	r2, r2, #2
 800260c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6899      	ldr	r1, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	7e1b      	ldrb	r3, [r3, #24]
 8002618:	005a      	lsls	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d01b      	beq.n	8002664 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800263a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800264a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6859      	ldr	r1, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002656:	3b01      	subs	r3, #1
 8002658:	035a      	lsls	r2, r3, #13
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	e007      	b.n	8002674 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002672:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002682:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	3b01      	subs	r3, #1
 8002690:	051a      	lsls	r2, r3, #20
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6899      	ldr	r1, [r3, #8]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026b6:	025a      	lsls	r2, r3, #9
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6899      	ldr	r1, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	029a      	lsls	r2, r3, #10
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	609a      	str	r2, [r3, #8]
}
 80026e4:	bf00      	nop
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	40012300 	.word	0x40012300
 80026f4:	0f000001 	.word	0x0f000001

080026f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002704:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800270e:	2b00      	cmp	r3, #0
 8002710:	d13c      	bne.n	800278c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d12b      	bne.n	8002784 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002730:	2b00      	cmp	r3, #0
 8002732:	d127      	bne.n	8002784 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800273e:	2b00      	cmp	r3, #0
 8002740:	d006      	beq.n	8002750 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800274c:	2b00      	cmp	r3, #0
 800274e:	d119      	bne.n	8002784 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0220 	bic.w	r2, r2, #32
 800275e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002764:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002770:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d105      	bne.n	8002784 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277c:	f043 0201 	orr.w	r2, r3, #1
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f7fd febd 	bl	8000504 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800278a:	e00e      	b.n	80027aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff fd75 	bl	8002288 <HAL_ADC_ErrorCallback>
}
 800279e:	e004      	b.n	80027aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	4798      	blx	r3
}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b084      	sub	sp, #16
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027be:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f7ff fd4d 	bl	8002260 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027c6:	bf00      	nop
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027da:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2240      	movs	r2, #64	@ 0x40
 80027e0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	f043 0204 	orr.w	r2, r3, #4
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f7ff fd4a 	bl	8002288 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027f4:	bf00      	nop
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002820:	4b0c      	ldr	r3, [pc, #48]	@ (8002854 <__NVIC_SetPriorityGrouping+0x44>)
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002826:	68ba      	ldr	r2, [r7, #8]
 8002828:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800282c:	4013      	ands	r3, r2
 800282e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002838:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800283c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002842:	4a04      	ldr	r2, [pc, #16]	@ (8002854 <__NVIC_SetPriorityGrouping+0x44>)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	60d3      	str	r3, [r2, #12]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800285c:	4b04      	ldr	r3, [pc, #16]	@ (8002870 <__NVIC_GetPriorityGrouping+0x18>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	0a1b      	lsrs	r3, r3, #8
 8002862:	f003 0307 	and.w	r3, r3, #7
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	e000ed00 	.word	0xe000ed00

08002874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	4603      	mov	r3, r0
 800287c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	2b00      	cmp	r3, #0
 8002884:	db0b      	blt.n	800289e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	f003 021f 	and.w	r2, r3, #31
 800288c:	4907      	ldr	r1, [pc, #28]	@ (80028ac <__NVIC_EnableIRQ+0x38>)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	2001      	movs	r0, #1
 8002896:	fa00 f202 	lsl.w	r2, r0, r2
 800289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000e100 	.word	0xe000e100

080028b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	6039      	str	r1, [r7, #0]
 80028ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	db0a      	blt.n	80028da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	490c      	ldr	r1, [pc, #48]	@ (80028fc <__NVIC_SetPriority+0x4c>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	0112      	lsls	r2, r2, #4
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	440b      	add	r3, r1
 80028d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d8:	e00a      	b.n	80028f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4908      	ldr	r1, [pc, #32]	@ (8002900 <__NVIC_SetPriority+0x50>)
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	3b04      	subs	r3, #4
 80028e8:	0112      	lsls	r2, r2, #4
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	440b      	add	r3, r1
 80028ee:	761a      	strb	r2, [r3, #24]
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	e000e100 	.word	0xe000e100
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	@ 0x24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f1c3 0307 	rsb	r3, r3, #7
 800291e:	2b04      	cmp	r3, #4
 8002920:	bf28      	it	cs
 8002922:	2304      	movcs	r3, #4
 8002924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3304      	adds	r3, #4
 800292a:	2b06      	cmp	r3, #6
 800292c:	d902      	bls.n	8002934 <NVIC_EncodePriority+0x30>
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3b03      	subs	r3, #3
 8002932:	e000      	b.n	8002936 <NVIC_EncodePriority+0x32>
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002938:	f04f 32ff 	mov.w	r2, #4294967295
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	401a      	ands	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800294c:	f04f 31ff 	mov.w	r1, #4294967295
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa01 f303 	lsl.w	r3, r1, r3
 8002956:	43d9      	mvns	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	4313      	orrs	r3, r2
         );
}
 800295e:	4618      	mov	r0, r3
 8002960:	3724      	adds	r7, #36	@ 0x24
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800297c:	d301      	bcc.n	8002982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297e:	2301      	movs	r3, #1
 8002980:	e00f      	b.n	80029a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002982:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <SysTick_Config+0x40>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3b01      	subs	r3, #1
 8002988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298a:	210f      	movs	r1, #15
 800298c:	f04f 30ff 	mov.w	r0, #4294967295
 8002990:	f7ff ff8e 	bl	80028b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002994:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <SysTick_Config+0x40>)
 8002996:	2200      	movs	r2, #0
 8002998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299a:	4b04      	ldr	r3, [pc, #16]	@ (80029ac <SysTick_Config+0x40>)
 800299c:	2207      	movs	r2, #7
 800299e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	e000e010 	.word	0xe000e010

080029b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff ff29 	bl	8002810 <__NVIC_SetPriorityGrouping>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4603      	mov	r3, r0
 80029ce:	60b9      	str	r1, [r7, #8]
 80029d0:	607a      	str	r2, [r7, #4]
 80029d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d8:	f7ff ff3e 	bl	8002858 <__NVIC_GetPriorityGrouping>
 80029dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68b9      	ldr	r1, [r7, #8]
 80029e2:	6978      	ldr	r0, [r7, #20]
 80029e4:	f7ff ff8e 	bl	8002904 <NVIC_EncodePriority>
 80029e8:	4602      	mov	r2, r0
 80029ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ee:	4611      	mov	r1, r2
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff5d 	bl	80028b0 <__NVIC_SetPriority>
}
 80029f6:	bf00      	nop
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	4603      	mov	r3, r0
 8002a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff31 	bl	8002874 <__NVIC_EnableIRQ>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff ffa2 	bl	800296c <SysTick_Config>
 8002a28:	4603      	mov	r3, r0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a40:	f7ff f996 	bl	8001d70 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d101      	bne.n	8002a50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e099      	b.n	8002b84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a70:	e00f      	b.n	8002a92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a72:	f7ff f97d 	bl	8001d70 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b05      	cmp	r3, #5
 8002a7e:	d908      	bls.n	8002a92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2220      	movs	r2, #32
 8002a84:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2203      	movs	r2, #3
 8002a8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e078      	b.n	8002b84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1e8      	bne.n	8002a72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4b38      	ldr	r3, [pc, #224]	@ (8002b8c <HAL_DMA_Init+0x158>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d107      	bne.n	8002afc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af4:	4313      	orrs	r3, r2
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	f023 0307 	bic.w	r3, r3, #7
 8002b12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d117      	bne.n	8002b56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00e      	beq.n	8002b56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 faab 	bl	8003094 <DMA_CheckFifoParam>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2240      	movs	r2, #64	@ 0x40
 8002b48:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b52:	2301      	movs	r3, #1
 8002b54:	e016      	b.n	8002b84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fa62 	bl	8003028 <DMA_CalcBaseAndBitshift>
 8002b64:	4603      	mov	r3, r0
 8002b66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6c:	223f      	movs	r2, #63	@ 0x3f
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	f010803f 	.word	0xf010803f

08002b90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
 8002b9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <HAL_DMA_Start_IT+0x26>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e040      	b.n	8002c38 <HAL_DMA_Start_IT+0xa8>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d12f      	bne.n	8002c2a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 f9f4 	bl	8002fcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be8:	223f      	movs	r2, #63	@ 0x3f
 8002bea:	409a      	lsls	r2, r3
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f042 0216 	orr.w	r2, r2, #22
 8002bfe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d007      	beq.n	8002c18 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0208 	orr.w	r2, r2, #8
 8002c16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0201 	orr.w	r2, r2, #1
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	e005      	b.n	8002c36 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c32:	2302      	movs	r3, #2
 8002c34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d004      	beq.n	8002c5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2280      	movs	r2, #128	@ 0x80
 8002c58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e00c      	b.n	8002c78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2205      	movs	r2, #5
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0201 	bic.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c90:	4b8e      	ldr	r3, [pc, #568]	@ (8002ecc <HAL_DMA_IRQHandler+0x248>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a8e      	ldr	r2, [pc, #568]	@ (8002ed0 <HAL_DMA_IRQHandler+0x24c>)
 8002c96:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9a:	0a9b      	lsrs	r3, r3, #10
 8002c9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cae:	2208      	movs	r2, #8
 8002cb0:	409a      	lsls	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d01a      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d013      	beq.n	8002cf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0204 	bic.w	r2, r2, #4
 8002cd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cdc:	2208      	movs	r2, #8
 8002cde:	409a      	lsls	r2, r3
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce8:	f043 0201 	orr.w	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d012      	beq.n	8002d26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00b      	beq.n	8002d26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d12:	2201      	movs	r2, #1
 8002d14:	409a      	lsls	r2, r3
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d1e:	f043 0202 	orr.w	r2, r3, #2
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d012      	beq.n	8002d5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00b      	beq.n	8002d5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d48:	2204      	movs	r2, #4
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d54:	f043 0204 	orr.w	r2, r3, #4
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d60:	2210      	movs	r2, #16
 8002d62:	409a      	lsls	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d043      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d03c      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7e:	2210      	movs	r2, #16
 8002d80:	409a      	lsls	r2, r3
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d018      	beq.n	8002dc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d108      	bne.n	8002db4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d024      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	4798      	blx	r3
 8002db2:	e01f      	b.n	8002df4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d01b      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4798      	blx	r3
 8002dc4:	e016      	b.n	8002df4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d107      	bne.n	8002de4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0208 	bic.w	r2, r2, #8
 8002de2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d003      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df8:	2220      	movs	r2, #32
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 808f 	beq.w	8002f24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 8087 	beq.w	8002f24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b05      	cmp	r3, #5
 8002e2c:	d136      	bne.n	8002e9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0216 	bic.w	r2, r2, #22
 8002e3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d103      	bne.n	8002e5e <HAL_DMA_IRQHandler+0x1da>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0208 	bic.w	r2, r2, #8
 8002e6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e72:	223f      	movs	r2, #63	@ 0x3f
 8002e74:	409a      	lsls	r2, r3
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d07e      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	4798      	blx	r3
        }
        return;
 8002e9a:	e079      	b.n	8002f90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d01d      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10d      	bne.n	8002ed4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d031      	beq.n	8002f24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	4798      	blx	r3
 8002ec8:	e02c      	b.n	8002f24 <HAL_DMA_IRQHandler+0x2a0>
 8002eca:	bf00      	nop
 8002ecc:	20000034 	.word	0x20000034
 8002ed0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d023      	beq.n	8002f24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
 8002ee4:	e01e      	b.n	8002f24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10f      	bne.n	8002f14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0210 	bic.w	r2, r2, #16
 8002f02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d032      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d022      	beq.n	8002f7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2205      	movs	r2, #5
 8002f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	3301      	adds	r3, #1
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d307      	bcc.n	8002f6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f2      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x2cc>
 8002f6a:	e000      	b.n	8002f6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d005      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4798      	blx	r3
 8002f8e:	e000      	b.n	8002f92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f90:	bf00      	nop
    }
  }
}
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fa6:	b2db      	uxtb	r3, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fe8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b40      	cmp	r3, #64	@ 0x40
 8002ff8:	d108      	bne.n	800300c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800300a:	e007      	b.n	800301c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	60da      	str	r2, [r3, #12]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	3b10      	subs	r3, #16
 8003038:	4a14      	ldr	r2, [pc, #80]	@ (800308c <DMA_CalcBaseAndBitshift+0x64>)
 800303a:	fba2 2303 	umull	r2, r3, r2, r3
 800303e:	091b      	lsrs	r3, r3, #4
 8003040:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003042:	4a13      	ldr	r2, [pc, #76]	@ (8003090 <DMA_CalcBaseAndBitshift+0x68>)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4413      	add	r3, r2
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d909      	bls.n	800306a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800305e:	f023 0303 	bic.w	r3, r3, #3
 8003062:	1d1a      	adds	r2, r3, #4
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	659a      	str	r2, [r3, #88]	@ 0x58
 8003068:	e007      	b.n	800307a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003072:	f023 0303 	bic.w	r3, r3, #3
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	aaaaaaab 	.word	0xaaaaaaab
 8003090:	0800d07c 	.word	0x0800d07c

08003094 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d11f      	bne.n	80030ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d856      	bhi.n	8003162 <DMA_CheckFifoParam+0xce>
 80030b4:	a201      	add	r2, pc, #4	@ (adr r2, 80030bc <DMA_CheckFifoParam+0x28>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	080030cd 	.word	0x080030cd
 80030c0:	080030df 	.word	0x080030df
 80030c4:	080030cd 	.word	0x080030cd
 80030c8:	08003163 	.word	0x08003163
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d046      	beq.n	8003166 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030dc:	e043      	b.n	8003166 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030e6:	d140      	bne.n	800316a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ec:	e03d      	b.n	800316a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030f6:	d121      	bne.n	800313c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d837      	bhi.n	800316e <DMA_CheckFifoParam+0xda>
 80030fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003104 <DMA_CheckFifoParam+0x70>)
 8003100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003104:	08003115 	.word	0x08003115
 8003108:	0800311b 	.word	0x0800311b
 800310c:	08003115 	.word	0x08003115
 8003110:	0800312d 	.word	0x0800312d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	73fb      	strb	r3, [r7, #15]
      break;
 8003118:	e030      	b.n	800317c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d025      	beq.n	8003172 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800312a:	e022      	b.n	8003172 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003130:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003134:	d11f      	bne.n	8003176 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800313a:	e01c      	b.n	8003176 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d903      	bls.n	800314a <DMA_CheckFifoParam+0xb6>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b03      	cmp	r3, #3
 8003146:	d003      	beq.n	8003150 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003148:	e018      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
      break;
 800314e:	e015      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00e      	beq.n	800317a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      break;
 8003160:	e00b      	b.n	800317a <DMA_CheckFifoParam+0xe6>
      break;
 8003162:	bf00      	nop
 8003164:	e00a      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      break;
 8003166:	bf00      	nop
 8003168:	e008      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      break;
 800316a:	bf00      	nop
 800316c:	e006      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      break;
 800316e:	bf00      	nop
 8003170:	e004      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      break;
 8003172:	bf00      	nop
 8003174:	e002      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      break;   
 8003176:	bf00      	nop
 8003178:	e000      	b.n	800317c <DMA_CheckFifoParam+0xe8>
      break;
 800317a:	bf00      	nop
    }
  } 
  
  return status; 
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop

0800318c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800318c:	b480      	push	{r7}
 800318e:	b089      	sub	sp, #36	@ 0x24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800319e:	2300      	movs	r3, #0
 80031a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	e159      	b.n	800345c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031a8:	2201      	movs	r2, #1
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	f040 8148 	bne.w	8003456 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d005      	beq.n	80031de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d130      	bne.n	8003240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	2203      	movs	r2, #3
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003214:	2201      	movs	r2, #1
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	091b      	lsrs	r3, r3, #4
 800322a:	f003 0201 	and.w	r2, r3, #1
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	2b03      	cmp	r3, #3
 800324a:	d017      	beq.n	800327c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	2203      	movs	r2, #3
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 0303 	and.w	r3, r3, #3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d123      	bne.n	80032d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	08da      	lsrs	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3208      	adds	r2, #8
 8003290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	220f      	movs	r2, #15
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	08da      	lsrs	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3208      	adds	r2, #8
 80032ca:	69b9      	ldr	r1, [r7, #24]
 80032cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	2203      	movs	r2, #3
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0203 	and.w	r2, r3, #3
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80a2 	beq.w	8003456 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	4b57      	ldr	r3, [pc, #348]	@ (8003474 <HAL_GPIO_Init+0x2e8>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	4a56      	ldr	r2, [pc, #344]	@ (8003474 <HAL_GPIO_Init+0x2e8>)
 800331c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003320:	6453      	str	r3, [r2, #68]	@ 0x44
 8003322:	4b54      	ldr	r3, [pc, #336]	@ (8003474 <HAL_GPIO_Init+0x2e8>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800332e:	4a52      	ldr	r2, [pc, #328]	@ (8003478 <HAL_GPIO_Init+0x2ec>)
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	089b      	lsrs	r3, r3, #2
 8003334:	3302      	adds	r3, #2
 8003336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	220f      	movs	r2, #15
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a49      	ldr	r2, [pc, #292]	@ (800347c <HAL_GPIO_Init+0x2f0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d019      	beq.n	800338e <HAL_GPIO_Init+0x202>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a48      	ldr	r2, [pc, #288]	@ (8003480 <HAL_GPIO_Init+0x2f4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d013      	beq.n	800338a <HAL_GPIO_Init+0x1fe>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a47      	ldr	r2, [pc, #284]	@ (8003484 <HAL_GPIO_Init+0x2f8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d00d      	beq.n	8003386 <HAL_GPIO_Init+0x1fa>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a46      	ldr	r2, [pc, #280]	@ (8003488 <HAL_GPIO_Init+0x2fc>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d007      	beq.n	8003382 <HAL_GPIO_Init+0x1f6>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a45      	ldr	r2, [pc, #276]	@ (800348c <HAL_GPIO_Init+0x300>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d101      	bne.n	800337e <HAL_GPIO_Init+0x1f2>
 800337a:	2304      	movs	r3, #4
 800337c:	e008      	b.n	8003390 <HAL_GPIO_Init+0x204>
 800337e:	2307      	movs	r3, #7
 8003380:	e006      	b.n	8003390 <HAL_GPIO_Init+0x204>
 8003382:	2303      	movs	r3, #3
 8003384:	e004      	b.n	8003390 <HAL_GPIO_Init+0x204>
 8003386:	2302      	movs	r3, #2
 8003388:	e002      	b.n	8003390 <HAL_GPIO_Init+0x204>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <HAL_GPIO_Init+0x204>
 800338e:	2300      	movs	r3, #0
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	f002 0203 	and.w	r2, r2, #3
 8003396:	0092      	lsls	r2, r2, #2
 8003398:	4093      	lsls	r3, r2
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033a0:	4935      	ldr	r1, [pc, #212]	@ (8003478 <HAL_GPIO_Init+0x2ec>)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	089b      	lsrs	r3, r3, #2
 80033a6:	3302      	adds	r3, #2
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ae:	4b38      	ldr	r3, [pc, #224]	@ (8003490 <HAL_GPIO_Init+0x304>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033d2:	4a2f      	ldr	r2, [pc, #188]	@ (8003490 <HAL_GPIO_Init+0x304>)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003490 <HAL_GPIO_Init+0x304>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d003      	beq.n	80033fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033fc:	4a24      	ldr	r2, [pc, #144]	@ (8003490 <HAL_GPIO_Init+0x304>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003402:	4b23      	ldr	r3, [pc, #140]	@ (8003490 <HAL_GPIO_Init+0x304>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003426:	4a1a      	ldr	r2, [pc, #104]	@ (8003490 <HAL_GPIO_Init+0x304>)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800342c:	4b18      	ldr	r3, [pc, #96]	@ (8003490 <HAL_GPIO_Init+0x304>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003450:	4a0f      	ldr	r2, [pc, #60]	@ (8003490 <HAL_GPIO_Init+0x304>)
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3301      	adds	r3, #1
 800345a:	61fb      	str	r3, [r7, #28]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	2b0f      	cmp	r3, #15
 8003460:	f67f aea2 	bls.w	80031a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	3724      	adds	r7, #36	@ 0x24
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800
 8003478:	40013800 	.word	0x40013800
 800347c:	40020000 	.word	0x40020000
 8003480:	40020400 	.word	0x40020400
 8003484:	40020800 	.word	0x40020800
 8003488:	40020c00 	.word	0x40020c00
 800348c:	40021000 	.word	0x40021000
 8003490:	40013c00 	.word	0x40013c00

08003494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	807b      	strh	r3, [r7, #2]
 80034a0:	4613      	mov	r3, r2
 80034a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034a4:	787b      	ldrb	r3, [r7, #1]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034aa:	887a      	ldrh	r2, [r7, #2]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034b0:	e003      	b.n	80034ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034b2:	887b      	ldrh	r3, [r7, #2]
 80034b4:	041a      	lsls	r2, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	619a      	str	r2, [r3, #24]
}
 80034ba:	bf00      	nop
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b085      	sub	sp, #20
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	460b      	mov	r3, r1
 80034d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034d8:	887a      	ldrh	r2, [r7, #2]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4013      	ands	r3, r2
 80034de:	041a      	lsls	r2, r3, #16
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	43d9      	mvns	r1, r3
 80034e4:	887b      	ldrh	r3, [r7, #2]
 80034e6:	400b      	ands	r3, r1
 80034e8:	431a      	orrs	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	619a      	str	r2, [r3, #24]
}
 80034ee:	bf00      	nop
 80034f0:	3714      	adds	r7, #20
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e12b      	b.n	8003766 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fe f9e8 	bl	80018f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2224      	movs	r2, #36	@ 0x24
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0201 	bic.w	r2, r2, #1
 800353e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800354e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800355e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003560:	f004 f886 	bl	8007670 <HAL_RCC_GetPCLK1Freq>
 8003564:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	4a81      	ldr	r2, [pc, #516]	@ (8003770 <HAL_I2C_Init+0x274>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d807      	bhi.n	8003580 <HAL_I2C_Init+0x84>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4a80      	ldr	r2, [pc, #512]	@ (8003774 <HAL_I2C_Init+0x278>)
 8003574:	4293      	cmp	r3, r2
 8003576:	bf94      	ite	ls
 8003578:	2301      	movls	r3, #1
 800357a:	2300      	movhi	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	e006      	b.n	800358e <HAL_I2C_Init+0x92>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4a7d      	ldr	r2, [pc, #500]	@ (8003778 <HAL_I2C_Init+0x27c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	bf94      	ite	ls
 8003588:	2301      	movls	r3, #1
 800358a:	2300      	movhi	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e0e7      	b.n	8003766 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4a78      	ldr	r2, [pc, #480]	@ (800377c <HAL_I2C_Init+0x280>)
 800359a:	fba2 2303 	umull	r2, r3, r2, r3
 800359e:	0c9b      	lsrs	r3, r3, #18
 80035a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68ba      	ldr	r2, [r7, #8]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4a6a      	ldr	r2, [pc, #424]	@ (8003770 <HAL_I2C_Init+0x274>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d802      	bhi.n	80035d0 <HAL_I2C_Init+0xd4>
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	3301      	adds	r3, #1
 80035ce:	e009      	b.n	80035e4 <HAL_I2C_Init+0xe8>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	4a69      	ldr	r2, [pc, #420]	@ (8003780 <HAL_I2C_Init+0x284>)
 80035dc:	fba2 2303 	umull	r2, r3, r2, r3
 80035e0:	099b      	lsrs	r3, r3, #6
 80035e2:	3301      	adds	r3, #1
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	430b      	orrs	r3, r1
 80035ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	495c      	ldr	r1, [pc, #368]	@ (8003770 <HAL_I2C_Init+0x274>)
 8003600:	428b      	cmp	r3, r1
 8003602:	d819      	bhi.n	8003638 <HAL_I2C_Init+0x13c>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	1e59      	subs	r1, r3, #1
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003612:	1c59      	adds	r1, r3, #1
 8003614:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003618:	400b      	ands	r3, r1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00a      	beq.n	8003634 <HAL_I2C_Init+0x138>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1e59      	subs	r1, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	fbb1 f3f3 	udiv	r3, r1, r3
 800362c:	3301      	adds	r3, #1
 800362e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003632:	e051      	b.n	80036d8 <HAL_I2C_Init+0x1dc>
 8003634:	2304      	movs	r3, #4
 8003636:	e04f      	b.n	80036d8 <HAL_I2C_Init+0x1dc>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d111      	bne.n	8003664 <HAL_I2C_Init+0x168>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1e58      	subs	r0, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6859      	ldr	r1, [r3, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	440b      	add	r3, r1
 800364e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003652:	3301      	adds	r3, #1
 8003654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf0c      	ite	eq
 800365c:	2301      	moveq	r3, #1
 800365e:	2300      	movne	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	e012      	b.n	800368a <HAL_I2C_Init+0x18e>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1e58      	subs	r0, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	0099      	lsls	r1, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	fbb0 f3f3 	udiv	r3, r0, r3
 800367a:	3301      	adds	r3, #1
 800367c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003680:	2b00      	cmp	r3, #0
 8003682:	bf0c      	ite	eq
 8003684:	2301      	moveq	r3, #1
 8003686:	2300      	movne	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_I2C_Init+0x196>
 800368e:	2301      	movs	r3, #1
 8003690:	e022      	b.n	80036d8 <HAL_I2C_Init+0x1dc>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10e      	bne.n	80036b8 <HAL_I2C_Init+0x1bc>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1e58      	subs	r0, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6859      	ldr	r1, [r3, #4]
 80036a2:	460b      	mov	r3, r1
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	440b      	add	r3, r1
 80036a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ac:	3301      	adds	r3, #1
 80036ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036b6:	e00f      	b.n	80036d8 <HAL_I2C_Init+0x1dc>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	1e58      	subs	r0, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6859      	ldr	r1, [r3, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	0099      	lsls	r1, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ce:	3301      	adds	r3, #1
 80036d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	6809      	ldr	r1, [r1, #0]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	69da      	ldr	r2, [r3, #28]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003706:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6911      	ldr	r1, [r2, #16]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	68d2      	ldr	r2, [r2, #12]
 8003712:	4311      	orrs	r1, r2
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	430b      	orrs	r3, r1
 800371a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695a      	ldr	r2, [r3, #20]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	000186a0 	.word	0x000186a0
 8003774:	001e847f 	.word	0x001e847f
 8003778:	003d08ff 	.word	0x003d08ff
 800377c:	431bde83 	.word	0x431bde83
 8003780:	10624dd3 	.word	0x10624dd3

08003784 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003796:	2b80      	cmp	r3, #128	@ 0x80
 8003798:	d103      	bne.n	80037a2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2200      	movs	r2, #0
 80037a0:	611a      	str	r2, [r3, #16]
  }
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
	...

080037b0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	461a      	mov	r2, r3
 80037bc:	460b      	mov	r3, r1
 80037be:	817b      	strh	r3, [r7, #10]
 80037c0:	4613      	mov	r3, r2
 80037c2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b20      	cmp	r3, #32
 80037d2:	f040 8109 	bne.w	80039e8 <HAL_I2C_Master_Transmit_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80037d6:	4b87      	ldr	r3, [pc, #540]	@ (80039f4 <HAL_I2C_Master_Transmit_DMA+0x244>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	08db      	lsrs	r3, r3, #3
 80037dc:	4a86      	ldr	r2, [pc, #536]	@ (80039f8 <HAL_I2C_Master_Transmit_DMA+0x248>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	0a1a      	lsrs	r2, r3, #8
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	009a      	lsls	r2, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d112      	bne.n	8003822 <HAL_I2C_Master_Transmit_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	f043 0220 	orr.w	r2, r3, #32
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800381e:	2302      	movs	r3, #2
 8003820:	e0e3      	b.n	80039ea <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b02      	cmp	r3, #2
 800382e:	d0df      	beq.n	80037f0 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_I2C_Master_Transmit_DMA+0x8e>
 800383a:	2302      	movs	r3, #2
 800383c:	e0d5      	b.n	80039ea <HAL_I2C_Master_Transmit_DMA+0x23a>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	2b01      	cmp	r3, #1
 8003852:	d007      	beq.n	8003864 <HAL_I2C_Master_Transmit_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003872:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2221      	movs	r2, #33	@ 0x21
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2210      	movs	r2, #16
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	893a      	ldrh	r2, [r7, #8]
 8003894:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800389a:	b29a      	uxth	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4a56      	ldr	r2, [pc, #344]	@ (80039fc <HAL_I2C_Master_Transmit_DMA+0x24c>)
 80038a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80038a6:	897a      	ldrh	r2, [r7, #10]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d07b      	beq.n	80039ac <HAL_I2C_Master_Transmit_DMA+0x1fc>
    {
      if (hi2c->hdmatx != NULL)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d02a      	beq.n	8003912 <HAL_I2C_Master_Transmit_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c0:	4a4f      	ldr	r2, [pc, #316]	@ (8003a00 <HAL_I2C_Master_Transmit_DMA+0x250>)
 80038c2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038c8:	4a4e      	ldr	r2, [pc, #312]	@ (8003a04 <HAL_I2C_Master_Transmit_DMA+0x254>)
 80038ca:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d0:	2200      	movs	r2, #0
 80038d2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d8:	2200      	movs	r2, #0
 80038da:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e0:	2200      	movs	r2, #0
 80038e2:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038e8:	2200      	movs	r2, #0
 80038ea:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f4:	4619      	mov	r1, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3310      	adds	r3, #16
 80038fc:	461a      	mov	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003902:	f7ff f945 	bl	8002b90 <HAL_DMA_Start_IT>
 8003906:	4603      	mov	r3, r0
 8003908:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800390a:	7dfb      	ldrb	r3, [r7, #23]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d139      	bne.n	8003984 <HAL_I2C_Master_Transmit_DMA+0x1d4>
 8003910:	e013      	b.n	800393a <HAL_I2C_Master_Transmit_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e057      	b.n	80039ea <HAL_I2C_Master_Transmit_DMA+0x23a>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003950:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003960:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003970:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e02f      	b.n	80039e4 <HAL_I2C_Master_Transmit_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003998:	f043 0210 	orr.w	r2, r3, #16
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e01e      	b.n	80039ea <HAL_I2C_Master_Transmit_DMA+0x23a>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039ba:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039ca:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80039e2:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	e000      	b.n	80039ea <HAL_I2C_Master_Transmit_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 80039e8:	2302      	movs	r3, #2
  }
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000034 	.word	0x20000034
 80039f8:	14f8b589 	.word	0x14f8b589
 80039fc:	ffff0000 	.word	0xffff0000
 8003a00:	08005455 	.word	0x08005455
 8003a04:	08005613 	.word	0x08005613

08003a08 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08a      	sub	sp, #40	@ 0x28
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	460b      	mov	r3, r1
 8003a16:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003a18:	f7fe f9aa 	bl	8001d70 <HAL_GetTick>
 8003a1c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	f040 8111 	bne.w	8003c52 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	2319      	movs	r3, #25
 8003a36:	2201      	movs	r2, #1
 8003a38:	4988      	ldr	r1, [pc, #544]	@ (8003c5c <HAL_I2C_IsDeviceReady+0x254>)
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f001 fece 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003a46:	2302      	movs	r3, #2
 8003a48:	e104      	b.n	8003c54 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_I2C_IsDeviceReady+0x50>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e0fd      	b.n	8003c54 <HAL_I2C_IsDeviceReady+0x24c>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d007      	beq.n	8003a7e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0201 	orr.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2224      	movs	r2, #36	@ 0x24
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4a70      	ldr	r2, [pc, #448]	@ (8003c60 <HAL_I2C_IsDeviceReady+0x258>)
 8003aa0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ab0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f001 fe8c 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00d      	beq.n	8003ae6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ad8:	d103      	bne.n	8003ae2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ae0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e0b6      	b.n	8003c54 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ae6:	897b      	ldrh	r3, [r7, #10]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	461a      	mov	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003af4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003af6:	f7fe f93b 	bl	8001d70 <HAL_GetTick>
 8003afa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	bf0c      	ite	eq
 8003b0a:	2301      	moveq	r3, #1
 8003b0c:	2300      	movne	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b20:	bf0c      	ite	eq
 8003b22:	2301      	moveq	r3, #1
 8003b24:	2300      	movne	r3, #0
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b2a:	e025      	b.n	8003b78 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b2c:	f7fe f920 	bl	8001d70 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d302      	bcc.n	8003b42 <HAL_I2C_IsDeviceReady+0x13a>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d103      	bne.n	8003b4a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	22a0      	movs	r2, #160	@ 0xa0
 8003b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b82:	d005      	beq.n	8003b90 <HAL_I2C_IsDeviceReady+0x188>
 8003b84:	7dfb      	ldrb	r3, [r7, #23]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d102      	bne.n	8003b90 <HAL_I2C_IsDeviceReady+0x188>
 8003b8a:	7dbb      	ldrb	r3, [r7, #22]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0cd      	beq.n	8003b2c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d129      	bne.n	8003bfa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	613b      	str	r3, [r7, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	613b      	str	r3, [r7, #16]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	613b      	str	r3, [r7, #16]
 8003bca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	2319      	movs	r3, #25
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	4921      	ldr	r1, [pc, #132]	@ (8003c5c <HAL_I2C_IsDeviceReady+0x254>)
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f001 fe00 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e036      	b.n	8003c54 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e02c      	b.n	8003c54 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c08:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c12:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	2319      	movs	r3, #25
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	490f      	ldr	r1, [pc, #60]	@ (8003c5c <HAL_I2C_IsDeviceReady+0x254>)
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f001 fddc 	bl	80057dc <I2C_WaitOnFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e012      	b.n	8003c54 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	3301      	adds	r3, #1
 8003c32:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	f4ff af32 	bcc.w	8003aa2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003c52:	2302      	movs	r3, #2
  }
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3720      	adds	r7, #32
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	00100002 	.word	0x00100002
 8003c60:	ffff0000 	.word	0xffff0000

08003c64 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b088      	sub	sp, #32
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c84:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c8c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d003      	beq.n	8003c9c <HAL_I2C_EV_IRQHandler+0x38>
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
 8003c96:	2b40      	cmp	r3, #64	@ 0x40
 8003c98:	f040 80c1 	bne.w	8003e1e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695b      	ldr	r3, [r3, #20]
 8003caa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10d      	bne.n	8003cd2 <HAL_I2C_EV_IRQHandler+0x6e>
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003cbc:	d003      	beq.n	8003cc6 <HAL_I2C_EV_IRQHandler+0x62>
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003cc4:	d101      	bne.n	8003cca <HAL_I2C_EV_IRQHandler+0x66>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <HAL_I2C_EV_IRQHandler+0x68>
 8003cca:	2300      	movs	r3, #0
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	f000 8132 	beq.w	8003f36 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00c      	beq.n	8003cf6 <HAL_I2C_EV_IRQHandler+0x92>
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	0a5b      	lsrs	r3, r3, #9
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d006      	beq.n	8003cf6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f001 fe23 	bl	8005934 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fd91 	bl	8004816 <I2C_Master_SB>
 8003cf4:	e092      	b.n	8003e1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	08db      	lsrs	r3, r3, #3
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <HAL_I2C_EV_IRQHandler+0xb2>
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	0a5b      	lsrs	r3, r3, #9
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fe07 	bl	8004922 <I2C_Master_ADD10>
 8003d14:	e082      	b.n	8003e1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	085b      	lsrs	r3, r3, #1
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <HAL_I2C_EV_IRQHandler+0xd2>
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	0a5b      	lsrs	r3, r3, #9
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fe21 	bl	8004976 <I2C_Master_ADDR>
 8003d34:	e072      	b.n	8003e1c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	089b      	lsrs	r3, r3, #2
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d03b      	beq.n	8003dba <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d50:	f000 80f3 	beq.w	8003f3a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	09db      	lsrs	r3, r3, #7
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00f      	beq.n	8003d80 <HAL_I2C_EV_IRQHandler+0x11c>
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	0a9b      	lsrs	r3, r3, #10
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d009      	beq.n	8003d80 <HAL_I2C_EV_IRQHandler+0x11c>
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	089b      	lsrs	r3, r3, #2
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d103      	bne.n	8003d80 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f9e9 	bl	8004150 <I2C_MasterTransmit_TXE>
 8003d7e:	e04d      	b.n	8003e1c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	089b      	lsrs	r3, r3, #2
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80d6 	beq.w	8003f3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	0a5b      	lsrs	r3, r3, #9
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 80cf 	beq.w	8003f3a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d9c:	7bbb      	ldrb	r3, [r7, #14]
 8003d9e:	2b21      	cmp	r3, #33	@ 0x21
 8003da0:	d103      	bne.n	8003daa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fa70 	bl	8004288 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003da8:	e0c7      	b.n	8003f3a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	2b40      	cmp	r3, #64	@ 0x40
 8003dae:	f040 80c4 	bne.w	8003f3a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fade 	bl	8004374 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003db8:	e0bf      	b.n	8003f3a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dc8:	f000 80b7 	beq.w	8003f3a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	099b      	lsrs	r3, r3, #6
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00f      	beq.n	8003df8 <HAL_I2C_EV_IRQHandler+0x194>
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	0a9b      	lsrs	r3, r3, #10
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d009      	beq.n	8003df8 <HAL_I2C_EV_IRQHandler+0x194>
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d103      	bne.n	8003df8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fb57 	bl	80044a4 <I2C_MasterReceive_RXNE>
 8003df6:	e011      	b.n	8003e1c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	089b      	lsrs	r3, r3, #2
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 809a 	beq.w	8003f3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	0a5b      	lsrs	r3, r3, #9
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 8093 	beq.w	8003f3a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 fc0d 	bl	8004634 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e1a:	e08e      	b.n	8003f3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8003e1c:	e08d      	b.n	8003f3a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d004      	beq.n	8003e30 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	e007      	b.n	8003e40 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d012      	beq.n	8003e72 <HAL_I2C_EV_IRQHandler+0x20e>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	0a5b      	lsrs	r3, r3, #9
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00c      	beq.n	8003e72 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003e68:	69b9      	ldr	r1, [r7, #24]
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 ffd2 	bl	8004e14 <I2C_Slave_ADDR>
 8003e70:	e066      	b.n	8003f40 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	091b      	lsrs	r3, r3, #4
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <HAL_I2C_EV_IRQHandler+0x22e>
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	0a5b      	lsrs	r3, r3, #9
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d003      	beq.n	8003e92 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f001 f80c 	bl	8004ea8 <I2C_Slave_STOPF>
 8003e90:	e056      	b.n	8003f40 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e92:	7bbb      	ldrb	r3, [r7, #14]
 8003e94:	2b21      	cmp	r3, #33	@ 0x21
 8003e96:	d002      	beq.n	8003e9e <HAL_I2C_EV_IRQHandler+0x23a>
 8003e98:	7bbb      	ldrb	r3, [r7, #14]
 8003e9a:	2b29      	cmp	r3, #41	@ 0x29
 8003e9c:	d125      	bne.n	8003eea <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	09db      	lsrs	r3, r3, #7
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00f      	beq.n	8003eca <HAL_I2C_EV_IRQHandler+0x266>
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	0a9b      	lsrs	r3, r3, #10
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d009      	beq.n	8003eca <HAL_I2C_EV_IRQHandler+0x266>
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	089b      	lsrs	r3, r3, #2
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d103      	bne.n	8003eca <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fee8 	bl	8004c98 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ec8:	e039      	b.n	8003f3e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	089b      	lsrs	r3, r3, #2
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d033      	beq.n	8003f3e <HAL_I2C_EV_IRQHandler+0x2da>
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	0a5b      	lsrs	r3, r3, #9
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d02d      	beq.n	8003f3e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 ff15 	bl	8004d12 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ee8:	e029      	b.n	8003f3e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	099b      	lsrs	r3, r3, #6
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00f      	beq.n	8003f16 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	0a9b      	lsrs	r3, r3, #10
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	089b      	lsrs	r3, r3, #2
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d103      	bne.n	8003f16 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 ff20 	bl	8004d54 <I2C_SlaveReceive_RXNE>
 8003f14:	e014      	b.n	8003f40 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	089b      	lsrs	r3, r3, #2
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00e      	beq.n	8003f40 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	0a5b      	lsrs	r3, r3, #9
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d008      	beq.n	8003f40 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 ff4e 	bl	8004dd0 <I2C_SlaveReceive_BTF>
 8003f34:	e004      	b.n	8003f40 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003f36:	bf00      	nop
 8003f38:	e002      	b.n	8003f40 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f3a:	bf00      	nop
 8003f3c:	e000      	b.n	8003f40 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f3e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003f40:	3720      	adds	r7, #32
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b08a      	sub	sp, #40	@ 0x28
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f68:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	0a1b      	lsrs	r3, r3, #8
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00e      	beq.n	8003f94 <HAL_I2C_ER_IRQHandler+0x4e>
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	0a1b      	lsrs	r3, r3, #8
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d008      	beq.n	8003f94 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003f92:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f94:	6a3b      	ldr	r3, [r7, #32]
 8003f96:	0a5b      	lsrs	r3, r3, #9
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00e      	beq.n	8003fbe <HAL_I2C_ER_IRQHandler+0x78>
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	0a1b      	lsrs	r3, r3, #8
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	f043 0302 	orr.w	r3, r3, #2
 8003fb2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003fbc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	0a9b      	lsrs	r3, r3, #10
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d03f      	beq.n	800404a <HAL_I2C_ER_IRQHandler+0x104>
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	0a1b      	lsrs	r3, r3, #8
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d039      	beq.n	800404a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003fd6:	7efb      	ldrb	r3, [r7, #27]
 8003fd8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fe8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003ff0:	7ebb      	ldrb	r3, [r7, #26]
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	d112      	bne.n	800401c <HAL_I2C_ER_IRQHandler+0xd6>
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10f      	bne.n	800401c <HAL_I2C_ER_IRQHandler+0xd6>
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	2b21      	cmp	r3, #33	@ 0x21
 8004000:	d008      	beq.n	8004014 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004002:	7cfb      	ldrb	r3, [r7, #19]
 8004004:	2b29      	cmp	r3, #41	@ 0x29
 8004006:	d005      	beq.n	8004014 <HAL_I2C_ER_IRQHandler+0xce>
 8004008:	7cfb      	ldrb	r3, [r7, #19]
 800400a:	2b28      	cmp	r3, #40	@ 0x28
 800400c:	d106      	bne.n	800401c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b21      	cmp	r3, #33	@ 0x21
 8004012:	d103      	bne.n	800401c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f001 f877 	bl	8005108 <I2C_Slave_AF>
 800401a:	e016      	b.n	800404a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004024:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	f043 0304 	orr.w	r3, r3, #4
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800402e:	7efb      	ldrb	r3, [r7, #27]
 8004030:	2b10      	cmp	r3, #16
 8004032:	d002      	beq.n	800403a <HAL_I2C_ER_IRQHandler+0xf4>
 8004034:	7efb      	ldrb	r3, [r7, #27]
 8004036:	2b40      	cmp	r3, #64	@ 0x40
 8004038:	d107      	bne.n	800404a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004048:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	0adb      	lsrs	r3, r3, #11
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00e      	beq.n	8004074 <HAL_I2C_ER_IRQHandler+0x12e>
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	0a1b      	lsrs	r3, r3, #8
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d008      	beq.n	8004074 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	f043 0308 	orr.w	r3, r3, #8
 8004068:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004072:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004076:	2b00      	cmp	r3, #0
 8004078:	d008      	beq.n	800408c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f001 f8b2 	bl	80051f0 <I2C_ITError>
  }
}
 800408c:	bf00      	nop
 800408e:	3728      	adds	r7, #40	@ 0x28
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	70fb      	strb	r3, [r7, #3]
 80040dc:	4613      	mov	r3, r2
 80040de:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800415e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004166:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004172:	2b00      	cmp	r3, #0
 8004174:	d150      	bne.n	8004218 <I2C_MasterTransmit_TXE+0xc8>
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	2b21      	cmp	r3, #33	@ 0x21
 800417a:	d14d      	bne.n	8004218 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b08      	cmp	r3, #8
 8004180:	d01d      	beq.n	80041be <I2C_MasterTransmit_TXE+0x6e>
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b20      	cmp	r3, #32
 8004186:	d01a      	beq.n	80041be <I2C_MasterTransmit_TXE+0x6e>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800418e:	d016      	beq.n	80041be <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800419e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2211      	movs	r2, #17
 80041a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2220      	movs	r2, #32
 80041b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7fc f9c4 	bl	8000544 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041bc:	e060      	b.n	8004280 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041cc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041dc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b40      	cmp	r3, #64	@ 0x40
 80041f6:	d107      	bne.n	8004208 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff ff7d 	bl	8004100 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004206:	e03b      	b.n	8004280 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7fc f997 	bl	8000544 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004216:	e033      	b.n	8004280 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004218:	7bfb      	ldrb	r3, [r7, #15]
 800421a:	2b21      	cmp	r3, #33	@ 0x21
 800421c:	d005      	beq.n	800422a <I2C_MasterTransmit_TXE+0xda>
 800421e:	7bbb      	ldrb	r3, [r7, #14]
 8004220:	2b40      	cmp	r3, #64	@ 0x40
 8004222:	d12d      	bne.n	8004280 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	2b22      	cmp	r3, #34	@ 0x22
 8004228:	d12a      	bne.n	8004280 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	d108      	bne.n	8004246 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004242:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004244:	e01c      	b.n	8004280 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b40      	cmp	r3, #64	@ 0x40
 8004250:	d103      	bne.n	800425a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f88e 	bl	8004374 <I2C_MemoryTransmit_TXE_BTF>
}
 8004258:	e012      	b.n	8004280 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425e:	781a      	ldrb	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800427e:	e7ff      	b.n	8004280 <I2C_MasterTransmit_TXE+0x130>
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004294:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b21      	cmp	r3, #33	@ 0x21
 80042a0:	d164      	bne.n	800436c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d012      	beq.n	80042d2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b0:	781a      	ldrb	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80042d0:	e04c      	b.n	800436c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d01d      	beq.n	8004314 <I2C_MasterTransmit_BTF+0x8c>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b20      	cmp	r3, #32
 80042dc:	d01a      	beq.n	8004314 <I2C_MasterTransmit_BTF+0x8c>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042e4:	d016      	beq.n	8004314 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042f4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2211      	movs	r2, #17
 80042fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f7fc f919 	bl	8000544 <HAL_I2C_MasterTxCpltCallback>
}
 8004312:	e02b      	b.n	800436c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004322:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004332:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b40      	cmp	r3, #64	@ 0x40
 800434c:	d107      	bne.n	800435e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7ff fed2 	bl	8004100 <HAL_I2C_MemTxCpltCallback>
}
 800435c:	e006      	b.n	800436c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7fc f8ec 	bl	8000544 <HAL_I2C_MasterTxCpltCallback>
}
 800436c:	bf00      	nop
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004382:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004388:	2b00      	cmp	r3, #0
 800438a:	d11d      	bne.n	80043c8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d10b      	bne.n	80043ac <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004398:	b2da      	uxtb	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a4:	1c9a      	adds	r2, r3, #2
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80043aa:	e077      	b.n	800449c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	121b      	asrs	r3, r3, #8
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043c0:	1c5a      	adds	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80043c6:	e069      	b.n	800449c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d10b      	bne.n	80043e8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80043e6:	e059      	b.n	800449c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d152      	bne.n	8004496 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	2b22      	cmp	r3, #34	@ 0x22
 80043f4:	d10d      	bne.n	8004412 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004404:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004410:	e044      	b.n	800449c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d015      	beq.n	8004448 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	2b21      	cmp	r3, #33	@ 0x21
 8004420:	d112      	bne.n	8004448 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004426:	781a      	ldrb	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800443c:	b29b      	uxth	r3, r3
 800443e:	3b01      	subs	r3, #1
 8004440:	b29a      	uxth	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004446:	e029      	b.n	800449c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d124      	bne.n	800449c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004452:	7bfb      	ldrb	r3, [r7, #15]
 8004454:	2b21      	cmp	r3, #33	@ 0x21
 8004456:	d121      	bne.n	800449c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004466:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004476:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff fe36 	bl	8004100 <HAL_I2C_MemTxCpltCallback>
}
 8004494:	e002      	b.n	800449c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff f974 	bl	8003784 <I2C_Flush_DR>
}
 800449c:	bf00      	nop
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b22      	cmp	r3, #34	@ 0x22
 80044b6:	f040 80b9 	bne.w	800462c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044be:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b03      	cmp	r3, #3
 80044cc:	d921      	bls.n	8004512 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	f040 8096 	bne.w	800462c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800450e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004510:	e08c      	b.n	800462c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004516:	2b02      	cmp	r3, #2
 8004518:	d07f      	beq.n	800461a <I2C_MasterReceive_RXNE+0x176>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d002      	beq.n	8004526 <I2C_MasterReceive_RXNE+0x82>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d179      	bne.n	800461a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f001 f9d2 	bl	80058d0 <I2C_WaitOnSTOPRequestThroughIT>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d14c      	bne.n	80045cc <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004540:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685a      	ldr	r2, [r3, #4]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004550:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b40      	cmp	r3, #64	@ 0x40
 800458a:	d10a      	bne.n	80045a2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff fdba 	bl	8004114 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045a0:	e044      	b.n	800462c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d002      	beq.n	80045b6 <I2C_MasterReceive_RXNE+0x112>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b20      	cmp	r3, #32
 80045b4:	d103      	bne.n	80045be <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80045bc:	e002      	b.n	80045c4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2212      	movs	r2, #18
 80045c2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff fd65 	bl	8004094 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045ca:	e02f      	b.n	800462c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80045da:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691a      	ldr	r2, [r3, #16]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7ff fd88 	bl	8004128 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004618:	e008      	b.n	800462c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004628:	605a      	str	r2, [r3, #4]
}
 800462a:	e7ff      	b.n	800462c <I2C_MasterReceive_RXNE+0x188>
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004640:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b04      	cmp	r3, #4
 800464a:	d11b      	bne.n	8004684 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800465a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004682:	e0c4      	b.n	800480e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b03      	cmp	r3, #3
 800468c:	d129      	bne.n	80046e2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800469c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d00a      	beq.n	80046ba <I2C_MasterReceive_BTF+0x86>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d007      	beq.n	80046ba <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046b8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	691a      	ldr	r2, [r3, #16]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046cc:	1c5a      	adds	r2, r3, #1
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80046e0:	e095      	b.n	800480e <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d17d      	bne.n	80047e8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d002      	beq.n	80046f8 <I2C_MasterReceive_BTF+0xc4>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b10      	cmp	r3, #16
 80046f6:	d108      	bne.n	800470a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	e016      	b.n	8004738 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2b04      	cmp	r3, #4
 800470e:	d002      	beq.n	8004716 <I2C_MasterReceive_BTF+0xe2>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b02      	cmp	r3, #2
 8004714:	d108      	bne.n	8004728 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	e007      	b.n	8004738 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004736:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004754:	b29b      	uxth	r3, r3
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	691a      	ldr	r2, [r3, #16]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004792:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b40      	cmp	r3, #64	@ 0x40
 80047a6:	d10a      	bne.n	80047be <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff fcac 	bl	8004114 <HAL_I2C_MemRxCpltCallback>
}
 80047bc:	e027      	b.n	800480e <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d002      	beq.n	80047d2 <I2C_MasterReceive_BTF+0x19e>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	d103      	bne.n	80047da <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80047d8:	e002      	b.n	80047e0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2212      	movs	r2, #18
 80047de:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7ff fc57 	bl	8004094 <HAL_I2C_MasterRxCpltCallback>
}
 80047e6:	e012      	b.n	800480e <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800480e:	bf00      	nop
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004816:	b480      	push	{r7}
 8004818:	b083      	sub	sp, #12
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b40      	cmp	r3, #64	@ 0x40
 8004828:	d117      	bne.n	800485a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004836:	b2db      	uxtb	r3, r3
 8004838:	461a      	mov	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004842:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004844:	e067      	b.n	8004916 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f043 0301 	orr.w	r3, r3, #1
 8004850:	b2da      	uxtb	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	611a      	str	r2, [r3, #16]
}
 8004858:	e05d      	b.n	8004916 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004862:	d133      	bne.n	80048cc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b21      	cmp	r3, #33	@ 0x21
 800486e:	d109      	bne.n	8004884 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004874:	b2db      	uxtb	r3, r3
 8004876:	461a      	mov	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004880:	611a      	str	r2, [r3, #16]
 8004882:	e008      	b.n	8004896 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004888:	b2db      	uxtb	r3, r3
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	b2da      	uxtb	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800489a:	2b00      	cmp	r3, #0
 800489c:	d004      	beq.n	80048a8 <I2C_Master_SB+0x92>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d108      	bne.n	80048ba <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d032      	beq.n	8004916 <I2C_Master_SB+0x100>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d02d      	beq.n	8004916 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048c8:	605a      	str	r2, [r3, #4]
}
 80048ca:	e024      	b.n	8004916 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10e      	bne.n	80048f2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d8:	b29b      	uxth	r3, r3
 80048da:	11db      	asrs	r3, r3, #7
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	f003 0306 	and.w	r3, r3, #6
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	f063 030f 	orn	r3, r3, #15
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	611a      	str	r2, [r3, #16]
}
 80048f0:	e011      	b.n	8004916 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d10d      	bne.n	8004916 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048fe:	b29b      	uxth	r3, r3
 8004900:	11db      	asrs	r3, r3, #7
 8004902:	b2db      	uxtb	r3, r3
 8004904:	f003 0306 	and.w	r3, r3, #6
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f063 030e 	orn	r3, r3, #14
 800490e:	b2da      	uxtb	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	611a      	str	r2, [r3, #16]
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492e:	b2da      	uxtb	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800493a:	2b00      	cmp	r3, #0
 800493c:	d004      	beq.n	8004948 <I2C_Master_ADD10+0x26>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004944:	2b00      	cmp	r3, #0
 8004946:	d108      	bne.n	800495a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00c      	beq.n	800496a <I2C_Master_ADD10+0x48>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685a      	ldr	r2, [r3, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004968:	605a      	str	r2, [r3, #4]
  }
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004976:	b480      	push	{r7}
 8004978:	b091      	sub	sp, #68	@ 0x44
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004984:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004992:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b22      	cmp	r3, #34	@ 0x22
 800499e:	f040 8169 	bne.w	8004c74 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10f      	bne.n	80049ca <I2C_Master_ADDR+0x54>
 80049aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80049ae:	2b40      	cmp	r3, #64	@ 0x40
 80049b0:	d10b      	bne.n	80049ca <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049b2:	2300      	movs	r3, #0
 80049b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80049c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049c8:	e160      	b.n	8004c8c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d11d      	bne.n	8004a0e <I2C_Master_ADDR+0x98>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80049da:	d118      	bne.n	8004a0e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049dc:	2300      	movs	r3, #0
 80049de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a00:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a06:	1c5a      	adds	r2, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	651a      	str	r2, [r3, #80]	@ 0x50
 8004a0c:	e13e      	b.n	8004c8c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d113      	bne.n	8004a40 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a18:	2300      	movs	r3, #0
 8004a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	e115      	b.n	8004c6c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	f040 808a 	bne.w	8004b60 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a4e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a52:	d137      	bne.n	8004ac4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a62:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a72:	d113      	bne.n	8004a9c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a82:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a84:	2300      	movs	r3, #0
 8004a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9a:	e0e7      	b.n	8004c6c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	623b      	str	r3, [r7, #32]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	623b      	str	r3, [r7, #32]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	623b      	str	r3, [r7, #32]
 8004ab0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	e0d3      	b.n	8004c6c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d02e      	beq.n	8004b28 <I2C_Master_ADDR+0x1b2>
 8004aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004acc:	2b20      	cmp	r3, #32
 8004ace:	d02b      	beq.n	8004b28 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad2:	2b12      	cmp	r3, #18
 8004ad4:	d102      	bne.n	8004adc <I2C_Master_ADDR+0x166>
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d125      	bne.n	8004b28 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d00e      	beq.n	8004b00 <I2C_Master_ADDR+0x18a>
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d00b      	beq.n	8004b00 <I2C_Master_ADDR+0x18a>
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aea:	2b10      	cmp	r3, #16
 8004aec:	d008      	beq.n	8004b00 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e007      	b.n	8004b10 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b0e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b10:	2300      	movs	r3, #0
 8004b12:	61fb      	str	r3, [r7, #28]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	61fb      	str	r3, [r7, #28]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	61fb      	str	r3, [r7, #28]
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	e0a1      	b.n	8004c6c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b36:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	61bb      	str	r3, [r7, #24]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	61bb      	str	r3, [r7, #24]
 8004b4c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	e085      	b.n	8004c6c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d14d      	bne.n	8004c06 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d016      	beq.n	8004b9e <I2C_Master_ADDR+0x228>
 8004b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d013      	beq.n	8004b9e <I2C_Master_ADDR+0x228>
 8004b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b78:	2b10      	cmp	r3, #16
 8004b7a:	d010      	beq.n	8004b9e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b8a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	e007      	b.n	8004bae <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bac:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bbc:	d117      	bne.n	8004bee <I2C_Master_ADDR+0x278>
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bc4:	d00b      	beq.n	8004bde <I2C_Master_ADDR+0x268>
 8004bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d008      	beq.n	8004bde <I2C_Master_ADDR+0x268>
 8004bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d005      	beq.n	8004bde <I2C_Master_ADDR+0x268>
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd4:	2b10      	cmp	r3, #16
 8004bd6:	d002      	beq.n	8004bde <I2C_Master_ADDR+0x268>
 8004bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	d107      	bne.n	8004bee <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004bec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	e032      	b.n	8004c6c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c14:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c24:	d117      	bne.n	8004c56 <I2C_Master_ADDR+0x2e0>
 8004c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c2c:	d00b      	beq.n	8004c46 <I2C_Master_ADDR+0x2d0>
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d008      	beq.n	8004c46 <I2C_Master_ADDR+0x2d0>
 8004c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d005      	beq.n	8004c46 <I2C_Master_ADDR+0x2d0>
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c3c:	2b10      	cmp	r3, #16
 8004c3e:	d002      	beq.n	8004c46 <I2C_Master_ADDR+0x2d0>
 8004c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c42:	2b20      	cmp	r3, #32
 8004c44:	d107      	bne.n	8004c56 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c54:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c56:	2300      	movs	r3, #0
 8004c58:	613b      	str	r3, [r7, #16]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004c72:	e00b      	b.n	8004c8c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695b      	ldr	r3, [r3, #20]
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
}
 8004c8a:	e7ff      	b.n	8004c8c <I2C_Master_ADDR+0x316>
 8004c8c:	bf00      	nop
 8004c8e:	3744      	adds	r7, #68	@ 0x44
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ca6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d02b      	beq.n	8004d0a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb6:	781a      	ldrb	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc2:	1c5a      	adds	r2, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d114      	bne.n	8004d0a <I2C_SlaveTransmit_TXE+0x72>
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
 8004ce2:	2b29      	cmp	r3, #41	@ 0x29
 8004ce4:	d111      	bne.n	8004d0a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cf4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2221      	movs	r2, #33	@ 0x21
 8004cfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2228      	movs	r2, #40	@ 0x28
 8004d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff f9cf 	bl	80040a8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d0a:	bf00      	nop
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d011      	beq.n	8004d48 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d28:	781a      	ldrb	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d02c      	beq.n	8004dc8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d114      	bne.n	8004dc8 <I2C_SlaveReceive_RXNE+0x74>
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
 8004da0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004da2:	d111      	bne.n	8004dc8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004db2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2222      	movs	r2, #34	@ 0x22
 8004db8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2228      	movs	r2, #40	@ 0x28
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff f97a 	bl	80040bc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004dc8:	bf00      	nop
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d012      	beq.n	8004e08 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e2e:	2b28      	cmp	r3, #40	@ 0x28
 8004e30:	d127      	bne.n	8004e82 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e40:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	089b      	lsrs	r3, r3, #2
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	09db      	lsrs	r3, r3, #7
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d103      	bne.n	8004e66 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	81bb      	strh	r3, [r7, #12]
 8004e64:	e002      	b.n	8004e6c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004e74:	89ba      	ldrh	r2, [r7, #12]
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff f928 	bl	80040d0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004e80:	e00e      	b.n	8004ea0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e82:	2300      	movs	r3, #0
 8004e84:	60bb      	str	r3, [r7, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	60bb      	str	r3, [r7, #8]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004ea0:	bf00      	nop
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eb6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ec6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60bb      	str	r3, [r7, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	60bb      	str	r3, [r7, #8]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 0201 	orr.w	r2, r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ef4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f04:	d172      	bne.n	8004fec <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	2b22      	cmp	r3, #34	@ 0x22
 8004f0a:	d002      	beq.n	8004f12 <I2C_Slave_STOPF+0x6a>
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f10:	d135      	bne.n	8004f7e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2e:	f043 0204 	orr.w	r2, r3, #4
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f44:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fe f824 	bl	8002f98 <HAL_DMA_GetState>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d049      	beq.n	8004fea <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f5a:	4a69      	ldr	r2, [pc, #420]	@ (8005100 <I2C_Slave_STOPF+0x258>)
 8004f5c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fd fe6c 	bl	8002c40 <HAL_DMA_Abort_IT>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d03d      	beq.n	8004fea <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f78:	4610      	mov	r0, r2
 8004f7a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f7c:	e035      	b.n	8004fea <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d005      	beq.n	8004fa2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f9a:	f043 0204 	orr.w	r2, r3, #4
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fb0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fd ffee 	bl	8002f98 <HAL_DMA_GetState>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d014      	beq.n	8004fec <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc6:	4a4e      	ldr	r2, [pc, #312]	@ (8005100 <I2C_Slave_STOPF+0x258>)
 8004fc8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fd fe36 	bl	8002c40 <HAL_DMA_Abort_IT>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d008      	beq.n	8004fec <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004fe4:	4610      	mov	r0, r2
 8004fe6:	4798      	blx	r3
 8004fe8:	e000      	b.n	8004fec <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004fea:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d03e      	beq.n	8005074 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b04      	cmp	r3, #4
 8005002:	d112      	bne.n	800502a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691a      	ldr	r2, [r3, #16]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800500e:	b2d2      	uxtb	r2, r2
 8005010:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005020:	b29b      	uxth	r3, r3
 8005022:	3b01      	subs	r3, #1
 8005024:	b29a      	uxth	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005034:	2b40      	cmp	r3, #64	@ 0x40
 8005036:	d112      	bne.n	800505e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691a      	ldr	r2, [r3, #16]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504a:	1c5a      	adds	r2, r3, #1
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506c:	f043 0204 	orr.w	r2, r3, #4
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f8b7 	bl	80051f0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005082:	e039      	b.n	80050f8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	2b2a      	cmp	r3, #42	@ 0x2a
 8005088:	d109      	bne.n	800509e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2228      	movs	r2, #40	@ 0x28
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff f80f 	bl	80040bc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b28      	cmp	r3, #40	@ 0x28
 80050a8:	d111      	bne.n	80050ce <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a15      	ldr	r2, [pc, #84]	@ (8005104 <I2C_Slave_STOPF+0x25c>)
 80050ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7ff f810 	bl	80040ec <HAL_I2C_ListenCpltCallback>
}
 80050cc:	e014      	b.n	80050f8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d2:	2b22      	cmp	r3, #34	@ 0x22
 80050d4:	d002      	beq.n	80050dc <I2C_Slave_STOPF+0x234>
 80050d6:	7bfb      	ldrb	r3, [r7, #15]
 80050d8:	2b22      	cmp	r3, #34	@ 0x22
 80050da:	d10d      	bne.n	80050f8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fe ffe2 	bl	80040bc <HAL_I2C_SlaveRxCpltCallback>
}
 80050f8:	bf00      	nop
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	0800568d 	.word	0x0800568d
 8005104:	ffff0000 	.word	0xffff0000

08005108 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005116:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b08      	cmp	r3, #8
 8005122:	d002      	beq.n	800512a <I2C_Slave_AF+0x22>
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2b20      	cmp	r3, #32
 8005128:	d129      	bne.n	800517e <I2C_Slave_AF+0x76>
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	2b28      	cmp	r3, #40	@ 0x28
 800512e:	d126      	bne.n	800517e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a2e      	ldr	r2, [pc, #184]	@ (80051ec <I2C_Slave_AF+0xe4>)
 8005134:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005144:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800514e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800515e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2220      	movs	r2, #32
 800516a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fe ffb8 	bl	80040ec <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800517c:	e031      	b.n	80051e2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800517e:	7bfb      	ldrb	r3, [r7, #15]
 8005180:	2b21      	cmp	r3, #33	@ 0x21
 8005182:	d129      	bne.n	80051d8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a19      	ldr	r2, [pc, #100]	@ (80051ec <I2C_Slave_AF+0xe4>)
 8005188:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2221      	movs	r2, #33	@ 0x21
 800518e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80051ae:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051b8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051c8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fe fada 	bl	8003784 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7fe ff69 	bl	80040a8 <HAL_I2C_SlaveTxCpltCallback>
}
 80051d6:	e004      	b.n	80051e2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051e0:	615a      	str	r2, [r3, #20]
}
 80051e2:	bf00      	nop
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	ffff0000 	.word	0xffff0000

080051f0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005206:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005208:	7bbb      	ldrb	r3, [r7, #14]
 800520a:	2b10      	cmp	r3, #16
 800520c:	d002      	beq.n	8005214 <I2C_ITError+0x24>
 800520e:	7bbb      	ldrb	r3, [r7, #14]
 8005210:	2b40      	cmp	r3, #64	@ 0x40
 8005212:	d10a      	bne.n	800522a <I2C_ITError+0x3a>
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	2b22      	cmp	r3, #34	@ 0x22
 8005218:	d107      	bne.n	800522a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005228:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800522a:	7bfb      	ldrb	r3, [r7, #15]
 800522c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005230:	2b28      	cmp	r3, #40	@ 0x28
 8005232:	d107      	bne.n	8005244 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2228      	movs	r2, #40	@ 0x28
 800523e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005242:	e015      	b.n	8005270 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800524e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005252:	d00a      	beq.n	800526a <I2C_ITError+0x7a>
 8005254:	7bfb      	ldrb	r3, [r7, #15]
 8005256:	2b60      	cmp	r3, #96	@ 0x60
 8005258:	d007      	beq.n	800526a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800527a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800527e:	d162      	bne.n	8005346 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800528e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005294:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b01      	cmp	r3, #1
 800529c:	d020      	beq.n	80052e0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052a2:	4a6a      	ldr	r2, [pc, #424]	@ (800544c <I2C_ITError+0x25c>)
 80052a4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fd fcc8 	bl	8002c40 <HAL_DMA_Abort_IT>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 8089 	beq.w	80053ca <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0201 	bic.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80052da:	4610      	mov	r0, r2
 80052dc:	4798      	blx	r3
 80052de:	e074      	b.n	80053ca <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e4:	4a59      	ldr	r2, [pc, #356]	@ (800544c <I2C_ITError+0x25c>)
 80052e6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7fd fca7 	bl	8002c40 <HAL_DMA_Abort_IT>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d068      	beq.n	80053ca <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005302:	2b40      	cmp	r3, #64	@ 0x40
 8005304:	d10b      	bne.n	800531e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	691a      	ldr	r2, [r3, #16]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005310:	b2d2      	uxtb	r2, r2
 8005312:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0201 	bic.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005340:	4610      	mov	r0, r2
 8005342:	4798      	blx	r3
 8005344:	e041      	b.n	80053ca <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b60      	cmp	r3, #96	@ 0x60
 8005350:	d125      	bne.n	800539e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2220      	movs	r2, #32
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800536a:	2b40      	cmp	r3, #64	@ 0x40
 800536c:	d10b      	bne.n	8005386 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0201 	bic.w	r2, r2, #1
 8005394:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fe fed0 	bl	800413c <HAL_I2C_AbortCpltCallback>
 800539c:	e015      	b.n	80053ca <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a8:	2b40      	cmp	r3, #64	@ 0x40
 80053aa:	d10b      	bne.n	80053c4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691a      	ldr	r2, [r3, #16]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7fe feaf 	bl	8004128 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ce:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10e      	bne.n	80053f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d109      	bne.n	80053f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d007      	beq.n	8005408 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005406:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800540e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b04      	cmp	r3, #4
 800541a:	d113      	bne.n	8005444 <I2C_ITError+0x254>
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	2b28      	cmp	r3, #40	@ 0x28
 8005420:	d110      	bne.n	8005444 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a0a      	ldr	r2, [pc, #40]	@ (8005450 <I2C_ITError+0x260>)
 8005426:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fe fe54 	bl	80040ec <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005444:	bf00      	nop
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	0800568d 	.word	0x0800568d
 8005450:	ffff0000 	.word	0xffff0000

08005454 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005460:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005468:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005470:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005476:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005486:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800548c:	2b00      	cmp	r3, #0
 800548e:	d003      	beq.n	8005498 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005494:	2200      	movs	r2, #0
 8005496:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a4:	2200      	movs	r2, #0
 80054a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80054a8:	7cfb      	ldrb	r3, [r7, #19]
 80054aa:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80054ae:	2b21      	cmp	r3, #33	@ 0x21
 80054b0:	d007      	beq.n	80054c2 <I2C_DMAXferCplt+0x6e>
 80054b2:	7cfb      	ldrb	r3, [r7, #19]
 80054b4:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80054b8:	2b22      	cmp	r3, #34	@ 0x22
 80054ba:	d131      	bne.n	8005520 <I2C_DMAXferCplt+0xcc>
 80054bc:	7cbb      	ldrb	r3, [r7, #18]
 80054be:	2b20      	cmp	r3, #32
 80054c0:	d12e      	bne.n	8005520 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054d0:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2200      	movs	r2, #0
 80054d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80054d8:	7cfb      	ldrb	r3, [r7, #19]
 80054da:	2b29      	cmp	r3, #41	@ 0x29
 80054dc:	d10a      	bne.n	80054f4 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2221      	movs	r2, #33	@ 0x21
 80054e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2228      	movs	r2, #40	@ 0x28
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054ec:	6978      	ldr	r0, [r7, #20]
 80054ee:	f7fe fddb 	bl	80040a8 <HAL_I2C_SlaveTxCpltCallback>
 80054f2:	e00c      	b.n	800550e <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80054f4:	7cfb      	ldrb	r3, [r7, #19]
 80054f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80054f8:	d109      	bne.n	800550e <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2222      	movs	r2, #34	@ 0x22
 80054fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2228      	movs	r2, #40	@ 0x28
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005508:	6978      	ldr	r0, [r7, #20]
 800550a:	f7fe fdd7 	bl	80040bc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800551c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800551e:	e074      	b.n	800560a <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d06e      	beq.n	800560a <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b01      	cmp	r3, #1
 8005534:	d107      	bne.n	8005546 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005544:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005554:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800555c:	d009      	beq.n	8005572 <I2C_DMAXferCplt+0x11e>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2b08      	cmp	r3, #8
 8005562:	d006      	beq.n	8005572 <I2C_DMAXferCplt+0x11e>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800556a:	d002      	beq.n	8005572 <I2C_DMAXferCplt+0x11e>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b20      	cmp	r3, #32
 8005570:	d107      	bne.n	8005582 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005580:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005590:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055a0:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2200      	movs	r2, #0
 80055a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d003      	beq.n	80055b8 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80055b0:	6978      	ldr	r0, [r7, #20]
 80055b2:	f7fe fdb9 	bl	8004128 <HAL_I2C_ErrorCallback>
}
 80055b6:	e028      	b.n	800560a <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	2b40      	cmp	r3, #64	@ 0x40
 80055ca:	d10a      	bne.n	80055e2 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2200      	movs	r2, #0
 80055d8:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80055da:	6978      	ldr	r0, [r7, #20]
 80055dc:	f7fe fd9a 	bl	8004114 <HAL_I2C_MemRxCpltCallback>
}
 80055e0:	e013      	b.n	800560a <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b08      	cmp	r3, #8
 80055ee:	d002      	beq.n	80055f6 <I2C_DMAXferCplt+0x1a2>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	d103      	bne.n	80055fe <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	2200      	movs	r2, #0
 80055fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80055fc:	e002      	b.n	8005604 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2212      	movs	r2, #18
 8005602:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005604:	6978      	ldr	r0, [r7, #20]
 8005606:	f7fe fd45 	bl	8004094 <HAL_I2C_MasterRxCpltCallback>
}
 800560a:	bf00      	nop
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b084      	sub	sp, #16
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561e:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800562c:	2200      	movs	r2, #0
 800562e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563c:	2200      	movs	r2, #0
 800563e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7fd fcb7 	bl	8002fb4 <HAL_DMA_GetError>
 8005646:	4603      	mov	r3, r0
 8005648:	2b02      	cmp	r3, #2
 800564a:	d01b      	beq.n	8005684 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800565a:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2220      	movs	r2, #32
 8005666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005676:	f043 0210 	orr.w	r2, r3, #16
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f7fe fd52 	bl	8004128 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005684:	bf00      	nop
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056a4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80056a6:	4b4b      	ldr	r3, [pc, #300]	@ (80057d4 <I2C_DMAAbort+0x148>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	08db      	lsrs	r3, r3, #3
 80056ac:	4a4a      	ldr	r2, [pc, #296]	@ (80057d8 <I2C_DMAAbort+0x14c>)
 80056ae:	fba2 2303 	umull	r2, r3, r2, r3
 80056b2:	0a1a      	lsrs	r2, r3, #8
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	00da      	lsls	r2, r3, #3
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ca:	f043 0220 	orr.w	r2, r3, #32
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80056d2:	e00a      	b.n	80056ea <I2C_DMAAbort+0x5e>
    }
    count--;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056e8:	d0ea      	beq.n	80056c0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f6:	2200      	movs	r2, #0
 80056f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005706:	2200      	movs	r2, #0
 8005708:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005718:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2200      	movs	r2, #0
 800571e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800572c:	2200      	movs	r2, #0
 800572e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800573c:	2200      	movs	r2, #0
 800573e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0201 	bic.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b60      	cmp	r3, #96	@ 0x60
 800575a:	d10e      	bne.n	800577a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2220      	movs	r2, #32
 8005760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2200      	movs	r2, #0
 8005770:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005772:	6978      	ldr	r0, [r7, #20]
 8005774:	f7fe fce2 	bl	800413c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005778:	e027      	b.n	80057ca <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800577a:	7cfb      	ldrb	r3, [r7, #19]
 800577c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005780:	2b28      	cmp	r3, #40	@ 0x28
 8005782:	d117      	bne.n	80057b4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80057a2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	2200      	movs	r2, #0
 80057a8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2228      	movs	r2, #40	@ 0x28
 80057ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80057b2:	e007      	b.n	80057c4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80057c4:	6978      	ldr	r0, [r7, #20]
 80057c6:	f7fe fcaf 	bl	8004128 <HAL_I2C_ErrorCallback>
}
 80057ca:	bf00      	nop
 80057cc:	3718      	adds	r7, #24
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000034 	.word	0x20000034
 80057d8:	14f8b589 	.word	0x14f8b589

080057dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	4613      	mov	r3, r2
 80057ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057ec:	e048      	b.n	8005880 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f4:	d044      	beq.n	8005880 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057f6:	f7fc fabb 	bl	8001d70 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	429a      	cmp	r2, r3
 8005804:	d302      	bcc.n	800580c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d139      	bne.n	8005880 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	0c1b      	lsrs	r3, r3, #16
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b01      	cmp	r3, #1
 8005814:	d10d      	bne.n	8005832 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	43da      	mvns	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	4013      	ands	r3, r2
 8005822:	b29b      	uxth	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	bf0c      	ite	eq
 8005828:	2301      	moveq	r3, #1
 800582a:	2300      	movne	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	461a      	mov	r2, r3
 8005830:	e00c      	b.n	800584c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	43da      	mvns	r2, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	4013      	ands	r3, r2
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	bf0c      	ite	eq
 8005844:	2301      	moveq	r3, #1
 8005846:	2300      	movne	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	461a      	mov	r2, r3
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	429a      	cmp	r2, r3
 8005850:	d116      	bne.n	8005880 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586c:	f043 0220 	orr.w	r2, r3, #32
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e023      	b.n	80058c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	0c1b      	lsrs	r3, r3, #16
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b01      	cmp	r3, #1
 8005888:	d10d      	bne.n	80058a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	43da      	mvns	r2, r3
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	4013      	ands	r3, r2
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	bf0c      	ite	eq
 800589c:	2301      	moveq	r3, #1
 800589e:	2300      	movne	r3, #0
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	461a      	mov	r2, r3
 80058a4:	e00c      	b.n	80058c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	43da      	mvns	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	4013      	ands	r3, r2
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	bf0c      	ite	eq
 80058b8:	2301      	moveq	r3, #1
 80058ba:	2300      	movne	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	461a      	mov	r2, r3
 80058c0:	79fb      	ldrb	r3, [r7, #7]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d093      	beq.n	80057ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80058dc:	4b13      	ldr	r3, [pc, #76]	@ (800592c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	08db      	lsrs	r3, r3, #3
 80058e2:	4a13      	ldr	r2, [pc, #76]	@ (8005930 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80058e4:	fba2 2303 	umull	r2, r3, r2, r3
 80058e8:	0a1a      	lsrs	r2, r3, #8
 80058ea:	4613      	mov	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3b01      	subs	r3, #1
 80058f6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d107      	bne.n	800590e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005902:	f043 0220 	orr.w	r2, r3, #32
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e008      	b.n	8005920 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800591c:	d0e9      	beq.n	80058f2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3714      	adds	r7, #20
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr
 800592c:	20000034 	.word	0x20000034
 8005930:	14f8b589 	.word	0x14f8b589

08005934 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005940:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005944:	d103      	bne.n	800594e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800594c:	e007      	b.n	800595e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005952:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005956:	d102      	bne.n	800595e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2208      	movs	r2, #8
 800595c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800595e:	bf00      	nop
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b086      	sub	sp, #24
 800596e:	af02      	add	r7, sp, #8
 8005970:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e101      	b.n	8005b80 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d106      	bne.n	800599c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f006 f936 	bl	800bc08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2203      	movs	r2, #3
 80059a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059aa:	d102      	bne.n	80059b2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f002 fc8d 	bl	80082d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6818      	ldr	r0, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	7c1a      	ldrb	r2, [r3, #16]
 80059c4:	f88d 2000 	strb.w	r2, [sp]
 80059c8:	3304      	adds	r3, #4
 80059ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059cc:	f002 fb6c 	bl	80080a8 <USB_CoreInit>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d005      	beq.n	80059e2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2202      	movs	r2, #2
 80059da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e0ce      	b.n	8005b80 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2100      	movs	r1, #0
 80059e8:	4618      	mov	r0, r3
 80059ea:	f002 fc85 	bl	80082f8 <USB_SetCurrentMode>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d005      	beq.n	8005a00 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e0bf      	b.n	8005b80 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a00:	2300      	movs	r3, #0
 8005a02:	73fb      	strb	r3, [r7, #15]
 8005a04:	e04a      	b.n	8005a9c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a06:	7bfa      	ldrb	r2, [r7, #15]
 8005a08:	6879      	ldr	r1, [r7, #4]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	4413      	add	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	440b      	add	r3, r1
 8005a14:	3315      	adds	r3, #21
 8005a16:	2201      	movs	r2, #1
 8005a18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a1a:	7bfa      	ldrb	r2, [r7, #15]
 8005a1c:	6879      	ldr	r1, [r7, #4]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	440b      	add	r3, r1
 8005a28:	3314      	adds	r3, #20
 8005a2a:	7bfa      	ldrb	r2, [r7, #15]
 8005a2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a2e:	7bfa      	ldrb	r2, [r7, #15]
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
 8005a32:	b298      	uxth	r0, r3
 8005a34:	6879      	ldr	r1, [r7, #4]
 8005a36:	4613      	mov	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	440b      	add	r3, r1
 8005a40:	332e      	adds	r3, #46	@ 0x2e
 8005a42:	4602      	mov	r2, r0
 8005a44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a46:	7bfa      	ldrb	r2, [r7, #15]
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	440b      	add	r3, r1
 8005a54:	3318      	adds	r3, #24
 8005a56:	2200      	movs	r2, #0
 8005a58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a5a:	7bfa      	ldrb	r2, [r7, #15]
 8005a5c:	6879      	ldr	r1, [r7, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	440b      	add	r3, r1
 8005a68:	331c      	adds	r3, #28
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a6e:	7bfa      	ldrb	r2, [r7, #15]
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	4613      	mov	r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	4413      	add	r3, r2
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	440b      	add	r3, r1
 8005a7c:	3320      	adds	r3, #32
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a82:	7bfa      	ldrb	r2, [r7, #15]
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	4613      	mov	r3, r2
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	440b      	add	r3, r1
 8005a90:	3324      	adds	r3, #36	@ 0x24
 8005a92:	2200      	movs	r2, #0
 8005a94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a96:	7bfb      	ldrb	r3, [r7, #15]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	73fb      	strb	r3, [r7, #15]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	791b      	ldrb	r3, [r3, #4]
 8005aa0:	7bfa      	ldrb	r2, [r7, #15]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d3af      	bcc.n	8005a06 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	73fb      	strb	r3, [r7, #15]
 8005aaa:	e044      	b.n	8005b36 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005aac:	7bfa      	ldrb	r2, [r7, #15]
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	440b      	add	r3, r1
 8005aba:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005abe:	2200      	movs	r2, #0
 8005ac0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005ac2:	7bfa      	ldrb	r2, [r7, #15]
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	440b      	add	r3, r1
 8005ad0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005ad4:	7bfa      	ldrb	r2, [r7, #15]
 8005ad6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005ad8:	7bfa      	ldrb	r2, [r7, #15]
 8005ada:	6879      	ldr	r1, [r7, #4]
 8005adc:	4613      	mov	r3, r2
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005aea:	2200      	movs	r2, #0
 8005aec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005aee:	7bfa      	ldrb	r2, [r7, #15]
 8005af0:	6879      	ldr	r1, [r7, #4]
 8005af2:	4613      	mov	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	440b      	add	r3, r1
 8005afc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b04:	7bfa      	ldrb	r2, [r7, #15]
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	4413      	add	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	440b      	add	r3, r1
 8005b12:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005b16:	2200      	movs	r2, #0
 8005b18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b1a:	7bfa      	ldrb	r2, [r7, #15]
 8005b1c:	6879      	ldr	r1, [r7, #4]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	440b      	add	r3, r1
 8005b28:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b30:	7bfb      	ldrb	r3, [r7, #15]
 8005b32:	3301      	adds	r3, #1
 8005b34:	73fb      	strb	r3, [r7, #15]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	791b      	ldrb	r3, [r3, #4]
 8005b3a:	7bfa      	ldrb	r2, [r7, #15]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d3b5      	bcc.n	8005aac <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	7c1a      	ldrb	r2, [r3, #16]
 8005b48:	f88d 2000 	strb.w	r2, [sp]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b50:	f002 fc1e 	bl	8008390 <USB_DevInit>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d005      	beq.n	8005b66 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e00c      	b.n	8005b80 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f003 fc68 	bl	800944e <USB_DevDisconnect>

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d101      	bne.n	8005ba4 <HAL_PCD_Start+0x1c>
 8005ba0:	2302      	movs	r3, #2
 8005ba2:	e022      	b.n	8005bea <HAL_PCD_Start+0x62>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d009      	beq.n	8005bcc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d105      	bne.n	8005bcc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f002 fb6f 	bl	80082b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f003 fc16 	bl	800940c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005bf2:	b590      	push	{r4, r7, lr}
 8005bf4:	b08d      	sub	sp, #52	@ 0x34
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f003 fcd4 	bl	80095b6 <USB_GetMode>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f040 848c 	bne.w	800652e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f003 fc38 	bl	8009490 <USB_ReadInterrupts>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 8482 	beq.w	800652c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	0a1b      	lsrs	r3, r3, #8
 8005c32:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f003 fc25 	bl	8009490 <USB_ReadInterrupts>
 8005c46:	4603      	mov	r3, r0
 8005c48:	f003 0302 	and.w	r3, r3, #2
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d107      	bne.n	8005c60 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695a      	ldr	r2, [r3, #20]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f002 0202 	and.w	r2, r2, #2
 8005c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f003 fc13 	bl	8009490 <USB_ReadInterrupts>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	f003 0310 	and.w	r3, r3, #16
 8005c70:	2b10      	cmp	r3, #16
 8005c72:	d161      	bne.n	8005d38 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699a      	ldr	r2, [r3, #24]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0210 	bic.w	r2, r2, #16
 8005c82:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	f003 020f 	and.w	r2, r3, #15
 8005c90:	4613      	mov	r3, r2
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005caa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005cae:	d124      	bne.n	8005cfa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d035      	beq.n	8005d28 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	091b      	lsrs	r3, r3, #4
 8005cc4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005cc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	6a38      	ldr	r0, [r7, #32]
 8005cd0:	f003 fa4a 	bl	8009168 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	091b      	lsrs	r3, r3, #4
 8005cdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ce0:	441a      	add	r2, r3
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	695a      	ldr	r2, [r3, #20]
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	091b      	lsrs	r3, r3, #4
 8005cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cf2:	441a      	add	r2, r3
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	615a      	str	r2, [r3, #20]
 8005cf8:	e016      	b.n	8005d28 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005d00:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005d04:	d110      	bne.n	8005d28 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d0c:	2208      	movs	r2, #8
 8005d0e:	4619      	mov	r1, r3
 8005d10:	6a38      	ldr	r0, [r7, #32]
 8005d12:	f003 fa29 	bl	8009168 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	695a      	ldr	r2, [r3, #20]
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	091b      	lsrs	r3, r3, #4
 8005d1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d22:	441a      	add	r2, r3
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0210 	orr.w	r2, r2, #16
 8005d36:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f003 fba7 	bl	8009490 <USB_ReadInterrupts>
 8005d42:	4603      	mov	r3, r0
 8005d44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d48:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005d4c:	f040 80a7 	bne.w	8005e9e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f003 fbac 	bl	80094b6 <USB_ReadDevAllOutEpInterrupt>
 8005d5e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005d60:	e099      	b.n	8005e96 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d64:	f003 0301 	and.w	r3, r3, #1
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 808e 	beq.w	8005e8a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	4611      	mov	r1, r2
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f003 fbd0 	bl	800951e <USB_ReadDevOutEPInterrupt>
 8005d7e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00c      	beq.n	8005da4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d96:	461a      	mov	r2, r3
 8005d98:	2301      	movs	r3, #1
 8005d9a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005d9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fea4 	bl	8006aec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00c      	beq.n	8005dc8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dba:	461a      	mov	r2, r3
 8005dbc:	2308      	movs	r3, #8
 8005dbe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005dc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 ff7a 	bl	8006cbc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	f003 0310 	and.w	r3, r3, #16
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d008      	beq.n	8005de4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dde:	461a      	mov	r2, r3
 8005de0:	2310      	movs	r3, #16
 8005de2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f003 0302 	and.w	r3, r3, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d030      	beq.n	8005e50 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005dee:	6a3b      	ldr	r3, [r7, #32]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005df6:	2b80      	cmp	r3, #128	@ 0x80
 8005df8:	d109      	bne.n	8005e0e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	69fa      	ldr	r2, [r7, #28]
 8005e04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e0c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e10:	4613      	mov	r3, r2
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	4413      	add	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	4413      	add	r3, r2
 8005e20:	3304      	adds	r3, #4
 8005e22:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	78db      	ldrb	r3, [r3, #3]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d108      	bne.n	8005e3e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	4619      	mov	r1, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f005 ffe1 	bl	800be00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d008      	beq.n	8005e6c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e66:	461a      	mov	r2, r3
 8005e68:	2320      	movs	r3, #32
 8005e6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d009      	beq.n	8005e8a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e82:	461a      	mov	r2, r3
 8005e84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005e88:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e92:	085b      	lsrs	r3, r3, #1
 8005e94:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f47f af62 	bne.w	8005d62 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f003 faf4 	bl	8009490 <USB_ReadInterrupts>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005eae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005eb2:	f040 80db 	bne.w	800606c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f003 fb15 	bl	80094ea <USB_ReadDevAllInEpInterrupt>
 8005ec0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005ec6:	e0cd      	b.n	8006064 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 80c2 	beq.w	8006058 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	4611      	mov	r1, r2
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f003 fb3b 	bl	800955a <USB_ReadDevInEPInterrupt>
 8005ee4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d057      	beq.n	8005fa0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef2:	f003 030f 	and.w	r3, r3, #15
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	69f9      	ldr	r1, [r7, #28]
 8005f0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f10:	4013      	ands	r3, r2
 8005f12:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f20:	461a      	mov	r2, r3
 8005f22:	2301      	movs	r3, #1
 8005f24:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	799b      	ldrb	r3, [r3, #6]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d132      	bne.n	8005f94 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005f2e:	6879      	ldr	r1, [r7, #4]
 8005f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f32:	4613      	mov	r3, r2
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	440b      	add	r3, r1
 8005f3c:	3320      	adds	r3, #32
 8005f3e:	6819      	ldr	r1, [r3, #0]
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f44:	4613      	mov	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4403      	add	r3, r0
 8005f4e:	331c      	adds	r3, #28
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4419      	add	r1, r3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f58:	4613      	mov	r3, r2
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4403      	add	r3, r0
 8005f62:	3320      	adds	r3, #32
 8005f64:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d113      	bne.n	8005f94 <HAL_PCD_IRQHandler+0x3a2>
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f70:	4613      	mov	r3, r2
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	440b      	add	r3, r1
 8005f7a:	3324      	adds	r3, #36	@ 0x24
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d108      	bne.n	8005f94 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	2101      	movs	r1, #1
 8005f90:	f003 fb42 	bl	8009618 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	4619      	mov	r1, r3
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f005 feb5 	bl	800bd0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d008      	beq.n	8005fbc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	2308      	movs	r3, #8
 8005fba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	f003 0310 	and.w	r3, r3, #16
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d008      	beq.n	8005fd8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	2310      	movs	r3, #16
 8005fd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d008      	beq.n	8005ff4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fee:	461a      	mov	r2, r3
 8005ff0:	2340      	movs	r3, #64	@ 0x40
 8005ff2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f003 0302 	and.w	r3, r3, #2
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d023      	beq.n	8006046 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005ffe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006000:	6a38      	ldr	r0, [r7, #32]
 8006002:	f002 fb29 	bl	8008658 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006008:	4613      	mov	r3, r2
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	4413      	add	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	3310      	adds	r3, #16
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	4413      	add	r3, r2
 8006016:	3304      	adds	r3, #4
 8006018:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	78db      	ldrb	r3, [r3, #3]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d108      	bne.n	8006034 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2200      	movs	r2, #0
 8006026:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602a:	b2db      	uxtb	r3, r3
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f005 fef8 	bl	800be24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006040:	461a      	mov	r2, r3
 8006042:	2302      	movs	r3, #2
 8006044:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006050:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fcbd 	bl	80069d2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	3301      	adds	r3, #1
 800605c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800605e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006060:	085b      	lsrs	r3, r3, #1
 8006062:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006066:	2b00      	cmp	r3, #0
 8006068:	f47f af2e 	bne.w	8005ec8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4618      	mov	r0, r3
 8006072:	f003 fa0d 	bl	8009490 <USB_ReadInterrupts>
 8006076:	4603      	mov	r3, r0
 8006078:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800607c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006080:	d122      	bne.n	80060c8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006090:	f023 0301 	bic.w	r3, r3, #1
 8006094:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800609c:	2b01      	cmp	r3, #1
 800609e:	d108      	bne.n	80060b2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80060a8:	2100      	movs	r1, #0
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fea4 	bl	8006df8 <HAL_PCDEx_LPM_Callback>
 80060b0:	e002      	b.n	80060b8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f005 fe96 	bl	800bde4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	695a      	ldr	r2, [r3, #20]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80060c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f003 f9df 	bl	8009490 <USB_ReadInterrupts>
 80060d2:	4603      	mov	r3, r0
 80060d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060dc:	d112      	bne.n	8006104 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d102      	bne.n	80060f4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f005 fe52 	bl	800bd98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695a      	ldr	r2, [r3, #20]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006102:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4618      	mov	r0, r3
 800610a:	f003 f9c1 	bl	8009490 <USB_ReadInterrupts>
 800610e:	4603      	mov	r3, r0
 8006110:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006118:	f040 80b7 	bne.w	800628a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	69fa      	ldr	r2, [r7, #28]
 8006126:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800612a:	f023 0301 	bic.w	r3, r3, #1
 800612e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2110      	movs	r1, #16
 8006136:	4618      	mov	r0, r3
 8006138:	f002 fa8e 	bl	8008658 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800613c:	2300      	movs	r3, #0
 800613e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006140:	e046      	b.n	80061d0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800614e:	461a      	mov	r2, r3
 8006150:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006154:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006166:	0151      	lsls	r1, r2, #5
 8006168:	69fa      	ldr	r2, [r7, #28]
 800616a:	440a      	add	r2, r1
 800616c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006170:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006174:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006182:	461a      	mov	r2, r3
 8006184:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006188:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800618a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800618c:	015a      	lsls	r2, r3, #5
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	4413      	add	r3, r2
 8006192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800619a:	0151      	lsls	r1, r2, #5
 800619c:	69fa      	ldr	r2, [r7, #28]
 800619e:	440a      	add	r2, r1
 80061a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80061a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80061aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061ba:	0151      	lsls	r1, r2, #5
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	440a      	add	r2, r1
 80061c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80061c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80061c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061cc:	3301      	adds	r3, #1
 80061ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	791b      	ldrb	r3, [r3, #4]
 80061d4:	461a      	mov	r2, r3
 80061d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d8:	4293      	cmp	r3, r2
 80061da:	d3b2      	bcc.n	8006142 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061e2:	69db      	ldr	r3, [r3, #28]
 80061e4:	69fa      	ldr	r2, [r7, #28]
 80061e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061ea:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80061ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	7bdb      	ldrb	r3, [r3, #15]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d016      	beq.n	8006226 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006202:	69fa      	ldr	r2, [r7, #28]
 8006204:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006208:	f043 030b 	orr.w	r3, r3, #11
 800620c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800621e:	f043 030b 	orr.w	r3, r3, #11
 8006222:	6453      	str	r3, [r2, #68]	@ 0x44
 8006224:	e015      	b.n	8006252 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006234:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006238:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800623c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	69fa      	ldr	r2, [r7, #28]
 8006248:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800624c:	f043 030b 	orr.w	r3, r3, #11
 8006250:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69fa      	ldr	r2, [r7, #28]
 800625c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006260:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006264:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6818      	ldr	r0, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006274:	461a      	mov	r2, r3
 8006276:	f003 f9cf 	bl	8009618 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	695a      	ldr	r2, [r3, #20]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006288:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f003 f8fe 	bl	8009490 <USB_ReadInterrupts>
 8006294:	4603      	mov	r3, r0
 8006296:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800629a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800629e:	d123      	bne.n	80062e8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f003 f994 	bl	80095d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f002 fa4b 	bl	800874a <USB_GetDevSpeed>
 80062b4:	4603      	mov	r3, r0
 80062b6:	461a      	mov	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681c      	ldr	r4, [r3, #0]
 80062c0:	f001 f9ca 	bl	8007658 <HAL_RCC_GetHCLKFreq>
 80062c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80062ca:	461a      	mov	r2, r3
 80062cc:	4620      	mov	r0, r4
 80062ce:	f001 ff4f 	bl	8008170 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f005 fd41 	bl	800bd5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	695a      	ldr	r2, [r3, #20]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80062e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f003 f8cf 	bl	8009490 <USB_ReadInterrupts>
 80062f2:	4603      	mov	r3, r0
 80062f4:	f003 0308 	and.w	r3, r3, #8
 80062f8:	2b08      	cmp	r3, #8
 80062fa:	d10a      	bne.n	8006312 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f005 fd1e 	bl	800bd3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	695a      	ldr	r2, [r3, #20]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f002 0208 	and.w	r2, r2, #8
 8006310:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4618      	mov	r0, r3
 8006318:	f003 f8ba 	bl	8009490 <USB_ReadInterrupts>
 800631c:	4603      	mov	r3, r0
 800631e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006322:	2b80      	cmp	r3, #128	@ 0x80
 8006324:	d123      	bne.n	800636e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800632e:	6a3b      	ldr	r3, [r7, #32]
 8006330:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006332:	2301      	movs	r3, #1
 8006334:	627b      	str	r3, [r7, #36]	@ 0x24
 8006336:	e014      	b.n	8006362 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006338:	6879      	ldr	r1, [r7, #4]
 800633a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800633c:	4613      	mov	r3, r2
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	4413      	add	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	440b      	add	r3, r1
 8006346:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d105      	bne.n	800635c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006352:	b2db      	uxtb	r3, r3
 8006354:	4619      	mov	r1, r3
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fb0a 	bl	8006970 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800635c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635e:	3301      	adds	r3, #1
 8006360:	627b      	str	r3, [r7, #36]	@ 0x24
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	791b      	ldrb	r3, [r3, #4]
 8006366:	461a      	mov	r2, r3
 8006368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636a:	4293      	cmp	r3, r2
 800636c:	d3e4      	bcc.n	8006338 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f003 f88c 	bl	8009490 <USB_ReadInterrupts>
 8006378:	4603      	mov	r3, r0
 800637a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800637e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006382:	d13c      	bne.n	80063fe <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006384:	2301      	movs	r3, #1
 8006386:	627b      	str	r3, [r7, #36]	@ 0x24
 8006388:	e02b      	b.n	80063e2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800638a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	4413      	add	r3, r2
 8006392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800639a:	6879      	ldr	r1, [r7, #4]
 800639c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800639e:	4613      	mov	r3, r2
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	4413      	add	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	440b      	add	r3, r1
 80063a8:	3318      	adds	r3, #24
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d115      	bne.n	80063dc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80063b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	da12      	bge.n	80063dc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063ba:	4613      	mov	r3, r2
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	4413      	add	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	440b      	add	r3, r1
 80063c4:	3317      	adds	r3, #23
 80063c6:	2201      	movs	r2, #1
 80063c8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	4619      	mov	r1, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 faca 	bl	8006970 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80063dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063de:	3301      	adds	r3, #1
 80063e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	791b      	ldrb	r3, [r3, #4]
 80063e6:	461a      	mov	r2, r3
 80063e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d3cd      	bcc.n	800638a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	695a      	ldr	r2, [r3, #20]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80063fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4618      	mov	r0, r3
 8006404:	f003 f844 	bl	8009490 <USB_ReadInterrupts>
 8006408:	4603      	mov	r3, r0
 800640a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800640e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006412:	d156      	bne.n	80064c2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006414:	2301      	movs	r3, #1
 8006416:	627b      	str	r3, [r7, #36]	@ 0x24
 8006418:	e045      	b.n	80064a6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800642a:	6879      	ldr	r1, [r7, #4]
 800642c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800642e:	4613      	mov	r3, r2
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	4413      	add	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	440b      	add	r3, r1
 8006438:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d12e      	bne.n	80064a0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006442:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006444:	2b00      	cmp	r3, #0
 8006446:	da2b      	bge.n	80064a0 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	0c1a      	lsrs	r2, r3, #16
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006452:	4053      	eors	r3, r2
 8006454:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006458:	2b00      	cmp	r3, #0
 800645a:	d121      	bne.n	80064a0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006460:	4613      	mov	r3, r2
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	440b      	add	r3, r1
 800646a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800646e:	2201      	movs	r2, #1
 8006470:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10a      	bne.n	80064a0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	69fa      	ldr	r2, [r7, #28]
 8006494:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006498:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800649c:	6053      	str	r3, [r2, #4]
            break;
 800649e:	e008      	b.n	80064b2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	3301      	adds	r3, #1
 80064a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	791b      	ldrb	r3, [r3, #4]
 80064aa:	461a      	mov	r2, r3
 80064ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d3b3      	bcc.n	800641a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695a      	ldr	r2, [r3, #20]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80064c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f002 ffe2 	bl	8009490 <USB_ReadInterrupts>
 80064cc:	4603      	mov	r3, r0
 80064ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80064d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064d6:	d10a      	bne.n	80064ee <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f005 fcb5 	bl	800be48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	695a      	ldr	r2, [r3, #20]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80064ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f002 ffcc 	bl	8009490 <USB_ReadInterrupts>
 80064f8:	4603      	mov	r3, r0
 80064fa:	f003 0304 	and.w	r3, r3, #4
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d115      	bne.n	800652e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	f003 0304 	and.w	r3, r3, #4
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f005 fca5 	bl	800be64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6859      	ldr	r1, [r3, #4]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	430a      	orrs	r2, r1
 8006528:	605a      	str	r2, [r3, #4]
 800652a:	e000      	b.n	800652e <HAL_PCD_IRQHandler+0x93c>
      return;
 800652c:	bf00      	nop
    }
  }
}
 800652e:	3734      	adds	r7, #52	@ 0x34
 8006530:	46bd      	mov	sp, r7
 8006532:	bd90      	pop	{r4, r7, pc}

08006534 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006546:	2b01      	cmp	r3, #1
 8006548:	d101      	bne.n	800654e <HAL_PCD_SetAddress+0x1a>
 800654a:	2302      	movs	r3, #2
 800654c:	e012      	b.n	8006574 <HAL_PCD_SetAddress+0x40>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	78fa      	ldrb	r2, [r7, #3]
 800655a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	78fa      	ldrb	r2, [r7, #3]
 8006562:	4611      	mov	r1, r2
 8006564:	4618      	mov	r0, r3
 8006566:	f002 ff2b 	bl	80093c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	4608      	mov	r0, r1
 8006586:	4611      	mov	r1, r2
 8006588:	461a      	mov	r2, r3
 800658a:	4603      	mov	r3, r0
 800658c:	70fb      	strb	r3, [r7, #3]
 800658e:	460b      	mov	r3, r1
 8006590:	803b      	strh	r3, [r7, #0]
 8006592:	4613      	mov	r3, r2
 8006594:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800659a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	da0f      	bge.n	80065c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065a2:	78fb      	ldrb	r3, [r7, #3]
 80065a4:	f003 020f 	and.w	r2, r3, #15
 80065a8:	4613      	mov	r3, r2
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	4413      	add	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	3310      	adds	r3, #16
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	4413      	add	r3, r2
 80065b6:	3304      	adds	r3, #4
 80065b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2201      	movs	r2, #1
 80065be:	705a      	strb	r2, [r3, #1]
 80065c0:	e00f      	b.n	80065e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065c2:	78fb      	ldrb	r3, [r7, #3]
 80065c4:	f003 020f 	and.w	r2, r3, #15
 80065c8:	4613      	mov	r3, r2
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	4413      	add	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	4413      	add	r3, r2
 80065d8:	3304      	adds	r3, #4
 80065da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2200      	movs	r2, #0
 80065e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80065e2:	78fb      	ldrb	r3, [r7, #3]
 80065e4:	f003 030f 	and.w	r3, r3, #15
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80065ee:	883b      	ldrh	r3, [r7, #0]
 80065f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	78ba      	ldrb	r2, [r7, #2]
 80065fc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	785b      	ldrb	r3, [r3, #1]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d004      	beq.n	8006610 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006610:	78bb      	ldrb	r3, [r7, #2]
 8006612:	2b02      	cmp	r3, #2
 8006614:	d102      	bne.n	800661c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006622:	2b01      	cmp	r3, #1
 8006624:	d101      	bne.n	800662a <HAL_PCD_EP_Open+0xae>
 8006626:	2302      	movs	r3, #2
 8006628:	e00e      	b.n	8006648 <HAL_PCD_EP_Open+0xcc>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68f9      	ldr	r1, [r7, #12]
 8006638:	4618      	mov	r0, r3
 800663a:	f002 f8ab 	bl	8008794 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006646:	7afb      	ldrb	r3, [r7, #11]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	460b      	mov	r3, r1
 800665a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800665c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006660:	2b00      	cmp	r3, #0
 8006662:	da0f      	bge.n	8006684 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	f003 020f 	and.w	r2, r3, #15
 800666a:	4613      	mov	r3, r2
 800666c:	00db      	lsls	r3, r3, #3
 800666e:	4413      	add	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	3310      	adds	r3, #16
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	4413      	add	r3, r2
 8006678:	3304      	adds	r3, #4
 800667a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2201      	movs	r2, #1
 8006680:	705a      	strb	r2, [r3, #1]
 8006682:	e00f      	b.n	80066a4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006684:	78fb      	ldrb	r3, [r7, #3]
 8006686:	f003 020f 	and.w	r2, r3, #15
 800668a:	4613      	mov	r3, r2
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	4413      	add	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	4413      	add	r3, r2
 800669a:	3304      	adds	r3, #4
 800669c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	f003 030f 	and.w	r3, r3, #15
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d101      	bne.n	80066be <HAL_PCD_EP_Close+0x6e>
 80066ba:	2302      	movs	r3, #2
 80066bc:	e00e      	b.n	80066dc <HAL_PCD_EP_Close+0x8c>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68f9      	ldr	r1, [r7, #12]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f002 f8e9 	bl	80088a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	607a      	str	r2, [r7, #4]
 80066ee:	603b      	str	r3, [r7, #0]
 80066f0:	460b      	mov	r3, r1
 80066f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80066f4:	7afb      	ldrb	r3, [r7, #11]
 80066f6:	f003 020f 	and.w	r2, r3, #15
 80066fa:	4613      	mov	r3, r2
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	4413      	add	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	4413      	add	r3, r2
 800670a:	3304      	adds	r3, #4
 800670c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	2200      	movs	r2, #0
 800671e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	2200      	movs	r2, #0
 8006724:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006726:	7afb      	ldrb	r3, [r7, #11]
 8006728:	f003 030f 	and.w	r3, r3, #15
 800672c:	b2da      	uxtb	r2, r3
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	799b      	ldrb	r3, [r3, #6]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d102      	bne.n	8006740 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6818      	ldr	r0, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	799b      	ldrb	r3, [r3, #6]
 8006748:	461a      	mov	r2, r3
 800674a:	6979      	ldr	r1, [r7, #20]
 800674c:	f002 f986 	bl	8008a5c <USB_EPStartXfer>

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	460b      	mov	r3, r1
 8006764:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006766:	78fb      	ldrb	r3, [r7, #3]
 8006768:	f003 020f 	and.w	r2, r3, #15
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	00db      	lsls	r3, r3, #3
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800677c:	681b      	ldr	r3, [r3, #0]
}
 800677e:	4618      	mov	r0, r3
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b086      	sub	sp, #24
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	603b      	str	r3, [r7, #0]
 8006796:	460b      	mov	r3, r1
 8006798:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800679a:	7afb      	ldrb	r3, [r7, #11]
 800679c:	f003 020f 	and.w	r2, r3, #15
 80067a0:	4613      	mov	r3, r2
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	4413      	add	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	3310      	adds	r3, #16
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4413      	add	r3, r2
 80067ae:	3304      	adds	r3, #4
 80067b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	2200      	movs	r2, #0
 80067c2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	2201      	movs	r2, #1
 80067c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067ca:	7afb      	ldrb	r3, [r7, #11]
 80067cc:	f003 030f 	and.w	r3, r3, #15
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	799b      	ldrb	r3, [r3, #6]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d102      	bne.n	80067e4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6818      	ldr	r0, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	799b      	ldrb	r3, [r3, #6]
 80067ec:	461a      	mov	r2, r3
 80067ee:	6979      	ldr	r1, [r7, #20]
 80067f0:	f002 f934 	bl	8008a5c <USB_EPStartXfer>

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b084      	sub	sp, #16
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	460b      	mov	r3, r1
 8006808:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800680a:	78fb      	ldrb	r3, [r7, #3]
 800680c:	f003 030f 	and.w	r3, r3, #15
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	7912      	ldrb	r2, [r2, #4]
 8006814:	4293      	cmp	r3, r2
 8006816:	d901      	bls.n	800681c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e04f      	b.n	80068bc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800681c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006820:	2b00      	cmp	r3, #0
 8006822:	da0f      	bge.n	8006844 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006824:	78fb      	ldrb	r3, [r7, #3]
 8006826:	f003 020f 	and.w	r2, r3, #15
 800682a:	4613      	mov	r3, r2
 800682c:	00db      	lsls	r3, r3, #3
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	3310      	adds	r3, #16
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	4413      	add	r3, r2
 8006838:	3304      	adds	r3, #4
 800683a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2201      	movs	r2, #1
 8006840:	705a      	strb	r2, [r3, #1]
 8006842:	e00d      	b.n	8006860 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006844:	78fa      	ldrb	r2, [r7, #3]
 8006846:	4613      	mov	r3, r2
 8006848:	00db      	lsls	r3, r3, #3
 800684a:	4413      	add	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	4413      	add	r3, r2
 8006856:	3304      	adds	r3, #4
 8006858:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2201      	movs	r2, #1
 8006864:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	b2da      	uxtb	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <HAL_PCD_EP_SetStall+0x82>
 800687c:	2302      	movs	r3, #2
 800687e:	e01d      	b.n	80068bc <HAL_PCD_EP_SetStall+0xbe>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	68f9      	ldr	r1, [r7, #12]
 800688e:	4618      	mov	r0, r3
 8006890:	f002 fcc2 	bl	8009218 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	f003 030f 	and.w	r3, r3, #15
 800689a:	2b00      	cmp	r3, #0
 800689c:	d109      	bne.n	80068b2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6818      	ldr	r0, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	7999      	ldrb	r1, [r3, #6]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80068ac:	461a      	mov	r2, r3
 80068ae:	f002 feb3 	bl	8009618 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	460b      	mov	r3, r1
 80068ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80068d0:	78fb      	ldrb	r3, [r7, #3]
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	7912      	ldrb	r2, [r2, #4]
 80068da:	4293      	cmp	r3, r2
 80068dc:	d901      	bls.n	80068e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e042      	b.n	8006968 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80068e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	da0f      	bge.n	800690a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068ea:	78fb      	ldrb	r3, [r7, #3]
 80068ec:	f003 020f 	and.w	r2, r3, #15
 80068f0:	4613      	mov	r3, r2
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	4413      	add	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	3310      	adds	r3, #16
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	4413      	add	r3, r2
 80068fe:	3304      	adds	r3, #4
 8006900:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2201      	movs	r2, #1
 8006906:	705a      	strb	r2, [r3, #1]
 8006908:	e00f      	b.n	800692a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	f003 020f 	and.w	r2, r3, #15
 8006910:	4613      	mov	r3, r2
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	4413      	add	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	4413      	add	r3, r2
 8006920:	3304      	adds	r3, #4
 8006922:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	f003 030f 	and.w	r3, r3, #15
 8006936:	b2da      	uxtb	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <HAL_PCD_EP_ClrStall+0x86>
 8006946:	2302      	movs	r3, #2
 8006948:	e00e      	b.n	8006968 <HAL_PCD_EP_ClrStall+0xa4>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68f9      	ldr	r1, [r7, #12]
 8006958:	4618      	mov	r0, r3
 800695a:	f002 fccb 	bl	80092f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800697c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006980:	2b00      	cmp	r3, #0
 8006982:	da0c      	bge.n	800699e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006984:	78fb      	ldrb	r3, [r7, #3]
 8006986:	f003 020f 	and.w	r2, r3, #15
 800698a:	4613      	mov	r3, r2
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	3310      	adds	r3, #16
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	4413      	add	r3, r2
 8006998:	3304      	adds	r3, #4
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	e00c      	b.n	80069b8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800699e:	78fb      	ldrb	r3, [r7, #3]
 80069a0:	f003 020f 	and.w	r2, r3, #15
 80069a4:	4613      	mov	r3, r2
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	4413      	add	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	4413      	add	r3, r2
 80069b4:	3304      	adds	r3, #4
 80069b6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68f9      	ldr	r1, [r7, #12]
 80069be:	4618      	mov	r0, r3
 80069c0:	f002 faea 	bl	8008f98 <USB_EPStopXfer>
 80069c4:	4603      	mov	r3, r0
 80069c6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80069c8:	7afb      	ldrb	r3, [r7, #11]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b08a      	sub	sp, #40	@ 0x28
 80069d6:	af02      	add	r7, sp, #8
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	4613      	mov	r3, r2
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	4413      	add	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	3310      	adds	r3, #16
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	4413      	add	r3, r2
 80069f6:	3304      	adds	r3, #4
 80069f8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	695a      	ldr	r2, [r3, #20]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d901      	bls.n	8006a0a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e06b      	b.n	8006ae2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	691a      	ldr	r2, [r3, #16]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d902      	bls.n	8006a26 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	3303      	adds	r3, #3
 8006a2a:	089b      	lsrs	r3, r3, #2
 8006a2c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a2e:	e02a      	b.n	8006a86 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	69fa      	ldr	r2, [r7, #28]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d902      	bls.n	8006a4c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	3303      	adds	r3, #3
 8006a50:	089b      	lsrs	r3, r3, #2
 8006a52:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	68d9      	ldr	r1, [r3, #12]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	b2da      	uxtb	r2, r3
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	4603      	mov	r3, r0
 8006a68:	6978      	ldr	r0, [r7, #20]
 8006a6a:	f002 fb3f 	bl	80090ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	68da      	ldr	r2, [r3, #12]
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	441a      	add	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	695a      	ldr	r2, [r3, #20]
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	441a      	add	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d809      	bhi.n	8006ab0 <PCD_WriteEmptyTxFifo+0xde>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	695a      	ldr	r2, [r3, #20]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d203      	bcs.n	8006ab0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1bf      	bne.n	8006a30 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	691a      	ldr	r2, [r3, #16]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d811      	bhi.n	8006ae0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ad0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	43db      	mvns	r3, r3
 8006ad6:	6939      	ldr	r1, [r7, #16]
 8006ad8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006adc:	4013      	ands	r3, r2
 8006ade:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3720      	adds	r7, #32
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b088      	sub	sp, #32
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	333c      	adds	r3, #60	@ 0x3c
 8006b04:	3304      	adds	r3, #4
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	799b      	ldrb	r3, [r3, #6]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d17b      	bne.n	8006c1a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f003 0308 	and.w	r3, r3, #8
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d015      	beq.n	8006b58 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	4a61      	ldr	r2, [pc, #388]	@ (8006cb4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	f240 80b9 	bls.w	8006ca8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 80b3 	beq.w	8006ca8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b54:	6093      	str	r3, [r2, #8]
 8006b56:	e0a7      	b.n	8006ca8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f003 0320 	and.w	r3, r3, #32
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d009      	beq.n	8006b76 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b6e:	461a      	mov	r2, r3
 8006b70:	2320      	movs	r3, #32
 8006b72:	6093      	str	r3, [r2, #8]
 8006b74:	e098      	b.n	8006ca8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f040 8093 	bne.w	8006ca8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	4a4b      	ldr	r2, [pc, #300]	@ (8006cb4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d90f      	bls.n	8006baa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00a      	beq.n	8006baa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ba6:	6093      	str	r3, [r2, #8]
 8006ba8:	e07e      	b.n	8006ca8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	4613      	mov	r3, r2
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	4413      	add	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	4413      	add	r3, r2
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a1a      	ldr	r2, [r3, #32]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	0159      	lsls	r1, r3, #5
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	440b      	add	r3, r1
 8006bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bd6:	1ad2      	subs	r2, r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d114      	bne.n	8006c0c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d109      	bne.n	8006bfe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	f002 fd0e 	bl	8009618 <USB_EP0_OutStart>
 8006bfc:	e006      	b.n	8006c0c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	441a      	add	r2, r3
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f005 f85e 	bl	800bcd4 <HAL_PCD_DataOutStageCallback>
 8006c18:	e046      	b.n	8006ca8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	4a26      	ldr	r2, [pc, #152]	@ (8006cb8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d124      	bne.n	8006c6c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c38:	461a      	mov	r2, r3
 8006c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c3e:	6093      	str	r3, [r2, #8]
 8006c40:	e032      	b.n	8006ca8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f003 0320 	and.w	r3, r3, #32
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d008      	beq.n	8006c5e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c58:	461a      	mov	r2, r3
 8006c5a:	2320      	movs	r3, #32
 8006c5c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f005 f835 	bl	800bcd4 <HAL_PCD_DataOutStageCallback>
 8006c6a:	e01d      	b.n	8006ca8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d114      	bne.n	8006c9c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	4613      	mov	r3, r2
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	4413      	add	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	440b      	add	r3, r1
 8006c80:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d108      	bne.n	8006c9c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6818      	ldr	r0, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006c94:	461a      	mov	r2, r3
 8006c96:	2100      	movs	r1, #0
 8006c98:	f002 fcbe 	bl	8009618 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f005 f816 	bl	800bcd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3720      	adds	r7, #32
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	4f54300a 	.word	0x4f54300a
 8006cb8:	4f54310a 	.word	0x4f54310a

08006cbc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	333c      	adds	r3, #60	@ 0x3c
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4a15      	ldr	r2, [pc, #84]	@ (8006d44 <PCD_EP_OutSetupPacket_int+0x88>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d90e      	bls.n	8006d10 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d009      	beq.n	8006d10 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d0e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f004 ffcd 	bl	800bcb0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4a0a      	ldr	r2, [pc, #40]	@ (8006d44 <PCD_EP_OutSetupPacket_int+0x88>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d90c      	bls.n	8006d38 <PCD_EP_OutSetupPacket_int+0x7c>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	799b      	ldrb	r3, [r3, #6]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d108      	bne.n	8006d38 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6818      	ldr	r0, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006d30:	461a      	mov	r2, r3
 8006d32:	2101      	movs	r1, #1
 8006d34:	f002 fc70 	bl	8009618 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	4f54300a 	.word	0x4f54300a

08006d48 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	460b      	mov	r3, r1
 8006d52:	70fb      	strb	r3, [r7, #3]
 8006d54:	4613      	mov	r3, r2
 8006d56:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006d60:	78fb      	ldrb	r3, [r7, #3]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d107      	bne.n	8006d76 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006d66:	883b      	ldrh	r3, [r7, #0]
 8006d68:	0419      	lsls	r1, r3, #16
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d74:	e028      	b.n	8006dc8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d7c:	0c1b      	lsrs	r3, r3, #16
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	4413      	add	r3, r2
 8006d82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006d84:	2300      	movs	r3, #0
 8006d86:	73fb      	strb	r3, [r7, #15]
 8006d88:	e00d      	b.n	8006da6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
 8006d90:	3340      	adds	r3, #64	@ 0x40
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	0c1b      	lsrs	r3, r3, #16
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
 8006da2:	3301      	adds	r3, #1
 8006da4:	73fb      	strb	r3, [r7, #15]
 8006da6:	7bfa      	ldrb	r2, [r7, #15]
 8006da8:	78fb      	ldrb	r3, [r7, #3]
 8006daa:	3b01      	subs	r3, #1
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d3ec      	bcc.n	8006d8a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006db0:	883b      	ldrh	r3, [r7, #0]
 8006db2:	0418      	lsls	r0, r3, #16
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6819      	ldr	r1, [r3, #0]
 8006db8:	78fb      	ldrb	r3, [r7, #3]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	4302      	orrs	r2, r0
 8006dc0:	3340      	adds	r3, #64	@ 0x40
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	440b      	add	r3, r1
 8006dc6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b083      	sub	sp, #12
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	460b      	mov	r3, r1
 8006de0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	887a      	ldrh	r2, [r7, #2]
 8006de8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b086      	sub	sp, #24
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e267      	b.n	80072f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d075      	beq.n	8006f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006e2e:	4b88      	ldr	r3, [pc, #544]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f003 030c 	and.w	r3, r3, #12
 8006e36:	2b04      	cmp	r3, #4
 8006e38:	d00c      	beq.n	8006e54 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e3a:	4b85      	ldr	r3, [pc, #532]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006e42:	2b08      	cmp	r3, #8
 8006e44:	d112      	bne.n	8006e6c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e46:	4b82      	ldr	r3, [pc, #520]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e52:	d10b      	bne.n	8006e6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e54:	4b7e      	ldr	r3, [pc, #504]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d05b      	beq.n	8006f18 <HAL_RCC_OscConfig+0x108>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d157      	bne.n	8006f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e242      	b.n	80072f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e74:	d106      	bne.n	8006e84 <HAL_RCC_OscConfig+0x74>
 8006e76:	4b76      	ldr	r3, [pc, #472]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a75      	ldr	r2, [pc, #468]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	e01d      	b.n	8006ec0 <HAL_RCC_OscConfig+0xb0>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e8c:	d10c      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x98>
 8006e8e:	4b70      	ldr	r3, [pc, #448]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a6f      	ldr	r2, [pc, #444]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006e94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	4b6d      	ldr	r3, [pc, #436]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a6c      	ldr	r2, [pc, #432]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	e00b      	b.n	8006ec0 <HAL_RCC_OscConfig+0xb0>
 8006ea8:	4b69      	ldr	r3, [pc, #420]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a68      	ldr	r2, [pc, #416]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	4b66      	ldr	r3, [pc, #408]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a65      	ldr	r2, [pc, #404]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006eba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d013      	beq.n	8006ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ec8:	f7fa ff52 	bl	8001d70 <HAL_GetTick>
 8006ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ece:	e008      	b.n	8006ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ed0:	f7fa ff4e 	bl	8001d70 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b64      	cmp	r3, #100	@ 0x64
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e207      	b.n	80072f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ee2:	4b5b      	ldr	r3, [pc, #364]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0f0      	beq.n	8006ed0 <HAL_RCC_OscConfig+0xc0>
 8006eee:	e014      	b.n	8006f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ef0:	f7fa ff3e 	bl	8001d70 <HAL_GetTick>
 8006ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ef6:	e008      	b.n	8006f0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ef8:	f7fa ff3a 	bl	8001d70 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	2b64      	cmp	r3, #100	@ 0x64
 8006f04:	d901      	bls.n	8006f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f06:	2303      	movs	r3, #3
 8006f08:	e1f3      	b.n	80072f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f0a:	4b51      	ldr	r3, [pc, #324]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1f0      	bne.n	8006ef8 <HAL_RCC_OscConfig+0xe8>
 8006f16:	e000      	b.n	8006f1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d063      	beq.n	8006fee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006f26:	4b4a      	ldr	r3, [pc, #296]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f003 030c 	and.w	r3, r3, #12
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00b      	beq.n	8006f4a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f32:	4b47      	ldr	r3, [pc, #284]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	d11c      	bne.n	8006f78 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f3e:	4b44      	ldr	r3, [pc, #272]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d116      	bne.n	8006f78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f4a:	4b41      	ldr	r3, [pc, #260]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d005      	beq.n	8006f62 <HAL_RCC_OscConfig+0x152>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d001      	beq.n	8006f62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e1c7      	b.n	80072f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f62:	4b3b      	ldr	r3, [pc, #236]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	4937      	ldr	r1, [pc, #220]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f76:	e03a      	b.n	8006fee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d020      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f80:	4b34      	ldr	r3, [pc, #208]	@ (8007054 <HAL_RCC_OscConfig+0x244>)
 8006f82:	2201      	movs	r2, #1
 8006f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f86:	f7fa fef3 	bl	8001d70 <HAL_GetTick>
 8006f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f8c:	e008      	b.n	8006fa0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f8e:	f7fa feef 	bl	8001d70 <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e1a8      	b.n	80072f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d0f0      	beq.n	8006f8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fac:	4b28      	ldr	r3, [pc, #160]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	00db      	lsls	r3, r3, #3
 8006fba:	4925      	ldr	r1, [pc, #148]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	600b      	str	r3, [r1, #0]
 8006fc0:	e015      	b.n	8006fee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fc2:	4b24      	ldr	r3, [pc, #144]	@ (8007054 <HAL_RCC_OscConfig+0x244>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc8:	f7fa fed2 	bl	8001d70 <HAL_GetTick>
 8006fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fce:	e008      	b.n	8006fe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fd0:	f7fa fece 	bl	8001d70 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d901      	bls.n	8006fe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e187      	b.n	80072f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1f0      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 0308 	and.w	r3, r3, #8
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d036      	beq.n	8007068 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	695b      	ldr	r3, [r3, #20]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d016      	beq.n	8007030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007002:	4b15      	ldr	r3, [pc, #84]	@ (8007058 <HAL_RCC_OscConfig+0x248>)
 8007004:	2201      	movs	r2, #1
 8007006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007008:	f7fa feb2 	bl	8001d70 <HAL_GetTick>
 800700c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800700e:	e008      	b.n	8007022 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007010:	f7fa feae 	bl	8001d70 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b02      	cmp	r3, #2
 800701c:	d901      	bls.n	8007022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e167      	b.n	80072f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007022:	4b0b      	ldr	r3, [pc, #44]	@ (8007050 <HAL_RCC_OscConfig+0x240>)
 8007024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0f0      	beq.n	8007010 <HAL_RCC_OscConfig+0x200>
 800702e:	e01b      	b.n	8007068 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007030:	4b09      	ldr	r3, [pc, #36]	@ (8007058 <HAL_RCC_OscConfig+0x248>)
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007036:	f7fa fe9b 	bl	8001d70 <HAL_GetTick>
 800703a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800703c:	e00e      	b.n	800705c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800703e:	f7fa fe97 	bl	8001d70 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	2b02      	cmp	r3, #2
 800704a:	d907      	bls.n	800705c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e150      	b.n	80072f2 <HAL_RCC_OscConfig+0x4e2>
 8007050:	40023800 	.word	0x40023800
 8007054:	42470000 	.word	0x42470000
 8007058:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800705c:	4b88      	ldr	r3, [pc, #544]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 800705e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007060:	f003 0302 	and.w	r3, r3, #2
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1ea      	bne.n	800703e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0304 	and.w	r3, r3, #4
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 8097 	beq.w	80071a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007076:	2300      	movs	r3, #0
 8007078:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800707a:	4b81      	ldr	r3, [pc, #516]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 800707c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800707e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10f      	bne.n	80070a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007086:	2300      	movs	r3, #0
 8007088:	60bb      	str	r3, [r7, #8]
 800708a:	4b7d      	ldr	r3, [pc, #500]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 800708c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800708e:	4a7c      	ldr	r2, [pc, #496]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 8007090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007094:	6413      	str	r3, [r2, #64]	@ 0x40
 8007096:	4b7a      	ldr	r3, [pc, #488]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 8007098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800709e:	60bb      	str	r3, [r7, #8]
 80070a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070a2:	2301      	movs	r3, #1
 80070a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070a6:	4b77      	ldr	r3, [pc, #476]	@ (8007284 <HAL_RCC_OscConfig+0x474>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d118      	bne.n	80070e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070b2:	4b74      	ldr	r3, [pc, #464]	@ (8007284 <HAL_RCC_OscConfig+0x474>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a73      	ldr	r2, [pc, #460]	@ (8007284 <HAL_RCC_OscConfig+0x474>)
 80070b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070be:	f7fa fe57 	bl	8001d70 <HAL_GetTick>
 80070c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070c4:	e008      	b.n	80070d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070c6:	f7fa fe53 	bl	8001d70 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d901      	bls.n	80070d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e10c      	b.n	80072f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070d8:	4b6a      	ldr	r3, [pc, #424]	@ (8007284 <HAL_RCC_OscConfig+0x474>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0f0      	beq.n	80070c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d106      	bne.n	80070fa <HAL_RCC_OscConfig+0x2ea>
 80070ec:	4b64      	ldr	r3, [pc, #400]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 80070ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070f0:	4a63      	ldr	r2, [pc, #396]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 80070f2:	f043 0301 	orr.w	r3, r3, #1
 80070f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80070f8:	e01c      	b.n	8007134 <HAL_RCC_OscConfig+0x324>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	2b05      	cmp	r3, #5
 8007100:	d10c      	bne.n	800711c <HAL_RCC_OscConfig+0x30c>
 8007102:	4b5f      	ldr	r3, [pc, #380]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 8007104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007106:	4a5e      	ldr	r2, [pc, #376]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 8007108:	f043 0304 	orr.w	r3, r3, #4
 800710c:	6713      	str	r3, [r2, #112]	@ 0x70
 800710e:	4b5c      	ldr	r3, [pc, #368]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 8007110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007112:	4a5b      	ldr	r2, [pc, #364]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 8007114:	f043 0301 	orr.w	r3, r3, #1
 8007118:	6713      	str	r3, [r2, #112]	@ 0x70
 800711a:	e00b      	b.n	8007134 <HAL_RCC_OscConfig+0x324>
 800711c:	4b58      	ldr	r3, [pc, #352]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 800711e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007120:	4a57      	ldr	r2, [pc, #348]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 8007122:	f023 0301 	bic.w	r3, r3, #1
 8007126:	6713      	str	r3, [r2, #112]	@ 0x70
 8007128:	4b55      	ldr	r3, [pc, #340]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 800712a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800712c:	4a54      	ldr	r2, [pc, #336]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 800712e:	f023 0304 	bic.w	r3, r3, #4
 8007132:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d015      	beq.n	8007168 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800713c:	f7fa fe18 	bl	8001d70 <HAL_GetTick>
 8007140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007142:	e00a      	b.n	800715a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007144:	f7fa fe14 	bl	8001d70 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007152:	4293      	cmp	r3, r2
 8007154:	d901      	bls.n	800715a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e0cb      	b.n	80072f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800715a:	4b49      	ldr	r3, [pc, #292]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 800715c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800715e:	f003 0302 	and.w	r3, r3, #2
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0ee      	beq.n	8007144 <HAL_RCC_OscConfig+0x334>
 8007166:	e014      	b.n	8007192 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007168:	f7fa fe02 	bl	8001d70 <HAL_GetTick>
 800716c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800716e:	e00a      	b.n	8007186 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007170:	f7fa fdfe 	bl	8001d70 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800717e:	4293      	cmp	r3, r2
 8007180:	d901      	bls.n	8007186 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e0b5      	b.n	80072f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007186:	4b3e      	ldr	r3, [pc, #248]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 8007188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1ee      	bne.n	8007170 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007192:	7dfb      	ldrb	r3, [r7, #23]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d105      	bne.n	80071a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007198:	4b39      	ldr	r3, [pc, #228]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 800719a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800719c:	4a38      	ldr	r2, [pc, #224]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 800719e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 80a1 	beq.w	80072f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071ae:	4b34      	ldr	r3, [pc, #208]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f003 030c 	and.w	r3, r3, #12
 80071b6:	2b08      	cmp	r3, #8
 80071b8:	d05c      	beq.n	8007274 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d141      	bne.n	8007246 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071c2:	4b31      	ldr	r3, [pc, #196]	@ (8007288 <HAL_RCC_OscConfig+0x478>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071c8:	f7fa fdd2 	bl	8001d70 <HAL_GetTick>
 80071cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ce:	e008      	b.n	80071e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071d0:	f7fa fdce 	bl	8001d70 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d901      	bls.n	80071e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e087      	b.n	80072f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071e2:	4b27      	ldr	r3, [pc, #156]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1f0      	bne.n	80071d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	69da      	ldr	r2, [r3, #28]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	431a      	orrs	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071fc:	019b      	lsls	r3, r3, #6
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007204:	085b      	lsrs	r3, r3, #1
 8007206:	3b01      	subs	r3, #1
 8007208:	041b      	lsls	r3, r3, #16
 800720a:	431a      	orrs	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007210:	061b      	lsls	r3, r3, #24
 8007212:	491b      	ldr	r1, [pc, #108]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 8007214:	4313      	orrs	r3, r2
 8007216:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007218:	4b1b      	ldr	r3, [pc, #108]	@ (8007288 <HAL_RCC_OscConfig+0x478>)
 800721a:	2201      	movs	r2, #1
 800721c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800721e:	f7fa fda7 	bl	8001d70 <HAL_GetTick>
 8007222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007224:	e008      	b.n	8007238 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007226:	f7fa fda3 	bl	8001d70 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	2b02      	cmp	r3, #2
 8007232:	d901      	bls.n	8007238 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e05c      	b.n	80072f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007238:	4b11      	ldr	r3, [pc, #68]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d0f0      	beq.n	8007226 <HAL_RCC_OscConfig+0x416>
 8007244:	e054      	b.n	80072f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007246:	4b10      	ldr	r3, [pc, #64]	@ (8007288 <HAL_RCC_OscConfig+0x478>)
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800724c:	f7fa fd90 	bl	8001d70 <HAL_GetTick>
 8007250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007252:	e008      	b.n	8007266 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007254:	f7fa fd8c 	bl	8001d70 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	2b02      	cmp	r3, #2
 8007260:	d901      	bls.n	8007266 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e045      	b.n	80072f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007266:	4b06      	ldr	r3, [pc, #24]	@ (8007280 <HAL_RCC_OscConfig+0x470>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1f0      	bne.n	8007254 <HAL_RCC_OscConfig+0x444>
 8007272:	e03d      	b.n	80072f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d107      	bne.n	800728c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e038      	b.n	80072f2 <HAL_RCC_OscConfig+0x4e2>
 8007280:	40023800 	.word	0x40023800
 8007284:	40007000 	.word	0x40007000
 8007288:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800728c:	4b1b      	ldr	r3, [pc, #108]	@ (80072fc <HAL_RCC_OscConfig+0x4ec>)
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d028      	beq.n	80072ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d121      	bne.n	80072ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d11a      	bne.n	80072ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80072bc:	4013      	ands	r3, r2
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80072c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d111      	bne.n	80072ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d2:	085b      	lsrs	r3, r3, #1
 80072d4:	3b01      	subs	r3, #1
 80072d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072d8:	429a      	cmp	r2, r3
 80072da:	d107      	bne.n	80072ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d001      	beq.n	80072f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e000      	b.n	80072f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	40023800 	.word	0x40023800

08007300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e0cc      	b.n	80074ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007314:	4b68      	ldr	r3, [pc, #416]	@ (80074b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0307 	and.w	r3, r3, #7
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	429a      	cmp	r2, r3
 8007320:	d90c      	bls.n	800733c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007322:	4b65      	ldr	r3, [pc, #404]	@ (80074b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	b2d2      	uxtb	r2, r2
 8007328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800732a:	4b63      	ldr	r3, [pc, #396]	@ (80074b8 <HAL_RCC_ClockConfig+0x1b8>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0307 	and.w	r3, r3, #7
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	429a      	cmp	r2, r3
 8007336:	d001      	beq.n	800733c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e0b8      	b.n	80074ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d020      	beq.n	800738a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b00      	cmp	r3, #0
 8007352:	d005      	beq.n	8007360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007354:	4b59      	ldr	r3, [pc, #356]	@ (80074bc <HAL_RCC_ClockConfig+0x1bc>)
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	4a58      	ldr	r2, [pc, #352]	@ (80074bc <HAL_RCC_ClockConfig+0x1bc>)
 800735a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800735e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	2b00      	cmp	r3, #0
 800736a:	d005      	beq.n	8007378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800736c:	4b53      	ldr	r3, [pc, #332]	@ (80074bc <HAL_RCC_ClockConfig+0x1bc>)
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	4a52      	ldr	r2, [pc, #328]	@ (80074bc <HAL_RCC_ClockConfig+0x1bc>)
 8007372:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007378:	4b50      	ldr	r3, [pc, #320]	@ (80074bc <HAL_RCC_ClockConfig+0x1bc>)
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	494d      	ldr	r1, [pc, #308]	@ (80074bc <HAL_RCC_ClockConfig+0x1bc>)
 8007386:	4313      	orrs	r3, r2
 8007388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d044      	beq.n	8007420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d107      	bne.n	80073ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800739e:	4b47      	ldr	r3, [pc, #284]	@ (80074bc <HAL_RCC_ClockConfig+0x1bc>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d119      	bne.n	80073de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	e07f      	b.n	80074ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d003      	beq.n	80073be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073ba:	2b03      	cmp	r3, #3
 80073bc:	d107      	bne.n	80073ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073be:	4b3f      	ldr	r3, [pc, #252]	@ (80074bc <HAL_RCC_ClockConfig+0x1bc>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d109      	bne.n	80073de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e06f      	b.n	80074ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073ce:	4b3b      	ldr	r3, [pc, #236]	@ (80074bc <HAL_RCC_ClockConfig+0x1bc>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0302 	and.w	r3, r3, #2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e067      	b.n	80074ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073de:	4b37      	ldr	r3, [pc, #220]	@ (80074bc <HAL_RCC_ClockConfig+0x1bc>)
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f023 0203 	bic.w	r2, r3, #3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	4934      	ldr	r1, [pc, #208]	@ (80074bc <HAL_RCC_ClockConfig+0x1bc>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80073f0:	f7fa fcbe 	bl	8001d70 <HAL_GetTick>
 80073f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073f6:	e00a      	b.n	800740e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073f8:	f7fa fcba 	bl	8001d70 <HAL_GetTick>
 80073fc:	4602      	mov	r2, r0
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	1ad3      	subs	r3, r2, r3
 8007402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007406:	4293      	cmp	r3, r2
 8007408:	d901      	bls.n	800740e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	e04f      	b.n	80074ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800740e:	4b2b      	ldr	r3, [pc, #172]	@ (80074bc <HAL_RCC_ClockConfig+0x1bc>)
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f003 020c 	and.w	r2, r3, #12
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	429a      	cmp	r2, r3
 800741e:	d1eb      	bne.n	80073f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007420:	4b25      	ldr	r3, [pc, #148]	@ (80074b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0307 	and.w	r3, r3, #7
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	429a      	cmp	r2, r3
 800742c:	d20c      	bcs.n	8007448 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800742e:	4b22      	ldr	r3, [pc, #136]	@ (80074b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007430:	683a      	ldr	r2, [r7, #0]
 8007432:	b2d2      	uxtb	r2, r2
 8007434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007436:	4b20      	ldr	r3, [pc, #128]	@ (80074b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0307 	and.w	r3, r3, #7
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	429a      	cmp	r2, r3
 8007442:	d001      	beq.n	8007448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e032      	b.n	80074ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0304 	and.w	r3, r3, #4
 8007450:	2b00      	cmp	r3, #0
 8007452:	d008      	beq.n	8007466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007454:	4b19      	ldr	r3, [pc, #100]	@ (80074bc <HAL_RCC_ClockConfig+0x1bc>)
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	4916      	ldr	r1, [pc, #88]	@ (80074bc <HAL_RCC_ClockConfig+0x1bc>)
 8007462:	4313      	orrs	r3, r2
 8007464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0308 	and.w	r3, r3, #8
 800746e:	2b00      	cmp	r3, #0
 8007470:	d009      	beq.n	8007486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007472:	4b12      	ldr	r3, [pc, #72]	@ (80074bc <HAL_RCC_ClockConfig+0x1bc>)
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	00db      	lsls	r3, r3, #3
 8007480:	490e      	ldr	r1, [pc, #56]	@ (80074bc <HAL_RCC_ClockConfig+0x1bc>)
 8007482:	4313      	orrs	r3, r2
 8007484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007486:	f000 f821 	bl	80074cc <HAL_RCC_GetSysClockFreq>
 800748a:	4602      	mov	r2, r0
 800748c:	4b0b      	ldr	r3, [pc, #44]	@ (80074bc <HAL_RCC_ClockConfig+0x1bc>)
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	091b      	lsrs	r3, r3, #4
 8007492:	f003 030f 	and.w	r3, r3, #15
 8007496:	490a      	ldr	r1, [pc, #40]	@ (80074c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007498:	5ccb      	ldrb	r3, [r1, r3]
 800749a:	fa22 f303 	lsr.w	r3, r2, r3
 800749e:	4a09      	ldr	r2, [pc, #36]	@ (80074c4 <HAL_RCC_ClockConfig+0x1c4>)
 80074a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80074a2:	4b09      	ldr	r3, [pc, #36]	@ (80074c8 <HAL_RCC_ClockConfig+0x1c8>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7fa fc1e 	bl	8001ce8 <HAL_InitTick>

  return HAL_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	40023c00 	.word	0x40023c00
 80074bc:	40023800 	.word	0x40023800
 80074c0:	0800d064 	.word	0x0800d064
 80074c4:	20000034 	.word	0x20000034
 80074c8:	20000038 	.word	0x20000038

080074cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074d0:	b090      	sub	sp, #64	@ 0x40
 80074d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80074d8:	2300      	movs	r3, #0
 80074da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80074e0:	2300      	movs	r3, #0
 80074e2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074e4:	4b59      	ldr	r3, [pc, #356]	@ (800764c <HAL_RCC_GetSysClockFreq+0x180>)
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f003 030c 	and.w	r3, r3, #12
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d00d      	beq.n	800750c <HAL_RCC_GetSysClockFreq+0x40>
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	f200 80a1 	bhi.w	8007638 <HAL_RCC_GetSysClockFreq+0x16c>
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d002      	beq.n	8007500 <HAL_RCC_GetSysClockFreq+0x34>
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d003      	beq.n	8007506 <HAL_RCC_GetSysClockFreq+0x3a>
 80074fe:	e09b      	b.n	8007638 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007500:	4b53      	ldr	r3, [pc, #332]	@ (8007650 <HAL_RCC_GetSysClockFreq+0x184>)
 8007502:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007504:	e09b      	b.n	800763e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007506:	4b53      	ldr	r3, [pc, #332]	@ (8007654 <HAL_RCC_GetSysClockFreq+0x188>)
 8007508:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800750a:	e098      	b.n	800763e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800750c:	4b4f      	ldr	r3, [pc, #316]	@ (800764c <HAL_RCC_GetSysClockFreq+0x180>)
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007514:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007516:	4b4d      	ldr	r3, [pc, #308]	@ (800764c <HAL_RCC_GetSysClockFreq+0x180>)
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d028      	beq.n	8007574 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007522:	4b4a      	ldr	r3, [pc, #296]	@ (800764c <HAL_RCC_GetSysClockFreq+0x180>)
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	099b      	lsrs	r3, r3, #6
 8007528:	2200      	movs	r2, #0
 800752a:	623b      	str	r3, [r7, #32]
 800752c:	627a      	str	r2, [r7, #36]	@ 0x24
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007534:	2100      	movs	r1, #0
 8007536:	4b47      	ldr	r3, [pc, #284]	@ (8007654 <HAL_RCC_GetSysClockFreq+0x188>)
 8007538:	fb03 f201 	mul.w	r2, r3, r1
 800753c:	2300      	movs	r3, #0
 800753e:	fb00 f303 	mul.w	r3, r0, r3
 8007542:	4413      	add	r3, r2
 8007544:	4a43      	ldr	r2, [pc, #268]	@ (8007654 <HAL_RCC_GetSysClockFreq+0x188>)
 8007546:	fba0 1202 	umull	r1, r2, r0, r2
 800754a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800754c:	460a      	mov	r2, r1
 800754e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007550:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007552:	4413      	add	r3, r2
 8007554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007558:	2200      	movs	r2, #0
 800755a:	61bb      	str	r3, [r7, #24]
 800755c:	61fa      	str	r2, [r7, #28]
 800755e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007562:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007566:	f7f8 fe37 	bl	80001d8 <__aeabi_uldivmod>
 800756a:	4602      	mov	r2, r0
 800756c:	460b      	mov	r3, r1
 800756e:	4613      	mov	r3, r2
 8007570:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007572:	e053      	b.n	800761c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007574:	4b35      	ldr	r3, [pc, #212]	@ (800764c <HAL_RCC_GetSysClockFreq+0x180>)
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	099b      	lsrs	r3, r3, #6
 800757a:	2200      	movs	r2, #0
 800757c:	613b      	str	r3, [r7, #16]
 800757e:	617a      	str	r2, [r7, #20]
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007586:	f04f 0b00 	mov.w	fp, #0
 800758a:	4652      	mov	r2, sl
 800758c:	465b      	mov	r3, fp
 800758e:	f04f 0000 	mov.w	r0, #0
 8007592:	f04f 0100 	mov.w	r1, #0
 8007596:	0159      	lsls	r1, r3, #5
 8007598:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800759c:	0150      	lsls	r0, r2, #5
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	ebb2 080a 	subs.w	r8, r2, sl
 80075a6:	eb63 090b 	sbc.w	r9, r3, fp
 80075aa:	f04f 0200 	mov.w	r2, #0
 80075ae:	f04f 0300 	mov.w	r3, #0
 80075b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80075b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80075ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80075be:	ebb2 0408 	subs.w	r4, r2, r8
 80075c2:	eb63 0509 	sbc.w	r5, r3, r9
 80075c6:	f04f 0200 	mov.w	r2, #0
 80075ca:	f04f 0300 	mov.w	r3, #0
 80075ce:	00eb      	lsls	r3, r5, #3
 80075d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075d4:	00e2      	lsls	r2, r4, #3
 80075d6:	4614      	mov	r4, r2
 80075d8:	461d      	mov	r5, r3
 80075da:	eb14 030a 	adds.w	r3, r4, sl
 80075de:	603b      	str	r3, [r7, #0]
 80075e0:	eb45 030b 	adc.w	r3, r5, fp
 80075e4:	607b      	str	r3, [r7, #4]
 80075e6:	f04f 0200 	mov.w	r2, #0
 80075ea:	f04f 0300 	mov.w	r3, #0
 80075ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80075f2:	4629      	mov	r1, r5
 80075f4:	028b      	lsls	r3, r1, #10
 80075f6:	4621      	mov	r1, r4
 80075f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80075fc:	4621      	mov	r1, r4
 80075fe:	028a      	lsls	r2, r1, #10
 8007600:	4610      	mov	r0, r2
 8007602:	4619      	mov	r1, r3
 8007604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007606:	2200      	movs	r2, #0
 8007608:	60bb      	str	r3, [r7, #8]
 800760a:	60fa      	str	r2, [r7, #12]
 800760c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007610:	f7f8 fde2 	bl	80001d8 <__aeabi_uldivmod>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	4613      	mov	r3, r2
 800761a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800761c:	4b0b      	ldr	r3, [pc, #44]	@ (800764c <HAL_RCC_GetSysClockFreq+0x180>)
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	0c1b      	lsrs	r3, r3, #16
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	3301      	adds	r3, #1
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800762c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800762e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007630:	fbb2 f3f3 	udiv	r3, r2, r3
 8007634:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007636:	e002      	b.n	800763e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007638:	4b05      	ldr	r3, [pc, #20]	@ (8007650 <HAL_RCC_GetSysClockFreq+0x184>)
 800763a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800763c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800763e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007640:	4618      	mov	r0, r3
 8007642:	3740      	adds	r7, #64	@ 0x40
 8007644:	46bd      	mov	sp, r7
 8007646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800764a:	bf00      	nop
 800764c:	40023800 	.word	0x40023800
 8007650:	00f42400 	.word	0x00f42400
 8007654:	017d7840 	.word	0x017d7840

08007658 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007658:	b480      	push	{r7}
 800765a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800765c:	4b03      	ldr	r3, [pc, #12]	@ (800766c <HAL_RCC_GetHCLKFreq+0x14>)
 800765e:	681b      	ldr	r3, [r3, #0]
}
 8007660:	4618      	mov	r0, r3
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	20000034 	.word	0x20000034

08007670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007674:	f7ff fff0 	bl	8007658 <HAL_RCC_GetHCLKFreq>
 8007678:	4602      	mov	r2, r0
 800767a:	4b05      	ldr	r3, [pc, #20]	@ (8007690 <HAL_RCC_GetPCLK1Freq+0x20>)
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	0a9b      	lsrs	r3, r3, #10
 8007680:	f003 0307 	and.w	r3, r3, #7
 8007684:	4903      	ldr	r1, [pc, #12]	@ (8007694 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007686:	5ccb      	ldrb	r3, [r1, r3]
 8007688:	fa22 f303 	lsr.w	r3, r2, r3
}
 800768c:	4618      	mov	r0, r3
 800768e:	bd80      	pop	{r7, pc}
 8007690:	40023800 	.word	0x40023800
 8007694:	0800d074 	.word	0x0800d074

08007698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e041      	b.n	800772e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076b0:	b2db      	uxtb	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d106      	bne.n	80076c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7fa f9d6 	bl	8001a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3304      	adds	r3, #4
 80076d4:	4619      	mov	r1, r3
 80076d6:	4610      	mov	r0, r2
 80076d8:	f000 fab2 	bl	8007c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b01      	cmp	r3, #1
 800774a:	d001      	beq.n	8007750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e044      	b.n	80077da <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2202      	movs	r2, #2
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 0201 	orr.w	r2, r2, #1
 8007766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a1e      	ldr	r2, [pc, #120]	@ (80077e8 <HAL_TIM_Base_Start_IT+0xb0>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d018      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x6c>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800777a:	d013      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x6c>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a1a      	ldr	r2, [pc, #104]	@ (80077ec <HAL_TIM_Base_Start_IT+0xb4>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d00e      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x6c>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a19      	ldr	r2, [pc, #100]	@ (80077f0 <HAL_TIM_Base_Start_IT+0xb8>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d009      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x6c>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a17      	ldr	r2, [pc, #92]	@ (80077f4 <HAL_TIM_Base_Start_IT+0xbc>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d004      	beq.n	80077a4 <HAL_TIM_Base_Start_IT+0x6c>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a16      	ldr	r2, [pc, #88]	@ (80077f8 <HAL_TIM_Base_Start_IT+0xc0>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d111      	bne.n	80077c8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f003 0307 	and.w	r3, r3, #7
 80077ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2b06      	cmp	r3, #6
 80077b4:	d010      	beq.n	80077d8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f042 0201 	orr.w	r2, r2, #1
 80077c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077c6:	e007      	b.n	80077d8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0201 	orr.w	r2, r2, #1
 80077d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	40010000 	.word	0x40010000
 80077ec:	40000400 	.word	0x40000400
 80077f0:	40000800 	.word	0x40000800
 80077f4:	40000c00 	.word	0x40000c00
 80077f8:	40014000 	.word	0x40014000

080077fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	f003 0302 	and.w	r3, r3, #2
 800781a:	2b00      	cmp	r3, #0
 800781c:	d020      	beq.n	8007860 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f003 0302 	and.w	r3, r3, #2
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01b      	beq.n	8007860 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f06f 0202 	mvn.w	r2, #2
 8007830:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	f003 0303 	and.w	r3, r3, #3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f9db 	bl	8007c02 <HAL_TIM_IC_CaptureCallback>
 800784c:	e005      	b.n	800785a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f9cd 	bl	8007bee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f9de 	bl	8007c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f003 0304 	and.w	r3, r3, #4
 8007866:	2b00      	cmp	r3, #0
 8007868:	d020      	beq.n	80078ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	2b00      	cmp	r3, #0
 8007872:	d01b      	beq.n	80078ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f06f 0204 	mvn.w	r2, #4
 800787c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2202      	movs	r2, #2
 8007882:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f9b5 	bl	8007c02 <HAL_TIM_IC_CaptureCallback>
 8007898:	e005      	b.n	80078a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f9a7 	bl	8007bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f9b8 	bl	8007c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	f003 0308 	and.w	r3, r3, #8
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d020      	beq.n	80078f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f003 0308 	and.w	r3, r3, #8
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d01b      	beq.n	80078f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f06f 0208 	mvn.w	r2, #8
 80078c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2204      	movs	r2, #4
 80078ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f98f 	bl	8007c02 <HAL_TIM_IC_CaptureCallback>
 80078e4:	e005      	b.n	80078f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f981 	bl	8007bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f992 	bl	8007c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	f003 0310 	and.w	r3, r3, #16
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d020      	beq.n	8007944 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f003 0310 	and.w	r3, r3, #16
 8007908:	2b00      	cmp	r3, #0
 800790a:	d01b      	beq.n	8007944 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f06f 0210 	mvn.w	r2, #16
 8007914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2208      	movs	r2, #8
 800791a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	69db      	ldr	r3, [r3, #28]
 8007922:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f969 	bl	8007c02 <HAL_TIM_IC_CaptureCallback>
 8007930:	e005      	b.n	800793e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f95b 	bl	8007bee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 f96c 	bl	8007c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00c      	beq.n	8007968 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f003 0301 	and.w	r3, r3, #1
 8007954:	2b00      	cmp	r3, #0
 8007956:	d007      	beq.n	8007968 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f06f 0201 	mvn.w	r2, #1
 8007960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7f8 fdfe 	bl	8000564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00c      	beq.n	800798c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007978:	2b00      	cmp	r3, #0
 800797a:	d007      	beq.n	800798c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fb84 	bl	8008094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00c      	beq.n	80079b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800799c:	2b00      	cmp	r3, #0
 800799e:	d007      	beq.n	80079b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80079a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f93d 	bl	8007c2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	f003 0320 	and.w	r3, r3, #32
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00c      	beq.n	80079d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f003 0320 	and.w	r3, r3, #32
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d007      	beq.n	80079d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f06f 0220 	mvn.w	r2, #32
 80079cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fb56 	bl	8008080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079d4:	bf00      	nop
 80079d6:	3710      	adds	r7, #16
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d101      	bne.n	80079f8 <HAL_TIM_ConfigClockSource+0x1c>
 80079f4:	2302      	movs	r3, #2
 80079f6:	e0b4      	b.n	8007b62 <HAL_TIM_ConfigClockSource+0x186>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a30:	d03e      	beq.n	8007ab0 <HAL_TIM_ConfigClockSource+0xd4>
 8007a32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a36:	f200 8087 	bhi.w	8007b48 <HAL_TIM_ConfigClockSource+0x16c>
 8007a3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a3e:	f000 8086 	beq.w	8007b4e <HAL_TIM_ConfigClockSource+0x172>
 8007a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a46:	d87f      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x16c>
 8007a48:	2b70      	cmp	r3, #112	@ 0x70
 8007a4a:	d01a      	beq.n	8007a82 <HAL_TIM_ConfigClockSource+0xa6>
 8007a4c:	2b70      	cmp	r3, #112	@ 0x70
 8007a4e:	d87b      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x16c>
 8007a50:	2b60      	cmp	r3, #96	@ 0x60
 8007a52:	d050      	beq.n	8007af6 <HAL_TIM_ConfigClockSource+0x11a>
 8007a54:	2b60      	cmp	r3, #96	@ 0x60
 8007a56:	d877      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x16c>
 8007a58:	2b50      	cmp	r3, #80	@ 0x50
 8007a5a:	d03c      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0xfa>
 8007a5c:	2b50      	cmp	r3, #80	@ 0x50
 8007a5e:	d873      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x16c>
 8007a60:	2b40      	cmp	r3, #64	@ 0x40
 8007a62:	d058      	beq.n	8007b16 <HAL_TIM_ConfigClockSource+0x13a>
 8007a64:	2b40      	cmp	r3, #64	@ 0x40
 8007a66:	d86f      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x16c>
 8007a68:	2b30      	cmp	r3, #48	@ 0x30
 8007a6a:	d064      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0x15a>
 8007a6c:	2b30      	cmp	r3, #48	@ 0x30
 8007a6e:	d86b      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x16c>
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	d060      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0x15a>
 8007a74:	2b20      	cmp	r3, #32
 8007a76:	d867      	bhi.n	8007b48 <HAL_TIM_ConfigClockSource+0x16c>
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d05c      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0x15a>
 8007a7c:	2b10      	cmp	r3, #16
 8007a7e:	d05a      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0x15a>
 8007a80:	e062      	b.n	8007b48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a92:	f000 fa66 	bl	8007f62 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	609a      	str	r2, [r3, #8]
      break;
 8007aae:	e04f      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ac0:	f000 fa4f 	bl	8007f62 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689a      	ldr	r2, [r3, #8]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ad2:	609a      	str	r2, [r3, #8]
      break;
 8007ad4:	e03c      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	f000 f9c3 	bl	8007e6e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2150      	movs	r1, #80	@ 0x50
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 fa1c 	bl	8007f2c <TIM_ITRx_SetConfig>
      break;
 8007af4:	e02c      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b02:	461a      	mov	r2, r3
 8007b04:	f000 f9e2 	bl	8007ecc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2160      	movs	r1, #96	@ 0x60
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f000 fa0c 	bl	8007f2c <TIM_ITRx_SetConfig>
      break;
 8007b14:	e01c      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b22:	461a      	mov	r2, r3
 8007b24:	f000 f9a3 	bl	8007e6e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2140      	movs	r1, #64	@ 0x40
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 f9fc 	bl	8007f2c <TIM_ITRx_SetConfig>
      break;
 8007b34:	e00c      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4619      	mov	r1, r3
 8007b40:	4610      	mov	r0, r2
 8007b42:	f000 f9f3 	bl	8007f2c <TIM_ITRx_SetConfig>
      break;
 8007b46:	e003      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007b4c:	e000      	b.n	8007b50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b082      	sub	sp, #8
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d101      	bne.n	8007b82 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007b7e:	2302      	movs	r3, #2
 8007b80:	e031      	b.n	8007be6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f8d9 	bl	8007d4c <TIM_SlaveTimer_SetConfig>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d009      	beq.n	8007bb4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e018      	b.n	8007be6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68da      	ldr	r2, [r3, #12]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bc2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007bd2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b083      	sub	sp, #12
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c02:	b480      	push	{r7}
 8007c04:	b083      	sub	sp, #12
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c0a:	bf00      	nop
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c32:	bf00      	nop
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
	...

08007c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a37      	ldr	r2, [pc, #220]	@ (8007d30 <TIM_Base_SetConfig+0xf0>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d00f      	beq.n	8007c78 <TIM_Base_SetConfig+0x38>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c5e:	d00b      	beq.n	8007c78 <TIM_Base_SetConfig+0x38>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a34      	ldr	r2, [pc, #208]	@ (8007d34 <TIM_Base_SetConfig+0xf4>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d007      	beq.n	8007c78 <TIM_Base_SetConfig+0x38>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a33      	ldr	r2, [pc, #204]	@ (8007d38 <TIM_Base_SetConfig+0xf8>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d003      	beq.n	8007c78 <TIM_Base_SetConfig+0x38>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a32      	ldr	r2, [pc, #200]	@ (8007d3c <TIM_Base_SetConfig+0xfc>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d108      	bne.n	8007c8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a28      	ldr	r2, [pc, #160]	@ (8007d30 <TIM_Base_SetConfig+0xf0>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d01b      	beq.n	8007cca <TIM_Base_SetConfig+0x8a>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c98:	d017      	beq.n	8007cca <TIM_Base_SetConfig+0x8a>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a25      	ldr	r2, [pc, #148]	@ (8007d34 <TIM_Base_SetConfig+0xf4>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d013      	beq.n	8007cca <TIM_Base_SetConfig+0x8a>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a24      	ldr	r2, [pc, #144]	@ (8007d38 <TIM_Base_SetConfig+0xf8>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d00f      	beq.n	8007cca <TIM_Base_SetConfig+0x8a>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a23      	ldr	r2, [pc, #140]	@ (8007d3c <TIM_Base_SetConfig+0xfc>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d00b      	beq.n	8007cca <TIM_Base_SetConfig+0x8a>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a22      	ldr	r2, [pc, #136]	@ (8007d40 <TIM_Base_SetConfig+0x100>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d007      	beq.n	8007cca <TIM_Base_SetConfig+0x8a>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a21      	ldr	r2, [pc, #132]	@ (8007d44 <TIM_Base_SetConfig+0x104>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d003      	beq.n	8007cca <TIM_Base_SetConfig+0x8a>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	4a20      	ldr	r2, [pc, #128]	@ (8007d48 <TIM_Base_SetConfig+0x108>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d108      	bne.n	8007cdc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	689a      	ldr	r2, [r3, #8]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a0c      	ldr	r2, [pc, #48]	@ (8007d30 <TIM_Base_SetConfig+0xf0>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d103      	bne.n	8007d0a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	691a      	ldr	r2, [r3, #16]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f043 0204 	orr.w	r2, r3, #4
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	601a      	str	r2, [r3, #0]
}
 8007d22:	bf00      	nop
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	40010000 	.word	0x40010000
 8007d34:	40000400 	.word	0x40000400
 8007d38:	40000800 	.word	0x40000800
 8007d3c:	40000c00 	.word	0x40000c00
 8007d40:	40014000 	.word	0x40014000
 8007d44:	40014400 	.word	0x40014400
 8007d48:	40014800 	.word	0x40014800

08007d4c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d68:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	f023 0307 	bic.w	r3, r3, #7
 8007d7a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	2b70      	cmp	r3, #112	@ 0x70
 8007d94:	d01a      	beq.n	8007dcc <TIM_SlaveTimer_SetConfig+0x80>
 8007d96:	2b70      	cmp	r3, #112	@ 0x70
 8007d98:	d860      	bhi.n	8007e5c <TIM_SlaveTimer_SetConfig+0x110>
 8007d9a:	2b60      	cmp	r3, #96	@ 0x60
 8007d9c:	d054      	beq.n	8007e48 <TIM_SlaveTimer_SetConfig+0xfc>
 8007d9e:	2b60      	cmp	r3, #96	@ 0x60
 8007da0:	d85c      	bhi.n	8007e5c <TIM_SlaveTimer_SetConfig+0x110>
 8007da2:	2b50      	cmp	r3, #80	@ 0x50
 8007da4:	d046      	beq.n	8007e34 <TIM_SlaveTimer_SetConfig+0xe8>
 8007da6:	2b50      	cmp	r3, #80	@ 0x50
 8007da8:	d858      	bhi.n	8007e5c <TIM_SlaveTimer_SetConfig+0x110>
 8007daa:	2b40      	cmp	r3, #64	@ 0x40
 8007dac:	d019      	beq.n	8007de2 <TIM_SlaveTimer_SetConfig+0x96>
 8007dae:	2b40      	cmp	r3, #64	@ 0x40
 8007db0:	d854      	bhi.n	8007e5c <TIM_SlaveTimer_SetConfig+0x110>
 8007db2:	2b30      	cmp	r3, #48	@ 0x30
 8007db4:	d055      	beq.n	8007e62 <TIM_SlaveTimer_SetConfig+0x116>
 8007db6:	2b30      	cmp	r3, #48	@ 0x30
 8007db8:	d850      	bhi.n	8007e5c <TIM_SlaveTimer_SetConfig+0x110>
 8007dba:	2b20      	cmp	r3, #32
 8007dbc:	d051      	beq.n	8007e62 <TIM_SlaveTimer_SetConfig+0x116>
 8007dbe:	2b20      	cmp	r3, #32
 8007dc0:	d84c      	bhi.n	8007e5c <TIM_SlaveTimer_SetConfig+0x110>
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d04d      	beq.n	8007e62 <TIM_SlaveTimer_SetConfig+0x116>
 8007dc6:	2b10      	cmp	r3, #16
 8007dc8:	d04b      	beq.n	8007e62 <TIM_SlaveTimer_SetConfig+0x116>
 8007dca:	e047      	b.n	8007e5c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007ddc:	f000 f8c1 	bl	8007f62 <TIM_ETR_SetConfig>
      break;
 8007de0:	e040      	b.n	8007e64 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b05      	cmp	r3, #5
 8007de8:	d101      	bne.n	8007dee <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e03b      	b.n	8007e66 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6a1a      	ldr	r2, [r3, #32]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 0201 	bic.w	r2, r2, #1
 8007e04:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e14:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	011b      	lsls	r3, r3, #4
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	621a      	str	r2, [r3, #32]
      break;
 8007e32:	e017      	b.n	8007e64 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e40:	461a      	mov	r2, r3
 8007e42:	f000 f814 	bl	8007e6e <TIM_TI1_ConfigInputStage>
      break;
 8007e46:	e00d      	b.n	8007e64 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e54:	461a      	mov	r2, r3
 8007e56:	f000 f839 	bl	8007ecc <TIM_TI2_ConfigInputStage>
      break;
 8007e5a:	e003      	b.n	8007e64 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e60:	e000      	b.n	8007e64 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007e62:	bf00      	nop
  }

  return status;
 8007e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3718      	adds	r7, #24
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b087      	sub	sp, #28
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	60f8      	str	r0, [r7, #12]
 8007e76:	60b9      	str	r1, [r7, #8]
 8007e78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	f023 0201 	bic.w	r2, r3, #1
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	011b      	lsls	r3, r3, #4
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	f023 030a 	bic.w	r3, r3, #10
 8007eaa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	621a      	str	r2, [r3, #32]
}
 8007ec0:	bf00      	nop
 8007ec2:	371c      	adds	r7, #28
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	f023 0210 	bic.w	r2, r3, #16
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	031b      	lsls	r3, r3, #12
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007f08:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	011b      	lsls	r3, r3, #4
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	621a      	str	r2, [r3, #32]
}
 8007f20:	bf00      	nop
 8007f22:	371c      	adds	r7, #28
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	f043 0307 	orr.w	r3, r3, #7
 8007f4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	609a      	str	r2, [r3, #8]
}
 8007f56:	bf00      	nop
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b087      	sub	sp, #28
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	60f8      	str	r0, [r7, #12]
 8007f6a:	60b9      	str	r1, [r7, #8]
 8007f6c:	607a      	str	r2, [r7, #4]
 8007f6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	689b      	ldr	r3, [r3, #8]
 8007f74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	021a      	lsls	r2, r3, #8
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	431a      	orrs	r2, r3
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	697a      	ldr	r2, [r7, #20]
 8007f94:	609a      	str	r2, [r3, #8]
}
 8007f96:	bf00      	nop
 8007f98:	371c      	adds	r7, #28
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
	...

08007fa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d101      	bne.n	8007fbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fb8:	2302      	movs	r3, #2
 8007fba:	e050      	b.n	800805e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fe2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800806c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d018      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008008:	d013      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a18      	ldr	r2, [pc, #96]	@ (8008070 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d00e      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a16      	ldr	r2, [pc, #88]	@ (8008074 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d009      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a15      	ldr	r2, [pc, #84]	@ (8008078 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d004      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a13      	ldr	r2, [pc, #76]	@ (800807c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d10c      	bne.n	800804c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	4313      	orrs	r3, r2
 8008042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	40010000 	.word	0x40010000
 8008070:	40000400 	.word	0x40000400
 8008074:	40000800 	.word	0x40000800
 8008078:	40000c00 	.word	0x40000c00
 800807c:	40014000 	.word	0x40014000

08008080 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080a8:	b084      	sub	sp, #16
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b084      	sub	sp, #16
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	f107 001c 	add.w	r0, r7, #28
 80080b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d123      	bne.n	800810a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80080d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d105      	bne.n	80080fe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f001 fae8 	bl	80096d4 <USB_CoreReset>
 8008104:	4603      	mov	r3, r0
 8008106:	73fb      	strb	r3, [r7, #15]
 8008108:	e01b      	b.n	8008142 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f001 fadc 	bl	80096d4 <USB_CoreReset>
 800811c:	4603      	mov	r3, r0
 800811e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008120:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008124:	2b00      	cmp	r3, #0
 8008126:	d106      	bne.n	8008136 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800812c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	639a      	str	r2, [r3, #56]	@ 0x38
 8008134:	e005      	b.n	8008142 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008142:	7fbb      	ldrb	r3, [r7, #30]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d10b      	bne.n	8008160 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f043 0206 	orr.w	r2, r3, #6
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f043 0220 	orr.w	r2, r3, #32
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008160:	7bfb      	ldrb	r3, [r7, #15]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800816c:	b004      	add	sp, #16
 800816e:	4770      	bx	lr

08008170 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008170:	b480      	push	{r7}
 8008172:	b087      	sub	sp, #28
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800817e:	79fb      	ldrb	r3, [r7, #7]
 8008180:	2b02      	cmp	r3, #2
 8008182:	d165      	bne.n	8008250 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	4a41      	ldr	r2, [pc, #260]	@ (800828c <USB_SetTurnaroundTime+0x11c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d906      	bls.n	800819a <USB_SetTurnaroundTime+0x2a>
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	4a40      	ldr	r2, [pc, #256]	@ (8008290 <USB_SetTurnaroundTime+0x120>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d202      	bcs.n	800819a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008194:	230f      	movs	r3, #15
 8008196:	617b      	str	r3, [r7, #20]
 8008198:	e062      	b.n	8008260 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	4a3c      	ldr	r2, [pc, #240]	@ (8008290 <USB_SetTurnaroundTime+0x120>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d306      	bcc.n	80081b0 <USB_SetTurnaroundTime+0x40>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	4a3b      	ldr	r2, [pc, #236]	@ (8008294 <USB_SetTurnaroundTime+0x124>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d202      	bcs.n	80081b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80081aa:	230e      	movs	r3, #14
 80081ac:	617b      	str	r3, [r7, #20]
 80081ae:	e057      	b.n	8008260 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4a38      	ldr	r2, [pc, #224]	@ (8008294 <USB_SetTurnaroundTime+0x124>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d306      	bcc.n	80081c6 <USB_SetTurnaroundTime+0x56>
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	4a37      	ldr	r2, [pc, #220]	@ (8008298 <USB_SetTurnaroundTime+0x128>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d202      	bcs.n	80081c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80081c0:	230d      	movs	r3, #13
 80081c2:	617b      	str	r3, [r7, #20]
 80081c4:	e04c      	b.n	8008260 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	4a33      	ldr	r2, [pc, #204]	@ (8008298 <USB_SetTurnaroundTime+0x128>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d306      	bcc.n	80081dc <USB_SetTurnaroundTime+0x6c>
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	4a32      	ldr	r2, [pc, #200]	@ (800829c <USB_SetTurnaroundTime+0x12c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d802      	bhi.n	80081dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80081d6:	230c      	movs	r3, #12
 80081d8:	617b      	str	r3, [r7, #20]
 80081da:	e041      	b.n	8008260 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	4a2f      	ldr	r2, [pc, #188]	@ (800829c <USB_SetTurnaroundTime+0x12c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d906      	bls.n	80081f2 <USB_SetTurnaroundTime+0x82>
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	4a2e      	ldr	r2, [pc, #184]	@ (80082a0 <USB_SetTurnaroundTime+0x130>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d802      	bhi.n	80081f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80081ec:	230b      	movs	r3, #11
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	e036      	b.n	8008260 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	4a2a      	ldr	r2, [pc, #168]	@ (80082a0 <USB_SetTurnaroundTime+0x130>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d906      	bls.n	8008208 <USB_SetTurnaroundTime+0x98>
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	4a29      	ldr	r2, [pc, #164]	@ (80082a4 <USB_SetTurnaroundTime+0x134>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d802      	bhi.n	8008208 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008202:	230a      	movs	r3, #10
 8008204:	617b      	str	r3, [r7, #20]
 8008206:	e02b      	b.n	8008260 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	4a26      	ldr	r2, [pc, #152]	@ (80082a4 <USB_SetTurnaroundTime+0x134>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d906      	bls.n	800821e <USB_SetTurnaroundTime+0xae>
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	4a25      	ldr	r2, [pc, #148]	@ (80082a8 <USB_SetTurnaroundTime+0x138>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d202      	bcs.n	800821e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008218:	2309      	movs	r3, #9
 800821a:	617b      	str	r3, [r7, #20]
 800821c:	e020      	b.n	8008260 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	4a21      	ldr	r2, [pc, #132]	@ (80082a8 <USB_SetTurnaroundTime+0x138>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d306      	bcc.n	8008234 <USB_SetTurnaroundTime+0xc4>
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	4a20      	ldr	r2, [pc, #128]	@ (80082ac <USB_SetTurnaroundTime+0x13c>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d802      	bhi.n	8008234 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800822e:	2308      	movs	r3, #8
 8008230:	617b      	str	r3, [r7, #20]
 8008232:	e015      	b.n	8008260 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	4a1d      	ldr	r2, [pc, #116]	@ (80082ac <USB_SetTurnaroundTime+0x13c>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d906      	bls.n	800824a <USB_SetTurnaroundTime+0xda>
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	4a1c      	ldr	r2, [pc, #112]	@ (80082b0 <USB_SetTurnaroundTime+0x140>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d202      	bcs.n	800824a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008244:	2307      	movs	r3, #7
 8008246:	617b      	str	r3, [r7, #20]
 8008248:	e00a      	b.n	8008260 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800824a:	2306      	movs	r3, #6
 800824c:	617b      	str	r3, [r7, #20]
 800824e:	e007      	b.n	8008260 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d102      	bne.n	800825c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008256:	2309      	movs	r3, #9
 8008258:	617b      	str	r3, [r7, #20]
 800825a:	e001      	b.n	8008260 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800825c:	2309      	movs	r3, #9
 800825e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	029b      	lsls	r3, r3, #10
 8008274:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008278:	431a      	orrs	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	371c      	adds	r7, #28
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr
 800828c:	00d8acbf 	.word	0x00d8acbf
 8008290:	00e4e1c0 	.word	0x00e4e1c0
 8008294:	00f42400 	.word	0x00f42400
 8008298:	01067380 	.word	0x01067380
 800829c:	011a499f 	.word	0x011a499f
 80082a0:	01312cff 	.word	0x01312cff
 80082a4:	014ca43f 	.word	0x014ca43f
 80082a8:	016e3600 	.word	0x016e3600
 80082ac:	01a6ab1f 	.word	0x01a6ab1f
 80082b0:	01e84800 	.word	0x01e84800

080082b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	f043 0201 	orr.w	r2, r3, #1
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	f023 0201 	bic.w	r2, r3, #1
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	370c      	adds	r7, #12
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr

080082f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	460b      	mov	r3, r1
 8008302:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008304:	2300      	movs	r3, #0
 8008306:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008314:	78fb      	ldrb	r3, [r7, #3]
 8008316:	2b01      	cmp	r3, #1
 8008318:	d115      	bne.n	8008346 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008326:	200a      	movs	r0, #10
 8008328:	f7f9 fd2e 	bl	8001d88 <HAL_Delay>
      ms += 10U;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	330a      	adds	r3, #10
 8008330:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f001 f93f 	bl	80095b6 <USB_GetMode>
 8008338:	4603      	mov	r3, r0
 800833a:	2b01      	cmp	r3, #1
 800833c:	d01e      	beq.n	800837c <USB_SetCurrentMode+0x84>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2bc7      	cmp	r3, #199	@ 0xc7
 8008342:	d9f0      	bls.n	8008326 <USB_SetCurrentMode+0x2e>
 8008344:	e01a      	b.n	800837c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008346:	78fb      	ldrb	r3, [r7, #3]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d115      	bne.n	8008378 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008358:	200a      	movs	r0, #10
 800835a:	f7f9 fd15 	bl	8001d88 <HAL_Delay>
      ms += 10U;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	330a      	adds	r3, #10
 8008362:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f001 f926 	bl	80095b6 <USB_GetMode>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d005      	beq.n	800837c <USB_SetCurrentMode+0x84>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2bc7      	cmp	r3, #199	@ 0xc7
 8008374:	d9f0      	bls.n	8008358 <USB_SetCurrentMode+0x60>
 8008376:	e001      	b.n	800837c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	e005      	b.n	8008388 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2bc8      	cmp	r3, #200	@ 0xc8
 8008380:	d101      	bne.n	8008386 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e000      	b.n	8008388 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008390:	b084      	sub	sp, #16
 8008392:	b580      	push	{r7, lr}
 8008394:	b086      	sub	sp, #24
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800839e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80083aa:	2300      	movs	r3, #0
 80083ac:	613b      	str	r3, [r7, #16]
 80083ae:	e009      	b.n	80083c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80083b0:	687a      	ldr	r2, [r7, #4]
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	3340      	adds	r3, #64	@ 0x40
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	2200      	movs	r2, #0
 80083bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	3301      	adds	r3, #1
 80083c2:	613b      	str	r3, [r7, #16]
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	2b0e      	cmp	r3, #14
 80083c8:	d9f2      	bls.n	80083b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80083ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d11c      	bne.n	800840c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083e0:	f043 0302 	orr.w	r3, r3, #2
 80083e4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ea:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083f6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008402:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	639a      	str	r2, [r3, #56]	@ 0x38
 800840a:	e00b      	b.n	8008424 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008410:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800841c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800842a:	461a      	mov	r2, r3
 800842c:	2300      	movs	r3, #0
 800842e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008430:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008434:	2b01      	cmp	r3, #1
 8008436:	d10d      	bne.n	8008454 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008438:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800843c:	2b00      	cmp	r3, #0
 800843e:	d104      	bne.n	800844a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008440:	2100      	movs	r1, #0
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f968 	bl	8008718 <USB_SetDevSpeed>
 8008448:	e008      	b.n	800845c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800844a:	2101      	movs	r1, #1
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f963 	bl	8008718 <USB_SetDevSpeed>
 8008452:	e003      	b.n	800845c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008454:	2103      	movs	r1, #3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f95e 	bl	8008718 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800845c:	2110      	movs	r1, #16
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f8fa 	bl	8008658 <USB_FlushTxFifo>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f924 	bl	80086bc <USB_FlushRxFifo>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008484:	461a      	mov	r2, r3
 8008486:	2300      	movs	r3, #0
 8008488:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008490:	461a      	mov	r2, r3
 8008492:	2300      	movs	r3, #0
 8008494:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800849c:	461a      	mov	r2, r3
 800849e:	2300      	movs	r3, #0
 80084a0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084a2:	2300      	movs	r3, #0
 80084a4:	613b      	str	r3, [r7, #16]
 80084a6:	e043      	b.n	8008530 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	015a      	lsls	r2, r3, #5
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	4413      	add	r3, r2
 80084b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084be:	d118      	bne.n	80084f2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10a      	bne.n	80084dc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	015a      	lsls	r2, r3, #5
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	4413      	add	r3, r2
 80084ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084d2:	461a      	mov	r2, r3
 80084d4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80084d8:	6013      	str	r3, [r2, #0]
 80084da:	e013      	b.n	8008504 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	015a      	lsls	r2, r3, #5
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	4413      	add	r3, r2
 80084e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084e8:	461a      	mov	r2, r3
 80084ea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80084ee:	6013      	str	r3, [r2, #0]
 80084f0:	e008      	b.n	8008504 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084fe:	461a      	mov	r2, r3
 8008500:	2300      	movs	r3, #0
 8008502:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008510:	461a      	mov	r2, r3
 8008512:	2300      	movs	r3, #0
 8008514:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	015a      	lsls	r2, r3, #5
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	4413      	add	r3, r2
 800851e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008522:	461a      	mov	r2, r3
 8008524:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008528:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	3301      	adds	r3, #1
 800852e:	613b      	str	r3, [r7, #16]
 8008530:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008534:	461a      	mov	r2, r3
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	4293      	cmp	r3, r2
 800853a:	d3b5      	bcc.n	80084a8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800853c:	2300      	movs	r3, #0
 800853e:	613b      	str	r3, [r7, #16]
 8008540:	e043      	b.n	80085ca <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008554:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008558:	d118      	bne.n	800858c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10a      	bne.n	8008576 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	015a      	lsls	r2, r3, #5
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	4413      	add	r3, r2
 8008568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800856c:	461a      	mov	r2, r3
 800856e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008572:	6013      	str	r3, [r2, #0]
 8008574:	e013      	b.n	800859e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	4413      	add	r3, r2
 800857e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008582:	461a      	mov	r2, r3
 8008584:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008588:	6013      	str	r3, [r2, #0]
 800858a:	e008      	b.n	800859e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4413      	add	r3, r2
 8008594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008598:	461a      	mov	r2, r3
 800859a:	2300      	movs	r3, #0
 800859c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085aa:	461a      	mov	r2, r3
 80085ac:	2300      	movs	r3, #0
 80085ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085bc:	461a      	mov	r2, r3
 80085be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80085c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	3301      	adds	r3, #1
 80085c8:	613b      	str	r3, [r7, #16]
 80085ca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80085ce:	461a      	mov	r2, r3
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d3b5      	bcc.n	8008542 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80085e8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80085f6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d105      	bne.n	800860c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	f043 0210 	orr.w	r2, r3, #16
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	699a      	ldr	r2, [r3, #24]
 8008610:	4b10      	ldr	r3, [pc, #64]	@ (8008654 <USB_DevInit+0x2c4>)
 8008612:	4313      	orrs	r3, r2
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008618:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800861c:	2b00      	cmp	r3, #0
 800861e:	d005      	beq.n	800862c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	699b      	ldr	r3, [r3, #24]
 8008624:	f043 0208 	orr.w	r2, r3, #8
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800862c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008630:	2b01      	cmp	r3, #1
 8008632:	d107      	bne.n	8008644 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800863c:	f043 0304 	orr.w	r3, r3, #4
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008644:	7dfb      	ldrb	r3, [r7, #23]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3718      	adds	r7, #24
 800864a:	46bd      	mov	sp, r7
 800864c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008650:	b004      	add	sp, #16
 8008652:	4770      	bx	lr
 8008654:	803c3800 	.word	0x803c3800

08008658 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3301      	adds	r3, #1
 800866a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008672:	d901      	bls.n	8008678 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e01b      	b.n	80086b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	daf2      	bge.n	8008666 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008680:	2300      	movs	r3, #0
 8008682:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	019b      	lsls	r3, r3, #6
 8008688:	f043 0220 	orr.w	r2, r3, #32
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3301      	adds	r3, #1
 8008694:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800869c:	d901      	bls.n	80086a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e006      	b.n	80086b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	f003 0320 	and.w	r3, r3, #32
 80086aa:	2b20      	cmp	r3, #32
 80086ac:	d0f0      	beq.n	8008690 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086c4:	2300      	movs	r3, #0
 80086c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	3301      	adds	r3, #1
 80086cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086d4:	d901      	bls.n	80086da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80086d6:	2303      	movs	r3, #3
 80086d8:	e018      	b.n	800870c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	daf2      	bge.n	80086c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80086e2:	2300      	movs	r3, #0
 80086e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2210      	movs	r2, #16
 80086ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	3301      	adds	r3, #1
 80086f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80086f8:	d901      	bls.n	80086fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e006      	b.n	800870c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	f003 0310 	and.w	r3, r3, #16
 8008706:	2b10      	cmp	r3, #16
 8008708:	d0f0      	beq.n	80086ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800870a:	2300      	movs	r3, #0
}
 800870c:	4618      	mov	r0, r3
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	460b      	mov	r3, r1
 8008722:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	78fb      	ldrb	r3, [r7, #3]
 8008732:	68f9      	ldr	r1, [r7, #12]
 8008734:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008738:	4313      	orrs	r3, r2
 800873a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3714      	adds	r7, #20
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800874a:	b480      	push	{r7}
 800874c:	b087      	sub	sp, #28
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f003 0306 	and.w	r3, r3, #6
 8008762:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d102      	bne.n	8008770 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800876a:	2300      	movs	r3, #0
 800876c:	75fb      	strb	r3, [r7, #23]
 800876e:	e00a      	b.n	8008786 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2b02      	cmp	r3, #2
 8008774:	d002      	beq.n	800877c <USB_GetDevSpeed+0x32>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2b06      	cmp	r3, #6
 800877a:	d102      	bne.n	8008782 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800877c:	2302      	movs	r3, #2
 800877e:	75fb      	strb	r3, [r7, #23]
 8008780:	e001      	b.n	8008786 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008782:	230f      	movs	r3, #15
 8008784:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008786:	7dfb      	ldrb	r3, [r7, #23]
}
 8008788:	4618      	mov	r0, r3
 800878a:	371c      	adds	r7, #28
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	785b      	ldrb	r3, [r3, #1]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d13a      	bne.n	8008826 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087b6:	69da      	ldr	r2, [r3, #28]
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	f003 030f 	and.w	r3, r3, #15
 80087c0:	2101      	movs	r1, #1
 80087c2:	fa01 f303 	lsl.w	r3, r1, r3
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	68f9      	ldr	r1, [r7, #12]
 80087ca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80087ce:	4313      	orrs	r3, r2
 80087d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d155      	bne.n	8008894 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	015a      	lsls	r2, r3, #5
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	4413      	add	r3, r2
 80087f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	791b      	ldrb	r3, [r3, #4]
 8008802:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008804:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	059b      	lsls	r3, r3, #22
 800880a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800880c:	4313      	orrs	r3, r2
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	0151      	lsls	r1, r2, #5
 8008812:	68fa      	ldr	r2, [r7, #12]
 8008814:	440a      	add	r2, r1
 8008816:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800881a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800881e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008822:	6013      	str	r3, [r2, #0]
 8008824:	e036      	b.n	8008894 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800882c:	69da      	ldr	r2, [r3, #28]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	f003 030f 	and.w	r3, r3, #15
 8008836:	2101      	movs	r1, #1
 8008838:	fa01 f303 	lsl.w	r3, r1, r3
 800883c:	041b      	lsls	r3, r3, #16
 800883e:	68f9      	ldr	r1, [r7, #12]
 8008840:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008844:	4313      	orrs	r3, r2
 8008846:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	015a      	lsls	r2, r3, #5
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4413      	add	r3, r2
 8008850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800885a:	2b00      	cmp	r3, #0
 800885c:	d11a      	bne.n	8008894 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	4413      	add	r3, r2
 8008866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	791b      	ldrb	r3, [r3, #4]
 8008878:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800887a:	430b      	orrs	r3, r1
 800887c:	4313      	orrs	r3, r2
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	0151      	lsls	r1, r2, #5
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	440a      	add	r2, r1
 8008886:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800888a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800888e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008892:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
	...

080088a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	785b      	ldrb	r3, [r3, #1]
 80088bc:	2b01      	cmp	r3, #1
 80088be:	d161      	bne.n	8008984 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	015a      	lsls	r2, r3, #5
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	4413      	add	r3, r2
 80088c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088d6:	d11f      	bne.n	8008918 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	0151      	lsls	r1, r2, #5
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	440a      	add	r2, r1
 80088ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80088f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	015a      	lsls	r2, r3, #5
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4413      	add	r3, r2
 8008900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	0151      	lsls	r1, r2, #5
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	440a      	add	r2, r1
 800890e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008912:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008916:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800891e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	f003 030f 	and.w	r3, r3, #15
 8008928:	2101      	movs	r1, #1
 800892a:	fa01 f303 	lsl.w	r3, r1, r3
 800892e:	b29b      	uxth	r3, r3
 8008930:	43db      	mvns	r3, r3
 8008932:	68f9      	ldr	r1, [r7, #12]
 8008934:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008938:	4013      	ands	r3, r2
 800893a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008942:	69da      	ldr	r2, [r3, #28]
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	f003 030f 	and.w	r3, r3, #15
 800894c:	2101      	movs	r1, #1
 800894e:	fa01 f303 	lsl.w	r3, r1, r3
 8008952:	b29b      	uxth	r3, r3
 8008954:	43db      	mvns	r3, r3
 8008956:	68f9      	ldr	r1, [r7, #12]
 8008958:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800895c:	4013      	ands	r3, r2
 800895e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	015a      	lsls	r2, r3, #5
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	4413      	add	r3, r2
 8008968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	0159      	lsls	r1, r3, #5
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	440b      	add	r3, r1
 8008976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800897a:	4619      	mov	r1, r3
 800897c:	4b35      	ldr	r3, [pc, #212]	@ (8008a54 <USB_DeactivateEndpoint+0x1b0>)
 800897e:	4013      	ands	r3, r2
 8008980:	600b      	str	r3, [r1, #0]
 8008982:	e060      	b.n	8008a46 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	015a      	lsls	r2, r3, #5
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	4413      	add	r3, r2
 800898c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008996:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800899a:	d11f      	bne.n	80089dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	0151      	lsls	r1, r2, #5
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	440a      	add	r2, r1
 80089b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80089ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	0151      	lsls	r1, r2, #5
 80089ce:	68fa      	ldr	r2, [r7, #12]
 80089d0:	440a      	add	r2, r1
 80089d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80089da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	f003 030f 	and.w	r3, r3, #15
 80089ec:	2101      	movs	r1, #1
 80089ee:	fa01 f303 	lsl.w	r3, r1, r3
 80089f2:	041b      	lsls	r3, r3, #16
 80089f4:	43db      	mvns	r3, r3
 80089f6:	68f9      	ldr	r1, [r7, #12]
 80089f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80089fc:	4013      	ands	r3, r2
 80089fe:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a06:	69da      	ldr	r2, [r3, #28]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	f003 030f 	and.w	r3, r3, #15
 8008a10:	2101      	movs	r1, #1
 8008a12:	fa01 f303 	lsl.w	r3, r1, r3
 8008a16:	041b      	lsls	r3, r3, #16
 8008a18:	43db      	mvns	r3, r3
 8008a1a:	68f9      	ldr	r1, [r7, #12]
 8008a1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a20:	4013      	ands	r3, r2
 8008a22:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	015a      	lsls	r2, r3, #5
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	0159      	lsls	r1, r3, #5
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	440b      	add	r3, r1
 8008a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a3e:	4619      	mov	r1, r3
 8008a40:	4b05      	ldr	r3, [pc, #20]	@ (8008a58 <USB_DeactivateEndpoint+0x1b4>)
 8008a42:	4013      	ands	r3, r2
 8008a44:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr
 8008a54:	ec337800 	.word	0xec337800
 8008a58:	eff37800 	.word	0xeff37800

08008a5c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08a      	sub	sp, #40	@ 0x28
 8008a60:	af02      	add	r7, sp, #8
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	4613      	mov	r3, r2
 8008a68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	785b      	ldrb	r3, [r3, #1]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	f040 817f 	bne.w	8008d7c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d132      	bne.n	8008aec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	0151      	lsls	r1, r2, #5
 8008a98:	69fa      	ldr	r2, [r7, #28]
 8008a9a:	440a      	add	r2, r1
 8008a9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008aa0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008aa4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008aa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	015a      	lsls	r2, r3, #5
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ab6:	691b      	ldr	r3, [r3, #16]
 8008ab8:	69ba      	ldr	r2, [r7, #24]
 8008aba:	0151      	lsls	r1, r2, #5
 8008abc:	69fa      	ldr	r2, [r7, #28]
 8008abe:	440a      	add	r2, r1
 8008ac0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ac4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ac8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	69ba      	ldr	r2, [r7, #24]
 8008ada:	0151      	lsls	r1, r2, #5
 8008adc:	69fa      	ldr	r2, [r7, #28]
 8008ade:	440a      	add	r2, r1
 8008ae0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ae4:	0cdb      	lsrs	r3, r3, #19
 8008ae6:	04db      	lsls	r3, r3, #19
 8008ae8:	6113      	str	r3, [r2, #16]
 8008aea:	e097      	b.n	8008c1c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	0151      	lsls	r1, r2, #5
 8008afe:	69fa      	ldr	r2, [r7, #28]
 8008b00:	440a      	add	r2, r1
 8008b02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b06:	0cdb      	lsrs	r3, r3, #19
 8008b08:	04db      	lsls	r3, r3, #19
 8008b0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	69ba      	ldr	r2, [r7, #24]
 8008b1c:	0151      	lsls	r1, r2, #5
 8008b1e:	69fa      	ldr	r2, [r7, #28]
 8008b20:	440a      	add	r2, r1
 8008b22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b26:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008b2a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008b2e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d11a      	bne.n	8008b6c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	691a      	ldr	r2, [r3, #16]
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d903      	bls.n	8008b4a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	689a      	ldr	r2, [r3, #8]
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	015a      	lsls	r2, r3, #5
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	0151      	lsls	r1, r2, #5
 8008b5c:	69fa      	ldr	r2, [r7, #28]
 8008b5e:	440a      	add	r2, r1
 8008b60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b68:	6113      	str	r3, [r2, #16]
 8008b6a:	e044      	b.n	8008bf6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	691a      	ldr	r2, [r3, #16]
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	4413      	add	r3, r2
 8008b76:	1e5a      	subs	r2, r3, #1
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b80:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	015a      	lsls	r2, r3, #5
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	4413      	add	r3, r2
 8008b8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b8e:	691a      	ldr	r2, [r3, #16]
 8008b90:	8afb      	ldrh	r3, [r7, #22]
 8008b92:	04d9      	lsls	r1, r3, #19
 8008b94:	4ba4      	ldr	r3, [pc, #656]	@ (8008e28 <USB_EPStartXfer+0x3cc>)
 8008b96:	400b      	ands	r3, r1
 8008b98:	69b9      	ldr	r1, [r7, #24]
 8008b9a:	0148      	lsls	r0, r1, #5
 8008b9c:	69f9      	ldr	r1, [r7, #28]
 8008b9e:	4401      	add	r1, r0
 8008ba0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	791b      	ldrb	r3, [r3, #4]
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d122      	bne.n	8008bf6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	015a      	lsls	r2, r3, #5
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	69ba      	ldr	r2, [r7, #24]
 8008bc0:	0151      	lsls	r1, r2, #5
 8008bc2:	69fa      	ldr	r2, [r7, #28]
 8008bc4:	440a      	add	r2, r1
 8008bc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bca:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008bce:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bdc:	691a      	ldr	r2, [r3, #16]
 8008bde:	8afb      	ldrh	r3, [r7, #22]
 8008be0:	075b      	lsls	r3, r3, #29
 8008be2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008be6:	69b9      	ldr	r1, [r7, #24]
 8008be8:	0148      	lsls	r0, r1, #5
 8008bea:	69f9      	ldr	r1, [r7, #28]
 8008bec:	4401      	add	r1, r0
 8008bee:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	015a      	lsls	r2, r3, #5
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c02:	691a      	ldr	r2, [r3, #16]
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	691b      	ldr	r3, [r3, #16]
 8008c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c0c:	69b9      	ldr	r1, [r7, #24]
 8008c0e:	0148      	lsls	r0, r1, #5
 8008c10:	69f9      	ldr	r1, [r7, #28]
 8008c12:	4401      	add	r1, r0
 8008c14:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008c1c:	79fb      	ldrb	r3, [r7, #7]
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d14b      	bne.n	8008cba <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d009      	beq.n	8008c3e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	015a      	lsls	r2, r3, #5
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	4413      	add	r3, r2
 8008c32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c36:	461a      	mov	r2, r3
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	791b      	ldrb	r3, [r3, #4]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d128      	bne.n	8008c98 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d110      	bne.n	8008c78 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	0151      	lsls	r1, r2, #5
 8008c68:	69fa      	ldr	r2, [r7, #28]
 8008c6a:	440a      	add	r2, r1
 8008c6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c70:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008c74:	6013      	str	r3, [r2, #0]
 8008c76:	e00f      	b.n	8008c98 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	69ba      	ldr	r2, [r7, #24]
 8008c88:	0151      	lsls	r1, r2, #5
 8008c8a:	69fa      	ldr	r2, [r7, #28]
 8008c8c:	440a      	add	r2, r1
 8008c8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c96:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	015a      	lsls	r2, r3, #5
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	69ba      	ldr	r2, [r7, #24]
 8008ca8:	0151      	lsls	r1, r2, #5
 8008caa:	69fa      	ldr	r2, [r7, #28]
 8008cac:	440a      	add	r2, r1
 8008cae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cb2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008cb6:	6013      	str	r3, [r2, #0]
 8008cb8:	e166      	b.n	8008f88 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	69ba      	ldr	r2, [r7, #24]
 8008cca:	0151      	lsls	r1, r2, #5
 8008ccc:	69fa      	ldr	r2, [r7, #28]
 8008cce:	440a      	add	r2, r1
 8008cd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cd4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008cd8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	791b      	ldrb	r3, [r3, #4]
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d015      	beq.n	8008d0e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	f000 814e 	beq.w	8008f88 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	f003 030f 	and.w	r3, r3, #15
 8008cfc:	2101      	movs	r1, #1
 8008cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8008d02:	69f9      	ldr	r1, [r7, #28]
 8008d04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	634b      	str	r3, [r1, #52]	@ 0x34
 8008d0c:	e13c      	b.n	8008f88 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d110      	bne.n	8008d40 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	015a      	lsls	r2, r3, #5
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	4413      	add	r3, r2
 8008d26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	69ba      	ldr	r2, [r7, #24]
 8008d2e:	0151      	lsls	r1, r2, #5
 8008d30:	69fa      	ldr	r2, [r7, #28]
 8008d32:	440a      	add	r2, r1
 8008d34:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d38:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008d3c:	6013      	str	r3, [r2, #0]
 8008d3e:	e00f      	b.n	8008d60 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	015a      	lsls	r2, r3, #5
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	4413      	add	r3, r2
 8008d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	69ba      	ldr	r2, [r7, #24]
 8008d50:	0151      	lsls	r1, r2, #5
 8008d52:	69fa      	ldr	r2, [r7, #28]
 8008d54:	440a      	add	r2, r1
 8008d56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d5e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	68d9      	ldr	r1, [r3, #12]
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	781a      	ldrb	r2, [r3, #0]
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	b298      	uxth	r0, r3
 8008d6e:	79fb      	ldrb	r3, [r7, #7]
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	4603      	mov	r3, r0
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f000 f9b9 	bl	80090ec <USB_WritePacket>
 8008d7a:	e105      	b.n	8008f88 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	015a      	lsls	r2, r3, #5
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	4413      	add	r3, r2
 8008d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	69ba      	ldr	r2, [r7, #24]
 8008d8c:	0151      	lsls	r1, r2, #5
 8008d8e:	69fa      	ldr	r2, [r7, #28]
 8008d90:	440a      	add	r2, r1
 8008d92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d96:	0cdb      	lsrs	r3, r3, #19
 8008d98:	04db      	lsls	r3, r3, #19
 8008d9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008da8:	691b      	ldr	r3, [r3, #16]
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	0151      	lsls	r1, r2, #5
 8008dae:	69fa      	ldr	r2, [r7, #28]
 8008db0:	440a      	add	r2, r1
 8008db2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008db6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008dba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008dbe:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d132      	bne.n	8008e2c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d003      	beq.n	8008dd6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	689a      	ldr	r2, [r3, #8]
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	689a      	ldr	r2, [r3, #8]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	015a      	lsls	r2, r3, #5
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	4413      	add	r3, r2
 8008de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dea:	691a      	ldr	r2, [r3, #16]
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008df4:	69b9      	ldr	r1, [r7, #24]
 8008df6:	0148      	lsls	r0, r1, #5
 8008df8:	69f9      	ldr	r1, [r7, #28]
 8008dfa:	4401      	add	r1, r0
 8008dfc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008e00:	4313      	orrs	r3, r2
 8008e02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	69ba      	ldr	r2, [r7, #24]
 8008e14:	0151      	lsls	r1, r2, #5
 8008e16:	69fa      	ldr	r2, [r7, #28]
 8008e18:	440a      	add	r2, r1
 8008e1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e1e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e22:	6113      	str	r3, [r2, #16]
 8008e24:	e062      	b.n	8008eec <USB_EPStartXfer+0x490>
 8008e26:	bf00      	nop
 8008e28:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d123      	bne.n	8008e7c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	015a      	lsls	r2, r3, #5
 8008e38:	69fb      	ldr	r3, [r7, #28]
 8008e3a:	4413      	add	r3, r2
 8008e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e40:	691a      	ldr	r2, [r3, #16]
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e4a:	69b9      	ldr	r1, [r7, #24]
 8008e4c:	0148      	lsls	r0, r1, #5
 8008e4e:	69f9      	ldr	r1, [r7, #28]
 8008e50:	4401      	add	r1, r0
 8008e52:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008e56:	4313      	orrs	r3, r2
 8008e58:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	69ba      	ldr	r2, [r7, #24]
 8008e6a:	0151      	lsls	r1, r2, #5
 8008e6c:	69fa      	ldr	r2, [r7, #28]
 8008e6e:	440a      	add	r2, r1
 8008e70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008e78:	6113      	str	r3, [r2, #16]
 8008e7a:	e037      	b.n	8008eec <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	691a      	ldr	r2, [r3, #16]
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	4413      	add	r3, r2
 8008e86:	1e5a      	subs	r2, r3, #1
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e90:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	8afa      	ldrh	r2, [r7, #22]
 8008e98:	fb03 f202 	mul.w	r2, r3, r2
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	015a      	lsls	r2, r3, #5
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eac:	691a      	ldr	r2, [r3, #16]
 8008eae:	8afb      	ldrh	r3, [r7, #22]
 8008eb0:	04d9      	lsls	r1, r3, #19
 8008eb2:	4b38      	ldr	r3, [pc, #224]	@ (8008f94 <USB_EPStartXfer+0x538>)
 8008eb4:	400b      	ands	r3, r1
 8008eb6:	69b9      	ldr	r1, [r7, #24]
 8008eb8:	0148      	lsls	r0, r1, #5
 8008eba:	69f9      	ldr	r1, [r7, #28]
 8008ebc:	4401      	add	r1, r0
 8008ebe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ed2:	691a      	ldr	r2, [r3, #16]
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	6a1b      	ldr	r3, [r3, #32]
 8008ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008edc:	69b9      	ldr	r1, [r7, #24]
 8008ede:	0148      	lsls	r0, r1, #5
 8008ee0:	69f9      	ldr	r1, [r7, #28]
 8008ee2:	4401      	add	r1, r0
 8008ee4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008eec:	79fb      	ldrb	r3, [r7, #7]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d10d      	bne.n	8008f0e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d009      	beq.n	8008f0e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	68d9      	ldr	r1, [r3, #12]
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	015a      	lsls	r2, r3, #5
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	4413      	add	r3, r2
 8008f06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f0a:	460a      	mov	r2, r1
 8008f0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	791b      	ldrb	r3, [r3, #4]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d128      	bne.n	8008f68 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d110      	bne.n	8008f48 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008f26:	69bb      	ldr	r3, [r7, #24]
 8008f28:	015a      	lsls	r2, r3, #5
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	69ba      	ldr	r2, [r7, #24]
 8008f36:	0151      	lsls	r1, r2, #5
 8008f38:	69fa      	ldr	r2, [r7, #28]
 8008f3a:	440a      	add	r2, r1
 8008f3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008f44:	6013      	str	r3, [r2, #0]
 8008f46:	e00f      	b.n	8008f68 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	015a      	lsls	r2, r3, #5
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	4413      	add	r3, r2
 8008f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	69ba      	ldr	r2, [r7, #24]
 8008f58:	0151      	lsls	r1, r2, #5
 8008f5a:	69fa      	ldr	r2, [r7, #28]
 8008f5c:	440a      	add	r2, r1
 8008f5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	015a      	lsls	r2, r3, #5
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	69ba      	ldr	r2, [r7, #24]
 8008f78:	0151      	lsls	r1, r2, #5
 8008f7a:	69fa      	ldr	r2, [r7, #28]
 8008f7c:	440a      	add	r2, r1
 8008f7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f82:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008f86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3720      	adds	r7, #32
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	1ff80000 	.word	0x1ff80000

08008f98 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b087      	sub	sp, #28
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	785b      	ldrb	r3, [r3, #1]
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d14a      	bne.n	800904c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008fca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fce:	f040 8086 	bne.w	80090de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	015a      	lsls	r2, r3, #5
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	4413      	add	r3, r2
 8008fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	7812      	ldrb	r2, [r2, #0]
 8008fe6:	0151      	lsls	r1, r2, #5
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	440a      	add	r2, r1
 8008fec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ff0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008ff4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	015a      	lsls	r2, r3, #5
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	4413      	add	r3, r2
 8009000:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	7812      	ldrb	r2, [r2, #0]
 800900a:	0151      	lsls	r1, r2, #5
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	440a      	add	r2, r1
 8009010:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009014:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009018:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	3301      	adds	r3, #1
 800901e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009026:	4293      	cmp	r3, r2
 8009028:	d902      	bls.n	8009030 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	75fb      	strb	r3, [r7, #23]
          break;
 800902e:	e056      	b.n	80090de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	015a      	lsls	r2, r3, #5
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	4413      	add	r3, r2
 800903a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009044:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009048:	d0e7      	beq.n	800901a <USB_EPStopXfer+0x82>
 800904a:	e048      	b.n	80090de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	4413      	add	r3, r2
 8009056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009060:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009064:	d13b      	bne.n	80090de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	015a      	lsls	r2, r3, #5
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	4413      	add	r3, r2
 8009070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	7812      	ldrb	r2, [r2, #0]
 800907a:	0151      	lsls	r1, r2, #5
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	440a      	add	r2, r1
 8009080:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009084:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009088:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	015a      	lsls	r2, r3, #5
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	4413      	add	r3, r2
 8009094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	7812      	ldrb	r2, [r2, #0]
 800909e:	0151      	lsls	r1, r2, #5
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	440a      	add	r2, r1
 80090a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80090ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3301      	adds	r3, #1
 80090b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d902      	bls.n	80090c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	75fb      	strb	r3, [r7, #23]
          break;
 80090c2:	e00c      	b.n	80090de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	015a      	lsls	r2, r3, #5
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	4413      	add	r3, r2
 80090ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090dc:	d0e7      	beq.n	80090ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80090de:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	371c      	adds	r7, #28
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b089      	sub	sp, #36	@ 0x24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	4611      	mov	r1, r2
 80090f8:	461a      	mov	r2, r3
 80090fa:	460b      	mov	r3, r1
 80090fc:	71fb      	strb	r3, [r7, #7]
 80090fe:	4613      	mov	r3, r2
 8009100:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800910a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800910e:	2b00      	cmp	r3, #0
 8009110:	d123      	bne.n	800915a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009112:	88bb      	ldrh	r3, [r7, #4]
 8009114:	3303      	adds	r3, #3
 8009116:	089b      	lsrs	r3, r3, #2
 8009118:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800911a:	2300      	movs	r3, #0
 800911c:	61bb      	str	r3, [r7, #24]
 800911e:	e018      	b.n	8009152 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009120:	79fb      	ldrb	r3, [r7, #7]
 8009122:	031a      	lsls	r2, r3, #12
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	4413      	add	r3, r2
 8009128:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800912c:	461a      	mov	r2, r3
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	3301      	adds	r3, #1
 8009138:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	3301      	adds	r3, #1
 800913e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009140:	69fb      	ldr	r3, [r7, #28]
 8009142:	3301      	adds	r3, #1
 8009144:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	3301      	adds	r3, #1
 800914a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	3301      	adds	r3, #1
 8009150:	61bb      	str	r3, [r7, #24]
 8009152:	69ba      	ldr	r2, [r7, #24]
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	429a      	cmp	r2, r3
 8009158:	d3e2      	bcc.n	8009120 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3724      	adds	r7, #36	@ 0x24
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009168:	b480      	push	{r7}
 800916a:	b08b      	sub	sp, #44	@ 0x2c
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	4613      	mov	r3, r2
 8009174:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800917e:	88fb      	ldrh	r3, [r7, #6]
 8009180:	089b      	lsrs	r3, r3, #2
 8009182:	b29b      	uxth	r3, r3
 8009184:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009186:	88fb      	ldrh	r3, [r7, #6]
 8009188:	f003 0303 	and.w	r3, r3, #3
 800918c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800918e:	2300      	movs	r3, #0
 8009190:	623b      	str	r3, [r7, #32]
 8009192:	e014      	b.n	80091be <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919e:	601a      	str	r2, [r3, #0]
    pDest++;
 80091a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a2:	3301      	adds	r3, #1
 80091a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80091a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a8:	3301      	adds	r3, #1
 80091aa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80091ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ae:	3301      	adds	r3, #1
 80091b0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80091b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b4:	3301      	adds	r3, #1
 80091b6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80091b8:	6a3b      	ldr	r3, [r7, #32]
 80091ba:	3301      	adds	r3, #1
 80091bc:	623b      	str	r3, [r7, #32]
 80091be:	6a3a      	ldr	r2, [r7, #32]
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d3e6      	bcc.n	8009194 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80091c6:	8bfb      	ldrh	r3, [r7, #30]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d01e      	beq.n	800920a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80091cc:	2300      	movs	r3, #0
 80091ce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80091d6:	461a      	mov	r2, r3
 80091d8:	f107 0310 	add.w	r3, r7, #16
 80091dc:	6812      	ldr	r2, [r2, #0]
 80091de:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	6a3b      	ldr	r3, [r7, #32]
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	00db      	lsls	r3, r3, #3
 80091e8:	fa22 f303 	lsr.w	r3, r2, r3
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f0:	701a      	strb	r2, [r3, #0]
      i++;
 80091f2:	6a3b      	ldr	r3, [r7, #32]
 80091f4:	3301      	adds	r3, #1
 80091f6:	623b      	str	r3, [r7, #32]
      pDest++;
 80091f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fa:	3301      	adds	r3, #1
 80091fc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80091fe:	8bfb      	ldrh	r3, [r7, #30]
 8009200:	3b01      	subs	r3, #1
 8009202:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009204:	8bfb      	ldrh	r3, [r7, #30]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1ea      	bne.n	80091e0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800920a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800920c:	4618      	mov	r0, r3
 800920e:	372c      	adds	r7, #44	@ 0x2c
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	785b      	ldrb	r3, [r3, #1]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d12c      	bne.n	800928e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	015a      	lsls	r2, r3, #5
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4413      	add	r3, r2
 800923c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	db12      	blt.n	800926c <USB_EPSetStall+0x54>
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00f      	beq.n	800926c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	015a      	lsls	r2, r3, #5
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4413      	add	r3, r2
 8009254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68ba      	ldr	r2, [r7, #8]
 800925c:	0151      	lsls	r1, r2, #5
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	440a      	add	r2, r1
 8009262:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009266:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800926a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	015a      	lsls	r2, r3, #5
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	4413      	add	r3, r2
 8009274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	0151      	lsls	r1, r2, #5
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	440a      	add	r2, r1
 8009282:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009286:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800928a:	6013      	str	r3, [r2, #0]
 800928c:	e02b      	b.n	80092e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	015a      	lsls	r2, r3, #5
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	4413      	add	r3, r2
 8009296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	db12      	blt.n	80092c6 <USB_EPSetStall+0xae>
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00f      	beq.n	80092c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	015a      	lsls	r2, r3, #5
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	4413      	add	r3, r2
 80092ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	0151      	lsls	r1, r2, #5
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	440a      	add	r2, r1
 80092bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80092c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	015a      	lsls	r2, r3, #5
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	4413      	add	r3, r2
 80092ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	0151      	lsls	r1, r2, #5
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	440a      	add	r2, r1
 80092dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80092e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3714      	adds	r7, #20
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	785b      	ldrb	r3, [r3, #1]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d128      	bne.n	8009362 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	015a      	lsls	r2, r3, #5
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	4413      	add	r3, r2
 8009318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	0151      	lsls	r1, r2, #5
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	440a      	add	r2, r1
 8009326:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800932a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800932e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	791b      	ldrb	r3, [r3, #4]
 8009334:	2b03      	cmp	r3, #3
 8009336:	d003      	beq.n	8009340 <USB_EPClearStall+0x4c>
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	791b      	ldrb	r3, [r3, #4]
 800933c:	2b02      	cmp	r3, #2
 800933e:	d138      	bne.n	80093b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	015a      	lsls	r2, r3, #5
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	4413      	add	r3, r2
 8009348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	0151      	lsls	r1, r2, #5
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	440a      	add	r2, r1
 8009356:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800935a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800935e:	6013      	str	r3, [r2, #0]
 8009360:	e027      	b.n	80093b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	015a      	lsls	r2, r3, #5
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	4413      	add	r3, r2
 800936a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	0151      	lsls	r1, r2, #5
 8009374:	68fa      	ldr	r2, [r7, #12]
 8009376:	440a      	add	r2, r1
 8009378:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800937c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009380:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	791b      	ldrb	r3, [r3, #4]
 8009386:	2b03      	cmp	r3, #3
 8009388:	d003      	beq.n	8009392 <USB_EPClearStall+0x9e>
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	791b      	ldrb	r3, [r3, #4]
 800938e:	2b02      	cmp	r3, #2
 8009390:	d10f      	bne.n	80093b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	015a      	lsls	r2, r3, #5
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	4413      	add	r3, r2
 800939a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	0151      	lsls	r1, r2, #5
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	440a      	add	r2, r1
 80093a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80093ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3714      	adds	r7, #20
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b085      	sub	sp, #20
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	460b      	mov	r3, r1
 80093ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80093de:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80093e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	78fb      	ldrb	r3, [r7, #3]
 80093ee:	011b      	lsls	r3, r3, #4
 80093f0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80093f4:	68f9      	ldr	r1, [r7, #12]
 80093f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80093fa:	4313      	orrs	r3, r2
 80093fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009426:	f023 0303 	bic.w	r3, r3, #3
 800942a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	68fa      	ldr	r2, [r7, #12]
 8009436:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800943a:	f023 0302 	bic.w	r3, r3, #2
 800943e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800944e:	b480      	push	{r7}
 8009450:	b085      	sub	sp, #20
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009468:	f023 0303 	bic.w	r3, r3, #3
 800946c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800947c:	f043 0302 	orr.w	r3, r3, #2
 8009480:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	695b      	ldr	r3, [r3, #20]
 800949c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	699b      	ldr	r3, [r3, #24]
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	4013      	ands	r3, r2
 80094a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80094a8:	68fb      	ldr	r3, [r7, #12]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3714      	adds	r7, #20
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b085      	sub	sp, #20
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094d2:	69db      	ldr	r3, [r3, #28]
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	4013      	ands	r3, r2
 80094d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	0c1b      	lsrs	r3, r3, #16
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3714      	adds	r7, #20
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr

080094ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80094ea:	b480      	push	{r7}
 80094ec:	b085      	sub	sp, #20
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009506:	69db      	ldr	r3, [r3, #28]
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	4013      	ands	r3, r2
 800950c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	b29b      	uxth	r3, r3
}
 8009512:	4618      	mov	r0, r3
 8009514:	3714      	adds	r7, #20
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800951e:	b480      	push	{r7}
 8009520:	b085      	sub	sp, #20
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	460b      	mov	r3, r1
 8009528:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800952e:	78fb      	ldrb	r3, [r7, #3]
 8009530:	015a      	lsls	r2, r3, #5
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	4413      	add	r3, r2
 8009536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	4013      	ands	r3, r2
 800954a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800954c:	68bb      	ldr	r3, [r7, #8]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3714      	adds	r7, #20
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800955a:	b480      	push	{r7}
 800955c:	b087      	sub	sp, #28
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	460b      	mov	r3, r1
 8009564:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800957a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800957c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800957e:	78fb      	ldrb	r3, [r7, #3]
 8009580:	f003 030f 	and.w	r3, r3, #15
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	fa22 f303 	lsr.w	r3, r2, r3
 800958a:	01db      	lsls	r3, r3, #7
 800958c:	b2db      	uxtb	r3, r3
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	4313      	orrs	r3, r2
 8009592:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009594:	78fb      	ldrb	r3, [r7, #3]
 8009596:	015a      	lsls	r2, r3, #5
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	4413      	add	r3, r2
 800959c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	4013      	ands	r3, r2
 80095a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80095a8:	68bb      	ldr	r3, [r7, #8]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	371c      	adds	r7, #28
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b083      	sub	sp, #12
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	f003 0301 	and.w	r3, r3, #1
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b085      	sub	sp, #20
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095ec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80095f0:	f023 0307 	bic.w	r3, r3, #7
 80095f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009608:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3714      	adds	r7, #20
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009618:	b480      	push	{r7}
 800961a:	b087      	sub	sp, #28
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	460b      	mov	r3, r1
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	333c      	adds	r3, #60	@ 0x3c
 800962e:	3304      	adds	r3, #4
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	4a26      	ldr	r2, [pc, #152]	@ (80096d0 <USB_EP0_OutStart+0xb8>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d90a      	bls.n	8009652 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009648:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800964c:	d101      	bne.n	8009652 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	e037      	b.n	80096c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009658:	461a      	mov	r2, r3
 800965a:	2300      	movs	r3, #0
 800965c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800966c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009670:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009680:	f043 0318 	orr.w	r3, r3, #24
 8009684:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	697a      	ldr	r2, [r7, #20]
 8009690:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009694:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009698:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800969a:	7afb      	ldrb	r3, [r7, #11]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d10f      	bne.n	80096c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096a6:	461a      	mov	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	697a      	ldr	r2, [r7, #20]
 80096b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096ba:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80096be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	371c      	adds	r7, #28
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	4f54300a 	.word	0x4f54300a

080096d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096dc:	2300      	movs	r3, #0
 80096de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	3301      	adds	r3, #1
 80096e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80096ec:	d901      	bls.n	80096f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80096ee:	2303      	movs	r3, #3
 80096f0:	e022      	b.n	8009738 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	691b      	ldr	r3, [r3, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	daf2      	bge.n	80096e0 <USB_CoreReset+0xc>

  count = 10U;
 80096fa:	230a      	movs	r3, #10
 80096fc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80096fe:	e002      	b.n	8009706 <USB_CoreReset+0x32>
  {
    count--;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	3b01      	subs	r3, #1
 8009704:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1f9      	bne.n	8009700 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	f043 0201 	orr.w	r2, r3, #1
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	3301      	adds	r3, #1
 800971c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009724:	d901      	bls.n	800972a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8009726:	2303      	movs	r3, #3
 8009728:	e006      	b.n	8009738 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	f003 0301 	and.w	r3, r3, #1
 8009732:	2b01      	cmp	r3, #1
 8009734:	d0f0      	beq.n	8009718 <USB_CoreReset+0x44>

  return HAL_OK;
 8009736:	2300      	movs	r3, #0
}
 8009738:	4618      	mov	r0, r3
 800973a:	3714      	adds	r7, #20
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	460b      	mov	r3, r1
 800974e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009750:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009754:	f002 fd1e 	bl	800c194 <USBD_static_malloc>
 8009758:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d109      	bne.n	8009774 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	32b0      	adds	r2, #176	@ 0xb0
 800976a:	2100      	movs	r1, #0
 800976c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009770:	2302      	movs	r3, #2
 8009772:	e0d4      	b.n	800991e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009774:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009778:	2100      	movs	r1, #0
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f002 fd4e 	bl	800c21c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	32b0      	adds	r2, #176	@ 0xb0
 800978a:	68f9      	ldr	r1, [r7, #12]
 800978c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	32b0      	adds	r2, #176	@ 0xb0
 800979a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	7c1b      	ldrb	r3, [r3, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d138      	bne.n	800981e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80097ac:	4b5e      	ldr	r3, [pc, #376]	@ (8009928 <USBD_CDC_Init+0x1e4>)
 80097ae:	7819      	ldrb	r1, [r3, #0]
 80097b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097b4:	2202      	movs	r2, #2
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f002 fbc9 	bl	800bf4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80097bc:	4b5a      	ldr	r3, [pc, #360]	@ (8009928 <USBD_CDC_Init+0x1e4>)
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	f003 020f 	and.w	r2, r3, #15
 80097c4:	6879      	ldr	r1, [r7, #4]
 80097c6:	4613      	mov	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	440b      	add	r3, r1
 80097d0:	3323      	adds	r3, #35	@ 0x23
 80097d2:	2201      	movs	r2, #1
 80097d4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80097d6:	4b55      	ldr	r3, [pc, #340]	@ (800992c <USBD_CDC_Init+0x1e8>)
 80097d8:	7819      	ldrb	r1, [r3, #0]
 80097da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097de:	2202      	movs	r2, #2
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f002 fbb4 	bl	800bf4e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80097e6:	4b51      	ldr	r3, [pc, #324]	@ (800992c <USBD_CDC_Init+0x1e8>)
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	f003 020f 	and.w	r2, r3, #15
 80097ee:	6879      	ldr	r1, [r7, #4]
 80097f0:	4613      	mov	r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4413      	add	r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	440b      	add	r3, r1
 80097fa:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80097fe:	2201      	movs	r2, #1
 8009800:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009802:	4b4b      	ldr	r3, [pc, #300]	@ (8009930 <USBD_CDC_Init+0x1ec>)
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	f003 020f 	and.w	r2, r3, #15
 800980a:	6879      	ldr	r1, [r7, #4]
 800980c:	4613      	mov	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	4413      	add	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	440b      	add	r3, r1
 8009816:	331c      	adds	r3, #28
 8009818:	2210      	movs	r2, #16
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	e035      	b.n	800988a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800981e:	4b42      	ldr	r3, [pc, #264]	@ (8009928 <USBD_CDC_Init+0x1e4>)
 8009820:	7819      	ldrb	r1, [r3, #0]
 8009822:	2340      	movs	r3, #64	@ 0x40
 8009824:	2202      	movs	r2, #2
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f002 fb91 	bl	800bf4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800982c:	4b3e      	ldr	r3, [pc, #248]	@ (8009928 <USBD_CDC_Init+0x1e4>)
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	f003 020f 	and.w	r2, r3, #15
 8009834:	6879      	ldr	r1, [r7, #4]
 8009836:	4613      	mov	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4413      	add	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	440b      	add	r3, r1
 8009840:	3323      	adds	r3, #35	@ 0x23
 8009842:	2201      	movs	r2, #1
 8009844:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009846:	4b39      	ldr	r3, [pc, #228]	@ (800992c <USBD_CDC_Init+0x1e8>)
 8009848:	7819      	ldrb	r1, [r3, #0]
 800984a:	2340      	movs	r3, #64	@ 0x40
 800984c:	2202      	movs	r2, #2
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f002 fb7d 	bl	800bf4e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009854:	4b35      	ldr	r3, [pc, #212]	@ (800992c <USBD_CDC_Init+0x1e8>)
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	f003 020f 	and.w	r2, r3, #15
 800985c:	6879      	ldr	r1, [r7, #4]
 800985e:	4613      	mov	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	440b      	add	r3, r1
 8009868:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800986c:	2201      	movs	r2, #1
 800986e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009870:	4b2f      	ldr	r3, [pc, #188]	@ (8009930 <USBD_CDC_Init+0x1ec>)
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	f003 020f 	and.w	r2, r3, #15
 8009878:	6879      	ldr	r1, [r7, #4]
 800987a:	4613      	mov	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4413      	add	r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	440b      	add	r3, r1
 8009884:	331c      	adds	r3, #28
 8009886:	2210      	movs	r2, #16
 8009888:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800988a:	4b29      	ldr	r3, [pc, #164]	@ (8009930 <USBD_CDC_Init+0x1ec>)
 800988c:	7819      	ldrb	r1, [r3, #0]
 800988e:	2308      	movs	r3, #8
 8009890:	2203      	movs	r2, #3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f002 fb5b 	bl	800bf4e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009898:	4b25      	ldr	r3, [pc, #148]	@ (8009930 <USBD_CDC_Init+0x1ec>)
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	f003 020f 	and.w	r2, r3, #15
 80098a0:	6879      	ldr	r1, [r7, #4]
 80098a2:	4613      	mov	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4413      	add	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	440b      	add	r3, r1
 80098ac:	3323      	adds	r3, #35	@ 0x23
 80098ae:	2201      	movs	r2, #1
 80098b0:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	33b0      	adds	r3, #176	@ 0xb0
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	4413      	add	r3, r2
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d101      	bne.n	80098ec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80098e8:	2302      	movs	r3, #2
 80098ea:	e018      	b.n	800991e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	7c1b      	ldrb	r3, [r3, #16]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d10a      	bne.n	800990a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80098f4:	4b0d      	ldr	r3, [pc, #52]	@ (800992c <USBD_CDC_Init+0x1e8>)
 80098f6:	7819      	ldrb	r1, [r3, #0]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80098fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f002 fc12 	bl	800c12c <USBD_LL_PrepareReceive>
 8009908:	e008      	b.n	800991c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800990a:	4b08      	ldr	r3, [pc, #32]	@ (800992c <USBD_CDC_Init+0x1e8>)
 800990c:	7819      	ldrb	r1, [r3, #0]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009914:	2340      	movs	r3, #64	@ 0x40
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f002 fc08 	bl	800c12c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	200000c7 	.word	0x200000c7
 800992c:	200000c8 	.word	0x200000c8
 8009930:	200000c9 	.word	0x200000c9

08009934 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	460b      	mov	r3, r1
 800993e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009940:	4b3a      	ldr	r3, [pc, #232]	@ (8009a2c <USBD_CDC_DeInit+0xf8>)
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	4619      	mov	r1, r3
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f002 fb27 	bl	800bf9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800994c:	4b37      	ldr	r3, [pc, #220]	@ (8009a2c <USBD_CDC_DeInit+0xf8>)
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	f003 020f 	and.w	r2, r3, #15
 8009954:	6879      	ldr	r1, [r7, #4]
 8009956:	4613      	mov	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4413      	add	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	440b      	add	r3, r1
 8009960:	3323      	adds	r3, #35	@ 0x23
 8009962:	2200      	movs	r2, #0
 8009964:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009966:	4b32      	ldr	r3, [pc, #200]	@ (8009a30 <USBD_CDC_DeInit+0xfc>)
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	4619      	mov	r1, r3
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f002 fb14 	bl	800bf9a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009972:	4b2f      	ldr	r3, [pc, #188]	@ (8009a30 <USBD_CDC_DeInit+0xfc>)
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	f003 020f 	and.w	r2, r3, #15
 800997a:	6879      	ldr	r1, [r7, #4]
 800997c:	4613      	mov	r3, r2
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	4413      	add	r3, r2
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	440b      	add	r3, r1
 8009986:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800998a:	2200      	movs	r2, #0
 800998c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800998e:	4b29      	ldr	r3, [pc, #164]	@ (8009a34 <USBD_CDC_DeInit+0x100>)
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	4619      	mov	r1, r3
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f002 fb00 	bl	800bf9a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800999a:	4b26      	ldr	r3, [pc, #152]	@ (8009a34 <USBD_CDC_DeInit+0x100>)
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	f003 020f 	and.w	r2, r3, #15
 80099a2:	6879      	ldr	r1, [r7, #4]
 80099a4:	4613      	mov	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4413      	add	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	440b      	add	r3, r1
 80099ae:	3323      	adds	r3, #35	@ 0x23
 80099b0:	2200      	movs	r2, #0
 80099b2:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80099b4:	4b1f      	ldr	r3, [pc, #124]	@ (8009a34 <USBD_CDC_DeInit+0x100>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	f003 020f 	and.w	r2, r3, #15
 80099bc:	6879      	ldr	r1, [r7, #4]
 80099be:	4613      	mov	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4413      	add	r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	440b      	add	r3, r1
 80099c8:	331c      	adds	r3, #28
 80099ca:	2200      	movs	r2, #0
 80099cc:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	32b0      	adds	r2, #176	@ 0xb0
 80099d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d01f      	beq.n	8009a20 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	33b0      	adds	r3, #176	@ 0xb0
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4413      	add	r3, r2
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	32b0      	adds	r2, #176	@ 0xb0
 80099fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f002 fbd4 	bl	800c1b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	32b0      	adds	r2, #176	@ 0xb0
 8009a12:	2100      	movs	r1, #0
 8009a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3708      	adds	r7, #8
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	200000c7 	.word	0x200000c7
 8009a30:	200000c8 	.word	0x200000c8
 8009a34:	200000c9 	.word	0x200000c9

08009a38 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	32b0      	adds	r2, #176	@ 0xb0
 8009a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009a52:	2300      	movs	r3, #0
 8009a54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009a56:	2300      	movs	r3, #0
 8009a58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d101      	bne.n	8009a68 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e0bf      	b.n	8009be8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d050      	beq.n	8009b16 <USBD_CDC_Setup+0xde>
 8009a74:	2b20      	cmp	r3, #32
 8009a76:	f040 80af 	bne.w	8009bd8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	88db      	ldrh	r3, [r3, #6]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d03a      	beq.n	8009af8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	b25b      	sxtb	r3, r3
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	da1b      	bge.n	8009ac4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	33b0      	adds	r3, #176	@ 0xb0
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	4413      	add	r3, r2
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	683a      	ldr	r2, [r7, #0]
 8009aa0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009aa2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009aa4:	683a      	ldr	r2, [r7, #0]
 8009aa6:	88d2      	ldrh	r2, [r2, #6]
 8009aa8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	88db      	ldrh	r3, [r3, #6]
 8009aae:	2b07      	cmp	r3, #7
 8009ab0:	bf28      	it	cs
 8009ab2:	2307      	movcs	r3, #7
 8009ab4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	89fa      	ldrh	r2, [r7, #14]
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f001 fda9 	bl	800b614 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009ac2:	e090      	b.n	8009be6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	785a      	ldrb	r2, [r3, #1]
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	88db      	ldrh	r3, [r3, #6]
 8009ad2:	2b3f      	cmp	r3, #63	@ 0x3f
 8009ad4:	d803      	bhi.n	8009ade <USBD_CDC_Setup+0xa6>
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	88db      	ldrh	r3, [r3, #6]
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	e000      	b.n	8009ae0 <USBD_CDC_Setup+0xa8>
 8009ade:	2240      	movs	r2, #64	@ 0x40
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009ae6:	6939      	ldr	r1, [r7, #16]
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009aee:	461a      	mov	r2, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f001 fdbe 	bl	800b672 <USBD_CtlPrepareRx>
      break;
 8009af6:	e076      	b.n	8009be6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	33b0      	adds	r3, #176	@ 0xb0
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4413      	add	r3, r2
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	7850      	ldrb	r0, [r2, #1]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	4798      	blx	r3
      break;
 8009b14:	e067      	b.n	8009be6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	785b      	ldrb	r3, [r3, #1]
 8009b1a:	2b0b      	cmp	r3, #11
 8009b1c:	d851      	bhi.n	8009bc2 <USBD_CDC_Setup+0x18a>
 8009b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b24 <USBD_CDC_Setup+0xec>)
 8009b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b24:	08009b55 	.word	0x08009b55
 8009b28:	08009bd1 	.word	0x08009bd1
 8009b2c:	08009bc3 	.word	0x08009bc3
 8009b30:	08009bc3 	.word	0x08009bc3
 8009b34:	08009bc3 	.word	0x08009bc3
 8009b38:	08009bc3 	.word	0x08009bc3
 8009b3c:	08009bc3 	.word	0x08009bc3
 8009b40:	08009bc3 	.word	0x08009bc3
 8009b44:	08009bc3 	.word	0x08009bc3
 8009b48:	08009bc3 	.word	0x08009bc3
 8009b4c:	08009b7f 	.word	0x08009b7f
 8009b50:	08009ba9 	.word	0x08009ba9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b03      	cmp	r3, #3
 8009b5e:	d107      	bne.n	8009b70 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009b60:	f107 030a 	add.w	r3, r7, #10
 8009b64:	2202      	movs	r2, #2
 8009b66:	4619      	mov	r1, r3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f001 fd53 	bl	800b614 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b6e:	e032      	b.n	8009bd6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f001 fcd1 	bl	800b51a <USBD_CtlError>
            ret = USBD_FAIL;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	75fb      	strb	r3, [r7, #23]
          break;
 8009b7c:	e02b      	b.n	8009bd6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b03      	cmp	r3, #3
 8009b88:	d107      	bne.n	8009b9a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009b8a:	f107 030d 	add.w	r3, r7, #13
 8009b8e:	2201      	movs	r2, #1
 8009b90:	4619      	mov	r1, r3
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f001 fd3e 	bl	800b614 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b98:	e01d      	b.n	8009bd6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009b9a:	6839      	ldr	r1, [r7, #0]
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f001 fcbc 	bl	800b51a <USBD_CtlError>
            ret = USBD_FAIL;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ba6:	e016      	b.n	8009bd6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b03      	cmp	r3, #3
 8009bb2:	d00f      	beq.n	8009bd4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009bb4:	6839      	ldr	r1, [r7, #0]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f001 fcaf 	bl	800b51a <USBD_CtlError>
            ret = USBD_FAIL;
 8009bbc:	2303      	movs	r3, #3
 8009bbe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009bc0:	e008      	b.n	8009bd4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009bc2:	6839      	ldr	r1, [r7, #0]
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f001 fca8 	bl	800b51a <USBD_CtlError>
          ret = USBD_FAIL;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	75fb      	strb	r3, [r7, #23]
          break;
 8009bce:	e002      	b.n	8009bd6 <USBD_CDC_Setup+0x19e>
          break;
 8009bd0:	bf00      	nop
 8009bd2:	e008      	b.n	8009be6 <USBD_CDC_Setup+0x1ae>
          break;
 8009bd4:	bf00      	nop
      }
      break;
 8009bd6:	e006      	b.n	8009be6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009bd8:	6839      	ldr	r1, [r7, #0]
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f001 fc9d 	bl	800b51a <USBD_CtlError>
      ret = USBD_FAIL;
 8009be0:	2303      	movs	r3, #3
 8009be2:	75fb      	strb	r3, [r7, #23]
      break;
 8009be4:	bf00      	nop
  }

  return (uint8_t)ret;
 8009be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3718      	adds	r7, #24
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	32b0      	adds	r2, #176	@ 0xb0
 8009c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d101      	bne.n	8009c1a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009c16:	2303      	movs	r3, #3
 8009c18:	e065      	b.n	8009ce6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	32b0      	adds	r2, #176	@ 0xb0
 8009c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c28:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009c2a:	78fb      	ldrb	r3, [r7, #3]
 8009c2c:	f003 020f 	and.w	r2, r3, #15
 8009c30:	6879      	ldr	r1, [r7, #4]
 8009c32:	4613      	mov	r3, r2
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	4413      	add	r3, r2
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	440b      	add	r3, r1
 8009c3c:	3314      	adds	r3, #20
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d02f      	beq.n	8009ca4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009c44:	78fb      	ldrb	r3, [r7, #3]
 8009c46:	f003 020f 	and.w	r2, r3, #15
 8009c4a:	6879      	ldr	r1, [r7, #4]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	440b      	add	r3, r1
 8009c56:	3314      	adds	r3, #20
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	78fb      	ldrb	r3, [r7, #3]
 8009c5c:	f003 010f 	and.w	r1, r3, #15
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	460b      	mov	r3, r1
 8009c64:	00db      	lsls	r3, r3, #3
 8009c66:	440b      	add	r3, r1
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4403      	add	r3, r0
 8009c6c:	331c      	adds	r3, #28
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	fbb2 f1f3 	udiv	r1, r2, r3
 8009c74:	fb01 f303 	mul.w	r3, r1, r3
 8009c78:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d112      	bne.n	8009ca4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009c7e:	78fb      	ldrb	r3, [r7, #3]
 8009c80:	f003 020f 	and.w	r2, r3, #15
 8009c84:	6879      	ldr	r1, [r7, #4]
 8009c86:	4613      	mov	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	440b      	add	r3, r1
 8009c90:	3314      	adds	r3, #20
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009c96:	78f9      	ldrb	r1, [r7, #3]
 8009c98:	2300      	movs	r3, #0
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f002 fa24 	bl	800c0ea <USBD_LL_Transmit>
 8009ca2:	e01f      	b.n	8009ce4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	33b0      	adds	r3, #176	@ 0xb0
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	4413      	add	r3, r2
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d010      	beq.n	8009ce4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	33b0      	adds	r3, #176	@ 0xb0
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	68ba      	ldr	r2, [r7, #8]
 8009cd6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009ce0:	78fa      	ldrb	r2, [r7, #3]
 8009ce2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	32b0      	adds	r2, #176	@ 0xb0
 8009d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d08:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	32b0      	adds	r2, #176	@ 0xb0
 8009d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d101      	bne.n	8009d20 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e01a      	b.n	8009d56 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009d20:	78fb      	ldrb	r3, [r7, #3]
 8009d22:	4619      	mov	r1, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f002 fa22 	bl	800c16e <USBD_LL_GetRxDataSize>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	33b0      	adds	r3, #176	@ 0xb0
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4413      	add	r3, r2
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009d50:	4611      	mov	r1, r2
 8009d52:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b084      	sub	sp, #16
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	32b0      	adds	r2, #176	@ 0xb0
 8009d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d74:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d101      	bne.n	8009d80 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e024      	b.n	8009dca <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	33b0      	adds	r3, #176	@ 0xb0
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d019      	beq.n	8009dc8 <USBD_CDC_EP0_RxReady+0x6a>
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009d9a:	2bff      	cmp	r3, #255	@ 0xff
 8009d9c:	d014      	beq.n	8009dc8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	33b0      	adds	r3, #176	@ 0xb0
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4413      	add	r3, r2
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009db6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009db8:	68fa      	ldr	r2, [r7, #12]
 8009dba:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009dbe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	22ff      	movs	r2, #255	@ 0xff
 8009dc4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
	...

08009dd4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ddc:	2182      	movs	r1, #130	@ 0x82
 8009dde:	4818      	ldr	r0, [pc, #96]	@ (8009e40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009de0:	f000 fd62 	bl	800a8a8 <USBD_GetEpDesc>
 8009de4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009de6:	2101      	movs	r1, #1
 8009de8:	4815      	ldr	r0, [pc, #84]	@ (8009e40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009dea:	f000 fd5d 	bl	800a8a8 <USBD_GetEpDesc>
 8009dee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009df0:	2181      	movs	r1, #129	@ 0x81
 8009df2:	4813      	ldr	r0, [pc, #76]	@ (8009e40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009df4:	f000 fd58 	bl	800a8a8 <USBD_GetEpDesc>
 8009df8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d002      	beq.n	8009e06 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	2210      	movs	r2, #16
 8009e04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d006      	beq.n	8009e1a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e14:	711a      	strb	r2, [r3, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d006      	beq.n	8009e2e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e28:	711a      	strb	r2, [r3, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2243      	movs	r2, #67	@ 0x43
 8009e32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009e34:	4b02      	ldr	r3, [pc, #8]	@ (8009e40 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3718      	adds	r7, #24
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	20000084 	.word	0x20000084

08009e44 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009e4c:	2182      	movs	r1, #130	@ 0x82
 8009e4e:	4818      	ldr	r0, [pc, #96]	@ (8009eb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009e50:	f000 fd2a 	bl	800a8a8 <USBD_GetEpDesc>
 8009e54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009e56:	2101      	movs	r1, #1
 8009e58:	4815      	ldr	r0, [pc, #84]	@ (8009eb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009e5a:	f000 fd25 	bl	800a8a8 <USBD_GetEpDesc>
 8009e5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009e60:	2181      	movs	r1, #129	@ 0x81
 8009e62:	4813      	ldr	r0, [pc, #76]	@ (8009eb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009e64:	f000 fd20 	bl	800a8a8 <USBD_GetEpDesc>
 8009e68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d002      	beq.n	8009e76 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	2210      	movs	r2, #16
 8009e74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d006      	beq.n	8009e8a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	711a      	strb	r2, [r3, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	f042 0202 	orr.w	r2, r2, #2
 8009e88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d006      	beq.n	8009e9e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	711a      	strb	r2, [r3, #4]
 8009e96:	2200      	movs	r2, #0
 8009e98:	f042 0202 	orr.w	r2, r2, #2
 8009e9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2243      	movs	r2, #67	@ 0x43
 8009ea2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ea4:	4b02      	ldr	r3, [pc, #8]	@ (8009eb0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3718      	adds	r7, #24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	20000084 	.word	0x20000084

08009eb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b086      	sub	sp, #24
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ebc:	2182      	movs	r1, #130	@ 0x82
 8009ebe:	4818      	ldr	r0, [pc, #96]	@ (8009f20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ec0:	f000 fcf2 	bl	800a8a8 <USBD_GetEpDesc>
 8009ec4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ec6:	2101      	movs	r1, #1
 8009ec8:	4815      	ldr	r0, [pc, #84]	@ (8009f20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009eca:	f000 fced 	bl	800a8a8 <USBD_GetEpDesc>
 8009ece:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ed0:	2181      	movs	r1, #129	@ 0x81
 8009ed2:	4813      	ldr	r0, [pc, #76]	@ (8009f20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ed4:	f000 fce8 	bl	800a8a8 <USBD_GetEpDesc>
 8009ed8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d002      	beq.n	8009ee6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	2210      	movs	r2, #16
 8009ee4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d006      	beq.n	8009efa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ef4:	711a      	strb	r2, [r3, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d006      	beq.n	8009f0e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	2200      	movs	r2, #0
 8009f04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f08:	711a      	strb	r2, [r3, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2243      	movs	r2, #67	@ 0x43
 8009f12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009f14:	4b02      	ldr	r3, [pc, #8]	@ (8009f20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3718      	adds	r7, #24
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	20000084 	.word	0x20000084

08009f24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	220a      	movs	r2, #10
 8009f30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009f32:	4b03      	ldr	r3, [pc, #12]	@ (8009f40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	20000040 	.word	0x20000040

08009f44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009f54:	2303      	movs	r3, #3
 8009f56:	e009      	b.n	8009f6c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	33b0      	adds	r3, #176	@ 0xb0
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4413      	add	r3, r2
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b087      	sub	sp, #28
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	32b0      	adds	r2, #176	@ 0xb0
 8009f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f92:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d101      	bne.n	8009f9e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e008      	b.n	8009fb0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	68ba      	ldr	r2, [r7, #8]
 8009fa2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009fae:	2300      	movs	r3, #0
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	371c      	adds	r7, #28
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fba:	4770      	bx	lr

08009fbc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	32b0      	adds	r2, #176	@ 0xb0
 8009fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fd4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d101      	bne.n	8009fe0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009fdc:	2303      	movs	r3, #3
 8009fde:	e004      	b.n	8009fea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3714      	adds	r7, #20
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
	...

08009ff8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	32b0      	adds	r2, #176	@ 0xb0
 800a00a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a00e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a010:	2301      	movs	r3, #1
 800a012:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d101      	bne.n	800a01e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a01a:	2303      	movs	r3, #3
 800a01c:	e025      	b.n	800a06a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a024:	2b00      	cmp	r3, #0
 800a026:	d11f      	bne.n	800a068 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a030:	4b10      	ldr	r3, [pc, #64]	@ (800a074 <USBD_CDC_TransmitPacket+0x7c>)
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	f003 020f 	and.w	r2, r3, #15
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	4613      	mov	r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4403      	add	r3, r0
 800a04a:	3314      	adds	r3, #20
 800a04c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a04e:	4b09      	ldr	r3, [pc, #36]	@ (800a074 <USBD_CDC_TransmitPacket+0x7c>)
 800a050:	7819      	ldrb	r1, [r3, #0]
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f002 f843 	bl	800c0ea <USBD_LL_Transmit>

    ret = USBD_OK;
 800a064:	2300      	movs	r3, #0
 800a066:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a068:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	200000c7 	.word	0x200000c7

0800a078 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	32b0      	adds	r2, #176	@ 0xb0
 800a08a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a08e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	32b0      	adds	r2, #176	@ 0xb0
 800a09a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	e018      	b.n	800a0d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	7c1b      	ldrb	r3, [r3, #16]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10a      	bne.n	800a0c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a0ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a0e0 <USBD_CDC_ReceivePacket+0x68>)
 800a0b0:	7819      	ldrb	r1, [r3, #0]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a0b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f002 f835 	bl	800c12c <USBD_LL_PrepareReceive>
 800a0c2:	e008      	b.n	800a0d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a0c4:	4b06      	ldr	r3, [pc, #24]	@ (800a0e0 <USBD_CDC_ReceivePacket+0x68>)
 800a0c6:	7819      	ldrb	r1, [r3, #0]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a0ce:	2340      	movs	r3, #64	@ 0x40
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f002 f82b 	bl	800c12c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3710      	adds	r7, #16
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	200000c8 	.word	0x200000c8

0800a0e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d101      	bne.n	800a0fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a0f8:	2303      	movs	r3, #3
 800a0fa:	e01f      	b.n	800a13c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	68ba      	ldr	r2, [r7, #8]
 800a11e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	79fa      	ldrb	r2, [r7, #7]
 800a12e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f001 fea5 	bl	800be80 <USBD_LL_Init>
 800a136:	4603      	mov	r3, r0
 800a138:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a13a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3718      	adds	r7, #24
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a14e:	2300      	movs	r3, #0
 800a150:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a158:	2303      	movs	r3, #3
 800a15a:	e025      	b.n	800a1a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	683a      	ldr	r2, [r7, #0]
 800a160:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	32ae      	adds	r2, #174	@ 0xae
 800a16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00f      	beq.n	800a198 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	32ae      	adds	r2, #174	@ 0xae
 800a182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a188:	f107 020e 	add.w	r2, r7, #14
 800a18c:	4610      	mov	r0, r2
 800a18e:	4798      	blx	r3
 800a190:	4602      	mov	r2, r0
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a19e:	1c5a      	adds	r2, r3, #1
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3710      	adds	r7, #16
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f001 fead 	bl	800bf18 <USBD_LL_Start>
 800a1be:	4603      	mov	r3, r0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3708      	adds	r7, #8
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a1d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	370c      	adds	r7, #12
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr

0800a1de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b084      	sub	sp, #16
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d009      	beq.n	800a20c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	78fa      	ldrb	r2, [r7, #3]
 800a202:	4611      	mov	r1, r2
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	4798      	blx	r3
 800a208:	4603      	mov	r3, r0
 800a20a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b084      	sub	sp, #16
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	460b      	mov	r3, r1
 800a220:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a222:	2300      	movs	r3, #0
 800a224:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	78fa      	ldrb	r2, [r7, #3]
 800a230:	4611      	mov	r1, r2
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	4798      	blx	r3
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d001      	beq.n	800a240 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a23c:	2303      	movs	r3, #3
 800a23e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a240:	7bfb      	ldrb	r3, [r7, #15]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b084      	sub	sp, #16
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
 800a252:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a25a:	6839      	ldr	r1, [r7, #0]
 800a25c:	4618      	mov	r0, r3
 800a25e:	f001 f922 	bl	800b4a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a270:	461a      	mov	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a27e:	f003 031f 	and.w	r3, r3, #31
 800a282:	2b02      	cmp	r3, #2
 800a284:	d01a      	beq.n	800a2bc <USBD_LL_SetupStage+0x72>
 800a286:	2b02      	cmp	r3, #2
 800a288:	d822      	bhi.n	800a2d0 <USBD_LL_SetupStage+0x86>
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d002      	beq.n	800a294 <USBD_LL_SetupStage+0x4a>
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d00a      	beq.n	800a2a8 <USBD_LL_SetupStage+0x5e>
 800a292:	e01d      	b.n	800a2d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a29a:	4619      	mov	r1, r3
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 fb77 	bl	800a990 <USBD_StdDevReq>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	73fb      	strb	r3, [r7, #15]
      break;
 800a2a6:	e020      	b.n	800a2ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 fbdf 	bl	800aa74 <USBD_StdItfReq>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	73fb      	strb	r3, [r7, #15]
      break;
 800a2ba:	e016      	b.n	800a2ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 fc41 	bl	800ab4c <USBD_StdEPReq>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a2ce:	e00c      	b.n	800a2ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a2d6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	4619      	mov	r1, r3
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f001 fe7a 	bl	800bfd8 <USBD_LL_StallEP>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a2e8:	bf00      	nop
  }

  return ret;
 800a2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	607a      	str	r2, [r7, #4]
 800a300:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a302:	2300      	movs	r3, #0
 800a304:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a306:	7afb      	ldrb	r3, [r7, #11]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d177      	bne.n	800a3fc <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a312:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a31a:	2b03      	cmp	r3, #3
 800a31c:	f040 80a1 	bne.w	800a462 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	693a      	ldr	r2, [r7, #16]
 800a326:	8992      	ldrh	r2, [r2, #12]
 800a328:	4293      	cmp	r3, r2
 800a32a:	d91c      	bls.n	800a366 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	685b      	ldr	r3, [r3, #4]
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	8992      	ldrh	r2, [r2, #12]
 800a334:	1a9a      	subs	r2, r3, r2
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	693a      	ldr	r2, [r7, #16]
 800a340:	8992      	ldrh	r2, [r2, #12]
 800a342:	441a      	add	r2, r3
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	6919      	ldr	r1, [r3, #16]
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	899b      	ldrh	r3, [r3, #12]
 800a350:	461a      	mov	r2, r3
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	4293      	cmp	r3, r2
 800a358:	bf38      	it	cc
 800a35a:	4613      	movcc	r3, r2
 800a35c:	461a      	mov	r2, r3
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f001 f9a8 	bl	800b6b4 <USBD_CtlContinueRx>
 800a364:	e07d      	b.n	800a462 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a36c:	f003 031f 	and.w	r3, r3, #31
 800a370:	2b02      	cmp	r3, #2
 800a372:	d014      	beq.n	800a39e <USBD_LL_DataOutStage+0xaa>
 800a374:	2b02      	cmp	r3, #2
 800a376:	d81d      	bhi.n	800a3b4 <USBD_LL_DataOutStage+0xc0>
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d002      	beq.n	800a382 <USBD_LL_DataOutStage+0x8e>
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d003      	beq.n	800a388 <USBD_LL_DataOutStage+0x94>
 800a380:	e018      	b.n	800a3b4 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a382:	2300      	movs	r3, #0
 800a384:	75bb      	strb	r3, [r7, #22]
            break;
 800a386:	e018      	b.n	800a3ba <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	4619      	mov	r1, r3
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f000 fa6e 	bl	800a874 <USBD_CoreFindIF>
 800a398:	4603      	mov	r3, r0
 800a39a:	75bb      	strb	r3, [r7, #22]
            break;
 800a39c:	e00d      	b.n	800a3ba <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	68f8      	ldr	r0, [r7, #12]
 800a3aa:	f000 fa70 	bl	800a88e <USBD_CoreFindEP>
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	75bb      	strb	r3, [r7, #22]
            break;
 800a3b2:	e002      	b.n	800a3ba <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	75bb      	strb	r3, [r7, #22]
            break;
 800a3b8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a3ba:	7dbb      	ldrb	r3, [r7, #22]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d119      	bne.n	800a3f4 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b03      	cmp	r3, #3
 800a3ca:	d113      	bne.n	800a3f4 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a3cc:	7dba      	ldrb	r2, [r7, #22]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	32ae      	adds	r2, #174	@ 0xae
 800a3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00b      	beq.n	800a3f4 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800a3dc:	7dba      	ldrb	r2, [r7, #22]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a3e4:	7dba      	ldrb	r2, [r7, #22]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	32ae      	adds	r2, #174	@ 0xae
 800a3ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f001 f96e 	bl	800b6d6 <USBD_CtlSendStatus>
 800a3fa:	e032      	b.n	800a462 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a3fc:	7afb      	ldrb	r3, [r7, #11]
 800a3fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a402:	b2db      	uxtb	r3, r3
 800a404:	4619      	mov	r1, r3
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f000 fa41 	bl	800a88e <USBD_CoreFindEP>
 800a40c:	4603      	mov	r3, r0
 800a40e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a410:	7dbb      	ldrb	r3, [r7, #22]
 800a412:	2bff      	cmp	r3, #255	@ 0xff
 800a414:	d025      	beq.n	800a462 <USBD_LL_DataOutStage+0x16e>
 800a416:	7dbb      	ldrb	r3, [r7, #22]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d122      	bne.n	800a462 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a422:	b2db      	uxtb	r3, r3
 800a424:	2b03      	cmp	r3, #3
 800a426:	d117      	bne.n	800a458 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a428:	7dba      	ldrb	r2, [r7, #22]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	32ae      	adds	r2, #174	@ 0xae
 800a42e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00f      	beq.n	800a458 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800a438:	7dba      	ldrb	r2, [r7, #22]
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a440:	7dba      	ldrb	r2, [r7, #22]
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	32ae      	adds	r2, #174	@ 0xae
 800a446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a44a:	699b      	ldr	r3, [r3, #24]
 800a44c:	7afa      	ldrb	r2, [r7, #11]
 800a44e:	4611      	mov	r1, r2
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	4798      	blx	r3
 800a454:	4603      	mov	r3, r0
 800a456:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a458:	7dfb      	ldrb	r3, [r7, #23]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800a45e:	7dfb      	ldrb	r3, [r7, #23]
 800a460:	e000      	b.n	800a464 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3718      	adds	r7, #24
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b086      	sub	sp, #24
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	460b      	mov	r3, r1
 800a476:	607a      	str	r2, [r7, #4]
 800a478:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a47a:	7afb      	ldrb	r3, [r7, #11]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d178      	bne.n	800a572 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	3314      	adds	r3, #20
 800a484:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a48c:	2b02      	cmp	r3, #2
 800a48e:	d163      	bne.n	800a558 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	8992      	ldrh	r2, [r2, #12]
 800a498:	4293      	cmp	r3, r2
 800a49a:	d91c      	bls.n	800a4d6 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	8992      	ldrh	r2, [r2, #12]
 800a4a4:	1a9a      	subs	r2, r3, r2
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	693a      	ldr	r2, [r7, #16]
 800a4b0:	8992      	ldrh	r2, [r2, #12]
 800a4b2:	441a      	add	r2, r3
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	6919      	ldr	r1, [r3, #16]
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f001 f8c4 	bl	800b650 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f001 fe2c 	bl	800c12c <USBD_LL_PrepareReceive>
 800a4d4:	e040      	b.n	800a558 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	899b      	ldrh	r3, [r3, #12]
 800a4da:	461a      	mov	r2, r3
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d11c      	bne.n	800a51e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	693a      	ldr	r2, [r7, #16]
 800a4ea:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a4ec:	4293      	cmp	r3, r2
 800a4ee:	d316      	bcc.n	800a51e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d20f      	bcs.n	800a51e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a4fe:	2200      	movs	r2, #0
 800a500:	2100      	movs	r1, #0
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f001 f8a4 	bl	800b650 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a510:	2300      	movs	r3, #0
 800a512:	2200      	movs	r2, #0
 800a514:	2100      	movs	r1, #0
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f001 fe08 	bl	800c12c <USBD_LL_PrepareReceive>
 800a51c:	e01c      	b.n	800a558 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a524:	b2db      	uxtb	r3, r3
 800a526:	2b03      	cmp	r3, #3
 800a528:	d10f      	bne.n	800a54a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d009      	beq.n	800a54a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a54a:	2180      	movs	r1, #128	@ 0x80
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f001 fd43 	bl	800bfd8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a552:	68f8      	ldr	r0, [r7, #12]
 800a554:	f001 f8d2 	bl	800b6fc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d03a      	beq.n	800a5d8 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f7ff fe30 	bl	800a1c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a570:	e032      	b.n	800a5d8 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a572:	7afb      	ldrb	r3, [r7, #11]
 800a574:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	4619      	mov	r1, r3
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f000 f986 	bl	800a88e <USBD_CoreFindEP>
 800a582:	4603      	mov	r3, r0
 800a584:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a586:	7dfb      	ldrb	r3, [r7, #23]
 800a588:	2bff      	cmp	r3, #255	@ 0xff
 800a58a:	d025      	beq.n	800a5d8 <USBD_LL_DataInStage+0x16c>
 800a58c:	7dfb      	ldrb	r3, [r7, #23]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d122      	bne.n	800a5d8 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a598:	b2db      	uxtb	r3, r3
 800a59a:	2b03      	cmp	r3, #3
 800a59c:	d11c      	bne.n	800a5d8 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a59e:	7dfa      	ldrb	r2, [r7, #23]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	32ae      	adds	r2, #174	@ 0xae
 800a5a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a8:	695b      	ldr	r3, [r3, #20]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d014      	beq.n	800a5d8 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800a5ae:	7dfa      	ldrb	r2, [r7, #23]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a5b6:	7dfa      	ldrb	r2, [r7, #23]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	32ae      	adds	r2, #174	@ 0xae
 800a5bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c0:	695b      	ldr	r3, [r3, #20]
 800a5c2:	7afa      	ldrb	r2, [r7, #11]
 800a5c4:	4611      	mov	r1, r2
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	4798      	blx	r3
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a5ce:	7dbb      	ldrb	r3, [r7, #22]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d001      	beq.n	800a5d8 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800a5d4:	7dbb      	ldrb	r3, [r7, #22]
 800a5d6:	e000      	b.n	800a5da <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800a5d8:	2300      	movs	r3, #0
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3718      	adds	r7, #24
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b084      	sub	sp, #16
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d014      	beq.n	800a648 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00e      	beq.n	800a648 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	6852      	ldr	r2, [r2, #4]
 800a636:	b2d2      	uxtb	r2, r2
 800a638:	4611      	mov	r1, r2
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	4798      	blx	r3
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a644:	2303      	movs	r3, #3
 800a646:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a648:	2340      	movs	r3, #64	@ 0x40
 800a64a:	2200      	movs	r2, #0
 800a64c:	2100      	movs	r1, #0
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f001 fc7d 	bl	800bf4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2240      	movs	r2, #64	@ 0x40
 800a660:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a664:	2340      	movs	r3, #64	@ 0x40
 800a666:	2200      	movs	r2, #0
 800a668:	2180      	movs	r1, #128	@ 0x80
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f001 fc6f 	bl	800bf4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2240      	movs	r2, #64	@ 0x40
 800a67c:	841a      	strh	r2, [r3, #32]

  return ret;
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a680:	4618      	mov	r0, r3
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	460b      	mov	r3, r1
 800a692:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	78fa      	ldrb	r2, [r7, #3]
 800a698:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr

0800a6a8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	2b04      	cmp	r3, #4
 800a6ba:	d006      	beq.n	800a6ca <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2204      	movs	r2, #4
 800a6ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	2b04      	cmp	r3, #4
 800a6f2:	d106      	bne.n	800a702 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a6fa:	b2da      	uxtb	r2, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	2b03      	cmp	r3, #3
 800a722:	d110      	bne.n	800a746 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d00b      	beq.n	800a746 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a734:	69db      	ldr	r3, [r3, #28]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d005      	beq.n	800a746 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a740:	69db      	ldr	r3, [r3, #28]
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3708      	adds	r7, #8
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	460b      	mov	r3, r1
 800a75a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	32ae      	adds	r2, #174	@ 0xae
 800a766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d101      	bne.n	800a772 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a76e:	2303      	movs	r3, #3
 800a770:	e01c      	b.n	800a7ac <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	2b03      	cmp	r3, #3
 800a77c:	d115      	bne.n	800a7aa <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	32ae      	adds	r2, #174	@ 0xae
 800a788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a78c:	6a1b      	ldr	r3, [r3, #32]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00b      	beq.n	800a7aa <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	32ae      	adds	r2, #174	@ 0xae
 800a79c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	78fa      	ldrb	r2, [r7, #3]
 800a7a4:	4611      	mov	r1, r2
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a7aa:	2300      	movs	r3, #0
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	460b      	mov	r3, r1
 800a7be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	32ae      	adds	r2, #174	@ 0xae
 800a7ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d101      	bne.n	800a7d6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a7d2:	2303      	movs	r3, #3
 800a7d4:	e01c      	b.n	800a810 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	2b03      	cmp	r3, #3
 800a7e0:	d115      	bne.n	800a80e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	32ae      	adds	r2, #174	@ 0xae
 800a7ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00b      	beq.n	800a80e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	32ae      	adds	r2, #174	@ 0xae
 800a800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a806:	78fa      	ldrb	r2, [r7, #3]
 800a808:	4611      	mov	r1, r2
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3708      	adds	r7, #8
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr

0800a82e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b084      	sub	sp, #16
 800a832:	af00      	add	r7, sp, #0
 800a834:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2201      	movs	r2, #1
 800a83e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d00e      	beq.n	800a86a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	6852      	ldr	r2, [r2, #4]
 800a858:	b2d2      	uxtb	r2, r2
 800a85a:	4611      	mov	r1, r2
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	4798      	blx	r3
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d001      	beq.n	800a86a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a866:	2303      	movs	r3, #3
 800a868:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	460b      	mov	r3, r1
 800a87e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a880:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a882:	4618      	mov	r0, r3
 800a884:	370c      	adds	r7, #12
 800a886:	46bd      	mov	sp, r7
 800a888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88c:	4770      	bx	lr

0800a88e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a88e:	b480      	push	{r7}
 800a890:	b083      	sub	sp, #12
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
 800a896:	460b      	mov	r3, r1
 800a898:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a89a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr

0800a8a8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	885b      	ldrh	r3, [r3, #2]
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	7812      	ldrb	r2, [r2, #0]
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d91f      	bls.n	800a90e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a8d4:	e013      	b.n	800a8fe <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a8d6:	f107 030a 	add.w	r3, r7, #10
 800a8da:	4619      	mov	r1, r3
 800a8dc:	6978      	ldr	r0, [r7, #20]
 800a8de:	f000 f81b 	bl	800a918 <USBD_GetNextDesc>
 800a8e2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	785b      	ldrb	r3, [r3, #1]
 800a8e8:	2b05      	cmp	r3, #5
 800a8ea:	d108      	bne.n	800a8fe <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	789b      	ldrb	r3, [r3, #2]
 800a8f4:	78fa      	ldrb	r2, [r7, #3]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d008      	beq.n	800a90c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	885b      	ldrh	r3, [r3, #2]
 800a902:	b29a      	uxth	r2, r3
 800a904:	897b      	ldrh	r3, [r7, #10]
 800a906:	429a      	cmp	r2, r3
 800a908:	d8e5      	bhi.n	800a8d6 <USBD_GetEpDesc+0x2e>
 800a90a:	e000      	b.n	800a90e <USBD_GetEpDesc+0x66>
          break;
 800a90c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a90e:	693b      	ldr	r3, [r7, #16]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3718      	adds	r7, #24
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	881b      	ldrh	r3, [r3, #0]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	7812      	ldrb	r2, [r2, #0]
 800a92e:	4413      	add	r3, r2
 800a930:	b29a      	uxth	r2, r3
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	461a      	mov	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4413      	add	r3, r2
 800a940:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a942:	68fb      	ldr	r3, [r7, #12]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3714      	adds	r7, #20
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a950:	b480      	push	{r7}
 800a952:	b087      	sub	sp, #28
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	3301      	adds	r3, #1
 800a966:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	781b      	ldrb	r3, [r3, #0]
 800a96c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a96e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a972:	021b      	lsls	r3, r3, #8
 800a974:	b21a      	sxth	r2, r3
 800a976:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	b21b      	sxth	r3, r3
 800a97e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a980:	89fb      	ldrh	r3, [r7, #14]
}
 800a982:	4618      	mov	r0, r3
 800a984:	371c      	adds	r7, #28
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
	...

0800a990 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a99a:	2300      	movs	r3, #0
 800a99c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	781b      	ldrb	r3, [r3, #0]
 800a9a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a9a6:	2b40      	cmp	r3, #64	@ 0x40
 800a9a8:	d005      	beq.n	800a9b6 <USBD_StdDevReq+0x26>
 800a9aa:	2b40      	cmp	r3, #64	@ 0x40
 800a9ac:	d857      	bhi.n	800aa5e <USBD_StdDevReq+0xce>
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d00f      	beq.n	800a9d2 <USBD_StdDevReq+0x42>
 800a9b2:	2b20      	cmp	r3, #32
 800a9b4:	d153      	bne.n	800aa5e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	32ae      	adds	r2, #174	@ 0xae
 800a9c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	6839      	ldr	r1, [r7, #0]
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	4798      	blx	r3
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	73fb      	strb	r3, [r7, #15]
      break;
 800a9d0:	e04a      	b.n	800aa68 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	785b      	ldrb	r3, [r3, #1]
 800a9d6:	2b09      	cmp	r3, #9
 800a9d8:	d83b      	bhi.n	800aa52 <USBD_StdDevReq+0xc2>
 800a9da:	a201      	add	r2, pc, #4	@ (adr r2, 800a9e0 <USBD_StdDevReq+0x50>)
 800a9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e0:	0800aa35 	.word	0x0800aa35
 800a9e4:	0800aa49 	.word	0x0800aa49
 800a9e8:	0800aa53 	.word	0x0800aa53
 800a9ec:	0800aa3f 	.word	0x0800aa3f
 800a9f0:	0800aa53 	.word	0x0800aa53
 800a9f4:	0800aa13 	.word	0x0800aa13
 800a9f8:	0800aa09 	.word	0x0800aa09
 800a9fc:	0800aa53 	.word	0x0800aa53
 800aa00:	0800aa2b 	.word	0x0800aa2b
 800aa04:	0800aa1d 	.word	0x0800aa1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aa08:	6839      	ldr	r1, [r7, #0]
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fa3e 	bl	800ae8c <USBD_GetDescriptor>
          break;
 800aa10:	e024      	b.n	800aa5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aa12:	6839      	ldr	r1, [r7, #0]
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 fba3 	bl	800b160 <USBD_SetAddress>
          break;
 800aa1a:	e01f      	b.n	800aa5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aa1c:	6839      	ldr	r1, [r7, #0]
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 fbe2 	bl	800b1e8 <USBD_SetConfig>
 800aa24:	4603      	mov	r3, r0
 800aa26:	73fb      	strb	r3, [r7, #15]
          break;
 800aa28:	e018      	b.n	800aa5c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aa2a:	6839      	ldr	r1, [r7, #0]
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 fc85 	bl	800b33c <USBD_GetConfig>
          break;
 800aa32:	e013      	b.n	800aa5c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aa34:	6839      	ldr	r1, [r7, #0]
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f000 fcb6 	bl	800b3a8 <USBD_GetStatus>
          break;
 800aa3c:	e00e      	b.n	800aa5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aa3e:	6839      	ldr	r1, [r7, #0]
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 fce5 	bl	800b410 <USBD_SetFeature>
          break;
 800aa46:	e009      	b.n	800aa5c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aa48:	6839      	ldr	r1, [r7, #0]
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fd09 	bl	800b462 <USBD_ClrFeature>
          break;
 800aa50:	e004      	b.n	800aa5c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800aa52:	6839      	ldr	r1, [r7, #0]
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 fd60 	bl	800b51a <USBD_CtlError>
          break;
 800aa5a:	bf00      	nop
      }
      break;
 800aa5c:	e004      	b.n	800aa68 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800aa5e:	6839      	ldr	r1, [r7, #0]
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f000 fd5a 	bl	800b51a <USBD_CtlError>
      break;
 800aa66:	bf00      	nop
  }

  return ret;
 800aa68:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop

0800aa74 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa8a:	2b40      	cmp	r3, #64	@ 0x40
 800aa8c:	d005      	beq.n	800aa9a <USBD_StdItfReq+0x26>
 800aa8e:	2b40      	cmp	r3, #64	@ 0x40
 800aa90:	d852      	bhi.n	800ab38 <USBD_StdItfReq+0xc4>
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d001      	beq.n	800aa9a <USBD_StdItfReq+0x26>
 800aa96:	2b20      	cmp	r3, #32
 800aa98:	d14e      	bne.n	800ab38 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	3b01      	subs	r3, #1
 800aaa4:	2b02      	cmp	r3, #2
 800aaa6:	d840      	bhi.n	800ab2a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	889b      	ldrh	r3, [r3, #4]
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d836      	bhi.n	800ab20 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	889b      	ldrh	r3, [r3, #4]
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	4619      	mov	r1, r3
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7ff feda 	bl	800a874 <USBD_CoreFindIF>
 800aac0:	4603      	mov	r3, r0
 800aac2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aac4:	7bbb      	ldrb	r3, [r7, #14]
 800aac6:	2bff      	cmp	r3, #255	@ 0xff
 800aac8:	d01d      	beq.n	800ab06 <USBD_StdItfReq+0x92>
 800aaca:	7bbb      	ldrb	r3, [r7, #14]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d11a      	bne.n	800ab06 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aad0:	7bba      	ldrb	r2, [r7, #14]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	32ae      	adds	r2, #174	@ 0xae
 800aad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00f      	beq.n	800ab00 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800aae0:	7bba      	ldrb	r2, [r7, #14]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aae8:	7bba      	ldrb	r2, [r7, #14]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	32ae      	adds	r2, #174	@ 0xae
 800aaee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	4798      	blx	r3
 800aafa:	4603      	mov	r3, r0
 800aafc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aafe:	e004      	b.n	800ab0a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ab00:	2303      	movs	r3, #3
 800ab02:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ab04:	e001      	b.n	800ab0a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ab06:	2303      	movs	r3, #3
 800ab08:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	88db      	ldrh	r3, [r3, #6]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d110      	bne.n	800ab34 <USBD_StdItfReq+0xc0>
 800ab12:	7bfb      	ldrb	r3, [r7, #15]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d10d      	bne.n	800ab34 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 fddc 	bl	800b6d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ab1e:	e009      	b.n	800ab34 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ab20:	6839      	ldr	r1, [r7, #0]
 800ab22:	6878      	ldr	r0, [r7, #4]
 800ab24:	f000 fcf9 	bl	800b51a <USBD_CtlError>
          break;
 800ab28:	e004      	b.n	800ab34 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ab2a:	6839      	ldr	r1, [r7, #0]
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fcf4 	bl	800b51a <USBD_CtlError>
          break;
 800ab32:	e000      	b.n	800ab36 <USBD_StdItfReq+0xc2>
          break;
 800ab34:	bf00      	nop
      }
      break;
 800ab36:	e004      	b.n	800ab42 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ab38:	6839      	ldr	r1, [r7, #0]
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 fced 	bl	800b51a <USBD_CtlError>
      break;
 800ab40:	bf00      	nop
  }

  return ret;
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab56:	2300      	movs	r3, #0
 800ab58:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	889b      	ldrh	r3, [r3, #4]
 800ab5e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab68:	2b40      	cmp	r3, #64	@ 0x40
 800ab6a:	d007      	beq.n	800ab7c <USBD_StdEPReq+0x30>
 800ab6c:	2b40      	cmp	r3, #64	@ 0x40
 800ab6e:	f200 8181 	bhi.w	800ae74 <USBD_StdEPReq+0x328>
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d02a      	beq.n	800abcc <USBD_StdEPReq+0x80>
 800ab76:	2b20      	cmp	r3, #32
 800ab78:	f040 817c 	bne.w	800ae74 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ab7c:	7bbb      	ldrb	r3, [r7, #14]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	6878      	ldr	r0, [r7, #4]
 800ab82:	f7ff fe84 	bl	800a88e <USBD_CoreFindEP>
 800ab86:	4603      	mov	r3, r0
 800ab88:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab8a:	7b7b      	ldrb	r3, [r7, #13]
 800ab8c:	2bff      	cmp	r3, #255	@ 0xff
 800ab8e:	f000 8176 	beq.w	800ae7e <USBD_StdEPReq+0x332>
 800ab92:	7b7b      	ldrb	r3, [r7, #13]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	f040 8172 	bne.w	800ae7e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800ab9a:	7b7a      	ldrb	r2, [r7, #13]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800aba2:	7b7a      	ldrb	r2, [r7, #13]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	32ae      	adds	r2, #174	@ 0xae
 800aba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	f000 8165 	beq.w	800ae7e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800abb4:	7b7a      	ldrb	r2, [r7, #13]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	32ae      	adds	r2, #174	@ 0xae
 800abba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	4798      	blx	r3
 800abc6:	4603      	mov	r3, r0
 800abc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800abca:	e158      	b.n	800ae7e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	785b      	ldrb	r3, [r3, #1]
 800abd0:	2b03      	cmp	r3, #3
 800abd2:	d008      	beq.n	800abe6 <USBD_StdEPReq+0x9a>
 800abd4:	2b03      	cmp	r3, #3
 800abd6:	f300 8147 	bgt.w	800ae68 <USBD_StdEPReq+0x31c>
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f000 809b 	beq.w	800ad16 <USBD_StdEPReq+0x1ca>
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d03c      	beq.n	800ac5e <USBD_StdEPReq+0x112>
 800abe4:	e140      	b.n	800ae68 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d002      	beq.n	800abf8 <USBD_StdEPReq+0xac>
 800abf2:	2b03      	cmp	r3, #3
 800abf4:	d016      	beq.n	800ac24 <USBD_StdEPReq+0xd8>
 800abf6:	e02c      	b.n	800ac52 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abf8:	7bbb      	ldrb	r3, [r7, #14]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00d      	beq.n	800ac1a <USBD_StdEPReq+0xce>
 800abfe:	7bbb      	ldrb	r3, [r7, #14]
 800ac00:	2b80      	cmp	r3, #128	@ 0x80
 800ac02:	d00a      	beq.n	800ac1a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac04:	7bbb      	ldrb	r3, [r7, #14]
 800ac06:	4619      	mov	r1, r3
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f001 f9e5 	bl	800bfd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac0e:	2180      	movs	r1, #128	@ 0x80
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f001 f9e1 	bl	800bfd8 <USBD_LL_StallEP>
 800ac16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac18:	e020      	b.n	800ac5c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ac1a:	6839      	ldr	r1, [r7, #0]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f000 fc7c 	bl	800b51a <USBD_CtlError>
              break;
 800ac22:	e01b      	b.n	800ac5c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	885b      	ldrh	r3, [r3, #2]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10e      	bne.n	800ac4a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ac2c:	7bbb      	ldrb	r3, [r7, #14]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d00b      	beq.n	800ac4a <USBD_StdEPReq+0xfe>
 800ac32:	7bbb      	ldrb	r3, [r7, #14]
 800ac34:	2b80      	cmp	r3, #128	@ 0x80
 800ac36:	d008      	beq.n	800ac4a <USBD_StdEPReq+0xfe>
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	88db      	ldrh	r3, [r3, #6]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d104      	bne.n	800ac4a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac40:	7bbb      	ldrb	r3, [r7, #14]
 800ac42:	4619      	mov	r1, r3
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f001 f9c7 	bl	800bfd8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fd43 	bl	800b6d6 <USBD_CtlSendStatus>

              break;
 800ac50:	e004      	b.n	800ac5c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ac52:	6839      	ldr	r1, [r7, #0]
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 fc60 	bl	800b51a <USBD_CtlError>
              break;
 800ac5a:	bf00      	nop
          }
          break;
 800ac5c:	e109      	b.n	800ae72 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	d002      	beq.n	800ac70 <USBD_StdEPReq+0x124>
 800ac6a:	2b03      	cmp	r3, #3
 800ac6c:	d016      	beq.n	800ac9c <USBD_StdEPReq+0x150>
 800ac6e:	e04b      	b.n	800ad08 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac70:	7bbb      	ldrb	r3, [r7, #14]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00d      	beq.n	800ac92 <USBD_StdEPReq+0x146>
 800ac76:	7bbb      	ldrb	r3, [r7, #14]
 800ac78:	2b80      	cmp	r3, #128	@ 0x80
 800ac7a:	d00a      	beq.n	800ac92 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac7c:	7bbb      	ldrb	r3, [r7, #14]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	6878      	ldr	r0, [r7, #4]
 800ac82:	f001 f9a9 	bl	800bfd8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac86:	2180      	movs	r1, #128	@ 0x80
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f001 f9a5 	bl	800bfd8 <USBD_LL_StallEP>
 800ac8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac90:	e040      	b.n	800ad14 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ac92:	6839      	ldr	r1, [r7, #0]
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 fc40 	bl	800b51a <USBD_CtlError>
              break;
 800ac9a:	e03b      	b.n	800ad14 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	885b      	ldrh	r3, [r3, #2]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d136      	bne.n	800ad12 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aca4:	7bbb      	ldrb	r3, [r7, #14]
 800aca6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d004      	beq.n	800acb8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800acae:	7bbb      	ldrb	r3, [r7, #14]
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f001 f9af 	bl	800c016 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 fd0c 	bl	800b6d6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800acbe:	7bbb      	ldrb	r3, [r7, #14]
 800acc0:	4619      	mov	r1, r3
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f7ff fde3 	bl	800a88e <USBD_CoreFindEP>
 800acc8:	4603      	mov	r3, r0
 800acca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800accc:	7b7b      	ldrb	r3, [r7, #13]
 800acce:	2bff      	cmp	r3, #255	@ 0xff
 800acd0:	d01f      	beq.n	800ad12 <USBD_StdEPReq+0x1c6>
 800acd2:	7b7b      	ldrb	r3, [r7, #13]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d11c      	bne.n	800ad12 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800acd8:	7b7a      	ldrb	r2, [r7, #13]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ace0:	7b7a      	ldrb	r2, [r7, #13]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	32ae      	adds	r2, #174	@ 0xae
 800ace6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d010      	beq.n	800ad12 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800acf0:	7b7a      	ldrb	r2, [r7, #13]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	32ae      	adds	r2, #174	@ 0xae
 800acf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	4798      	blx	r3
 800ad02:	4603      	mov	r3, r0
 800ad04:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ad06:	e004      	b.n	800ad12 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ad08:	6839      	ldr	r1, [r7, #0]
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fc05 	bl	800b51a <USBD_CtlError>
              break;
 800ad10:	e000      	b.n	800ad14 <USBD_StdEPReq+0x1c8>
              break;
 800ad12:	bf00      	nop
          }
          break;
 800ad14:	e0ad      	b.n	800ae72 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	2b02      	cmp	r3, #2
 800ad20:	d002      	beq.n	800ad28 <USBD_StdEPReq+0x1dc>
 800ad22:	2b03      	cmp	r3, #3
 800ad24:	d033      	beq.n	800ad8e <USBD_StdEPReq+0x242>
 800ad26:	e099      	b.n	800ae5c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad28:	7bbb      	ldrb	r3, [r7, #14]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d007      	beq.n	800ad3e <USBD_StdEPReq+0x1f2>
 800ad2e:	7bbb      	ldrb	r3, [r7, #14]
 800ad30:	2b80      	cmp	r3, #128	@ 0x80
 800ad32:	d004      	beq.n	800ad3e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ad34:	6839      	ldr	r1, [r7, #0]
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 fbef 	bl	800b51a <USBD_CtlError>
                break;
 800ad3c:	e093      	b.n	800ae66 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	da0b      	bge.n	800ad5e <USBD_StdEPReq+0x212>
 800ad46:	7bbb      	ldrb	r3, [r7, #14]
 800ad48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4413      	add	r3, r2
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	3310      	adds	r3, #16
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	4413      	add	r3, r2
 800ad5a:	3304      	adds	r3, #4
 800ad5c:	e00b      	b.n	800ad76 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad5e:	7bbb      	ldrb	r3, [r7, #14]
 800ad60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad64:	4613      	mov	r3, r2
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4413      	add	r3, r2
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	4413      	add	r3, r2
 800ad74:	3304      	adds	r3, #4
 800ad76:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	330e      	adds	r3, #14
 800ad82:	2202      	movs	r2, #2
 800ad84:	4619      	mov	r1, r3
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 fc44 	bl	800b614 <USBD_CtlSendData>
              break;
 800ad8c:	e06b      	b.n	800ae66 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ad8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	da11      	bge.n	800adba <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ad96:	7bbb      	ldrb	r3, [r7, #14]
 800ad98:	f003 020f 	and.w	r2, r3, #15
 800ad9c:	6879      	ldr	r1, [r7, #4]
 800ad9e:	4613      	mov	r3, r2
 800ada0:	009b      	lsls	r3, r3, #2
 800ada2:	4413      	add	r3, r2
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	440b      	add	r3, r1
 800ada8:	3323      	adds	r3, #35	@ 0x23
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d117      	bne.n	800ade0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800adb0:	6839      	ldr	r1, [r7, #0]
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fbb1 	bl	800b51a <USBD_CtlError>
                  break;
 800adb8:	e055      	b.n	800ae66 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800adba:	7bbb      	ldrb	r3, [r7, #14]
 800adbc:	f003 020f 	and.w	r2, r3, #15
 800adc0:	6879      	ldr	r1, [r7, #4]
 800adc2:	4613      	mov	r3, r2
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	4413      	add	r3, r2
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	440b      	add	r3, r1
 800adcc:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d104      	bne.n	800ade0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800add6:	6839      	ldr	r1, [r7, #0]
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 fb9e 	bl	800b51a <USBD_CtlError>
                  break;
 800adde:	e042      	b.n	800ae66 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ade0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	da0b      	bge.n	800ae00 <USBD_StdEPReq+0x2b4>
 800ade8:	7bbb      	ldrb	r3, [r7, #14]
 800adea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800adee:	4613      	mov	r3, r2
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	4413      	add	r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	3310      	adds	r3, #16
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	4413      	add	r3, r2
 800adfc:	3304      	adds	r3, #4
 800adfe:	e00b      	b.n	800ae18 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae00:	7bbb      	ldrb	r3, [r7, #14]
 800ae02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae06:	4613      	mov	r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4413      	add	r3, r2
 800ae0c:	009b      	lsls	r3, r3, #2
 800ae0e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	4413      	add	r3, r2
 800ae16:	3304      	adds	r3, #4
 800ae18:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ae1a:	7bbb      	ldrb	r3, [r7, #14]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d002      	beq.n	800ae26 <USBD_StdEPReq+0x2da>
 800ae20:	7bbb      	ldrb	r3, [r7, #14]
 800ae22:	2b80      	cmp	r3, #128	@ 0x80
 800ae24:	d103      	bne.n	800ae2e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	739a      	strb	r2, [r3, #14]
 800ae2c:	e00e      	b.n	800ae4c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
 800ae30:	4619      	mov	r1, r3
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f001 f90e 	bl	800c054 <USBD_LL_IsStallEP>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d003      	beq.n	800ae46 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	2201      	movs	r2, #1
 800ae42:	739a      	strb	r2, [r3, #14]
 800ae44:	e002      	b.n	800ae4c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	330e      	adds	r3, #14
 800ae50:	2202      	movs	r2, #2
 800ae52:	4619      	mov	r1, r3
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fbdd 	bl	800b614 <USBD_CtlSendData>
              break;
 800ae5a:	e004      	b.n	800ae66 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800ae5c:	6839      	ldr	r1, [r7, #0]
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fb5b 	bl	800b51a <USBD_CtlError>
              break;
 800ae64:	bf00      	nop
          }
          break;
 800ae66:	e004      	b.n	800ae72 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800ae68:	6839      	ldr	r1, [r7, #0]
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 fb55 	bl	800b51a <USBD_CtlError>
          break;
 800ae70:	bf00      	nop
      }
      break;
 800ae72:	e005      	b.n	800ae80 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fb4f 	bl	800b51a <USBD_CtlError>
      break;
 800ae7c:	e000      	b.n	800ae80 <USBD_StdEPReq+0x334>
      break;
 800ae7e:	bf00      	nop
  }

  return ret;
 800ae80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
	...

0800ae8c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ae96:	2300      	movs	r3, #0
 800ae98:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ae9e:	2300      	movs	r3, #0
 800aea0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	885b      	ldrh	r3, [r3, #2]
 800aea6:	0a1b      	lsrs	r3, r3, #8
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	2b06      	cmp	r3, #6
 800aeae:	f200 8128 	bhi.w	800b102 <USBD_GetDescriptor+0x276>
 800aeb2:	a201      	add	r2, pc, #4	@ (adr r2, 800aeb8 <USBD_GetDescriptor+0x2c>)
 800aeb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb8:	0800aed5 	.word	0x0800aed5
 800aebc:	0800aeed 	.word	0x0800aeed
 800aec0:	0800af2d 	.word	0x0800af2d
 800aec4:	0800b103 	.word	0x0800b103
 800aec8:	0800b103 	.word	0x0800b103
 800aecc:	0800b0a3 	.word	0x0800b0a3
 800aed0:	0800b0cf 	.word	0x0800b0cf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	7c12      	ldrb	r2, [r2, #16]
 800aee0:	f107 0108 	add.w	r1, r7, #8
 800aee4:	4610      	mov	r0, r2
 800aee6:	4798      	blx	r3
 800aee8:	60f8      	str	r0, [r7, #12]
      break;
 800aeea:	e112      	b.n	800b112 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	7c1b      	ldrb	r3, [r3, #16]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d10d      	bne.n	800af10 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aefa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aefc:	f107 0208 	add.w	r2, r7, #8
 800af00:	4610      	mov	r0, r2
 800af02:	4798      	blx	r3
 800af04:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	3301      	adds	r3, #1
 800af0a:	2202      	movs	r2, #2
 800af0c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800af0e:	e100      	b.n	800b112 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af18:	f107 0208 	add.w	r2, r7, #8
 800af1c:	4610      	mov	r0, r2
 800af1e:	4798      	blx	r3
 800af20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	3301      	adds	r3, #1
 800af26:	2202      	movs	r2, #2
 800af28:	701a      	strb	r2, [r3, #0]
      break;
 800af2a:	e0f2      	b.n	800b112 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	885b      	ldrh	r3, [r3, #2]
 800af30:	b2db      	uxtb	r3, r3
 800af32:	2b05      	cmp	r3, #5
 800af34:	f200 80ac 	bhi.w	800b090 <USBD_GetDescriptor+0x204>
 800af38:	a201      	add	r2, pc, #4	@ (adr r2, 800af40 <USBD_GetDescriptor+0xb4>)
 800af3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af3e:	bf00      	nop
 800af40:	0800af59 	.word	0x0800af59
 800af44:	0800af8d 	.word	0x0800af8d
 800af48:	0800afc1 	.word	0x0800afc1
 800af4c:	0800aff5 	.word	0x0800aff5
 800af50:	0800b029 	.word	0x0800b029
 800af54:	0800b05d 	.word	0x0800b05d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d00b      	beq.n	800af7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	7c12      	ldrb	r2, [r2, #16]
 800af70:	f107 0108 	add.w	r1, r7, #8
 800af74:	4610      	mov	r0, r2
 800af76:	4798      	blx	r3
 800af78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af7a:	e091      	b.n	800b0a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af7c:	6839      	ldr	r1, [r7, #0]
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 facb 	bl	800b51a <USBD_CtlError>
            err++;
 800af84:	7afb      	ldrb	r3, [r7, #11]
 800af86:	3301      	adds	r3, #1
 800af88:	72fb      	strb	r3, [r7, #11]
          break;
 800af8a:	e089      	b.n	800b0a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d00b      	beq.n	800afb0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	7c12      	ldrb	r2, [r2, #16]
 800afa4:	f107 0108 	add.w	r1, r7, #8
 800afa8:	4610      	mov	r0, r2
 800afaa:	4798      	blx	r3
 800afac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afae:	e077      	b.n	800b0a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fab1 	bl	800b51a <USBD_CtlError>
            err++;
 800afb8:	7afb      	ldrb	r3, [r7, #11]
 800afba:	3301      	adds	r3, #1
 800afbc:	72fb      	strb	r3, [r7, #11]
          break;
 800afbe:	e06f      	b.n	800b0a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d00b      	beq.n	800afe4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	7c12      	ldrb	r2, [r2, #16]
 800afd8:	f107 0108 	add.w	r1, r7, #8
 800afdc:	4610      	mov	r0, r2
 800afde:	4798      	blx	r3
 800afe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afe2:	e05d      	b.n	800b0a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 fa97 	bl	800b51a <USBD_CtlError>
            err++;
 800afec:	7afb      	ldrb	r3, [r7, #11]
 800afee:	3301      	adds	r3, #1
 800aff0:	72fb      	strb	r3, [r7, #11]
          break;
 800aff2:	e055      	b.n	800b0a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d00b      	beq.n	800b018 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	7c12      	ldrb	r2, [r2, #16]
 800b00c:	f107 0108 	add.w	r1, r7, #8
 800b010:	4610      	mov	r0, r2
 800b012:	4798      	blx	r3
 800b014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b016:	e043      	b.n	800b0a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b018:	6839      	ldr	r1, [r7, #0]
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 fa7d 	bl	800b51a <USBD_CtlError>
            err++;
 800b020:	7afb      	ldrb	r3, [r7, #11]
 800b022:	3301      	adds	r3, #1
 800b024:	72fb      	strb	r3, [r7, #11]
          break;
 800b026:	e03b      	b.n	800b0a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b02e:	695b      	ldr	r3, [r3, #20]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00b      	beq.n	800b04c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b03a:	695b      	ldr	r3, [r3, #20]
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	7c12      	ldrb	r2, [r2, #16]
 800b040:	f107 0108 	add.w	r1, r7, #8
 800b044:	4610      	mov	r0, r2
 800b046:	4798      	blx	r3
 800b048:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b04a:	e029      	b.n	800b0a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f000 fa63 	bl	800b51a <USBD_CtlError>
            err++;
 800b054:	7afb      	ldrb	r3, [r7, #11]
 800b056:	3301      	adds	r3, #1
 800b058:	72fb      	strb	r3, [r7, #11]
          break;
 800b05a:	e021      	b.n	800b0a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00b      	beq.n	800b080 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b06e:	699b      	ldr	r3, [r3, #24]
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	7c12      	ldrb	r2, [r2, #16]
 800b074:	f107 0108 	add.w	r1, r7, #8
 800b078:	4610      	mov	r0, r2
 800b07a:	4798      	blx	r3
 800b07c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b07e:	e00f      	b.n	800b0a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b080:	6839      	ldr	r1, [r7, #0]
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 fa49 	bl	800b51a <USBD_CtlError>
            err++;
 800b088:	7afb      	ldrb	r3, [r7, #11]
 800b08a:	3301      	adds	r3, #1
 800b08c:	72fb      	strb	r3, [r7, #11]
          break;
 800b08e:	e007      	b.n	800b0a0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b090:	6839      	ldr	r1, [r7, #0]
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 fa41 	bl	800b51a <USBD_CtlError>
          err++;
 800b098:	7afb      	ldrb	r3, [r7, #11]
 800b09a:	3301      	adds	r3, #1
 800b09c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b09e:	bf00      	nop
      }
      break;
 800b0a0:	e037      	b.n	800b112 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	7c1b      	ldrb	r3, [r3, #16]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d109      	bne.n	800b0be <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0b2:	f107 0208 	add.w	r2, r7, #8
 800b0b6:	4610      	mov	r0, r2
 800b0b8:	4798      	blx	r3
 800b0ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0bc:	e029      	b.n	800b112 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b0be:	6839      	ldr	r1, [r7, #0]
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fa2a 	bl	800b51a <USBD_CtlError>
        err++;
 800b0c6:	7afb      	ldrb	r3, [r7, #11]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	72fb      	strb	r3, [r7, #11]
      break;
 800b0cc:	e021      	b.n	800b112 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	7c1b      	ldrb	r3, [r3, #16]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d10d      	bne.n	800b0f2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0de:	f107 0208 	add.w	r2, r7, #8
 800b0e2:	4610      	mov	r0, r2
 800b0e4:	4798      	blx	r3
 800b0e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	2207      	movs	r2, #7
 800b0ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b0f0:	e00f      	b.n	800b112 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b0f2:	6839      	ldr	r1, [r7, #0]
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 fa10 	bl	800b51a <USBD_CtlError>
        err++;
 800b0fa:	7afb      	ldrb	r3, [r7, #11]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	72fb      	strb	r3, [r7, #11]
      break;
 800b100:	e007      	b.n	800b112 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b102:	6839      	ldr	r1, [r7, #0]
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 fa08 	bl	800b51a <USBD_CtlError>
      err++;
 800b10a:	7afb      	ldrb	r3, [r7, #11]
 800b10c:	3301      	adds	r3, #1
 800b10e:	72fb      	strb	r3, [r7, #11]
      break;
 800b110:	bf00      	nop
  }

  if (err != 0U)
 800b112:	7afb      	ldrb	r3, [r7, #11]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d11e      	bne.n	800b156 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	88db      	ldrh	r3, [r3, #6]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d016      	beq.n	800b14e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b120:	893b      	ldrh	r3, [r7, #8]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d00e      	beq.n	800b144 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	88da      	ldrh	r2, [r3, #6]
 800b12a:	893b      	ldrh	r3, [r7, #8]
 800b12c:	4293      	cmp	r3, r2
 800b12e:	bf28      	it	cs
 800b130:	4613      	movcs	r3, r2
 800b132:	b29b      	uxth	r3, r3
 800b134:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b136:	893b      	ldrh	r3, [r7, #8]
 800b138:	461a      	mov	r2, r3
 800b13a:	68f9      	ldr	r1, [r7, #12]
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 fa69 	bl	800b614 <USBD_CtlSendData>
 800b142:	e009      	b.n	800b158 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b144:	6839      	ldr	r1, [r7, #0]
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 f9e7 	bl	800b51a <USBD_CtlError>
 800b14c:	e004      	b.n	800b158 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 fac1 	bl	800b6d6 <USBD_CtlSendStatus>
 800b154:	e000      	b.n	800b158 <USBD_GetDescriptor+0x2cc>
    return;
 800b156:	bf00      	nop
  }
}
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop

0800b160 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	889b      	ldrh	r3, [r3, #4]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d131      	bne.n	800b1d6 <USBD_SetAddress+0x76>
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	88db      	ldrh	r3, [r3, #6]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d12d      	bne.n	800b1d6 <USBD_SetAddress+0x76>
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	885b      	ldrh	r3, [r3, #2]
 800b17e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b180:	d829      	bhi.n	800b1d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	885b      	ldrh	r3, [r3, #2]
 800b186:	b2db      	uxtb	r3, r3
 800b188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b18c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b194:	b2db      	uxtb	r3, r3
 800b196:	2b03      	cmp	r3, #3
 800b198:	d104      	bne.n	800b1a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b19a:	6839      	ldr	r1, [r7, #0]
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 f9bc 	bl	800b51a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1a2:	e01d      	b.n	800b1e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	7bfa      	ldrb	r2, [r7, #15]
 800b1a8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b1ac:	7bfb      	ldrb	r3, [r7, #15]
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 ff7b 	bl	800c0ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fa8d 	bl	800b6d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b1bc:	7bfb      	ldrb	r3, [r7, #15]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d004      	beq.n	800b1cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2202      	movs	r2, #2
 800b1c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1ca:	e009      	b.n	800b1e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1d4:	e004      	b.n	800b1e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b1d6:	6839      	ldr	r1, [r7, #0]
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 f99e 	bl	800b51a <USBD_CtlError>
  }
}
 800b1de:	bf00      	nop
 800b1e0:	bf00      	nop
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	885b      	ldrh	r3, [r3, #2]
 800b1fa:	b2da      	uxtb	r2, r3
 800b1fc:	4b4e      	ldr	r3, [pc, #312]	@ (800b338 <USBD_SetConfig+0x150>)
 800b1fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b200:	4b4d      	ldr	r3, [pc, #308]	@ (800b338 <USBD_SetConfig+0x150>)
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	2b01      	cmp	r3, #1
 800b206:	d905      	bls.n	800b214 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b208:	6839      	ldr	r1, [r7, #0]
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f000 f985 	bl	800b51a <USBD_CtlError>
    return USBD_FAIL;
 800b210:	2303      	movs	r3, #3
 800b212:	e08c      	b.n	800b32e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	d002      	beq.n	800b226 <USBD_SetConfig+0x3e>
 800b220:	2b03      	cmp	r3, #3
 800b222:	d029      	beq.n	800b278 <USBD_SetConfig+0x90>
 800b224:	e075      	b.n	800b312 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b226:	4b44      	ldr	r3, [pc, #272]	@ (800b338 <USBD_SetConfig+0x150>)
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d020      	beq.n	800b270 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b22e:	4b42      	ldr	r3, [pc, #264]	@ (800b338 <USBD_SetConfig+0x150>)
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	461a      	mov	r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b238:	4b3f      	ldr	r3, [pc, #252]	@ (800b338 <USBD_SetConfig+0x150>)
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	4619      	mov	r1, r3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f7fe ffcd 	bl	800a1de <USBD_SetClassConfig>
 800b244:	4603      	mov	r3, r0
 800b246:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b248:	7bfb      	ldrb	r3, [r7, #15]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d008      	beq.n	800b260 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b24e:	6839      	ldr	r1, [r7, #0]
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 f962 	bl	800b51a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2202      	movs	r2, #2
 800b25a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b25e:	e065      	b.n	800b32c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 fa38 	bl	800b6d6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2203      	movs	r2, #3
 800b26a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b26e:	e05d      	b.n	800b32c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b270:	6878      	ldr	r0, [r7, #4]
 800b272:	f000 fa30 	bl	800b6d6 <USBD_CtlSendStatus>
      break;
 800b276:	e059      	b.n	800b32c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b278:	4b2f      	ldr	r3, [pc, #188]	@ (800b338 <USBD_SetConfig+0x150>)
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d112      	bne.n	800b2a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2202      	movs	r2, #2
 800b284:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b288:	4b2b      	ldr	r3, [pc, #172]	@ (800b338 <USBD_SetConfig+0x150>)
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	461a      	mov	r2, r3
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b292:	4b29      	ldr	r3, [pc, #164]	@ (800b338 <USBD_SetConfig+0x150>)
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	4619      	mov	r1, r3
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f7fe ffbc 	bl	800a216 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 fa19 	bl	800b6d6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b2a4:	e042      	b.n	800b32c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b2a6:	4b24      	ldr	r3, [pc, #144]	@ (800b338 <USBD_SetConfig+0x150>)
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d02a      	beq.n	800b30a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7fe ffaa 	bl	800a216 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b2c2:	4b1d      	ldr	r3, [pc, #116]	@ (800b338 <USBD_SetConfig+0x150>)
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b2cc:	4b1a      	ldr	r3, [pc, #104]	@ (800b338 <USBD_SetConfig+0x150>)
 800b2ce:	781b      	ldrb	r3, [r3, #0]
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f7fe ff83 	bl	800a1de <USBD_SetClassConfig>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b2dc:	7bfb      	ldrb	r3, [r7, #15]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00f      	beq.n	800b302 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b2e2:	6839      	ldr	r1, [r7, #0]
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 f918 	bl	800b51a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f7fe ff8f 	bl	800a216 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2202      	movs	r2, #2
 800b2fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b300:	e014      	b.n	800b32c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f000 f9e7 	bl	800b6d6 <USBD_CtlSendStatus>
      break;
 800b308:	e010      	b.n	800b32c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 f9e3 	bl	800b6d6 <USBD_CtlSendStatus>
      break;
 800b310:	e00c      	b.n	800b32c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b312:	6839      	ldr	r1, [r7, #0]
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f900 	bl	800b51a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b31a:	4b07      	ldr	r3, [pc, #28]	@ (800b338 <USBD_SetConfig+0x150>)
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	4619      	mov	r1, r3
 800b320:	6878      	ldr	r0, [r7, #4]
 800b322:	f7fe ff78 	bl	800a216 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b326:	2303      	movs	r3, #3
 800b328:	73fb      	strb	r3, [r7, #15]
      break;
 800b32a:	bf00      	nop
  }

  return ret;
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	200009a4 	.word	0x200009a4

0800b33c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	88db      	ldrh	r3, [r3, #6]
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d004      	beq.n	800b358 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b34e:	6839      	ldr	r1, [r7, #0]
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 f8e2 	bl	800b51a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b356:	e023      	b.n	800b3a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b35e:	b2db      	uxtb	r3, r3
 800b360:	2b02      	cmp	r3, #2
 800b362:	dc02      	bgt.n	800b36a <USBD_GetConfig+0x2e>
 800b364:	2b00      	cmp	r3, #0
 800b366:	dc03      	bgt.n	800b370 <USBD_GetConfig+0x34>
 800b368:	e015      	b.n	800b396 <USBD_GetConfig+0x5a>
 800b36a:	2b03      	cmp	r3, #3
 800b36c:	d00b      	beq.n	800b386 <USBD_GetConfig+0x4a>
 800b36e:	e012      	b.n	800b396 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	3308      	adds	r3, #8
 800b37a:	2201      	movs	r2, #1
 800b37c:	4619      	mov	r1, r3
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f948 	bl	800b614 <USBD_CtlSendData>
        break;
 800b384:	e00c      	b.n	800b3a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	3304      	adds	r3, #4
 800b38a:	2201      	movs	r2, #1
 800b38c:	4619      	mov	r1, r3
 800b38e:	6878      	ldr	r0, [r7, #4]
 800b390:	f000 f940 	bl	800b614 <USBD_CtlSendData>
        break;
 800b394:	e004      	b.n	800b3a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b396:	6839      	ldr	r1, [r7, #0]
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f8be 	bl	800b51a <USBD_CtlError>
        break;
 800b39e:	bf00      	nop
}
 800b3a0:	bf00      	nop
 800b3a2:	3708      	adds	r7, #8
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	2b02      	cmp	r3, #2
 800b3be:	d81e      	bhi.n	800b3fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	88db      	ldrh	r3, [r3, #6]
 800b3c4:	2b02      	cmp	r3, #2
 800b3c6:	d004      	beq.n	800b3d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b3c8:	6839      	ldr	r1, [r7, #0]
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 f8a5 	bl	800b51a <USBD_CtlError>
        break;
 800b3d0:	e01a      	b.n	800b408 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d005      	beq.n	800b3ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	68db      	ldr	r3, [r3, #12]
 800b3e6:	f043 0202 	orr.w	r2, r3, #2
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	330c      	adds	r3, #12
 800b3f2:	2202      	movs	r2, #2
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 f90c 	bl	800b614 <USBD_CtlSendData>
      break;
 800b3fc:	e004      	b.n	800b408 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b3fe:	6839      	ldr	r1, [r7, #0]
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 f88a 	bl	800b51a <USBD_CtlError>
      break;
 800b406:	bf00      	nop
  }
}
 800b408:	bf00      	nop
 800b40a:	3708      	adds	r7, #8
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bd80      	pop	{r7, pc}

0800b410 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	885b      	ldrh	r3, [r3, #2]
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d107      	bne.n	800b432 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2201      	movs	r2, #1
 800b426:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f953 	bl	800b6d6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b430:	e013      	b.n	800b45a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	885b      	ldrh	r3, [r3, #2]
 800b436:	2b02      	cmp	r3, #2
 800b438:	d10b      	bne.n	800b452 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	889b      	ldrh	r3, [r3, #4]
 800b43e:	0a1b      	lsrs	r3, r3, #8
 800b440:	b29b      	uxth	r3, r3
 800b442:	b2da      	uxtb	r2, r3
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f943 	bl	800b6d6 <USBD_CtlSendStatus>
}
 800b450:	e003      	b.n	800b45a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b452:	6839      	ldr	r1, [r7, #0]
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 f860 	bl	800b51a <USBD_CtlError>
}
 800b45a:	bf00      	nop
 800b45c:	3708      	adds	r7, #8
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b462:	b580      	push	{r7, lr}
 800b464:	b082      	sub	sp, #8
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
 800b46a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b472:	b2db      	uxtb	r3, r3
 800b474:	3b01      	subs	r3, #1
 800b476:	2b02      	cmp	r3, #2
 800b478:	d80b      	bhi.n	800b492 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	885b      	ldrh	r3, [r3, #2]
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d10c      	bne.n	800b49c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 f923 	bl	800b6d6 <USBD_CtlSendStatus>
      }
      break;
 800b490:	e004      	b.n	800b49c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b492:	6839      	ldr	r1, [r7, #0]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 f840 	bl	800b51a <USBD_CtlError>
      break;
 800b49a:	e000      	b.n	800b49e <USBD_ClrFeature+0x3c>
      break;
 800b49c:	bf00      	nop
  }
}
 800b49e:	bf00      	nop
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b084      	sub	sp, #16
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
 800b4ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	781a      	ldrb	r2, [r3, #0]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	781a      	ldrb	r2, [r3, #0]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f7ff fa3d 	bl	800a950 <SWAPBYTE>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	461a      	mov	r2, r3
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f7ff fa30 	bl	800a950 <SWAPBYTE>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	3301      	adds	r3, #1
 800b502:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f7ff fa23 	bl	800a950 <SWAPBYTE>
 800b50a:	4603      	mov	r3, r0
 800b50c:	461a      	mov	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	80da      	strh	r2, [r3, #6]
}
 800b512:	bf00      	nop
 800b514:	3710      	adds	r7, #16
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}

0800b51a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b082      	sub	sp, #8
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
 800b522:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b524:	2180      	movs	r1, #128	@ 0x80
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 fd56 	bl	800bfd8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b52c:	2100      	movs	r1, #0
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 fd52 	bl	800bfd8 <USBD_LL_StallEP>
}
 800b534:	bf00      	nop
 800b536:	3708      	adds	r7, #8
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b086      	sub	sp, #24
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b548:	2300      	movs	r3, #0
 800b54a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d042      	beq.n	800b5d8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b556:	6938      	ldr	r0, [r7, #16]
 800b558:	f000 f842 	bl	800b5e0 <USBD_GetLen>
 800b55c:	4603      	mov	r3, r0
 800b55e:	3301      	adds	r3, #1
 800b560:	005b      	lsls	r3, r3, #1
 800b562:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b566:	d808      	bhi.n	800b57a <USBD_GetString+0x3e>
 800b568:	6938      	ldr	r0, [r7, #16]
 800b56a:	f000 f839 	bl	800b5e0 <USBD_GetLen>
 800b56e:	4603      	mov	r3, r0
 800b570:	3301      	adds	r3, #1
 800b572:	b29b      	uxth	r3, r3
 800b574:	005b      	lsls	r3, r3, #1
 800b576:	b29a      	uxth	r2, r3
 800b578:	e001      	b.n	800b57e <USBD_GetString+0x42>
 800b57a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b582:	7dfb      	ldrb	r3, [r7, #23]
 800b584:	68ba      	ldr	r2, [r7, #8]
 800b586:	4413      	add	r3, r2
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	7812      	ldrb	r2, [r2, #0]
 800b58c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b58e:	7dfb      	ldrb	r3, [r7, #23]
 800b590:	3301      	adds	r3, #1
 800b592:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b594:	7dfb      	ldrb	r3, [r7, #23]
 800b596:	68ba      	ldr	r2, [r7, #8]
 800b598:	4413      	add	r3, r2
 800b59a:	2203      	movs	r2, #3
 800b59c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b59e:	7dfb      	ldrb	r3, [r7, #23]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b5a4:	e013      	b.n	800b5ce <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b5a6:	7dfb      	ldrb	r3, [r7, #23]
 800b5a8:	68ba      	ldr	r2, [r7, #8]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	693a      	ldr	r2, [r7, #16]
 800b5ae:	7812      	ldrb	r2, [r2, #0]
 800b5b0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	613b      	str	r3, [r7, #16]
    idx++;
 800b5b8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b5be:	7dfb      	ldrb	r3, [r7, #23]
 800b5c0:	68ba      	ldr	r2, [r7, #8]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	701a      	strb	r2, [r3, #0]
    idx++;
 800b5c8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d1e7      	bne.n	800b5a6 <USBD_GetString+0x6a>
 800b5d6:	e000      	b.n	800b5da <USBD_GetString+0x9e>
    return;
 800b5d8:	bf00      	nop
  }
}
 800b5da:	3718      	adds	r7, #24
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b5f0:	e005      	b.n	800b5fe <USBD_GetLen+0x1e>
  {
    len++;
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	3301      	adds	r3, #1
 800b5fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1f5      	bne.n	800b5f2 <USBD_GetLen+0x12>
  }

  return len;
 800b606:	7bfb      	ldrb	r3, [r7, #15]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3714      	adds	r7, #20
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b084      	sub	sp, #16
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2202      	movs	r2, #2
 800b624:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	68ba      	ldr	r2, [r7, #8]
 800b632:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	68ba      	ldr	r2, [r7, #8]
 800b63e:	2100      	movs	r1, #0
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f000 fd52 	bl	800c0ea <USBD_LL_Transmit>

  return USBD_OK;
 800b646:	2300      	movs	r3, #0
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	60f8      	str	r0, [r7, #12]
 800b658:	60b9      	str	r1, [r7, #8]
 800b65a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	68ba      	ldr	r2, [r7, #8]
 800b660:	2100      	movs	r1, #0
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f000 fd41 	bl	800c0ea <USBD_LL_Transmit>

  return USBD_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b084      	sub	sp, #16
 800b676:	af00      	add	r7, sp, #0
 800b678:	60f8      	str	r0, [r7, #12]
 800b67a:	60b9      	str	r1, [r7, #8]
 800b67c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2203      	movs	r2, #3
 800b682:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	68ba      	ldr	r2, [r7, #8]
 800b692:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	68ba      	ldr	r2, [r7, #8]
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f000 fd41 	bl	800c12c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6aa:	2300      	movs	r3, #0
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	68ba      	ldr	r2, [r7, #8]
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f000 fd30 	bl	800c12c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b082      	sub	sp, #8
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2204      	movs	r2, #4
 800b6e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 fcfc 	bl	800c0ea <USBD_LL_Transmit>

  return USBD_OK;
 800b6f2:	2300      	movs	r3, #0
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2205      	movs	r2, #5
 800b708:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b70c:	2300      	movs	r3, #0
 800b70e:	2200      	movs	r2, #0
 800b710:	2100      	movs	r1, #0
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 fd0a 	bl	800c12c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
	...

0800b724 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b728:	2200      	movs	r2, #0
 800b72a:	4912      	ldr	r1, [pc, #72]	@ (800b774 <MX_USB_DEVICE_Init+0x50>)
 800b72c:	4812      	ldr	r0, [pc, #72]	@ (800b778 <MX_USB_DEVICE_Init+0x54>)
 800b72e:	f7fe fcd9 	bl	800a0e4 <USBD_Init>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d001      	beq.n	800b73c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b738:	f7f5 fb18 	bl	8000d6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b73c:	490f      	ldr	r1, [pc, #60]	@ (800b77c <MX_USB_DEVICE_Init+0x58>)
 800b73e:	480e      	ldr	r0, [pc, #56]	@ (800b778 <MX_USB_DEVICE_Init+0x54>)
 800b740:	f7fe fd00 	bl	800a144 <USBD_RegisterClass>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d001      	beq.n	800b74e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b74a:	f7f5 fb0f 	bl	8000d6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b74e:	490c      	ldr	r1, [pc, #48]	@ (800b780 <MX_USB_DEVICE_Init+0x5c>)
 800b750:	4809      	ldr	r0, [pc, #36]	@ (800b778 <MX_USB_DEVICE_Init+0x54>)
 800b752:	f7fe fbf7 	bl	8009f44 <USBD_CDC_RegisterInterface>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d001      	beq.n	800b760 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b75c:	f7f5 fb06 	bl	8000d6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b760:	4805      	ldr	r0, [pc, #20]	@ (800b778 <MX_USB_DEVICE_Init+0x54>)
 800b762:	f7fe fd25 	bl	800a1b0 <USBD_Start>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d001      	beq.n	800b770 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b76c:	f7f5 fafe 	bl	8000d6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b770:	bf00      	nop
 800b772:	bd80      	pop	{r7, pc}
 800b774:	200000e8 	.word	0x200000e8
 800b778:	200009a8 	.word	0x200009a8
 800b77c:	2000004c 	.word	0x2000004c
 800b780:	200000d4 	.word	0x200000d4

0800b784 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b788:	2200      	movs	r2, #0
 800b78a:	4905      	ldr	r1, [pc, #20]	@ (800b7a0 <CDC_Init_FS+0x1c>)
 800b78c:	4805      	ldr	r0, [pc, #20]	@ (800b7a4 <CDC_Init_FS+0x20>)
 800b78e:	f7fe fbf3 	bl	8009f78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b792:	4905      	ldr	r1, [pc, #20]	@ (800b7a8 <CDC_Init_FS+0x24>)
 800b794:	4803      	ldr	r0, [pc, #12]	@ (800b7a4 <CDC_Init_FS+0x20>)
 800b796:	f7fe fc11 	bl	8009fbc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b79a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	20000e84 	.word	0x20000e84
 800b7a4:	200009a8 	.word	0x200009a8
 800b7a8:	20000c84 	.word	0x20000c84

0800b7ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b7b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	6039      	str	r1, [r7, #0]
 800b7c6:	71fb      	strb	r3, [r7, #7]
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b7cc:	79fb      	ldrb	r3, [r7, #7]
 800b7ce:	2b23      	cmp	r3, #35	@ 0x23
 800b7d0:	f200 8098 	bhi.w	800b904 <CDC_Control_FS+0x148>
 800b7d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b7dc <CDC_Control_FS+0x20>)
 800b7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7da:	bf00      	nop
 800b7dc:	0800b905 	.word	0x0800b905
 800b7e0:	0800b905 	.word	0x0800b905
 800b7e4:	0800b905 	.word	0x0800b905
 800b7e8:	0800b905 	.word	0x0800b905
 800b7ec:	0800b905 	.word	0x0800b905
 800b7f0:	0800b905 	.word	0x0800b905
 800b7f4:	0800b905 	.word	0x0800b905
 800b7f8:	0800b905 	.word	0x0800b905
 800b7fc:	0800b905 	.word	0x0800b905
 800b800:	0800b905 	.word	0x0800b905
 800b804:	0800b905 	.word	0x0800b905
 800b808:	0800b905 	.word	0x0800b905
 800b80c:	0800b905 	.word	0x0800b905
 800b810:	0800b905 	.word	0x0800b905
 800b814:	0800b905 	.word	0x0800b905
 800b818:	0800b905 	.word	0x0800b905
 800b81c:	0800b905 	.word	0x0800b905
 800b820:	0800b905 	.word	0x0800b905
 800b824:	0800b905 	.word	0x0800b905
 800b828:	0800b905 	.word	0x0800b905
 800b82c:	0800b905 	.word	0x0800b905
 800b830:	0800b905 	.word	0x0800b905
 800b834:	0800b905 	.word	0x0800b905
 800b838:	0800b905 	.word	0x0800b905
 800b83c:	0800b905 	.word	0x0800b905
 800b840:	0800b905 	.word	0x0800b905
 800b844:	0800b905 	.word	0x0800b905
 800b848:	0800b905 	.word	0x0800b905
 800b84c:	0800b905 	.word	0x0800b905
 800b850:	0800b905 	.word	0x0800b905
 800b854:	0800b905 	.word	0x0800b905
 800b858:	0800b905 	.word	0x0800b905
 800b85c:	0800b86d 	.word	0x0800b86d
 800b860:	0800b8b1 	.word	0x0800b8b1
 800b864:	0800b905 	.word	0x0800b905
 800b868:	0800b905 	.word	0x0800b905
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	461a      	mov	r2, r3
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	3301      	adds	r3, #1
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	021b      	lsls	r3, r3, #8
 800b87a:	431a      	orrs	r2, r3
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	3302      	adds	r3, #2
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	041b      	lsls	r3, r3, #16
 800b884:	431a      	orrs	r2, r3
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	3303      	adds	r3, #3
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	061b      	lsls	r3, r3, #24
 800b88e:	4313      	orrs	r3, r2
 800b890:	461a      	mov	r2, r3
 800b892:	4b20      	ldr	r3, [pc, #128]	@ (800b914 <CDC_Control_FS+0x158>)
 800b894:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	791a      	ldrb	r2, [r3, #4]
 800b89a:	4b1e      	ldr	r3, [pc, #120]	@ (800b914 <CDC_Control_FS+0x158>)
 800b89c:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	795a      	ldrb	r2, [r3, #5]
 800b8a2:	4b1c      	ldr	r3, [pc, #112]	@ (800b914 <CDC_Control_FS+0x158>)
 800b8a4:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	799a      	ldrb	r2, [r3, #6]
 800b8aa:	4b1a      	ldr	r3, [pc, #104]	@ (800b914 <CDC_Control_FS+0x158>)
 800b8ac:	719a      	strb	r2, [r3, #6]
    break;
 800b8ae:	e02a      	b.n	800b906 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800b8b0:	4b18      	ldr	r3, [pc, #96]	@ (800b914 <CDC_Control_FS+0x158>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800b8ba:	4b16      	ldr	r3, [pc, #88]	@ (800b914 <CDC_Control_FS+0x158>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	0a1a      	lsrs	r2, r3, #8
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	b2d2      	uxtb	r2, r2
 800b8c6:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800b8c8:	4b12      	ldr	r3, [pc, #72]	@ (800b914 <CDC_Control_FS+0x158>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	0c1a      	lsrs	r2, r3, #16
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	3302      	adds	r3, #2
 800b8d2:	b2d2      	uxtb	r2, r2
 800b8d4:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800b8d6:	4b0f      	ldr	r3, [pc, #60]	@ (800b914 <CDC_Control_FS+0x158>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	0e1a      	lsrs	r2, r3, #24
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	3303      	adds	r3, #3
 800b8e0:	b2d2      	uxtb	r2, r2
 800b8e2:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	3304      	adds	r3, #4
 800b8e8:	4a0a      	ldr	r2, [pc, #40]	@ (800b914 <CDC_Control_FS+0x158>)
 800b8ea:	7912      	ldrb	r2, [r2, #4]
 800b8ec:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	3305      	adds	r3, #5
 800b8f2:	4a08      	ldr	r2, [pc, #32]	@ (800b914 <CDC_Control_FS+0x158>)
 800b8f4:	7952      	ldrb	r2, [r2, #5]
 800b8f6:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	3306      	adds	r3, #6
 800b8fc:	4a05      	ldr	r2, [pc, #20]	@ (800b914 <CDC_Control_FS+0x158>)
 800b8fe:	7992      	ldrb	r2, [r2, #6]
 800b900:	701a      	strb	r2, [r3, #0]
    break;
 800b902:	e000      	b.n	800b906 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b904:	bf00      	nop
  }

  return (USBD_OK);
 800b906:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b908:	4618      	mov	r0, r3
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr
 800b914:	200000cc 	.word	0x200000cc

0800b918 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b082      	sub	sp, #8
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800b922:	4b0b      	ldr	r3, [pc, #44]	@ (800b950 <CDC_Receive_FS+0x38>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d006      	beq.n	800b938 <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800b92a:	4b09      	ldr	r3, [pc, #36]	@ (800b950 <CDC_Receive_FS+0x38>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	683a      	ldr	r2, [r7, #0]
 800b930:	6812      	ldr	r2, [r2, #0]
 800b932:	4611      	mov	r1, r2
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b938:	6879      	ldr	r1, [r7, #4]
 800b93a:	4806      	ldr	r0, [pc, #24]	@ (800b954 <CDC_Receive_FS+0x3c>)
 800b93c:	f7fe fb3e 	bl	8009fbc <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b940:	4804      	ldr	r0, [pc, #16]	@ (800b954 <CDC_Receive_FS+0x3c>)
 800b942:	f7fe fb99 	bl	800a078 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800b946:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	20001084 	.word	0x20001084
 800b954:	200009a8 	.word	0x200009a8

0800b958 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	460b      	mov	r3, r1
 800b962:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b964:	2300      	movs	r3, #0
 800b966:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b968:	4b0d      	ldr	r3, [pc, #52]	@ (800b9a0 <CDC_Transmit_FS+0x48>)
 800b96a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b96e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b976:	2b00      	cmp	r3, #0
 800b978:	d001      	beq.n	800b97e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b97a:	2301      	movs	r3, #1
 800b97c:	e00b      	b.n	800b996 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b97e:	887b      	ldrh	r3, [r7, #2]
 800b980:	461a      	mov	r2, r3
 800b982:	6879      	ldr	r1, [r7, #4]
 800b984:	4806      	ldr	r0, [pc, #24]	@ (800b9a0 <CDC_Transmit_FS+0x48>)
 800b986:	f7fe faf7 	bl	8009f78 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b98a:	4805      	ldr	r0, [pc, #20]	@ (800b9a0 <CDC_Transmit_FS+0x48>)
 800b98c:	f7fe fb34 	bl	8009ff8 <USBD_CDC_TransmitPacket>
 800b990:	4603      	mov	r3, r0
 800b992:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b994:	7bfb      	ldrb	r3, [r7, #15]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop
 800b9a0:	200009a8 	.word	0x200009a8

0800b9a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b087      	sub	sp, #28
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	4613      	mov	r3, r2
 800b9b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b9b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	371c      	adds	r7, #28
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr
	...

0800b9c8 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800b9d0:	4a04      	ldr	r2, [pc, #16]	@ (800b9e4 <CDC_Attach_Rx+0x1c>)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6013      	str	r3, [r2, #0]
}
 800b9d6:	bf00      	nop
 800b9d8:	370c      	adds	r7, #12
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr
 800b9e2:	bf00      	nop
 800b9e4:	20001084 	.word	0x20001084

0800b9e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	6039      	str	r1, [r7, #0]
 800b9f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	2212      	movs	r2, #18
 800b9f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b9fa:	4b03      	ldr	r3, [pc, #12]	@ (800ba08 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr
 800ba08:	20000104 	.word	0x20000104

0800ba0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	4603      	mov	r3, r0
 800ba14:	6039      	str	r1, [r7, #0]
 800ba16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	2204      	movs	r2, #4
 800ba1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ba1e:	4b03      	ldr	r3, [pc, #12]	@ (800ba2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	370c      	adds	r7, #12
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr
 800ba2c:	20000118 	.word	0x20000118

0800ba30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	4603      	mov	r3, r0
 800ba38:	6039      	str	r1, [r7, #0]
 800ba3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba3c:	79fb      	ldrb	r3, [r7, #7]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d105      	bne.n	800ba4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba42:	683a      	ldr	r2, [r7, #0]
 800ba44:	4907      	ldr	r1, [pc, #28]	@ (800ba64 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba46:	4808      	ldr	r0, [pc, #32]	@ (800ba68 <USBD_FS_ProductStrDescriptor+0x38>)
 800ba48:	f7ff fd78 	bl	800b53c <USBD_GetString>
 800ba4c:	e004      	b.n	800ba58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba4e:	683a      	ldr	r2, [r7, #0]
 800ba50:	4904      	ldr	r1, [pc, #16]	@ (800ba64 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba52:	4805      	ldr	r0, [pc, #20]	@ (800ba68 <USBD_FS_ProductStrDescriptor+0x38>)
 800ba54:	f7ff fd72 	bl	800b53c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba58:	4b02      	ldr	r3, [pc, #8]	@ (800ba64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3708      	adds	r7, #8
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	20001088 	.word	0x20001088
 800ba68:	0800c2b0 	.word	0x0800c2b0

0800ba6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	4603      	mov	r3, r0
 800ba74:	6039      	str	r1, [r7, #0]
 800ba76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ba78:	683a      	ldr	r2, [r7, #0]
 800ba7a:	4904      	ldr	r1, [pc, #16]	@ (800ba8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ba7c:	4804      	ldr	r0, [pc, #16]	@ (800ba90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ba7e:	f7ff fd5d 	bl	800b53c <USBD_GetString>
  return USBD_StrDesc;
 800ba82:	4b02      	ldr	r3, [pc, #8]	@ (800ba8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3708      	adds	r7, #8
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	20001088 	.word	0x20001088
 800ba90:	0800c2c8 	.word	0x0800c2c8

0800ba94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	6039      	str	r1, [r7, #0]
 800ba9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	221a      	movs	r2, #26
 800baa4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800baa6:	f000 f843 	bl	800bb30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800baaa:	4b02      	ldr	r3, [pc, #8]	@ (800bab4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800baac:	4618      	mov	r0, r3
 800baae:	3708      	adds	r7, #8
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	2000011c 	.word	0x2000011c

0800bab8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	4603      	mov	r3, r0
 800bac0:	6039      	str	r1, [r7, #0]
 800bac2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bac4:	79fb      	ldrb	r3, [r7, #7]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d105      	bne.n	800bad6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800baca:	683a      	ldr	r2, [r7, #0]
 800bacc:	4907      	ldr	r1, [pc, #28]	@ (800baec <USBD_FS_ConfigStrDescriptor+0x34>)
 800bace:	4808      	ldr	r0, [pc, #32]	@ (800baf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bad0:	f7ff fd34 	bl	800b53c <USBD_GetString>
 800bad4:	e004      	b.n	800bae0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bad6:	683a      	ldr	r2, [r7, #0]
 800bad8:	4904      	ldr	r1, [pc, #16]	@ (800baec <USBD_FS_ConfigStrDescriptor+0x34>)
 800bada:	4805      	ldr	r0, [pc, #20]	@ (800baf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800badc:	f7ff fd2e 	bl	800b53c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bae0:	4b02      	ldr	r3, [pc, #8]	@ (800baec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3708      	adds	r7, #8
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	20001088 	.word	0x20001088
 800baf0:	0800c2dc 	.word	0x0800c2dc

0800baf4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	4603      	mov	r3, r0
 800bafc:	6039      	str	r1, [r7, #0]
 800bafe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb00:	79fb      	ldrb	r3, [r7, #7]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d105      	bne.n	800bb12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb06:	683a      	ldr	r2, [r7, #0]
 800bb08:	4907      	ldr	r1, [pc, #28]	@ (800bb28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb0a:	4808      	ldr	r0, [pc, #32]	@ (800bb2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb0c:	f7ff fd16 	bl	800b53c <USBD_GetString>
 800bb10:	e004      	b.n	800bb1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb12:	683a      	ldr	r2, [r7, #0]
 800bb14:	4904      	ldr	r1, [pc, #16]	@ (800bb28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb16:	4805      	ldr	r0, [pc, #20]	@ (800bb2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb18:	f7ff fd10 	bl	800b53c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb1c:	4b02      	ldr	r3, [pc, #8]	@ (800bb28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3708      	adds	r7, #8
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	20001088 	.word	0x20001088
 800bb2c:	0800c2e8 	.word	0x0800c2e8

0800bb30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bb36:	4b0f      	ldr	r3, [pc, #60]	@ (800bb74 <Get_SerialNum+0x44>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bb3c:	4b0e      	ldr	r3, [pc, #56]	@ (800bb78 <Get_SerialNum+0x48>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bb42:	4b0e      	ldr	r3, [pc, #56]	@ (800bb7c <Get_SerialNum+0x4c>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bb48:	68fa      	ldr	r2, [r7, #12]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4413      	add	r3, r2
 800bb4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d009      	beq.n	800bb6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bb56:	2208      	movs	r2, #8
 800bb58:	4909      	ldr	r1, [pc, #36]	@ (800bb80 <Get_SerialNum+0x50>)
 800bb5a:	68f8      	ldr	r0, [r7, #12]
 800bb5c:	f000 f814 	bl	800bb88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bb60:	2204      	movs	r2, #4
 800bb62:	4908      	ldr	r1, [pc, #32]	@ (800bb84 <Get_SerialNum+0x54>)
 800bb64:	68b8      	ldr	r0, [r7, #8]
 800bb66:	f000 f80f 	bl	800bb88 <IntToUnicode>
  }
}
 800bb6a:	bf00      	nop
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}
 800bb72:	bf00      	nop
 800bb74:	1fff7a10 	.word	0x1fff7a10
 800bb78:	1fff7a14 	.word	0x1fff7a14
 800bb7c:	1fff7a18 	.word	0x1fff7a18
 800bb80:	2000011e 	.word	0x2000011e
 800bb84:	2000012e 	.word	0x2000012e

0800bb88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b087      	sub	sp, #28
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	4613      	mov	r3, r2
 800bb94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bb96:	2300      	movs	r3, #0
 800bb98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	75fb      	strb	r3, [r7, #23]
 800bb9e:	e027      	b.n	800bbf0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	0f1b      	lsrs	r3, r3, #28
 800bba4:	2b09      	cmp	r3, #9
 800bba6:	d80b      	bhi.n	800bbc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	0f1b      	lsrs	r3, r3, #28
 800bbac:	b2da      	uxtb	r2, r3
 800bbae:	7dfb      	ldrb	r3, [r7, #23]
 800bbb0:	005b      	lsls	r3, r3, #1
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	440b      	add	r3, r1
 800bbb8:	3230      	adds	r2, #48	@ 0x30
 800bbba:	b2d2      	uxtb	r2, r2
 800bbbc:	701a      	strb	r2, [r3, #0]
 800bbbe:	e00a      	b.n	800bbd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	0f1b      	lsrs	r3, r3, #28
 800bbc4:	b2da      	uxtb	r2, r3
 800bbc6:	7dfb      	ldrb	r3, [r7, #23]
 800bbc8:	005b      	lsls	r3, r3, #1
 800bbca:	4619      	mov	r1, r3
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	440b      	add	r3, r1
 800bbd0:	3237      	adds	r2, #55	@ 0x37
 800bbd2:	b2d2      	uxtb	r2, r2
 800bbd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	011b      	lsls	r3, r3, #4
 800bbda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bbdc:	7dfb      	ldrb	r3, [r7, #23]
 800bbde:	005b      	lsls	r3, r3, #1
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bbea:	7dfb      	ldrb	r3, [r7, #23]
 800bbec:	3301      	adds	r3, #1
 800bbee:	75fb      	strb	r3, [r7, #23]
 800bbf0:	7dfa      	ldrb	r2, [r7, #23]
 800bbf2:	79fb      	ldrb	r3, [r7, #7]
 800bbf4:	429a      	cmp	r2, r3
 800bbf6:	d3d3      	bcc.n	800bba0 <IntToUnicode+0x18>
  }
}
 800bbf8:	bf00      	nop
 800bbfa:	bf00      	nop
 800bbfc:	371c      	adds	r7, #28
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr
	...

0800bc08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b08a      	sub	sp, #40	@ 0x28
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc10:	f107 0314 	add.w	r3, r7, #20
 800bc14:	2200      	movs	r2, #0
 800bc16:	601a      	str	r2, [r3, #0]
 800bc18:	605a      	str	r2, [r3, #4]
 800bc1a:	609a      	str	r2, [r3, #8]
 800bc1c:	60da      	str	r2, [r3, #12]
 800bc1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc28:	d13a      	bne.n	800bca0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	613b      	str	r3, [r7, #16]
 800bc2e:	4b1e      	ldr	r3, [pc, #120]	@ (800bca8 <HAL_PCD_MspInit+0xa0>)
 800bc30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc32:	4a1d      	ldr	r2, [pc, #116]	@ (800bca8 <HAL_PCD_MspInit+0xa0>)
 800bc34:	f043 0301 	orr.w	r3, r3, #1
 800bc38:	6313      	str	r3, [r2, #48]	@ 0x30
 800bc3a:	4b1b      	ldr	r3, [pc, #108]	@ (800bca8 <HAL_PCD_MspInit+0xa0>)
 800bc3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc3e:	f003 0301 	and.w	r3, r3, #1
 800bc42:	613b      	str	r3, [r7, #16]
 800bc44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bc46:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bc4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc4c:	2302      	movs	r3, #2
 800bc4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc50:	2300      	movs	r3, #0
 800bc52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc54:	2303      	movs	r3, #3
 800bc56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bc58:	230a      	movs	r3, #10
 800bc5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc5c:	f107 0314 	add.w	r3, r7, #20
 800bc60:	4619      	mov	r1, r3
 800bc62:	4812      	ldr	r0, [pc, #72]	@ (800bcac <HAL_PCD_MspInit+0xa4>)
 800bc64:	f7f7 fa92 	bl	800318c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bc68:	4b0f      	ldr	r3, [pc, #60]	@ (800bca8 <HAL_PCD_MspInit+0xa0>)
 800bc6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc6c:	4a0e      	ldr	r2, [pc, #56]	@ (800bca8 <HAL_PCD_MspInit+0xa0>)
 800bc6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc72:	6353      	str	r3, [r2, #52]	@ 0x34
 800bc74:	2300      	movs	r3, #0
 800bc76:	60fb      	str	r3, [r7, #12]
 800bc78:	4b0b      	ldr	r3, [pc, #44]	@ (800bca8 <HAL_PCD_MspInit+0xa0>)
 800bc7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc7c:	4a0a      	ldr	r2, [pc, #40]	@ (800bca8 <HAL_PCD_MspInit+0xa0>)
 800bc7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bc82:	6453      	str	r3, [r2, #68]	@ 0x44
 800bc84:	4b08      	ldr	r3, [pc, #32]	@ (800bca8 <HAL_PCD_MspInit+0xa0>)
 800bc86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc8c:	60fb      	str	r3, [r7, #12]
 800bc8e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bc90:	2200      	movs	r2, #0
 800bc92:	2100      	movs	r1, #0
 800bc94:	2043      	movs	r0, #67	@ 0x43
 800bc96:	f7f6 fe96 	bl	80029c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc9a:	2043      	movs	r0, #67	@ 0x43
 800bc9c:	f7f6 feaf 	bl	80029fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bca0:	bf00      	nop
 800bca2:	3728      	adds	r7, #40	@ 0x28
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	40023800 	.word	0x40023800
 800bcac:	40020000 	.word	0x40020000

0800bcb0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	4610      	mov	r0, r2
 800bcc8:	f7fe fabf 	bl	800a24a <USBD_LL_SetupStage>
}
 800bccc:	bf00      	nop
 800bcce:	3708      	adds	r7, #8
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	460b      	mov	r3, r1
 800bcde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bce6:	78fa      	ldrb	r2, [r7, #3]
 800bce8:	6879      	ldr	r1, [r7, #4]
 800bcea:	4613      	mov	r3, r2
 800bcec:	00db      	lsls	r3, r3, #3
 800bcee:	4413      	add	r3, r2
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	440b      	add	r3, r1
 800bcf4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	78fb      	ldrb	r3, [r7, #3]
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	f7fe faf9 	bl	800a2f4 <USBD_LL_DataOutStage>
}
 800bd02:	bf00      	nop
 800bd04:	3708      	adds	r7, #8
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}

0800bd0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b082      	sub	sp, #8
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
 800bd12:	460b      	mov	r3, r1
 800bd14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bd1c:	78fa      	ldrb	r2, [r7, #3]
 800bd1e:	6879      	ldr	r1, [r7, #4]
 800bd20:	4613      	mov	r3, r2
 800bd22:	00db      	lsls	r3, r3, #3
 800bd24:	4413      	add	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	440b      	add	r3, r1
 800bd2a:	3320      	adds	r3, #32
 800bd2c:	681a      	ldr	r2, [r3, #0]
 800bd2e:	78fb      	ldrb	r3, [r7, #3]
 800bd30:	4619      	mov	r1, r3
 800bd32:	f7fe fb9b 	bl	800a46c <USBD_LL_DataInStage>
}
 800bd36:	bf00      	nop
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b082      	sub	sp, #8
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f7fe fcdf 	bl	800a710 <USBD_LL_SOF>
}
 800bd52:	bf00      	nop
 800bd54:	3708      	adds	r7, #8
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b084      	sub	sp, #16
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bd62:	2301      	movs	r3, #1
 800bd64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	79db      	ldrb	r3, [r3, #7]
 800bd6a:	2b02      	cmp	r3, #2
 800bd6c:	d001      	beq.n	800bd72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bd6e:	f7f4 fffd 	bl	8000d6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd78:	7bfa      	ldrb	r2, [r7, #15]
 800bd7a:	4611      	mov	r1, r2
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7fe fc83 	bl	800a688 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7fe fc2a 	bl	800a5e2 <USBD_LL_Reset>
}
 800bd8e:	bf00      	nop
 800bd90:	3710      	adds	r7, #16
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
	...

0800bd98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fe fc7e 	bl	800a6a8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	6812      	ldr	r2, [r2, #0]
 800bdba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bdbe:	f043 0301 	orr.w	r3, r3, #1
 800bdc2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	7adb      	ldrb	r3, [r3, #11]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d005      	beq.n	800bdd8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bdcc:	4b04      	ldr	r3, [pc, #16]	@ (800bde0 <HAL_PCD_SuspendCallback+0x48>)
 800bdce:	691b      	ldr	r3, [r3, #16]
 800bdd0:	4a03      	ldr	r2, [pc, #12]	@ (800bde0 <HAL_PCD_SuspendCallback+0x48>)
 800bdd2:	f043 0306 	orr.w	r3, r3, #6
 800bdd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bdd8:	bf00      	nop
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	e000ed00 	.word	0xe000ed00

0800bde4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7fe fc74 	bl	800a6e0 <USBD_LL_Resume>
}
 800bdf8:	bf00      	nop
 800bdfa:	3708      	adds	r7, #8
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	460b      	mov	r3, r1
 800be0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be12:	78fa      	ldrb	r2, [r7, #3]
 800be14:	4611      	mov	r1, r2
 800be16:	4618      	mov	r0, r3
 800be18:	f7fe fccc 	bl	800a7b4 <USBD_LL_IsoOUTIncomplete>
}
 800be1c:	bf00      	nop
 800be1e:	3708      	adds	r7, #8
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	460b      	mov	r3, r1
 800be2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be36:	78fa      	ldrb	r2, [r7, #3]
 800be38:	4611      	mov	r1, r2
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7fe fc88 	bl	800a750 <USBD_LL_IsoINIncomplete>
}
 800be40:	bf00      	nop
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be56:	4618      	mov	r0, r3
 800be58:	f7fe fcde 	bl	800a818 <USBD_LL_DevConnected>
}
 800be5c:	bf00      	nop
 800be5e:	3708      	adds	r7, #8
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be72:	4618      	mov	r0, r3
 800be74:	f7fe fcdb 	bl	800a82e <USBD_LL_DevDisconnected>
}
 800be78:	bf00      	nop
 800be7a:	3708      	adds	r7, #8
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}

0800be80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b082      	sub	sp, #8
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d13c      	bne.n	800bf0a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800be90:	4a20      	ldr	r2, [pc, #128]	@ (800bf14 <USBD_LL_Init+0x94>)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	4a1e      	ldr	r2, [pc, #120]	@ (800bf14 <USBD_LL_Init+0x94>)
 800be9c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bea0:	4b1c      	ldr	r3, [pc, #112]	@ (800bf14 <USBD_LL_Init+0x94>)
 800bea2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bea6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bea8:	4b1a      	ldr	r3, [pc, #104]	@ (800bf14 <USBD_LL_Init+0x94>)
 800beaa:	2204      	movs	r2, #4
 800beac:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800beae:	4b19      	ldr	r3, [pc, #100]	@ (800bf14 <USBD_LL_Init+0x94>)
 800beb0:	2202      	movs	r2, #2
 800beb2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800beb4:	4b17      	ldr	r3, [pc, #92]	@ (800bf14 <USBD_LL_Init+0x94>)
 800beb6:	2200      	movs	r2, #0
 800beb8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800beba:	4b16      	ldr	r3, [pc, #88]	@ (800bf14 <USBD_LL_Init+0x94>)
 800bebc:	2202      	movs	r2, #2
 800bebe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bec0:	4b14      	ldr	r3, [pc, #80]	@ (800bf14 <USBD_LL_Init+0x94>)
 800bec2:	2200      	movs	r2, #0
 800bec4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bec6:	4b13      	ldr	r3, [pc, #76]	@ (800bf14 <USBD_LL_Init+0x94>)
 800bec8:	2200      	movs	r2, #0
 800beca:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800becc:	4b11      	ldr	r3, [pc, #68]	@ (800bf14 <USBD_LL_Init+0x94>)
 800bece:	2200      	movs	r2, #0
 800bed0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bed2:	4b10      	ldr	r3, [pc, #64]	@ (800bf14 <USBD_LL_Init+0x94>)
 800bed4:	2200      	movs	r2, #0
 800bed6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bed8:	4b0e      	ldr	r3, [pc, #56]	@ (800bf14 <USBD_LL_Init+0x94>)
 800beda:	2200      	movs	r2, #0
 800bedc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bede:	480d      	ldr	r0, [pc, #52]	@ (800bf14 <USBD_LL_Init+0x94>)
 800bee0:	f7f9 fd43 	bl	800596a <HAL_PCD_Init>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d001      	beq.n	800beee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800beea:	f7f4 ff3f 	bl	8000d6c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800beee:	2180      	movs	r1, #128	@ 0x80
 800bef0:	4808      	ldr	r0, [pc, #32]	@ (800bf14 <USBD_LL_Init+0x94>)
 800bef2:	f7fa ff70 	bl	8006dd6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bef6:	2240      	movs	r2, #64	@ 0x40
 800bef8:	2100      	movs	r1, #0
 800befa:	4806      	ldr	r0, [pc, #24]	@ (800bf14 <USBD_LL_Init+0x94>)
 800befc:	f7fa ff24 	bl	8006d48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bf00:	2280      	movs	r2, #128	@ 0x80
 800bf02:	2101      	movs	r1, #1
 800bf04:	4803      	ldr	r0, [pc, #12]	@ (800bf14 <USBD_LL_Init+0x94>)
 800bf06:	f7fa ff1f 	bl	8006d48 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bf0a:	2300      	movs	r3, #0
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}
 800bf14:	20001288 	.word	0x20001288

0800bf18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf20:	2300      	movs	r3, #0
 800bf22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf24:	2300      	movs	r3, #0
 800bf26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7f9 fe2a 	bl	8005b88 <HAL_PCD_Start>
 800bf34:	4603      	mov	r3, r0
 800bf36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf38:	7bfb      	ldrb	r3, [r7, #15]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f000 f942 	bl	800c1c4 <USBD_Get_USB_Status>
 800bf40:	4603      	mov	r3, r0
 800bf42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf44:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}

0800bf4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b084      	sub	sp, #16
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
 800bf56:	4608      	mov	r0, r1
 800bf58:	4611      	mov	r1, r2
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	70fb      	strb	r3, [r7, #3]
 800bf60:	460b      	mov	r3, r1
 800bf62:	70bb      	strb	r3, [r7, #2]
 800bf64:	4613      	mov	r3, r2
 800bf66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bf76:	78bb      	ldrb	r3, [r7, #2]
 800bf78:	883a      	ldrh	r2, [r7, #0]
 800bf7a:	78f9      	ldrb	r1, [r7, #3]
 800bf7c:	f7fa fafe 	bl	800657c <HAL_PCD_EP_Open>
 800bf80:	4603      	mov	r3, r0
 800bf82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf84:	7bfb      	ldrb	r3, [r7, #15]
 800bf86:	4618      	mov	r0, r3
 800bf88:	f000 f91c 	bl	800c1c4 <USBD_Get_USB_Status>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf90:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}

0800bf9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf9a:	b580      	push	{r7, lr}
 800bf9c:	b084      	sub	sp, #16
 800bf9e:	af00      	add	r7, sp, #0
 800bfa0:	6078      	str	r0, [r7, #4]
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bfb4:	78fa      	ldrb	r2, [r7, #3]
 800bfb6:	4611      	mov	r1, r2
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7fa fb49 	bl	8006650 <HAL_PCD_EP_Close>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f000 f8fd 	bl	800c1c4 <USBD_Get_USB_Status>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfce:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bff2:	78fa      	ldrb	r2, [r7, #3]
 800bff4:	4611      	mov	r1, r2
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7fa fc01 	bl	80067fe <HAL_PCD_EP_SetStall>
 800bffc:	4603      	mov	r3, r0
 800bffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c000:	7bfb      	ldrb	r3, [r7, #15]
 800c002:	4618      	mov	r0, r3
 800c004:	f000 f8de 	bl	800c1c4 <USBD_Get_USB_Status>
 800c008:	4603      	mov	r3, r0
 800c00a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c00c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3710      	adds	r7, #16
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}

0800c016 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c016:	b580      	push	{r7, lr}
 800c018:	b084      	sub	sp, #16
 800c01a:	af00      	add	r7, sp, #0
 800c01c:	6078      	str	r0, [r7, #4]
 800c01e:	460b      	mov	r3, r1
 800c020:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c022:	2300      	movs	r3, #0
 800c024:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c026:	2300      	movs	r3, #0
 800c028:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c030:	78fa      	ldrb	r2, [r7, #3]
 800c032:	4611      	mov	r1, r2
 800c034:	4618      	mov	r0, r3
 800c036:	f7fa fc45 	bl	80068c4 <HAL_PCD_EP_ClrStall>
 800c03a:	4603      	mov	r3, r0
 800c03c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c03e:	7bfb      	ldrb	r3, [r7, #15]
 800c040:	4618      	mov	r0, r3
 800c042:	f000 f8bf 	bl	800c1c4 <USBD_Get_USB_Status>
 800c046:	4603      	mov	r3, r0
 800c048:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c04a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3710      	adds	r7, #16
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c054:	b480      	push	{r7}
 800c056:	b085      	sub	sp, #20
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	460b      	mov	r3, r1
 800c05e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c066:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c068:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	da0b      	bge.n	800c088 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c070:	78fb      	ldrb	r3, [r7, #3]
 800c072:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c076:	68f9      	ldr	r1, [r7, #12]
 800c078:	4613      	mov	r3, r2
 800c07a:	00db      	lsls	r3, r3, #3
 800c07c:	4413      	add	r3, r2
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	440b      	add	r3, r1
 800c082:	3316      	adds	r3, #22
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	e00b      	b.n	800c0a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c088:	78fb      	ldrb	r3, [r7, #3]
 800c08a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c08e:	68f9      	ldr	r1, [r7, #12]
 800c090:	4613      	mov	r3, r2
 800c092:	00db      	lsls	r3, r3, #3
 800c094:	4413      	add	r3, r2
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	440b      	add	r3, r1
 800c09a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c09e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3714      	adds	r7, #20
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c0c6:	78fa      	ldrb	r2, [r7, #3]
 800c0c8:	4611      	mov	r1, r2
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fa fa32 	bl	8006534 <HAL_PCD_SetAddress>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0d4:	7bfb      	ldrb	r3, [r7, #15]
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f000 f874 	bl	800c1c4 <USBD_Get_USB_Status>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3710      	adds	r7, #16
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b086      	sub	sp, #24
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	60f8      	str	r0, [r7, #12]
 800c0f2:	607a      	str	r2, [r7, #4]
 800c0f4:	603b      	str	r3, [r7, #0]
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0fe:	2300      	movs	r3, #0
 800c100:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c108:	7af9      	ldrb	r1, [r7, #11]
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	f7fa fb3c 	bl	800678a <HAL_PCD_EP_Transmit>
 800c112:	4603      	mov	r3, r0
 800c114:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c116:	7dfb      	ldrb	r3, [r7, #23]
 800c118:	4618      	mov	r0, r3
 800c11a:	f000 f853 	bl	800c1c4 <USBD_Get_USB_Status>
 800c11e:	4603      	mov	r3, r0
 800c120:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c122:	7dbb      	ldrb	r3, [r7, #22]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3718      	adds	r7, #24
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b086      	sub	sp, #24
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	607a      	str	r2, [r7, #4]
 800c136:	603b      	str	r3, [r7, #0]
 800c138:	460b      	mov	r3, r1
 800c13a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c13c:	2300      	movs	r3, #0
 800c13e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c140:	2300      	movs	r3, #0
 800c142:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c14a:	7af9      	ldrb	r1, [r7, #11]
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	f7fa fac8 	bl	80066e4 <HAL_PCD_EP_Receive>
 800c154:	4603      	mov	r3, r0
 800c156:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c158:	7dfb      	ldrb	r3, [r7, #23]
 800c15a:	4618      	mov	r0, r3
 800c15c:	f000 f832 	bl	800c1c4 <USBD_Get_USB_Status>
 800c160:	4603      	mov	r3, r0
 800c162:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c164:	7dbb      	ldrb	r3, [r7, #22]
}
 800c166:	4618      	mov	r0, r3
 800c168:	3718      	adds	r7, #24
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}

0800c16e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c16e:	b580      	push	{r7, lr}
 800c170:	b082      	sub	sp, #8
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
 800c176:	460b      	mov	r3, r1
 800c178:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c180:	78fa      	ldrb	r2, [r7, #3]
 800c182:	4611      	mov	r1, r2
 800c184:	4618      	mov	r0, r3
 800c186:	f7fa fae8 	bl	800675a <HAL_PCD_EP_GetRxCount>
 800c18a:	4603      	mov	r3, r0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3708      	adds	r7, #8
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c19c:	4b03      	ldr	r3, [pc, #12]	@ (800c1ac <USBD_static_malloc+0x18>)
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	370c      	adds	r7, #12
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr
 800c1aa:	bf00      	nop
 800c1ac:	2000176c 	.word	0x2000176c

0800c1b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]

}
 800c1b8:	bf00      	nop
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c1d2:	79fb      	ldrb	r3, [r7, #7]
 800c1d4:	2b03      	cmp	r3, #3
 800c1d6:	d817      	bhi.n	800c208 <USBD_Get_USB_Status+0x44>
 800c1d8:	a201      	add	r2, pc, #4	@ (adr r2, 800c1e0 <USBD_Get_USB_Status+0x1c>)
 800c1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1de:	bf00      	nop
 800c1e0:	0800c1f1 	.word	0x0800c1f1
 800c1e4:	0800c1f7 	.word	0x0800c1f7
 800c1e8:	0800c1fd 	.word	0x0800c1fd
 800c1ec:	0800c203 	.word	0x0800c203
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	73fb      	strb	r3, [r7, #15]
    break;
 800c1f4:	e00b      	b.n	800c20e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c1f6:	2303      	movs	r3, #3
 800c1f8:	73fb      	strb	r3, [r7, #15]
    break;
 800c1fa:	e008      	b.n	800c20e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c200:	e005      	b.n	800c20e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c202:	2303      	movs	r3, #3
 800c204:	73fb      	strb	r3, [r7, #15]
    break;
 800c206:	e002      	b.n	800c20e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c208:	2303      	movs	r3, #3
 800c20a:	73fb      	strb	r3, [r7, #15]
    break;
 800c20c:	bf00      	nop
  }
  return usb_status;
 800c20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c210:	4618      	mov	r0, r3
 800c212:	3714      	adds	r7, #20
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <memset>:
 800c21c:	4402      	add	r2, r0
 800c21e:	4603      	mov	r3, r0
 800c220:	4293      	cmp	r3, r2
 800c222:	d100      	bne.n	800c226 <memset+0xa>
 800c224:	4770      	bx	lr
 800c226:	f803 1b01 	strb.w	r1, [r3], #1
 800c22a:	e7f9      	b.n	800c220 <memset+0x4>

0800c22c <__libc_init_array>:
 800c22c:	b570      	push	{r4, r5, r6, lr}
 800c22e:	4d0d      	ldr	r5, [pc, #52]	@ (800c264 <__libc_init_array+0x38>)
 800c230:	4c0d      	ldr	r4, [pc, #52]	@ (800c268 <__libc_init_array+0x3c>)
 800c232:	1b64      	subs	r4, r4, r5
 800c234:	10a4      	asrs	r4, r4, #2
 800c236:	2600      	movs	r6, #0
 800c238:	42a6      	cmp	r6, r4
 800c23a:	d109      	bne.n	800c250 <__libc_init_array+0x24>
 800c23c:	4d0b      	ldr	r5, [pc, #44]	@ (800c26c <__libc_init_array+0x40>)
 800c23e:	4c0c      	ldr	r4, [pc, #48]	@ (800c270 <__libc_init_array+0x44>)
 800c240:	f000 f818 	bl	800c274 <_init>
 800c244:	1b64      	subs	r4, r4, r5
 800c246:	10a4      	asrs	r4, r4, #2
 800c248:	2600      	movs	r6, #0
 800c24a:	42a6      	cmp	r6, r4
 800c24c:	d105      	bne.n	800c25a <__libc_init_array+0x2e>
 800c24e:	bd70      	pop	{r4, r5, r6, pc}
 800c250:	f855 3b04 	ldr.w	r3, [r5], #4
 800c254:	4798      	blx	r3
 800c256:	3601      	adds	r6, #1
 800c258:	e7ee      	b.n	800c238 <__libc_init_array+0xc>
 800c25a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c25e:	4798      	blx	r3
 800c260:	3601      	adds	r6, #1
 800c262:	e7f2      	b.n	800c24a <__libc_init_array+0x1e>
 800c264:	0800d08c 	.word	0x0800d08c
 800c268:	0800d08c 	.word	0x0800d08c
 800c26c:	0800d08c 	.word	0x0800d08c
 800c270:	0800d090 	.word	0x0800d090

0800c274 <_init>:
 800c274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c276:	bf00      	nop
 800c278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c27a:	bc08      	pop	{r3}
 800c27c:	469e      	mov	lr, r3
 800c27e:	4770      	bx	lr

0800c280 <_fini>:
 800c280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c282:	bf00      	nop
 800c284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c286:	bc08      	pop	{r3}
 800c288:	469e      	mov	lr, r3
 800c28a:	4770      	bx	lr
