
FNMCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009720  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080098b8  080098b8  0000a8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009930  08009930  0000b130  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009930  08009930  0000a930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009938  08009938  0000b130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009938  08009938  0000a938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800993c  0800993c  0000a93c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000130  20000000  08009940  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000138c  20000130  08009a70  0000b130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014bc  08009a70  0000b4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b130  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189a5  00000000  00000000  0000b160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cff  00000000  00000000  00023b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  00027808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001137  00000000  00000000  00028e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000052a6  00000000  00000000  00029f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce2e  00000000  00000000  0002f22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e950  00000000  00000000  0004c05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea9ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e24  00000000  00000000  000ea9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f0814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000130 	.word	0x20000130
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080098a0 	.word	0x080098a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000134 	.word	0x20000134
 80001d4:	080098a0 	.word	0x080098a0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++) {
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	e00a      	b.n	8000528 <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 8000512:	4a0a      	ldr	r2, [pc, #40]	@ (800053c <HAL_ADC_ConvCpltCallback+0x38>)
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800051a:	4a09      	ldr	r2, [pc, #36]	@ (8000540 <HAL_ADC_ConvCpltCallback+0x3c>)
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	3301      	adds	r3, #1
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b07      	cmp	r3, #7
 800052c:	ddf1      	ble.n	8000512 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 800052e:	bf00      	nop
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	20000294 	.word	0x20000294
 8000540:	200002a4 	.word	0x200002a4

08000544 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a0e      	ldr	r2, [pc, #56]	@ (800058c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d116      	bne.n	8000584 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000556:	4b0e      	ldr	r3, [pc, #56]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	3301      	adds	r3, #1
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000560:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 8000562:	4b0b      	ldr	r3, [pc, #44]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b28      	cmp	r3, #40	@ 0x28
 8000568:	d107      	bne.n	800057a <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 800056a:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
			IS10MS=TRUE;
 8000570:	4a08      	ldr	r2, [pc, #32]	@ (8000594 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000572:	7813      	ldrb	r3, [r2, #0]
 8000574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000578:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 800057a:	2208      	movs	r2, #8
 800057c:	4906      	ldr	r1, [pc, #24]	@ (8000598 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800057e:	4807      	ldr	r0, [pc, #28]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000580:	f001 f9c0 	bl	8001904 <HAL_ADC_Start_DMA>
	}
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40010000 	.word	0x40010000
 8000590:	20000290 	.word	0x20000290
 8000594:	200004cc 	.word	0x200004cc
 8000598:	20000294 	.word	0x20000294
 800059c:	2000014c 	.word	0x2000014c

080005a0 <USBRxData>:

void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 80005a0:	b490      	push	{r4, r7}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 80005aa:	2300      	movs	r3, #0
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	e018      	b.n	80005e2 <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 80005b0:	7bfb      	ldrb	r3, [r7, #15]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	441a      	add	r2, r3
 80005b6:	4b10      	ldr	r3, [pc, #64]	@ (80005f8 <USBRxData+0x58>)
 80005b8:	6819      	ldr	r1, [r3, #0]
 80005ba:	4b0f      	ldr	r3, [pc, #60]	@ (80005f8 <USBRxData+0x58>)
 80005bc:	795b      	ldrb	r3, [r3, #5]
 80005be:	1c58      	adds	r0, r3, #1
 80005c0:	b2c4      	uxtb	r4, r0
 80005c2:	480d      	ldr	r0, [pc, #52]	@ (80005f8 <USBRxData+0x58>)
 80005c4:	7144      	strb	r4, [r0, #5]
 80005c6:	440b      	add	r3, r1
 80005c8:	7812      	ldrb	r2, [r2, #0]
 80005ca:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 80005cc:	4b0a      	ldr	r3, [pc, #40]	@ (80005f8 <USBRxData+0x58>)
 80005ce:	795a      	ldrb	r2, [r3, #5]
 80005d0:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <USBRxData+0x58>)
 80005d2:	799b      	ldrb	r3, [r3, #6]
 80005d4:	4013      	ands	r3, r2
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <USBRxData+0x58>)
 80005da:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	3301      	adds	r3, #1
 80005e0:	73fb      	strb	r3, [r7, #15]
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	683a      	ldr	r2, [r7, #0]
 80005e6:	429a      	cmp	r2, r3
 80005e8:	d8e2      	bhi.n	80005b0 <USBRxData+0x10>
	}

}
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	3710      	adds	r7, #16
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc90      	pop	{r4, r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	200002c0 	.word	0x200002c0

080005fc <USBTask>:

void USBTask() {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b0c2      	sub	sp, #264	@ 0x108
 8000600:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 8000602:	4b22      	ldr	r3, [pc, #136]	@ (800068c <USBTask+0x90>)
 8000604:	791a      	ldrb	r2, [r3, #4]
 8000606:	4b21      	ldr	r3, [pc, #132]	@ (800068c <USBTask+0x90>)
 8000608:	795b      	ldrb	r3, [r3, #5]
 800060a:	429a      	cmp	r2, r3
 800060c:	d039      	beq.n	8000682 <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (decodeHeader(&USBRx))
 800060e:	481f      	ldr	r0, [pc, #124]	@ (800068c <USBTask+0x90>)
 8000610:	f000 fc78 	bl	8000f04 <decodeHeader>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d003      	beq.n	8000622 <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 800061a:	491d      	ldr	r1, [pc, #116]	@ (8000690 <USBTask+0x94>)
 800061c:	481b      	ldr	r0, [pc, #108]	@ (800068c <USBTask+0x90>)
 800061e:	f000 f839 	bl	8000694 <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000622:	2300      	movs	r3, #0
 8000624:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000628:	e01d      	b.n	8000666 <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 800062a:	4b19      	ldr	r3, [pc, #100]	@ (8000690 <USBTask+0x94>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <USBTask+0x94>)
 8000630:	7a1b      	ldrb	r3, [r3, #8]
 8000632:	1c59      	adds	r1, r3, #1
 8000634:	b2c8      	uxtb	r0, r1
 8000636:	4916      	ldr	r1, [pc, #88]	@ (8000690 <USBTask+0x94>)
 8000638:	7208      	strb	r0, [r1, #8]
 800063a:	441a      	add	r2, r3
 800063c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000640:	7811      	ldrb	r1, [r2, #0]
 8000642:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000646:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800064a:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 800064c:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <USBTask+0x94>)
 800064e:	7a1a      	ldrb	r2, [r3, #8]
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <USBTask+0x94>)
 8000652:	799b      	ldrb	r3, [r3, #6]
 8000654:	4013      	ands	r3, r2
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b0d      	ldr	r3, [pc, #52]	@ (8000690 <USBTask+0x94>)
 800065a:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 800065c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000660:	3301      	adds	r3, #1
 8000662:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000666:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <USBTask+0x94>)
 8000668:	79db      	ldrb	r3, [r3, #7]
 800066a:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 800066e:	429a      	cmp	r2, r3
 8000670:	d3db      	bcc.n	800062a <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 8000672:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <USBTask+0x94>)
 8000674:	79db      	ldrb	r3, [r3, #7]
 8000676:	461a      	mov	r2, r3
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	4611      	mov	r1, r2
 800067c:	4618      	mov	r0, r3
 800067e:	f008 fc81 	bl	8008f84 <CDC_Transmit_FS>
	}

}
 8000682:	bf00      	nop
 8000684:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200002c0 	.word	0x200002c0
 8000690:	200002b4 	.word	0x200002b4

08000694 <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	7a12      	ldrb	r2, [r2, #8]
 80006a6:	4413      	add	r3, r2
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2bf0      	cmp	r3, #240	@ 0xf0
 80006ac:	d002      	beq.n	80006b4 <decodeCommand+0x20>
 80006ae:	2bf1      	cmp	r3, #241	@ 0xf1
 80006b0:	d010      	beq.n	80006d4 <decodeCommand+0x40>
 80006b2:	e01f      	b.n	80006f4 <decodeCommand+0x60>
	case ALIVE:
		putHeaderOnTx(dataTx, ALIVE, 2);
 80006b4:	2202      	movs	r2, #2
 80006b6:	21f0      	movs	r1, #240	@ 0xf0
 80006b8:	6838      	ldr	r0, [r7, #0]
 80006ba:	f000 fb01 	bl	8000cc0 <putHeaderOnTx>
		putByteOnTx(dataTx, ACK);
 80006be:	210d      	movs	r1, #13
 80006c0:	6838      	ldr	r0, [r7, #0]
 80006c2:	f000 fbac 	bl	8000e1e <putByteOnTx>
		putByteOnTx(dataTx, dataTx->chk);
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	7a5b      	ldrb	r3, [r3, #9]
 80006ca:	4619      	mov	r1, r3
 80006cc:	6838      	ldr	r0, [r7, #0]
 80006ce:	f000 fba6 	bl	8000e1e <putByteOnTx>
		break;
 80006d2:	e025      	b.n	8000720 <decodeCommand+0x8c>
	case FIRMWARE:
		putHeaderOnTx(dataTx, FIRMWARE, 13);
 80006d4:	220d      	movs	r2, #13
 80006d6:	21f1      	movs	r1, #241	@ 0xf1
 80006d8:	6838      	ldr	r0, [r7, #0]
 80006da:	f000 faf1 	bl	8000cc0 <putHeaderOnTx>
		putStrOntx(dataTx, firmware);
 80006de:	4912      	ldr	r1, [pc, #72]	@ (8000728 <decodeCommand+0x94>)
 80006e0:	6838      	ldr	r0, [r7, #0]
 80006e2:	f000 fbca 	bl	8000e7a <putStrOntx>
		putByteOnTx(dataTx, dataTx->chk);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	7a5b      	ldrb	r3, [r3, #9]
 80006ea:	4619      	mov	r1, r3
 80006ec:	6838      	ldr	r0, [r7, #0]
 80006ee:	f000 fb96 	bl	8000e1e <putByteOnTx>
		break;
 80006f2:	e015      	b.n	8000720 <decodeCommand+0x8c>
	default:
		putHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	7a12      	ldrb	r2, [r2, #8]
 80006fc:	4413      	add	r3, r2
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2202      	movs	r2, #2
 8000702:	4619      	mov	r1, r3
 8000704:	6838      	ldr	r0, [r7, #0]
 8000706:	f000 fadb 	bl	8000cc0 <putHeaderOnTx>
		putByteOnTx(dataTx, UNKNOWN);
 800070a:	21ff      	movs	r1, #255	@ 0xff
 800070c:	6838      	ldr	r0, [r7, #0]
 800070e:	f000 fb86 	bl	8000e1e <putByteOnTx>
		putByteOnTx(dataTx, dataTx->chk);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	7a5b      	ldrb	r3, [r3, #9]
 8000716:	4619      	mov	r1, r3
 8000718:	6838      	ldr	r0, [r7, #0]
 800071a:	f000 fb80 	bl	8000e1e <putByteOnTx>
		break;
 800071e:	bf00      	nop
	}
}
 8000720:	bf00      	nop
 8000722:	3708      	adds	r7, #8
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	08009900 	.word	0x08009900

0800072c <do10ms>:

void do10ms() {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	if(IS10MS){
 8000730:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <do10ms+0x48>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d017      	beq.n	800076e <do10ms+0x42>
		IS10MS=FALSE;
 800073e:	4a0d      	ldr	r2, [pc, #52]	@ (8000774 <do10ms+0x48>)
 8000740:	7813      	ldrb	r3, [r2, #0]
 8000742:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000746:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 8000748:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <do10ms+0x4c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3b01      	subs	r3, #1
 800074e:	4a0a      	ldr	r2, [pc, #40]	@ (8000778 <do10ms+0x4c>)
 8000750:	6013      	str	r3, [r2, #0]
		if (tmo100ms == 0) {
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <do10ms+0x4c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d109      	bne.n	800076e <do10ms+0x42>
			tmo100ms = 10;
 800075a:	4b07      	ldr	r3, [pc, #28]	@ (8000778 <do10ms+0x4c>)
 800075c:	220a      	movs	r2, #10
 800075e:	601a      	str	r2, [r3, #0]
			IS100MS=TRUE;
 8000760:	4a04      	ldr	r2, [pc, #16]	@ (8000774 <do10ms+0x48>)
 8000762:	7813      	ldrb	r3, [r2, #0]
 8000764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000768:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 800076a:	f000 f807 	bl	800077c <heartBeatTask>
		}
	}
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200004cc 	.word	0x200004cc
 8000778:	20000028 	.word	0x20000028

0800077c <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <heartBeatTask+0x44>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	43db      	mvns	r3, r3
 8000786:	4a0f      	ldr	r2, [pc, #60]	@ (80007c4 <heartBeatTask+0x48>)
 8000788:	7812      	ldrb	r2, [r2, #0]
 800078a:	4611      	mov	r1, r2
 800078c:	2201      	movs	r2, #1
 800078e:	408a      	lsls	r2, r1
 8000790:	4013      	ands	r3, r2
 8000792:	2b00      	cmp	r3, #0
 8000794:	d004      	beq.n	80007a0 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 8000796:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800079a:	480b      	ldr	r0, [pc, #44]	@ (80007c8 <heartBeatTask+0x4c>)
 800079c:	f002 fa9d 	bl	8002cda <HAL_GPIO_TogglePin>

	times++;
 80007a0:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <heartBeatTask+0x48>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	3301      	adds	r3, #1
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <heartBeatTask+0x48>)
 80007aa:	701a      	strb	r2, [r3, #0]
	times &= 31;
 80007ac:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <heartBeatTask+0x48>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	f003 031f 	and.w	r3, r3, #31
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <heartBeatTask+0x48>)
 80007b8:	701a      	strb	r2, [r3, #0]
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000000 	.word	0x20000000
 80007c4:	200004cd 	.word	0x200004cd
 80007c8:	40020800 	.word	0x40020800

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d0:	f000 feae 	bl	8001530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d4:	f000 f83e 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d8:	f000 fa0c 	bl	8000bf4 <MX_GPIO_Init>
  MX_DMA_Init();
 80007dc:	f000 f9ea 	bl	8000bb4 <MX_DMA_Init>
  MX_ADC1_Init();
 80007e0:	f000 f8a0 	bl	8000924 <MX_ADC1_Init>
  MX_I2C1_Init();
 80007e4:	f000 f952 	bl	8000a8c <MX_I2C1_Init>
  MX_TIM1_Init();
 80007e8:	f000 f97e 	bl	8000ae8 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80007ec:	f008 fab0 	bl	8008d50 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 80007f0:	480f      	ldr	r0, [pc, #60]	@ (8000830 <main+0x64>)
 80007f2:	f008 fbff 	bl	8008ff4 <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1); //timer
 80007f6:	480f      	ldr	r0, [pc, #60]	@ (8000834 <main+0x68>)
 80007f8:	f004 fab4 	bl	8004d64 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000802:	480d      	ldr	r0, [pc, #52]	@ (8000838 <main+0x6c>)
 8000804:	f002 fa50 	bl	8002ca8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000808:	2201      	movs	r2, #1
 800080a:	2102      	movs	r1, #2
 800080c:	480b      	ldr	r0, [pc, #44]	@ (800083c <main+0x70>)
 800080e:	f002 fa4b 	bl	8002ca8 <HAL_GPIO_WritePin>

	//SSD1306_Init();

	initComm(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 8000812:	4b0b      	ldr	r3, [pc, #44]	@ (8000840 <main+0x74>)
 8000814:	4a0b      	ldr	r2, [pc, #44]	@ (8000844 <main+0x78>)
 8000816:	490c      	ldr	r1, [pc, #48]	@ (8000848 <main+0x7c>)
 8000818:	480c      	ldr	r0, [pc, #48]	@ (800084c <main+0x80>)
 800081a:	f000 fc71 	bl	8001100 <initComm>

	//Variables
	ALLFLAGS = RESET;
 800081e:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <main+0x84>)
 8000820:	2200      	movs	r2, #0
 8000822:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	do10ms();
 8000824:	f7ff ff82 	bl	800072c <do10ms>
		USBTask();
 8000828:	f7ff fee8 	bl	80005fc <USBTask>
	  	do10ms();
 800082c:	bf00      	nop
 800082e:	e7f9      	b.n	8000824 <main+0x58>
 8000830:	080005a1 	.word	0x080005a1
 8000834:	20000248 	.word	0x20000248
 8000838:	40020800 	.word	0x40020800
 800083c:	40020400 	.word	0x40020400
 8000840:	200002cc 	.word	0x200002cc
 8000844:	200003cc 	.word	0x200003cc
 8000848:	200002b4 	.word	0x200002b4
 800084c:	200002c0 	.word	0x200002c0
 8000850:	200004cc 	.word	0x200004cc

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	@ 0x50
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 0320 	add.w	r3, r7, #32
 800085e:	2230      	movs	r2, #48	@ 0x30
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f008 fff0 	bl	8009848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	4b27      	ldr	r3, [pc, #156]	@ (800091c <SystemClock_Config+0xc8>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000880:	4a26      	ldr	r2, [pc, #152]	@ (800091c <SystemClock_Config+0xc8>)
 8000882:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000886:	6413      	str	r3, [r2, #64]	@ 0x40
 8000888:	4b24      	ldr	r3, [pc, #144]	@ (800091c <SystemClock_Config+0xc8>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000890:	60bb      	str	r3, [r7, #8]
 8000892:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000894:	2300      	movs	r3, #0
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	4b21      	ldr	r3, [pc, #132]	@ (8000920 <SystemClock_Config+0xcc>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a20      	ldr	r2, [pc, #128]	@ (8000920 <SystemClock_Config+0xcc>)
 800089e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008a2:	6013      	str	r3, [r2, #0]
 80008a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <SystemClock_Config+0xcc>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b0:	2301      	movs	r3, #1
 80008b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ba:	2302      	movs	r3, #2
 80008bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008c4:	2319      	movs	r3, #25
 80008c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008c8:	23c0      	movs	r3, #192	@ 0xc0
 80008ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008d0:	2304      	movs	r3, #4
 80008d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d4:	f107 0320 	add.w	r3, r7, #32
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 fdaf 	bl	800443c <HAL_RCC_OscConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008e4:	f000 f9e6 	bl	8000cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e8:	230f      	movs	r3, #15
 80008ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ec:	2302      	movs	r3, #2
 80008ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	2103      	movs	r1, #3
 8000904:	4618      	mov	r0, r3
 8000906:	f004 f811 	bl	800492c <HAL_RCC_ClockConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000910:	f000 f9d0 	bl	8000cb4 <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	3750      	adds	r7, #80	@ 0x50
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000

08000924 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800092a:	463b      	mov	r3, r7
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000936:	4b52      	ldr	r3, [pc, #328]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 8000938:	4a52      	ldr	r2, [pc, #328]	@ (8000a84 <MX_ADC1_Init+0x160>)
 800093a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800093c:	4b50      	ldr	r3, [pc, #320]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 800093e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000942:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000944:	4b4e      	ldr	r3, [pc, #312]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800094a:	4b4d      	ldr	r3, [pc, #308]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 800094c:	2201      	movs	r2, #1
 800094e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000950:	4b4b      	ldr	r3, [pc, #300]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 8000952:	2200      	movs	r2, #0
 8000954:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000956:	4b4a      	ldr	r3, [pc, #296]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800095e:	4b48      	ldr	r3, [pc, #288]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 8000960:	2200      	movs	r2, #0
 8000962:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000964:	4b46      	ldr	r3, [pc, #280]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 8000966:	4a48      	ldr	r2, [pc, #288]	@ (8000a88 <MX_ADC1_Init+0x164>)
 8000968:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800096a:	4b45      	ldr	r3, [pc, #276]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000970:	4b43      	ldr	r3, [pc, #268]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 8000972:	2208      	movs	r2, #8
 8000974:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000976:	4b42      	ldr	r3, [pc, #264]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 8000978:	2201      	movs	r2, #1
 800097a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800097e:	4b40      	ldr	r3, [pc, #256]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 8000980:	2201      	movs	r2, #1
 8000982:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000984:	483e      	ldr	r0, [pc, #248]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 8000986:	f000 fe69 	bl	800165c <HAL_ADC_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000990:	f000 f990 	bl	8000cb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000994:	2300      	movs	r3, #0
 8000996:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000998:	2301      	movs	r3, #1
 800099a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a0:	463b      	mov	r3, r7
 80009a2:	4619      	mov	r1, r3
 80009a4:	4836      	ldr	r0, [pc, #216]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 80009a6:	f001 f8bf 	bl	8001b28 <HAL_ADC_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009b0:	f000 f980 	bl	8000cb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009b4:	2301      	movs	r3, #1
 80009b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009bc:	463b      	mov	r3, r7
 80009be:	4619      	mov	r1, r3
 80009c0:	482f      	ldr	r0, [pc, #188]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 80009c2:	f001 f8b1 	bl	8001b28 <HAL_ADC_ConfigChannel>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009cc:	f000 f972 	bl	8000cb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80009d4:	2303      	movs	r3, #3
 80009d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4828      	ldr	r0, [pc, #160]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 80009de:	f001 f8a3 	bl	8001b28 <HAL_ADC_ConfigChannel>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80009e8:	f000 f964 	bl	8000cb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009ec:	2303      	movs	r3, #3
 80009ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80009f0:	2304      	movs	r3, #4
 80009f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	4619      	mov	r1, r3
 80009f8:	4821      	ldr	r0, [pc, #132]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 80009fa:	f001 f895 	bl	8001b28 <HAL_ADC_ConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000a04:	f000 f956 	bl	8000cb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a08:	2304      	movs	r3, #4
 8000a0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000a0c:	2305      	movs	r3, #5
 8000a0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a10:	463b      	mov	r3, r7
 8000a12:	4619      	mov	r1, r3
 8000a14:	481a      	ldr	r0, [pc, #104]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 8000a16:	f001 f887 	bl	8001b28 <HAL_ADC_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000a20:	f000 f948 	bl	8000cb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a24:	2305      	movs	r3, #5
 8000a26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000a28:	2306      	movs	r3, #6
 8000a2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4813      	ldr	r0, [pc, #76]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 8000a32:	f001 f879 	bl	8001b28 <HAL_ADC_ConfigChannel>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000a3c:	f000 f93a 	bl	8000cb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a40:	2306      	movs	r3, #6
 8000a42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000a44:	2307      	movs	r3, #7
 8000a46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a48:	463b      	mov	r3, r7
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480c      	ldr	r0, [pc, #48]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 8000a4e:	f001 f86b 	bl	8001b28 <HAL_ADC_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000a58:	f000 f92c 	bl	8000cb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a5c:	2307      	movs	r3, #7
 8000a5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000a60:	2308      	movs	r3, #8
 8000a62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <MX_ADC1_Init+0x15c>)
 8000a6a:	f001 f85d 	bl	8001b28 <HAL_ADC_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000a74:	f000 f91e 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2000014c 	.word	0x2000014c
 8000a84:	40012000 	.word	0x40012000
 8000a88:	0f000001 	.word	0x0f000001

08000a8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a90:	4b12      	ldr	r3, [pc, #72]	@ (8000adc <MX_I2C1_Init+0x50>)
 8000a92:	4a13      	ldr	r2, [pc, #76]	@ (8000ae0 <MX_I2C1_Init+0x54>)
 8000a94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <MX_I2C1_Init+0x50>)
 8000a98:	4a12      	ldr	r2, [pc, #72]	@ (8000ae4 <MX_I2C1_Init+0x58>)
 8000a9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <MX_I2C1_Init+0x50>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <MX_I2C1_Init+0x50>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <MX_I2C1_Init+0x50>)
 8000aaa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8000adc <MX_I2C1_Init+0x50>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab6:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <MX_I2C1_Init+0x50>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000abc:	4b07      	ldr	r3, [pc, #28]	@ (8000adc <MX_I2C1_Init+0x50>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac2:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <MX_I2C1_Init+0x50>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ac8:	4804      	ldr	r0, [pc, #16]	@ (8000adc <MX_I2C1_Init+0x50>)
 8000aca:	f002 f921 	bl	8002d10 <HAL_I2C_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ad4:	f000 f8ee 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200001f4 	.word	0x200001f4
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	00061a80 	.word	0x00061a80

08000ae8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	@ 0x30
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aee:	f107 0320 	add.w	r3, r7, #32
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b14:	4b25      	ldr	r3, [pc, #148]	@ (8000bac <MX_TIM1_Init+0xc4>)
 8000b16:	4a26      	ldr	r2, [pc, #152]	@ (8000bb0 <MX_TIM1_Init+0xc8>)
 8000b18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8000b1a:	4b24      	ldr	r3, [pc, #144]	@ (8000bac <MX_TIM1_Init+0xc4>)
 8000b1c:	225f      	movs	r2, #95	@ 0x5f
 8000b1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b20:	4b22      	ldr	r3, [pc, #136]	@ (8000bac <MX_TIM1_Init+0xc4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000b26:	4b21      	ldr	r3, [pc, #132]	@ (8000bac <MX_TIM1_Init+0xc4>)
 8000b28:	22f9      	movs	r2, #249	@ 0xf9
 8000b2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <MX_TIM1_Init+0xc4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b32:	4b1e      	ldr	r3, [pc, #120]	@ (8000bac <MX_TIM1_Init+0xc4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b38:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <MX_TIM1_Init+0xc4>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b3e:	481b      	ldr	r0, [pc, #108]	@ (8000bac <MX_TIM1_Init+0xc4>)
 8000b40:	f004 f8c0 	bl	8004cc4 <HAL_TIM_Base_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000b4a:	f000 f8b3 	bl	8000cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b52:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b54:	f107 0320 	add.w	r3, r7, #32
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4814      	ldr	r0, [pc, #80]	@ (8000bac <MX_TIM1_Init+0xc4>)
 8000b5c:	f004 fa54 	bl	8005008 <HAL_TIM_ConfigClockSource>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000b66:	f000 f8a5 	bl	8000cb4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	4619      	mov	r1, r3
 8000b78:	480c      	ldr	r0, [pc, #48]	@ (8000bac <MX_TIM1_Init+0xc4>)
 8000b7a:	f004 fb0c 	bl	8005196 <HAL_TIM_SlaveConfigSynchro>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000b84:	f000 f896 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_TIM1_Init+0xc4>)
 8000b96:	f004 fd1b 	bl	80055d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000ba0:	f000 f888 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	3730      	adds	r7, #48	@ 0x30
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000248 	.word	0x20000248
 8000bb0:	40010000 	.word	0x40010000

08000bb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <MX_DMA_Init+0x3c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf0 <MX_DMA_Init+0x3c>)
 8000bc4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <MX_DMA_Init+0x3c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2038      	movs	r0, #56	@ 0x38
 8000bdc:	f001 fb39 	bl	8002252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000be0:	2038      	movs	r0, #56	@ 0x38
 8000be2:	f001 fb52 	bl	800228a <HAL_NVIC_EnableIRQ>

}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800

08000bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	@ 0x28
 8000bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b27      	ldr	r3, [pc, #156]	@ (8000cac <MX_GPIO_Init+0xb8>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a26      	ldr	r2, [pc, #152]	@ (8000cac <MX_GPIO_Init+0xb8>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b24      	ldr	r3, [pc, #144]	@ (8000cac <MX_GPIO_Init+0xb8>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <MX_GPIO_Init+0xb8>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8000cac <MX_GPIO_Init+0xb8>)
 8000c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <MX_GPIO_Init+0xb8>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <MX_GPIO_Init+0xb8>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a18      	ldr	r2, [pc, #96]	@ (8000cac <MX_GPIO_Init+0xb8>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b16      	ldr	r3, [pc, #88]	@ (8000cac <MX_GPIO_Init+0xb8>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <MX_GPIO_Init+0xb8>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a11      	ldr	r2, [pc, #68]	@ (8000cac <MX_GPIO_Init+0xb8>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <MX_GPIO_Init+0xb8>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c80:	480b      	ldr	r0, [pc, #44]	@ (8000cb0 <MX_GPIO_Init+0xbc>)
 8000c82:	f002 f811 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4804      	ldr	r0, [pc, #16]	@ (8000cb0 <MX_GPIO_Init+0xbc>)
 8000ca0:	f001 fe7e 	bl	80029a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ca4:	bf00      	nop
 8000ca6:	3728      	adds	r7, #40	@ 0x28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020800 	.word	0x40020800

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cbc:	bf00      	nop
 8000cbe:	e7fd      	b.n	8000cbc <Error_Handler+0x8>

08000cc0 <putHeaderOnTx>:


//Function definitions

uint8_t putHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	70fb      	strb	r3, [r7, #3]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 8000cd0:	78bb      	ldrb	r3, [r7, #2]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	795a      	ldrb	r2, [r3, #5]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	795b      	ldrb	r3, [r3, #5]
 8000cec:	1c59      	adds	r1, r3, #1
 8000cee:	b2c8      	uxtb	r0, r1
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	7148      	strb	r0, [r1, #5]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	2255      	movs	r2, #85	@ 0x55
 8000cf8:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	795a      	ldrb	r2, [r3, #5]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	799b      	ldrb	r3, [r3, #6]
 8000d02:	4013      	ands	r3, r2
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	795b      	ldrb	r3, [r3, #5]
 8000d12:	1c59      	adds	r1, r3, #1
 8000d14:	b2c8      	uxtb	r0, r1
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	7148      	strb	r0, [r1, #5]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	224e      	movs	r2, #78	@ 0x4e
 8000d1e:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	795a      	ldrb	r2, [r3, #5]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	799b      	ldrb	r3, [r3, #6]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	795b      	ldrb	r3, [r3, #5]
 8000d38:	1c59      	adds	r1, r3, #1
 8000d3a:	b2c8      	uxtb	r0, r1
 8000d3c:	6879      	ldr	r1, [r7, #4]
 8000d3e:	7148      	strb	r0, [r1, #5]
 8000d40:	4413      	add	r3, r2
 8000d42:	2245      	movs	r2, #69	@ 0x45
 8000d44:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	795a      	ldrb	r2, [r3, #5]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	799b      	ldrb	r3, [r3, #6]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	795b      	ldrb	r3, [r3, #5]
 8000d5e:	1c59      	adds	r1, r3, #1
 8000d60:	b2c8      	uxtb	r0, r1
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	7148      	strb	r0, [r1, #5]
 8000d66:	4413      	add	r3, r2
 8000d68:	2252      	movs	r2, #82	@ 0x52
 8000d6a:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	795a      	ldrb	r2, [r3, #5]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	799b      	ldrb	r3, [r3, #6]
 8000d74:	4013      	ands	r3, r2
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	795b      	ldrb	r3, [r3, #5]
 8000d84:	1c59      	adds	r1, r3, #1
 8000d86:	b2c8      	uxtb	r0, r1
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	7148      	strb	r0, [r1, #5]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	78ba      	ldrb	r2, [r7, #2]
 8000d90:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	795a      	ldrb	r2, [r3, #5]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	799b      	ldrb	r3, [r3, #6]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	795b      	ldrb	r3, [r3, #5]
 8000daa:	1c59      	adds	r1, r3, #1
 8000dac:	b2c8      	uxtb	r0, r1
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	7148      	strb	r0, [r1, #5]
 8000db2:	4413      	add	r3, r2
 8000db4:	223a      	movs	r2, #58	@ 0x3a
 8000db6:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	795a      	ldrb	r2, [r3, #5]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	799b      	ldrb	r3, [r3, #6]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	795b      	ldrb	r3, [r3, #5]
 8000dd0:	1c59      	adds	r1, r3, #1
 8000dd2:	b2c8      	uxtb	r0, r1
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	7148      	strb	r0, [r1, #5]
 8000dd8:	4413      	add	r3, r2
 8000dda:	78fa      	ldrb	r2, [r7, #3]
 8000ddc:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	795a      	ldrb	r2, [r3, #5]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	799b      	ldrb	r3, [r3, #6]
 8000de6:	4013      	ands	r3, r2
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2207      	movs	r2, #7
 8000df2:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7a5a      	ldrb	r2, [r3, #9]
 8000df8:	78b9      	ldrb	r1, [r7, #2]
 8000dfa:	78fb      	ldrb	r3, [r7, #3]
 8000dfc:	404b      	eors	r3, r1
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	4053      	eors	r3, r2
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	7a5b      	ldrb	r3, [r3, #9]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <putByteOnTx>:

uint8_t putByteOnTx(_sTx *dataTx, uint8_t byte)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	460b      	mov	r3, r1
 8000e28:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	79db      	ldrb	r3, [r3, #7]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	795b      	ldrb	r3, [r3, #5]
 8000e3e:	1c59      	adds	r1, r3, #1
 8000e40:	b2c8      	uxtb	r0, r1
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	7148      	strb	r0, [r1, #5]
 8000e46:	4413      	add	r3, r2
 8000e48:	78fa      	ldrb	r2, [r7, #3]
 8000e4a:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	795a      	ldrb	r2, [r3, #5]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	799b      	ldrb	r3, [r3, #6]
 8000e54:	4013      	ands	r3, r2
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	7a5a      	ldrb	r2, [r3, #9]
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	4053      	eors	r3, r2
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	7a5b      	ldrb	r3, [r3, #9]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <putStrOntx>:

uint8_t putStrOntx(_sTx *dataTx, const char *str)
{
 8000e7a:	b490      	push	{r4, r7}
 8000e7c:	b084      	sub	sp, #16
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 8000e88:	e02c      	b.n	8000ee4 <putStrOntx+0x6a>
    	dataTx->bytes++;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	79db      	ldrb	r3, [r3, #7]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	441a      	add	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6819      	ldr	r1, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	795b      	ldrb	r3, [r3, #5]
 8000ea8:	1c58      	adds	r0, r3, #1
 8000eaa:	b2c4      	uxtb	r4, r0
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	7144      	strb	r4, [r0, #5]
 8000eb0:	440b      	add	r3, r1
 8000eb2:	7812      	ldrb	r2, [r2, #0]
 8000eb4:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	795a      	ldrb	r2, [r3, #5]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	799b      	ldrb	r3, [r3, #6]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	73fa      	strb	r2, [r7, #15]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	781a      	ldrb	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	7a5b      	ldrb	r3, [r3, #9]
 8000edc:	4053      	eors	r3, r2
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	461a      	mov	r2, r3
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	4413      	add	r3, r2
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1ca      	bne.n	8000e8a <putStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	7a5b      	ldrb	r3, [r3, #9]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc90      	pop	{r4, r7}
 8000f00:	4770      	bx	lr
	...

08000f04 <decodeHeader>:
	return getByte;
}


uint8_t decodeHeader(_sTx *dataRx)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	795b      	ldrb	r3, [r3, #5]
 8000f14:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 8000f16:	e0e4      	b.n	80010e2 <decodeHeader+0x1de>
        switch(header)
 8000f18:	4b78      	ldr	r3, [pc, #480]	@ (80010fc <decodeHeader+0x1f8>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b07      	cmp	r3, #7
 8000f1e:	f200 80c9 	bhi.w	80010b4 <decodeHeader+0x1b0>
 8000f22:	a201      	add	r2, pc, #4	@ (adr r2, 8000f28 <decodeHeader+0x24>)
 8000f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f28:	08000f49 	.word	0x08000f49
 8000f2c:	08000f63 	.word	0x08000f63
 8000f30:	08000fa1 	.word	0x08000fa1
 8000f34:	08000fcd 	.word	0x08000fcd
 8000f38:	08000ff9 	.word	0x08000ff9
 8000f3c:	0800100f 	.word	0x0800100f
 8000f40:	080010b5 	.word	0x080010b5
 8000f44:	08001071 	.word	0x08001071
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	7912      	ldrb	r2, [r2, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b55      	cmp	r3, #85	@ 0x55
 8000f56:	f040 80b1 	bne.w	80010bc <decodeHeader+0x1b8>
                   header = HEADER_N;
 8000f5a:	4b68      	ldr	r3, [pc, #416]	@ (80010fc <decodeHeader+0x1f8>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
                }
            break;
 8000f60:	e0ac      	b.n	80010bc <decodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	7912      	ldrb	r2, [r2, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b4e      	cmp	r3, #78	@ 0x4e
 8000f70:	d103      	bne.n	8000f7a <decodeHeader+0x76>
                    header = HEADER_E;
 8000f72:	4b62      	ldr	r3, [pc, #392]	@ (80010fc <decodeHeader+0x1f8>)
 8000f74:	2202      	movs	r2, #2
 8000f76:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 8000f78:	e0a2      	b.n	80010c0 <decodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	7912      	ldrb	r2, [r2, #4]
 8000f82:	4413      	add	r3, r2
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b55      	cmp	r3, #85	@ 0x55
 8000f88:	f000 809a 	beq.w	80010c0 <decodeHeader+0x1bc>
                    	header = HEADER_U;
 8000f8c:	4b5b      	ldr	r3, [pc, #364]	@ (80010fc <decodeHeader+0x1f8>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	791b      	ldrb	r3, [r3, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	711a      	strb	r2, [r3, #4]
            break;
 8000f9e:	e08f      	b.n	80010c0 <decodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	7912      	ldrb	r2, [r2, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b45      	cmp	r3, #69	@ 0x45
 8000fae:	d103      	bne.n	8000fb8 <decodeHeader+0xb4>
                    header = HEADER_R;
 8000fb0:	4b52      	ldr	r3, [pc, #328]	@ (80010fc <decodeHeader+0x1f8>)
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8000fb6:	e086      	b.n	80010c6 <decodeHeader+0x1c2>
                    header = HEADER_U;
 8000fb8:	4b50      	ldr	r3, [pc, #320]	@ (80010fc <decodeHeader+0x1f8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	791b      	ldrb	r3, [r3, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	711a      	strb	r2, [r3, #4]
            break;
 8000fca:	e07c      	b.n	80010c6 <decodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	7912      	ldrb	r2, [r2, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b52      	cmp	r3, #82	@ 0x52
 8000fda:	d103      	bne.n	8000fe4 <decodeHeader+0xe0>
                    header = NBYTES;
 8000fdc:	4b47      	ldr	r3, [pc, #284]	@ (80010fc <decodeHeader+0x1f8>)
 8000fde:	2204      	movs	r2, #4
 8000fe0:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 8000fe2:	e070      	b.n	80010c6 <decodeHeader+0x1c2>
                    header = HEADER_U;
 8000fe4:	4b45      	ldr	r3, [pc, #276]	@ (80010fc <decodeHeader+0x1f8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	791b      	ldrb	r3, [r3, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	711a      	strb	r2, [r3, #4]
            break;
 8000ff6:	e066      	b.n	80010c6 <decodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	7912      	ldrb	r2, [r2, #4]
 8001000:	4413      	add	r3, r2
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 8001006:	4b3d      	ldr	r3, [pc, #244]	@ (80010fc <decodeHeader+0x1f8>)
 8001008:	2205      	movs	r2, #5
 800100a:	701a      	strb	r2, [r3, #0]
            break;
 800100c:	e05b      	b.n	80010c6 <decodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	7912      	ldrb	r2, [r2, #4]
 8001016:	4413      	add	r3, r2
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b3a      	cmp	r3, #58	@ 0x3a
 800101c:	d11e      	bne.n	800105c <decodeHeader+0x158>
                    header = PAYLOAD;
 800101e:	4b37      	ldr	r3, [pc, #220]	@ (80010fc <decodeHeader+0x1f8>)
 8001020:	2207      	movs	r2, #7
 8001022:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	791b      	ldrb	r3, [r3, #4]
 8001028:	3301      	adds	r3, #1
 800102a:	b2da      	uxtb	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7a1a      	ldrb	r2, [r3, #8]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	799b      	ldrb	r3, [r3, #6]
 8001038:	4013      	ands	r3, r2
 800103a:	b2da      	uxtb	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2200      	movs	r2, #0
 8001044:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7a5a      	ldrb	r2, [r3, #9]
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	4053      	eors	r3, r2
 800104e:	b2db      	uxtb	r3, r3
 8001050:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8001054:	b2da      	uxtb	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 800105a:	e034      	b.n	80010c6 <decodeHeader+0x1c2>
                    header = HEADER_U;
 800105c:	4b27      	ldr	r3, [pc, #156]	@ (80010fc <decodeHeader+0x1f8>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	791b      	ldrb	r3, [r3, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	b2da      	uxtb	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	711a      	strb	r2, [r3, #4]
            break;
 800106e:	e02a      	b.n	80010c6 <decodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	3b01      	subs	r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00c      	beq.n	8001096 <decodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7a5a      	ldrb	r2, [r3, #9]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6879      	ldr	r1, [r7, #4]
 8001086:	7909      	ldrb	r1, [r1, #4]
 8001088:	440b      	add	r3, r1
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4053      	eors	r3, r2
 800108e:	b2da      	uxtb	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 8001094:	e016      	b.n	80010c4 <decodeHeader+0x1c0>
                    header = HEADER_U;
 8001096:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <decodeHeader+0x1f8>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	7912      	ldrb	r2, [r2, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7a5b      	ldrb	r3, [r3, #9]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d109      	bne.n	80010c4 <decodeHeader+0x1c0>
                        return TRUE;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e01d      	b.n	80010f0 <decodeHeader+0x1ec>
            default:
                header = HEADER_U;
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <decodeHeader+0x1f8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
            break;
 80010ba:	e004      	b.n	80010c6 <decodeHeader+0x1c2>
            break;
 80010bc:	bf00      	nop
 80010be:	e002      	b.n	80010c6 <decodeHeader+0x1c2>
            break;
 80010c0:	bf00      	nop
 80010c2:	e000      	b.n	80010c6 <decodeHeader+0x1c2>
            break;
 80010c4:	bf00      	nop
        }
        dataRx->indexR++;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	791b      	ldrb	r3, [r3, #4]
 80010ca:	3301      	adds	r3, #1
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	791a      	ldrb	r2, [r3, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	799b      	ldrb	r3, [r3, #6]
 80010da:	4013      	ands	r3, r2
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	791b      	ldrb	r3, [r3, #4]
 80010e6:	7bba      	ldrb	r2, [r7, #14]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	f47f af15 	bne.w	8000f18 <decodeHeader+0x14>
    }
    return FALSE;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	200004ce 	.word	0x200004ce

08001100 <initComm>:

void initComm(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	603b      	str	r3, [r7, #0]
    //INICIALIZAMOS VARIABLES
	Rx->buff = (uint8_t *)buffRx;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2200      	movs	r2, #0
 800111e:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	2200      	movs	r2, #0
 8001124:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2200      	movs	r2, #0
 800112a:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	22ff      	movs	r2, #255	@ 0xff
 8001130:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2200      	movs	r2, #0
 8001136:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	2200      	movs	r2, #0
 8001142:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2200      	movs	r2, #0
 8001148:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	2200      	movs	r2, #0
 800114e:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	2200      	movs	r2, #0
 8001154:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	22ff      	movs	r2, #255	@ 0xff
 800115a:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	2200      	movs	r2, #0
 8001160:	725a      	strb	r2, [r3, #9]

}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <HAL_MspInit+0x4c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117e:	4a0f      	ldr	r2, [pc, #60]	@ (80011bc <HAL_MspInit+0x4c>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001184:	6453      	str	r3, [r2, #68]	@ 0x44
 8001186:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <HAL_MspInit+0x4c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <HAL_MspInit+0x4c>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119a:	4a08      	ldr	r2, [pc, #32]	@ (80011bc <HAL_MspInit+0x4c>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_MspInit+0x4c>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40023800 	.word	0x40023800

080011c0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	@ 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a32      	ldr	r2, [pc, #200]	@ (80012a8 <HAL_ADC_MspInit+0xe8>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d15e      	bne.n	80012a0 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	4b31      	ldr	r3, [pc, #196]	@ (80012ac <HAL_ADC_MspInit+0xec>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	4a30      	ldr	r2, [pc, #192]	@ (80012ac <HAL_ADC_MspInit+0xec>)
 80011ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f2:	4b2e      	ldr	r3, [pc, #184]	@ (80012ac <HAL_ADC_MspInit+0xec>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b2a      	ldr	r3, [pc, #168]	@ (80012ac <HAL_ADC_MspInit+0xec>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a29      	ldr	r2, [pc, #164]	@ (80012ac <HAL_ADC_MspInit+0xec>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b27      	ldr	r3, [pc, #156]	@ (80012ac <HAL_ADC_MspInit+0xec>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800121a:	23ff      	movs	r3, #255	@ 0xff
 800121c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800121e:	2303      	movs	r3, #3
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001226:	f107 0314 	add.w	r3, r7, #20
 800122a:	4619      	mov	r1, r3
 800122c:	4820      	ldr	r0, [pc, #128]	@ (80012b0 <HAL_ADC_MspInit+0xf0>)
 800122e:	f001 fbb7 	bl	80029a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001232:	4b20      	ldr	r3, [pc, #128]	@ (80012b4 <HAL_ADC_MspInit+0xf4>)
 8001234:	4a20      	ldr	r2, [pc, #128]	@ (80012b8 <HAL_ADC_MspInit+0xf8>)
 8001236:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001238:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <HAL_ADC_MspInit+0xf4>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800123e:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <HAL_ADC_MspInit+0xf4>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001244:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <HAL_ADC_MspInit+0xf4>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800124a:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <HAL_ADC_MspInit+0xf4>)
 800124c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001250:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001252:	4b18      	ldr	r3, [pc, #96]	@ (80012b4 <HAL_ADC_MspInit+0xf4>)
 8001254:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001258:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800125a:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <HAL_ADC_MspInit+0xf4>)
 800125c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001260:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001262:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <HAL_ADC_MspInit+0xf4>)
 8001264:	2200      	movs	r2, #0
 8001266:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_ADC_MspInit+0xf4>)
 800126a:	2200      	movs	r2, #0
 800126c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <HAL_ADC_MspInit+0xf4>)
 8001270:	2200      	movs	r2, #0
 8001272:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001274:	480f      	ldr	r0, [pc, #60]	@ (80012b4 <HAL_ADC_MspInit+0xf4>)
 8001276:	f001 f823 	bl	80022c0 <HAL_DMA_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001280:	f7ff fd18 	bl	8000cb4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <HAL_ADC_MspInit+0xf4>)
 8001288:	639a      	str	r2, [r3, #56]	@ 0x38
 800128a:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <HAL_ADC_MspInit+0xf4>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	2100      	movs	r1, #0
 8001294:	2012      	movs	r0, #18
 8001296:	f000 ffdc 	bl	8002252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800129a:	2012      	movs	r0, #18
 800129c:	f000 fff5 	bl	800228a <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012a0:	bf00      	nop
 80012a2:	3728      	adds	r7, #40	@ 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40012000 	.word	0x40012000
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	20000194 	.word	0x20000194
 80012b8:	40026410 	.word	0x40026410

080012bc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	@ 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a19      	ldr	r2, [pc, #100]	@ (8001340 <HAL_I2C_MspInit+0x84>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d12b      	bne.n	8001336 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <HAL_I2C_MspInit+0x88>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4a17      	ldr	r2, [pc, #92]	@ (8001344 <HAL_I2C_MspInit+0x88>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <HAL_I2C_MspInit+0x88>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012fa:	23c0      	movs	r3, #192	@ 0xc0
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fe:	2312      	movs	r3, #18
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800130a:	2304      	movs	r3, #4
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	480c      	ldr	r0, [pc, #48]	@ (8001348 <HAL_I2C_MspInit+0x8c>)
 8001316:	f001 fb43 	bl	80029a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <HAL_I2C_MspInit+0x88>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001322:	4a08      	ldr	r2, [pc, #32]	@ (8001344 <HAL_I2C_MspInit+0x88>)
 8001324:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001328:	6413      	str	r3, [r2, #64]	@ 0x40
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HAL_I2C_MspInit+0x88>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	@ 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40005400 	.word	0x40005400
 8001344:	40023800 	.word	0x40023800
 8001348:	40020400 	.word	0x40020400

0800134c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a1a      	ldr	r2, [pc, #104]	@ (80013c4 <HAL_TIM_Base_MspInit+0x78>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d12d      	bne.n	80013ba <HAL_TIM_Base_MspInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b19      	ldr	r3, [pc, #100]	@ (80013c8 <HAL_TIM_Base_MspInit+0x7c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001366:	4a18      	ldr	r2, [pc, #96]	@ (80013c8 <HAL_TIM_Base_MspInit+0x7c>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6453      	str	r3, [r2, #68]	@ 0x44
 800136e:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <HAL_TIM_Base_MspInit+0x7c>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	2018      	movs	r0, #24
 8001380:	f000 ff67 	bl	8002252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001384:	2018      	movs	r0, #24
 8001386:	f000 ff80 	bl	800228a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	2019      	movs	r0, #25
 8001390:	f000 ff5f 	bl	8002252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001394:	2019      	movs	r0, #25
 8001396:	f000 ff78 	bl	800228a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	201a      	movs	r0, #26
 80013a0:	f000 ff57 	bl	8002252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80013a4:	201a      	movs	r0, #26
 80013a6:	f000 ff70 	bl	800228a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	201b      	movs	r0, #27
 80013b0:	f000 ff4f 	bl	8002252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80013b4:	201b      	movs	r0, #27
 80013b6:	f000 ff68 	bl	800228a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40010000 	.word	0x40010000
 80013c8:	40023800 	.word	0x40023800

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <NMI_Handler+0x4>

080013d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <MemManage_Handler+0x4>

080013e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <BusFault_Handler+0x4>

080013ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <UsageFault_Handler+0x4>

080013f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001422:	f000 f8d7 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001430:	4802      	ldr	r0, [pc, #8]	@ (800143c <ADC_IRQHandler+0x10>)
 8001432:	f000 f956 	bl	80016e2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	2000014c 	.word	0x2000014c

08001440 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001444:	4802      	ldr	r0, [pc, #8]	@ (8001450 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001446:	f003 fcef 	bl	8004e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000248 	.word	0x20000248

08001454 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001458:	4802      	ldr	r0, [pc, #8]	@ (8001464 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800145a:	f003 fce5 	bl	8004e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000248 	.word	0x20000248

08001468 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800146e:	f003 fcdb 	bl	8004e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000248 	.word	0x20000248

0800147c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <TIM1_CC_IRQHandler+0x10>)
 8001482:	f003 fcd1 	bl	8004e28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000248 	.word	0x20000248

08001490 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <DMA2_Stream0_IRQHandler+0x10>)
 8001496:	f001 f819 	bl	80024cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000194 	.word	0x20000194

080014a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80014a8:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <OTG_FS_IRQHandler+0x10>)
 80014aa:	f001 feb9 	bl	8003220 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000db8 	.word	0x20000db8

080014b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	@ (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001514 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80014e0:	f7ff ffea 	bl	80014b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e4:	480c      	ldr	r0, [pc, #48]	@ (8001518 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014e6:	490d      	ldr	r1, [pc, #52]	@ (800151c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001520 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ec:	e002      	b.n	80014f4 <LoopCopyDataInit>

080014ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f2:	3304      	adds	r3, #4

080014f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f8:	d3f9      	bcc.n	80014ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001524 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014fc:	4c0a      	ldr	r4, [pc, #40]	@ (8001528 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001500:	e001      	b.n	8001506 <LoopFillZerobss>

08001502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001504:	3204      	adds	r2, #4

08001506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001508:	d3fb      	bcc.n	8001502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800150a:	f008 f9a5 	bl	8009858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800150e:	f7ff f95d 	bl	80007cc <main>
  bx  lr    
 8001512:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800151c:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8001520:	08009940 	.word	0x08009940
  ldr r2, =_sbss
 8001524:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8001528:	200014bc 	.word	0x200014bc

0800152c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800152c:	e7fe      	b.n	800152c <DMA1_Stream0_IRQHandler>
	...

08001530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001534:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <HAL_Init+0x40>)
 800153a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800153e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001540:	4b0b      	ldr	r3, [pc, #44]	@ (8001570 <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a0a      	ldr	r2, [pc, #40]	@ (8001570 <HAL_Init+0x40>)
 8001546:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800154a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <HAL_Init+0x40>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a07      	ldr	r2, [pc, #28]	@ (8001570 <HAL_Init+0x40>)
 8001552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f000 fe6f 	bl	800223c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155e:	200f      	movs	r0, #15
 8001560:	f000 f808 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001564:	f7ff fe04 	bl	8001170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023c00 	.word	0x40023c00

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157c:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <HAL_InitTick+0x54>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <HAL_InitTick+0x58>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800158a:	fbb3 f3f1 	udiv	r3, r3, r1
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fe87 	bl	80022a6 <HAL_SYSTICK_Config>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e00e      	b.n	80015c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d80a      	bhi.n	80015be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f000 fe4f 	bl	8002252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b4:	4a06      	ldr	r2, [pc, #24]	@ (80015d0 <HAL_InitTick+0x5c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000002c 	.word	0x2000002c
 80015cc:	20000034 	.word	0x20000034
 80015d0:	20000030 	.word	0x20000030

080015d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_IncTick+0x20>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_IncTick+0x24>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a04      	ldr	r2, [pc, #16]	@ (80015f8 <HAL_IncTick+0x24>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	20000034 	.word	0x20000034
 80015f8:	200004d0 	.word	0x200004d0

080015fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001600:	4b03      	ldr	r3, [pc, #12]	@ (8001610 <HAL_GetTick+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	200004d0 	.word	0x200004d0

08001614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800161c:	f7ff ffee 	bl	80015fc <HAL_GetTick>
 8001620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800162c:	d005      	beq.n	800163a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800162e:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <HAL_Delay+0x44>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800163a:	bf00      	nop
 800163c:	f7ff ffde 	bl	80015fc <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	429a      	cmp	r2, r3
 800164a:	d8f7      	bhi.n	800163c <HAL_Delay+0x28>
  {
  }
}
 800164c:	bf00      	nop
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000034 	.word	0x20000034

0800165c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001664:	2300      	movs	r3, #0
 8001666:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e033      	b.n	80016da <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fda0 	bl	80011c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	2b00      	cmp	r3, #0
 8001698:	d118      	bne.n	80016cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016a2:	f023 0302 	bic.w	r3, r3, #2
 80016a6:	f043 0202 	orr.w	r2, r3, #2
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 fb6c 	bl	8001d8c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	f023 0303 	bic.w	r3, r3, #3
 80016c2:	f043 0201 	orr.w	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80016ca:	e001      	b.n	80016d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d049      	beq.n	80017ac <HAL_ADC_IRQHandler+0xca>
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d046      	beq.n	80017ac <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	2b00      	cmp	r3, #0
 8001728:	d105      	bne.n	8001736 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d12b      	bne.n	800179c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001748:	2b00      	cmp	r3, #0
 800174a:	d127      	bne.n	800179c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001752:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001764:	2b00      	cmp	r3, #0
 8001766:	d119      	bne.n	800179c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0220 	bic.w	r2, r2, #32
 8001776:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001788:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d105      	bne.n	800179c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001794:	f043 0201 	orr.w	r2, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7fe feb1 	bl	8000504 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f06f 0212 	mvn.w	r2, #18
 80017aa:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ba:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d057      	beq.n	8001872 <HAL_ADC_IRQHandler+0x190>
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d054      	beq.n	8001872 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d105      	bne.n	80017e0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d139      	bne.n	8001862 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001806:	2b00      	cmp	r3, #0
 8001808:	d12b      	bne.n	8001862 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001814:	2b00      	cmp	r3, #0
 8001816:	d124      	bne.n	8001862 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001822:	2b00      	cmp	r3, #0
 8001824:	d11d      	bne.n	8001862 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800182a:	2b00      	cmp	r3, #0
 800182c:	d119      	bne.n	8001862 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800183c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001852:	2b00      	cmp	r3, #0
 8001854:	d105      	bne.n	8001862 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	f043 0201 	orr.w	r2, r3, #1
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 fc10 	bl	8002088 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f06f 020c 	mvn.w	r2, #12
 8001870:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001880:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d017      	beq.n	80018b8 <HAL_ADC_IRQHandler+0x1d6>
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d014      	beq.n	80018b8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b01      	cmp	r3, #1
 800189a:	d10d      	bne.n	80018b8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 f929 	bl	8001b00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f06f 0201 	mvn.w	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0320 	and.w	r3, r3, #32
 80018be:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018c6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d015      	beq.n	80018fa <HAL_ADC_IRQHandler+0x218>
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d012      	beq.n	80018fa <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d8:	f043 0202 	orr.w	r2, r3, #2
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f06f 0220 	mvn.w	r2, #32
 80018e8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f912 	bl	8001b14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f06f 0220 	mvn.w	r2, #32
 80018f8:	601a      	str	r2, [r3, #0]
  }
}
 80018fa:	bf00      	nop
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001914:	2300      	movs	r3, #0
 8001916:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800191e:	2b01      	cmp	r3, #1
 8001920:	d101      	bne.n	8001926 <HAL_ADC_Start_DMA+0x22>
 8001922:	2302      	movs	r3, #2
 8001924:	e0d0      	b.n	8001ac8 <HAL_ADC_Start_DMA+0x1c4>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	2b01      	cmp	r3, #1
 800193a:	d018      	beq.n	800196e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800194c:	4b60      	ldr	r3, [pc, #384]	@ (8001ad0 <HAL_ADC_Start_DMA+0x1cc>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a60      	ldr	r2, [pc, #384]	@ (8001ad4 <HAL_ADC_Start_DMA+0x1d0>)
 8001952:	fba2 2303 	umull	r2, r3, r2, r3
 8001956:	0c9a      	lsrs	r2, r3, #18
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001960:	e002      	b.n	8001968 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3b01      	subs	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f9      	bne.n	8001962 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800197c:	d107      	bne.n	800198e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800198c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b01      	cmp	r3, #1
 800199a:	f040 8088 	bne.w	8001aae <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80019a6:	f023 0301 	bic.w	r3, r3, #1
 80019aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019c8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019dc:	d106      	bne.n	80019ec <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	f023 0206 	bic.w	r2, r3, #6
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	645a      	str	r2, [r3, #68]	@ 0x44
 80019ea:	e002      	b.n	80019f2 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019fa:	4b37      	ldr	r3, [pc, #220]	@ (8001ad8 <HAL_ADC_Start_DMA+0x1d4>)
 80019fc:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a02:	4a36      	ldr	r2, [pc, #216]	@ (8001adc <HAL_ADC_Start_DMA+0x1d8>)
 8001a04:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a0a:	4a35      	ldr	r2, [pc, #212]	@ (8001ae0 <HAL_ADC_Start_DMA+0x1dc>)
 8001a0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a12:	4a34      	ldr	r2, [pc, #208]	@ (8001ae4 <HAL_ADC_Start_DMA+0x1e0>)
 8001a14:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a1e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001a2e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a3e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	334c      	adds	r3, #76	@ 0x4c
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	68ba      	ldr	r2, [r7, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f000 fce4 	bl	800241c <HAL_DMA_Start_IT>
 8001a54:	4603      	mov	r3, r0
 8001a56:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 031f 	and.w	r3, r3, #31
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10f      	bne.n	8001a84 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d129      	bne.n	8001ac6 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	e020      	b.n	8001ac6 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a17      	ldr	r2, [pc, #92]	@ (8001ae8 <HAL_ADC_Start_DMA+0x1e4>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d11b      	bne.n	8001ac6 <HAL_ADC_Start_DMA+0x1c2>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d114      	bne.n	8001ac6 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	e00b      	b.n	8001ac6 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	f043 0210 	orr.w	r2, r3, #16
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	f043 0201 	orr.w	r2, r3, #1
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001ac6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3720      	adds	r7, #32
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	2000002c 	.word	0x2000002c
 8001ad4:	431bde83 	.word	0x431bde83
 8001ad8:	40012300 	.word	0x40012300
 8001adc:	08001f85 	.word	0x08001f85
 8001ae0:	0800203f 	.word	0x0800203f
 8001ae4:	0800205b 	.word	0x0800205b
 8001ae8:	40012000 	.word	0x40012000

08001aec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x1c>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e113      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x244>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b09      	cmp	r3, #9
 8001b52:	d925      	bls.n	8001ba0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68d9      	ldr	r1, [r3, #12]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	461a      	mov	r2, r3
 8001b62:	4613      	mov	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	3b1e      	subs	r3, #30
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43da      	mvns	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	400a      	ands	r2, r1
 8001b78:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68d9      	ldr	r1, [r3, #12]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4403      	add	r3, r0
 8001b92:	3b1e      	subs	r3, #30
 8001b94:	409a      	lsls	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	e022      	b.n	8001be6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6919      	ldr	r1, [r3, #16]
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	461a      	mov	r2, r3
 8001bae:	4613      	mov	r3, r2
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	4413      	add	r3, r2
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6919      	ldr	r1, [r3, #16]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4403      	add	r3, r0
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d824      	bhi.n	8001c38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3b05      	subs	r3, #5
 8001c00:	221f      	movs	r2, #31
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	400a      	ands	r2, r1
 8001c0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	3b05      	subs	r3, #5
 8001c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c36:	e04c      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b0c      	cmp	r3, #12
 8001c3e:	d824      	bhi.n	8001c8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b23      	subs	r3, #35	@ 0x23
 8001c52:	221f      	movs	r2, #31
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43da      	mvns	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	400a      	ands	r2, r1
 8001c60:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	4618      	mov	r0, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	3b23      	subs	r3, #35	@ 0x23
 8001c7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c88:	e023      	b.n	8001cd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	3b41      	subs	r3, #65	@ 0x41
 8001c9c:	221f      	movs	r2, #31
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	400a      	ands	r2, r1
 8001caa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	3b41      	subs	r3, #65	@ 0x41
 8001cc6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cd2:	4b29      	ldr	r3, [pc, #164]	@ (8001d78 <HAL_ADC_ConfigChannel+0x250>)
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a28      	ldr	r2, [pc, #160]	@ (8001d7c <HAL_ADC_ConfigChannel+0x254>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d10f      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x1d8>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2b12      	cmp	r3, #18
 8001ce6:	d10b      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a1d      	ldr	r2, [pc, #116]	@ (8001d7c <HAL_ADC_ConfigChannel+0x254>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d12b      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x23a>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d80 <HAL_ADC_ConfigChannel+0x258>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d003      	beq.n	8001d1c <HAL_ADC_ConfigChannel+0x1f4>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b11      	cmp	r3, #17
 8001d1a:	d122      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a11      	ldr	r2, [pc, #68]	@ (8001d80 <HAL_ADC_ConfigChannel+0x258>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d111      	bne.n	8001d62 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d3e:	4b11      	ldr	r3, [pc, #68]	@ (8001d84 <HAL_ADC_ConfigChannel+0x25c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a11      	ldr	r2, [pc, #68]	@ (8001d88 <HAL_ADC_ConfigChannel+0x260>)
 8001d44:	fba2 2303 	umull	r2, r3, r2, r3
 8001d48:	0c9a      	lsrs	r2, r3, #18
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d54:	e002      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f9      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	40012300 	.word	0x40012300
 8001d7c:	40012000 	.word	0x40012000
 8001d80:	10000012 	.word	0x10000012
 8001d84:	2000002c 	.word	0x2000002c
 8001d88:	431bde83 	.word	0x431bde83

08001d8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d94:	4b79      	ldr	r3, [pc, #484]	@ (8001f7c <ADC_Init+0x1f0>)
 8001d96:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	431a      	orrs	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001dc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6859      	ldr	r1, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	021a      	lsls	r2, r3, #8
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001de4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6859      	ldr	r1, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6899      	ldr	r1, [r3, #8]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1e:	4a58      	ldr	r2, [pc, #352]	@ (8001f80 <ADC_Init+0x1f4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d022      	beq.n	8001e6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6899      	ldr	r1, [r3, #8]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6899      	ldr	r1, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	e00f      	b.n	8001e8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001e88:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0202 	bic.w	r2, r2, #2
 8001e98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6899      	ldr	r1, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	7e1b      	ldrb	r3, [r3, #24]
 8001ea4:	005a      	lsls	r2, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d01b      	beq.n	8001ef0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ec6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001ed6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6859      	ldr	r1, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	035a      	lsls	r2, r3, #13
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	605a      	str	r2, [r3, #4]
 8001eee:	e007      	b.n	8001f00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001efe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	051a      	lsls	r2, r3, #20
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6899      	ldr	r1, [r3, #8]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f42:	025a      	lsls	r2, r3, #9
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6899      	ldr	r1, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	029a      	lsls	r2, r3, #10
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	609a      	str	r2, [r3, #8]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40012300 	.word	0x40012300
 8001f80:	0f000001 	.word	0x0f000001

08001f84 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d13c      	bne.n	8002018 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d12b      	bne.n	8002010 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d127      	bne.n	8002010 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d119      	bne.n	8002010 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0220 	bic.w	r2, r2, #32
 8001fea:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d105      	bne.n	8002010 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002008:	f043 0201 	orr.w	r2, r3, #1
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7fe fa77 	bl	8000504 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002016:	e00e      	b.n	8002036 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002024:	68f8      	ldr	r0, [r7, #12]
 8002026:	f7ff fd75 	bl	8001b14 <HAL_ADC_ErrorCallback>
}
 800202a:	e004      	b.n	8002036 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	4798      	blx	r3
}
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b084      	sub	sp, #16
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800204a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f7ff fd4d 	bl	8001aec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002066:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2240      	movs	r2, #64	@ 0x40
 800206c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002072:	f043 0204 	orr.w	r2, r3, #4
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f7ff fd4a 	bl	8001b14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002080:	bf00      	nop
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ac:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020b8:	4013      	ands	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ce:	4a04      	ldr	r2, [pc, #16]	@ (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	60d3      	str	r3, [r2, #12]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e8:	4b04      	ldr	r3, [pc, #16]	@ (80020fc <__NVIC_GetPriorityGrouping+0x18>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	f003 0307 	and.w	r3, r3, #7
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210e:	2b00      	cmp	r3, #0
 8002110:	db0b      	blt.n	800212a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	f003 021f 	and.w	r2, r3, #31
 8002118:	4907      	ldr	r1, [pc, #28]	@ (8002138 <__NVIC_EnableIRQ+0x38>)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	2001      	movs	r0, #1
 8002122:	fa00 f202 	lsl.w	r2, r0, r2
 8002126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000e100 	.word	0xe000e100

0800213c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	6039      	str	r1, [r7, #0]
 8002146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	2b00      	cmp	r3, #0
 800214e:	db0a      	blt.n	8002166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	b2da      	uxtb	r2, r3
 8002154:	490c      	ldr	r1, [pc, #48]	@ (8002188 <__NVIC_SetPriority+0x4c>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	0112      	lsls	r2, r2, #4
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	440b      	add	r3, r1
 8002160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002164:	e00a      	b.n	800217c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	4908      	ldr	r1, [pc, #32]	@ (800218c <__NVIC_SetPriority+0x50>)
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	3b04      	subs	r3, #4
 8002174:	0112      	lsls	r2, r2, #4
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	440b      	add	r3, r1
 800217a:	761a      	strb	r2, [r3, #24]
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000e100 	.word	0xe000e100
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002190:	b480      	push	{r7}
 8002192:	b089      	sub	sp, #36	@ 0x24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0307 	and.w	r3, r3, #7
 80021a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f1c3 0307 	rsb	r3, r3, #7
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	bf28      	it	cs
 80021ae:	2304      	movcs	r3, #4
 80021b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	3304      	adds	r3, #4
 80021b6:	2b06      	cmp	r3, #6
 80021b8:	d902      	bls.n	80021c0 <NVIC_EncodePriority+0x30>
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3b03      	subs	r3, #3
 80021be:	e000      	b.n	80021c2 <NVIC_EncodePriority+0x32>
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	f04f 32ff 	mov.w	r2, #4294967295
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	401a      	ands	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d8:	f04f 31ff 	mov.w	r1, #4294967295
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43d9      	mvns	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	4313      	orrs	r3, r2
         );
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3724      	adds	r7, #36	@ 0x24
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
	...

080021f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	3b01      	subs	r3, #1
 8002204:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002208:	d301      	bcc.n	800220e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800220a:	2301      	movs	r3, #1
 800220c:	e00f      	b.n	800222e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220e:	4a0a      	ldr	r2, [pc, #40]	@ (8002238 <SysTick_Config+0x40>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002216:	210f      	movs	r1, #15
 8002218:	f04f 30ff 	mov.w	r0, #4294967295
 800221c:	f7ff ff8e 	bl	800213c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002220:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <SysTick_Config+0x40>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002226:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <SysTick_Config+0x40>)
 8002228:	2207      	movs	r2, #7
 800222a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	e000e010 	.word	0xe000e010

0800223c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ff29 	bl	800209c <__NVIC_SetPriorityGrouping>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	4603      	mov	r3, r0
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002264:	f7ff ff3e 	bl	80020e4 <__NVIC_GetPriorityGrouping>
 8002268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	6978      	ldr	r0, [r7, #20]
 8002270:	f7ff ff8e 	bl	8002190 <NVIC_EncodePriority>
 8002274:	4602      	mov	r2, r0
 8002276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff5d 	bl	800213c <__NVIC_SetPriority>
}
 8002282:	bf00      	nop
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff31 	bl	8002100 <__NVIC_EnableIRQ>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ffa2 	bl	80021f8 <SysTick_Config>
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022cc:	f7ff f996 	bl	80015fc <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e099      	b.n	8002410 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0201 	bic.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022fc:	e00f      	b.n	800231e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022fe:	f7ff f97d 	bl	80015fc <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b05      	cmp	r3, #5
 800230a:	d908      	bls.n	800231e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2203      	movs	r2, #3
 8002316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e078      	b.n	8002410 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1e8      	bne.n	80022fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	4b38      	ldr	r3, [pc, #224]	@ (8002418 <HAL_DMA_Init+0x158>)
 8002338:	4013      	ands	r3, r2
 800233a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800234a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002356:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002362:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	4313      	orrs	r3, r2
 800236e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	2b04      	cmp	r3, #4
 8002376:	d107      	bne.n	8002388 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002380:	4313      	orrs	r3, r2
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4313      	orrs	r3, r2
 8002386:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f023 0307 	bic.w	r3, r3, #7
 800239e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d117      	bne.n	80023e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00e      	beq.n	80023e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 fa6f 	bl	80028a8 <DMA_CheckFifoParam>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2240      	movs	r2, #64	@ 0x40
 80023d4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80023de:	2301      	movs	r3, #1
 80023e0:	e016      	b.n	8002410 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fa26 	bl	800283c <DMA_CalcBaseAndBitshift>
 80023f0:	4603      	mov	r3, r0
 80023f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023f8:	223f      	movs	r2, #63	@ 0x3f
 80023fa:	409a      	lsls	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	f010803f 	.word	0xf010803f

0800241c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002432:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_DMA_Start_IT+0x26>
 800243e:	2302      	movs	r3, #2
 8002440:	e040      	b.n	80024c4 <HAL_DMA_Start_IT+0xa8>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d12f      	bne.n	80024b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2202      	movs	r2, #2
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 f9b8 	bl	80027e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002474:	223f      	movs	r2, #63	@ 0x3f
 8002476:	409a      	lsls	r2, r3
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0216 	orr.w	r2, r2, #22
 800248a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0208 	orr.w	r2, r2, #8
 80024a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	e005      	b.n	80024c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024be:	2302      	movs	r3, #2
 80024c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024d8:	4b8e      	ldr	r3, [pc, #568]	@ (8002714 <HAL_DMA_IRQHandler+0x248>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a8e      	ldr	r2, [pc, #568]	@ (8002718 <HAL_DMA_IRQHandler+0x24c>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	0a9b      	lsrs	r3, r3, #10
 80024e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f6:	2208      	movs	r2, #8
 80024f8:	409a      	lsls	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d01a      	beq.n	8002538 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d013      	beq.n	8002538 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0204 	bic.w	r2, r2, #4
 800251e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002524:	2208      	movs	r2, #8
 8002526:	409a      	lsls	r2, r3
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002530:	f043 0201 	orr.w	r2, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253c:	2201      	movs	r2, #1
 800253e:	409a      	lsls	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4013      	ands	r3, r2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d012      	beq.n	800256e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00b      	beq.n	800256e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255a:	2201      	movs	r2, #1
 800255c:	409a      	lsls	r2, r3
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002566:	f043 0202 	orr.w	r2, r3, #2
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002572:	2204      	movs	r2, #4
 8002574:	409a      	lsls	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4013      	ands	r3, r2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d012      	beq.n	80025a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00b      	beq.n	80025a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002590:	2204      	movs	r2, #4
 8002592:	409a      	lsls	r2, r3
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259c:	f043 0204 	orr.w	r2, r3, #4
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a8:	2210      	movs	r2, #16
 80025aa:	409a      	lsls	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d043      	beq.n	800263c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d03c      	beq.n	800263c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c6:	2210      	movs	r2, #16
 80025c8:	409a      	lsls	r2, r3
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d018      	beq.n	800260e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d108      	bne.n	80025fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d024      	beq.n	800263c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	4798      	blx	r3
 80025fa:	e01f      	b.n	800263c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002600:	2b00      	cmp	r3, #0
 8002602:	d01b      	beq.n	800263c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	4798      	blx	r3
 800260c:	e016      	b.n	800263c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d107      	bne.n	800262c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0208 	bic.w	r2, r2, #8
 800262a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002640:	2220      	movs	r2, #32
 8002642:	409a      	lsls	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4013      	ands	r3, r2
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 808f 	beq.w	800276c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8087 	beq.w	800276c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002662:	2220      	movs	r2, #32
 8002664:	409a      	lsls	r2, r3
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b05      	cmp	r3, #5
 8002674:	d136      	bne.n	80026e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0216 	bic.w	r2, r2, #22
 8002684:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002694:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d103      	bne.n	80026a6 <HAL_DMA_IRQHandler+0x1da>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d007      	beq.n	80026b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0208 	bic.w	r2, r2, #8
 80026b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ba:	223f      	movs	r2, #63	@ 0x3f
 80026bc:	409a      	lsls	r2, r3
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d07e      	beq.n	80027d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	4798      	blx	r3
        }
        return;
 80026e2:	e079      	b.n	80027d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d01d      	beq.n	800272e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10d      	bne.n	800271c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002704:	2b00      	cmp	r3, #0
 8002706:	d031      	beq.n	800276c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
 8002710:	e02c      	b.n	800276c <HAL_DMA_IRQHandler+0x2a0>
 8002712:	bf00      	nop
 8002714:	2000002c 	.word	0x2000002c
 8002718:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d023      	beq.n	800276c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	4798      	blx	r3
 800272c:	e01e      	b.n	800276c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10f      	bne.n	800275c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0210 	bic.w	r2, r2, #16
 800274a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002770:	2b00      	cmp	r3, #0
 8002772:	d032      	beq.n	80027da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d022      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2205      	movs	r2, #5
 8002784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0201 	bic.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	3301      	adds	r3, #1
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d307      	bcc.n	80027b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f2      	bne.n	8002798 <HAL_DMA_IRQHandler+0x2cc>
 80027b2:	e000      	b.n	80027b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d005      	beq.n	80027da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	4798      	blx	r3
 80027d6:	e000      	b.n	80027da <HAL_DMA_IRQHandler+0x30e>
        return;
 80027d8:	bf00      	nop
    }
  }
}
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2b40      	cmp	r3, #64	@ 0x40
 800280c:	d108      	bne.n	8002820 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800281e:	e007      	b.n	8002830 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	60da      	str	r2, [r3, #12]
}
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	3b10      	subs	r3, #16
 800284c:	4a14      	ldr	r2, [pc, #80]	@ (80028a0 <DMA_CalcBaseAndBitshift+0x64>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002856:	4a13      	ldr	r2, [pc, #76]	@ (80028a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4413      	add	r3, r2
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d909      	bls.n	800287e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002872:	f023 0303 	bic.w	r3, r3, #3
 8002876:	1d1a      	adds	r2, r3, #4
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	659a      	str	r2, [r3, #88]	@ 0x58
 800287c:	e007      	b.n	800288e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002886:	f023 0303 	bic.w	r3, r3, #3
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	aaaaaaab 	.word	0xaaaaaaab
 80028a4:	08009928 	.word	0x08009928

080028a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d11f      	bne.n	8002902 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d856      	bhi.n	8002976 <DMA_CheckFifoParam+0xce>
 80028c8:	a201      	add	r2, pc, #4	@ (adr r2, 80028d0 <DMA_CheckFifoParam+0x28>)
 80028ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ce:	bf00      	nop
 80028d0:	080028e1 	.word	0x080028e1
 80028d4:	080028f3 	.word	0x080028f3
 80028d8:	080028e1 	.word	0x080028e1
 80028dc:	08002977 	.word	0x08002977
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d046      	beq.n	800297a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f0:	e043      	b.n	800297a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80028fa:	d140      	bne.n	800297e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002900:	e03d      	b.n	800297e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800290a:	d121      	bne.n	8002950 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b03      	cmp	r3, #3
 8002910:	d837      	bhi.n	8002982 <DMA_CheckFifoParam+0xda>
 8002912:	a201      	add	r2, pc, #4	@ (adr r2, 8002918 <DMA_CheckFifoParam+0x70>)
 8002914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002918:	08002929 	.word	0x08002929
 800291c:	0800292f 	.word	0x0800292f
 8002920:	08002929 	.word	0x08002929
 8002924:	08002941 	.word	0x08002941
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      break;
 800292c:	e030      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002932:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d025      	beq.n	8002986 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800293e:	e022      	b.n	8002986 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002944:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002948:	d11f      	bne.n	800298a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800294e:	e01c      	b.n	800298a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d903      	bls.n	800295e <DMA_CheckFifoParam+0xb6>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b03      	cmp	r3, #3
 800295a:	d003      	beq.n	8002964 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800295c:	e018      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
      break;
 8002962:	e015      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002968:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00e      	beq.n	800298e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
      break;
 8002974:	e00b      	b.n	800298e <DMA_CheckFifoParam+0xe6>
      break;
 8002976:	bf00      	nop
 8002978:	e00a      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      break;
 800297a:	bf00      	nop
 800297c:	e008      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      break;
 800297e:	bf00      	nop
 8002980:	e006      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      break;
 8002982:	bf00      	nop
 8002984:	e004      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      break;
 8002986:	bf00      	nop
 8002988:	e002      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      break;   
 800298a:	bf00      	nop
 800298c:	e000      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      break;
 800298e:	bf00      	nop
    }
  } 
  
  return status; 
 8002990:	7bfb      	ldrb	r3, [r7, #15]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop

080029a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	@ 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	e159      	b.n	8002c70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029bc:	2201      	movs	r2, #1
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	f040 8148 	bne.w	8002c6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d005      	beq.n	80029f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d130      	bne.n	8002a54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	2203      	movs	r2, #3
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a28:	2201      	movs	r2, #1
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	f003 0201 	and.w	r2, r3, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d017      	beq.n	8002a90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d123      	bne.n	8002ae4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	08da      	lsrs	r2, r3, #3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3208      	adds	r2, #8
 8002aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	220f      	movs	r2, #15
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	08da      	lsrs	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3208      	adds	r2, #8
 8002ade:	69b9      	ldr	r1, [r7, #24]
 8002ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	2203      	movs	r2, #3
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0203 	and.w	r2, r3, #3
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80a2 	beq.w	8002c6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	4b57      	ldr	r3, [pc, #348]	@ (8002c88 <HAL_GPIO_Init+0x2e8>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2e:	4a56      	ldr	r2, [pc, #344]	@ (8002c88 <HAL_GPIO_Init+0x2e8>)
 8002b30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b34:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b36:	4b54      	ldr	r3, [pc, #336]	@ (8002c88 <HAL_GPIO_Init+0x2e8>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b42:	4a52      	ldr	r2, [pc, #328]	@ (8002c8c <HAL_GPIO_Init+0x2ec>)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	3302      	adds	r3, #2
 8002b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	220f      	movs	r2, #15
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a49      	ldr	r2, [pc, #292]	@ (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d019      	beq.n	8002ba2 <HAL_GPIO_Init+0x202>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a48      	ldr	r2, [pc, #288]	@ (8002c94 <HAL_GPIO_Init+0x2f4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d013      	beq.n	8002b9e <HAL_GPIO_Init+0x1fe>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a47      	ldr	r2, [pc, #284]	@ (8002c98 <HAL_GPIO_Init+0x2f8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00d      	beq.n	8002b9a <HAL_GPIO_Init+0x1fa>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a46      	ldr	r2, [pc, #280]	@ (8002c9c <HAL_GPIO_Init+0x2fc>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d007      	beq.n	8002b96 <HAL_GPIO_Init+0x1f6>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a45      	ldr	r2, [pc, #276]	@ (8002ca0 <HAL_GPIO_Init+0x300>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d101      	bne.n	8002b92 <HAL_GPIO_Init+0x1f2>
 8002b8e:	2304      	movs	r3, #4
 8002b90:	e008      	b.n	8002ba4 <HAL_GPIO_Init+0x204>
 8002b92:	2307      	movs	r3, #7
 8002b94:	e006      	b.n	8002ba4 <HAL_GPIO_Init+0x204>
 8002b96:	2303      	movs	r3, #3
 8002b98:	e004      	b.n	8002ba4 <HAL_GPIO_Init+0x204>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e002      	b.n	8002ba4 <HAL_GPIO_Init+0x204>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_GPIO_Init+0x204>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	f002 0203 	and.w	r2, r2, #3
 8002baa:	0092      	lsls	r2, r2, #2
 8002bac:	4093      	lsls	r3, r2
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bb4:	4935      	ldr	r1, [pc, #212]	@ (8002c8c <HAL_GPIO_Init+0x2ec>)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	089b      	lsrs	r3, r3, #2
 8002bba:	3302      	adds	r3, #2
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bc2:	4b38      	ldr	r3, [pc, #224]	@ (8002ca4 <HAL_GPIO_Init+0x304>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002be6:	4a2f      	ldr	r2, [pc, #188]	@ (8002ca4 <HAL_GPIO_Init+0x304>)
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bec:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <HAL_GPIO_Init+0x304>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c10:	4a24      	ldr	r2, [pc, #144]	@ (8002ca4 <HAL_GPIO_Init+0x304>)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c16:	4b23      	ldr	r3, [pc, #140]	@ (8002ca4 <HAL_GPIO_Init+0x304>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c3a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ca4 <HAL_GPIO_Init+0x304>)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c40:	4b18      	ldr	r3, [pc, #96]	@ (8002ca4 <HAL_GPIO_Init+0x304>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c64:	4a0f      	ldr	r2, [pc, #60]	@ (8002ca4 <HAL_GPIO_Init+0x304>)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	61fb      	str	r3, [r7, #28]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	2b0f      	cmp	r3, #15
 8002c74:	f67f aea2 	bls.w	80029bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	3724      	adds	r7, #36	@ 0x24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40013800 	.word	0x40013800
 8002c90:	40020000 	.word	0x40020000
 8002c94:	40020400 	.word	0x40020400
 8002c98:	40020800 	.word	0x40020800
 8002c9c:	40020c00 	.word	0x40020c00
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40013c00 	.word	0x40013c00

08002ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	807b      	strh	r3, [r7, #2]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb8:	787b      	ldrb	r3, [r7, #1]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cc4:	e003      	b.n	8002cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cc6:	887b      	ldrh	r3, [r7, #2]
 8002cc8:	041a      	lsls	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	619a      	str	r2, [r3, #24]
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b085      	sub	sp, #20
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cec:	887a      	ldrh	r2, [r7, #2]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	041a      	lsls	r2, r3, #16
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	43d9      	mvns	r1, r3
 8002cf8:	887b      	ldrh	r3, [r7, #2]
 8002cfa:	400b      	ands	r3, r1
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	619a      	str	r2, [r3, #24]
}
 8002d02:	bf00      	nop
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e12b      	b.n	8002f7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fe fac0 	bl	80012bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2224      	movs	r2, #36	@ 0x24
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0201 	bic.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d74:	f001 ff92 	bl	8004c9c <HAL_RCC_GetPCLK1Freq>
 8002d78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	4a81      	ldr	r2, [pc, #516]	@ (8002f84 <HAL_I2C_Init+0x274>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d807      	bhi.n	8002d94 <HAL_I2C_Init+0x84>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4a80      	ldr	r2, [pc, #512]	@ (8002f88 <HAL_I2C_Init+0x278>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	bf94      	ite	ls
 8002d8c:	2301      	movls	r3, #1
 8002d8e:	2300      	movhi	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e006      	b.n	8002da2 <HAL_I2C_Init+0x92>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4a7d      	ldr	r2, [pc, #500]	@ (8002f8c <HAL_I2C_Init+0x27c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	bf94      	ite	ls
 8002d9c:	2301      	movls	r3, #1
 8002d9e:	2300      	movhi	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e0e7      	b.n	8002f7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4a78      	ldr	r2, [pc, #480]	@ (8002f90 <HAL_I2C_Init+0x280>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	0c9b      	lsrs	r3, r3, #18
 8002db4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	4a6a      	ldr	r2, [pc, #424]	@ (8002f84 <HAL_I2C_Init+0x274>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d802      	bhi.n	8002de4 <HAL_I2C_Init+0xd4>
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	3301      	adds	r3, #1
 8002de2:	e009      	b.n	8002df8 <HAL_I2C_Init+0xe8>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002dea:	fb02 f303 	mul.w	r3, r2, r3
 8002dee:	4a69      	ldr	r2, [pc, #420]	@ (8002f94 <HAL_I2C_Init+0x284>)
 8002df0:	fba2 2303 	umull	r2, r3, r2, r3
 8002df4:	099b      	lsrs	r3, r3, #6
 8002df6:	3301      	adds	r3, #1
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	495c      	ldr	r1, [pc, #368]	@ (8002f84 <HAL_I2C_Init+0x274>)
 8002e14:	428b      	cmp	r3, r1
 8002e16:	d819      	bhi.n	8002e4c <HAL_I2C_Init+0x13c>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	1e59      	subs	r1, r3, #1
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e26:	1c59      	adds	r1, r3, #1
 8002e28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e2c:	400b      	ands	r3, r1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00a      	beq.n	8002e48 <HAL_I2C_Init+0x138>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1e59      	subs	r1, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e40:	3301      	adds	r3, #1
 8002e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e46:	e051      	b.n	8002eec <HAL_I2C_Init+0x1dc>
 8002e48:	2304      	movs	r3, #4
 8002e4a:	e04f      	b.n	8002eec <HAL_I2C_Init+0x1dc>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d111      	bne.n	8002e78 <HAL_I2C_Init+0x168>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	1e58      	subs	r0, r3, #1
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	440b      	add	r3, r1
 8002e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e66:	3301      	adds	r3, #1
 8002e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e012      	b.n	8002e9e <HAL_I2C_Init+0x18e>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	1e58      	subs	r0, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6859      	ldr	r1, [r3, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	0099      	lsls	r1, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	bf0c      	ite	eq
 8002e98:	2301      	moveq	r3, #1
 8002e9a:	2300      	movne	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2C_Init+0x196>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e022      	b.n	8002eec <HAL_I2C_Init+0x1dc>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10e      	bne.n	8002ecc <HAL_I2C_Init+0x1bc>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1e58      	subs	r0, r3, #1
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6859      	ldr	r1, [r3, #4]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	440b      	add	r3, r1
 8002ebc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eca:	e00f      	b.n	8002eec <HAL_I2C_Init+0x1dc>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1e58      	subs	r0, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	0099      	lsls	r1, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	6809      	ldr	r1, [r1, #0]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69da      	ldr	r2, [r3, #28]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6911      	ldr	r1, [r2, #16]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	68d2      	ldr	r2, [r2, #12]
 8002f26:	4311      	orrs	r1, r2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0201 	orr.w	r2, r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	000186a0 	.word	0x000186a0
 8002f88:	001e847f 	.word	0x001e847f
 8002f8c:	003d08ff 	.word	0x003d08ff
 8002f90:	431bde83 	.word	0x431bde83
 8002f94:	10624dd3 	.word	0x10624dd3

08002f98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e101      	b.n	80031ae <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f006 f935 	bl	8009234 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2203      	movs	r2, #3
 8002fce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fd8:	d102      	bne.n	8002fe0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f002 fc8c 	bl	8005902 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	7c1a      	ldrb	r2, [r3, #16]
 8002ff2:	f88d 2000 	strb.w	r2, [sp]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ffa:	f002 fb6b 	bl	80056d4 <USB_CoreInit>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0ce      	b.n	80031ae <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2100      	movs	r1, #0
 8003016:	4618      	mov	r0, r3
 8003018:	f002 fc84 	bl	8005924 <USB_SetCurrentMode>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2202      	movs	r2, #2
 8003026:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e0bf      	b.n	80031ae <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800302e:	2300      	movs	r3, #0
 8003030:	73fb      	strb	r3, [r7, #15]
 8003032:	e04a      	b.n	80030ca <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003034:	7bfa      	ldrb	r2, [r7, #15]
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	3315      	adds	r3, #21
 8003044:	2201      	movs	r2, #1
 8003046:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	3314      	adds	r3, #20
 8003058:	7bfa      	ldrb	r2, [r7, #15]
 800305a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800305c:	7bfa      	ldrb	r2, [r7, #15]
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	b298      	uxth	r0, r3
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4413      	add	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	332e      	adds	r3, #46	@ 0x2e
 8003070:	4602      	mov	r2, r0
 8003072:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003074:	7bfa      	ldrb	r2, [r7, #15]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	3318      	adds	r3, #24
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003088:	7bfa      	ldrb	r2, [r7, #15]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	331c      	adds	r3, #28
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800309c:	7bfa      	ldrb	r2, [r7, #15]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	3320      	adds	r3, #32
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030b0:	7bfa      	ldrb	r2, [r7, #15]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	3324      	adds	r3, #36	@ 0x24
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	3301      	adds	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	791b      	ldrb	r3, [r3, #4]
 80030ce:	7bfa      	ldrb	r2, [r7, #15]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d3af      	bcc.n	8003034 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030d4:	2300      	movs	r3, #0
 80030d6:	73fb      	strb	r3, [r7, #15]
 80030d8:	e044      	b.n	8003164 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80030ec:	2200      	movs	r2, #0
 80030ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030f0:	7bfa      	ldrb	r2, [r7, #15]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003102:	7bfa      	ldrb	r2, [r7, #15]
 8003104:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003106:	7bfa      	ldrb	r2, [r7, #15]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800311c:	7bfa      	ldrb	r2, [r7, #15]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003132:	7bfa      	ldrb	r2, [r7, #15]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003148:	7bfa      	ldrb	r2, [r7, #15]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4413      	add	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800315e:	7bfb      	ldrb	r3, [r7, #15]
 8003160:	3301      	adds	r3, #1
 8003162:	73fb      	strb	r3, [r7, #15]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	791b      	ldrb	r3, [r3, #4]
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	429a      	cmp	r2, r3
 800316c:	d3b5      	bcc.n	80030da <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	7c1a      	ldrb	r2, [r3, #16]
 8003176:	f88d 2000 	strb.w	r2, [sp]
 800317a:	3304      	adds	r3, #4
 800317c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800317e:	f002 fc1d 	bl	80059bc <USB_DevInit>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e00c      	b.n	80031ae <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f003 fc67 	bl	8006a7a <USB_DevDisconnect>

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_PCD_Start+0x1c>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e022      	b.n	8003218 <HAL_PCD_Start+0x62>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d105      	bne.n	80031fa <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f002 fb6e 	bl	80058e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f003 fc15 	bl	8006a38 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003220:	b590      	push	{r4, r7, lr}
 8003222:	b08d      	sub	sp, #52	@ 0x34
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f003 fcd3 	bl	8006be2 <USB_GetMode>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	f040 848c 	bne.w	8003b5c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f003 fc37 	bl	8006abc <USB_ReadInterrupts>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8482 	beq.w	8003b5a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	0a1b      	lsrs	r3, r3, #8
 8003260:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f003 fc24 	bl	8006abc <USB_ReadInterrupts>
 8003274:	4603      	mov	r3, r0
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b02      	cmp	r3, #2
 800327c:	d107      	bne.n	800328e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695a      	ldr	r2, [r3, #20]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f002 0202 	and.w	r2, r2, #2
 800328c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f003 fc12 	bl	8006abc <USB_ReadInterrupts>
 8003298:	4603      	mov	r3, r0
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b10      	cmp	r3, #16
 80032a0:	d161      	bne.n	8003366 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699a      	ldr	r2, [r3, #24]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0210 	bic.w	r2, r2, #16
 80032b0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80032b2:	6a3b      	ldr	r3, [r7, #32]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	f003 020f 	and.w	r2, r3, #15
 80032be:	4613      	mov	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	3304      	adds	r3, #4
 80032d0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80032d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032dc:	d124      	bne.n	8003328 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d035      	beq.n	8003356 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	6a38      	ldr	r0, [r7, #32]
 80032fe:	f003 fa49 	bl	8006794 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800330e:	441a      	add	r2, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	695a      	ldr	r2, [r3, #20]
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	091b      	lsrs	r3, r3, #4
 800331c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003320:	441a      	add	r2, r3
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	615a      	str	r2, [r3, #20]
 8003326:	e016      	b.n	8003356 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800332e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003332:	d110      	bne.n	8003356 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800333a:	2208      	movs	r2, #8
 800333c:	4619      	mov	r1, r3
 800333e:	6a38      	ldr	r0, [r7, #32]
 8003340:	f003 fa28 	bl	8006794 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	091b      	lsrs	r3, r3, #4
 800334c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003350:	441a      	add	r2, r3
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	699a      	ldr	r2, [r3, #24]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 0210 	orr.w	r2, r2, #16
 8003364:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f003 fba6 	bl	8006abc <USB_ReadInterrupts>
 8003370:	4603      	mov	r3, r0
 8003372:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003376:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800337a:	f040 80a7 	bne.w	80034cc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f003 fbab 	bl	8006ae2 <USB_ReadDevAllOutEpInterrupt>
 800338c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800338e:	e099      	b.n	80034c4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 808e 	beq.w	80034b8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f003 fbcf 	bl	8006b4a <USB_ReadDevOutEPInterrupt>
 80033ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00c      	beq.n	80033d2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033c4:	461a      	mov	r2, r3
 80033c6:	2301      	movs	r3, #1
 80033c8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fea3 	bl	8004118 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00c      	beq.n	80033f6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033e8:	461a      	mov	r2, r3
 80033ea:	2308      	movs	r3, #8
 80033ec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 ff79 	bl	80042e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	4413      	add	r3, r2
 8003408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800340c:	461a      	mov	r2, r3
 800340e:	2310      	movs	r3, #16
 8003410:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d030      	beq.n	800347e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003424:	2b80      	cmp	r3, #128	@ 0x80
 8003426:	d109      	bne.n	800343c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003436:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800343a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800343c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800343e:	4613      	mov	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	3304      	adds	r3, #4
 8003450:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	78db      	ldrb	r3, [r3, #3]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d108      	bne.n	800346c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2200      	movs	r2, #0
 800345e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003462:	b2db      	uxtb	r3, r3
 8003464:	4619      	mov	r1, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f005 ffe0 	bl	800942c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800346c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003478:	461a      	mov	r2, r3
 800347a:	2302      	movs	r3, #2
 800347c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003494:	461a      	mov	r2, r3
 8003496:	2320      	movs	r3, #32
 8003498:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d009      	beq.n	80034b8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80034a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034b0:	461a      	mov	r2, r3
 80034b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034b6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80034b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ba:	3301      	adds	r3, #1
 80034bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80034be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c0:	085b      	lsrs	r3, r3, #1
 80034c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80034c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f47f af62 	bne.w	8003390 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f003 faf3 	bl	8006abc <USB_ReadInterrupts>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034e0:	f040 80db 	bne.w	800369a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f003 fb14 	bl	8006b16 <USB_ReadDevAllInEpInterrupt>
 80034ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80034f4:	e0cd      	b.n	8003692 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80034f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80c2 	beq.w	8003686 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f003 fb3a 	bl	8006b86 <USB_ReadDevInEPInterrupt>
 8003512:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b00      	cmp	r3, #0
 800351c:	d057      	beq.n	80035ce <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800351e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003520:	f003 030f 	and.w	r3, r3, #15
 8003524:	2201      	movs	r2, #1
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003532:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	43db      	mvns	r3, r3
 8003538:	69f9      	ldr	r1, [r7, #28]
 800353a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800353e:	4013      	ands	r3, r2
 8003540:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	015a      	lsls	r2, r3, #5
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	4413      	add	r3, r2
 800354a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800354e:	461a      	mov	r2, r3
 8003550:	2301      	movs	r3, #1
 8003552:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	799b      	ldrb	r3, [r3, #6]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d132      	bne.n	80035c2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003560:	4613      	mov	r3, r2
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	3320      	adds	r3, #32
 800356c:	6819      	ldr	r1, [r3, #0]
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4403      	add	r3, r0
 800357c:	331c      	adds	r3, #28
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4419      	add	r1, r3
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003586:	4613      	mov	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4403      	add	r3, r0
 8003590:	3320      	adds	r3, #32
 8003592:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003596:	2b00      	cmp	r3, #0
 8003598:	d113      	bne.n	80035c2 <HAL_PCD_IRQHandler+0x3a2>
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800359e:	4613      	mov	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	3324      	adds	r3, #36	@ 0x24
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d108      	bne.n	80035c2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035ba:	461a      	mov	r2, r3
 80035bc:	2101      	movs	r1, #1
 80035be:	f003 fb41 	bl	8006c44 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	4619      	mov	r1, r3
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f005 feb4 	bl	8009336 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035e4:	461a      	mov	r2, r3
 80035e6:	2308      	movs	r3, #8
 80035e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80035f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003600:	461a      	mov	r2, r3
 8003602:	2310      	movs	r3, #16
 8003604:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	4413      	add	r3, r2
 8003618:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800361c:	461a      	mov	r2, r3
 800361e:	2340      	movs	r3, #64	@ 0x40
 8003620:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d023      	beq.n	8003674 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800362c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800362e:	6a38      	ldr	r0, [r7, #32]
 8003630:	f002 fb28 	bl	8005c84 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	3310      	adds	r3, #16
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	4413      	add	r3, r2
 8003644:	3304      	adds	r3, #4
 8003646:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	78db      	ldrb	r3, [r3, #3]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d108      	bne.n	8003662 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2200      	movs	r2, #0
 8003654:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	b2db      	uxtb	r3, r3
 800365a:	4619      	mov	r1, r3
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f005 fef7 	bl	8009450 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	4413      	add	r3, r2
 800366a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800366e:	461a      	mov	r2, r3
 8003670:	2302      	movs	r3, #2
 8003672:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800367e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fcbd 	bl	8004000 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003688:	3301      	adds	r3, #1
 800368a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800368c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368e:	085b      	lsrs	r3, r3, #1
 8003690:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003694:	2b00      	cmp	r3, #0
 8003696:	f47f af2e 	bne.w	80034f6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4618      	mov	r0, r3
 80036a0:	f003 fa0c 	bl	8006abc <USB_ReadInterrupts>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80036aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036ae:	d122      	bne.n	80036f6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036be:	f023 0301 	bic.w	r3, r3, #1
 80036c2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d108      	bne.n	80036e0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036d6:	2100      	movs	r1, #0
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fea3 	bl	8004424 <HAL_PCDEx_LPM_Callback>
 80036de:	e002      	b.n	80036e6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f005 fe95 	bl	8009410 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80036f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f003 f9de 	bl	8006abc <USB_ReadInterrupts>
 8003700:	4603      	mov	r3, r0
 8003702:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003706:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800370a:	d112      	bne.n	8003732 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b01      	cmp	r3, #1
 800371a:	d102      	bne.n	8003722 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f005 fe51 	bl	80093c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003730:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f003 f9c0 	bl	8006abc <USB_ReadInterrupts>
 800373c:	4603      	mov	r3, r0
 800373e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003742:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003746:	f040 80b7 	bne.w	80038b8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2110      	movs	r1, #16
 8003764:	4618      	mov	r0, r3
 8003766:	f002 fa8d 	bl	8005c84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800376a:	2300      	movs	r3, #0
 800376c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800376e:	e046      	b.n	80037fe <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800377c:	461a      	mov	r2, r3
 800377e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003782:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003794:	0151      	lsls	r1, r2, #5
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	440a      	add	r2, r1
 800379a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800379e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037a2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037b0:	461a      	mov	r2, r3
 80037b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037b6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037c8:	0151      	lsls	r1, r2, #5
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	440a      	add	r2, r1
 80037ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037d6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037e8:	0151      	lsls	r1, r2, #5
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	440a      	add	r2, r1
 80037ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037f6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fa:	3301      	adds	r3, #1
 80037fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	791b      	ldrb	r3, [r3, #4]
 8003802:	461a      	mov	r2, r3
 8003804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003806:	4293      	cmp	r3, r2
 8003808:	d3b2      	bcc.n	8003770 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003818:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800381c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	7bdb      	ldrb	r3, [r3, #15]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d016      	beq.n	8003854 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800382c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003836:	f043 030b 	orr.w	r3, r3, #11
 800383a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003846:	69fa      	ldr	r2, [r7, #28]
 8003848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800384c:	f043 030b 	orr.w	r3, r3, #11
 8003850:	6453      	str	r3, [r2, #68]	@ 0x44
 8003852:	e015      	b.n	8003880 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003862:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003866:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800386a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800387a:	f043 030b 	orr.w	r3, r3, #11
 800387e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800388e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003892:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038a2:	461a      	mov	r2, r3
 80038a4:	f003 f9ce 	bl	8006c44 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80038b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4618      	mov	r0, r3
 80038be:	f003 f8fd 	bl	8006abc <USB_ReadInterrupts>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038cc:	d123      	bne.n	8003916 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f003 f993 	bl	8006bfe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f002 fa4a 	bl	8005d76 <USB_GetDevSpeed>
 80038e2:	4603      	mov	r3, r0
 80038e4:	461a      	mov	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681c      	ldr	r4, [r3, #0]
 80038ee:	f001 f9c9 	bl	8004c84 <HAL_RCC_GetHCLKFreq>
 80038f2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038f8:	461a      	mov	r2, r3
 80038fa:	4620      	mov	r0, r4
 80038fc:	f001 ff4e 	bl	800579c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f005 fd40 	bl	8009386 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695a      	ldr	r2, [r3, #20]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003914:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f003 f8ce 	bl	8006abc <USB_ReadInterrupts>
 8003920:	4603      	mov	r3, r0
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	2b08      	cmp	r3, #8
 8003928:	d10a      	bne.n	8003940 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f005 fd1d 	bl	800936a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f002 0208 	and.w	r2, r2, #8
 800393e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f003 f8b9 	bl	8006abc <USB_ReadInterrupts>
 800394a:	4603      	mov	r3, r0
 800394c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003950:	2b80      	cmp	r3, #128	@ 0x80
 8003952:	d123      	bne.n	800399c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003960:	2301      	movs	r3, #1
 8003962:	627b      	str	r3, [r7, #36]	@ 0x24
 8003964:	e014      	b.n	8003990 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800396a:	4613      	mov	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d105      	bne.n	800398a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	b2db      	uxtb	r3, r3
 8003982:	4619      	mov	r1, r3
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 fb0a 	bl	8003f9e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	3301      	adds	r3, #1
 800398e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	791b      	ldrb	r3, [r3, #4]
 8003994:	461a      	mov	r2, r3
 8003996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003998:	4293      	cmp	r3, r2
 800399a:	d3e4      	bcc.n	8003966 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f003 f88b 	bl	8006abc <USB_ReadInterrupts>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039b0:	d13c      	bne.n	8003a2c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039b2:	2301      	movs	r3, #1
 80039b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80039b6:	e02b      	b.n	8003a10 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039cc:	4613      	mov	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	4413      	add	r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	3318      	adds	r3, #24
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d115      	bne.n	8003a0a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80039de:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	da12      	bge.n	8003a0a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039e8:	4613      	mov	r3, r2
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4413      	add	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	3317      	adds	r3, #23
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80039f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	4619      	mov	r1, r3
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 faca 	bl	8003f9e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	791b      	ldrb	r3, [r3, #4]
 8003a14:	461a      	mov	r2, r3
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d3cd      	bcc.n	80039b8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695a      	ldr	r2, [r3, #20]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003a2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f003 f843 	bl	8006abc <USB_ReadInterrupts>
 8003a36:	4603      	mov	r3, r0
 8003a38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a40:	d156      	bne.n	8003af0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a42:	2301      	movs	r3, #1
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a46:	e045      	b.n	8003ad4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d12e      	bne.n	8003ace <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a70:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	da2b      	bge.n	8003ace <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	0c1a      	lsrs	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003a80:	4053      	eors	r3, r2
 8003a82:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d121      	bne.n	8003ace <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003aa0:	6a3b      	ldr	r3, [r7, #32]
 8003aa2:	699b      	ldr	r3, [r3, #24]
 8003aa4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10a      	bne.n	8003ace <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	69fa      	ldr	r2, [r7, #28]
 8003ac2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ac6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003aca:	6053      	str	r3, [r2, #4]
            break;
 8003acc:	e008      	b.n	8003ae0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	791b      	ldrb	r3, [r3, #4]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d3b3      	bcc.n	8003a48 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003aee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f002 ffe1 	bl	8006abc <USB_ReadInterrupts>
 8003afa:	4603      	mov	r3, r0
 8003afc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b04:	d10a      	bne.n	8003b1c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f005 fcb4 	bl	8009474 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f002 ffcb 	bl	8006abc <USB_ReadInterrupts>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b04      	cmp	r3, #4
 8003b2e:	d115      	bne.n	8003b5c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f005 fca4 	bl	8009490 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6859      	ldr	r1, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	605a      	str	r2, [r3, #4]
 8003b58:	e000      	b.n	8003b5c <HAL_PCD_IRQHandler+0x93c>
      return;
 8003b5a:	bf00      	nop
    }
  }
}
 8003b5c:	3734      	adds	r7, #52	@ 0x34
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd90      	pop	{r4, r7, pc}

08003b62 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d101      	bne.n	8003b7c <HAL_PCD_SetAddress+0x1a>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e012      	b.n	8003ba2 <HAL_PCD_SetAddress+0x40>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	78fa      	ldrb	r2, [r7, #3]
 8003b90:	4611      	mov	r1, r2
 8003b92:	4618      	mov	r0, r3
 8003b94:	f002 ff2a 	bl	80069ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	4608      	mov	r0, r1
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4603      	mov	r3, r0
 8003bba:	70fb      	strb	r3, [r7, #3]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	803b      	strh	r3, [r7, #0]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	da0f      	bge.n	8003bf0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bd0:	78fb      	ldrb	r3, [r7, #3]
 8003bd2:	f003 020f 	and.w	r2, r3, #15
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	3310      	adds	r3, #16
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	4413      	add	r3, r2
 8003be4:	3304      	adds	r3, #4
 8003be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2201      	movs	r2, #1
 8003bec:	705a      	strb	r2, [r3, #1]
 8003bee:	e00f      	b.n	8003c10 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bf0:	78fb      	ldrb	r3, [r7, #3]
 8003bf2:	f003 020f 	and.w	r2, r3, #15
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	3304      	adds	r3, #4
 8003c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c10:	78fb      	ldrb	r3, [r7, #3]
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003c1c:	883b      	ldrh	r3, [r7, #0]
 8003c1e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	78ba      	ldrb	r2, [r7, #2]
 8003c2a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	785b      	ldrb	r3, [r3, #1]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d004      	beq.n	8003c3e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c3e:	78bb      	ldrb	r3, [r7, #2]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d102      	bne.n	8003c4a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d101      	bne.n	8003c58 <HAL_PCD_EP_Open+0xae>
 8003c54:	2302      	movs	r3, #2
 8003c56:	e00e      	b.n	8003c76 <HAL_PCD_EP_Open+0xcc>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68f9      	ldr	r1, [r7, #12]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f002 f8aa 	bl	8005dc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003c74:	7afb      	ldrb	r3, [r7, #11]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	460b      	mov	r3, r1
 8003c88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	da0f      	bge.n	8003cb2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	f003 020f 	and.w	r2, r3, #15
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	3310      	adds	r3, #16
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	705a      	strb	r2, [r3, #1]
 8003cb0:	e00f      	b.n	8003cd2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cb2:	78fb      	ldrb	r3, [r7, #3]
 8003cb4:	f003 020f 	and.w	r2, r3, #15
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3304      	adds	r3, #4
 8003cca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	f003 030f 	and.w	r3, r3, #15
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_PCD_EP_Close+0x6e>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e00e      	b.n	8003d0a <HAL_PCD_EP_Close+0x8c>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68f9      	ldr	r1, [r7, #12]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f002 f8e8 	bl	8005ed0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b086      	sub	sp, #24
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d22:	7afb      	ldrb	r3, [r7, #11]
 8003d24:	f003 020f 	and.w	r2, r3, #15
 8003d28:	4613      	mov	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4413      	add	r3, r2
 8003d38:	3304      	adds	r3, #4
 8003d3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2200      	movs	r2, #0
 8003d52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d54:	7afb      	ldrb	r3, [r7, #11]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	799b      	ldrb	r3, [r3, #6]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d102      	bne.n	8003d6e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6818      	ldr	r0, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	799b      	ldrb	r3, [r3, #6]
 8003d76:	461a      	mov	r2, r3
 8003d78:	6979      	ldr	r1, [r7, #20]
 8003d7a:	f002 f985 	bl	8006088 <USB_EPStartXfer>

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}

08003d88 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d94:	78fb      	ldrb	r3, [r7, #3]
 8003d96:	f003 020f 	and.w	r2, r3, #15
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dc8:	7afb      	ldrb	r3, [r7, #11]
 8003dca:	f003 020f 	and.w	r2, r3, #15
 8003dce:	4613      	mov	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	3310      	adds	r3, #16
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	4413      	add	r3, r2
 8003ddc:	3304      	adds	r3, #4
 8003dde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	2200      	movs	r2, #0
 8003df0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2201      	movs	r2, #1
 8003df6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003df8:	7afb      	ldrb	r3, [r7, #11]
 8003dfa:	f003 030f 	and.w	r3, r3, #15
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	799b      	ldrb	r3, [r3, #6]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d102      	bne.n	8003e12 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	799b      	ldrb	r3, [r3, #6]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	6979      	ldr	r1, [r7, #20]
 8003e1e:	f002 f933 	bl	8006088 <USB_EPStartXfer>

  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	7912      	ldrb	r2, [r2, #4]
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d901      	bls.n	8003e4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e04f      	b.n	8003eea <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	da0f      	bge.n	8003e72 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	f003 020f 	and.w	r2, r3, #15
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	3310      	adds	r3, #16
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	4413      	add	r3, r2
 8003e66:	3304      	adds	r3, #4
 8003e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	705a      	strb	r2, [r3, #1]
 8003e70:	e00d      	b.n	8003e8e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e72:	78fa      	ldrb	r2, [r7, #3]
 8003e74:	4613      	mov	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	4413      	add	r3, r2
 8003e84:	3304      	adds	r3, #4
 8003e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_PCD_EP_SetStall+0x82>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e01d      	b.n	8003eea <HAL_PCD_EP_SetStall+0xbe>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68f9      	ldr	r1, [r7, #12]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f002 fcc1 	bl	8006844 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	f003 030f 	and.w	r3, r3, #15
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	7999      	ldrb	r1, [r3, #6]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003eda:	461a      	mov	r2, r3
 8003edc:	f002 feb2 	bl	8006c44 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	460b      	mov	r3, r1
 8003efc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	7912      	ldrb	r2, [r2, #4]
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d901      	bls.n	8003f10 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e042      	b.n	8003f96 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	da0f      	bge.n	8003f38 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	f003 020f 	and.w	r2, r3, #15
 8003f1e:	4613      	mov	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	3310      	adds	r3, #16
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2201      	movs	r2, #1
 8003f34:	705a      	strb	r2, [r3, #1]
 8003f36:	e00f      	b.n	8003f58 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f38:	78fb      	ldrb	r3, [r7, #3]
 8003f3a:	f003 020f 	and.w	r2, r3, #15
 8003f3e:	4613      	mov	r3, r2
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	4413      	add	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3304      	adds	r3, #4
 8003f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f5e:	78fb      	ldrb	r3, [r7, #3]
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_PCD_EP_ClrStall+0x86>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e00e      	b.n	8003f96 <HAL_PCD_EP_ClrStall+0xa4>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68f9      	ldr	r1, [r7, #12]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f002 fcca 	bl	8006920 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003faa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	da0c      	bge.n	8003fcc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	f003 020f 	and.w	r2, r3, #15
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	3310      	adds	r3, #16
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	60fb      	str	r3, [r7, #12]
 8003fca:	e00c      	b.n	8003fe6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	f003 020f 	and.w	r2, r3, #15
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68f9      	ldr	r1, [r7, #12]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f002 fae9 	bl	80065c4 <USB_EPStopXfer>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ff6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b08a      	sub	sp, #40	@ 0x28
 8004004:	af02      	add	r7, sp, #8
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	4613      	mov	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	3310      	adds	r3, #16
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	4413      	add	r3, r2
 8004024:	3304      	adds	r3, #4
 8004026:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	695a      	ldr	r2, [r3, #20]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	429a      	cmp	r2, r3
 8004032:	d901      	bls.n	8004038 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e06b      	b.n	8004110 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	429a      	cmp	r2, r3
 800404c:	d902      	bls.n	8004054 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	3303      	adds	r3, #3
 8004058:	089b      	lsrs	r3, r3, #2
 800405a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800405c:	e02a      	b.n	80040b4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	429a      	cmp	r2, r3
 8004072:	d902      	bls.n	800407a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	3303      	adds	r3, #3
 800407e:	089b      	lsrs	r3, r3, #2
 8004080:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	68d9      	ldr	r1, [r3, #12]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	4603      	mov	r3, r0
 8004096:	6978      	ldr	r0, [r7, #20]
 8004098:	f002 fb3e 	bl	8006718 <USB_WritePacket>

    ep->xfer_buff  += len;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	441a      	add	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	695a      	ldr	r2, [r3, #20]
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	441a      	add	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	015a      	lsls	r2, r3, #5
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	4413      	add	r3, r2
 80040bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d809      	bhi.n	80040de <PCD_WriteEmptyTxFifo+0xde>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	695a      	ldr	r2, [r3, #20]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d203      	bcs.n	80040de <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1bf      	bne.n	800405e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	691a      	ldr	r2, [r3, #16]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d811      	bhi.n	800410e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	f003 030f 	and.w	r3, r3, #15
 80040f0:	2201      	movs	r2, #1
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	43db      	mvns	r3, r3
 8004104:	6939      	ldr	r1, [r7, #16]
 8004106:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800410a:	4013      	ands	r3, r2
 800410c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3720      	adds	r7, #32
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	333c      	adds	r3, #60	@ 0x3c
 8004130:	3304      	adds	r3, #4
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	4413      	add	r3, r2
 800413e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	799b      	ldrb	r3, [r3, #6]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d17b      	bne.n	8004246 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b00      	cmp	r3, #0
 8004156:	d015      	beq.n	8004184 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	4a61      	ldr	r2, [pc, #388]	@ (80042e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	f240 80b9 	bls.w	80042d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 80b3 	beq.w	80042d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800417a:	461a      	mov	r2, r3
 800417c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004180:	6093      	str	r3, [r2, #8]
 8004182:	e0a7      	b.n	80042d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	d009      	beq.n	80041a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800419a:	461a      	mov	r2, r3
 800419c:	2320      	movs	r3, #32
 800419e:	6093      	str	r3, [r2, #8]
 80041a0:	e098      	b.n	80042d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f040 8093 	bne.w	80042d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	4a4b      	ldr	r2, [pc, #300]	@ (80042e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d90f      	bls.n	80041d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00a      	beq.n	80041d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041cc:	461a      	mov	r2, r3
 80041ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041d2:	6093      	str	r3, [r2, #8]
 80041d4:	e07e      	b.n	80042d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	4613      	mov	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	4413      	add	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	4413      	add	r3, r2
 80041e8:	3304      	adds	r3, #4
 80041ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a1a      	ldr	r2, [r3, #32]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	0159      	lsls	r1, r3, #5
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	440b      	add	r3, r1
 80041f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004202:	1ad2      	subs	r2, r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d114      	bne.n	8004238 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004220:	461a      	mov	r2, r3
 8004222:	2101      	movs	r1, #1
 8004224:	f002 fd0e 	bl	8006c44 <USB_EP0_OutStart>
 8004228:	e006      	b.n	8004238 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	441a      	add	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	4619      	mov	r1, r3
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f005 f85e 	bl	8009300 <HAL_PCD_DataOutStageCallback>
 8004244:	e046      	b.n	80042d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	4a26      	ldr	r2, [pc, #152]	@ (80042e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d124      	bne.n	8004298 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004264:	461a      	mov	r2, r3
 8004266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800426a:	6093      	str	r3, [r2, #8]
 800426c:	e032      	b.n	80042d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	2b00      	cmp	r3, #0
 8004276:	d008      	beq.n	800428a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004284:	461a      	mov	r2, r3
 8004286:	2320      	movs	r3, #32
 8004288:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	4619      	mov	r1, r3
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f005 f835 	bl	8009300 <HAL_PCD_DataOutStageCallback>
 8004296:	e01d      	b.n	80042d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d114      	bne.n	80042c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	4613      	mov	r3, r2
 80042a4:	00db      	lsls	r3, r3, #3
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d108      	bne.n	80042c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6818      	ldr	r0, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042c0:	461a      	mov	r2, r3
 80042c2:	2100      	movs	r1, #0
 80042c4:	f002 fcbe 	bl	8006c44 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	4619      	mov	r1, r3
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f005 f816 	bl	8009300 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3720      	adds	r7, #32
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	4f54300a 	.word	0x4f54300a
 80042e4:	4f54310a 	.word	0x4f54310a

080042e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	333c      	adds	r3, #60	@ 0x3c
 8004300:	3304      	adds	r3, #4
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4a15      	ldr	r2, [pc, #84]	@ (8004370 <PCD_EP_OutSetupPacket_int+0x88>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d90e      	bls.n	800433c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004324:	2b00      	cmp	r3, #0
 8004326:	d009      	beq.n	800433c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004334:	461a      	mov	r2, r3
 8004336:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800433a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f004 ffcd 	bl	80092dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4a0a      	ldr	r2, [pc, #40]	@ (8004370 <PCD_EP_OutSetupPacket_int+0x88>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d90c      	bls.n	8004364 <PCD_EP_OutSetupPacket_int+0x7c>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	799b      	ldrb	r3, [r3, #6]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d108      	bne.n	8004364 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800435c:	461a      	mov	r2, r3
 800435e:	2101      	movs	r1, #1
 8004360:	f002 fc70 	bl	8006c44 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3718      	adds	r7, #24
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	4f54300a 	.word	0x4f54300a

08004374 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	70fb      	strb	r3, [r7, #3]
 8004380:	4613      	mov	r3, r2
 8004382:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800438c:	78fb      	ldrb	r3, [r7, #3]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d107      	bne.n	80043a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004392:	883b      	ldrh	r3, [r7, #0]
 8004394:	0419      	lsls	r1, r3, #16
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	430a      	orrs	r2, r1
 800439e:	629a      	str	r2, [r3, #40]	@ 0x28
 80043a0:	e028      	b.n	80043f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a8:	0c1b      	lsrs	r3, r3, #16
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	4413      	add	r3, r2
 80043ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043b0:	2300      	movs	r3, #0
 80043b2:	73fb      	strb	r3, [r7, #15]
 80043b4:	e00d      	b.n	80043d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	3340      	adds	r3, #64	@ 0x40
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	0c1b      	lsrs	r3, r3, #16
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	4413      	add	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
 80043ce:	3301      	adds	r3, #1
 80043d0:	73fb      	strb	r3, [r7, #15]
 80043d2:	7bfa      	ldrb	r2, [r7, #15]
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	429a      	cmp	r2, r3
 80043da:	d3ec      	bcc.n	80043b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80043dc:	883b      	ldrh	r3, [r7, #0]
 80043de:	0418      	lsls	r0, r3, #16
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6819      	ldr	r1, [r3, #0]
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	4302      	orrs	r2, r0
 80043ec:	3340      	adds	r3, #64	@ 0x40
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	440b      	add	r3, r1
 80043f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	460b      	mov	r3, r1
 800440c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	887a      	ldrh	r2, [r7, #2]
 8004414:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e267      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d075      	beq.n	8004546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800445a:	4b88      	ldr	r3, [pc, #544]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
 8004462:	2b04      	cmp	r3, #4
 8004464:	d00c      	beq.n	8004480 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004466:	4b85      	ldr	r3, [pc, #532]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800446e:	2b08      	cmp	r3, #8
 8004470:	d112      	bne.n	8004498 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004472:	4b82      	ldr	r3, [pc, #520]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800447a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800447e:	d10b      	bne.n	8004498 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004480:	4b7e      	ldr	r3, [pc, #504]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d05b      	beq.n	8004544 <HAL_RCC_OscConfig+0x108>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d157      	bne.n	8004544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e242      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044a0:	d106      	bne.n	80044b0 <HAL_RCC_OscConfig+0x74>
 80044a2:	4b76      	ldr	r3, [pc, #472]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a75      	ldr	r2, [pc, #468]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	e01d      	b.n	80044ec <HAL_RCC_OscConfig+0xb0>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044b8:	d10c      	bne.n	80044d4 <HAL_RCC_OscConfig+0x98>
 80044ba:	4b70      	ldr	r3, [pc, #448]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a6f      	ldr	r2, [pc, #444]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	4b6d      	ldr	r3, [pc, #436]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a6c      	ldr	r2, [pc, #432]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	e00b      	b.n	80044ec <HAL_RCC_OscConfig+0xb0>
 80044d4:	4b69      	ldr	r3, [pc, #420]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a68      	ldr	r2, [pc, #416]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	4b66      	ldr	r3, [pc, #408]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a65      	ldr	r2, [pc, #404]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80044e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d013      	beq.n	800451c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f4:	f7fd f882 	bl	80015fc <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044fc:	f7fd f87e 	bl	80015fc <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b64      	cmp	r3, #100	@ 0x64
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e207      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450e:	4b5b      	ldr	r3, [pc, #364]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0xc0>
 800451a:	e014      	b.n	8004546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451c:	f7fd f86e 	bl	80015fc <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004524:	f7fd f86a 	bl	80015fc <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b64      	cmp	r3, #100	@ 0x64
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e1f3      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004536:	4b51      	ldr	r3, [pc, #324]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0xe8>
 8004542:	e000      	b.n	8004546 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d063      	beq.n	800461a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004552:	4b4a      	ldr	r3, [pc, #296]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 030c 	and.w	r3, r3, #12
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00b      	beq.n	8004576 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800455e:	4b47      	ldr	r3, [pc, #284]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004566:	2b08      	cmp	r3, #8
 8004568:	d11c      	bne.n	80045a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800456a:	4b44      	ldr	r3, [pc, #272]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d116      	bne.n	80045a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004576:	4b41      	ldr	r3, [pc, #260]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d005      	beq.n	800458e <HAL_RCC_OscConfig+0x152>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d001      	beq.n	800458e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e1c7      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458e:	4b3b      	ldr	r3, [pc, #236]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	4937      	ldr	r1, [pc, #220]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045a2:	e03a      	b.n	800461a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d020      	beq.n	80045ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045ac:	4b34      	ldr	r3, [pc, #208]	@ (8004680 <HAL_RCC_OscConfig+0x244>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b2:	f7fd f823 	bl	80015fc <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045b8:	e008      	b.n	80045cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ba:	f7fd f81f 	bl	80015fc <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e1a8      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045cc:	4b2b      	ldr	r3, [pc, #172]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0f0      	beq.n	80045ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d8:	4b28      	ldr	r3, [pc, #160]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	4925      	ldr	r1, [pc, #148]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	600b      	str	r3, [r1, #0]
 80045ec:	e015      	b.n	800461a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ee:	4b24      	ldr	r3, [pc, #144]	@ (8004680 <HAL_RCC_OscConfig+0x244>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f4:	f7fd f802 	bl	80015fc <HAL_GetTick>
 80045f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fa:	e008      	b.n	800460e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045fc:	f7fc fffe 	bl	80015fc <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e187      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460e:	4b1b      	ldr	r3, [pc, #108]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1f0      	bne.n	80045fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d036      	beq.n	8004694 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d016      	beq.n	800465c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800462e:	4b15      	ldr	r3, [pc, #84]	@ (8004684 <HAL_RCC_OscConfig+0x248>)
 8004630:	2201      	movs	r2, #1
 8004632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004634:	f7fc ffe2 	bl	80015fc <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800463c:	f7fc ffde 	bl	80015fc <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e167      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800464e:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <HAL_RCC_OscConfig+0x240>)
 8004650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0f0      	beq.n	800463c <HAL_RCC_OscConfig+0x200>
 800465a:	e01b      	b.n	8004694 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800465c:	4b09      	ldr	r3, [pc, #36]	@ (8004684 <HAL_RCC_OscConfig+0x248>)
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004662:	f7fc ffcb 	bl	80015fc <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004668:	e00e      	b.n	8004688 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800466a:	f7fc ffc7 	bl	80015fc <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d907      	bls.n	8004688 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e150      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
 800467c:	40023800 	.word	0x40023800
 8004680:	42470000 	.word	0x42470000
 8004684:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004688:	4b88      	ldr	r3, [pc, #544]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 800468a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1ea      	bne.n	800466a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8097 	beq.w	80047d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a2:	2300      	movs	r3, #0
 80046a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046a6:	4b81      	ldr	r3, [pc, #516]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10f      	bne.n	80046d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b2:	2300      	movs	r3, #0
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	4b7d      	ldr	r3, [pc, #500]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ba:	4a7c      	ldr	r2, [pc, #496]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 80046bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80046c2:	4b7a      	ldr	r3, [pc, #488]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 80046c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ca:	60bb      	str	r3, [r7, #8]
 80046cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ce:	2301      	movs	r3, #1
 80046d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d2:	4b77      	ldr	r3, [pc, #476]	@ (80048b0 <HAL_RCC_OscConfig+0x474>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d118      	bne.n	8004710 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046de:	4b74      	ldr	r3, [pc, #464]	@ (80048b0 <HAL_RCC_OscConfig+0x474>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a73      	ldr	r2, [pc, #460]	@ (80048b0 <HAL_RCC_OscConfig+0x474>)
 80046e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ea:	f7fc ff87 	bl	80015fc <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f2:	f7fc ff83 	bl	80015fc <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e10c      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004704:	4b6a      	ldr	r3, [pc, #424]	@ (80048b0 <HAL_RCC_OscConfig+0x474>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d106      	bne.n	8004726 <HAL_RCC_OscConfig+0x2ea>
 8004718:	4b64      	ldr	r3, [pc, #400]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 800471a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471c:	4a63      	ldr	r2, [pc, #396]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 800471e:	f043 0301 	orr.w	r3, r3, #1
 8004722:	6713      	str	r3, [r2, #112]	@ 0x70
 8004724:	e01c      	b.n	8004760 <HAL_RCC_OscConfig+0x324>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b05      	cmp	r3, #5
 800472c:	d10c      	bne.n	8004748 <HAL_RCC_OscConfig+0x30c>
 800472e:	4b5f      	ldr	r3, [pc, #380]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004732:	4a5e      	ldr	r2, [pc, #376]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 8004734:	f043 0304 	orr.w	r3, r3, #4
 8004738:	6713      	str	r3, [r2, #112]	@ 0x70
 800473a:	4b5c      	ldr	r3, [pc, #368]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 800473c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473e:	4a5b      	ldr	r2, [pc, #364]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	6713      	str	r3, [r2, #112]	@ 0x70
 8004746:	e00b      	b.n	8004760 <HAL_RCC_OscConfig+0x324>
 8004748:	4b58      	ldr	r3, [pc, #352]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800474c:	4a57      	ldr	r2, [pc, #348]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 800474e:	f023 0301 	bic.w	r3, r3, #1
 8004752:	6713      	str	r3, [r2, #112]	@ 0x70
 8004754:	4b55      	ldr	r3, [pc, #340]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 8004756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004758:	4a54      	ldr	r2, [pc, #336]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 800475a:	f023 0304 	bic.w	r3, r3, #4
 800475e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d015      	beq.n	8004794 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004768:	f7fc ff48 	bl	80015fc <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476e:	e00a      	b.n	8004786 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004770:	f7fc ff44 	bl	80015fc <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800477e:	4293      	cmp	r3, r2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e0cb      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004786:	4b49      	ldr	r3, [pc, #292]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 8004788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0ee      	beq.n	8004770 <HAL_RCC_OscConfig+0x334>
 8004792:	e014      	b.n	80047be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004794:	f7fc ff32 	bl	80015fc <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800479a:	e00a      	b.n	80047b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479c:	f7fc ff2e 	bl	80015fc <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e0b5      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047b2:	4b3e      	ldr	r3, [pc, #248]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1ee      	bne.n	800479c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047be:	7dfb      	ldrb	r3, [r7, #23]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d105      	bne.n	80047d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047c4:	4b39      	ldr	r3, [pc, #228]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 80047c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c8:	4a38      	ldr	r2, [pc, #224]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 80047ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80a1 	beq.w	800491c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047da:	4b34      	ldr	r3, [pc, #208]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 030c 	and.w	r3, r3, #12
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d05c      	beq.n	80048a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d141      	bne.n	8004872 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ee:	4b31      	ldr	r3, [pc, #196]	@ (80048b4 <HAL_RCC_OscConfig+0x478>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f4:	f7fc ff02 	bl	80015fc <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047fc:	f7fc fefe 	bl	80015fc <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e087      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480e:	4b27      	ldr	r3, [pc, #156]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69da      	ldr	r2, [r3, #28]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004828:	019b      	lsls	r3, r3, #6
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004830:	085b      	lsrs	r3, r3, #1
 8004832:	3b01      	subs	r3, #1
 8004834:	041b      	lsls	r3, r3, #16
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483c:	061b      	lsls	r3, r3, #24
 800483e:	491b      	ldr	r1, [pc, #108]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 8004840:	4313      	orrs	r3, r2
 8004842:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004844:	4b1b      	ldr	r3, [pc, #108]	@ (80048b4 <HAL_RCC_OscConfig+0x478>)
 8004846:	2201      	movs	r2, #1
 8004848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484a:	f7fc fed7 	bl	80015fc <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004852:	f7fc fed3 	bl	80015fc <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e05c      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004864:	4b11      	ldr	r3, [pc, #68]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x416>
 8004870:	e054      	b.n	800491c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004872:	4b10      	ldr	r3, [pc, #64]	@ (80048b4 <HAL_RCC_OscConfig+0x478>)
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004878:	f7fc fec0 	bl	80015fc <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004880:	f7fc febc 	bl	80015fc <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e045      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004892:	4b06      	ldr	r3, [pc, #24]	@ (80048ac <HAL_RCC_OscConfig+0x470>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x444>
 800489e:	e03d      	b.n	800491c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d107      	bne.n	80048b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e038      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
 80048ac:	40023800 	.word	0x40023800
 80048b0:	40007000 	.word	0x40007000
 80048b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004928 <HAL_RCC_OscConfig+0x4ec>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d028      	beq.n	8004918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d121      	bne.n	8004918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048de:	429a      	cmp	r2, r3
 80048e0:	d11a      	bne.n	8004918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80048e8:	4013      	ands	r3, r2
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d111      	bne.n	8004918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fe:	085b      	lsrs	r3, r3, #1
 8004900:	3b01      	subs	r3, #1
 8004902:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004904:	429a      	cmp	r2, r3
 8004906:	d107      	bne.n	8004918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004912:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004914:	429a      	cmp	r2, r3
 8004916:	d001      	beq.n	800491c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40023800 	.word	0x40023800

0800492c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d101      	bne.n	8004940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e0cc      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004940:	4b68      	ldr	r3, [pc, #416]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d90c      	bls.n	8004968 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494e:	4b65      	ldr	r3, [pc, #404]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004956:	4b63      	ldr	r3, [pc, #396]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0307 	and.w	r3, r3, #7
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	429a      	cmp	r2, r3
 8004962:	d001      	beq.n	8004968 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e0b8      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d020      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d005      	beq.n	800498c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004980:	4b59      	ldr	r3, [pc, #356]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	4a58      	ldr	r2, [pc, #352]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800498a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0308 	and.w	r3, r3, #8
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004998:	4b53      	ldr	r3, [pc, #332]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	4a52      	ldr	r2, [pc, #328]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800499e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a4:	4b50      	ldr	r3, [pc, #320]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	494d      	ldr	r1, [pc, #308]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d044      	beq.n	8004a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ca:	4b47      	ldr	r3, [pc, #284]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d119      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e07f      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d003      	beq.n	80049ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049e6:	2b03      	cmp	r3, #3
 80049e8:	d107      	bne.n	80049fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ea:	4b3f      	ldr	r3, [pc, #252]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d109      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e06f      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049fa:	4b3b      	ldr	r3, [pc, #236]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e067      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a0a:	4b37      	ldr	r3, [pc, #220]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f023 0203 	bic.w	r2, r3, #3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	4934      	ldr	r1, [pc, #208]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a1c:	f7fc fdee 	bl	80015fc <HAL_GetTick>
 8004a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a22:	e00a      	b.n	8004a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a24:	f7fc fdea 	bl	80015fc <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e04f      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 020c 	and.w	r2, r3, #12
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d1eb      	bne.n	8004a24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a4c:	4b25      	ldr	r3, [pc, #148]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0307 	and.w	r3, r3, #7
 8004a54:	683a      	ldr	r2, [r7, #0]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d20c      	bcs.n	8004a74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5a:	4b22      	ldr	r3, [pc, #136]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	b2d2      	uxtb	r2, r2
 8004a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a62:	4b20      	ldr	r3, [pc, #128]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d001      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e032      	b.n	8004ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0304 	and.w	r3, r3, #4
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d008      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a80:	4b19      	ldr	r3, [pc, #100]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	4916      	ldr	r1, [pc, #88]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a9e:	4b12      	ldr	r3, [pc, #72]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	490e      	ldr	r1, [pc, #56]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ab2:	f000 f821 	bl	8004af8 <HAL_RCC_GetSysClockFreq>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	091b      	lsrs	r3, r3, #4
 8004abe:	f003 030f 	and.w	r3, r3, #15
 8004ac2:	490a      	ldr	r1, [pc, #40]	@ (8004aec <HAL_RCC_ClockConfig+0x1c0>)
 8004ac4:	5ccb      	ldrb	r3, [r1, r3]
 8004ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aca:	4a09      	ldr	r2, [pc, #36]	@ (8004af0 <HAL_RCC_ClockConfig+0x1c4>)
 8004acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004ace:	4b09      	ldr	r3, [pc, #36]	@ (8004af4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fc fd4e 	bl	8001574 <HAL_InitTick>

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40023c00 	.word	0x40023c00
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	08009910 	.word	0x08009910
 8004af0:	2000002c 	.word	0x2000002c
 8004af4:	20000030 	.word	0x20000030

08004af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004afc:	b090      	sub	sp, #64	@ 0x40
 8004afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b10:	4b59      	ldr	r3, [pc, #356]	@ (8004c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f003 030c 	and.w	r3, r3, #12
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d00d      	beq.n	8004b38 <HAL_RCC_GetSysClockFreq+0x40>
 8004b1c:	2b08      	cmp	r3, #8
 8004b1e:	f200 80a1 	bhi.w	8004c64 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_RCC_GetSysClockFreq+0x34>
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d003      	beq.n	8004b32 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b2a:	e09b      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b2c:	4b53      	ldr	r3, [pc, #332]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x184>)
 8004b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b30:	e09b      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b32:	4b53      	ldr	r3, [pc, #332]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b36:	e098      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b38:	4b4f      	ldr	r3, [pc, #316]	@ (8004c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b40:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b42:	4b4d      	ldr	r3, [pc, #308]	@ (8004c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d028      	beq.n	8004ba0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	099b      	lsrs	r3, r3, #6
 8004b54:	2200      	movs	r2, #0
 8004b56:	623b      	str	r3, [r7, #32]
 8004b58:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b60:	2100      	movs	r1, #0
 8004b62:	4b47      	ldr	r3, [pc, #284]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b64:	fb03 f201 	mul.w	r2, r3, r1
 8004b68:	2300      	movs	r3, #0
 8004b6a:	fb00 f303 	mul.w	r3, r0, r3
 8004b6e:	4413      	add	r3, r2
 8004b70:	4a43      	ldr	r2, [pc, #268]	@ (8004c80 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b72:	fba0 1202 	umull	r1, r2, r0, r2
 8004b76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b78:	460a      	mov	r2, r1
 8004b7a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b7e:	4413      	add	r3, r2
 8004b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b84:	2200      	movs	r2, #0
 8004b86:	61bb      	str	r3, [r7, #24]
 8004b88:	61fa      	str	r2, [r7, #28]
 8004b8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004b92:	f7fb fb21 	bl	80001d8 <__aeabi_uldivmod>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b9e:	e053      	b.n	8004c48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ba0:	4b35      	ldr	r3, [pc, #212]	@ (8004c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	099b      	lsrs	r3, r3, #6
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	617a      	str	r2, [r7, #20]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004bb2:	f04f 0b00 	mov.w	fp, #0
 8004bb6:	4652      	mov	r2, sl
 8004bb8:	465b      	mov	r3, fp
 8004bba:	f04f 0000 	mov.w	r0, #0
 8004bbe:	f04f 0100 	mov.w	r1, #0
 8004bc2:	0159      	lsls	r1, r3, #5
 8004bc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bc8:	0150      	lsls	r0, r2, #5
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	ebb2 080a 	subs.w	r8, r2, sl
 8004bd2:	eb63 090b 	sbc.w	r9, r3, fp
 8004bd6:	f04f 0200 	mov.w	r2, #0
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004be2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004be6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004bea:	ebb2 0408 	subs.w	r4, r2, r8
 8004bee:	eb63 0509 	sbc.w	r5, r3, r9
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	00eb      	lsls	r3, r5, #3
 8004bfc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c00:	00e2      	lsls	r2, r4, #3
 8004c02:	4614      	mov	r4, r2
 8004c04:	461d      	mov	r5, r3
 8004c06:	eb14 030a 	adds.w	r3, r4, sl
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	eb45 030b 	adc.w	r3, r5, fp
 8004c10:	607b      	str	r3, [r7, #4]
 8004c12:	f04f 0200 	mov.w	r2, #0
 8004c16:	f04f 0300 	mov.w	r3, #0
 8004c1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c1e:	4629      	mov	r1, r5
 8004c20:	028b      	lsls	r3, r1, #10
 8004c22:	4621      	mov	r1, r4
 8004c24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c28:	4621      	mov	r1, r4
 8004c2a:	028a      	lsls	r2, r1, #10
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c32:	2200      	movs	r2, #0
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	60fa      	str	r2, [r7, #12]
 8004c38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c3c:	f7fb facc 	bl	80001d8 <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4613      	mov	r3, r2
 8004c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c48:	4b0b      	ldr	r3, [pc, #44]	@ (8004c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	0c1b      	lsrs	r3, r3, #16
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	3301      	adds	r3, #1
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004c58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c62:	e002      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c64:	4b05      	ldr	r3, [pc, #20]	@ (8004c7c <HAL_RCC_GetSysClockFreq+0x184>)
 8004c66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3740      	adds	r7, #64	@ 0x40
 8004c70:	46bd      	mov	sp, r7
 8004c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c76:	bf00      	nop
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	00f42400 	.word	0x00f42400
 8004c80:	017d7840 	.word	0x017d7840

08004c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c88:	4b03      	ldr	r3, [pc, #12]	@ (8004c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	2000002c 	.word	0x2000002c

08004c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ca0:	f7ff fff0 	bl	8004c84 <HAL_RCC_GetHCLKFreq>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	4b05      	ldr	r3, [pc, #20]	@ (8004cbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	0a9b      	lsrs	r3, r3, #10
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	4903      	ldr	r1, [pc, #12]	@ (8004cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cb2:	5ccb      	ldrb	r3, [r1, r3]
 8004cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	08009920 	.word	0x08009920

08004cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e041      	b.n	8004d5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7fc fb2e 	bl	800134c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4619      	mov	r1, r3
 8004d02:	4610      	mov	r0, r2
 8004d04:	f000 fab2 	bl	800526c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d001      	beq.n	8004d7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e044      	b.n	8004e06 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0201 	orr.w	r2, r2, #1
 8004d92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a1e      	ldr	r2, [pc, #120]	@ (8004e14 <HAL_TIM_Base_Start_IT+0xb0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d018      	beq.n	8004dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da6:	d013      	beq.n	8004dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a1a      	ldr	r2, [pc, #104]	@ (8004e18 <HAL_TIM_Base_Start_IT+0xb4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00e      	beq.n	8004dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a19      	ldr	r2, [pc, #100]	@ (8004e1c <HAL_TIM_Base_Start_IT+0xb8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d009      	beq.n	8004dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a17      	ldr	r2, [pc, #92]	@ (8004e20 <HAL_TIM_Base_Start_IT+0xbc>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d004      	beq.n	8004dd0 <HAL_TIM_Base_Start_IT+0x6c>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a16      	ldr	r2, [pc, #88]	@ (8004e24 <HAL_TIM_Base_Start_IT+0xc0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d111      	bne.n	8004df4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b06      	cmp	r3, #6
 8004de0:	d010      	beq.n	8004e04 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f042 0201 	orr.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df2:	e007      	b.n	8004e04 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f042 0201 	orr.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40010000 	.word	0x40010000
 8004e18:	40000400 	.word	0x40000400
 8004e1c:	40000800 	.word	0x40000800
 8004e20:	40000c00 	.word	0x40000c00
 8004e24:	40014000 	.word	0x40014000

08004e28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d020      	beq.n	8004e8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d01b      	beq.n	8004e8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0202 	mvn.w	r2, #2
 8004e5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f9db 	bl	800522e <HAL_TIM_IC_CaptureCallback>
 8004e78:	e005      	b.n	8004e86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f9cd 	bl	800521a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f9de 	bl	8005242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f003 0304 	and.w	r3, r3, #4
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d020      	beq.n	8004ed8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d01b      	beq.n	8004ed8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0204 	mvn.w	r2, #4
 8004ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2202      	movs	r2, #2
 8004eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f9b5 	bl	800522e <HAL_TIM_IC_CaptureCallback>
 8004ec4:	e005      	b.n	8004ed2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f9a7 	bl	800521a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f9b8 	bl	8005242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d020      	beq.n	8004f24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d01b      	beq.n	8004f24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0208 	mvn.w	r2, #8
 8004ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2204      	movs	r2, #4
 8004efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f98f 	bl	800522e <HAL_TIM_IC_CaptureCallback>
 8004f10:	e005      	b.n	8004f1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f981 	bl	800521a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f992 	bl	8005242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d020      	beq.n	8004f70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f003 0310 	and.w	r3, r3, #16
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d01b      	beq.n	8004f70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0210 	mvn.w	r2, #16
 8004f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2208      	movs	r2, #8
 8004f46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 f969 	bl	800522e <HAL_TIM_IC_CaptureCallback>
 8004f5c:	e005      	b.n	8004f6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f95b 	bl	800521a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f96c 	bl	8005242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00c      	beq.n	8004f94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d007      	beq.n	8004f94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0201 	mvn.w	r2, #1
 8004f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fb fad8 	bl	8000544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00c      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d007      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fb84 	bl	80056c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00c      	beq.n	8004fdc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f93d 	bl	8005256 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00c      	beq.n	8005000 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d007      	beq.n	8005000 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0220 	mvn.w	r2, #32
 8004ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fb56 	bl	80056ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005000:	bf00      	nop
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_TIM_ConfigClockSource+0x1c>
 8005020:	2302      	movs	r3, #2
 8005022:	e0b4      	b.n	800518e <HAL_TIM_ConfigClockSource+0x186>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800504a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800505c:	d03e      	beq.n	80050dc <HAL_TIM_ConfigClockSource+0xd4>
 800505e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005062:	f200 8087 	bhi.w	8005174 <HAL_TIM_ConfigClockSource+0x16c>
 8005066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800506a:	f000 8086 	beq.w	800517a <HAL_TIM_ConfigClockSource+0x172>
 800506e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005072:	d87f      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x16c>
 8005074:	2b70      	cmp	r3, #112	@ 0x70
 8005076:	d01a      	beq.n	80050ae <HAL_TIM_ConfigClockSource+0xa6>
 8005078:	2b70      	cmp	r3, #112	@ 0x70
 800507a:	d87b      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x16c>
 800507c:	2b60      	cmp	r3, #96	@ 0x60
 800507e:	d050      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0x11a>
 8005080:	2b60      	cmp	r3, #96	@ 0x60
 8005082:	d877      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x16c>
 8005084:	2b50      	cmp	r3, #80	@ 0x50
 8005086:	d03c      	beq.n	8005102 <HAL_TIM_ConfigClockSource+0xfa>
 8005088:	2b50      	cmp	r3, #80	@ 0x50
 800508a:	d873      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x16c>
 800508c:	2b40      	cmp	r3, #64	@ 0x40
 800508e:	d058      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0x13a>
 8005090:	2b40      	cmp	r3, #64	@ 0x40
 8005092:	d86f      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x16c>
 8005094:	2b30      	cmp	r3, #48	@ 0x30
 8005096:	d064      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x15a>
 8005098:	2b30      	cmp	r3, #48	@ 0x30
 800509a:	d86b      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x16c>
 800509c:	2b20      	cmp	r3, #32
 800509e:	d060      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x15a>
 80050a0:	2b20      	cmp	r3, #32
 80050a2:	d867      	bhi.n	8005174 <HAL_TIM_ConfigClockSource+0x16c>
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d05c      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x15a>
 80050a8:	2b10      	cmp	r3, #16
 80050aa:	d05a      	beq.n	8005162 <HAL_TIM_ConfigClockSource+0x15a>
 80050ac:	e062      	b.n	8005174 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050be:	f000 fa66 	bl	800558e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	609a      	str	r2, [r3, #8]
      break;
 80050da:	e04f      	b.n	800517c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050ec:	f000 fa4f 	bl	800558e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050fe:	609a      	str	r2, [r3, #8]
      break;
 8005100:	e03c      	b.n	800517c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800510e:	461a      	mov	r2, r3
 8005110:	f000 f9c3 	bl	800549a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2150      	movs	r1, #80	@ 0x50
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fa1c 	bl	8005558 <TIM_ITRx_SetConfig>
      break;
 8005120:	e02c      	b.n	800517c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800512e:	461a      	mov	r2, r3
 8005130:	f000 f9e2 	bl	80054f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2160      	movs	r1, #96	@ 0x60
 800513a:	4618      	mov	r0, r3
 800513c:	f000 fa0c 	bl	8005558 <TIM_ITRx_SetConfig>
      break;
 8005140:	e01c      	b.n	800517c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800514e:	461a      	mov	r2, r3
 8005150:	f000 f9a3 	bl	800549a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2140      	movs	r1, #64	@ 0x40
 800515a:	4618      	mov	r0, r3
 800515c:	f000 f9fc 	bl	8005558 <TIM_ITRx_SetConfig>
      break;
 8005160:	e00c      	b.n	800517c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4619      	mov	r1, r3
 800516c:	4610      	mov	r0, r2
 800516e:	f000 f9f3 	bl	8005558 <TIM_ITRx_SetConfig>
      break;
 8005172:	e003      	b.n	800517c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
      break;
 8005178:	e000      	b.n	800517c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800517a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800518c:	7bfb      	ldrb	r3, [r7, #15]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3710      	adds	r7, #16
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b082      	sub	sp, #8
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <HAL_TIM_SlaveConfigSynchro+0x18>
 80051aa:	2302      	movs	r3, #2
 80051ac:	e031      	b.n	8005212 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2202      	movs	r2, #2
 80051ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80051be:	6839      	ldr	r1, [r7, #0]
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f8d9 	bl	8005378 <TIM_SlaveTimer_SetConfig>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d009      	beq.n	80051e0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e018      	b.n	8005212 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051ee:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68da      	ldr	r2, [r3, #12]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80051fe:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800522e:	b480      	push	{r7}
 8005230:	b083      	sub	sp, #12
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800525e:	bf00      	nop
 8005260:	370c      	adds	r7, #12
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
	...

0800526c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a37      	ldr	r2, [pc, #220]	@ (800535c <TIM_Base_SetConfig+0xf0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00f      	beq.n	80052a4 <TIM_Base_SetConfig+0x38>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800528a:	d00b      	beq.n	80052a4 <TIM_Base_SetConfig+0x38>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a34      	ldr	r2, [pc, #208]	@ (8005360 <TIM_Base_SetConfig+0xf4>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d007      	beq.n	80052a4 <TIM_Base_SetConfig+0x38>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a33      	ldr	r2, [pc, #204]	@ (8005364 <TIM_Base_SetConfig+0xf8>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <TIM_Base_SetConfig+0x38>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a32      	ldr	r2, [pc, #200]	@ (8005368 <TIM_Base_SetConfig+0xfc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d108      	bne.n	80052b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a28      	ldr	r2, [pc, #160]	@ (800535c <TIM_Base_SetConfig+0xf0>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d01b      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c4:	d017      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a25      	ldr	r2, [pc, #148]	@ (8005360 <TIM_Base_SetConfig+0xf4>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d013      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a24      	ldr	r2, [pc, #144]	@ (8005364 <TIM_Base_SetConfig+0xf8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00f      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a23      	ldr	r2, [pc, #140]	@ (8005368 <TIM_Base_SetConfig+0xfc>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00b      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a22      	ldr	r2, [pc, #136]	@ (800536c <TIM_Base_SetConfig+0x100>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d007      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a21      	ldr	r2, [pc, #132]	@ (8005370 <TIM_Base_SetConfig+0x104>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d003      	beq.n	80052f6 <TIM_Base_SetConfig+0x8a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a20      	ldr	r2, [pc, #128]	@ (8005374 <TIM_Base_SetConfig+0x108>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d108      	bne.n	8005308 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a0c      	ldr	r2, [pc, #48]	@ (800535c <TIM_Base_SetConfig+0xf0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d103      	bne.n	8005336 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	691a      	ldr	r2, [r3, #16]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f043 0204 	orr.w	r2, r3, #4
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	601a      	str	r2, [r3, #0]
}
 800534e:	bf00      	nop
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	40010000 	.word	0x40010000
 8005360:	40000400 	.word	0x40000400
 8005364:	40000800 	.word	0x40000800
 8005368:	40000c00 	.word	0x40000c00
 800536c:	40014000 	.word	0x40014000
 8005370:	40014400 	.word	0x40014400
 8005374:	40014800 	.word	0x40014800

08005378 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005382:	2300      	movs	r3, #0
 8005384:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005394:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	4313      	orrs	r3, r2
 800539e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f023 0307 	bic.w	r3, r3, #7
 80053a6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2b70      	cmp	r3, #112	@ 0x70
 80053c0:	d01a      	beq.n	80053f8 <TIM_SlaveTimer_SetConfig+0x80>
 80053c2:	2b70      	cmp	r3, #112	@ 0x70
 80053c4:	d860      	bhi.n	8005488 <TIM_SlaveTimer_SetConfig+0x110>
 80053c6:	2b60      	cmp	r3, #96	@ 0x60
 80053c8:	d054      	beq.n	8005474 <TIM_SlaveTimer_SetConfig+0xfc>
 80053ca:	2b60      	cmp	r3, #96	@ 0x60
 80053cc:	d85c      	bhi.n	8005488 <TIM_SlaveTimer_SetConfig+0x110>
 80053ce:	2b50      	cmp	r3, #80	@ 0x50
 80053d0:	d046      	beq.n	8005460 <TIM_SlaveTimer_SetConfig+0xe8>
 80053d2:	2b50      	cmp	r3, #80	@ 0x50
 80053d4:	d858      	bhi.n	8005488 <TIM_SlaveTimer_SetConfig+0x110>
 80053d6:	2b40      	cmp	r3, #64	@ 0x40
 80053d8:	d019      	beq.n	800540e <TIM_SlaveTimer_SetConfig+0x96>
 80053da:	2b40      	cmp	r3, #64	@ 0x40
 80053dc:	d854      	bhi.n	8005488 <TIM_SlaveTimer_SetConfig+0x110>
 80053de:	2b30      	cmp	r3, #48	@ 0x30
 80053e0:	d055      	beq.n	800548e <TIM_SlaveTimer_SetConfig+0x116>
 80053e2:	2b30      	cmp	r3, #48	@ 0x30
 80053e4:	d850      	bhi.n	8005488 <TIM_SlaveTimer_SetConfig+0x110>
 80053e6:	2b20      	cmp	r3, #32
 80053e8:	d051      	beq.n	800548e <TIM_SlaveTimer_SetConfig+0x116>
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d84c      	bhi.n	8005488 <TIM_SlaveTimer_SetConfig+0x110>
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d04d      	beq.n	800548e <TIM_SlaveTimer_SetConfig+0x116>
 80053f2:	2b10      	cmp	r3, #16
 80053f4:	d04b      	beq.n	800548e <TIM_SlaveTimer_SetConfig+0x116>
 80053f6:	e047      	b.n	8005488 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8005408:	f000 f8c1 	bl	800558e <TIM_ETR_SetConfig>
      break;
 800540c:	e040      	b.n	8005490 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2b05      	cmp	r3, #5
 8005414:	d101      	bne.n	800541a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e03b      	b.n	8005492 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6a1a      	ldr	r2, [r3, #32]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0201 	bic.w	r2, r2, #1
 8005430:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	699b      	ldr	r3, [r3, #24]
 8005438:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005440:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	011b      	lsls	r3, r3, #4
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	4313      	orrs	r3, r2
 800544c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	621a      	str	r2, [r3, #32]
      break;
 800545e:	e017      	b.n	8005490 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800546c:	461a      	mov	r2, r3
 800546e:	f000 f814 	bl	800549a <TIM_TI1_ConfigInputStage>
      break;
 8005472:	e00d      	b.n	8005490 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005480:	461a      	mov	r2, r3
 8005482:	f000 f839 	bl	80054f8 <TIM_TI2_ConfigInputStage>
      break;
 8005486:	e003      	b.n	8005490 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	75fb      	strb	r3, [r7, #23]
      break;
 800548c:	e000      	b.n	8005490 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800548e:	bf00      	nop
  }

  return status;
 8005490:	7dfb      	ldrb	r3, [r7, #23]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800549a:	b480      	push	{r7}
 800549c:	b087      	sub	sp, #28
 800549e:	af00      	add	r7, sp, #0
 80054a0:	60f8      	str	r0, [r7, #12]
 80054a2:	60b9      	str	r1, [r7, #8]
 80054a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	f023 0201 	bic.w	r2, r3, #1
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f023 030a 	bic.w	r3, r3, #10
 80054d6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4313      	orrs	r3, r2
 80054de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	621a      	str	r2, [r3, #32]
}
 80054ec:	bf00      	nop
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	f023 0210 	bic.w	r2, r3, #16
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	031b      	lsls	r3, r3, #12
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005534:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	4313      	orrs	r3, r2
 800553e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	621a      	str	r2, [r3, #32]
}
 800554c:	bf00      	nop
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800556e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4313      	orrs	r3, r2
 8005576:	f043 0307 	orr.w	r3, r3, #7
 800557a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	609a      	str	r2, [r3, #8]
}
 8005582:	bf00      	nop
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800558e:	b480      	push	{r7}
 8005590:	b087      	sub	sp, #28
 8005592:	af00      	add	r7, sp, #0
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	607a      	str	r2, [r7, #4]
 800559a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	021a      	lsls	r2, r3, #8
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	431a      	orrs	r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	609a      	str	r2, [r3, #8]
}
 80055c2:	bf00      	nop
 80055c4:	371c      	adds	r7, #28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
	...

080055d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e050      	b.n	800568a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800560e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a1c      	ldr	r2, [pc, #112]	@ (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d018      	beq.n	800565e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005634:	d013      	beq.n	800565e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a18      	ldr	r2, [pc, #96]	@ (800569c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00e      	beq.n	800565e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a16      	ldr	r2, [pc, #88]	@ (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d009      	beq.n	800565e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a15      	ldr	r2, [pc, #84]	@ (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d004      	beq.n	800565e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a13      	ldr	r2, [pc, #76]	@ (80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d10c      	bne.n	8005678 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	4313      	orrs	r3, r2
 800566e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	40010000 	.word	0x40010000
 800569c:	40000400 	.word	0x40000400
 80056a0:	40000800 	.word	0x40000800
 80056a4:	40000c00 	.word	0x40000c00
 80056a8:	40014000 	.word	0x40014000

080056ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056d4:	b084      	sub	sp, #16
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b084      	sub	sp, #16
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	f107 001c 	add.w	r0, r7, #28
 80056e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d123      	bne.n	8005736 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005702:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005716:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800571a:	2b01      	cmp	r3, #1
 800571c:	d105      	bne.n	800572a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f001 fae8 	bl	8006d00 <USB_CoreReset>
 8005730:	4603      	mov	r3, r0
 8005732:	73fb      	strb	r3, [r7, #15]
 8005734:	e01b      	b.n	800576e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f001 fadc 	bl	8006d00 <USB_CoreReset>
 8005748:	4603      	mov	r3, r0
 800574a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800574c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005750:	2b00      	cmp	r3, #0
 8005752:	d106      	bne.n	8005762 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005758:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005760:	e005      	b.n	800576e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005766:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800576e:	7fbb      	ldrb	r3, [r7, #30]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d10b      	bne.n	800578c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f043 0206 	orr.w	r2, r3, #6
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f043 0220 	orr.w	r2, r3, #32
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800578c:	7bfb      	ldrb	r3, [r7, #15]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005798:	b004      	add	sp, #16
 800579a:	4770      	bx	lr

0800579c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800579c:	b480      	push	{r7}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	4613      	mov	r3, r2
 80057a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80057aa:	79fb      	ldrb	r3, [r7, #7]
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d165      	bne.n	800587c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4a41      	ldr	r2, [pc, #260]	@ (80058b8 <USB_SetTurnaroundTime+0x11c>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d906      	bls.n	80057c6 <USB_SetTurnaroundTime+0x2a>
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	4a40      	ldr	r2, [pc, #256]	@ (80058bc <USB_SetTurnaroundTime+0x120>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d202      	bcs.n	80057c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80057c0:	230f      	movs	r3, #15
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	e062      	b.n	800588c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	4a3c      	ldr	r2, [pc, #240]	@ (80058bc <USB_SetTurnaroundTime+0x120>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d306      	bcc.n	80057dc <USB_SetTurnaroundTime+0x40>
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	4a3b      	ldr	r2, [pc, #236]	@ (80058c0 <USB_SetTurnaroundTime+0x124>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d202      	bcs.n	80057dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80057d6:	230e      	movs	r3, #14
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	e057      	b.n	800588c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4a38      	ldr	r2, [pc, #224]	@ (80058c0 <USB_SetTurnaroundTime+0x124>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d306      	bcc.n	80057f2 <USB_SetTurnaroundTime+0x56>
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4a37      	ldr	r2, [pc, #220]	@ (80058c4 <USB_SetTurnaroundTime+0x128>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d202      	bcs.n	80057f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80057ec:	230d      	movs	r3, #13
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	e04c      	b.n	800588c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	4a33      	ldr	r2, [pc, #204]	@ (80058c4 <USB_SetTurnaroundTime+0x128>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d306      	bcc.n	8005808 <USB_SetTurnaroundTime+0x6c>
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	4a32      	ldr	r2, [pc, #200]	@ (80058c8 <USB_SetTurnaroundTime+0x12c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d802      	bhi.n	8005808 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005802:	230c      	movs	r3, #12
 8005804:	617b      	str	r3, [r7, #20]
 8005806:	e041      	b.n	800588c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	4a2f      	ldr	r2, [pc, #188]	@ (80058c8 <USB_SetTurnaroundTime+0x12c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d906      	bls.n	800581e <USB_SetTurnaroundTime+0x82>
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4a2e      	ldr	r2, [pc, #184]	@ (80058cc <USB_SetTurnaroundTime+0x130>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d802      	bhi.n	800581e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005818:	230b      	movs	r3, #11
 800581a:	617b      	str	r3, [r7, #20]
 800581c:	e036      	b.n	800588c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	4a2a      	ldr	r2, [pc, #168]	@ (80058cc <USB_SetTurnaroundTime+0x130>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d906      	bls.n	8005834 <USB_SetTurnaroundTime+0x98>
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	4a29      	ldr	r2, [pc, #164]	@ (80058d0 <USB_SetTurnaroundTime+0x134>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d802      	bhi.n	8005834 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800582e:	230a      	movs	r3, #10
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	e02b      	b.n	800588c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4a26      	ldr	r2, [pc, #152]	@ (80058d0 <USB_SetTurnaroundTime+0x134>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d906      	bls.n	800584a <USB_SetTurnaroundTime+0xae>
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	4a25      	ldr	r2, [pc, #148]	@ (80058d4 <USB_SetTurnaroundTime+0x138>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d202      	bcs.n	800584a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005844:	2309      	movs	r3, #9
 8005846:	617b      	str	r3, [r7, #20]
 8005848:	e020      	b.n	800588c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	4a21      	ldr	r2, [pc, #132]	@ (80058d4 <USB_SetTurnaroundTime+0x138>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d306      	bcc.n	8005860 <USB_SetTurnaroundTime+0xc4>
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	4a20      	ldr	r2, [pc, #128]	@ (80058d8 <USB_SetTurnaroundTime+0x13c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d802      	bhi.n	8005860 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800585a:	2308      	movs	r3, #8
 800585c:	617b      	str	r3, [r7, #20]
 800585e:	e015      	b.n	800588c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4a1d      	ldr	r2, [pc, #116]	@ (80058d8 <USB_SetTurnaroundTime+0x13c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d906      	bls.n	8005876 <USB_SetTurnaroundTime+0xda>
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4a1c      	ldr	r2, [pc, #112]	@ (80058dc <USB_SetTurnaroundTime+0x140>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d202      	bcs.n	8005876 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005870:	2307      	movs	r3, #7
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	e00a      	b.n	800588c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005876:	2306      	movs	r3, #6
 8005878:	617b      	str	r3, [r7, #20]
 800587a:	e007      	b.n	800588c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800587c:	79fb      	ldrb	r3, [r7, #7]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d102      	bne.n	8005888 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005882:	2309      	movs	r3, #9
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	e001      	b.n	800588c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005888:	2309      	movs	r3, #9
 800588a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	68da      	ldr	r2, [r3, #12]
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	029b      	lsls	r3, r3, #10
 80058a0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80058a4:	431a      	orrs	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	371c      	adds	r7, #28
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	00d8acbf 	.word	0x00d8acbf
 80058bc:	00e4e1c0 	.word	0x00e4e1c0
 80058c0:	00f42400 	.word	0x00f42400
 80058c4:	01067380 	.word	0x01067380
 80058c8:	011a499f 	.word	0x011a499f
 80058cc:	01312cff 	.word	0x01312cff
 80058d0:	014ca43f 	.word	0x014ca43f
 80058d4:	016e3600 	.word	0x016e3600
 80058d8:	01a6ab1f 	.word	0x01a6ab1f
 80058dc:	01e84800 	.word	0x01e84800

080058e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f043 0201 	orr.w	r2, r3, #1
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f023 0201 	bic.w	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	460b      	mov	r3, r1
 800592e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005940:	78fb      	ldrb	r3, [r7, #3]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d115      	bne.n	8005972 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005952:	200a      	movs	r0, #10
 8005954:	f7fb fe5e 	bl	8001614 <HAL_Delay>
      ms += 10U;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	330a      	adds	r3, #10
 800595c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f001 f93f 	bl	8006be2 <USB_GetMode>
 8005964:	4603      	mov	r3, r0
 8005966:	2b01      	cmp	r3, #1
 8005968:	d01e      	beq.n	80059a8 <USB_SetCurrentMode+0x84>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2bc7      	cmp	r3, #199	@ 0xc7
 800596e:	d9f0      	bls.n	8005952 <USB_SetCurrentMode+0x2e>
 8005970:	e01a      	b.n	80059a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005972:	78fb      	ldrb	r3, [r7, #3]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d115      	bne.n	80059a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005984:	200a      	movs	r0, #10
 8005986:	f7fb fe45 	bl	8001614 <HAL_Delay>
      ms += 10U;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	330a      	adds	r3, #10
 800598e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 f926 	bl	8006be2 <USB_GetMode>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <USB_SetCurrentMode+0x84>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2bc7      	cmp	r3, #199	@ 0xc7
 80059a0:	d9f0      	bls.n	8005984 <USB_SetCurrentMode+0x60>
 80059a2:	e001      	b.n	80059a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e005      	b.n	80059b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2bc8      	cmp	r3, #200	@ 0xc8
 80059ac:	d101      	bne.n	80059b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059bc:	b084      	sub	sp, #16
 80059be:	b580      	push	{r7, lr}
 80059c0:	b086      	sub	sp, #24
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80059ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059d6:	2300      	movs	r3, #0
 80059d8:	613b      	str	r3, [r7, #16]
 80059da:	e009      	b.n	80059f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	3340      	adds	r3, #64	@ 0x40
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	4413      	add	r3, r2
 80059e6:	2200      	movs	r2, #0
 80059e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	3301      	adds	r3, #1
 80059ee:	613b      	str	r3, [r7, #16]
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	2b0e      	cmp	r3, #14
 80059f4:	d9f2      	bls.n	80059dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80059f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d11c      	bne.n	8005a38 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a0c:	f043 0302 	orr.w	r3, r3, #2
 8005a10:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a16:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a22:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a36:	e00b      	b.n	8005a50 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a3c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a48:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a56:	461a      	mov	r2, r3
 8005a58:	2300      	movs	r3, #0
 8005a5a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a5c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d10d      	bne.n	8005a80 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d104      	bne.n	8005a76 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f968 	bl	8005d44 <USB_SetDevSpeed>
 8005a74:	e008      	b.n	8005a88 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a76:	2101      	movs	r1, #1
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f963 	bl	8005d44 <USB_SetDevSpeed>
 8005a7e:	e003      	b.n	8005a88 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a80:	2103      	movs	r1, #3
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f95e 	bl	8005d44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a88:	2110      	movs	r1, #16
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f8fa 	bl	8005c84 <USB_FlushTxFifo>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f924 	bl	8005ce8 <USB_FlushRxFifo>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005abc:	461a      	mov	r2, r3
 8005abe:	2300      	movs	r3, #0
 8005ac0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ac8:	461a      	mov	r2, r3
 8005aca:	2300      	movs	r3, #0
 8005acc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ace:	2300      	movs	r3, #0
 8005ad0:	613b      	str	r3, [r7, #16]
 8005ad2:	e043      	b.n	8005b5c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ae6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005aea:	d118      	bne.n	8005b1e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10a      	bne.n	8005b08 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005afe:	461a      	mov	r2, r3
 8005b00:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	e013      	b.n	8005b30 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b14:	461a      	mov	r2, r3
 8005b16:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b1a:	6013      	str	r3, [r2, #0]
 8005b1c:	e008      	b.n	8005b30 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	015a      	lsls	r2, r3, #5
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4413      	add	r3, r2
 8005b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	2300      	movs	r3, #0
 8005b40:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b60:	461a      	mov	r2, r3
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d3b5      	bcc.n	8005ad4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b68:	2300      	movs	r3, #0
 8005b6a:	613b      	str	r3, [r7, #16]
 8005b6c:	e043      	b.n	8005bf6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b84:	d118      	bne.n	8005bb8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10a      	bne.n	8005ba2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b98:	461a      	mov	r2, r3
 8005b9a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	e013      	b.n	8005bca <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	015a      	lsls	r2, r3, #5
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	e008      	b.n	8005bca <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	2300      	movs	r3, #0
 8005bda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005be8:	461a      	mov	r2, r3
 8005bea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005bee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	613b      	str	r3, [r7, #16]
 8005bf6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d3b5      	bcc.n	8005b6e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c14:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005c22:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d105      	bne.n	8005c38 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	f043 0210 	orr.w	r2, r3, #16
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699a      	ldr	r2, [r3, #24]
 8005c3c:	4b10      	ldr	r3, [pc, #64]	@ (8005c80 <USB_DevInit+0x2c4>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c44:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d005      	beq.n	8005c58 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	f043 0208 	orr.w	r2, r3, #8
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c58:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d107      	bne.n	8005c70 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c68:	f043 0304 	orr.w	r3, r3, #4
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c7c:	b004      	add	sp, #16
 8005c7e:	4770      	bx	lr
 8005c80:	803c3800 	.word	0x803c3800

08005c84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	3301      	adds	r3, #1
 8005c96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c9e:	d901      	bls.n	8005ca4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e01b      	b.n	8005cdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	daf2      	bge.n	8005c92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	019b      	lsls	r3, r3, #6
 8005cb4:	f043 0220 	orr.w	r2, r3, #32
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005cc8:	d901      	bls.n	8005cce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e006      	b.n	8005cdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b20      	cmp	r3, #32
 8005cd8:	d0f0      	beq.n	8005cbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d00:	d901      	bls.n	8005d06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e018      	b.n	8005d38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	daf2      	bge.n	8005cf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2210      	movs	r2, #16
 8005d16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d24:	d901      	bls.n	8005d2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e006      	b.n	8005d38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 0310 	and.w	r3, r3, #16
 8005d32:	2b10      	cmp	r3, #16
 8005d34:	d0f0      	beq.n	8005d18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	68f9      	ldr	r1, [r7, #12]
 8005d60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d64:	4313      	orrs	r3, r2
 8005d66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b087      	sub	sp, #28
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 0306 	and.w	r3, r3, #6
 8005d8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d102      	bne.n	8005d9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d96:	2300      	movs	r3, #0
 8005d98:	75fb      	strb	r3, [r7, #23]
 8005d9a:	e00a      	b.n	8005db2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	d002      	beq.n	8005da8 <USB_GetDevSpeed+0x32>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b06      	cmp	r3, #6
 8005da6:	d102      	bne.n	8005dae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005da8:	2302      	movs	r3, #2
 8005daa:	75fb      	strb	r3, [r7, #23]
 8005dac:	e001      	b.n	8005db2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005dae:	230f      	movs	r3, #15
 8005db0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	371c      	adds	r7, #28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	785b      	ldrb	r3, [r3, #1]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d13a      	bne.n	8005e52 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005de2:	69da      	ldr	r2, [r3, #28]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	f003 030f 	and.w	r3, r3, #15
 8005dec:	2101      	movs	r1, #1
 8005dee:	fa01 f303 	lsl.w	r3, r1, r3
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	68f9      	ldr	r1, [r7, #12]
 8005df6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d155      	bne.n	8005ec0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	015a      	lsls	r2, r3, #5
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	791b      	ldrb	r3, [r3, #4]
 8005e2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	059b      	lsls	r3, r3, #22
 8005e36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	0151      	lsls	r1, r2, #5
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	440a      	add	r2, r1
 8005e42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e4e:	6013      	str	r3, [r2, #0]
 8005e50:	e036      	b.n	8005ec0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e58:	69da      	ldr	r2, [r3, #28]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	2101      	movs	r1, #1
 8005e64:	fa01 f303 	lsl.w	r3, r1, r3
 8005e68:	041b      	lsls	r3, r3, #16
 8005e6a:	68f9      	ldr	r1, [r7, #12]
 8005e6c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e70:	4313      	orrs	r3, r2
 8005e72:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	015a      	lsls	r2, r3, #5
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4413      	add	r3, r2
 8005e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d11a      	bne.n	8005ec0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	791b      	ldrb	r3, [r3, #4]
 8005ea4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ea6:	430b      	orrs	r3, r1
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	0151      	lsls	r1, r2, #5
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	440a      	add	r2, r1
 8005eb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005eb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005eba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ebe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
	...

08005ed0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	785b      	ldrb	r3, [r3, #1]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d161      	bne.n	8005fb0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005efe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f02:	d11f      	bne.n	8005f44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f1e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	0151      	lsls	r1, r2, #5
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	440a      	add	r2, r1
 8005f3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	f003 030f 	and.w	r3, r3, #15
 8005f54:	2101      	movs	r1, #1
 8005f56:	fa01 f303 	lsl.w	r3, r1, r3
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	68f9      	ldr	r1, [r7, #12]
 8005f60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f64:	4013      	ands	r3, r2
 8005f66:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f6e:	69da      	ldr	r2, [r3, #28]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	f003 030f 	and.w	r3, r3, #15
 8005f78:	2101      	movs	r1, #1
 8005f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	43db      	mvns	r3, r3
 8005f82:	68f9      	ldr	r1, [r7, #12]
 8005f84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f88:	4013      	ands	r3, r2
 8005f8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	0159      	lsls	r1, r3, #5
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	440b      	add	r3, r1
 8005fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	4b35      	ldr	r3, [pc, #212]	@ (8006080 <USB_DeactivateEndpoint+0x1b0>)
 8005faa:	4013      	ands	r3, r2
 8005fac:	600b      	str	r3, [r1, #0]
 8005fae:	e060      	b.n	8006072 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fc6:	d11f      	bne.n	8006008 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fe2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005fe6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006002:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006006:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800600e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	f003 030f 	and.w	r3, r3, #15
 8006018:	2101      	movs	r1, #1
 800601a:	fa01 f303 	lsl.w	r3, r1, r3
 800601e:	041b      	lsls	r3, r3, #16
 8006020:	43db      	mvns	r3, r3
 8006022:	68f9      	ldr	r1, [r7, #12]
 8006024:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006028:	4013      	ands	r3, r2
 800602a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006032:	69da      	ldr	r2, [r3, #28]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	2101      	movs	r1, #1
 800603e:	fa01 f303 	lsl.w	r3, r1, r3
 8006042:	041b      	lsls	r3, r3, #16
 8006044:	43db      	mvns	r3, r3
 8006046:	68f9      	ldr	r1, [r7, #12]
 8006048:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800604c:	4013      	ands	r3, r2
 800604e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	0159      	lsls	r1, r3, #5
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	440b      	add	r3, r1
 8006066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800606a:	4619      	mov	r1, r3
 800606c:	4b05      	ldr	r3, [pc, #20]	@ (8006084 <USB_DeactivateEndpoint+0x1b4>)
 800606e:	4013      	ands	r3, r2
 8006070:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	ec337800 	.word	0xec337800
 8006084:	eff37800 	.word	0xeff37800

08006088 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08a      	sub	sp, #40	@ 0x28
 800608c:	af02      	add	r7, sp, #8
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	4613      	mov	r3, r2
 8006094:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	785b      	ldrb	r3, [r3, #1]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	f040 817f 	bne.w	80063a8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d132      	bne.n	8006118 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	015a      	lsls	r2, r3, #5
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	4413      	add	r3, r2
 80060ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	0151      	lsls	r1, r2, #5
 80060c4:	69fa      	ldr	r2, [r7, #28]
 80060c6:	440a      	add	r2, r1
 80060c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060cc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060d0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80060f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006102:	691b      	ldr	r3, [r3, #16]
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	0151      	lsls	r1, r2, #5
 8006108:	69fa      	ldr	r2, [r7, #28]
 800610a:	440a      	add	r2, r1
 800610c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006110:	0cdb      	lsrs	r3, r3, #19
 8006112:	04db      	lsls	r3, r3, #19
 8006114:	6113      	str	r3, [r2, #16]
 8006116:	e097      	b.n	8006248 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	0151      	lsls	r1, r2, #5
 800612a:	69fa      	ldr	r2, [r7, #28]
 800612c:	440a      	add	r2, r1
 800612e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006132:	0cdb      	lsrs	r3, r3, #19
 8006134:	04db      	lsls	r3, r3, #19
 8006136:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006138:	69bb      	ldr	r3, [r7, #24]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	69ba      	ldr	r2, [r7, #24]
 8006148:	0151      	lsls	r1, r2, #5
 800614a:	69fa      	ldr	r2, [r7, #28]
 800614c:	440a      	add	r2, r1
 800614e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006152:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006156:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800615a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d11a      	bne.n	8006198 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	691a      	ldr	r2, [r3, #16]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	429a      	cmp	r2, r3
 800616c:	d903      	bls.n	8006176 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	0151      	lsls	r1, r2, #5
 8006188:	69fa      	ldr	r2, [r7, #28]
 800618a:	440a      	add	r2, r1
 800618c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006190:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006194:	6113      	str	r3, [r2, #16]
 8006196:	e044      	b.n	8006222 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	691a      	ldr	r2, [r3, #16]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	4413      	add	r3, r2
 80061a2:	1e5a      	subs	r2, r3, #1
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ac:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	8afb      	ldrh	r3, [r7, #22]
 80061be:	04d9      	lsls	r1, r3, #19
 80061c0:	4ba4      	ldr	r3, [pc, #656]	@ (8006454 <USB_EPStartXfer+0x3cc>)
 80061c2:	400b      	ands	r3, r1
 80061c4:	69b9      	ldr	r1, [r7, #24]
 80061c6:	0148      	lsls	r0, r1, #5
 80061c8:	69f9      	ldr	r1, [r7, #28]
 80061ca:	4401      	add	r1, r0
 80061cc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80061d0:	4313      	orrs	r3, r2
 80061d2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	791b      	ldrb	r3, [r3, #4]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d122      	bne.n	8006222 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	015a      	lsls	r2, r3, #5
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	4413      	add	r3, r2
 80061e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	0151      	lsls	r1, r2, #5
 80061ee:	69fa      	ldr	r2, [r7, #28]
 80061f0:	440a      	add	r2, r1
 80061f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061f6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80061fa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006208:	691a      	ldr	r2, [r3, #16]
 800620a:	8afb      	ldrh	r3, [r7, #22]
 800620c:	075b      	lsls	r3, r3, #29
 800620e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006212:	69b9      	ldr	r1, [r7, #24]
 8006214:	0148      	lsls	r0, r1, #5
 8006216:	69f9      	ldr	r1, [r7, #28]
 8006218:	4401      	add	r1, r0
 800621a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800621e:	4313      	orrs	r3, r2
 8006220:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800622e:	691a      	ldr	r2, [r3, #16]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006238:	69b9      	ldr	r1, [r7, #24]
 800623a:	0148      	lsls	r0, r1, #5
 800623c:	69f9      	ldr	r1, [r7, #28]
 800623e:	4401      	add	r1, r0
 8006240:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006244:	4313      	orrs	r3, r2
 8006246:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006248:	79fb      	ldrb	r3, [r7, #7]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d14b      	bne.n	80062e6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d009      	beq.n	800626a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006262:	461a      	mov	r2, r3
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	791b      	ldrb	r3, [r3, #4]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d128      	bne.n	80062c4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800627e:	2b00      	cmp	r3, #0
 8006280:	d110      	bne.n	80062a4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	015a      	lsls	r2, r3, #5
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	4413      	add	r3, r2
 800628a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	0151      	lsls	r1, r2, #5
 8006294:	69fa      	ldr	r2, [r7, #28]
 8006296:	440a      	add	r2, r1
 8006298:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800629c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062a0:	6013      	str	r3, [r2, #0]
 80062a2:	e00f      	b.n	80062c4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69ba      	ldr	r2, [r7, #24]
 80062b4:	0151      	lsls	r1, r2, #5
 80062b6:	69fa      	ldr	r2, [r7, #28]
 80062b8:	440a      	add	r2, r1
 80062ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062c2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	0151      	lsls	r1, r2, #5
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	440a      	add	r2, r1
 80062da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062de:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80062e2:	6013      	str	r3, [r2, #0]
 80062e4:	e166      	b.n	80065b4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	0151      	lsls	r1, r2, #5
 80062f8:	69fa      	ldr	r2, [r7, #28]
 80062fa:	440a      	add	r2, r1
 80062fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006300:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006304:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	791b      	ldrb	r3, [r3, #4]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d015      	beq.n	800633a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	2b00      	cmp	r3, #0
 8006314:	f000 814e 	beq.w	80065b4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800631e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	f003 030f 	and.w	r3, r3, #15
 8006328:	2101      	movs	r1, #1
 800632a:	fa01 f303 	lsl.w	r3, r1, r3
 800632e:	69f9      	ldr	r1, [r7, #28]
 8006330:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006334:	4313      	orrs	r3, r2
 8006336:	634b      	str	r3, [r1, #52]	@ 0x34
 8006338:	e13c      	b.n	80065b4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006346:	2b00      	cmp	r3, #0
 8006348:	d110      	bne.n	800636c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	0151      	lsls	r1, r2, #5
 800635c:	69fa      	ldr	r2, [r7, #28]
 800635e:	440a      	add	r2, r1
 8006360:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006364:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	e00f      	b.n	800638c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	440a      	add	r2, r1
 8006382:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006386:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800638a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	68d9      	ldr	r1, [r3, #12]
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	781a      	ldrb	r2, [r3, #0]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	b298      	uxth	r0, r3
 800639a:	79fb      	ldrb	r3, [r7, #7]
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	4603      	mov	r3, r0
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f9b9 	bl	8006718 <USB_WritePacket>
 80063a6:	e105      	b.n	80065b4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	69ba      	ldr	r2, [r7, #24]
 80063b8:	0151      	lsls	r1, r2, #5
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	440a      	add	r2, r1
 80063be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063c2:	0cdb      	lsrs	r3, r3, #19
 80063c4:	04db      	lsls	r3, r3, #19
 80063c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	0151      	lsls	r1, r2, #5
 80063da:	69fa      	ldr	r2, [r7, #28]
 80063dc:	440a      	add	r2, r1
 80063de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063e2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80063e6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80063ea:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d132      	bne.n	8006458 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006416:	691a      	ldr	r2, [r3, #16]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006420:	69b9      	ldr	r1, [r7, #24]
 8006422:	0148      	lsls	r0, r1, #5
 8006424:	69f9      	ldr	r1, [r7, #28]
 8006426:	4401      	add	r1, r0
 8006428:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800642c:	4313      	orrs	r3, r2
 800642e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	0151      	lsls	r1, r2, #5
 8006442:	69fa      	ldr	r2, [r7, #28]
 8006444:	440a      	add	r2, r1
 8006446:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800644a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800644e:	6113      	str	r3, [r2, #16]
 8006450:	e062      	b.n	8006518 <USB_EPStartXfer+0x490>
 8006452:	bf00      	nop
 8006454:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d123      	bne.n	80064a8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	015a      	lsls	r2, r3, #5
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	4413      	add	r3, r2
 8006468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800646c:	691a      	ldr	r2, [r3, #16]
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006476:	69b9      	ldr	r1, [r7, #24]
 8006478:	0148      	lsls	r0, r1, #5
 800647a:	69f9      	ldr	r1, [r7, #28]
 800647c:	4401      	add	r1, r0
 800647e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006482:	4313      	orrs	r3, r2
 8006484:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	0151      	lsls	r1, r2, #5
 8006498:	69fa      	ldr	r2, [r7, #28]
 800649a:	440a      	add	r2, r1
 800649c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064a4:	6113      	str	r3, [r2, #16]
 80064a6:	e037      	b.n	8006518 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	691a      	ldr	r2, [r3, #16]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	4413      	add	r3, r2
 80064b2:	1e5a      	subs	r2, r3, #1
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064bc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	8afa      	ldrh	r2, [r7, #22]
 80064c4:	fb03 f202 	mul.w	r2, r3, r2
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	015a      	lsls	r2, r3, #5
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	4413      	add	r3, r2
 80064d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d8:	691a      	ldr	r2, [r3, #16]
 80064da:	8afb      	ldrh	r3, [r7, #22]
 80064dc:	04d9      	lsls	r1, r3, #19
 80064de:	4b38      	ldr	r3, [pc, #224]	@ (80065c0 <USB_EPStartXfer+0x538>)
 80064e0:	400b      	ands	r3, r1
 80064e2:	69b9      	ldr	r1, [r7, #24]
 80064e4:	0148      	lsls	r0, r1, #5
 80064e6:	69f9      	ldr	r1, [r7, #28]
 80064e8:	4401      	add	r1, r0
 80064ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80064ee:	4313      	orrs	r3, r2
 80064f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006508:	69b9      	ldr	r1, [r7, #24]
 800650a:	0148      	lsls	r0, r1, #5
 800650c:	69f9      	ldr	r1, [r7, #28]
 800650e:	4401      	add	r1, r0
 8006510:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006514:	4313      	orrs	r3, r2
 8006516:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006518:	79fb      	ldrb	r3, [r7, #7]
 800651a:	2b01      	cmp	r3, #1
 800651c:	d10d      	bne.n	800653a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d009      	beq.n	800653a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	68d9      	ldr	r1, [r3, #12]
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	015a      	lsls	r2, r3, #5
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	4413      	add	r3, r2
 8006532:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006536:	460a      	mov	r2, r1
 8006538:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	791b      	ldrb	r3, [r3, #4]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d128      	bne.n	8006594 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800654e:	2b00      	cmp	r3, #0
 8006550:	d110      	bne.n	8006574 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	4413      	add	r3, r2
 800655a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	0151      	lsls	r1, r2, #5
 8006564:	69fa      	ldr	r2, [r7, #28]
 8006566:	440a      	add	r2, r1
 8006568:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800656c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	e00f      	b.n	8006594 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	0151      	lsls	r1, r2, #5
 8006586:	69fa      	ldr	r2, [r7, #28]
 8006588:	440a      	add	r2, r1
 800658a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800658e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006592:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80065ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80065b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3720      	adds	r7, #32
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	1ff80000 	.word	0x1ff80000

080065c4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	785b      	ldrb	r3, [r3, #1]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d14a      	bne.n	8006678 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065fa:	f040 8086 	bne.w	800670a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	7812      	ldrb	r2, [r2, #0]
 8006612:	0151      	lsls	r1, r2, #5
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	440a      	add	r2, r1
 8006618:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800661c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006620:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	4413      	add	r3, r2
 800662c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	7812      	ldrb	r2, [r2, #0]
 8006636:	0151      	lsls	r1, r2, #5
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	440a      	add	r2, r1
 800663c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006640:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006644:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	3301      	adds	r3, #1
 800664a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006652:	4293      	cmp	r3, r2
 8006654:	d902      	bls.n	800665c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	75fb      	strb	r3, [r7, #23]
          break;
 800665a:	e056      	b.n	800670a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006670:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006674:	d0e7      	beq.n	8006646 <USB_EPStopXfer+0x82>
 8006676:	e048      	b.n	800670a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	015a      	lsls	r2, r3, #5
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	4413      	add	r3, r2
 8006682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800668c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006690:	d13b      	bne.n	800670a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	7812      	ldrb	r2, [r2, #0]
 80066a6:	0151      	lsls	r1, r2, #5
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	440a      	add	r2, r1
 80066ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	7812      	ldrb	r2, [r2, #0]
 80066ca:	0151      	lsls	r1, r2, #5
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	440a      	add	r2, r1
 80066d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80066d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3301      	adds	r3, #1
 80066de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d902      	bls.n	80066f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	75fb      	strb	r3, [r7, #23]
          break;
 80066ee:	e00c      	b.n	800670a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006704:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006708:	d0e7      	beq.n	80066da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800670a:	7dfb      	ldrb	r3, [r7, #23]
}
 800670c:	4618      	mov	r0, r3
 800670e:	371c      	adds	r7, #28
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006718:	b480      	push	{r7}
 800671a:	b089      	sub	sp, #36	@ 0x24
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	4611      	mov	r1, r2
 8006724:	461a      	mov	r2, r3
 8006726:	460b      	mov	r3, r1
 8006728:	71fb      	strb	r3, [r7, #7]
 800672a:	4613      	mov	r3, r2
 800672c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006736:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800673a:	2b00      	cmp	r3, #0
 800673c:	d123      	bne.n	8006786 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800673e:	88bb      	ldrh	r3, [r7, #4]
 8006740:	3303      	adds	r3, #3
 8006742:	089b      	lsrs	r3, r3, #2
 8006744:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006746:	2300      	movs	r3, #0
 8006748:	61bb      	str	r3, [r7, #24]
 800674a:	e018      	b.n	800677e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800674c:	79fb      	ldrb	r3, [r7, #7]
 800674e:	031a      	lsls	r2, r3, #12
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	4413      	add	r3, r2
 8006754:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006758:	461a      	mov	r2, r3
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	3301      	adds	r3, #1
 8006764:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	3301      	adds	r3, #1
 800676a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	3301      	adds	r3, #1
 8006770:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	3301      	adds	r3, #1
 8006776:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	3301      	adds	r3, #1
 800677c:	61bb      	str	r3, [r7, #24]
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	429a      	cmp	r2, r3
 8006784:	d3e2      	bcc.n	800674c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3724      	adds	r7, #36	@ 0x24
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006794:	b480      	push	{r7}
 8006796:	b08b      	sub	sp, #44	@ 0x2c
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	4613      	mov	r3, r2
 80067a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80067aa:	88fb      	ldrh	r3, [r7, #6]
 80067ac:	089b      	lsrs	r3, r3, #2
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80067b2:	88fb      	ldrh	r3, [r7, #6]
 80067b4:	f003 0303 	and.w	r3, r3, #3
 80067b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80067ba:	2300      	movs	r3, #0
 80067bc:	623b      	str	r3, [r7, #32]
 80067be:	e014      	b.n	80067ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80067cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ce:	3301      	adds	r3, #1
 80067d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d4:	3301      	adds	r3, #1
 80067d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067da:	3301      	adds	r3, #1
 80067dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	3301      	adds	r3, #1
 80067e2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	3301      	adds	r3, #1
 80067e8:	623b      	str	r3, [r7, #32]
 80067ea:	6a3a      	ldr	r2, [r7, #32]
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d3e6      	bcc.n	80067c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80067f2:	8bfb      	ldrh	r3, [r7, #30]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01e      	beq.n	8006836 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006802:	461a      	mov	r2, r3
 8006804:	f107 0310 	add.w	r3, r7, #16
 8006808:	6812      	ldr	r2, [r2, #0]
 800680a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	6a3b      	ldr	r3, [r7, #32]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	00db      	lsls	r3, r3, #3
 8006814:	fa22 f303 	lsr.w	r3, r2, r3
 8006818:	b2da      	uxtb	r2, r3
 800681a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681c:	701a      	strb	r2, [r3, #0]
      i++;
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	3301      	adds	r3, #1
 8006822:	623b      	str	r3, [r7, #32]
      pDest++;
 8006824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006826:	3301      	adds	r3, #1
 8006828:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800682a:	8bfb      	ldrh	r3, [r7, #30]
 800682c:	3b01      	subs	r3, #1
 800682e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006830:	8bfb      	ldrh	r3, [r7, #30]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1ea      	bne.n	800680c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006838:	4618      	mov	r0, r3
 800683a:	372c      	adds	r7, #44	@ 0x2c
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	785b      	ldrb	r3, [r3, #1]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d12c      	bne.n	80068ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	db12      	blt.n	8006898 <USB_EPSetStall+0x54>
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00f      	beq.n	8006898 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	015a      	lsls	r2, r3, #5
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4413      	add	r3, r2
 8006880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	0151      	lsls	r1, r2, #5
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	440a      	add	r2, r1
 800688e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006892:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006896:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68ba      	ldr	r2, [r7, #8]
 80068a8:	0151      	lsls	r1, r2, #5
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	440a      	add	r2, r1
 80068ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	e02b      	b.n	8006912 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	db12      	blt.n	80068f2 <USB_EPSetStall+0xae>
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00f      	beq.n	80068f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	0151      	lsls	r1, r2, #5
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	440a      	add	r2, r1
 80068e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80068f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	0151      	lsls	r1, r2, #5
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	440a      	add	r2, r1
 8006908:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800690c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006910:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3714      	adds	r7, #20
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	785b      	ldrb	r3, [r3, #1]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d128      	bne.n	800698e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4413      	add	r3, r2
 8006944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	0151      	lsls	r1, r2, #5
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	440a      	add	r2, r1
 8006952:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006956:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800695a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	791b      	ldrb	r3, [r3, #4]
 8006960:	2b03      	cmp	r3, #3
 8006962:	d003      	beq.n	800696c <USB_EPClearStall+0x4c>
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	791b      	ldrb	r3, [r3, #4]
 8006968:	2b02      	cmp	r3, #2
 800696a:	d138      	bne.n	80069de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	0151      	lsls	r1, r2, #5
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	440a      	add	r2, r1
 8006982:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006986:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	e027      	b.n	80069de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4413      	add	r3, r2
 8006996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68ba      	ldr	r2, [r7, #8]
 800699e:	0151      	lsls	r1, r2, #5
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	440a      	add	r2, r1
 80069a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	791b      	ldrb	r3, [r3, #4]
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d003      	beq.n	80069be <USB_EPClearStall+0x9e>
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	791b      	ldrb	r3, [r3, #4]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d10f      	bne.n	80069de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	0151      	lsls	r1, r2, #5
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	440a      	add	r2, r1
 80069d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3714      	adds	r7, #20
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	460b      	mov	r3, r1
 80069f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a0a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006a0e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	011b      	lsls	r3, r3, #4
 8006a1c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006a20:	68f9      	ldr	r1, [r7, #12]
 8006a22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a26:	4313      	orrs	r3, r2
 8006a28:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a52:	f023 0303 	bic.w	r3, r3, #3
 8006a56:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a66:	f023 0302 	bic.w	r3, r3, #2
 8006a6a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b085      	sub	sp, #20
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a94:	f023 0303 	bic.w	r3, r3, #3
 8006a98:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006aa8:	f043 0302 	orr.w	r3, r3, #2
 8006aac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3714      	adds	r7, #20
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b085      	sub	sp, #20
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	4013      	ands	r3, r2
 8006b04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	0c1b      	lsrs	r3, r3, #16
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b085      	sub	sp, #20
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	4013      	ands	r3, r2
 8006b38:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	b29b      	uxth	r3, r3
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b085      	sub	sp, #20
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	460b      	mov	r3, r1
 8006b54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b5a:	78fb      	ldrb	r3, [r7, #3]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	4013      	ands	r3, r2
 8006b76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b78:	68bb      	ldr	r3, [r7, #8]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3714      	adds	r7, #20
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b86:	b480      	push	{r7}
 8006b88:	b087      	sub	sp, #28
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	460b      	mov	r3, r1
 8006b90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ba6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ba8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006baa:	78fb      	ldrb	r3, [r7, #3]
 8006bac:	f003 030f 	and.w	r3, r3, #15
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bb6:	01db      	lsls	r3, r3, #7
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006bc0:	78fb      	ldrb	r3, [r7, #3]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bd4:	68bb      	ldr	r3, [r7, #8]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b083      	sub	sp, #12
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	f003 0301 	and.w	r3, r3, #1
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr

08006bfe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006bfe:	b480      	push	{r7}
 8006c00:	b085      	sub	sp, #20
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c18:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006c1c:	f023 0307 	bic.w	r3, r3, #7
 8006c20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr

08006c44 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	607a      	str	r2, [r7, #4]
 8006c50:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	333c      	adds	r3, #60	@ 0x3c
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	4a26      	ldr	r2, [pc, #152]	@ (8006cfc <USB_EP0_OutStart+0xb8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d90a      	bls.n	8006c7e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c74:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c78:	d101      	bne.n	8006c7e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e037      	b.n	8006cee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c84:	461a      	mov	r2, r3
 8006c86:	2300      	movs	r3, #0
 8006c88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cac:	f043 0318 	orr.w	r3, r3, #24
 8006cb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cc0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006cc4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006cc6:	7afb      	ldrb	r3, [r7, #11]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d10f      	bne.n	8006cec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ce6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006cea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	4f54300a 	.word	0x4f54300a

08006d00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d18:	d901      	bls.n	8006d1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e022      	b.n	8006d64 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	daf2      	bge.n	8006d0c <USB_CoreReset+0xc>

  count = 10U;
 8006d26:	230a      	movs	r3, #10
 8006d28:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006d2a:	e002      	b.n	8006d32 <USB_CoreReset+0x32>
  {
    count--;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1f9      	bne.n	8006d2c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	f043 0201 	orr.w	r2, r3, #1
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3301      	adds	r3, #1
 8006d48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d50:	d901      	bls.n	8006d56 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e006      	b.n	8006d64 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d0f0      	beq.n	8006d44 <USB_CoreReset+0x44>

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d7c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006d80:	f002 fd1e 	bl	80097c0 <USBD_static_malloc>
 8006d84:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d109      	bne.n	8006da0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	32b0      	adds	r2, #176	@ 0xb0
 8006d96:	2100      	movs	r1, #0
 8006d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	e0d4      	b.n	8006f4a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006da0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006da4:	2100      	movs	r1, #0
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f002 fd4e 	bl	8009848 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	32b0      	adds	r2, #176	@ 0xb0
 8006db6:	68f9      	ldr	r1, [r7, #12]
 8006db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	32b0      	adds	r2, #176	@ 0xb0
 8006dc6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	7c1b      	ldrb	r3, [r3, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d138      	bne.n	8006e4a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006dd8:	4b5e      	ldr	r3, [pc, #376]	@ (8006f54 <USBD_CDC_Init+0x1e4>)
 8006dda:	7819      	ldrb	r1, [r3, #0]
 8006ddc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006de0:	2202      	movs	r2, #2
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f002 fbc9 	bl	800957a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006de8:	4b5a      	ldr	r3, [pc, #360]	@ (8006f54 <USBD_CDC_Init+0x1e4>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	f003 020f 	and.w	r2, r3, #15
 8006df0:	6879      	ldr	r1, [r7, #4]
 8006df2:	4613      	mov	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	440b      	add	r3, r1
 8006dfc:	3323      	adds	r3, #35	@ 0x23
 8006dfe:	2201      	movs	r2, #1
 8006e00:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e02:	4b55      	ldr	r3, [pc, #340]	@ (8006f58 <USBD_CDC_Init+0x1e8>)
 8006e04:	7819      	ldrb	r1, [r3, #0]
 8006e06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f002 fbb4 	bl	800957a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e12:	4b51      	ldr	r3, [pc, #324]	@ (8006f58 <USBD_CDC_Init+0x1e8>)
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	f003 020f 	and.w	r2, r3, #15
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	440b      	add	r3, r1
 8006e26:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006e2e:	4b4b      	ldr	r3, [pc, #300]	@ (8006f5c <USBD_CDC_Init+0x1ec>)
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	f003 020f 	and.w	r2, r3, #15
 8006e36:	6879      	ldr	r1, [r7, #4]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	440b      	add	r3, r1
 8006e42:	331c      	adds	r3, #28
 8006e44:	2210      	movs	r2, #16
 8006e46:	601a      	str	r2, [r3, #0]
 8006e48:	e035      	b.n	8006eb6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006e4a:	4b42      	ldr	r3, [pc, #264]	@ (8006f54 <USBD_CDC_Init+0x1e4>)
 8006e4c:	7819      	ldrb	r1, [r3, #0]
 8006e4e:	2340      	movs	r3, #64	@ 0x40
 8006e50:	2202      	movs	r2, #2
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f002 fb91 	bl	800957a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006e58:	4b3e      	ldr	r3, [pc, #248]	@ (8006f54 <USBD_CDC_Init+0x1e4>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	f003 020f 	and.w	r2, r3, #15
 8006e60:	6879      	ldr	r1, [r7, #4]
 8006e62:	4613      	mov	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	440b      	add	r3, r1
 8006e6c:	3323      	adds	r3, #35	@ 0x23
 8006e6e:	2201      	movs	r2, #1
 8006e70:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006e72:	4b39      	ldr	r3, [pc, #228]	@ (8006f58 <USBD_CDC_Init+0x1e8>)
 8006e74:	7819      	ldrb	r1, [r3, #0]
 8006e76:	2340      	movs	r3, #64	@ 0x40
 8006e78:	2202      	movs	r2, #2
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f002 fb7d 	bl	800957a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006e80:	4b35      	ldr	r3, [pc, #212]	@ (8006f58 <USBD_CDC_Init+0x1e8>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	f003 020f 	and.w	r2, r3, #15
 8006e88:	6879      	ldr	r1, [r7, #4]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	009b      	lsls	r3, r3, #2
 8006e8e:	4413      	add	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	440b      	add	r3, r1
 8006e94:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006e98:	2201      	movs	r2, #1
 8006e9a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e9c:	4b2f      	ldr	r3, [pc, #188]	@ (8006f5c <USBD_CDC_Init+0x1ec>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	f003 020f 	and.w	r2, r3, #15
 8006ea4:	6879      	ldr	r1, [r7, #4]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	440b      	add	r3, r1
 8006eb0:	331c      	adds	r3, #28
 8006eb2:	2210      	movs	r2, #16
 8006eb4:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006eb6:	4b29      	ldr	r3, [pc, #164]	@ (8006f5c <USBD_CDC_Init+0x1ec>)
 8006eb8:	7819      	ldrb	r1, [r3, #0]
 8006eba:	2308      	movs	r3, #8
 8006ebc:	2203      	movs	r2, #3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f002 fb5b 	bl	800957a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006ec4:	4b25      	ldr	r3, [pc, #148]	@ (8006f5c <USBD_CDC_Init+0x1ec>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	f003 020f 	and.w	r2, r3, #15
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	440b      	add	r3, r1
 8006ed8:	3323      	adds	r3, #35	@ 0x23
 8006eda:	2201      	movs	r2, #1
 8006edc:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	33b0      	adds	r3, #176	@ 0xb0
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d101      	bne.n	8006f18 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006f14:	2302      	movs	r3, #2
 8006f16:	e018      	b.n	8006f4a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	7c1b      	ldrb	r3, [r3, #16]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10a      	bne.n	8006f36 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f20:	4b0d      	ldr	r3, [pc, #52]	@ (8006f58 <USBD_CDC_Init+0x1e8>)
 8006f22:	7819      	ldrb	r1, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f002 fc12 	bl	8009758 <USBD_LL_PrepareReceive>
 8006f34:	e008      	b.n	8006f48 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006f36:	4b08      	ldr	r3, [pc, #32]	@ (8006f58 <USBD_CDC_Init+0x1e8>)
 8006f38:	7819      	ldrb	r1, [r3, #0]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006f40:	2340      	movs	r3, #64	@ 0x40
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f002 fc08 	bl	8009758 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	200000bf 	.word	0x200000bf
 8006f58:	200000c0 	.word	0x200000c0
 8006f5c:	200000c1 	.word	0x200000c1

08006f60 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	460b      	mov	r3, r1
 8006f6a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006f6c:	4b3a      	ldr	r3, [pc, #232]	@ (8007058 <USBD_CDC_DeInit+0xf8>)
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	4619      	mov	r1, r3
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f002 fb27 	bl	80095c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006f78:	4b37      	ldr	r3, [pc, #220]	@ (8007058 <USBD_CDC_DeInit+0xf8>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	f003 020f 	and.w	r2, r3, #15
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	4613      	mov	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	440b      	add	r3, r1
 8006f8c:	3323      	adds	r3, #35	@ 0x23
 8006f8e:	2200      	movs	r2, #0
 8006f90:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006f92:	4b32      	ldr	r3, [pc, #200]	@ (800705c <USBD_CDC_DeInit+0xfc>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	4619      	mov	r1, r3
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f002 fb14 	bl	80095c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006f9e:	4b2f      	ldr	r3, [pc, #188]	@ (800705c <USBD_CDC_DeInit+0xfc>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	f003 020f 	and.w	r2, r3, #15
 8006fa6:	6879      	ldr	r1, [r7, #4]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	440b      	add	r3, r1
 8006fb2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006fba:	4b29      	ldr	r3, [pc, #164]	@ (8007060 <USBD_CDC_DeInit+0x100>)
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f002 fb00 	bl	80095c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006fc6:	4b26      	ldr	r3, [pc, #152]	@ (8007060 <USBD_CDC_DeInit+0x100>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	f003 020f 	and.w	r2, r3, #15
 8006fce:	6879      	ldr	r1, [r7, #4]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	440b      	add	r3, r1
 8006fda:	3323      	adds	r3, #35	@ 0x23
 8006fdc:	2200      	movs	r2, #0
 8006fde:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8007060 <USBD_CDC_DeInit+0x100>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	f003 020f 	and.w	r2, r3, #15
 8006fe8:	6879      	ldr	r1, [r7, #4]
 8006fea:	4613      	mov	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	440b      	add	r3, r1
 8006ff4:	331c      	adds	r3, #28
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	32b0      	adds	r2, #176	@ 0xb0
 8007004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d01f      	beq.n	800704c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	33b0      	adds	r3, #176	@ 0xb0
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	32b0      	adds	r2, #176	@ 0xb0
 800702a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702e:	4618      	mov	r0, r3
 8007030:	f002 fbd4 	bl	80097dc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	32b0      	adds	r2, #176	@ 0xb0
 800703e:	2100      	movs	r1, #0
 8007040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	200000bf 	.word	0x200000bf
 800705c:	200000c0 	.word	0x200000c0
 8007060:	200000c1 	.word	0x200000c1

08007064 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	32b0      	adds	r2, #176	@ 0xb0
 8007078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007082:	2300      	movs	r3, #0
 8007084:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d101      	bne.n	8007094 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007090:	2303      	movs	r3, #3
 8007092:	e0bf      	b.n	8007214 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800709c:	2b00      	cmp	r3, #0
 800709e:	d050      	beq.n	8007142 <USBD_CDC_Setup+0xde>
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	f040 80af 	bne.w	8007204 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	88db      	ldrh	r3, [r3, #6]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d03a      	beq.n	8007124 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	b25b      	sxtb	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	da1b      	bge.n	80070f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	33b0      	adds	r3, #176	@ 0xb0
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80070ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	88d2      	ldrh	r2, [r2, #6]
 80070d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	88db      	ldrh	r3, [r3, #6]
 80070da:	2b07      	cmp	r3, #7
 80070dc:	bf28      	it	cs
 80070de:	2307      	movcs	r3, #7
 80070e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	89fa      	ldrh	r2, [r7, #14]
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f001 fda9 	bl	8008c40 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80070ee:	e090      	b.n	8007212 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	785a      	ldrb	r2, [r3, #1]
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	88db      	ldrh	r3, [r3, #6]
 80070fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8007100:	d803      	bhi.n	800710a <USBD_CDC_Setup+0xa6>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	88db      	ldrh	r3, [r3, #6]
 8007106:	b2da      	uxtb	r2, r3
 8007108:	e000      	b.n	800710c <USBD_CDC_Setup+0xa8>
 800710a:	2240      	movs	r2, #64	@ 0x40
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007112:	6939      	ldr	r1, [r7, #16]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800711a:	461a      	mov	r2, r3
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f001 fdbe 	bl	8008c9e <USBD_CtlPrepareRx>
      break;
 8007122:	e076      	b.n	8007212 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	33b0      	adds	r3, #176	@ 0xb0
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4413      	add	r3, r2
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	7850      	ldrb	r0, [r2, #1]
 800713a:	2200      	movs	r2, #0
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	4798      	blx	r3
      break;
 8007140:	e067      	b.n	8007212 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	785b      	ldrb	r3, [r3, #1]
 8007146:	2b0b      	cmp	r3, #11
 8007148:	d851      	bhi.n	80071ee <USBD_CDC_Setup+0x18a>
 800714a:	a201      	add	r2, pc, #4	@ (adr r2, 8007150 <USBD_CDC_Setup+0xec>)
 800714c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007150:	08007181 	.word	0x08007181
 8007154:	080071fd 	.word	0x080071fd
 8007158:	080071ef 	.word	0x080071ef
 800715c:	080071ef 	.word	0x080071ef
 8007160:	080071ef 	.word	0x080071ef
 8007164:	080071ef 	.word	0x080071ef
 8007168:	080071ef 	.word	0x080071ef
 800716c:	080071ef 	.word	0x080071ef
 8007170:	080071ef 	.word	0x080071ef
 8007174:	080071ef 	.word	0x080071ef
 8007178:	080071ab 	.word	0x080071ab
 800717c:	080071d5 	.word	0x080071d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b03      	cmp	r3, #3
 800718a:	d107      	bne.n	800719c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800718c:	f107 030a 	add.w	r3, r7, #10
 8007190:	2202      	movs	r2, #2
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 fd53 	bl	8008c40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800719a:	e032      	b.n	8007202 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800719c:	6839      	ldr	r1, [r7, #0]
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 fcd1 	bl	8008b46 <USBD_CtlError>
            ret = USBD_FAIL;
 80071a4:	2303      	movs	r3, #3
 80071a6:	75fb      	strb	r3, [r7, #23]
          break;
 80071a8:	e02b      	b.n	8007202 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b03      	cmp	r3, #3
 80071b4:	d107      	bne.n	80071c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80071b6:	f107 030d 	add.w	r3, r7, #13
 80071ba:	2201      	movs	r2, #1
 80071bc:	4619      	mov	r1, r3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f001 fd3e 	bl	8008c40 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80071c4:	e01d      	b.n	8007202 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80071c6:	6839      	ldr	r1, [r7, #0]
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 fcbc 	bl	8008b46 <USBD_CtlError>
            ret = USBD_FAIL;
 80071ce:	2303      	movs	r3, #3
 80071d0:	75fb      	strb	r3, [r7, #23]
          break;
 80071d2:	e016      	b.n	8007202 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d00f      	beq.n	8007200 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 fcaf 	bl	8008b46 <USBD_CtlError>
            ret = USBD_FAIL;
 80071e8:	2303      	movs	r3, #3
 80071ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80071ec:	e008      	b.n	8007200 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80071ee:	6839      	ldr	r1, [r7, #0]
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f001 fca8 	bl	8008b46 <USBD_CtlError>
          ret = USBD_FAIL;
 80071f6:	2303      	movs	r3, #3
 80071f8:	75fb      	strb	r3, [r7, #23]
          break;
 80071fa:	e002      	b.n	8007202 <USBD_CDC_Setup+0x19e>
          break;
 80071fc:	bf00      	nop
 80071fe:	e008      	b.n	8007212 <USBD_CDC_Setup+0x1ae>
          break;
 8007200:	bf00      	nop
      }
      break;
 8007202:	e006      	b.n	8007212 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f001 fc9d 	bl	8008b46 <USBD_CtlError>
      ret = USBD_FAIL;
 800720c:	2303      	movs	r3, #3
 800720e:	75fb      	strb	r3, [r7, #23]
      break;
 8007210:	bf00      	nop
  }

  return (uint8_t)ret;
 8007212:	7dfb      	ldrb	r3, [r7, #23]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800722e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	32b0      	adds	r2, #176	@ 0xb0
 800723a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007242:	2303      	movs	r3, #3
 8007244:	e065      	b.n	8007312 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	32b0      	adds	r2, #176	@ 0xb0
 8007250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007254:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007256:	78fb      	ldrb	r3, [r7, #3]
 8007258:	f003 020f 	and.w	r2, r3, #15
 800725c:	6879      	ldr	r1, [r7, #4]
 800725e:	4613      	mov	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	440b      	add	r3, r1
 8007268:	3314      	adds	r3, #20
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d02f      	beq.n	80072d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	f003 020f 	and.w	r2, r3, #15
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	4613      	mov	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4413      	add	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	440b      	add	r3, r1
 8007282:	3314      	adds	r3, #20
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	78fb      	ldrb	r3, [r7, #3]
 8007288:	f003 010f 	and.w	r1, r3, #15
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	460b      	mov	r3, r1
 8007290:	00db      	lsls	r3, r3, #3
 8007292:	440b      	add	r3, r1
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4403      	add	r3, r0
 8007298:	331c      	adds	r3, #28
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	fbb2 f1f3 	udiv	r1, r2, r3
 80072a0:	fb01 f303 	mul.w	r3, r1, r3
 80072a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d112      	bne.n	80072d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80072aa:	78fb      	ldrb	r3, [r7, #3]
 80072ac:	f003 020f 	and.w	r2, r3, #15
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	4613      	mov	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	440b      	add	r3, r1
 80072bc:	3314      	adds	r3, #20
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80072c2:	78f9      	ldrb	r1, [r7, #3]
 80072c4:	2300      	movs	r3, #0
 80072c6:	2200      	movs	r2, #0
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f002 fa24 	bl	8009716 <USBD_LL_Transmit>
 80072ce:	e01f      	b.n	8007310 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	33b0      	adds	r3, #176	@ 0xb0
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4413      	add	r3, r2
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d010      	beq.n	8007310 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	33b0      	adds	r3, #176	@ 0xb0
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800730c:	78fa      	ldrb	r2, [r7, #3]
 800730e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	460b      	mov	r3, r1
 8007324:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	32b0      	adds	r2, #176	@ 0xb0
 8007330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007334:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	32b0      	adds	r2, #176	@ 0xb0
 8007340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007348:	2303      	movs	r3, #3
 800734a:	e01a      	b.n	8007382 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800734c:	78fb      	ldrb	r3, [r7, #3]
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f002 fa22 	bl	800979a <USBD_LL_GetRxDataSize>
 8007356:	4602      	mov	r2, r0
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	33b0      	adds	r3, #176	@ 0xb0
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800737c:	4611      	mov	r1, r2
 800737e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	32b0      	adds	r2, #176	@ 0xb0
 800739c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80073a8:	2303      	movs	r3, #3
 80073aa:	e024      	b.n	80073f6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	33b0      	adds	r3, #176	@ 0xb0
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d019      	beq.n	80073f4 <USBD_CDC_EP0_RxReady+0x6a>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80073c6:	2bff      	cmp	r3, #255	@ 0xff
 80073c8:	d014      	beq.n	80073f4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	33b0      	adds	r3, #176	@ 0xb0
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80073e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80073ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	22ff      	movs	r2, #255	@ 0xff
 80073f0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007408:	2182      	movs	r1, #130	@ 0x82
 800740a:	4818      	ldr	r0, [pc, #96]	@ (800746c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800740c:	f000 fd62 	bl	8007ed4 <USBD_GetEpDesc>
 8007410:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007412:	2101      	movs	r1, #1
 8007414:	4815      	ldr	r0, [pc, #84]	@ (800746c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007416:	f000 fd5d 	bl	8007ed4 <USBD_GetEpDesc>
 800741a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800741c:	2181      	movs	r1, #129	@ 0x81
 800741e:	4813      	ldr	r0, [pc, #76]	@ (800746c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007420:	f000 fd58 	bl	8007ed4 <USBD_GetEpDesc>
 8007424:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	2210      	movs	r2, #16
 8007430:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d006      	beq.n	8007446 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	2200      	movs	r2, #0
 800743c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007440:	711a      	strb	r2, [r3, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d006      	beq.n	800745a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007454:	711a      	strb	r2, [r3, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2243      	movs	r2, #67	@ 0x43
 800745e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007460:	4b02      	ldr	r3, [pc, #8]	@ (800746c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007462:	4618      	mov	r0, r3
 8007464:	3718      	adds	r7, #24
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	2000007c 	.word	0x2000007c

08007470 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007478:	2182      	movs	r1, #130	@ 0x82
 800747a:	4818      	ldr	r0, [pc, #96]	@ (80074dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800747c:	f000 fd2a 	bl	8007ed4 <USBD_GetEpDesc>
 8007480:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007482:	2101      	movs	r1, #1
 8007484:	4815      	ldr	r0, [pc, #84]	@ (80074dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007486:	f000 fd25 	bl	8007ed4 <USBD_GetEpDesc>
 800748a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800748c:	2181      	movs	r1, #129	@ 0x81
 800748e:	4813      	ldr	r0, [pc, #76]	@ (80074dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007490:	f000 fd20 	bl	8007ed4 <USBD_GetEpDesc>
 8007494:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2210      	movs	r2, #16
 80074a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d006      	beq.n	80074b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	2200      	movs	r2, #0
 80074ac:	711a      	strb	r2, [r3, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f042 0202 	orr.w	r2, r2, #2
 80074b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d006      	beq.n	80074ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	711a      	strb	r2, [r3, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f042 0202 	orr.w	r2, r2, #2
 80074c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2243      	movs	r2, #67	@ 0x43
 80074ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074d0:	4b02      	ldr	r3, [pc, #8]	@ (80074dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	2000007c 	.word	0x2000007c

080074e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074e8:	2182      	movs	r1, #130	@ 0x82
 80074ea:	4818      	ldr	r0, [pc, #96]	@ (800754c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074ec:	f000 fcf2 	bl	8007ed4 <USBD_GetEpDesc>
 80074f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80074f2:	2101      	movs	r1, #1
 80074f4:	4815      	ldr	r0, [pc, #84]	@ (800754c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80074f6:	f000 fced 	bl	8007ed4 <USBD_GetEpDesc>
 80074fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80074fc:	2181      	movs	r1, #129	@ 0x81
 80074fe:	4813      	ldr	r0, [pc, #76]	@ (800754c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007500:	f000 fce8 	bl	8007ed4 <USBD_GetEpDesc>
 8007504:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	2210      	movs	r2, #16
 8007510:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d006      	beq.n	8007526 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	2200      	movs	r2, #0
 800751c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007520:	711a      	strb	r2, [r3, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d006      	beq.n	800753a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007534:	711a      	strb	r2, [r3, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2243      	movs	r2, #67	@ 0x43
 800753e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007540:	4b02      	ldr	r3, [pc, #8]	@ (800754c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	2000007c 	.word	0x2000007c

08007550 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	220a      	movs	r2, #10
 800755c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800755e:	4b03      	ldr	r3, [pc, #12]	@ (800756c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	20000038 	.word	0x20000038

08007570 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007580:	2303      	movs	r3, #3
 8007582:	e009      	b.n	8007598 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	33b0      	adds	r3, #176	@ 0xb0
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	683a      	ldr	r2, [r7, #0]
 8007594:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b087      	sub	sp, #28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	32b0      	adds	r2, #176	@ 0xb0
 80075ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075be:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e008      	b.n	80075dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	371c      	adds	r7, #28
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	32b0      	adds	r2, #176	@ 0xb0
 80075fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007600:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d101      	bne.n	800760c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007608:	2303      	movs	r3, #3
 800760a:	e004      	b.n	8007616 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
	...

08007624 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	32b0      	adds	r2, #176	@ 0xb0
 8007636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800763a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800763c:	2301      	movs	r3, #1
 800763e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007646:	2303      	movs	r3, #3
 8007648:	e025      	b.n	8007696 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007650:	2b00      	cmp	r3, #0
 8007652:	d11f      	bne.n	8007694 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2201      	movs	r2, #1
 8007658:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800765c:	4b10      	ldr	r3, [pc, #64]	@ (80076a0 <USBD_CDC_TransmitPacket+0x7c>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	f003 020f 	and.w	r2, r3, #15
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	4613      	mov	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4403      	add	r3, r0
 8007676:	3314      	adds	r3, #20
 8007678:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800767a:	4b09      	ldr	r3, [pc, #36]	@ (80076a0 <USBD_CDC_TransmitPacket+0x7c>)
 800767c:	7819      	ldrb	r1, [r3, #0]
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f002 f843 	bl	8009716 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007694:	7bfb      	ldrb	r3, [r7, #15]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	200000bf 	.word	0x200000bf

080076a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	32b0      	adds	r2, #176	@ 0xb0
 80076b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	32b0      	adds	r2, #176	@ 0xb0
 80076c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d101      	bne.n	80076d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e018      	b.n	8007704 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	7c1b      	ldrb	r3, [r3, #16]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10a      	bne.n	80076f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076da:	4b0c      	ldr	r3, [pc, #48]	@ (800770c <USBD_CDC_ReceivePacket+0x68>)
 80076dc:	7819      	ldrb	r1, [r3, #0]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80076e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f002 f835 	bl	8009758 <USBD_LL_PrepareReceive>
 80076ee:	e008      	b.n	8007702 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076f0:	4b06      	ldr	r3, [pc, #24]	@ (800770c <USBD_CDC_ReceivePacket+0x68>)
 80076f2:	7819      	ldrb	r1, [r3, #0]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80076fa:	2340      	movs	r3, #64	@ 0x40
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f002 f82b 	bl	8009758 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	200000c0 	.word	0x200000c0

08007710 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b086      	sub	sp, #24
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	4613      	mov	r3, r2
 800771c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007724:	2303      	movs	r3, #3
 8007726:	e01f      	b.n	8007768 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	79fa      	ldrb	r2, [r7, #7]
 800775a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f001 fea5 	bl	80094ac <USBD_LL_Init>
 8007762:	4603      	mov	r3, r0
 8007764:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007766:	7dfb      	ldrb	r3, [r7, #23]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3718      	adds	r7, #24
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007784:	2303      	movs	r3, #3
 8007786:	e025      	b.n	80077d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	32ae      	adds	r2, #174	@ 0xae
 800779a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800779e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00f      	beq.n	80077c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	32ae      	adds	r2, #174	@ 0xae
 80077ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b4:	f107 020e 	add.w	r2, r7, #14
 80077b8:	4610      	mov	r0, r2
 80077ba:	4798      	blx	r3
 80077bc:	4602      	mov	r2, r0
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80077ca:	1c5a      	adds	r2, r3, #1
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 fead 	bl	8009544 <USBD_LL_Start>
 80077ea:	4603      	mov	r3, r0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3708      	adds	r7, #8
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80077fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80077fe:	4618      	mov	r0, r3
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b084      	sub	sp, #16
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	460b      	mov	r3, r1
 8007814:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007816:	2300      	movs	r3, #0
 8007818:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007820:	2b00      	cmp	r3, #0
 8007822:	d009      	beq.n	8007838 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	78fa      	ldrb	r2, [r7, #3]
 800782e:	4611      	mov	r1, r2
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	4798      	blx	r3
 8007834:	4603      	mov	r3, r0
 8007836:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007838:	7bfb      	ldrb	r3, [r7, #15]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	78fa      	ldrb	r2, [r7, #3]
 800785c:	4611      	mov	r1, r2
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	4798      	blx	r3
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007868:	2303      	movs	r3, #3
 800786a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800786c:	7bfb      	ldrb	r3, [r7, #15]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b084      	sub	sp, #16
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	4618      	mov	r0, r3
 800788a:	f001 f922 	bl	8008ad2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800789c:	461a      	mov	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80078aa:	f003 031f 	and.w	r3, r3, #31
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d01a      	beq.n	80078e8 <USBD_LL_SetupStage+0x72>
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d822      	bhi.n	80078fc <USBD_LL_SetupStage+0x86>
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d002      	beq.n	80078c0 <USBD_LL_SetupStage+0x4a>
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d00a      	beq.n	80078d4 <USBD_LL_SetupStage+0x5e>
 80078be:	e01d      	b.n	80078fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fb77 	bl	8007fbc <USBD_StdDevReq>
 80078ce:	4603      	mov	r3, r0
 80078d0:	73fb      	strb	r3, [r7, #15]
      break;
 80078d2:	e020      	b.n	8007916 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fbdf 	bl	80080a0 <USBD_StdItfReq>
 80078e2:	4603      	mov	r3, r0
 80078e4:	73fb      	strb	r3, [r7, #15]
      break;
 80078e6:	e016      	b.n	8007916 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fc41 	bl	8008178 <USBD_StdEPReq>
 80078f6:	4603      	mov	r3, r0
 80078f8:	73fb      	strb	r3, [r7, #15]
      break;
 80078fa:	e00c      	b.n	8007916 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007902:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007906:	b2db      	uxtb	r3, r3
 8007908:	4619      	mov	r1, r3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f001 fe7a 	bl	8009604 <USBD_LL_StallEP>
 8007910:	4603      	mov	r3, r0
 8007912:	73fb      	strb	r3, [r7, #15]
      break;
 8007914:	bf00      	nop
  }

  return ret;
 8007916:	7bfb      	ldrb	r3, [r7, #15]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	460b      	mov	r3, r1
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800792e:	2300      	movs	r3, #0
 8007930:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007932:	7afb      	ldrb	r3, [r7, #11]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d177      	bne.n	8007a28 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800793e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007946:	2b03      	cmp	r3, #3
 8007948:	f040 80a1 	bne.w	8007a8e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	8992      	ldrh	r2, [r2, #12]
 8007954:	4293      	cmp	r3, r2
 8007956:	d91c      	bls.n	8007992 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	8992      	ldrh	r2, [r2, #12]
 8007960:	1a9a      	subs	r2, r3, r2
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	8992      	ldrh	r2, [r2, #12]
 800796e:	441a      	add	r2, r3
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	6919      	ldr	r1, [r3, #16]
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	899b      	ldrh	r3, [r3, #12]
 800797c:	461a      	mov	r2, r3
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	4293      	cmp	r3, r2
 8007984:	bf38      	it	cc
 8007986:	4613      	movcc	r3, r2
 8007988:	461a      	mov	r2, r3
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	f001 f9a8 	bl	8008ce0 <USBD_CtlContinueRx>
 8007990:	e07d      	b.n	8007a8e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007998:	f003 031f 	and.w	r3, r3, #31
 800799c:	2b02      	cmp	r3, #2
 800799e:	d014      	beq.n	80079ca <USBD_LL_DataOutStage+0xaa>
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d81d      	bhi.n	80079e0 <USBD_LL_DataOutStage+0xc0>
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <USBD_LL_DataOutStage+0x8e>
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d003      	beq.n	80079b4 <USBD_LL_DataOutStage+0x94>
 80079ac:	e018      	b.n	80079e0 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80079ae:	2300      	movs	r3, #0
 80079b0:	75bb      	strb	r3, [r7, #22]
            break;
 80079b2:	e018      	b.n	80079e6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80079ba:	b2db      	uxtb	r3, r3
 80079bc:	4619      	mov	r1, r3
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 fa6e 	bl	8007ea0 <USBD_CoreFindIF>
 80079c4:	4603      	mov	r3, r0
 80079c6:	75bb      	strb	r3, [r7, #22]
            break;
 80079c8:	e00d      	b.n	80079e6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	4619      	mov	r1, r3
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 fa70 	bl	8007eba <USBD_CoreFindEP>
 80079da:	4603      	mov	r3, r0
 80079dc:	75bb      	strb	r3, [r7, #22]
            break;
 80079de:	e002      	b.n	80079e6 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80079e0:	2300      	movs	r3, #0
 80079e2:	75bb      	strb	r3, [r7, #22]
            break;
 80079e4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80079e6:	7dbb      	ldrb	r3, [r7, #22]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d119      	bne.n	8007a20 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d113      	bne.n	8007a20 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80079f8:	7dba      	ldrb	r2, [r7, #22]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	32ae      	adds	r2, #174	@ 0xae
 80079fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d00b      	beq.n	8007a20 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007a08:	7dba      	ldrb	r2, [r7, #22]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a10:	7dba      	ldrb	r2, [r7, #22]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	32ae      	adds	r2, #174	@ 0xae
 8007a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f001 f96e 	bl	8008d02 <USBD_CtlSendStatus>
 8007a26:	e032      	b.n	8007a8e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a28:	7afb      	ldrb	r3, [r7, #11]
 8007a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	4619      	mov	r1, r3
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f000 fa41 	bl	8007eba <USBD_CoreFindEP>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a3c:	7dbb      	ldrb	r3, [r7, #22]
 8007a3e:	2bff      	cmp	r3, #255	@ 0xff
 8007a40:	d025      	beq.n	8007a8e <USBD_LL_DataOutStage+0x16e>
 8007a42:	7dbb      	ldrb	r3, [r7, #22]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d122      	bne.n	8007a8e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	d117      	bne.n	8007a84 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007a54:	7dba      	ldrb	r2, [r7, #22]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	32ae      	adds	r2, #174	@ 0xae
 8007a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00f      	beq.n	8007a84 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007a64:	7dba      	ldrb	r2, [r7, #22]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007a6c:	7dba      	ldrb	r2, [r7, #22]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	32ae      	adds	r2, #174	@ 0xae
 8007a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	7afa      	ldrb	r2, [r7, #11]
 8007a7a:	4611      	mov	r1, r2
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	4798      	blx	r3
 8007a80:	4603      	mov	r3, r0
 8007a82:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
 8007a8c:	e000      	b.n	8007a90 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3718      	adds	r7, #24
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	607a      	str	r2, [r7, #4]
 8007aa4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007aa6:	7afb      	ldrb	r3, [r7, #11]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d178      	bne.n	8007b9e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3314      	adds	r3, #20
 8007ab0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d163      	bne.n	8007b84 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	8992      	ldrh	r2, [r2, #12]
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d91c      	bls.n	8007b02 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	8992      	ldrh	r2, [r2, #12]
 8007ad0:	1a9a      	subs	r2, r3, r2
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	8992      	ldrh	r2, [r2, #12]
 8007ade:	441a      	add	r2, r3
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	6919      	ldr	r1, [r3, #16]
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	461a      	mov	r2, r3
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f001 f8c4 	bl	8008c7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007af4:	2300      	movs	r3, #0
 8007af6:	2200      	movs	r2, #0
 8007af8:	2100      	movs	r1, #0
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f001 fe2c 	bl	8009758 <USBD_LL_PrepareReceive>
 8007b00:	e040      	b.n	8007b84 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	899b      	ldrh	r3, [r3, #12]
 8007b06:	461a      	mov	r2, r3
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d11c      	bne.n	8007b4a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d316      	bcc.n	8007b4a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d20f      	bcs.n	8007b4a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	68f8      	ldr	r0, [r7, #12]
 8007b30:	f001 f8a4 	bl	8008c7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	2200      	movs	r2, #0
 8007b40:	2100      	movs	r1, #0
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f001 fe08 	bl	8009758 <USBD_LL_PrepareReceive>
 8007b48:	e01c      	b.n	8007b84 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b03      	cmp	r3, #3
 8007b54:	d10f      	bne.n	8007b76 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d009      	beq.n	8007b76 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b76:	2180      	movs	r1, #128	@ 0x80
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f001 fd43 	bl	8009604 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f001 f8d2 	bl	8008d28 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d03a      	beq.n	8007c04 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f7ff fe30 	bl	80077f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007b9c:	e032      	b.n	8007c04 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007b9e:	7afb      	ldrb	r3, [r7, #11]
 8007ba0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 f986 	bl	8007eba <USBD_CoreFindEP>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bb2:	7dfb      	ldrb	r3, [r7, #23]
 8007bb4:	2bff      	cmp	r3, #255	@ 0xff
 8007bb6:	d025      	beq.n	8007c04 <USBD_LL_DataInStage+0x16c>
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d122      	bne.n	8007c04 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d11c      	bne.n	8007c04 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007bca:	7dfa      	ldrb	r2, [r7, #23]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	32ae      	adds	r2, #174	@ 0xae
 8007bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d014      	beq.n	8007c04 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007bda:	7dfa      	ldrb	r2, [r7, #23]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007be2:	7dfa      	ldrb	r2, [r7, #23]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	32ae      	adds	r2, #174	@ 0xae
 8007be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	7afa      	ldrb	r2, [r7, #11]
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	4798      	blx	r3
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007bfa:	7dbb      	ldrb	r3, [r7, #22]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007c00:	7dbb      	ldrb	r3, [r7, #22]
 8007c02:	e000      	b.n	8007c06 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007c04:	2300      	movs	r3, #0
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b084      	sub	sp, #16
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d014      	beq.n	8007c74 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d00e      	beq.n	8007c74 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	6852      	ldr	r2, [r2, #4]
 8007c62:	b2d2      	uxtb	r2, r2
 8007c64:	4611      	mov	r1, r2
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	4798      	blx	r3
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007c70:	2303      	movs	r3, #3
 8007c72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c74:	2340      	movs	r3, #64	@ 0x40
 8007c76:	2200      	movs	r2, #0
 8007c78:	2100      	movs	r1, #0
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f001 fc7d 	bl	800957a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2240      	movs	r2, #64	@ 0x40
 8007c8c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007c90:	2340      	movs	r3, #64	@ 0x40
 8007c92:	2200      	movs	r2, #0
 8007c94:	2180      	movs	r1, #128	@ 0x80
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 fc6f 	bl	800957a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2240      	movs	r2, #64	@ 0x40
 8007ca8:	841a      	strh	r2, [r3, #32]

  return ret;
 8007caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	78fa      	ldrb	r2, [r7, #3]
 8007cc4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b04      	cmp	r3, #4
 8007ce6:	d006      	beq.n	8007cf6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2204      	movs	r2, #4
 8007cfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007cfe:	2300      	movs	r3, #0
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b04      	cmp	r3, #4
 8007d1e:	d106      	bne.n	8007d2e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b082      	sub	sp, #8
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	2b03      	cmp	r3, #3
 8007d4e:	d110      	bne.n	8007d72 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00b      	beq.n	8007d72 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d60:	69db      	ldr	r3, [r3, #28]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d005      	beq.n	8007d72 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	32ae      	adds	r2, #174	@ 0xae
 8007d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e01c      	b.n	8007dd8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b03      	cmp	r3, #3
 8007da8:	d115      	bne.n	8007dd6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	32ae      	adds	r2, #174	@ 0xae
 8007db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00b      	beq.n	8007dd6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	32ae      	adds	r2, #174	@ 0xae
 8007dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	78fa      	ldrb	r2, [r7, #3]
 8007dd0:	4611      	mov	r1, r2
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	32ae      	adds	r2, #174	@ 0xae
 8007df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d101      	bne.n	8007e02 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e01c      	b.n	8007e3c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b03      	cmp	r3, #3
 8007e0c:	d115      	bne.n	8007e3a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	32ae      	adds	r2, #174	@ 0xae
 8007e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00b      	beq.n	8007e3a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	32ae      	adds	r2, #174	@ 0xae
 8007e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e32:	78fa      	ldrb	r2, [r7, #3]
 8007e34:	4611      	mov	r1, r2
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00e      	beq.n	8007e96 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	6852      	ldr	r2, [r2, #4]
 8007e84:	b2d2      	uxtb	r2, r2
 8007e86:	4611      	mov	r1, r2
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	4798      	blx	r3
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007e92:	2303      	movs	r3, #3
 8007e94:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007eac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007eba:	b480      	push	{r7}
 8007ebc:	b083      	sub	sp, #12
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007ec6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	885b      	ldrh	r3, [r3, #2]
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	7812      	ldrb	r2, [r2, #0]
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d91f      	bls.n	8007f3a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007f00:	e013      	b.n	8007f2a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007f02:	f107 030a 	add.w	r3, r7, #10
 8007f06:	4619      	mov	r1, r3
 8007f08:	6978      	ldr	r0, [r7, #20]
 8007f0a:	f000 f81b 	bl	8007f44 <USBD_GetNextDesc>
 8007f0e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	785b      	ldrb	r3, [r3, #1]
 8007f14:	2b05      	cmp	r3, #5
 8007f16:	d108      	bne.n	8007f2a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	789b      	ldrb	r3, [r3, #2]
 8007f20:	78fa      	ldrb	r2, [r7, #3]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d008      	beq.n	8007f38 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f26:	2300      	movs	r3, #0
 8007f28:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	885b      	ldrh	r3, [r3, #2]
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	897b      	ldrh	r3, [r7, #10]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d8e5      	bhi.n	8007f02 <USBD_GetEpDesc+0x2e>
 8007f36:	e000      	b.n	8007f3a <USBD_GetEpDesc+0x66>
          break;
 8007f38:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f3a:	693b      	ldr	r3, [r7, #16]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3718      	adds	r7, #24
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	881b      	ldrh	r3, [r3, #0]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	7812      	ldrb	r2, [r2, #0]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b087      	sub	sp, #28
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	3301      	adds	r3, #1
 8007f92:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007f9a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007f9e:	021b      	lsls	r3, r3, #8
 8007fa0:	b21a      	sxth	r2, r3
 8007fa2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	b21b      	sxth	r3, r3
 8007faa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007fac:	89fb      	ldrh	r3, [r7, #14]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	371c      	adds	r7, #28
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
	...

08007fbc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007fd2:	2b40      	cmp	r3, #64	@ 0x40
 8007fd4:	d005      	beq.n	8007fe2 <USBD_StdDevReq+0x26>
 8007fd6:	2b40      	cmp	r3, #64	@ 0x40
 8007fd8:	d857      	bhi.n	800808a <USBD_StdDevReq+0xce>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00f      	beq.n	8007ffe <USBD_StdDevReq+0x42>
 8007fde:	2b20      	cmp	r3, #32
 8007fe0:	d153      	bne.n	800808a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	32ae      	adds	r2, #174	@ 0xae
 8007fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	6839      	ldr	r1, [r7, #0]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	4798      	blx	r3
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8007ffc:	e04a      	b.n	8008094 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	785b      	ldrb	r3, [r3, #1]
 8008002:	2b09      	cmp	r3, #9
 8008004:	d83b      	bhi.n	800807e <USBD_StdDevReq+0xc2>
 8008006:	a201      	add	r2, pc, #4	@ (adr r2, 800800c <USBD_StdDevReq+0x50>)
 8008008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800c:	08008061 	.word	0x08008061
 8008010:	08008075 	.word	0x08008075
 8008014:	0800807f 	.word	0x0800807f
 8008018:	0800806b 	.word	0x0800806b
 800801c:	0800807f 	.word	0x0800807f
 8008020:	0800803f 	.word	0x0800803f
 8008024:	08008035 	.word	0x08008035
 8008028:	0800807f 	.word	0x0800807f
 800802c:	08008057 	.word	0x08008057
 8008030:	08008049 	.word	0x08008049
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008034:	6839      	ldr	r1, [r7, #0]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 fa3e 	bl	80084b8 <USBD_GetDescriptor>
          break;
 800803c:	e024      	b.n	8008088 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 fba3 	bl	800878c <USBD_SetAddress>
          break;
 8008046:	e01f      	b.n	8008088 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fbe2 	bl	8008814 <USBD_SetConfig>
 8008050:	4603      	mov	r3, r0
 8008052:	73fb      	strb	r3, [r7, #15]
          break;
 8008054:	e018      	b.n	8008088 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 fc85 	bl	8008968 <USBD_GetConfig>
          break;
 800805e:	e013      	b.n	8008088 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008060:	6839      	ldr	r1, [r7, #0]
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fcb6 	bl	80089d4 <USBD_GetStatus>
          break;
 8008068:	e00e      	b.n	8008088 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800806a:	6839      	ldr	r1, [r7, #0]
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 fce5 	bl	8008a3c <USBD_SetFeature>
          break;
 8008072:	e009      	b.n	8008088 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 fd09 	bl	8008a8e <USBD_ClrFeature>
          break;
 800807c:	e004      	b.n	8008088 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fd60 	bl	8008b46 <USBD_CtlError>
          break;
 8008086:	bf00      	nop
      }
      break;
 8008088:	e004      	b.n	8008094 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fd5a 	bl	8008b46 <USBD_CtlError>
      break;
 8008092:	bf00      	nop
  }

  return ret;
 8008094:	7bfb      	ldrb	r3, [r7, #15]
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop

080080a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80080b6:	2b40      	cmp	r3, #64	@ 0x40
 80080b8:	d005      	beq.n	80080c6 <USBD_StdItfReq+0x26>
 80080ba:	2b40      	cmp	r3, #64	@ 0x40
 80080bc:	d852      	bhi.n	8008164 <USBD_StdItfReq+0xc4>
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <USBD_StdItfReq+0x26>
 80080c2:	2b20      	cmp	r3, #32
 80080c4:	d14e      	bne.n	8008164 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	3b01      	subs	r3, #1
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d840      	bhi.n	8008156 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	889b      	ldrh	r3, [r3, #4]
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d836      	bhi.n	800814c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	889b      	ldrh	r3, [r3, #4]
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7ff feda 	bl	8007ea0 <USBD_CoreFindIF>
 80080ec:	4603      	mov	r3, r0
 80080ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080f0:	7bbb      	ldrb	r3, [r7, #14]
 80080f2:	2bff      	cmp	r3, #255	@ 0xff
 80080f4:	d01d      	beq.n	8008132 <USBD_StdItfReq+0x92>
 80080f6:	7bbb      	ldrb	r3, [r7, #14]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d11a      	bne.n	8008132 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80080fc:	7bba      	ldrb	r2, [r7, #14]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	32ae      	adds	r2, #174	@ 0xae
 8008102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00f      	beq.n	800812c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800810c:	7bba      	ldrb	r2, [r7, #14]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008114:	7bba      	ldrb	r2, [r7, #14]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	32ae      	adds	r2, #174	@ 0xae
 800811a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	6839      	ldr	r1, [r7, #0]
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	4798      	blx	r3
 8008126:	4603      	mov	r3, r0
 8008128:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800812a:	e004      	b.n	8008136 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800812c:	2303      	movs	r3, #3
 800812e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008130:	e001      	b.n	8008136 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008132:	2303      	movs	r3, #3
 8008134:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	88db      	ldrh	r3, [r3, #6]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d110      	bne.n	8008160 <USBD_StdItfReq+0xc0>
 800813e:	7bfb      	ldrb	r3, [r7, #15]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10d      	bne.n	8008160 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fddc 	bl	8008d02 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800814a:	e009      	b.n	8008160 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800814c:	6839      	ldr	r1, [r7, #0]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fcf9 	bl	8008b46 <USBD_CtlError>
          break;
 8008154:	e004      	b.n	8008160 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fcf4 	bl	8008b46 <USBD_CtlError>
          break;
 800815e:	e000      	b.n	8008162 <USBD_StdItfReq+0xc2>
          break;
 8008160:	bf00      	nop
      }
      break;
 8008162:	e004      	b.n	800816e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fced 	bl	8008b46 <USBD_CtlError>
      break;
 800816c:	bf00      	nop
  }

  return ret;
 800816e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	889b      	ldrh	r3, [r3, #4]
 800818a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008194:	2b40      	cmp	r3, #64	@ 0x40
 8008196:	d007      	beq.n	80081a8 <USBD_StdEPReq+0x30>
 8008198:	2b40      	cmp	r3, #64	@ 0x40
 800819a:	f200 8181 	bhi.w	80084a0 <USBD_StdEPReq+0x328>
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d02a      	beq.n	80081f8 <USBD_StdEPReq+0x80>
 80081a2:	2b20      	cmp	r3, #32
 80081a4:	f040 817c 	bne.w	80084a0 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7ff fe84 	bl	8007eba <USBD_CoreFindEP>
 80081b2:	4603      	mov	r3, r0
 80081b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081b6:	7b7b      	ldrb	r3, [r7, #13]
 80081b8:	2bff      	cmp	r3, #255	@ 0xff
 80081ba:	f000 8176 	beq.w	80084aa <USBD_StdEPReq+0x332>
 80081be:	7b7b      	ldrb	r3, [r7, #13]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f040 8172 	bne.w	80084aa <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80081c6:	7b7a      	ldrb	r2, [r7, #13]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80081ce:	7b7a      	ldrb	r2, [r7, #13]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	32ae      	adds	r2, #174	@ 0xae
 80081d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 8165 	beq.w	80084aa <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80081e0:	7b7a      	ldrb	r2, [r7, #13]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	32ae      	adds	r2, #174	@ 0xae
 80081e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	6839      	ldr	r1, [r7, #0]
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	4798      	blx	r3
 80081f2:	4603      	mov	r3, r0
 80081f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80081f6:	e158      	b.n	80084aa <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	785b      	ldrb	r3, [r3, #1]
 80081fc:	2b03      	cmp	r3, #3
 80081fe:	d008      	beq.n	8008212 <USBD_StdEPReq+0x9a>
 8008200:	2b03      	cmp	r3, #3
 8008202:	f300 8147 	bgt.w	8008494 <USBD_StdEPReq+0x31c>
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 809b 	beq.w	8008342 <USBD_StdEPReq+0x1ca>
 800820c:	2b01      	cmp	r3, #1
 800820e:	d03c      	beq.n	800828a <USBD_StdEPReq+0x112>
 8008210:	e140      	b.n	8008494 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b02      	cmp	r3, #2
 800821c:	d002      	beq.n	8008224 <USBD_StdEPReq+0xac>
 800821e:	2b03      	cmp	r3, #3
 8008220:	d016      	beq.n	8008250 <USBD_StdEPReq+0xd8>
 8008222:	e02c      	b.n	800827e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008224:	7bbb      	ldrb	r3, [r7, #14]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d00d      	beq.n	8008246 <USBD_StdEPReq+0xce>
 800822a:	7bbb      	ldrb	r3, [r7, #14]
 800822c:	2b80      	cmp	r3, #128	@ 0x80
 800822e:	d00a      	beq.n	8008246 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008230:	7bbb      	ldrb	r3, [r7, #14]
 8008232:	4619      	mov	r1, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f001 f9e5 	bl	8009604 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800823a:	2180      	movs	r1, #128	@ 0x80
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f001 f9e1 	bl	8009604 <USBD_LL_StallEP>
 8008242:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008244:	e020      	b.n	8008288 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fc7c 	bl	8008b46 <USBD_CtlError>
              break;
 800824e:	e01b      	b.n	8008288 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	885b      	ldrh	r3, [r3, #2]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10e      	bne.n	8008276 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008258:	7bbb      	ldrb	r3, [r7, #14]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d00b      	beq.n	8008276 <USBD_StdEPReq+0xfe>
 800825e:	7bbb      	ldrb	r3, [r7, #14]
 8008260:	2b80      	cmp	r3, #128	@ 0x80
 8008262:	d008      	beq.n	8008276 <USBD_StdEPReq+0xfe>
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	88db      	ldrh	r3, [r3, #6]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d104      	bne.n	8008276 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800826c:	7bbb      	ldrb	r3, [r7, #14]
 800826e:	4619      	mov	r1, r3
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f001 f9c7 	bl	8009604 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 fd43 	bl	8008d02 <USBD_CtlSendStatus>

              break;
 800827c:	e004      	b.n	8008288 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fc60 	bl	8008b46 <USBD_CtlError>
              break;
 8008286:	bf00      	nop
          }
          break;
 8008288:	e109      	b.n	800849e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008290:	b2db      	uxtb	r3, r3
 8008292:	2b02      	cmp	r3, #2
 8008294:	d002      	beq.n	800829c <USBD_StdEPReq+0x124>
 8008296:	2b03      	cmp	r3, #3
 8008298:	d016      	beq.n	80082c8 <USBD_StdEPReq+0x150>
 800829a:	e04b      	b.n	8008334 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00d      	beq.n	80082be <USBD_StdEPReq+0x146>
 80082a2:	7bbb      	ldrb	r3, [r7, #14]
 80082a4:	2b80      	cmp	r3, #128	@ 0x80
 80082a6:	d00a      	beq.n	80082be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082a8:	7bbb      	ldrb	r3, [r7, #14]
 80082aa:	4619      	mov	r1, r3
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f001 f9a9 	bl	8009604 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082b2:	2180      	movs	r1, #128	@ 0x80
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f001 f9a5 	bl	8009604 <USBD_LL_StallEP>
 80082ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80082bc:	e040      	b.n	8008340 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f000 fc40 	bl	8008b46 <USBD_CtlError>
              break;
 80082c6:	e03b      	b.n	8008340 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	885b      	ldrh	r3, [r3, #2]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d136      	bne.n	800833e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80082d0:	7bbb      	ldrb	r3, [r7, #14]
 80082d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d004      	beq.n	80082e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	4619      	mov	r1, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f001 f9af 	bl	8009642 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fd0c 	bl	8008d02 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80082ea:	7bbb      	ldrb	r3, [r7, #14]
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7ff fde3 	bl	8007eba <USBD_CoreFindEP>
 80082f4:	4603      	mov	r3, r0
 80082f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082f8:	7b7b      	ldrb	r3, [r7, #13]
 80082fa:	2bff      	cmp	r3, #255	@ 0xff
 80082fc:	d01f      	beq.n	800833e <USBD_StdEPReq+0x1c6>
 80082fe:	7b7b      	ldrb	r3, [r7, #13]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d11c      	bne.n	800833e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008304:	7b7a      	ldrb	r2, [r7, #13]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800830c:	7b7a      	ldrb	r2, [r7, #13]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	32ae      	adds	r2, #174	@ 0xae
 8008312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d010      	beq.n	800833e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800831c:	7b7a      	ldrb	r2, [r7, #13]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	32ae      	adds	r2, #174	@ 0xae
 8008322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	6839      	ldr	r1, [r7, #0]
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	4798      	blx	r3
 800832e:	4603      	mov	r3, r0
 8008330:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008332:	e004      	b.n	800833e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fc05 	bl	8008b46 <USBD_CtlError>
              break;
 800833c:	e000      	b.n	8008340 <USBD_StdEPReq+0x1c8>
              break;
 800833e:	bf00      	nop
          }
          break;
 8008340:	e0ad      	b.n	800849e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b02      	cmp	r3, #2
 800834c:	d002      	beq.n	8008354 <USBD_StdEPReq+0x1dc>
 800834e:	2b03      	cmp	r3, #3
 8008350:	d033      	beq.n	80083ba <USBD_StdEPReq+0x242>
 8008352:	e099      	b.n	8008488 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008354:	7bbb      	ldrb	r3, [r7, #14]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d007      	beq.n	800836a <USBD_StdEPReq+0x1f2>
 800835a:	7bbb      	ldrb	r3, [r7, #14]
 800835c:	2b80      	cmp	r3, #128	@ 0x80
 800835e:	d004      	beq.n	800836a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 fbef 	bl	8008b46 <USBD_CtlError>
                break;
 8008368:	e093      	b.n	8008492 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800836a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800836e:	2b00      	cmp	r3, #0
 8008370:	da0b      	bge.n	800838a <USBD_StdEPReq+0x212>
 8008372:	7bbb      	ldrb	r3, [r7, #14]
 8008374:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008378:	4613      	mov	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	3310      	adds	r3, #16
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	4413      	add	r3, r2
 8008386:	3304      	adds	r3, #4
 8008388:	e00b      	b.n	80083a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800838a:	7bbb      	ldrb	r3, [r7, #14]
 800838c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008390:	4613      	mov	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4413      	add	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	4413      	add	r3, r2
 80083a0:	3304      	adds	r3, #4
 80083a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	2200      	movs	r2, #0
 80083a8:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	330e      	adds	r3, #14
 80083ae:	2202      	movs	r2, #2
 80083b0:	4619      	mov	r1, r3
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fc44 	bl	8008c40 <USBD_CtlSendData>
              break;
 80083b8:	e06b      	b.n	8008492 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	da11      	bge.n	80083e6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	f003 020f 	and.w	r2, r3, #15
 80083c8:	6879      	ldr	r1, [r7, #4]
 80083ca:	4613      	mov	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4413      	add	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	440b      	add	r3, r1
 80083d4:	3323      	adds	r3, #35	@ 0x23
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d117      	bne.n	800840c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fbb1 	bl	8008b46 <USBD_CtlError>
                  break;
 80083e4:	e055      	b.n	8008492 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80083e6:	7bbb      	ldrb	r3, [r7, #14]
 80083e8:	f003 020f 	and.w	r2, r3, #15
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	4613      	mov	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	440b      	add	r3, r1
 80083f8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d104      	bne.n	800840c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f000 fb9e 	bl	8008b46 <USBD_CtlError>
                  break;
 800840a:	e042      	b.n	8008492 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800840c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008410:	2b00      	cmp	r3, #0
 8008412:	da0b      	bge.n	800842c <USBD_StdEPReq+0x2b4>
 8008414:	7bbb      	ldrb	r3, [r7, #14]
 8008416:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800841a:	4613      	mov	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	3310      	adds	r3, #16
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	4413      	add	r3, r2
 8008428:	3304      	adds	r3, #4
 800842a:	e00b      	b.n	8008444 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800842c:	7bbb      	ldrb	r3, [r7, #14]
 800842e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008432:	4613      	mov	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	4413      	add	r3, r2
 8008442:	3304      	adds	r3, #4
 8008444:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008446:	7bbb      	ldrb	r3, [r7, #14]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d002      	beq.n	8008452 <USBD_StdEPReq+0x2da>
 800844c:	7bbb      	ldrb	r3, [r7, #14]
 800844e:	2b80      	cmp	r3, #128	@ 0x80
 8008450:	d103      	bne.n	800845a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	2200      	movs	r2, #0
 8008456:	739a      	strb	r2, [r3, #14]
 8008458:	e00e      	b.n	8008478 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800845a:	7bbb      	ldrb	r3, [r7, #14]
 800845c:	4619      	mov	r1, r3
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f001 f90e 	bl	8009680 <USBD_LL_IsStallEP>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2201      	movs	r2, #1
 800846e:	739a      	strb	r2, [r3, #14]
 8008470:	e002      	b.n	8008478 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2200      	movs	r2, #0
 8008476:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	330e      	adds	r3, #14
 800847c:	2202      	movs	r2, #2
 800847e:	4619      	mov	r1, r3
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fbdd 	bl	8008c40 <USBD_CtlSendData>
              break;
 8008486:	e004      	b.n	8008492 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008488:	6839      	ldr	r1, [r7, #0]
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fb5b 	bl	8008b46 <USBD_CtlError>
              break;
 8008490:	bf00      	nop
          }
          break;
 8008492:	e004      	b.n	800849e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fb55 	bl	8008b46 <USBD_CtlError>
          break;
 800849c:	bf00      	nop
      }
      break;
 800849e:	e005      	b.n	80084ac <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80084a0:	6839      	ldr	r1, [r7, #0]
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fb4f 	bl	8008b46 <USBD_CtlError>
      break;
 80084a8:	e000      	b.n	80084ac <USBD_StdEPReq+0x334>
      break;
 80084aa:	bf00      	nop
  }

  return ret;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
	...

080084b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80084ca:	2300      	movs	r3, #0
 80084cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	885b      	ldrh	r3, [r3, #2]
 80084d2:	0a1b      	lsrs	r3, r3, #8
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	3b01      	subs	r3, #1
 80084d8:	2b06      	cmp	r3, #6
 80084da:	f200 8128 	bhi.w	800872e <USBD_GetDescriptor+0x276>
 80084de:	a201      	add	r2, pc, #4	@ (adr r2, 80084e4 <USBD_GetDescriptor+0x2c>)
 80084e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e4:	08008501 	.word	0x08008501
 80084e8:	08008519 	.word	0x08008519
 80084ec:	08008559 	.word	0x08008559
 80084f0:	0800872f 	.word	0x0800872f
 80084f4:	0800872f 	.word	0x0800872f
 80084f8:	080086cf 	.word	0x080086cf
 80084fc:	080086fb 	.word	0x080086fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	7c12      	ldrb	r2, [r2, #16]
 800850c:	f107 0108 	add.w	r1, r7, #8
 8008510:	4610      	mov	r0, r2
 8008512:	4798      	blx	r3
 8008514:	60f8      	str	r0, [r7, #12]
      break;
 8008516:	e112      	b.n	800873e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	7c1b      	ldrb	r3, [r3, #16]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10d      	bne.n	800853c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008528:	f107 0208 	add.w	r2, r7, #8
 800852c:	4610      	mov	r0, r2
 800852e:	4798      	blx	r3
 8008530:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	3301      	adds	r3, #1
 8008536:	2202      	movs	r2, #2
 8008538:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800853a:	e100      	b.n	800873e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008544:	f107 0208 	add.w	r2, r7, #8
 8008548:	4610      	mov	r0, r2
 800854a:	4798      	blx	r3
 800854c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3301      	adds	r3, #1
 8008552:	2202      	movs	r2, #2
 8008554:	701a      	strb	r2, [r3, #0]
      break;
 8008556:	e0f2      	b.n	800873e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	885b      	ldrh	r3, [r3, #2]
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b05      	cmp	r3, #5
 8008560:	f200 80ac 	bhi.w	80086bc <USBD_GetDescriptor+0x204>
 8008564:	a201      	add	r2, pc, #4	@ (adr r2, 800856c <USBD_GetDescriptor+0xb4>)
 8008566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856a:	bf00      	nop
 800856c:	08008585 	.word	0x08008585
 8008570:	080085b9 	.word	0x080085b9
 8008574:	080085ed 	.word	0x080085ed
 8008578:	08008621 	.word	0x08008621
 800857c:	08008655 	.word	0x08008655
 8008580:	08008689 	.word	0x08008689
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00b      	beq.n	80085a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	7c12      	ldrb	r2, [r2, #16]
 800859c:	f107 0108 	add.w	r1, r7, #8
 80085a0:	4610      	mov	r0, r2
 80085a2:	4798      	blx	r3
 80085a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085a6:	e091      	b.n	80086cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085a8:	6839      	ldr	r1, [r7, #0]
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 facb 	bl	8008b46 <USBD_CtlError>
            err++;
 80085b0:	7afb      	ldrb	r3, [r7, #11]
 80085b2:	3301      	adds	r3, #1
 80085b4:	72fb      	strb	r3, [r7, #11]
          break;
 80085b6:	e089      	b.n	80086cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00b      	beq.n	80085dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	7c12      	ldrb	r2, [r2, #16]
 80085d0:	f107 0108 	add.w	r1, r7, #8
 80085d4:	4610      	mov	r0, r2
 80085d6:	4798      	blx	r3
 80085d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085da:	e077      	b.n	80086cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085dc:	6839      	ldr	r1, [r7, #0]
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fab1 	bl	8008b46 <USBD_CtlError>
            err++;
 80085e4:	7afb      	ldrb	r3, [r7, #11]
 80085e6:	3301      	adds	r3, #1
 80085e8:	72fb      	strb	r3, [r7, #11]
          break;
 80085ea:	e06f      	b.n	80086cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00b      	beq.n	8008610 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	7c12      	ldrb	r2, [r2, #16]
 8008604:	f107 0108 	add.w	r1, r7, #8
 8008608:	4610      	mov	r0, r2
 800860a:	4798      	blx	r3
 800860c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800860e:	e05d      	b.n	80086cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 fa97 	bl	8008b46 <USBD_CtlError>
            err++;
 8008618:	7afb      	ldrb	r3, [r7, #11]
 800861a:	3301      	adds	r3, #1
 800861c:	72fb      	strb	r3, [r7, #11]
          break;
 800861e:	e055      	b.n	80086cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00b      	beq.n	8008644 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	7c12      	ldrb	r2, [r2, #16]
 8008638:	f107 0108 	add.w	r1, r7, #8
 800863c:	4610      	mov	r0, r2
 800863e:	4798      	blx	r3
 8008640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008642:	e043      	b.n	80086cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008644:	6839      	ldr	r1, [r7, #0]
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fa7d 	bl	8008b46 <USBD_CtlError>
            err++;
 800864c:	7afb      	ldrb	r3, [r7, #11]
 800864e:	3301      	adds	r3, #1
 8008650:	72fb      	strb	r3, [r7, #11]
          break;
 8008652:	e03b      	b.n	80086cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00b      	beq.n	8008678 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008666:	695b      	ldr	r3, [r3, #20]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	7c12      	ldrb	r2, [r2, #16]
 800866c:	f107 0108 	add.w	r1, r7, #8
 8008670:	4610      	mov	r0, r2
 8008672:	4798      	blx	r3
 8008674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008676:	e029      	b.n	80086cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa63 	bl	8008b46 <USBD_CtlError>
            err++;
 8008680:	7afb      	ldrb	r3, [r7, #11]
 8008682:	3301      	adds	r3, #1
 8008684:	72fb      	strb	r3, [r7, #11]
          break;
 8008686:	e021      	b.n	80086cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00b      	beq.n	80086ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	7c12      	ldrb	r2, [r2, #16]
 80086a0:	f107 0108 	add.w	r1, r7, #8
 80086a4:	4610      	mov	r0, r2
 80086a6:	4798      	blx	r3
 80086a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086aa:	e00f      	b.n	80086cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086ac:	6839      	ldr	r1, [r7, #0]
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa49 	bl	8008b46 <USBD_CtlError>
            err++;
 80086b4:	7afb      	ldrb	r3, [r7, #11]
 80086b6:	3301      	adds	r3, #1
 80086b8:	72fb      	strb	r3, [r7, #11]
          break;
 80086ba:	e007      	b.n	80086cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fa41 	bl	8008b46 <USBD_CtlError>
          err++;
 80086c4:	7afb      	ldrb	r3, [r7, #11]
 80086c6:	3301      	adds	r3, #1
 80086c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80086ca:	bf00      	nop
      }
      break;
 80086cc:	e037      	b.n	800873e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	7c1b      	ldrb	r3, [r3, #16]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d109      	bne.n	80086ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086de:	f107 0208 	add.w	r2, r7, #8
 80086e2:	4610      	mov	r0, r2
 80086e4:	4798      	blx	r3
 80086e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80086e8:	e029      	b.n	800873e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fa2a 	bl	8008b46 <USBD_CtlError>
        err++;
 80086f2:	7afb      	ldrb	r3, [r7, #11]
 80086f4:	3301      	adds	r3, #1
 80086f6:	72fb      	strb	r3, [r7, #11]
      break;
 80086f8:	e021      	b.n	800873e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	7c1b      	ldrb	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10d      	bne.n	800871e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800870a:	f107 0208 	add.w	r2, r7, #8
 800870e:	4610      	mov	r0, r2
 8008710:	4798      	blx	r3
 8008712:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3301      	adds	r3, #1
 8008718:	2207      	movs	r2, #7
 800871a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800871c:	e00f      	b.n	800873e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fa10 	bl	8008b46 <USBD_CtlError>
        err++;
 8008726:	7afb      	ldrb	r3, [r7, #11]
 8008728:	3301      	adds	r3, #1
 800872a:	72fb      	strb	r3, [r7, #11]
      break;
 800872c:	e007      	b.n	800873e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fa08 	bl	8008b46 <USBD_CtlError>
      err++;
 8008736:	7afb      	ldrb	r3, [r7, #11]
 8008738:	3301      	adds	r3, #1
 800873a:	72fb      	strb	r3, [r7, #11]
      break;
 800873c:	bf00      	nop
  }

  if (err != 0U)
 800873e:	7afb      	ldrb	r3, [r7, #11]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d11e      	bne.n	8008782 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	88db      	ldrh	r3, [r3, #6]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d016      	beq.n	800877a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800874c:	893b      	ldrh	r3, [r7, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00e      	beq.n	8008770 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	88da      	ldrh	r2, [r3, #6]
 8008756:	893b      	ldrh	r3, [r7, #8]
 8008758:	4293      	cmp	r3, r2
 800875a:	bf28      	it	cs
 800875c:	4613      	movcs	r3, r2
 800875e:	b29b      	uxth	r3, r3
 8008760:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008762:	893b      	ldrh	r3, [r7, #8]
 8008764:	461a      	mov	r2, r3
 8008766:	68f9      	ldr	r1, [r7, #12]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fa69 	bl	8008c40 <USBD_CtlSendData>
 800876e:	e009      	b.n	8008784 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f9e7 	bl	8008b46 <USBD_CtlError>
 8008778:	e004      	b.n	8008784 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fac1 	bl	8008d02 <USBD_CtlSendStatus>
 8008780:	e000      	b.n	8008784 <USBD_GetDescriptor+0x2cc>
    return;
 8008782:	bf00      	nop
  }
}
 8008784:	3710      	adds	r7, #16
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop

0800878c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	889b      	ldrh	r3, [r3, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d131      	bne.n	8008802 <USBD_SetAddress+0x76>
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	88db      	ldrh	r3, [r3, #6]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d12d      	bne.n	8008802 <USBD_SetAddress+0x76>
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	885b      	ldrh	r3, [r3, #2]
 80087aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80087ac:	d829      	bhi.n	8008802 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	885b      	ldrh	r3, [r3, #2]
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d104      	bne.n	80087d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f9bc 	bl	8008b46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087ce:	e01d      	b.n	800880c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	7bfa      	ldrb	r2, [r7, #15]
 80087d4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	4619      	mov	r1, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 ff7b 	bl	80096d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fa8d 	bl	8008d02 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d004      	beq.n	80087f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2202      	movs	r2, #2
 80087f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f6:	e009      	b.n	800880c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008800:	e004      	b.n	800880c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f99e 	bl	8008b46 <USBD_CtlError>
  }
}
 800880a:	bf00      	nop
 800880c:	bf00      	nop
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800881e:	2300      	movs	r3, #0
 8008820:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	885b      	ldrh	r3, [r3, #2]
 8008826:	b2da      	uxtb	r2, r3
 8008828:	4b4e      	ldr	r3, [pc, #312]	@ (8008964 <USBD_SetConfig+0x150>)
 800882a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800882c:	4b4d      	ldr	r3, [pc, #308]	@ (8008964 <USBD_SetConfig+0x150>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d905      	bls.n	8008840 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008834:	6839      	ldr	r1, [r7, #0]
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f985 	bl	8008b46 <USBD_CtlError>
    return USBD_FAIL;
 800883c:	2303      	movs	r3, #3
 800883e:	e08c      	b.n	800895a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008846:	b2db      	uxtb	r3, r3
 8008848:	2b02      	cmp	r3, #2
 800884a:	d002      	beq.n	8008852 <USBD_SetConfig+0x3e>
 800884c:	2b03      	cmp	r3, #3
 800884e:	d029      	beq.n	80088a4 <USBD_SetConfig+0x90>
 8008850:	e075      	b.n	800893e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008852:	4b44      	ldr	r3, [pc, #272]	@ (8008964 <USBD_SetConfig+0x150>)
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d020      	beq.n	800889c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800885a:	4b42      	ldr	r3, [pc, #264]	@ (8008964 <USBD_SetConfig+0x150>)
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008864:	4b3f      	ldr	r3, [pc, #252]	@ (8008964 <USBD_SetConfig+0x150>)
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f7fe ffcd 	bl	800780a <USBD_SetClassConfig>
 8008870:	4603      	mov	r3, r0
 8008872:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008874:	7bfb      	ldrb	r3, [r7, #15]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d008      	beq.n	800888c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f962 	bl	8008b46 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2202      	movs	r2, #2
 8008886:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800888a:	e065      	b.n	8008958 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fa38 	bl	8008d02 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2203      	movs	r2, #3
 8008896:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800889a:	e05d      	b.n	8008958 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 fa30 	bl	8008d02 <USBD_CtlSendStatus>
      break;
 80088a2:	e059      	b.n	8008958 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80088a4:	4b2f      	ldr	r3, [pc, #188]	@ (8008964 <USBD_SetConfig+0x150>)
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d112      	bne.n	80088d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2202      	movs	r2, #2
 80088b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80088b4:	4b2b      	ldr	r3, [pc, #172]	@ (8008964 <USBD_SetConfig+0x150>)
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	461a      	mov	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088be:	4b29      	ldr	r3, [pc, #164]	@ (8008964 <USBD_SetConfig+0x150>)
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f7fe ffbc 	bl	8007842 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 fa19 	bl	8008d02 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088d0:	e042      	b.n	8008958 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80088d2:	4b24      	ldr	r3, [pc, #144]	@ (8008964 <USBD_SetConfig+0x150>)
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	461a      	mov	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d02a      	beq.n	8008936 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	4619      	mov	r1, r3
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7fe ffaa 	bl	8007842 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80088ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008964 <USBD_SetConfig+0x150>)
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	461a      	mov	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088f8:	4b1a      	ldr	r3, [pc, #104]	@ (8008964 <USBD_SetConfig+0x150>)
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	4619      	mov	r1, r3
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7fe ff83 	bl	800780a <USBD_SetClassConfig>
 8008904:	4603      	mov	r3, r0
 8008906:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008908:	7bfb      	ldrb	r3, [r7, #15]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00f      	beq.n	800892e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800890e:	6839      	ldr	r1, [r7, #0]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f918 	bl	8008b46 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	b2db      	uxtb	r3, r3
 800891c:	4619      	mov	r1, r3
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7fe ff8f 	bl	8007842 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2202      	movs	r2, #2
 8008928:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800892c:	e014      	b.n	8008958 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f9e7 	bl	8008d02 <USBD_CtlSendStatus>
      break;
 8008934:	e010      	b.n	8008958 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f9e3 	bl	8008d02 <USBD_CtlSendStatus>
      break;
 800893c:	e00c      	b.n	8008958 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f900 	bl	8008b46 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008946:	4b07      	ldr	r3, [pc, #28]	@ (8008964 <USBD_SetConfig+0x150>)
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f7fe ff78 	bl	8007842 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008952:	2303      	movs	r3, #3
 8008954:	73fb      	strb	r3, [r7, #15]
      break;
 8008956:	bf00      	nop
  }

  return ret;
 8008958:	7bfb      	ldrb	r3, [r7, #15]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	200004d4 	.word	0x200004d4

08008968 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	88db      	ldrh	r3, [r3, #6]
 8008976:	2b01      	cmp	r3, #1
 8008978:	d004      	beq.n	8008984 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f8e2 	bl	8008b46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008982:	e023      	b.n	80089cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b02      	cmp	r3, #2
 800898e:	dc02      	bgt.n	8008996 <USBD_GetConfig+0x2e>
 8008990:	2b00      	cmp	r3, #0
 8008992:	dc03      	bgt.n	800899c <USBD_GetConfig+0x34>
 8008994:	e015      	b.n	80089c2 <USBD_GetConfig+0x5a>
 8008996:	2b03      	cmp	r3, #3
 8008998:	d00b      	beq.n	80089b2 <USBD_GetConfig+0x4a>
 800899a:	e012      	b.n	80089c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	3308      	adds	r3, #8
 80089a6:	2201      	movs	r2, #1
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f948 	bl	8008c40 <USBD_CtlSendData>
        break;
 80089b0:	e00c      	b.n	80089cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3304      	adds	r3, #4
 80089b6:	2201      	movs	r2, #1
 80089b8:	4619      	mov	r1, r3
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f940 	bl	8008c40 <USBD_CtlSendData>
        break;
 80089c0:	e004      	b.n	80089cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f8be 	bl	8008b46 <USBD_CtlError>
        break;
 80089ca:	bf00      	nop
}
 80089cc:	bf00      	nop
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	3b01      	subs	r3, #1
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d81e      	bhi.n	8008a2a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	88db      	ldrh	r3, [r3, #6]
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d004      	beq.n	80089fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f8a5 	bl	8008b46 <USBD_CtlError>
        break;
 80089fc:	e01a      	b.n	8008a34 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d005      	beq.n	8008a1a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	f043 0202 	orr.w	r2, r3, #2
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	330c      	adds	r3, #12
 8008a1e:	2202      	movs	r2, #2
 8008a20:	4619      	mov	r1, r3
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f90c 	bl	8008c40 <USBD_CtlSendData>
      break;
 8008a28:	e004      	b.n	8008a34 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 f88a 	bl	8008b46 <USBD_CtlError>
      break;
 8008a32:	bf00      	nop
  }
}
 8008a34:	bf00      	nop
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	885b      	ldrh	r3, [r3, #2]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d107      	bne.n	8008a5e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f953 	bl	8008d02 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a5c:	e013      	b.n	8008a86 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	885b      	ldrh	r3, [r3, #2]
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d10b      	bne.n	8008a7e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	889b      	ldrh	r3, [r3, #4]
 8008a6a:	0a1b      	lsrs	r3, r3, #8
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f943 	bl	8008d02 <USBD_CtlSendStatus>
}
 8008a7c:	e003      	b.n	8008a86 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008a7e:	6839      	ldr	r1, [r7, #0]
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 f860 	bl	8008b46 <USBD_CtlError>
}
 8008a86:	bf00      	nop
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d80b      	bhi.n	8008abe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	885b      	ldrh	r3, [r3, #2]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d10c      	bne.n	8008ac8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f923 	bl	8008d02 <USBD_CtlSendStatus>
      }
      break;
 8008abc:	e004      	b.n	8008ac8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f840 	bl	8008b46 <USBD_CtlError>
      break;
 8008ac6:	e000      	b.n	8008aca <USBD_ClrFeature+0x3c>
      break;
 8008ac8:	bf00      	nop
  }
}
 8008aca:	bf00      	nop
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	781a      	ldrb	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	3301      	adds	r3, #1
 8008aec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	781a      	ldrb	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3301      	adds	r3, #1
 8008afa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f7ff fa3d 	bl	8007f7c <SWAPBYTE>
 8008b02:	4603      	mov	r3, r0
 8008b04:	461a      	mov	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	3301      	adds	r3, #1
 8008b14:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f7ff fa30 	bl	8007f7c <SWAPBYTE>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	461a      	mov	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	3301      	adds	r3, #1
 8008b28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f7ff fa23 	bl	8007f7c <SWAPBYTE>
 8008b36:	4603      	mov	r3, r0
 8008b38:	461a      	mov	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	80da      	strh	r2, [r3, #6]
}
 8008b3e:	bf00      	nop
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b082      	sub	sp, #8
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b50:	2180      	movs	r1, #128	@ 0x80
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fd56 	bl	8009604 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b58:	2100      	movs	r1, #0
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fd52 	bl	8009604 <USBD_LL_StallEP>
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008b74:	2300      	movs	r3, #0
 8008b76:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d042      	beq.n	8008c04 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008b82:	6938      	ldr	r0, [r7, #16]
 8008b84:	f000 f842 	bl	8008c0c <USBD_GetLen>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	005b      	lsls	r3, r3, #1
 8008b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b92:	d808      	bhi.n	8008ba6 <USBD_GetString+0x3e>
 8008b94:	6938      	ldr	r0, [r7, #16]
 8008b96:	f000 f839 	bl	8008c0c <USBD_GetLen>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	005b      	lsls	r3, r3, #1
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	e001      	b.n	8008baa <USBD_GetString+0x42>
 8008ba6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008bae:	7dfb      	ldrb	r3, [r7, #23]
 8008bb0:	68ba      	ldr	r2, [r7, #8]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	7812      	ldrb	r2, [r2, #0]
 8008bb8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
 8008bbc:	3301      	adds	r3, #1
 8008bbe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	2203      	movs	r2, #3
 8008bc8:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bca:	7dfb      	ldrb	r3, [r7, #23]
 8008bcc:	3301      	adds	r3, #1
 8008bce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008bd0:	e013      	b.n	8008bfa <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	7812      	ldrb	r2, [r2, #0]
 8008bdc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	3301      	adds	r3, #1
 8008be2:	613b      	str	r3, [r7, #16]
    idx++;
 8008be4:	7dfb      	ldrb	r3, [r7, #23]
 8008be6:	3301      	adds	r3, #1
 8008be8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008bea:	7dfb      	ldrb	r3, [r7, #23]
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	4413      	add	r3, r2
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	701a      	strb	r2, [r3, #0]
    idx++;
 8008bf4:	7dfb      	ldrb	r3, [r7, #23]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1e7      	bne.n	8008bd2 <USBD_GetString+0x6a>
 8008c02:	e000      	b.n	8008c06 <USBD_GetString+0x9e>
    return;
 8008c04:	bf00      	nop
  }
}
 8008c06:	3718      	adds	r7, #24
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c1c:	e005      	b.n	8008c2a <USBD_GetLen+0x1e>
  {
    len++;
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	3301      	adds	r3, #1
 8008c22:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	3301      	adds	r3, #1
 8008c28:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1f5      	bne.n	8008c1e <USBD_GetLen+0x12>
  }

  return len;
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	60f8      	str	r0, [r7, #12]
 8008c48:	60b9      	str	r1, [r7, #8]
 8008c4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	68ba      	ldr	r2, [r7, #8]
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f000 fd52 	bl	8009716 <USBD_LL_Transmit>

  return USBD_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b084      	sub	sp, #16
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f000 fd41 	bl	8009716 <USBD_LL_Transmit>

  return USBD_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b084      	sub	sp, #16
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	60f8      	str	r0, [r7, #12]
 8008ca6:	60b9      	str	r1, [r7, #8]
 8008ca8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2203      	movs	r2, #3
 8008cae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	68ba      	ldr	r2, [r7, #8]
 8008cbe:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	2100      	movs	r1, #0
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f000 fd41 	bl	8009758 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	68f8      	ldr	r0, [r7, #12]
 8008cf4:	f000 fd30 	bl	8009758 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b082      	sub	sp, #8
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2204      	movs	r2, #4
 8008d0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d12:	2300      	movs	r3, #0
 8008d14:	2200      	movs	r2, #0
 8008d16:	2100      	movs	r1, #0
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fcfc 	bl	8009716 <USBD_LL_Transmit>

  return USBD_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2205      	movs	r2, #5
 8008d34:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d38:	2300      	movs	r3, #0
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fd0a 	bl	8009758 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
	...

08008d50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008d54:	2200      	movs	r2, #0
 8008d56:	4912      	ldr	r1, [pc, #72]	@ (8008da0 <MX_USB_DEVICE_Init+0x50>)
 8008d58:	4812      	ldr	r0, [pc, #72]	@ (8008da4 <MX_USB_DEVICE_Init+0x54>)
 8008d5a:	f7fe fcd9 	bl	8007710 <USBD_Init>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d64:	f7f7 ffa6 	bl	8000cb4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008d68:	490f      	ldr	r1, [pc, #60]	@ (8008da8 <MX_USB_DEVICE_Init+0x58>)
 8008d6a:	480e      	ldr	r0, [pc, #56]	@ (8008da4 <MX_USB_DEVICE_Init+0x54>)
 8008d6c:	f7fe fd00 	bl	8007770 <USBD_RegisterClass>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d76:	f7f7 ff9d 	bl	8000cb4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008d7a:	490c      	ldr	r1, [pc, #48]	@ (8008dac <MX_USB_DEVICE_Init+0x5c>)
 8008d7c:	4809      	ldr	r0, [pc, #36]	@ (8008da4 <MX_USB_DEVICE_Init+0x54>)
 8008d7e:	f7fe fbf7 	bl	8007570 <USBD_CDC_RegisterInterface>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008d88:	f7f7 ff94 	bl	8000cb4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008d8c:	4805      	ldr	r0, [pc, #20]	@ (8008da4 <MX_USB_DEVICE_Init+0x54>)
 8008d8e:	f7fe fd25 	bl	80077dc <USBD_Start>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008d98:	f7f7 ff8c 	bl	8000cb4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008d9c:	bf00      	nop
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	200000e0 	.word	0x200000e0
 8008da4:	200004d8 	.word	0x200004d8
 8008da8:	20000044 	.word	0x20000044
 8008dac:	200000cc 	.word	0x200000cc

08008db0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008db4:	2200      	movs	r2, #0
 8008db6:	4905      	ldr	r1, [pc, #20]	@ (8008dcc <CDC_Init_FS+0x1c>)
 8008db8:	4805      	ldr	r0, [pc, #20]	@ (8008dd0 <CDC_Init_FS+0x20>)
 8008dba:	f7fe fbf3 	bl	80075a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008dbe:	4905      	ldr	r1, [pc, #20]	@ (8008dd4 <CDC_Init_FS+0x24>)
 8008dc0:	4803      	ldr	r0, [pc, #12]	@ (8008dd0 <CDC_Init_FS+0x20>)
 8008dc2:	f7fe fc11 	bl	80075e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008dc6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	200009b4 	.word	0x200009b4
 8008dd0:	200004d8 	.word	0x200004d8
 8008dd4:	200007b4 	.word	0x200007b4

08008dd8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008ddc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	4603      	mov	r3, r0
 8008df0:	6039      	str	r1, [r7, #0]
 8008df2:	71fb      	strb	r3, [r7, #7]
 8008df4:	4613      	mov	r3, r2
 8008df6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008df8:	79fb      	ldrb	r3, [r7, #7]
 8008dfa:	2b23      	cmp	r3, #35	@ 0x23
 8008dfc:	f200 8098 	bhi.w	8008f30 <CDC_Control_FS+0x148>
 8008e00:	a201      	add	r2, pc, #4	@ (adr r2, 8008e08 <CDC_Control_FS+0x20>)
 8008e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e06:	bf00      	nop
 8008e08:	08008f31 	.word	0x08008f31
 8008e0c:	08008f31 	.word	0x08008f31
 8008e10:	08008f31 	.word	0x08008f31
 8008e14:	08008f31 	.word	0x08008f31
 8008e18:	08008f31 	.word	0x08008f31
 8008e1c:	08008f31 	.word	0x08008f31
 8008e20:	08008f31 	.word	0x08008f31
 8008e24:	08008f31 	.word	0x08008f31
 8008e28:	08008f31 	.word	0x08008f31
 8008e2c:	08008f31 	.word	0x08008f31
 8008e30:	08008f31 	.word	0x08008f31
 8008e34:	08008f31 	.word	0x08008f31
 8008e38:	08008f31 	.word	0x08008f31
 8008e3c:	08008f31 	.word	0x08008f31
 8008e40:	08008f31 	.word	0x08008f31
 8008e44:	08008f31 	.word	0x08008f31
 8008e48:	08008f31 	.word	0x08008f31
 8008e4c:	08008f31 	.word	0x08008f31
 8008e50:	08008f31 	.word	0x08008f31
 8008e54:	08008f31 	.word	0x08008f31
 8008e58:	08008f31 	.word	0x08008f31
 8008e5c:	08008f31 	.word	0x08008f31
 8008e60:	08008f31 	.word	0x08008f31
 8008e64:	08008f31 	.word	0x08008f31
 8008e68:	08008f31 	.word	0x08008f31
 8008e6c:	08008f31 	.word	0x08008f31
 8008e70:	08008f31 	.word	0x08008f31
 8008e74:	08008f31 	.word	0x08008f31
 8008e78:	08008f31 	.word	0x08008f31
 8008e7c:	08008f31 	.word	0x08008f31
 8008e80:	08008f31 	.word	0x08008f31
 8008e84:	08008f31 	.word	0x08008f31
 8008e88:	08008e99 	.word	0x08008e99
 8008e8c:	08008edd 	.word	0x08008edd
 8008e90:	08008f31 	.word	0x08008f31
 8008e94:	08008f31 	.word	0x08008f31
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	021b      	lsls	r3, r3, #8
 8008ea6:	431a      	orrs	r2, r3
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	3302      	adds	r3, #2
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	041b      	lsls	r3, r3, #16
 8008eb0:	431a      	orrs	r2, r3
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	3303      	adds	r3, #3
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	061b      	lsls	r3, r3, #24
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	4b20      	ldr	r3, [pc, #128]	@ (8008f40 <CDC_Control_FS+0x158>)
 8008ec0:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	791a      	ldrb	r2, [r3, #4]
 8008ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8008f40 <CDC_Control_FS+0x158>)
 8008ec8:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	795a      	ldrb	r2, [r3, #5]
 8008ece:	4b1c      	ldr	r3, [pc, #112]	@ (8008f40 <CDC_Control_FS+0x158>)
 8008ed0:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	799a      	ldrb	r2, [r3, #6]
 8008ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8008f40 <CDC_Control_FS+0x158>)
 8008ed8:	719a      	strb	r2, [r3, #6]
    break;
 8008eda:	e02a      	b.n	8008f32 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008edc:	4b18      	ldr	r3, [pc, #96]	@ (8008f40 <CDC_Control_FS+0x158>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8008ee6:	4b16      	ldr	r3, [pc, #88]	@ (8008f40 <CDC_Control_FS+0x158>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	0a1a      	lsrs	r2, r3, #8
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	b2d2      	uxtb	r2, r2
 8008ef2:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8008ef4:	4b12      	ldr	r3, [pc, #72]	@ (8008f40 <CDC_Control_FS+0x158>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	0c1a      	lsrs	r2, r3, #16
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	3302      	adds	r3, #2
 8008efe:	b2d2      	uxtb	r2, r2
 8008f00:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8008f02:	4b0f      	ldr	r3, [pc, #60]	@ (8008f40 <CDC_Control_FS+0x158>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	0e1a      	lsrs	r2, r3, #24
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	3303      	adds	r3, #3
 8008f0c:	b2d2      	uxtb	r2, r2
 8008f0e:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	3304      	adds	r3, #4
 8008f14:	4a0a      	ldr	r2, [pc, #40]	@ (8008f40 <CDC_Control_FS+0x158>)
 8008f16:	7912      	ldrb	r2, [r2, #4]
 8008f18:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	3305      	adds	r3, #5
 8008f1e:	4a08      	ldr	r2, [pc, #32]	@ (8008f40 <CDC_Control_FS+0x158>)
 8008f20:	7952      	ldrb	r2, [r2, #5]
 8008f22:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	3306      	adds	r3, #6
 8008f28:	4a05      	ldr	r2, [pc, #20]	@ (8008f40 <CDC_Control_FS+0x158>)
 8008f2a:	7992      	ldrb	r2, [r2, #6]
 8008f2c:	701a      	strb	r2, [r3, #0]
    break;
 8008f2e:	e000      	b.n	8008f32 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008f30:	bf00      	nop
  }

  return (USBD_OK);
 8008f32:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	200000c4 	.word	0x200000c4

08008f44 <CDC_Receive_FS>:
  *
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 8008f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8008f7c <CDC_Receive_FS+0x38>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d006      	beq.n	8008f64 <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 8008f56:	4b09      	ldr	r3, [pc, #36]	@ (8008f7c <CDC_Receive_FS+0x38>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	6812      	ldr	r2, [r2, #0]
 8008f5e:	4611      	mov	r1, r2
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008f64:	6879      	ldr	r1, [r7, #4]
 8008f66:	4806      	ldr	r0, [pc, #24]	@ (8008f80 <CDC_Receive_FS+0x3c>)
 8008f68:	f7fe fb3e 	bl	80075e8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008f6c:	4804      	ldr	r0, [pc, #16]	@ (8008f80 <CDC_Receive_FS+0x3c>)
 8008f6e:	f7fe fb99 	bl	80076a4 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8008f72:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	20000bb4 	.word	0x20000bb4
 8008f80:	200004d8 	.word	0x200004d8

08008f84 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008f94:	4b0d      	ldr	r3, [pc, #52]	@ (8008fcc <CDC_Transmit_FS+0x48>)
 8008f96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008f9a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e00b      	b.n	8008fc2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008faa:	887b      	ldrh	r3, [r7, #2]
 8008fac:	461a      	mov	r2, r3
 8008fae:	6879      	ldr	r1, [r7, #4]
 8008fb0:	4806      	ldr	r0, [pc, #24]	@ (8008fcc <CDC_Transmit_FS+0x48>)
 8008fb2:	f7fe faf7 	bl	80075a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008fb6:	4805      	ldr	r0, [pc, #20]	@ (8008fcc <CDC_Transmit_FS+0x48>)
 8008fb8:	f7fe fb34 	bl	8007624 <USBD_CDC_TransmitPacket>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	200004d8 	.word	0x200004d8

08008fd0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	4613      	mov	r3, r2
 8008fdc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008fe2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	371c      	adds	r7, #28
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
	...

08008ff4 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 8008ffc:	4a04      	ldr	r2, [pc, #16]	@ (8009010 <CDC_Attach_Rx+0x1c>)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6013      	str	r3, [r2, #0]
}
 8009002:	bf00      	nop
 8009004:	370c      	adds	r7, #12
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	20000bb4 	.word	0x20000bb4

08009014 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	6039      	str	r1, [r7, #0]
 800901e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	2212      	movs	r2, #18
 8009024:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009026:	4b03      	ldr	r3, [pc, #12]	@ (8009034 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009028:	4618      	mov	r0, r3
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	200000fc 	.word	0x200000fc

08009038 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	4603      	mov	r3, r0
 8009040:	6039      	str	r1, [r7, #0]
 8009042:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	2204      	movs	r2, #4
 8009048:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800904a:	4b03      	ldr	r3, [pc, #12]	@ (8009058 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800904c:	4618      	mov	r0, r3
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr
 8009058:	20000110 	.word	0x20000110

0800905c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	4603      	mov	r3, r0
 8009064:	6039      	str	r1, [r7, #0]
 8009066:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009068:	79fb      	ldrb	r3, [r7, #7]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d105      	bne.n	800907a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	4907      	ldr	r1, [pc, #28]	@ (8009090 <USBD_FS_ProductStrDescriptor+0x34>)
 8009072:	4808      	ldr	r0, [pc, #32]	@ (8009094 <USBD_FS_ProductStrDescriptor+0x38>)
 8009074:	f7ff fd78 	bl	8008b68 <USBD_GetString>
 8009078:	e004      	b.n	8009084 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	4904      	ldr	r1, [pc, #16]	@ (8009090 <USBD_FS_ProductStrDescriptor+0x34>)
 800907e:	4805      	ldr	r0, [pc, #20]	@ (8009094 <USBD_FS_ProductStrDescriptor+0x38>)
 8009080:	f7ff fd72 	bl	8008b68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009084:	4b02      	ldr	r3, [pc, #8]	@ (8009090 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009086:	4618      	mov	r0, r3
 8009088:	3708      	adds	r7, #8
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	20000bb8 	.word	0x20000bb8
 8009094:	080098b8 	.word	0x080098b8

08009098 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	4603      	mov	r3, r0
 80090a0:	6039      	str	r1, [r7, #0]
 80090a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	4904      	ldr	r1, [pc, #16]	@ (80090b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80090a8:	4804      	ldr	r0, [pc, #16]	@ (80090bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80090aa:	f7ff fd5d 	bl	8008b68 <USBD_GetString>
  return USBD_StrDesc;
 80090ae:	4b02      	ldr	r3, [pc, #8]	@ (80090b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	3708      	adds	r7, #8
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd80      	pop	{r7, pc}
 80090b8:	20000bb8 	.word	0x20000bb8
 80090bc:	080098d0 	.word	0x080098d0

080090c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	4603      	mov	r3, r0
 80090c8:	6039      	str	r1, [r7, #0]
 80090ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	221a      	movs	r2, #26
 80090d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80090d2:	f000 f843 	bl	800915c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80090d6:	4b02      	ldr	r3, [pc, #8]	@ (80090e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	20000114 	.word	0x20000114

080090e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	4603      	mov	r3, r0
 80090ec:	6039      	str	r1, [r7, #0]
 80090ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80090f0:	79fb      	ldrb	r3, [r7, #7]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d105      	bne.n	8009102 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80090f6:	683a      	ldr	r2, [r7, #0]
 80090f8:	4907      	ldr	r1, [pc, #28]	@ (8009118 <USBD_FS_ConfigStrDescriptor+0x34>)
 80090fa:	4808      	ldr	r0, [pc, #32]	@ (800911c <USBD_FS_ConfigStrDescriptor+0x38>)
 80090fc:	f7ff fd34 	bl	8008b68 <USBD_GetString>
 8009100:	e004      	b.n	800910c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009102:	683a      	ldr	r2, [r7, #0]
 8009104:	4904      	ldr	r1, [pc, #16]	@ (8009118 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009106:	4805      	ldr	r0, [pc, #20]	@ (800911c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009108:	f7ff fd2e 	bl	8008b68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800910c:	4b02      	ldr	r3, [pc, #8]	@ (8009118 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800910e:	4618      	mov	r0, r3
 8009110:	3708      	adds	r7, #8
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	20000bb8 	.word	0x20000bb8
 800911c:	080098e4 	.word	0x080098e4

08009120 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	4603      	mov	r3, r0
 8009128:	6039      	str	r1, [r7, #0]
 800912a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800912c:	79fb      	ldrb	r3, [r7, #7]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d105      	bne.n	800913e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	4907      	ldr	r1, [pc, #28]	@ (8009154 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009136:	4808      	ldr	r0, [pc, #32]	@ (8009158 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009138:	f7ff fd16 	bl	8008b68 <USBD_GetString>
 800913c:	e004      	b.n	8009148 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800913e:	683a      	ldr	r2, [r7, #0]
 8009140:	4904      	ldr	r1, [pc, #16]	@ (8009154 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009142:	4805      	ldr	r0, [pc, #20]	@ (8009158 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009144:	f7ff fd10 	bl	8008b68 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009148:	4b02      	ldr	r3, [pc, #8]	@ (8009154 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800914a:	4618      	mov	r0, r3
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20000bb8 	.word	0x20000bb8
 8009158:	080098f0 	.word	0x080098f0

0800915c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009162:	4b0f      	ldr	r3, [pc, #60]	@ (80091a0 <Get_SerialNum+0x44>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009168:	4b0e      	ldr	r3, [pc, #56]	@ (80091a4 <Get_SerialNum+0x48>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800916e:	4b0e      	ldr	r3, [pc, #56]	@ (80091a8 <Get_SerialNum+0x4c>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009174:	68fa      	ldr	r2, [r7, #12]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4413      	add	r3, r2
 800917a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d009      	beq.n	8009196 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009182:	2208      	movs	r2, #8
 8009184:	4909      	ldr	r1, [pc, #36]	@ (80091ac <Get_SerialNum+0x50>)
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f000 f814 	bl	80091b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800918c:	2204      	movs	r2, #4
 800918e:	4908      	ldr	r1, [pc, #32]	@ (80091b0 <Get_SerialNum+0x54>)
 8009190:	68b8      	ldr	r0, [r7, #8]
 8009192:	f000 f80f 	bl	80091b4 <IntToUnicode>
  }
}
 8009196:	bf00      	nop
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	1fff7a10 	.word	0x1fff7a10
 80091a4:	1fff7a14 	.word	0x1fff7a14
 80091a8:	1fff7a18 	.word	0x1fff7a18
 80091ac:	20000116 	.word	0x20000116
 80091b0:	20000126 	.word	0x20000126

080091b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	4613      	mov	r3, r2
 80091c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80091c2:	2300      	movs	r3, #0
 80091c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80091c6:	2300      	movs	r3, #0
 80091c8:	75fb      	strb	r3, [r7, #23]
 80091ca:	e027      	b.n	800921c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	0f1b      	lsrs	r3, r3, #28
 80091d0:	2b09      	cmp	r3, #9
 80091d2:	d80b      	bhi.n	80091ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	0f1b      	lsrs	r3, r3, #28
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	7dfb      	ldrb	r3, [r7, #23]
 80091dc:	005b      	lsls	r3, r3, #1
 80091de:	4619      	mov	r1, r3
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	440b      	add	r3, r1
 80091e4:	3230      	adds	r2, #48	@ 0x30
 80091e6:	b2d2      	uxtb	r2, r2
 80091e8:	701a      	strb	r2, [r3, #0]
 80091ea:	e00a      	b.n	8009202 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	0f1b      	lsrs	r3, r3, #28
 80091f0:	b2da      	uxtb	r2, r3
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
 80091f4:	005b      	lsls	r3, r3, #1
 80091f6:	4619      	mov	r1, r3
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	440b      	add	r3, r1
 80091fc:	3237      	adds	r2, #55	@ 0x37
 80091fe:	b2d2      	uxtb	r2, r2
 8009200:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	011b      	lsls	r3, r3, #4
 8009206:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009208:	7dfb      	ldrb	r3, [r7, #23]
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	3301      	adds	r3, #1
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	4413      	add	r3, r2
 8009212:	2200      	movs	r2, #0
 8009214:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009216:	7dfb      	ldrb	r3, [r7, #23]
 8009218:	3301      	adds	r3, #1
 800921a:	75fb      	strb	r3, [r7, #23]
 800921c:	7dfa      	ldrb	r2, [r7, #23]
 800921e:	79fb      	ldrb	r3, [r7, #7]
 8009220:	429a      	cmp	r2, r3
 8009222:	d3d3      	bcc.n	80091cc <IntToUnicode+0x18>
  }
}
 8009224:	bf00      	nop
 8009226:	bf00      	nop
 8009228:	371c      	adds	r7, #28
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
	...

08009234 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b08a      	sub	sp, #40	@ 0x28
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800923c:	f107 0314 	add.w	r3, r7, #20
 8009240:	2200      	movs	r2, #0
 8009242:	601a      	str	r2, [r3, #0]
 8009244:	605a      	str	r2, [r3, #4]
 8009246:	609a      	str	r2, [r3, #8]
 8009248:	60da      	str	r2, [r3, #12]
 800924a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009254:	d13a      	bne.n	80092cc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009256:	2300      	movs	r3, #0
 8009258:	613b      	str	r3, [r7, #16]
 800925a:	4b1e      	ldr	r3, [pc, #120]	@ (80092d4 <HAL_PCD_MspInit+0xa0>)
 800925c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800925e:	4a1d      	ldr	r2, [pc, #116]	@ (80092d4 <HAL_PCD_MspInit+0xa0>)
 8009260:	f043 0301 	orr.w	r3, r3, #1
 8009264:	6313      	str	r3, [r2, #48]	@ 0x30
 8009266:	4b1b      	ldr	r3, [pc, #108]	@ (80092d4 <HAL_PCD_MspInit+0xa0>)
 8009268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800926a:	f003 0301 	and.w	r3, r3, #1
 800926e:	613b      	str	r3, [r7, #16]
 8009270:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009272:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009278:	2302      	movs	r3, #2
 800927a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800927c:	2300      	movs	r3, #0
 800927e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009280:	2303      	movs	r3, #3
 8009282:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009284:	230a      	movs	r3, #10
 8009286:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009288:	f107 0314 	add.w	r3, r7, #20
 800928c:	4619      	mov	r1, r3
 800928e:	4812      	ldr	r0, [pc, #72]	@ (80092d8 <HAL_PCD_MspInit+0xa4>)
 8009290:	f7f9 fb86 	bl	80029a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009294:	4b0f      	ldr	r3, [pc, #60]	@ (80092d4 <HAL_PCD_MspInit+0xa0>)
 8009296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009298:	4a0e      	ldr	r2, [pc, #56]	@ (80092d4 <HAL_PCD_MspInit+0xa0>)
 800929a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800929e:	6353      	str	r3, [r2, #52]	@ 0x34
 80092a0:	2300      	movs	r3, #0
 80092a2:	60fb      	str	r3, [r7, #12]
 80092a4:	4b0b      	ldr	r3, [pc, #44]	@ (80092d4 <HAL_PCD_MspInit+0xa0>)
 80092a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092a8:	4a0a      	ldr	r2, [pc, #40]	@ (80092d4 <HAL_PCD_MspInit+0xa0>)
 80092aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80092ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80092b0:	4b08      	ldr	r3, [pc, #32]	@ (80092d4 <HAL_PCD_MspInit+0xa0>)
 80092b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092b8:	60fb      	str	r3, [r7, #12]
 80092ba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80092bc:	2200      	movs	r2, #0
 80092be:	2100      	movs	r1, #0
 80092c0:	2043      	movs	r0, #67	@ 0x43
 80092c2:	f7f8 ffc6 	bl	8002252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80092c6:	2043      	movs	r0, #67	@ 0x43
 80092c8:	f7f8 ffdf 	bl	800228a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80092cc:	bf00      	nop
 80092ce:	3728      	adds	r7, #40	@ 0x28
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	40023800 	.word	0x40023800
 80092d8:	40020000 	.word	0x40020000

080092dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80092f0:	4619      	mov	r1, r3
 80092f2:	4610      	mov	r0, r2
 80092f4:	f7fe fabf 	bl	8007876 <USBD_LL_SetupStage>
}
 80092f8:	bf00      	nop
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	460b      	mov	r3, r1
 800930a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009312:	78fa      	ldrb	r2, [r7, #3]
 8009314:	6879      	ldr	r1, [r7, #4]
 8009316:	4613      	mov	r3, r2
 8009318:	00db      	lsls	r3, r3, #3
 800931a:	4413      	add	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	440b      	add	r3, r1
 8009320:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	78fb      	ldrb	r3, [r7, #3]
 8009328:	4619      	mov	r1, r3
 800932a:	f7fe faf9 	bl	8007920 <USBD_LL_DataOutStage>
}
 800932e:	bf00      	nop
 8009330:	3708      	adds	r7, #8
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b082      	sub	sp, #8
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	460b      	mov	r3, r1
 8009340:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009348:	78fa      	ldrb	r2, [r7, #3]
 800934a:	6879      	ldr	r1, [r7, #4]
 800934c:	4613      	mov	r3, r2
 800934e:	00db      	lsls	r3, r3, #3
 8009350:	4413      	add	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	440b      	add	r3, r1
 8009356:	3320      	adds	r3, #32
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	78fb      	ldrb	r3, [r7, #3]
 800935c:	4619      	mov	r1, r3
 800935e:	f7fe fb9b 	bl	8007a98 <USBD_LL_DataInStage>
}
 8009362:	bf00      	nop
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b082      	sub	sp, #8
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009378:	4618      	mov	r0, r3
 800937a:	f7fe fcdf 	bl	8007d3c <USBD_LL_SOF>
}
 800937e:	bf00      	nop
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b084      	sub	sp, #16
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800938e:	2301      	movs	r3, #1
 8009390:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	79db      	ldrb	r3, [r3, #7]
 8009396:	2b02      	cmp	r3, #2
 8009398:	d001      	beq.n	800939e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800939a:	f7f7 fc8b 	bl	8000cb4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093a4:	7bfa      	ldrb	r2, [r7, #15]
 80093a6:	4611      	mov	r1, r2
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fe fc83 	bl	8007cb4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7fe fc2a 	bl	8007c0e <USBD_LL_Reset>
}
 80093ba:	bf00      	nop
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
	...

080093c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fe fc7e 	bl	8007cd4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	6812      	ldr	r2, [r2, #0]
 80093e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80093ea:	f043 0301 	orr.w	r3, r3, #1
 80093ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	7adb      	ldrb	r3, [r3, #11]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d005      	beq.n	8009404 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093f8:	4b04      	ldr	r3, [pc, #16]	@ (800940c <HAL_PCD_SuspendCallback+0x48>)
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	4a03      	ldr	r2, [pc, #12]	@ (800940c <HAL_PCD_SuspendCallback+0x48>)
 80093fe:	f043 0306 	orr.w	r3, r3, #6
 8009402:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009404:	bf00      	nop
 8009406:	3708      	adds	r7, #8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}
 800940c:	e000ed00 	.word	0xe000ed00

08009410 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800941e:	4618      	mov	r0, r3
 8009420:	f7fe fc74 	bl	8007d0c <USBD_LL_Resume>
}
 8009424:	bf00      	nop
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	460b      	mov	r3, r1
 8009436:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800943e:	78fa      	ldrb	r2, [r7, #3]
 8009440:	4611      	mov	r1, r2
 8009442:	4618      	mov	r0, r3
 8009444:	f7fe fccc 	bl	8007de0 <USBD_LL_IsoOUTIncomplete>
}
 8009448:	bf00      	nop
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	460b      	mov	r3, r1
 800945a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009462:	78fa      	ldrb	r2, [r7, #3]
 8009464:	4611      	mov	r1, r2
 8009466:	4618      	mov	r0, r3
 8009468:	f7fe fc88 	bl	8007d7c <USBD_LL_IsoINIncomplete>
}
 800946c:	bf00      	nop
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009482:	4618      	mov	r0, r3
 8009484:	f7fe fcde 	bl	8007e44 <USBD_LL_DevConnected>
}
 8009488:	bf00      	nop
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800949e:	4618      	mov	r0, r3
 80094a0:	f7fe fcdb 	bl	8007e5a <USBD_LL_DevDisconnected>
}
 80094a4:	bf00      	nop
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d13c      	bne.n	8009536 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80094bc:	4a20      	ldr	r2, [pc, #128]	@ (8009540 <USBD_LL_Init+0x94>)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a1e      	ldr	r2, [pc, #120]	@ (8009540 <USBD_LL_Init+0x94>)
 80094c8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80094cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009540 <USBD_LL_Init+0x94>)
 80094ce:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80094d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80094d4:	4b1a      	ldr	r3, [pc, #104]	@ (8009540 <USBD_LL_Init+0x94>)
 80094d6:	2204      	movs	r2, #4
 80094d8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80094da:	4b19      	ldr	r3, [pc, #100]	@ (8009540 <USBD_LL_Init+0x94>)
 80094dc:	2202      	movs	r2, #2
 80094de:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80094e0:	4b17      	ldr	r3, [pc, #92]	@ (8009540 <USBD_LL_Init+0x94>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80094e6:	4b16      	ldr	r3, [pc, #88]	@ (8009540 <USBD_LL_Init+0x94>)
 80094e8:	2202      	movs	r2, #2
 80094ea:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80094ec:	4b14      	ldr	r3, [pc, #80]	@ (8009540 <USBD_LL_Init+0x94>)
 80094ee:	2200      	movs	r2, #0
 80094f0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80094f2:	4b13      	ldr	r3, [pc, #76]	@ (8009540 <USBD_LL_Init+0x94>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80094f8:	4b11      	ldr	r3, [pc, #68]	@ (8009540 <USBD_LL_Init+0x94>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80094fe:	4b10      	ldr	r3, [pc, #64]	@ (8009540 <USBD_LL_Init+0x94>)
 8009500:	2200      	movs	r2, #0
 8009502:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009504:	4b0e      	ldr	r3, [pc, #56]	@ (8009540 <USBD_LL_Init+0x94>)
 8009506:	2200      	movs	r2, #0
 8009508:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800950a:	480d      	ldr	r0, [pc, #52]	@ (8009540 <USBD_LL_Init+0x94>)
 800950c:	f7f9 fd44 	bl	8002f98 <HAL_PCD_Init>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d001      	beq.n	800951a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009516:	f7f7 fbcd 	bl	8000cb4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800951a:	2180      	movs	r1, #128	@ 0x80
 800951c:	4808      	ldr	r0, [pc, #32]	@ (8009540 <USBD_LL_Init+0x94>)
 800951e:	f7fa ff70 	bl	8004402 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009522:	2240      	movs	r2, #64	@ 0x40
 8009524:	2100      	movs	r1, #0
 8009526:	4806      	ldr	r0, [pc, #24]	@ (8009540 <USBD_LL_Init+0x94>)
 8009528:	f7fa ff24 	bl	8004374 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800952c:	2280      	movs	r2, #128	@ 0x80
 800952e:	2101      	movs	r1, #1
 8009530:	4803      	ldr	r0, [pc, #12]	@ (8009540 <USBD_LL_Init+0x94>)
 8009532:	f7fa ff1f 	bl	8004374 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	20000db8 	.word	0x20000db8

08009544 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800954c:	2300      	movs	r3, #0
 800954e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009550:	2300      	movs	r3, #0
 8009552:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800955a:	4618      	mov	r0, r3
 800955c:	f7f9 fe2b 	bl	80031b6 <HAL_PCD_Start>
 8009560:	4603      	mov	r3, r0
 8009562:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	4618      	mov	r0, r3
 8009568:	f000 f942 	bl	80097f0 <USBD_Get_USB_Status>
 800956c:	4603      	mov	r3, r0
 800956e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009570:	7bbb      	ldrb	r3, [r7, #14]
}
 8009572:	4618      	mov	r0, r3
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b084      	sub	sp, #16
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	4608      	mov	r0, r1
 8009584:	4611      	mov	r1, r2
 8009586:	461a      	mov	r2, r3
 8009588:	4603      	mov	r3, r0
 800958a:	70fb      	strb	r3, [r7, #3]
 800958c:	460b      	mov	r3, r1
 800958e:	70bb      	strb	r3, [r7, #2]
 8009590:	4613      	mov	r3, r2
 8009592:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80095a2:	78bb      	ldrb	r3, [r7, #2]
 80095a4:	883a      	ldrh	r2, [r7, #0]
 80095a6:	78f9      	ldrb	r1, [r7, #3]
 80095a8:	f7fa faff 	bl	8003baa <HAL_PCD_EP_Open>
 80095ac:	4603      	mov	r3, r0
 80095ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 f91c 	bl	80097f0 <USBD_Get_USB_Status>
 80095b8:	4603      	mov	r3, r0
 80095ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	460b      	mov	r3, r1
 80095d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80095e0:	78fa      	ldrb	r2, [r7, #3]
 80095e2:	4611      	mov	r1, r2
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fa fb4a 	bl	8003c7e <HAL_PCD_EP_Close>
 80095ea:	4603      	mov	r3, r0
 80095ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095ee:	7bfb      	ldrb	r3, [r7, #15]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 f8fd 	bl	80097f0 <USBD_Get_USB_Status>
 80095f6:	4603      	mov	r3, r0
 80095f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
 800960c:	460b      	mov	r3, r1
 800960e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009610:	2300      	movs	r3, #0
 8009612:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009614:	2300      	movs	r3, #0
 8009616:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800961e:	78fa      	ldrb	r2, [r7, #3]
 8009620:	4611      	mov	r1, r2
 8009622:	4618      	mov	r0, r3
 8009624:	f7fa fc02 	bl	8003e2c <HAL_PCD_EP_SetStall>
 8009628:	4603      	mov	r3, r0
 800962a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	4618      	mov	r0, r3
 8009630:	f000 f8de 	bl	80097f0 <USBD_Get_USB_Status>
 8009634:	4603      	mov	r3, r0
 8009636:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009638:	7bbb      	ldrb	r3, [r7, #14]
}
 800963a:	4618      	mov	r0, r3
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b084      	sub	sp, #16
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	460b      	mov	r3, r1
 800964c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800965c:	78fa      	ldrb	r2, [r7, #3]
 800965e:	4611      	mov	r1, r2
 8009660:	4618      	mov	r0, r3
 8009662:	f7fa fc46 	bl	8003ef2 <HAL_PCD_EP_ClrStall>
 8009666:	4603      	mov	r3, r0
 8009668:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800966a:	7bfb      	ldrb	r3, [r7, #15]
 800966c:	4618      	mov	r0, r3
 800966e:	f000 f8bf 	bl	80097f0 <USBD_Get_USB_Status>
 8009672:	4603      	mov	r3, r0
 8009674:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009676:	7bbb      	ldrb	r3, [r7, #14]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	460b      	mov	r3, r1
 800968a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009692:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009698:	2b00      	cmp	r3, #0
 800969a:	da0b      	bge.n	80096b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800969c:	78fb      	ldrb	r3, [r7, #3]
 800969e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096a2:	68f9      	ldr	r1, [r7, #12]
 80096a4:	4613      	mov	r3, r2
 80096a6:	00db      	lsls	r3, r3, #3
 80096a8:	4413      	add	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	440b      	add	r3, r1
 80096ae:	3316      	adds	r3, #22
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	e00b      	b.n	80096cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80096b4:	78fb      	ldrb	r3, [r7, #3]
 80096b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80096ba:	68f9      	ldr	r1, [r7, #12]
 80096bc:	4613      	mov	r3, r2
 80096be:	00db      	lsls	r3, r3, #3
 80096c0:	4413      	add	r3, r2
 80096c2:	009b      	lsls	r3, r3, #2
 80096c4:	440b      	add	r3, r1
 80096c6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80096ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	460b      	mov	r3, r1
 80096e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80096f2:	78fa      	ldrb	r2, [r7, #3]
 80096f4:	4611      	mov	r1, r2
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fa fa33 	bl	8003b62 <HAL_PCD_SetAddress>
 80096fc:	4603      	mov	r3, r0
 80096fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009700:	7bfb      	ldrb	r3, [r7, #15]
 8009702:	4618      	mov	r0, r3
 8009704:	f000 f874 	bl	80097f0 <USBD_Get_USB_Status>
 8009708:	4603      	mov	r3, r0
 800970a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800970c:	7bbb      	ldrb	r3, [r7, #14]
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b086      	sub	sp, #24
 800971a:	af00      	add	r7, sp, #0
 800971c:	60f8      	str	r0, [r7, #12]
 800971e:	607a      	str	r2, [r7, #4]
 8009720:	603b      	str	r3, [r7, #0]
 8009722:	460b      	mov	r3, r1
 8009724:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009734:	7af9      	ldrb	r1, [r7, #11]
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	f7fa fb3d 	bl	8003db8 <HAL_PCD_EP_Transmit>
 800973e:	4603      	mov	r3, r0
 8009740:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009742:	7dfb      	ldrb	r3, [r7, #23]
 8009744:	4618      	mov	r0, r3
 8009746:	f000 f853 	bl	80097f0 <USBD_Get_USB_Status>
 800974a:	4603      	mov	r3, r0
 800974c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800974e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3718      	adds	r7, #24
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	607a      	str	r2, [r7, #4]
 8009762:	603b      	str	r3, [r7, #0]
 8009764:	460b      	mov	r3, r1
 8009766:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009768:	2300      	movs	r3, #0
 800976a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800976c:	2300      	movs	r3, #0
 800976e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009776:	7af9      	ldrb	r1, [r7, #11]
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	f7fa fac9 	bl	8003d12 <HAL_PCD_EP_Receive>
 8009780:	4603      	mov	r3, r0
 8009782:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009784:	7dfb      	ldrb	r3, [r7, #23]
 8009786:	4618      	mov	r0, r3
 8009788:	f000 f832 	bl	80097f0 <USBD_Get_USB_Status>
 800978c:	4603      	mov	r3, r0
 800978e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009790:	7dbb      	ldrb	r3, [r7, #22]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3718      	adds	r7, #24
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b082      	sub	sp, #8
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
 80097a2:	460b      	mov	r3, r1
 80097a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097ac:	78fa      	ldrb	r2, [r7, #3]
 80097ae:	4611      	mov	r1, r2
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7fa fae9 	bl	8003d88 <HAL_PCD_EP_GetRxCount>
 80097b6:	4603      	mov	r3, r0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80097c8:	4b03      	ldr	r3, [pc, #12]	@ (80097d8 <USBD_static_malloc+0x18>)
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	370c      	adds	r7, #12
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr
 80097d6:	bf00      	nop
 80097d8:	2000129c 	.word	0x2000129c

080097dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]

}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	4603      	mov	r3, r0
 80097f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097fa:	2300      	movs	r3, #0
 80097fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80097fe:	79fb      	ldrb	r3, [r7, #7]
 8009800:	2b03      	cmp	r3, #3
 8009802:	d817      	bhi.n	8009834 <USBD_Get_USB_Status+0x44>
 8009804:	a201      	add	r2, pc, #4	@ (adr r2, 800980c <USBD_Get_USB_Status+0x1c>)
 8009806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980a:	bf00      	nop
 800980c:	0800981d 	.word	0x0800981d
 8009810:	08009823 	.word	0x08009823
 8009814:	08009829 	.word	0x08009829
 8009818:	0800982f 	.word	0x0800982f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	73fb      	strb	r3, [r7, #15]
    break;
 8009820:	e00b      	b.n	800983a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009822:	2303      	movs	r3, #3
 8009824:	73fb      	strb	r3, [r7, #15]
    break;
 8009826:	e008      	b.n	800983a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009828:	2301      	movs	r3, #1
 800982a:	73fb      	strb	r3, [r7, #15]
    break;
 800982c:	e005      	b.n	800983a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800982e:	2303      	movs	r3, #3
 8009830:	73fb      	strb	r3, [r7, #15]
    break;
 8009832:	e002      	b.n	800983a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009834:	2303      	movs	r3, #3
 8009836:	73fb      	strb	r3, [r7, #15]
    break;
 8009838:	bf00      	nop
  }
  return usb_status;
 800983a:	7bfb      	ldrb	r3, [r7, #15]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3714      	adds	r7, #20
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <memset>:
 8009848:	4402      	add	r2, r0
 800984a:	4603      	mov	r3, r0
 800984c:	4293      	cmp	r3, r2
 800984e:	d100      	bne.n	8009852 <memset+0xa>
 8009850:	4770      	bx	lr
 8009852:	f803 1b01 	strb.w	r1, [r3], #1
 8009856:	e7f9      	b.n	800984c <memset+0x4>

08009858 <__libc_init_array>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	4d0d      	ldr	r5, [pc, #52]	@ (8009890 <__libc_init_array+0x38>)
 800985c:	4c0d      	ldr	r4, [pc, #52]	@ (8009894 <__libc_init_array+0x3c>)
 800985e:	1b64      	subs	r4, r4, r5
 8009860:	10a4      	asrs	r4, r4, #2
 8009862:	2600      	movs	r6, #0
 8009864:	42a6      	cmp	r6, r4
 8009866:	d109      	bne.n	800987c <__libc_init_array+0x24>
 8009868:	4d0b      	ldr	r5, [pc, #44]	@ (8009898 <__libc_init_array+0x40>)
 800986a:	4c0c      	ldr	r4, [pc, #48]	@ (800989c <__libc_init_array+0x44>)
 800986c:	f000 f818 	bl	80098a0 <_init>
 8009870:	1b64      	subs	r4, r4, r5
 8009872:	10a4      	asrs	r4, r4, #2
 8009874:	2600      	movs	r6, #0
 8009876:	42a6      	cmp	r6, r4
 8009878:	d105      	bne.n	8009886 <__libc_init_array+0x2e>
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009880:	4798      	blx	r3
 8009882:	3601      	adds	r6, #1
 8009884:	e7ee      	b.n	8009864 <__libc_init_array+0xc>
 8009886:	f855 3b04 	ldr.w	r3, [r5], #4
 800988a:	4798      	blx	r3
 800988c:	3601      	adds	r6, #1
 800988e:	e7f2      	b.n	8009876 <__libc_init_array+0x1e>
 8009890:	08009938 	.word	0x08009938
 8009894:	08009938 	.word	0x08009938
 8009898:	08009938 	.word	0x08009938
 800989c:	0800993c 	.word	0x0800993c

080098a0 <_init>:
 80098a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a2:	bf00      	nop
 80098a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098a6:	bc08      	pop	{r3}
 80098a8:	469e      	mov	lr, r3
 80098aa:	4770      	bx	lr

080098ac <_fini>:
 80098ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ae:	bf00      	nop
 80098b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098b2:	bc08      	pop	{r3}
 80098b4:	469e      	mov	lr, r3
 80098b6:	4770      	bx	lr
