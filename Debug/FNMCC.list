
FNMCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd84  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800bf1c  0800bf1c  0000cf1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf94  0800bf94  0000d130  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bf94  0800bf94  0000cf94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf9c  0800bf9c  0000d130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf9c  0800bf9c  0000cf9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bfa0  0800bfa0  0000cfa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000130  20000000  0800bfa4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001854  20000130  0800c0d4  0000d130  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001984  0800c0d4  0000d984  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a113  00000000  00000000  0000d160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004057  00000000  00000000  00027273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  0002b2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001222  00000000  00000000  0002ca48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005e29  00000000  00000000  0002dc6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e227  00000000  00000000  00033a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f6dd  00000000  00000000  00051cba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1397  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006330  00000000  00000000  000f13dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f770c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000130 	.word	0x20000130
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800bf04 	.word	0x0800bf04

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000134 	.word	0x20000134
 80001d4:	0800bf04 	.word	0x0800bf04

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++) {
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	e00a      	b.n	8000528 <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 8000512:	4a0a      	ldr	r2, [pc, #40]	@ (800053c <HAL_ADC_ConvCpltCallback+0x38>)
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800051a:	4a09      	ldr	r2, [pc, #36]	@ (8000540 <HAL_ADC_ConvCpltCallback+0x3c>)
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	3301      	adds	r3, #1
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b07      	cmp	r3, #7
 800052c:	ddf1      	ble.n	8000512 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 800052e:	bf00      	nop
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	20000354 	.word	0x20000354
 8000540:	20000364 	.word	0x20000364

08000544 <HAL_I2C_MemTxCpltCallback>:
//void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	//Control del final de operaciones
    //if (hi2c->Instance == hi2c1.Instance) {
        SSD1306_TxCplt = 1;
 800054c:	4b04      	ldr	r3, [pc, #16]	@ (8000560 <HAL_I2C_MemTxCpltCallback+0x1c>)
 800054e:	2201      	movs	r2, #1
 8000550:	701a      	strb	r2, [r3, #0]
    //}
}
 8000552:	bf00      	nop
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	2000058d 	.word	0x2000058d

08000564 <HAL_TIM_PeriodElapsedCallback>:
//}
//void HAL_I2C_ER_IRQHandler(){
//	HAL_I2C_ER_IRQHandler(&hi2c1);
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a0e      	ldr	r2, [pc, #56]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d116      	bne.n	80005a4 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000576:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	3301      	adds	r3, #1
 800057c:	b2da      	uxtb	r2, r3
 800057e:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000580:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 8000582:	4b0b      	ldr	r3, [pc, #44]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b28      	cmp	r3, #40	@ 0x28
 8000588:	d107      	bne.n	800059a <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 800058a:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
			IS10MS=TRUE;
 8000590:	4a08      	ldr	r2, [pc, #32]	@ (80005b4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000592:	7813      	ldrb	r3, [r2, #0]
 8000594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000598:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 800059a:	2208      	movs	r2, #8
 800059c:	4906      	ldr	r1, [pc, #24]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800059e:	4807      	ldr	r0, [pc, #28]	@ (80005bc <HAL_TIM_PeriodElapsedCallback+0x58>)
 80005a0:	f001 fc46 	bl	8001e30 <HAL_ADC_Start_DMA>
	}
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40010000 	.word	0x40010000
 80005b0:	20000350 	.word	0x20000350
 80005b4:	2000058c 	.word	0x2000058c
 80005b8:	20000354 	.word	0x20000354
 80005bc:	2000014c 	.word	0x2000014c

080005c0 <USBRxData>:

void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 80005c0:	b490      	push	{r4, r7}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]
 80005ce:	e018      	b.n	8000602 <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	441a      	add	r2, r3
 80005d6:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <USBRxData+0x58>)
 80005d8:	6819      	ldr	r1, [r3, #0]
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <USBRxData+0x58>)
 80005dc:	795b      	ldrb	r3, [r3, #5]
 80005de:	1c58      	adds	r0, r3, #1
 80005e0:	b2c4      	uxtb	r4, r0
 80005e2:	480d      	ldr	r0, [pc, #52]	@ (8000618 <USBRxData+0x58>)
 80005e4:	7144      	strb	r4, [r0, #5]
 80005e6:	440b      	add	r3, r1
 80005e8:	7812      	ldrb	r2, [r2, #0]
 80005ea:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 80005ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000618 <USBRxData+0x58>)
 80005ee:	795a      	ldrb	r2, [r3, #5]
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <USBRxData+0x58>)
 80005f2:	799b      	ldrb	r3, [r3, #6]
 80005f4:	4013      	ands	r3, r2
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b07      	ldr	r3, [pc, #28]	@ (8000618 <USBRxData+0x58>)
 80005fa:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	3301      	adds	r3, #1
 8000600:	73fb      	strb	r3, [r7, #15]
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	683a      	ldr	r2, [r7, #0]
 8000606:	429a      	cmp	r2, r3
 8000608:	d8e2      	bhi.n	80005d0 <USBRxData+0x10>
	}

}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bc90      	pop	{r4, r7}
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000380 	.word	0x20000380

0800061c <USBTask>:

void USBTask() {
 800061c:	b580      	push	{r7, lr}
 800061e:	b0c2      	sub	sp, #264	@ 0x108
 8000620:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 8000622:	4b22      	ldr	r3, [pc, #136]	@ (80006ac <USBTask+0x90>)
 8000624:	791a      	ldrb	r2, [r3, #4]
 8000626:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <USBTask+0x90>)
 8000628:	795b      	ldrb	r3, [r3, #5]
 800062a:	429a      	cmp	r2, r3
 800062c:	d039      	beq.n	80006a2 <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (decodeHeader(&USBRx))
 800062e:	481f      	ldr	r0, [pc, #124]	@ (80006ac <USBTask+0x90>)
 8000630:	f000 fcac 	bl	8000f8c <decodeHeader>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 800063a:	491d      	ldr	r1, [pc, #116]	@ (80006b0 <USBTask+0x94>)
 800063c:	481b      	ldr	r0, [pc, #108]	@ (80006ac <USBTask+0x90>)
 800063e:	f000 f839 	bl	80006b4 <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000642:	2300      	movs	r3, #0
 8000644:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000648:	e01d      	b.n	8000686 <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 800064a:	4b19      	ldr	r3, [pc, #100]	@ (80006b0 <USBTask+0x94>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <USBTask+0x94>)
 8000650:	7a1b      	ldrb	r3, [r3, #8]
 8000652:	1c59      	adds	r1, r3, #1
 8000654:	b2c8      	uxtb	r0, r1
 8000656:	4916      	ldr	r1, [pc, #88]	@ (80006b0 <USBTask+0x94>)
 8000658:	7208      	strb	r0, [r1, #8]
 800065a:	441a      	add	r2, r3
 800065c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000660:	7811      	ldrb	r1, [r2, #0]
 8000662:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000666:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800066a:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 800066c:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <USBTask+0x94>)
 800066e:	7a1a      	ldrb	r2, [r3, #8]
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <USBTask+0x94>)
 8000672:	799b      	ldrb	r3, [r3, #6]
 8000674:	4013      	ands	r3, r2
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <USBTask+0x94>)
 800067a:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 800067c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000680:	3301      	adds	r3, #1
 8000682:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000686:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <USBTask+0x94>)
 8000688:	79db      	ldrb	r3, [r3, #7]
 800068a:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 800068e:	429a      	cmp	r2, r3
 8000690:	d3db      	bcc.n	800064a <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 8000692:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <USBTask+0x94>)
 8000694:	79db      	ldrb	r3, [r3, #7]
 8000696:	461a      	mov	r2, r3
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	4611      	mov	r1, r2
 800069c:	4618      	mov	r0, r3
 800069e:	f00a ffa3 	bl	800b5e8 <CDC_Transmit_FS>
	}

}
 80006a2:	bf00      	nop
 80006a4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	20000380 	.word	0x20000380
 80006b0:	20000374 	.word	0x20000374

080006b4 <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	687a      	ldr	r2, [r7, #4]
 80006c4:	7a12      	ldrb	r2, [r2, #8]
 80006c6:	4413      	add	r3, r2
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2bf0      	cmp	r3, #240	@ 0xf0
 80006cc:	d002      	beq.n	80006d4 <decodeCommand+0x20>
 80006ce:	2bf1      	cmp	r3, #241	@ 0xf1
 80006d0:	d010      	beq.n	80006f4 <decodeCommand+0x40>
 80006d2:	e01f      	b.n	8000714 <decodeCommand+0x60>
	case ALIVE:
		putHeaderOnTx(dataTx, ALIVE, 2);
 80006d4:	2202      	movs	r2, #2
 80006d6:	21f0      	movs	r1, #240	@ 0xf0
 80006d8:	6838      	ldr	r0, [r7, #0]
 80006da:	f000 fb35 	bl	8000d48 <putHeaderOnTx>
		putByteOnTx(dataTx, ACK);
 80006de:	210d      	movs	r1, #13
 80006e0:	6838      	ldr	r0, [r7, #0]
 80006e2:	f000 fbe0 	bl	8000ea6 <putByteOnTx>
		putByteOnTx(dataTx, dataTx->chk);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	7a5b      	ldrb	r3, [r3, #9]
 80006ea:	4619      	mov	r1, r3
 80006ec:	6838      	ldr	r0, [r7, #0]
 80006ee:	f000 fbda 	bl	8000ea6 <putByteOnTx>
		break;
 80006f2:	e025      	b.n	8000740 <decodeCommand+0x8c>
	case FIRMWARE:
		putHeaderOnTx(dataTx, FIRMWARE, 13);
 80006f4:	220d      	movs	r2, #13
 80006f6:	21f1      	movs	r1, #241	@ 0xf1
 80006f8:	6838      	ldr	r0, [r7, #0]
 80006fa:	f000 fb25 	bl	8000d48 <putHeaderOnTx>
		putStrOntx(dataTx, firmware);
 80006fe:	4912      	ldr	r1, [pc, #72]	@ (8000748 <decodeCommand+0x94>)
 8000700:	6838      	ldr	r0, [r7, #0]
 8000702:	f000 fbfe 	bl	8000f02 <putStrOntx>
		putByteOnTx(dataTx, dataTx->chk);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	7a5b      	ldrb	r3, [r3, #9]
 800070a:	4619      	mov	r1, r3
 800070c:	6838      	ldr	r0, [r7, #0]
 800070e:	f000 fbca 	bl	8000ea6 <putByteOnTx>
		break;
 8000712:	e015      	b.n	8000740 <decodeCommand+0x8c>
	default:
		putHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	7a12      	ldrb	r2, [r2, #8]
 800071c:	4413      	add	r3, r2
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2202      	movs	r2, #2
 8000722:	4619      	mov	r1, r3
 8000724:	6838      	ldr	r0, [r7, #0]
 8000726:	f000 fb0f 	bl	8000d48 <putHeaderOnTx>
		putByteOnTx(dataTx, UNKNOWN);
 800072a:	21ff      	movs	r1, #255	@ 0xff
 800072c:	6838      	ldr	r0, [r7, #0]
 800072e:	f000 fbba 	bl	8000ea6 <putByteOnTx>
		putByteOnTx(dataTx, dataTx->chk);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	7a5b      	ldrb	r3, [r3, #9]
 8000736:	4619      	mov	r1, r3
 8000738:	6838      	ldr	r0, [r7, #0]
 800073a:	f000 fbb4 	bl	8000ea6 <putByteOnTx>
		break;
 800073e:	bf00      	nop
	}
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	0800bf64 	.word	0x0800bf64

0800074c <do10ms>:

void do10ms() {
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	if(IS10MS){
 8000750:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <do10ms+0x48>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	d017      	beq.n	800078e <do10ms+0x42>
		IS10MS=FALSE;
 800075e:	4a0d      	ldr	r2, [pc, #52]	@ (8000794 <do10ms+0x48>)
 8000760:	7813      	ldrb	r3, [r2, #0]
 8000762:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000766:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 8000768:	4b0b      	ldr	r3, [pc, #44]	@ (8000798 <do10ms+0x4c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3b01      	subs	r3, #1
 800076e:	4a0a      	ldr	r2, [pc, #40]	@ (8000798 <do10ms+0x4c>)
 8000770:	6013      	str	r3, [r2, #0]
		if (tmo100ms == 0) {
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <do10ms+0x4c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d109      	bne.n	800078e <do10ms+0x42>
			tmo100ms = 10;
 800077a:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <do10ms+0x4c>)
 800077c:	220a      	movs	r2, #10
 800077e:	601a      	str	r2, [r3, #0]
			IS100MS=TRUE;
 8000780:	4a04      	ldr	r2, [pc, #16]	@ (8000794 <do10ms+0x48>)
 8000782:	7813      	ldrb	r3, [r2, #0]
 8000784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000788:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 800078a:	f000 f807 	bl	800079c <heartBeatTask>
		}
	}
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000058c 	.word	0x2000058c
 8000798:	20000028 	.word	0x20000028

0800079c <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <heartBeatTask+0x44>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	43db      	mvns	r3, r3
 80007a6:	4a0f      	ldr	r2, [pc, #60]	@ (80007e4 <heartBeatTask+0x48>)
 80007a8:	7812      	ldrb	r2, [r2, #0]
 80007aa:	4611      	mov	r1, r2
 80007ac:	2201      	movs	r2, #1
 80007ae:	408a      	lsls	r2, r1
 80007b0:	4013      	ands	r3, r2
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d004      	beq.n	80007c0 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 80007b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007ba:	480b      	ldr	r0, [pc, #44]	@ (80007e8 <heartBeatTask+0x4c>)
 80007bc:	f002 fd53 	bl	8003266 <HAL_GPIO_TogglePin>

	times++;
 80007c0:	4b08      	ldr	r3, [pc, #32]	@ (80007e4 <heartBeatTask+0x48>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b06      	ldr	r3, [pc, #24]	@ (80007e4 <heartBeatTask+0x48>)
 80007ca:	701a      	strb	r2, [r3, #0]
	times &= 31;
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <heartBeatTask+0x48>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	f003 031f 	and.w	r3, r3, #31
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b03      	ldr	r3, [pc, #12]	@ (80007e4 <heartBeatTask+0x48>)
 80007d8:	701a      	strb	r2, [r3, #0]
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000000 	.word	0x20000000
 80007e4:	2000058e 	.word	0x2000058e
 80007e8:	40020800 	.word	0x40020800

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f2:	f001 f933 	bl	8001a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f6:	f000 f853 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fa:	f000 fa3f 	bl	8000c7c <MX_GPIO_Init>
  MX_DMA_Init();
 80007fe:	f000 f9ff 	bl	8000c00 <MX_DMA_Init>
  MX_ADC1_Init();
 8000802:	f000 f8b5 	bl	8000970 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000806:	f000 f967 	bl	8000ad8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800080a:	f000 f993 	bl	8000b34 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 800080e:	f00a fdd1 	bl	800b3b4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 8000812:	481b      	ldr	r0, [pc, #108]	@ (8000880 <main+0x94>)
 8000814:	f00a ff20 	bl	800b658 <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1); //timer
 8000818:	481a      	ldr	r0, [pc, #104]	@ (8000884 <main+0x98>)
 800081a:	f006 fdd5 	bl	80073c8 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000824:	4818      	ldr	r0, [pc, #96]	@ (8000888 <main+0x9c>)
 8000826:	f002 fd05 	bl	8003234 <HAL_GPIO_WritePin>

	//Display
	ssd1306_Init();
 800082a:	f000 fd1d 	bl	8001268 <ssd1306_Init>

	//Inicializacion de protocolo
	initComm(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 800082e:	4b17      	ldr	r3, [pc, #92]	@ (800088c <main+0xa0>)
 8000830:	4a17      	ldr	r2, [pc, #92]	@ (8000890 <main+0xa4>)
 8000832:	4918      	ldr	r1, [pc, #96]	@ (8000894 <main+0xa8>)
 8000834:	4818      	ldr	r0, [pc, #96]	@ (8000898 <main+0xac>)
 8000836:	f000 fca7 	bl	8001188 <initComm>

	//Variables
	ALLFLAGS = RESET;
 800083a:	4b18      	ldr	r3, [pc, #96]	@ (800089c <main+0xb0>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	do10ms();
 8000840:	f7ff ff84 	bl	800074c <do10ms>
		USBTask();
 8000844:	f7ff feea 	bl	800061c <USBTask>

		  //ssd1306_FillRectangle(31, 1, 65, 35, White);
		  ssd1306_FillRectangle(10, 45, 70, 60, White);
 8000848:	2301      	movs	r3, #1
 800084a:	9300      	str	r3, [sp, #0]
 800084c:	233c      	movs	r3, #60	@ 0x3c
 800084e:	2246      	movs	r2, #70	@ 0x46
 8000850:	212d      	movs	r1, #45	@ 0x2d
 8000852:	200a      	movs	r0, #10
 8000854:	f000 fe06 	bl	8001464 <ssd1306_FillRectangle>
		  ssd1306_FillRectangle(75, 10, 100, 45, White);
 8000858:	2301      	movs	r3, #1
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	232d      	movs	r3, #45	@ 0x2d
 800085e:	2264      	movs	r2, #100	@ 0x64
 8000860:	210a      	movs	r1, #10
 8000862:	204b      	movs	r0, #75	@ 0x4b
 8000864:	f000 fdfe 	bl	8001464 <ssd1306_FillRectangle>
		  ssd1306_FillRectangle(55, 30, 80, 55, Black);
 8000868:	2300      	movs	r3, #0
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	2337      	movs	r3, #55	@ 0x37
 800086e:	2250      	movs	r2, #80	@ 0x50
 8000870:	211e      	movs	r1, #30
 8000872:	2037      	movs	r0, #55	@ 0x37
 8000874:	f000 fdf6 	bl	8001464 <ssd1306_FillRectangle>
		  ssd1306_UpdateScreen();
 8000878:	f000 fd78 	bl	800136c <ssd1306_UpdateScreen>
	  	do10ms();
 800087c:	bf00      	nop
 800087e:	e7df      	b.n	8000840 <main+0x54>
 8000880:	080005c1 	.word	0x080005c1
 8000884:	20000308 	.word	0x20000308
 8000888:	40020800 	.word	0x40020800
 800088c:	2000038c 	.word	0x2000038c
 8000890:	2000048c 	.word	0x2000048c
 8000894:	20000374 	.word	0x20000374
 8000898:	20000380 	.word	0x20000380
 800089c:	2000058c 	.word	0x2000058c

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b094      	sub	sp, #80	@ 0x50
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 0320 	add.w	r3, r7, #32
 80008aa:	2230      	movs	r2, #48	@ 0x30
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f00b fafc 	bl	800beac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c4:	2300      	movs	r3, #0
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	4b27      	ldr	r3, [pc, #156]	@ (8000968 <SystemClock_Config+0xc8>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008cc:	4a26      	ldr	r2, [pc, #152]	@ (8000968 <SystemClock_Config+0xc8>)
 80008ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d4:	4b24      	ldr	r3, [pc, #144]	@ (8000968 <SystemClock_Config+0xc8>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	4b21      	ldr	r3, [pc, #132]	@ (800096c <SystemClock_Config+0xcc>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a20      	ldr	r2, [pc, #128]	@ (800096c <SystemClock_Config+0xcc>)
 80008ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	4b1e      	ldr	r3, [pc, #120]	@ (800096c <SystemClock_Config+0xcc>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008fc:	2301      	movs	r3, #1
 80008fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000900:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000906:	2302      	movs	r3, #2
 8000908:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800090e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000910:	2319      	movs	r3, #25
 8000912:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000914:	23c0      	movs	r3, #192	@ 0xc0
 8000916:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000918:	2302      	movs	r3, #2
 800091a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800091c:	2304      	movs	r3, #4
 800091e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000920:	f107 0320 	add.w	r3, r7, #32
 8000924:	4618      	mov	r0, r3
 8000926:	f006 f8bb 	bl	8006aa0 <HAL_RCC_OscConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000930:	f000 fa04 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000934:	230f      	movs	r3, #15
 8000936:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000938:	2302      	movs	r3, #2
 800093a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000940:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000944:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	2103      	movs	r1, #3
 8000950:	4618      	mov	r0, r3
 8000952:	f006 fb1d 	bl	8006f90 <HAL_RCC_ClockConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800095c:	f000 f9ee 	bl	8000d3c <Error_Handler>
  }
}
 8000960:	bf00      	nop
 8000962:	3750      	adds	r7, #80	@ 0x50
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40023800 	.word	0x40023800
 800096c:	40007000 	.word	0x40007000

08000970 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000976:	463b      	mov	r3, r7
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000982:	4b52      	ldr	r3, [pc, #328]	@ (8000acc <MX_ADC1_Init+0x15c>)
 8000984:	4a52      	ldr	r2, [pc, #328]	@ (8000ad0 <MX_ADC1_Init+0x160>)
 8000986:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000988:	4b50      	ldr	r3, [pc, #320]	@ (8000acc <MX_ADC1_Init+0x15c>)
 800098a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800098e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000990:	4b4e      	ldr	r3, [pc, #312]	@ (8000acc <MX_ADC1_Init+0x15c>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000996:	4b4d      	ldr	r3, [pc, #308]	@ (8000acc <MX_ADC1_Init+0x15c>)
 8000998:	2201      	movs	r2, #1
 800099a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800099c:	4b4b      	ldr	r3, [pc, #300]	@ (8000acc <MX_ADC1_Init+0x15c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009a2:	4b4a      	ldr	r3, [pc, #296]	@ (8000acc <MX_ADC1_Init+0x15c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009aa:	4b48      	ldr	r3, [pc, #288]	@ (8000acc <MX_ADC1_Init+0x15c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b0:	4b46      	ldr	r3, [pc, #280]	@ (8000acc <MX_ADC1_Init+0x15c>)
 80009b2:	4a48      	ldr	r2, [pc, #288]	@ (8000ad4 <MX_ADC1_Init+0x164>)
 80009b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009b6:	4b45      	ldr	r3, [pc, #276]	@ (8000acc <MX_ADC1_Init+0x15c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80009bc:	4b43      	ldr	r3, [pc, #268]	@ (8000acc <MX_ADC1_Init+0x15c>)
 80009be:	2208      	movs	r2, #8
 80009c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009c2:	4b42      	ldr	r3, [pc, #264]	@ (8000acc <MX_ADC1_Init+0x15c>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ca:	4b40      	ldr	r3, [pc, #256]	@ (8000acc <MX_ADC1_Init+0x15c>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009d0:	483e      	ldr	r0, [pc, #248]	@ (8000acc <MX_ADC1_Init+0x15c>)
 80009d2:	f001 f8d9 	bl	8001b88 <HAL_ADC_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009dc:	f000 f9ae 	bl	8000d3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009e4:	2301      	movs	r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	4619      	mov	r1, r3
 80009f0:	4836      	ldr	r0, [pc, #216]	@ (8000acc <MX_ADC1_Init+0x15c>)
 80009f2:	f001 fb2f 	bl	8002054 <HAL_ADC_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009fc:	f000 f99e 	bl	8000d3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a08:	463b      	mov	r3, r7
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	482f      	ldr	r0, [pc, #188]	@ (8000acc <MX_ADC1_Init+0x15c>)
 8000a0e:	f001 fb21 	bl	8002054 <HAL_ADC_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a18:	f000 f990 	bl	8000d3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000a20:	2303      	movs	r3, #3
 8000a22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a24:	463b      	mov	r3, r7
 8000a26:	4619      	mov	r1, r3
 8000a28:	4828      	ldr	r0, [pc, #160]	@ (8000acc <MX_ADC1_Init+0x15c>)
 8000a2a:	f001 fb13 	bl	8002054 <HAL_ADC_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000a34:	f000 f982 	bl	8000d3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000a3c:	2304      	movs	r3, #4
 8000a3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	4619      	mov	r1, r3
 8000a44:	4821      	ldr	r0, [pc, #132]	@ (8000acc <MX_ADC1_Init+0x15c>)
 8000a46:	f001 fb05 	bl	8002054 <HAL_ADC_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000a50:	f000 f974 	bl	8000d3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a54:	2304      	movs	r3, #4
 8000a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000a58:	2305      	movs	r3, #5
 8000a5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	4619      	mov	r1, r3
 8000a60:	481a      	ldr	r0, [pc, #104]	@ (8000acc <MX_ADC1_Init+0x15c>)
 8000a62:	f001 faf7 	bl	8002054 <HAL_ADC_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000a6c:	f000 f966 	bl	8000d3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a70:	2305      	movs	r3, #5
 8000a72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000a74:	2306      	movs	r3, #6
 8000a76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a78:	463b      	mov	r3, r7
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4813      	ldr	r0, [pc, #76]	@ (8000acc <MX_ADC1_Init+0x15c>)
 8000a7e:	f001 fae9 	bl	8002054 <HAL_ADC_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000a88:	f000 f958 	bl	8000d3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a8c:	2306      	movs	r3, #6
 8000a8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000a90:	2307      	movs	r3, #7
 8000a92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a94:	463b      	mov	r3, r7
 8000a96:	4619      	mov	r1, r3
 8000a98:	480c      	ldr	r0, [pc, #48]	@ (8000acc <MX_ADC1_Init+0x15c>)
 8000a9a:	f001 fadb 	bl	8002054 <HAL_ADC_ConfigChannel>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000aa4:	f000 f94a 	bl	8000d3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000aa8:	2307      	movs	r3, #7
 8000aaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000aac:	2308      	movs	r3, #8
 8000aae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4805      	ldr	r0, [pc, #20]	@ (8000acc <MX_ADC1_Init+0x15c>)
 8000ab6:	f001 facd 	bl	8002054 <HAL_ADC_ConfigChannel>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000ac0:	f000 f93c 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000014c 	.word	0x2000014c
 8000ad0:	40012000 	.word	0x40012000
 8000ad4:	0f000001 	.word	0x0f000001

08000ad8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000adc:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000ade:	4a13      	ldr	r2, [pc, #76]	@ (8000b2c <MX_I2C1_Init+0x54>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ae2:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000ae4:	4a12      	ldr	r2, [pc, #72]	@ (8000b30 <MX_I2C1_Init+0x58>)
 8000ae6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000af6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000afa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000afc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b08:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b14:	4804      	ldr	r0, [pc, #16]	@ (8000b28 <MX_I2C1_Init+0x50>)
 8000b16:	f002 fbc1 	bl	800329c <HAL_I2C_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b20:	f000 f90c 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200001f4 	.word	0x200001f4
 8000b2c:	40005400 	.word	0x40005400
 8000b30:	00061a80 	.word	0x00061a80

08000b34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08c      	sub	sp, #48	@ 0x30
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0320 	add.w	r3, r7, #32
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b60:	4b25      	ldr	r3, [pc, #148]	@ (8000bf8 <MX_TIM1_Init+0xc4>)
 8000b62:	4a26      	ldr	r2, [pc, #152]	@ (8000bfc <MX_TIM1_Init+0xc8>)
 8000b64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8000b66:	4b24      	ldr	r3, [pc, #144]	@ (8000bf8 <MX_TIM1_Init+0xc4>)
 8000b68:	225f      	movs	r2, #95	@ 0x5f
 8000b6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6c:	4b22      	ldr	r3, [pc, #136]	@ (8000bf8 <MX_TIM1_Init+0xc4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000b72:	4b21      	ldr	r3, [pc, #132]	@ (8000bf8 <MX_TIM1_Init+0xc4>)
 8000b74:	22f9      	movs	r2, #249	@ 0xf9
 8000b76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <MX_TIM1_Init+0xc4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <MX_TIM1_Init+0xc4>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b84:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf8 <MX_TIM1_Init+0xc4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b8a:	481b      	ldr	r0, [pc, #108]	@ (8000bf8 <MX_TIM1_Init+0xc4>)
 8000b8c:	f006 fbcc 	bl	8007328 <HAL_TIM_Base_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000b96:	f000 f8d1 	bl	8000d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b9e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4814      	ldr	r0, [pc, #80]	@ (8000bf8 <MX_TIM1_Init+0xc4>)
 8000ba8:	f006 fd60 	bl	800766c <HAL_TIM_ConfigClockSource>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000bb2:	f000 f8c3 	bl	8000d3c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000bbe:	f107 030c 	add.w	r3, r7, #12
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <MX_TIM1_Init+0xc4>)
 8000bc6:	f006 fe18 	bl	80077fa <HAL_TIM_SlaveConfigSynchro>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000bd0:	f000 f8b4 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <MX_TIM1_Init+0xc4>)
 8000be2:	f007 f827 	bl	8007c34 <HAL_TIMEx_MasterConfigSynchronization>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8000bec:	f000 f8a6 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3730      	adds	r7, #48	@ 0x30
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000308 	.word	0x20000308
 8000bfc:	40010000 	.word	0x40010000

08000c00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <MX_DMA_Init+0x78>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8000c78 <MX_DMA_Init+0x78>)
 8000c10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <MX_DMA_Init+0x78>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b14      	ldr	r3, [pc, #80]	@ (8000c78 <MX_DMA_Init+0x78>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a13      	ldr	r2, [pc, #76]	@ (8000c78 <MX_DMA_Init+0x78>)
 8000c2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <MX_DMA_Init+0x78>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	200b      	movs	r0, #11
 8000c44:	f001 fd9b 	bl	800277e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c48:	200b      	movs	r0, #11
 8000c4a:	f001 fdb4 	bl	80027b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	200c      	movs	r0, #12
 8000c54:	f001 fd93 	bl	800277e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c58:	200c      	movs	r0, #12
 8000c5a:	f001 fdac 	bl	80027b6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2100      	movs	r1, #0
 8000c62:	2038      	movs	r0, #56	@ 0x38
 8000c64:	f001 fd8b 	bl	800277e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c68:	2038      	movs	r0, #56	@ 0x38
 8000c6a:	f001 fda4 	bl	80027b6 <HAL_NVIC_EnableIRQ>

}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800

08000c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	@ 0x28
 8000c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <MX_GPIO_Init+0xb8>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	4a26      	ldr	r2, [pc, #152]	@ (8000d34 <MX_GPIO_Init+0xb8>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca2:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <MX_GPIO_Init+0xb8>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <MX_GPIO_Init+0xb8>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8000d34 <MX_GPIO_Init+0xb8>)
 8000cb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <MX_GPIO_Init+0xb8>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <MX_GPIO_Init+0xb8>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a18      	ldr	r2, [pc, #96]	@ (8000d34 <MX_GPIO_Init+0xb8>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <MX_GPIO_Init+0xb8>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <MX_GPIO_Init+0xb8>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a11      	ldr	r2, [pc, #68]	@ (8000d34 <MX_GPIO_Init+0xb8>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <MX_GPIO_Init+0xb8>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d08:	480b      	ldr	r0, [pc, #44]	@ (8000d38 <MX_GPIO_Init+0xbc>)
 8000d0a:	f002 fa93 	bl	8003234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000d0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4804      	ldr	r0, [pc, #16]	@ (8000d38 <MX_GPIO_Init+0xbc>)
 8000d28:	f002 f900 	bl	8002f2c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d2c:	bf00      	nop
 8000d2e:	3728      	adds	r7, #40	@ 0x28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020800 	.word	0x40020800

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <Error_Handler+0x8>

08000d48 <putHeaderOnTx>:


//Function definitions

uint8_t putHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	460b      	mov	r3, r1
 8000d52:	70fb      	strb	r3, [r7, #3]
 8000d54:	4613      	mov	r3, r2
 8000d56:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 8000d58:	78bb      	ldrb	r3, [r7, #2]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	795a      	ldrb	r2, [r3, #5]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	795b      	ldrb	r3, [r3, #5]
 8000d74:	1c59      	adds	r1, r3, #1
 8000d76:	b2c8      	uxtb	r0, r1
 8000d78:	6879      	ldr	r1, [r7, #4]
 8000d7a:	7148      	strb	r0, [r1, #5]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	2255      	movs	r2, #85	@ 0x55
 8000d80:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	795a      	ldrb	r2, [r3, #5]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	799b      	ldrb	r3, [r3, #6]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	795b      	ldrb	r3, [r3, #5]
 8000d9a:	1c59      	adds	r1, r3, #1
 8000d9c:	b2c8      	uxtb	r0, r1
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	7148      	strb	r0, [r1, #5]
 8000da2:	4413      	add	r3, r2
 8000da4:	224e      	movs	r2, #78	@ 0x4e
 8000da6:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	795a      	ldrb	r2, [r3, #5]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	799b      	ldrb	r3, [r3, #6]
 8000db0:	4013      	ands	r3, r2
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	795b      	ldrb	r3, [r3, #5]
 8000dc0:	1c59      	adds	r1, r3, #1
 8000dc2:	b2c8      	uxtb	r0, r1
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	7148      	strb	r0, [r1, #5]
 8000dc8:	4413      	add	r3, r2
 8000dca:	2245      	movs	r2, #69	@ 0x45
 8000dcc:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	795a      	ldrb	r2, [r3, #5]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	799b      	ldrb	r3, [r3, #6]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	795b      	ldrb	r3, [r3, #5]
 8000de6:	1c59      	adds	r1, r3, #1
 8000de8:	b2c8      	uxtb	r0, r1
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	7148      	strb	r0, [r1, #5]
 8000dee:	4413      	add	r3, r2
 8000df0:	2252      	movs	r2, #82	@ 0x52
 8000df2:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	795a      	ldrb	r2, [r3, #5]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	799b      	ldrb	r3, [r3, #6]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	b2da      	uxtb	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	795b      	ldrb	r3, [r3, #5]
 8000e0c:	1c59      	adds	r1, r3, #1
 8000e0e:	b2c8      	uxtb	r0, r1
 8000e10:	6879      	ldr	r1, [r7, #4]
 8000e12:	7148      	strb	r0, [r1, #5]
 8000e14:	4413      	add	r3, r2
 8000e16:	78ba      	ldrb	r2, [r7, #2]
 8000e18:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	795a      	ldrb	r2, [r3, #5]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	799b      	ldrb	r3, [r3, #6]
 8000e22:	4013      	ands	r3, r2
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	795b      	ldrb	r3, [r3, #5]
 8000e32:	1c59      	adds	r1, r3, #1
 8000e34:	b2c8      	uxtb	r0, r1
 8000e36:	6879      	ldr	r1, [r7, #4]
 8000e38:	7148      	strb	r0, [r1, #5]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	223a      	movs	r2, #58	@ 0x3a
 8000e3e:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	795a      	ldrb	r2, [r3, #5]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	799b      	ldrb	r3, [r3, #6]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	795b      	ldrb	r3, [r3, #5]
 8000e58:	1c59      	adds	r1, r3, #1
 8000e5a:	b2c8      	uxtb	r0, r1
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	7148      	strb	r0, [r1, #5]
 8000e60:	4413      	add	r3, r2
 8000e62:	78fa      	ldrb	r2, [r7, #3]
 8000e64:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	795a      	ldrb	r2, [r3, #5]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	799b      	ldrb	r3, [r3, #6]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2207      	movs	r2, #7
 8000e7a:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	7a5a      	ldrb	r2, [r3, #9]
 8000e80:	78b9      	ldrb	r1, [r7, #2]
 8000e82:	78fb      	ldrb	r3, [r7, #3]
 8000e84:	404b      	eors	r3, r1
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	4053      	eors	r3, r2
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	7a5b      	ldrb	r3, [r3, #9]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <putByteOnTx>:

uint8_t putByteOnTx(_sTx *dataTx, uint8_t byte)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	79db      	ldrb	r3, [r3, #7]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	795b      	ldrb	r3, [r3, #5]
 8000ec6:	1c59      	adds	r1, r3, #1
 8000ec8:	b2c8      	uxtb	r0, r1
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	7148      	strb	r0, [r1, #5]
 8000ece:	4413      	add	r3, r2
 8000ed0:	78fa      	ldrb	r2, [r7, #3]
 8000ed2:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	795a      	ldrb	r2, [r3, #5]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	799b      	ldrb	r3, [r3, #6]
 8000edc:	4013      	ands	r3, r2
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7a5a      	ldrb	r2, [r3, #9]
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	4053      	eors	r3, r2
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7a5b      	ldrb	r3, [r3, #9]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <putStrOntx>:

uint8_t putStrOntx(_sTx *dataTx, const char *str)
{
 8000f02:	b490      	push	{r4, r7}
 8000f04:	b084      	sub	sp, #16
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 8000f10:	e02c      	b.n	8000f6c <putStrOntx+0x6a>
    	dataTx->bytes++;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	79db      	ldrb	r3, [r3, #7]
 8000f16:	3301      	adds	r3, #1
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	461a      	mov	r2, r3
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	441a      	add	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6819      	ldr	r1, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	795b      	ldrb	r3, [r3, #5]
 8000f30:	1c58      	adds	r0, r3, #1
 8000f32:	b2c4      	uxtb	r4, r0
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	7144      	strb	r4, [r0, #5]
 8000f38:	440b      	add	r3, r1
 8000f3a:	7812      	ldrb	r2, [r2, #0]
 8000f3c:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	795a      	ldrb	r2, [r3, #5]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	799b      	ldrb	r3, [r3, #6]
 8000f46:	4013      	ands	r3, r2
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	1c5a      	adds	r2, r3, #1
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	73fa      	strb	r2, [r7, #15]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	7a5b      	ldrb	r3, [r3, #9]
 8000f64:	4053      	eors	r3, r2
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	461a      	mov	r2, r3
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	4413      	add	r3, r2
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1ca      	bne.n	8000f12 <putStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	7a5b      	ldrb	r3, [r3, #9]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc90      	pop	{r4, r7}
 8000f88:	4770      	bx	lr
	...

08000f8c <decodeHeader>:
	return getByte;
}


uint8_t decodeHeader(_sTx *dataRx)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	795b      	ldrb	r3, [r3, #5]
 8000f9c:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 8000f9e:	e0e4      	b.n	800116a <decodeHeader+0x1de>
        switch(header)
 8000fa0:	4b78      	ldr	r3, [pc, #480]	@ (8001184 <decodeHeader+0x1f8>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b07      	cmp	r3, #7
 8000fa6:	f200 80c9 	bhi.w	800113c <decodeHeader+0x1b0>
 8000faa:	a201      	add	r2, pc, #4	@ (adr r2, 8000fb0 <decodeHeader+0x24>)
 8000fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb0:	08000fd1 	.word	0x08000fd1
 8000fb4:	08000feb 	.word	0x08000feb
 8000fb8:	08001029 	.word	0x08001029
 8000fbc:	08001055 	.word	0x08001055
 8000fc0:	08001081 	.word	0x08001081
 8000fc4:	08001097 	.word	0x08001097
 8000fc8:	0800113d 	.word	0x0800113d
 8000fcc:	080010f9 	.word	0x080010f9
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	7912      	ldrb	r2, [r2, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b55      	cmp	r3, #85	@ 0x55
 8000fde:	f040 80b1 	bne.w	8001144 <decodeHeader+0x1b8>
                   header = HEADER_N;
 8000fe2:	4b68      	ldr	r3, [pc, #416]	@ (8001184 <decodeHeader+0x1f8>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
                }
            break;
 8000fe8:	e0ac      	b.n	8001144 <decodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	7912      	ldrb	r2, [r2, #4]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b4e      	cmp	r3, #78	@ 0x4e
 8000ff8:	d103      	bne.n	8001002 <decodeHeader+0x76>
                    header = HEADER_E;
 8000ffa:	4b62      	ldr	r3, [pc, #392]	@ (8001184 <decodeHeader+0x1f8>)
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 8001000:	e0a2      	b.n	8001148 <decodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	7912      	ldrb	r2, [r2, #4]
 800100a:	4413      	add	r3, r2
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b55      	cmp	r3, #85	@ 0x55
 8001010:	f000 809a 	beq.w	8001148 <decodeHeader+0x1bc>
                    	header = HEADER_U;
 8001014:	4b5b      	ldr	r3, [pc, #364]	@ (8001184 <decodeHeader+0x1f8>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	791b      	ldrb	r3, [r3, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	b2da      	uxtb	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	711a      	strb	r2, [r3, #4]
            break;
 8001026:	e08f      	b.n	8001148 <decodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	7912      	ldrb	r2, [r2, #4]
 8001030:	4413      	add	r3, r2
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b45      	cmp	r3, #69	@ 0x45
 8001036:	d103      	bne.n	8001040 <decodeHeader+0xb4>
                    header = HEADER_R;
 8001038:	4b52      	ldr	r3, [pc, #328]	@ (8001184 <decodeHeader+0x1f8>)
 800103a:	2203      	movs	r2, #3
 800103c:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 800103e:	e086      	b.n	800114e <decodeHeader+0x1c2>
                    header = HEADER_U;
 8001040:	4b50      	ldr	r3, [pc, #320]	@ (8001184 <decodeHeader+0x1f8>)
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	791b      	ldrb	r3, [r3, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	b2da      	uxtb	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	711a      	strb	r2, [r3, #4]
            break;
 8001052:	e07c      	b.n	800114e <decodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	7912      	ldrb	r2, [r2, #4]
 800105c:	4413      	add	r3, r2
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b52      	cmp	r3, #82	@ 0x52
 8001062:	d103      	bne.n	800106c <decodeHeader+0xe0>
                    header = NBYTES;
 8001064:	4b47      	ldr	r3, [pc, #284]	@ (8001184 <decodeHeader+0x1f8>)
 8001066:	2204      	movs	r2, #4
 8001068:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 800106a:	e070      	b.n	800114e <decodeHeader+0x1c2>
                    header = HEADER_U;
 800106c:	4b45      	ldr	r3, [pc, #276]	@ (8001184 <decodeHeader+0x1f8>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	791b      	ldrb	r3, [r3, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	b2da      	uxtb	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	711a      	strb	r2, [r3, #4]
            break;
 800107e:	e066      	b.n	800114e <decodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	7912      	ldrb	r2, [r2, #4]
 8001088:	4413      	add	r3, r2
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 800108e:	4b3d      	ldr	r3, [pc, #244]	@ (8001184 <decodeHeader+0x1f8>)
 8001090:	2205      	movs	r2, #5
 8001092:	701a      	strb	r2, [r3, #0]
            break;
 8001094:	e05b      	b.n	800114e <decodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	7912      	ldrb	r2, [r2, #4]
 800109e:	4413      	add	r3, r2
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b3a      	cmp	r3, #58	@ 0x3a
 80010a4:	d11e      	bne.n	80010e4 <decodeHeader+0x158>
                    header = PAYLOAD;
 80010a6:	4b37      	ldr	r3, [pc, #220]	@ (8001184 <decodeHeader+0x1f8>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	791b      	ldrb	r3, [r3, #4]
 80010b0:	3301      	adds	r3, #1
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7a1a      	ldrb	r2, [r3, #8]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	799b      	ldrb	r3, [r3, #6]
 80010c0:	4013      	ands	r3, r2
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7a5a      	ldrb	r2, [r3, #9]
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	4053      	eors	r3, r2
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 80010e2:	e034      	b.n	800114e <decodeHeader+0x1c2>
                    header = HEADER_U;
 80010e4:	4b27      	ldr	r3, [pc, #156]	@ (8001184 <decodeHeader+0x1f8>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	791b      	ldrb	r3, [r3, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	711a      	strb	r2, [r3, #4]
            break;
 80010f6:	e02a      	b.n	800114e <decodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00c      	beq.n	800111e <decodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7a5a      	ldrb	r2, [r3, #9]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	7909      	ldrb	r1, [r1, #4]
 8001110:	440b      	add	r3, r1
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4053      	eors	r3, r2
 8001116:	b2da      	uxtb	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 800111c:	e016      	b.n	800114c <decodeHeader+0x1c0>
                    header = HEADER_U;
 800111e:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <decodeHeader+0x1f8>)
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	7912      	ldrb	r2, [r2, #4]
 800112c:	4413      	add	r3, r2
 800112e:	781a      	ldrb	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	7a5b      	ldrb	r3, [r3, #9]
 8001134:	429a      	cmp	r2, r3
 8001136:	d109      	bne.n	800114c <decodeHeader+0x1c0>
                        return TRUE;
 8001138:	2301      	movs	r3, #1
 800113a:	e01d      	b.n	8001178 <decodeHeader+0x1ec>
            default:
                header = HEADER_U;
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <decodeHeader+0x1f8>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
            break;
 8001142:	e004      	b.n	800114e <decodeHeader+0x1c2>
            break;
 8001144:	bf00      	nop
 8001146:	e002      	b.n	800114e <decodeHeader+0x1c2>
            break;
 8001148:	bf00      	nop
 800114a:	e000      	b.n	800114e <decodeHeader+0x1c2>
            break;
 800114c:	bf00      	nop
        }
        dataRx->indexR++;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	791b      	ldrb	r3, [r3, #4]
 8001152:	3301      	adds	r3, #1
 8001154:	b2da      	uxtb	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	791a      	ldrb	r2, [r3, #4]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	799b      	ldrb	r3, [r3, #6]
 8001162:	4013      	ands	r3, r2
 8001164:	b2da      	uxtb	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	791b      	ldrb	r3, [r3, #4]
 800116e:	7bba      	ldrb	r2, [r7, #14]
 8001170:	429a      	cmp	r2, r3
 8001172:	f47f af15 	bne.w	8000fa0 <decodeHeader+0x14>
    }
    return FALSE;
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	2000058f 	.word	0x2000058f

08001188 <initComm>:

void initComm(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
    //INICIALIZAMOS VARIABLES
	Rx->buff = (uint8_t *)buffRx;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	2200      	movs	r2, #0
 80011a6:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2200      	movs	r2, #0
 80011ac:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2200      	movs	r2, #0
 80011b2:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	22ff      	movs	r2, #255	@ 0xff
 80011b8:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2200      	movs	r2, #0
 80011be:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	2200      	movs	r2, #0
 80011ca:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	2200      	movs	r2, #0
 80011d0:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	2200      	movs	r2, #0
 80011d6:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	2200      	movs	r2, #0
 80011dc:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	22ff      	movs	r2, #255	@ 0xff
 80011e2:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	2200      	movs	r2, #0
 80011e8:	725a      	strb	r2, [r3, #9]

}
 80011ea:	bf00      	nop
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <ssd1306_Reset>:

extern volatile uint8_t SSD1306_TxCplt;

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af04      	add	r7, sp, #16
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	9302      	str	r3, [sp, #8]
 8001214:	2301      	movs	r3, #1
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	1dfb      	adds	r3, r7, #7
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2301      	movs	r3, #1
 800121e:	2200      	movs	r2, #0
 8001220:	2178      	movs	r1, #120	@ 0x78
 8001222:	4803      	ldr	r0, [pc, #12]	@ (8001230 <ssd1306_WriteCommand+0x2c>)
 8001224:	f002 f994 	bl	8003550 <HAL_I2C_Mem_Write>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200001f4 	.word	0x200001f4

08001234 <ssd1306_WriteData>:
void ssd1306_WriteCommandDMA(uint8_t byte) {
    HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
}

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af04      	add	r7, sp, #16
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	f04f 32ff 	mov.w	r2, #4294967295
 8001246:	9202      	str	r2, [sp, #8]
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2301      	movs	r3, #1
 8001250:	2240      	movs	r2, #64	@ 0x40
 8001252:	2178      	movs	r1, #120	@ 0x78
 8001254:	4803      	ldr	r0, [pc, #12]	@ (8001264 <ssd1306_WriteData+0x30>)
 8001256:	f002 f97b 	bl	8003550 <HAL_I2C_Mem_Write>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200001f4 	.word	0x200001f4

08001268 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800126c:	f7ff ffc3 	bl	80011f6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001270:	2064      	movs	r0, #100	@ 0x64
 8001272:	f000 fc65 	bl	8001b40 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001276:	2000      	movs	r0, #0
 8001278:	f000 f956 	bl	8001528 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800127c:	2020      	movs	r0, #32
 800127e:	f7ff ffc1 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff ffbe 	bl	8001204 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001288:	20b0      	movs	r0, #176	@ 0xb0
 800128a:	f7ff ffbb 	bl	8001204 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800128e:	20c8      	movs	r0, #200	@ 0xc8
 8001290:	f7ff ffb8 	bl	8001204 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff ffb5 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800129a:	2010      	movs	r0, #16
 800129c:	f7ff ffb2 	bl	8001204 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80012a0:	2040      	movs	r0, #64	@ 0x40
 80012a2:	f7ff ffaf 	bl	8001204 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80012a6:	20ff      	movs	r0, #255	@ 0xff
 80012a8:	f000 f92a 	bl	8001500 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80012ac:	20a1      	movs	r0, #161	@ 0xa1
 80012ae:	f7ff ffa9 	bl	8001204 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80012b2:	20a6      	movs	r0, #166	@ 0xa6
 80012b4:	f7ff ffa6 	bl	8001204 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80012b8:	20a8      	movs	r0, #168	@ 0xa8
 80012ba:	f7ff ffa3 	bl	8001204 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80012be:	203f      	movs	r0, #63	@ 0x3f
 80012c0:	f7ff ffa0 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80012c4:	20a4      	movs	r0, #164	@ 0xa4
 80012c6:	f7ff ff9d 	bl	8001204 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80012ca:	20d3      	movs	r0, #211	@ 0xd3
 80012cc:	f7ff ff9a 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff ff97 	bl	8001204 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80012d6:	20d5      	movs	r0, #213	@ 0xd5
 80012d8:	f7ff ff94 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80012dc:	20f0      	movs	r0, #240	@ 0xf0
 80012de:	f7ff ff91 	bl	8001204 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80012e2:	20d9      	movs	r0, #217	@ 0xd9
 80012e4:	f7ff ff8e 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80012e8:	2022      	movs	r0, #34	@ 0x22
 80012ea:	f7ff ff8b 	bl	8001204 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80012ee:	20da      	movs	r0, #218	@ 0xda
 80012f0:	f7ff ff88 	bl	8001204 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80012f4:	2012      	movs	r0, #18
 80012f6:	f7ff ff85 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80012fa:	20db      	movs	r0, #219	@ 0xdb
 80012fc:	f7ff ff82 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001300:	2020      	movs	r0, #32
 8001302:	f7ff ff7f 	bl	8001204 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001306:	208d      	movs	r0, #141	@ 0x8d
 8001308:	f7ff ff7c 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800130c:	2014      	movs	r0, #20
 800130e:	f7ff ff79 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001312:	2001      	movs	r0, #1
 8001314:	f000 f908 	bl	8001528 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001318:	2000      	movs	r0, #0
 800131a:	f000 f80f 	bl	800133c <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800131e:	f000 f825 	bl	800136c <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001322:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <ssd1306_Init+0xd0>)
 8001324:	2200      	movs	r2, #0
 8001326:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001328:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <ssd1306_Init+0xd0>)
 800132a:	2200      	movs	r2, #0
 800132c:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800132e:	4b02      	ldr	r3, [pc, #8]	@ (8001338 <ssd1306_Init+0xd0>)
 8001330:	2201      	movs	r2, #1
 8001332:	711a      	strb	r2, [r3, #4]
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000990 	.word	0x20000990

0800133c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001346:	79fb      	ldrb	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <ssd1306_Fill+0x14>
 800134c:	2300      	movs	r3, #0
 800134e:	e000      	b.n	8001352 <ssd1306_Fill+0x16>
 8001350:	23ff      	movs	r3, #255	@ 0xff
 8001352:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001356:	4619      	mov	r1, r3
 8001358:	4803      	ldr	r0, [pc, #12]	@ (8001368 <ssd1306_Fill+0x2c>)
 800135a:	f00a fda7 	bl	800beac <memset>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000590 	.word	0x20000590

0800136c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001372:	2300      	movs	r3, #0
 8001374:	71fb      	strb	r3, [r7, #7]
 8001376:	e016      	b.n	80013a6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	3b50      	subs	r3, #80	@ 0x50
 800137c:	b2db      	uxtb	r3, r3
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ff40 	bl	8001204 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff ff3d 	bl	8001204 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800138a:	2010      	movs	r0, #16
 800138c:	f7ff ff3a 	bl	8001204 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	01db      	lsls	r3, r3, #7
 8001394:	4a08      	ldr	r2, [pc, #32]	@ (80013b8 <ssd1306_UpdateScreen+0x4c>)
 8001396:	4413      	add	r3, r2
 8001398:	2180      	movs	r1, #128	@ 0x80
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff ff4a 	bl	8001234 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	3301      	adds	r3, #1
 80013a4:	71fb      	strb	r3, [r7, #7]
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b07      	cmp	r3, #7
 80013aa:	d9e5      	bls.n	8001378 <ssd1306_UpdateScreen+0xc>
    }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000590 	.word	0x20000590

080013bc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
 80013c6:	460b      	mov	r3, r1
 80013c8:	71bb      	strb	r3, [r7, #6]
 80013ca:	4613      	mov	r3, r2
 80013cc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80013ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db3d      	blt.n	8001452 <ssd1306_DrawPixel+0x96>
 80013d6:	79bb      	ldrb	r3, [r7, #6]
 80013d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80013da:	d83a      	bhi.n	8001452 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 80013dc:	797b      	ldrb	r3, [r7, #5]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d11a      	bne.n	8001418 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013e2:	79fa      	ldrb	r2, [r7, #7]
 80013e4:	79bb      	ldrb	r3, [r7, #6]
 80013e6:	08db      	lsrs	r3, r3, #3
 80013e8:	b2d8      	uxtb	r0, r3
 80013ea:	4603      	mov	r3, r0
 80013ec:	01db      	lsls	r3, r3, #7
 80013ee:	4413      	add	r3, r2
 80013f0:	4a1b      	ldr	r2, [pc, #108]	@ (8001460 <ssd1306_DrawPixel+0xa4>)
 80013f2:	5cd3      	ldrb	r3, [r2, r3]
 80013f4:	b25a      	sxtb	r2, r3
 80013f6:	79bb      	ldrb	r3, [r7, #6]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	2101      	movs	r1, #1
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	b25b      	sxtb	r3, r3
 8001404:	4313      	orrs	r3, r2
 8001406:	b259      	sxtb	r1, r3
 8001408:	79fa      	ldrb	r2, [r7, #7]
 800140a:	4603      	mov	r3, r0
 800140c:	01db      	lsls	r3, r3, #7
 800140e:	4413      	add	r3, r2
 8001410:	b2c9      	uxtb	r1, r1
 8001412:	4a13      	ldr	r2, [pc, #76]	@ (8001460 <ssd1306_DrawPixel+0xa4>)
 8001414:	54d1      	strb	r1, [r2, r3]
 8001416:	e01d      	b.n	8001454 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001418:	79fa      	ldrb	r2, [r7, #7]
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	08db      	lsrs	r3, r3, #3
 800141e:	b2d8      	uxtb	r0, r3
 8001420:	4603      	mov	r3, r0
 8001422:	01db      	lsls	r3, r3, #7
 8001424:	4413      	add	r3, r2
 8001426:	4a0e      	ldr	r2, [pc, #56]	@ (8001460 <ssd1306_DrawPixel+0xa4>)
 8001428:	5cd3      	ldrb	r3, [r2, r3]
 800142a:	b25a      	sxtb	r2, r3
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	2101      	movs	r1, #1
 8001434:	fa01 f303 	lsl.w	r3, r1, r3
 8001438:	b25b      	sxtb	r3, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	b25b      	sxtb	r3, r3
 800143e:	4013      	ands	r3, r2
 8001440:	b259      	sxtb	r1, r3
 8001442:	79fa      	ldrb	r2, [r7, #7]
 8001444:	4603      	mov	r3, r0
 8001446:	01db      	lsls	r3, r3, #7
 8001448:	4413      	add	r3, r2
 800144a:	b2c9      	uxtb	r1, r1
 800144c:	4a04      	ldr	r2, [pc, #16]	@ (8001460 <ssd1306_DrawPixel+0xa4>)
 800144e:	54d1      	strb	r1, [r2, r3]
 8001450:	e000      	b.n	8001454 <ssd1306_DrawPixel+0x98>
        return;
 8001452:	bf00      	nop
    }
}
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000590 	.word	0x20000590

08001464 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	4604      	mov	r4, r0
 800146c:	4608      	mov	r0, r1
 800146e:	4611      	mov	r1, r2
 8001470:	461a      	mov	r2, r3
 8001472:	4623      	mov	r3, r4
 8001474:	71fb      	strb	r3, [r7, #7]
 8001476:	4603      	mov	r3, r0
 8001478:	71bb      	strb	r3, [r7, #6]
 800147a:	460b      	mov	r3, r1
 800147c:	717b      	strb	r3, [r7, #5]
 800147e:	4613      	mov	r3, r2
 8001480:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	797b      	ldrb	r3, [r7, #5]
 8001486:	4293      	cmp	r3, r2
 8001488:	bf28      	it	cs
 800148a:	4613      	movcs	r3, r2
 800148c:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 800148e:	797a      	ldrb	r2, [r7, #5]
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	4293      	cmp	r3, r2
 8001494:	bf38      	it	cc
 8001496:	4613      	movcc	r3, r2
 8001498:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 800149a:	79ba      	ldrb	r2, [r7, #6]
 800149c:	793b      	ldrb	r3, [r7, #4]
 800149e:	4293      	cmp	r3, r2
 80014a0:	bf28      	it	cs
 80014a2:	4613      	movcs	r3, r2
 80014a4:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 80014a6:	793a      	ldrb	r2, [r7, #4]
 80014a8:	79bb      	ldrb	r3, [r7, #6]
 80014aa:	4293      	cmp	r3, r2
 80014ac:	bf38      	it	cc
 80014ae:	4613      	movcc	r3, r2
 80014b0:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80014b2:	7afb      	ldrb	r3, [r7, #11]
 80014b4:	73fb      	strb	r3, [r7, #15]
 80014b6:	e017      	b.n	80014e8 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80014b8:	7b7b      	ldrb	r3, [r7, #13]
 80014ba:	73bb      	strb	r3, [r7, #14]
 80014bc:	e009      	b.n	80014d2 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 80014be:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014c2:	7bf9      	ldrb	r1, [r7, #15]
 80014c4:	7bbb      	ldrb	r3, [r7, #14]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff ff78 	bl	80013bc <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80014cc:	7bbb      	ldrb	r3, [r7, #14]
 80014ce:	3301      	adds	r3, #1
 80014d0:	73bb      	strb	r3, [r7, #14]
 80014d2:	7bba      	ldrb	r2, [r7, #14]
 80014d4:	7b3b      	ldrb	r3, [r7, #12]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d803      	bhi.n	80014e2 <ssd1306_FillRectangle+0x7e>
 80014da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	daed      	bge.n	80014be <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	3301      	adds	r3, #1
 80014e6:	73fb      	strb	r3, [r7, #15]
 80014e8:	7bfa      	ldrb	r2, [r7, #15]
 80014ea:	7abb      	ldrb	r3, [r7, #10]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d803      	bhi.n	80014f8 <ssd1306_FillRectangle+0x94>
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80014f4:	d9e0      	bls.n	80014b8 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
}
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd90      	pop	{r4, r7, pc}

08001500 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800150a:	2381      	movs	r3, #129	@ 0x81
 800150c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fe77 	bl	8001204 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fe73 	bl	8001204 <ssd1306_WriteCommand>
}
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d005      	beq.n	8001544 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001538:	23af      	movs	r3, #175	@ 0xaf
 800153a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800153c:	4b08      	ldr	r3, [pc, #32]	@ (8001560 <ssd1306_SetDisplayOn+0x38>)
 800153e:	2201      	movs	r2, #1
 8001540:	715a      	strb	r2, [r3, #5]
 8001542:	e004      	b.n	800154e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001544:	23ae      	movs	r3, #174	@ 0xae
 8001546:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001548:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <ssd1306_SetDisplayOn+0x38>)
 800154a:	2200      	movs	r2, #0
 800154c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fe57 	bl	8001204 <ssd1306_WriteCommand>
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000990 	.word	0x20000990

08001564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <HAL_MspInit+0x4c>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	4a0f      	ldr	r2, [pc, #60]	@ (80015b0 <HAL_MspInit+0x4c>)
 8001574:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001578:	6453      	str	r3, [r2, #68]	@ 0x44
 800157a:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <HAL_MspInit+0x4c>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <HAL_MspInit+0x4c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	4a08      	ldr	r2, [pc, #32]	@ (80015b0 <HAL_MspInit+0x4c>)
 8001590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001594:	6413      	str	r3, [r2, #64]	@ 0x40
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <HAL_MspInit+0x4c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800

080015b4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	@ 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a32      	ldr	r2, [pc, #200]	@ (800169c <HAL_ADC_MspInit+0xe8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d15e      	bne.n	8001694 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b31      	ldr	r3, [pc, #196]	@ (80016a0 <HAL_ADC_MspInit+0xec>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015de:	4a30      	ldr	r2, [pc, #192]	@ (80016a0 <HAL_ADC_MspInit+0xec>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015e6:	4b2e      	ldr	r3, [pc, #184]	@ (80016a0 <HAL_ADC_MspInit+0xec>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b2a      	ldr	r3, [pc, #168]	@ (80016a0 <HAL_ADC_MspInit+0xec>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	4a29      	ldr	r2, [pc, #164]	@ (80016a0 <HAL_ADC_MspInit+0xec>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	@ 0x30
 8001602:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <HAL_ADC_MspInit+0xec>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800160e:	23ff      	movs	r3, #255	@ 0xff
 8001610:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001612:	2303      	movs	r3, #3
 8001614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	f107 0314 	add.w	r3, r7, #20
 800161e:	4619      	mov	r1, r3
 8001620:	4820      	ldr	r0, [pc, #128]	@ (80016a4 <HAL_ADC_MspInit+0xf0>)
 8001622:	f001 fc83 	bl	8002f2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001626:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 8001628:	4a20      	ldr	r2, [pc, #128]	@ (80016ac <HAL_ADC_MspInit+0xf8>)
 800162a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800162c:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 800162e:	2200      	movs	r2, #0
 8001630:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001632:	4b1d      	ldr	r3, [pc, #116]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800163e:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 8001640:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001644:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001646:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 8001648:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800164c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800164e:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 8001650:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001654:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001656:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 8001658:	2200      	movs	r2, #0
 800165a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 800165e:	2200      	movs	r2, #0
 8001660:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001662:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 8001664:	2200      	movs	r2, #0
 8001666:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001668:	480f      	ldr	r0, [pc, #60]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 800166a:	f001 f8bf 	bl	80027ec <HAL_DMA_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001674:	f7ff fb62 	bl	8000d3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a0b      	ldr	r2, [pc, #44]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 800167c:	639a      	str	r2, [r3, #56]	@ 0x38
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <HAL_ADC_MspInit+0xf4>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	2012      	movs	r0, #18
 800168a:	f001 f878 	bl	800277e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800168e:	2012      	movs	r0, #18
 8001690:	f001 f891 	bl	80027b6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001694:	bf00      	nop
 8001696:	3728      	adds	r7, #40	@ 0x28
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40012000 	.word	0x40012000
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020000 	.word	0x40020000
 80016a8:	20000194 	.word	0x20000194
 80016ac:	40026410 	.word	0x40026410

080016b0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	@ 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a4f      	ldr	r2, [pc, #316]	@ (800180c <HAL_I2C_MspInit+0x15c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	f040 8097 	bne.w	8001802 <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001810 <HAL_I2C_MspInit+0x160>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016dc:	4a4c      	ldr	r2, [pc, #304]	@ (8001810 <HAL_I2C_MspInit+0x160>)
 80016de:	f043 0302 	orr.w	r3, r3, #2
 80016e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e4:	4b4a      	ldr	r3, [pc, #296]	@ (8001810 <HAL_I2C_MspInit+0x160>)
 80016e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016f0:	23c0      	movs	r3, #192	@ 0xc0
 80016f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f4:	2312      	movs	r3, #18
 80016f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fc:	2303      	movs	r3, #3
 80016fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001700:	2304      	movs	r3, #4
 8001702:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	4619      	mov	r1, r3
 800170a:	4842      	ldr	r0, [pc, #264]	@ (8001814 <HAL_I2C_MspInit+0x164>)
 800170c:	f001 fc0e 	bl	8002f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	4b3e      	ldr	r3, [pc, #248]	@ (8001810 <HAL_I2C_MspInit+0x160>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	4a3d      	ldr	r2, [pc, #244]	@ (8001810 <HAL_I2C_MspInit+0x160>)
 800171a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800171e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001720:	4b3b      	ldr	r3, [pc, #236]	@ (8001810 <HAL_I2C_MspInit+0x160>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800172c:	4b3a      	ldr	r3, [pc, #232]	@ (8001818 <HAL_I2C_MspInit+0x168>)
 800172e:	4a3b      	ldr	r2, [pc, #236]	@ (800181c <HAL_I2C_MspInit+0x16c>)
 8001730:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001732:	4b39      	ldr	r3, [pc, #228]	@ (8001818 <HAL_I2C_MspInit+0x168>)
 8001734:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001738:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800173a:	4b37      	ldr	r3, [pc, #220]	@ (8001818 <HAL_I2C_MspInit+0x168>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001740:	4b35      	ldr	r3, [pc, #212]	@ (8001818 <HAL_I2C_MspInit+0x168>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001746:	4b34      	ldr	r3, [pc, #208]	@ (8001818 <HAL_I2C_MspInit+0x168>)
 8001748:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800174c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800174e:	4b32      	ldr	r3, [pc, #200]	@ (8001818 <HAL_I2C_MspInit+0x168>)
 8001750:	2200      	movs	r2, #0
 8001752:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001754:	4b30      	ldr	r3, [pc, #192]	@ (8001818 <HAL_I2C_MspInit+0x168>)
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800175a:	4b2f      	ldr	r3, [pc, #188]	@ (8001818 <HAL_I2C_MspInit+0x168>)
 800175c:	2200      	movs	r2, #0
 800175e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001760:	4b2d      	ldr	r3, [pc, #180]	@ (8001818 <HAL_I2C_MspInit+0x168>)
 8001762:	2200      	movs	r2, #0
 8001764:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001766:	4b2c      	ldr	r3, [pc, #176]	@ (8001818 <HAL_I2C_MspInit+0x168>)
 8001768:	2200      	movs	r2, #0
 800176a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800176c:	482a      	ldr	r0, [pc, #168]	@ (8001818 <HAL_I2C_MspInit+0x168>)
 800176e:	f001 f83d 	bl	80027ec <HAL_DMA_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001778:	f7ff fae0 	bl	8000d3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a26      	ldr	r2, [pc, #152]	@ (8001818 <HAL_I2C_MspInit+0x168>)
 8001780:	639a      	str	r2, [r3, #56]	@ 0x38
 8001782:	4a25      	ldr	r2, [pc, #148]	@ (8001818 <HAL_I2C_MspInit+0x168>)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001788:	4b25      	ldr	r3, [pc, #148]	@ (8001820 <HAL_I2C_MspInit+0x170>)
 800178a:	4a26      	ldr	r2, [pc, #152]	@ (8001824 <HAL_I2C_MspInit+0x174>)
 800178c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800178e:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <HAL_I2C_MspInit+0x170>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001794:	4b22      	ldr	r3, [pc, #136]	@ (8001820 <HAL_I2C_MspInit+0x170>)
 8001796:	2240      	movs	r2, #64	@ 0x40
 8001798:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800179a:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <HAL_I2C_MspInit+0x170>)
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <HAL_I2C_MspInit+0x170>)
 80017a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017a6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001820 <HAL_I2C_MspInit+0x170>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001820 <HAL_I2C_MspInit+0x170>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80017b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <HAL_I2C_MspInit+0x170>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017ba:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <HAL_I2C_MspInit+0x170>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017c0:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <HAL_I2C_MspInit+0x170>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80017c6:	4816      	ldr	r0, [pc, #88]	@ (8001820 <HAL_I2C_MspInit+0x170>)
 80017c8:	f001 f810 	bl	80027ec <HAL_DMA_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 80017d2:	f7ff fab3 	bl	8000d3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a11      	ldr	r2, [pc, #68]	@ (8001820 <HAL_I2C_MspInit+0x170>)
 80017da:	635a      	str	r2, [r3, #52]	@ 0x34
 80017dc:	4a10      	ldr	r2, [pc, #64]	@ (8001820 <HAL_I2C_MspInit+0x170>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	201f      	movs	r0, #31
 80017e8:	f000 ffc9 	bl	800277e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017ec:	201f      	movs	r0, #31
 80017ee:	f000 ffe2 	bl	80027b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2020      	movs	r0, #32
 80017f8:	f000 ffc1 	bl	800277e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80017fc:	2020      	movs	r0, #32
 80017fe:	f000 ffda 	bl	80027b6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001802:	bf00      	nop
 8001804:	3728      	adds	r7, #40	@ 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40005400 	.word	0x40005400
 8001810:	40023800 	.word	0x40023800
 8001814:	40020400 	.word	0x40020400
 8001818:	20000248 	.word	0x20000248
 800181c:	40026010 	.word	0x40026010
 8001820:	200002a8 	.word	0x200002a8
 8001824:	40026028 	.word	0x40026028

08001828 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a1a      	ldr	r2, [pc, #104]	@ (80018a0 <HAL_TIM_Base_MspInit+0x78>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d12d      	bne.n	8001896 <HAL_TIM_Base_MspInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b19      	ldr	r3, [pc, #100]	@ (80018a4 <HAL_TIM_Base_MspInit+0x7c>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001842:	4a18      	ldr	r2, [pc, #96]	@ (80018a4 <HAL_TIM_Base_MspInit+0x7c>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6453      	str	r3, [r2, #68]	@ 0x44
 800184a:	4b16      	ldr	r3, [pc, #88]	@ (80018a4 <HAL_TIM_Base_MspInit+0x7c>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	2018      	movs	r0, #24
 800185c:	f000 ff8f 	bl	800277e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001860:	2018      	movs	r0, #24
 8001862:	f000 ffa8 	bl	80027b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	2019      	movs	r0, #25
 800186c:	f000 ff87 	bl	800277e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001870:	2019      	movs	r0, #25
 8001872:	f000 ffa0 	bl	80027b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	201a      	movs	r0, #26
 800187c:	f000 ff7f 	bl	800277e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001880:	201a      	movs	r0, #26
 8001882:	f000 ff98 	bl	80027b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	201b      	movs	r0, #27
 800188c:	f000 ff77 	bl	800277e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001890:	201b      	movs	r0, #27
 8001892:	f000 ff90 	bl	80027b6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40010000 	.word	0x40010000
 80018a4:	40023800 	.word	0x40023800

080018a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <NMI_Handler+0x4>

080018b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <HardFault_Handler+0x4>

080018b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <MemManage_Handler+0x4>

080018c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <BusFault_Handler+0x4>

080018c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <UsageFault_Handler+0x4>

080018d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018fe:	f000 f8ff 	bl	8001b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800190c:	4802      	ldr	r0, [pc, #8]	@ (8001918 <DMA1_Stream0_IRQHandler+0x10>)
 800190e:	f001 f895 	bl	8002a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000248 	.word	0x20000248

0800191c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001920:	4802      	ldr	r0, [pc, #8]	@ (800192c <DMA1_Stream1_IRQHandler+0x10>)
 8001922:	f001 f88b 	bl	8002a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200002a8 	.word	0x200002a8

08001930 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001934:	4802      	ldr	r0, [pc, #8]	@ (8001940 <ADC_IRQHandler+0x10>)
 8001936:	f000 f96a 	bl	8001c0e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000014c 	.word	0x2000014c

08001944 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800194a:	f005 fd9f 	bl	800748c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000308 	.word	0x20000308

08001958 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800195c:	4802      	ldr	r0, [pc, #8]	@ (8001968 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800195e:	f005 fd95 	bl	800748c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000308 	.word	0x20000308

0800196c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001970:	4802      	ldr	r0, [pc, #8]	@ (800197c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001972:	f005 fd8b 	bl	800748c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000308 	.word	0x20000308

08001980 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001984:	4802      	ldr	r0, [pc, #8]	@ (8001990 <TIM1_CC_IRQHandler+0x10>)
 8001986:	f005 fd81 	bl	800748c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000308 	.word	0x20000308

08001994 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001998:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <I2C1_EV_IRQHandler+0x10>)
 800199a:	f001 fed3 	bl	8003744 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200001f4 	.word	0x200001f4

080019a8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80019ac:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <I2C1_ER_IRQHandler+0x10>)
 80019ae:	f002 f83a 	bl	8003a26 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200001f4 	.word	0x200001f4

080019bc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019c0:	4802      	ldr	r0, [pc, #8]	@ (80019cc <DMA2_Stream0_IRQHandler+0x10>)
 80019c2:	f001 f83b 	bl	8002a3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000194 	.word	0x20000194

080019d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80019d4:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <OTG_FS_IRQHandler+0x10>)
 80019d6:	f003 ff55 	bl	8005884 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20001280 	.word	0x20001280

080019e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e8:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <SystemInit+0x20>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ee:	4a05      	ldr	r2, [pc, #20]	@ (8001a04 <SystemInit+0x20>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a0c:	f7ff ffea 	bl	80019e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a10:	480c      	ldr	r0, [pc, #48]	@ (8001a44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a12:	490d      	ldr	r1, [pc, #52]	@ (8001a48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a14:	4a0d      	ldr	r2, [pc, #52]	@ (8001a4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a18:	e002      	b.n	8001a20 <LoopCopyDataInit>

08001a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a1e:	3304      	adds	r3, #4

08001a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a24:	d3f9      	bcc.n	8001a1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a26:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a28:	4c0a      	ldr	r4, [pc, #40]	@ (8001a54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a2c:	e001      	b.n	8001a32 <LoopFillZerobss>

08001a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a30:	3204      	adds	r2, #4

08001a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a34:	d3fb      	bcc.n	8001a2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a36:	f00a fa41 	bl	800bebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a3a:	f7fe fed7 	bl	80007ec <main>
  bx  lr    
 8001a3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a48:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8001a4c:	0800bfa4 	.word	0x0800bfa4
  ldr r2, =_sbss
 8001a50:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8001a54:	20001984 	.word	0x20001984

08001a58 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a58:	e7fe      	b.n	8001a58 <DMA1_Stream2_IRQHandler>
	...

08001a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a60:	4b0e      	ldr	r3, [pc, #56]	@ (8001a9c <HAL_Init+0x40>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a0d      	ldr	r2, [pc, #52]	@ (8001a9c <HAL_Init+0x40>)
 8001a66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <HAL_Init+0x40>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0a      	ldr	r2, [pc, #40]	@ (8001a9c <HAL_Init+0x40>)
 8001a72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a78:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <HAL_Init+0x40>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a07      	ldr	r2, [pc, #28]	@ (8001a9c <HAL_Init+0x40>)
 8001a7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a84:	2003      	movs	r0, #3
 8001a86:	f000 fe6f 	bl	8002768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8a:	200f      	movs	r0, #15
 8001a8c:	f000 f808 	bl	8001aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a90:	f7ff fd68 	bl	8001564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023c00 	.word	0x40023c00

08001aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa8:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <HAL_InitTick+0x54>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <HAL_InitTick+0x58>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 fe87 	bl	80027d2 <HAL_SYSTICK_Config>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00e      	b.n	8001aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b0f      	cmp	r3, #15
 8001ad2:	d80a      	bhi.n	8001aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8001adc:	f000 fe4f 	bl	800277e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae0:	4a06      	ldr	r2, [pc, #24]	@ (8001afc <HAL_InitTick+0x5c>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	e000      	b.n	8001aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	2000002c 	.word	0x2000002c
 8001af8:	20000034 	.word	0x20000034
 8001afc:	20000030 	.word	0x20000030

08001b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b04:	4b06      	ldr	r3, [pc, #24]	@ (8001b20 <HAL_IncTick+0x20>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <HAL_IncTick+0x24>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a04      	ldr	r2, [pc, #16]	@ (8001b24 <HAL_IncTick+0x24>)
 8001b12:	6013      	str	r3, [r2, #0]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000034 	.word	0x20000034
 8001b24:	20000998 	.word	0x20000998

08001b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	@ (8001b3c <HAL_GetTick+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20000998 	.word	0x20000998

08001b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b48:	f7ff ffee 	bl	8001b28 <HAL_GetTick>
 8001b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d005      	beq.n	8001b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <HAL_Delay+0x44>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b66:	bf00      	nop
 8001b68:	f7ff ffde 	bl	8001b28 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d8f7      	bhi.n	8001b68 <HAL_Delay+0x28>
  {
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000034 	.word	0x20000034

08001b88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e033      	b.n	8001c06 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff fd04 	bl	80015b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d118      	bne.n	8001bf8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bce:	f023 0302 	bic.w	r3, r3, #2
 8001bd2:	f043 0202 	orr.w	r2, r3, #2
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 fb6c 	bl	80022b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bea:	f023 0303 	bic.w	r3, r3, #3
 8001bee:	f043 0201 	orr.w	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bf6:	e001      	b.n	8001bfc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	f003 0320 	and.w	r3, r3, #32
 8001c3c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d049      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0xca>
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d046      	beq.n	8001cd8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d105      	bne.n	8001c62 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d12b      	bne.n	8001cc8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d127      	bne.n	8001cc8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d006      	beq.n	8001c94 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d119      	bne.n	8001cc8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0220 	bic.w	r2, r2, #32
 8001ca2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d105      	bne.n	8001cc8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	f043 0201 	orr.w	r2, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7fe fc1b 	bl	8000504 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f06f 0212 	mvn.w	r2, #18
 8001cd6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ce6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d057      	beq.n	8001d9e <HAL_ADC_IRQHandler+0x190>
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d054      	beq.n	8001d9e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d105      	bne.n	8001d0c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d04:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d139      	bne.n	8001d8e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d20:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d12b      	bne.n	8001d8e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d124      	bne.n	8001d8e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d11d      	bne.n	8001d8e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d119      	bne.n	8001d8e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d68:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d105      	bne.n	8001d8e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	f043 0201 	orr.w	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 fc10 	bl	80025b4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 020c 	mvn.w	r2, #12
 8001d9c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dac:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d017      	beq.n	8001de4 <HAL_ADC_IRQHandler+0x1d6>
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d014      	beq.n	8001de4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d10d      	bne.n	8001de4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dcc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f929 	bl	800202c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f06f 0201 	mvn.w	r2, #1
 8001de2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0320 	and.w	r3, r3, #32
 8001dea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001df2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d015      	beq.n	8001e26 <HAL_ADC_IRQHandler+0x218>
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d012      	beq.n	8001e26 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e04:	f043 0202 	orr.w	r2, r3, #2
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0220 	mvn.w	r2, #32
 8001e14:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f912 	bl	8002040 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f06f 0220 	mvn.w	r2, #32
 8001e24:	601a      	str	r2, [r3, #0]
  }
}
 8001e26:	bf00      	nop
 8001e28:	3718      	adds	r7, #24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_Start_DMA+0x22>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e0d0      	b.n	8001ff4 <HAL_ADC_Start_DMA+0x1c4>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d018      	beq.n	8001e9a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e78:	4b60      	ldr	r3, [pc, #384]	@ (8001ffc <HAL_ADC_Start_DMA+0x1cc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a60      	ldr	r2, [pc, #384]	@ (8002000 <HAL_ADC_Start_DMA+0x1d0>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	0c9a      	lsrs	r2, r3, #18
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001e8c:	e002      	b.n	8001e94 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f9      	bne.n	8001e8e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ea4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ea8:	d107      	bne.n	8001eba <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001eb8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	f040 8088 	bne.w	8001fda <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ed2:	f023 0301 	bic.w	r3, r3, #1
 8001ed6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d007      	beq.n	8001efc <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ef4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f08:	d106      	bne.n	8001f18 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	f023 0206 	bic.w	r2, r3, #6
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f16:	e002      	b.n	8001f1e <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f26:	4b37      	ldr	r3, [pc, #220]	@ (8002004 <HAL_ADC_Start_DMA+0x1d4>)
 8001f28:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f2e:	4a36      	ldr	r2, [pc, #216]	@ (8002008 <HAL_ADC_Start_DMA+0x1d8>)
 8001f30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f36:	4a35      	ldr	r2, [pc, #212]	@ (800200c <HAL_ADC_Start_DMA+0x1dc>)
 8001f38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f3e:	4a34      	ldr	r2, [pc, #208]	@ (8002010 <HAL_ADC_Start_DMA+0x1e0>)
 8001f40:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f4a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001f5a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f6a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	334c      	adds	r3, #76	@ 0x4c
 8001f76:	4619      	mov	r1, r3
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f000 fce4 	bl	8002948 <HAL_DMA_Start_IT>
 8001f80:	4603      	mov	r3, r0
 8001f82:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10f      	bne.n	8001fb0 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d129      	bne.n	8001ff2 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	e020      	b.n	8001ff2 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a17      	ldr	r2, [pc, #92]	@ (8002014 <HAL_ADC_Start_DMA+0x1e4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d11b      	bne.n	8001ff2 <HAL_ADC_Start_DMA+0x1c2>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d114      	bne.n	8001ff2 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001fd6:	609a      	str	r2, [r3, #8]
 8001fd8:	e00b      	b.n	8001ff2 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	f043 0210 	orr.w	r2, r3, #16
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fea:	f043 0201 	orr.w	r2, r3, #1
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001ff2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3720      	adds	r7, #32
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	2000002c 	.word	0x2000002c
 8002000:	431bde83 	.word	0x431bde83
 8002004:	40012300 	.word	0x40012300
 8002008:	080024b1 	.word	0x080024b1
 800200c:	0800256b 	.word	0x0800256b
 8002010:	08002587 	.word	0x08002587
 8002014:	40012000 	.word	0x40012000

08002018 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1c>
 800206c:	2302      	movs	r3, #2
 800206e:	e113      	b.n	8002298 <HAL_ADC_ConfigChannel+0x244>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b09      	cmp	r3, #9
 800207e:	d925      	bls.n	80020cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68d9      	ldr	r1, [r3, #12]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	3b1e      	subs	r3, #30
 8002096:	2207      	movs	r2, #7
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43da      	mvns	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	400a      	ands	r2, r1
 80020a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68d9      	ldr	r1, [r3, #12]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	4603      	mov	r3, r0
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4403      	add	r3, r0
 80020be:	3b1e      	subs	r3, #30
 80020c0:	409a      	lsls	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	e022      	b.n	8002112 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6919      	ldr	r1, [r3, #16]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	461a      	mov	r2, r3
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	2207      	movs	r2, #7
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43da      	mvns	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	400a      	ands	r2, r1
 80020ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	6919      	ldr	r1, [r3, #16]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	4618      	mov	r0, r3
 8002102:	4603      	mov	r3, r0
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4403      	add	r3, r0
 8002108:	409a      	lsls	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b06      	cmp	r3, #6
 8002118:	d824      	bhi.n	8002164 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	4413      	add	r3, r2
 800212a:	3b05      	subs	r3, #5
 800212c:	221f      	movs	r2, #31
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	400a      	ands	r2, r1
 800213a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	b29b      	uxth	r3, r3
 8002148:	4618      	mov	r0, r3
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	3b05      	subs	r3, #5
 8002156:	fa00 f203 	lsl.w	r2, r0, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	635a      	str	r2, [r3, #52]	@ 0x34
 8002162:	e04c      	b.n	80021fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b0c      	cmp	r3, #12
 800216a:	d824      	bhi.n	80021b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	3b23      	subs	r3, #35	@ 0x23
 800217e:	221f      	movs	r2, #31
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43da      	mvns	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	400a      	ands	r2, r1
 800218c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	4618      	mov	r0, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	3b23      	subs	r3, #35	@ 0x23
 80021a8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80021b4:	e023      	b.n	80021fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3b41      	subs	r3, #65	@ 0x41
 80021c8:	221f      	movs	r2, #31
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	400a      	ands	r2, r1
 80021d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	4618      	mov	r0, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3b41      	subs	r3, #65	@ 0x41
 80021f2:	fa00 f203 	lsl.w	r2, r0, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021fe:	4b29      	ldr	r3, [pc, #164]	@ (80022a4 <HAL_ADC_ConfigChannel+0x250>)
 8002200:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a28      	ldr	r2, [pc, #160]	@ (80022a8 <HAL_ADC_ConfigChannel+0x254>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d10f      	bne.n	800222c <HAL_ADC_ConfigChannel+0x1d8>
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2b12      	cmp	r3, #18
 8002212:	d10b      	bne.n	800222c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a1d      	ldr	r2, [pc, #116]	@ (80022a8 <HAL_ADC_ConfigChannel+0x254>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d12b      	bne.n	800228e <HAL_ADC_ConfigChannel+0x23a>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1c      	ldr	r2, [pc, #112]	@ (80022ac <HAL_ADC_ConfigChannel+0x258>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d003      	beq.n	8002248 <HAL_ADC_ConfigChannel+0x1f4>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b11      	cmp	r3, #17
 8002246:	d122      	bne.n	800228e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a11      	ldr	r2, [pc, #68]	@ (80022ac <HAL_ADC_ConfigChannel+0x258>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d111      	bne.n	800228e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800226a:	4b11      	ldr	r3, [pc, #68]	@ (80022b0 <HAL_ADC_ConfigChannel+0x25c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a11      	ldr	r2, [pc, #68]	@ (80022b4 <HAL_ADC_ConfigChannel+0x260>)
 8002270:	fba2 2303 	umull	r2, r3, r2, r3
 8002274:	0c9a      	lsrs	r2, r3, #18
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002280:	e002      	b.n	8002288 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	3b01      	subs	r3, #1
 8002286:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d1f9      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	40012300 	.word	0x40012300
 80022a8:	40012000 	.word	0x40012000
 80022ac:	10000012 	.word	0x10000012
 80022b0:	2000002c 	.word	0x2000002c
 80022b4:	431bde83 	.word	0x431bde83

080022b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022c0:	4b79      	ldr	r3, [pc, #484]	@ (80024a8 <ADC_Init+0x1f0>)
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	431a      	orrs	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	021a      	lsls	r2, r3, #8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002310:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6859      	ldr	r1, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002332:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6899      	ldr	r1, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234a:	4a58      	ldr	r2, [pc, #352]	@ (80024ac <ADC_Init+0x1f4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d022      	beq.n	8002396 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800235e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6899      	ldr	r1, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002380:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6899      	ldr	r1, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	e00f      	b.n	80023b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0202 	bic.w	r2, r2, #2
 80023c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6899      	ldr	r1, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	7e1b      	ldrb	r3, [r3, #24]
 80023d0:	005a      	lsls	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01b      	beq.n	800241c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002402:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6859      	ldr	r1, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240e:	3b01      	subs	r3, #1
 8002410:	035a      	lsls	r2, r3, #13
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	e007      	b.n	800242c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800242a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800243a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	3b01      	subs	r3, #1
 8002448:	051a      	lsls	r2, r3, #20
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002460:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6899      	ldr	r1, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800246e:	025a      	lsls	r2, r3, #9
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002486:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6899      	ldr	r1, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	029a      	lsls	r2, r3, #10
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	609a      	str	r2, [r3, #8]
}
 800249c:	bf00      	nop
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	40012300 	.word	0x40012300
 80024ac:	0f000001 	.word	0x0f000001

080024b0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d13c      	bne.n	8002544 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d12b      	bne.n	800253c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d127      	bne.n	800253c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d006      	beq.n	8002508 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002504:	2b00      	cmp	r3, #0
 8002506:	d119      	bne.n	800253c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0220 	bic.w	r2, r2, #32
 8002516:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d105      	bne.n	800253c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002534:	f043 0201 	orr.w	r2, r3, #1
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f7fd ffe1 	bl	8000504 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002542:	e00e      	b.n	8002562 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	f003 0310 	and.w	r3, r3, #16
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f7ff fd75 	bl	8002040 <HAL_ADC_ErrorCallback>
}
 8002556:	e004      	b.n	8002562 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800255c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002576:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f7ff fd4d 	bl	8002018 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002592:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2240      	movs	r2, #64	@ 0x40
 8002598:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	f043 0204 	orr.w	r2, r3, #4
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f7ff fd4a 	bl	8002040 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d8:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <__NVIC_SetPriorityGrouping+0x44>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025e4:	4013      	ands	r3, r2
 80025e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025fa:	4a04      	ldr	r2, [pc, #16]	@ (800260c <__NVIC_SetPriorityGrouping+0x44>)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	60d3      	str	r3, [r2, #12]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002614:	4b04      	ldr	r3, [pc, #16]	@ (8002628 <__NVIC_GetPriorityGrouping+0x18>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	f003 0307 	and.w	r3, r3, #7
}
 800261e:	4618      	mov	r0, r3
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	2b00      	cmp	r3, #0
 800263c:	db0b      	blt.n	8002656 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	f003 021f 	and.w	r2, r3, #31
 8002644:	4907      	ldr	r1, [pc, #28]	@ (8002664 <__NVIC_EnableIRQ+0x38>)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	2001      	movs	r0, #1
 800264e:	fa00 f202 	lsl.w	r2, r0, r2
 8002652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	e000e100 	.word	0xe000e100

08002668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	6039      	str	r1, [r7, #0]
 8002672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002678:	2b00      	cmp	r3, #0
 800267a:	db0a      	blt.n	8002692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	b2da      	uxtb	r2, r3
 8002680:	490c      	ldr	r1, [pc, #48]	@ (80026b4 <__NVIC_SetPriority+0x4c>)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	0112      	lsls	r2, r2, #4
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	440b      	add	r3, r1
 800268c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002690:	e00a      	b.n	80026a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	4908      	ldr	r1, [pc, #32]	@ (80026b8 <__NVIC_SetPriority+0x50>)
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	3b04      	subs	r3, #4
 80026a0:	0112      	lsls	r2, r2, #4
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	440b      	add	r3, r1
 80026a6:	761a      	strb	r2, [r3, #24]
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	e000e100 	.word	0xe000e100
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	@ 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	f1c3 0307 	rsb	r3, r3, #7
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	bf28      	it	cs
 80026da:	2304      	movcs	r3, #4
 80026dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3304      	adds	r3, #4
 80026e2:	2b06      	cmp	r3, #6
 80026e4:	d902      	bls.n	80026ec <NVIC_EncodePriority+0x30>
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3b03      	subs	r3, #3
 80026ea:	e000      	b.n	80026ee <NVIC_EncodePriority+0x32>
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f0:	f04f 32ff 	mov.w	r2, #4294967295
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43da      	mvns	r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	401a      	ands	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002704:	f04f 31ff 	mov.w	r1, #4294967295
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	fa01 f303 	lsl.w	r3, r1, r3
 800270e:	43d9      	mvns	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002714:	4313      	orrs	r3, r2
         );
}
 8002716:	4618      	mov	r0, r3
 8002718:	3724      	adds	r7, #36	@ 0x24
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3b01      	subs	r3, #1
 8002730:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002734:	d301      	bcc.n	800273a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002736:	2301      	movs	r3, #1
 8002738:	e00f      	b.n	800275a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800273a:	4a0a      	ldr	r2, [pc, #40]	@ (8002764 <SysTick_Config+0x40>)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3b01      	subs	r3, #1
 8002740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002742:	210f      	movs	r1, #15
 8002744:	f04f 30ff 	mov.w	r0, #4294967295
 8002748:	f7ff ff8e 	bl	8002668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800274c:	4b05      	ldr	r3, [pc, #20]	@ (8002764 <SysTick_Config+0x40>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002752:	4b04      	ldr	r3, [pc, #16]	@ (8002764 <SysTick_Config+0x40>)
 8002754:	2207      	movs	r2, #7
 8002756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	e000e010 	.word	0xe000e010

08002768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff ff29 	bl	80025c8 <__NVIC_SetPriorityGrouping>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800277e:	b580      	push	{r7, lr}
 8002780:	b086      	sub	sp, #24
 8002782:	af00      	add	r7, sp, #0
 8002784:	4603      	mov	r3, r0
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002790:	f7ff ff3e 	bl	8002610 <__NVIC_GetPriorityGrouping>
 8002794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	6978      	ldr	r0, [r7, #20]
 800279c:	f7ff ff8e 	bl	80026bc <NVIC_EncodePriority>
 80027a0:	4602      	mov	r2, r0
 80027a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a6:	4611      	mov	r1, r2
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff5d 	bl	8002668 <__NVIC_SetPriority>
}
 80027ae:	bf00      	nop
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	4603      	mov	r3, r0
 80027be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff31 	bl	800262c <__NVIC_EnableIRQ>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff ffa2 	bl	8002724 <SysTick_Config>
 80027e0:	4603      	mov	r3, r0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b086      	sub	sp, #24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027f8:	f7ff f996 	bl	8001b28 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e099      	b.n	800293c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2202      	movs	r2, #2
 800280c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002828:	e00f      	b.n	800284a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800282a:	f7ff f97d 	bl	8001b28 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b05      	cmp	r3, #5
 8002836:	d908      	bls.n	800284a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2203      	movs	r2, #3
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e078      	b.n	800293c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1e8      	bne.n	800282a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	4b38      	ldr	r3, [pc, #224]	@ (8002944 <HAL_DMA_Init+0x158>)
 8002864:	4013      	ands	r3, r2
 8002866:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002876:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002882:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d107      	bne.n	80028b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ac:	4313      	orrs	r3, r2
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f023 0307 	bic.w	r3, r3, #7
 80028ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d117      	bne.n	800290e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00e      	beq.n	800290e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fa9f 	bl	8002e34 <DMA_CheckFifoParam>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2240      	movs	r2, #64	@ 0x40
 8002900:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800290a:	2301      	movs	r3, #1
 800290c:	e016      	b.n	800293c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f000 fa56 	bl	8002dc8 <DMA_CalcBaseAndBitshift>
 800291c:	4603      	mov	r3, r0
 800291e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002924:	223f      	movs	r2, #63	@ 0x3f
 8002926:	409a      	lsls	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	f010803f 	.word	0xf010803f

08002948 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	607a      	str	r2, [r7, #4]
 8002954:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_DMA_Start_IT+0x26>
 800296a:	2302      	movs	r3, #2
 800296c:	e040      	b.n	80029f0 <HAL_DMA_Start_IT+0xa8>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b01      	cmp	r3, #1
 8002980:	d12f      	bne.n	80029e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2202      	movs	r2, #2
 8002986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f9e8 	bl	8002d6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a0:	223f      	movs	r2, #63	@ 0x3f
 80029a2:	409a      	lsls	r2, r3
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f042 0216 	orr.w	r2, r2, #22
 80029b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d007      	beq.n	80029d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0208 	orr.w	r2, r2, #8
 80029ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	e005      	b.n	80029ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029ea:	2302      	movs	r3, #2
 80029ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d004      	beq.n	8002a16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2280      	movs	r2, #128	@ 0x80
 8002a10:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e00c      	b.n	8002a30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2205      	movs	r2, #5
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0201 	bic.w	r2, r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a48:	4b8e      	ldr	r3, [pc, #568]	@ (8002c84 <HAL_DMA_IRQHandler+0x248>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a8e      	ldr	r2, [pc, #568]	@ (8002c88 <HAL_DMA_IRQHandler+0x24c>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	0a9b      	lsrs	r3, r3, #10
 8002a54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a66:	2208      	movs	r2, #8
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d01a      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d013      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0204 	bic.w	r2, r2, #4
 8002a8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a94:	2208      	movs	r2, #8
 8002a96:	409a      	lsls	r2, r3
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa0:	f043 0201 	orr.w	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aac:	2201      	movs	r2, #1
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d012      	beq.n	8002ade <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aca:	2201      	movs	r2, #1
 8002acc:	409a      	lsls	r2, r3
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ad6:	f043 0202 	orr.w	r2, r3, #2
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae2:	2204      	movs	r2, #4
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d012      	beq.n	8002b14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00b      	beq.n	8002b14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b00:	2204      	movs	r2, #4
 8002b02:	409a      	lsls	r2, r3
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0c:	f043 0204 	orr.w	r2, r3, #4
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b18:	2210      	movs	r2, #16
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d043      	beq.n	8002bac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d03c      	beq.n	8002bac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b36:	2210      	movs	r2, #16
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d018      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d108      	bne.n	8002b6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d024      	beq.n	8002bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	4798      	blx	r3
 8002b6a:	e01f      	b.n	8002bac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d01b      	beq.n	8002bac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4798      	blx	r3
 8002b7c:	e016      	b.n	8002bac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d107      	bne.n	8002b9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0208 	bic.w	r2, r2, #8
 8002b9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 808f 	beq.w	8002cdc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 8087 	beq.w	8002cdc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	d136      	bne.n	8002c54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0216 	bic.w	r2, r2, #22
 8002bf4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695a      	ldr	r2, [r3, #20]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d103      	bne.n	8002c16 <HAL_DMA_IRQHandler+0x1da>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0208 	bic.w	r2, r2, #8
 8002c24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2a:	223f      	movs	r2, #63	@ 0x3f
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d07e      	beq.n	8002d48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	4798      	blx	r3
        }
        return;
 8002c52:	e079      	b.n	8002d48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d01d      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10d      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d031      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	4798      	blx	r3
 8002c80:	e02c      	b.n	8002cdc <HAL_DMA_IRQHandler+0x2a0>
 8002c82:	bf00      	nop
 8002c84:	2000002c 	.word	0x2000002c
 8002c88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d023      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4798      	blx	r3
 8002c9c:	e01e      	b.n	8002cdc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10f      	bne.n	8002ccc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0210 	bic.w	r2, r2, #16
 8002cba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d032      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d022      	beq.n	8002d36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2205      	movs	r2, #5
 8002cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0201 	bic.w	r2, r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d307      	bcc.n	8002d24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f2      	bne.n	8002d08 <HAL_DMA_IRQHandler+0x2cc>
 8002d22:	e000      	b.n	8002d26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	4798      	blx	r3
 8002d46:	e000      	b.n	8002d4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d48:	bf00      	nop
    }
  }
}
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d5e:	b2db      	uxtb	r3, r3
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002d88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b40      	cmp	r3, #64	@ 0x40
 8002d98:	d108      	bne.n	8002dac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002daa:	e007      	b.n	8002dbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	60da      	str	r2, [r3, #12]
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	3b10      	subs	r3, #16
 8002dd8:	4a14      	ldr	r2, [pc, #80]	@ (8002e2c <DMA_CalcBaseAndBitshift+0x64>)
 8002dda:	fba2 2303 	umull	r2, r3, r2, r3
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002de2:	4a13      	ldr	r2, [pc, #76]	@ (8002e30 <DMA_CalcBaseAndBitshift+0x68>)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4413      	add	r3, r2
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d909      	bls.n	8002e0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002dfe:	f023 0303 	bic.w	r3, r3, #3
 8002e02:	1d1a      	adds	r2, r3, #4
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e08:	e007      	b.n	8002e1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e12:	f023 0303 	bic.w	r3, r3, #3
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	aaaaaaab 	.word	0xaaaaaaab
 8002e30:	0800bf8c 	.word	0x0800bf8c

08002e34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d11f      	bne.n	8002e8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d856      	bhi.n	8002f02 <DMA_CheckFifoParam+0xce>
 8002e54:	a201      	add	r2, pc, #4	@ (adr r2, 8002e5c <DMA_CheckFifoParam+0x28>)
 8002e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5a:	bf00      	nop
 8002e5c:	08002e6d 	.word	0x08002e6d
 8002e60:	08002e7f 	.word	0x08002e7f
 8002e64:	08002e6d 	.word	0x08002e6d
 8002e68:	08002f03 	.word	0x08002f03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e70:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d046      	beq.n	8002f06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e7c:	e043      	b.n	8002f06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e82:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002e86:	d140      	bne.n	8002f0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e8c:	e03d      	b.n	8002f0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e96:	d121      	bne.n	8002edc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d837      	bhi.n	8002f0e <DMA_CheckFifoParam+0xda>
 8002e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea4 <DMA_CheckFifoParam+0x70>)
 8002ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea4:	08002eb5 	.word	0x08002eb5
 8002ea8:	08002ebb 	.word	0x08002ebb
 8002eac:	08002eb5 	.word	0x08002eb5
 8002eb0:	08002ecd 	.word	0x08002ecd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb8:	e030      	b.n	8002f1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d025      	beq.n	8002f12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eca:	e022      	b.n	8002f12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ed4:	d11f      	bne.n	8002f16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002eda:	e01c      	b.n	8002f16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d903      	bls.n	8002eea <DMA_CheckFifoParam+0xb6>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d003      	beq.n	8002ef0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ee8:	e018      	b.n	8002f1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
      break;
 8002eee:	e015      	b.n	8002f1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00e      	beq.n	8002f1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
      break;
 8002f00:	e00b      	b.n	8002f1a <DMA_CheckFifoParam+0xe6>
      break;
 8002f02:	bf00      	nop
 8002f04:	e00a      	b.n	8002f1c <DMA_CheckFifoParam+0xe8>
      break;
 8002f06:	bf00      	nop
 8002f08:	e008      	b.n	8002f1c <DMA_CheckFifoParam+0xe8>
      break;
 8002f0a:	bf00      	nop
 8002f0c:	e006      	b.n	8002f1c <DMA_CheckFifoParam+0xe8>
      break;
 8002f0e:	bf00      	nop
 8002f10:	e004      	b.n	8002f1c <DMA_CheckFifoParam+0xe8>
      break;
 8002f12:	bf00      	nop
 8002f14:	e002      	b.n	8002f1c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f16:	bf00      	nop
 8002f18:	e000      	b.n	8002f1c <DMA_CheckFifoParam+0xe8>
      break;
 8002f1a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop

08002f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	@ 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
 8002f46:	e159      	b.n	80031fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f48:	2201      	movs	r2, #1
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	f040 8148 	bne.w	80031f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d005      	beq.n	8002f7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d130      	bne.n	8002fe0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	2203      	movs	r2, #3
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 0201 	and.w	r2, r3, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	2b03      	cmp	r3, #3
 8002fea:	d017      	beq.n	800301c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4013      	ands	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d123      	bne.n	8003070 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	08da      	lsrs	r2, r3, #3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3208      	adds	r2, #8
 8003030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003034:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	220f      	movs	r2, #15
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	08da      	lsrs	r2, r3, #3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3208      	adds	r2, #8
 800306a:	69b9      	ldr	r1, [r7, #24]
 800306c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	2203      	movs	r2, #3
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0203 	and.w	r2, r3, #3
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80a2 	beq.w	80031f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	4b57      	ldr	r3, [pc, #348]	@ (8003214 <HAL_GPIO_Init+0x2e8>)
 80030b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ba:	4a56      	ldr	r2, [pc, #344]	@ (8003214 <HAL_GPIO_Init+0x2e8>)
 80030bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030c2:	4b54      	ldr	r3, [pc, #336]	@ (8003214 <HAL_GPIO_Init+0x2e8>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ce:	4a52      	ldr	r2, [pc, #328]	@ (8003218 <HAL_GPIO_Init+0x2ec>)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	089b      	lsrs	r3, r3, #2
 80030d4:	3302      	adds	r3, #2
 80030d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	220f      	movs	r2, #15
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43db      	mvns	r3, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4013      	ands	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a49      	ldr	r2, [pc, #292]	@ (800321c <HAL_GPIO_Init+0x2f0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d019      	beq.n	800312e <HAL_GPIO_Init+0x202>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a48      	ldr	r2, [pc, #288]	@ (8003220 <HAL_GPIO_Init+0x2f4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d013      	beq.n	800312a <HAL_GPIO_Init+0x1fe>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a47      	ldr	r2, [pc, #284]	@ (8003224 <HAL_GPIO_Init+0x2f8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00d      	beq.n	8003126 <HAL_GPIO_Init+0x1fa>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a46      	ldr	r2, [pc, #280]	@ (8003228 <HAL_GPIO_Init+0x2fc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <HAL_GPIO_Init+0x1f6>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a45      	ldr	r2, [pc, #276]	@ (800322c <HAL_GPIO_Init+0x300>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_GPIO_Init+0x1f2>
 800311a:	2304      	movs	r3, #4
 800311c:	e008      	b.n	8003130 <HAL_GPIO_Init+0x204>
 800311e:	2307      	movs	r3, #7
 8003120:	e006      	b.n	8003130 <HAL_GPIO_Init+0x204>
 8003122:	2303      	movs	r3, #3
 8003124:	e004      	b.n	8003130 <HAL_GPIO_Init+0x204>
 8003126:	2302      	movs	r3, #2
 8003128:	e002      	b.n	8003130 <HAL_GPIO_Init+0x204>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <HAL_GPIO_Init+0x204>
 800312e:	2300      	movs	r3, #0
 8003130:	69fa      	ldr	r2, [r7, #28]
 8003132:	f002 0203 	and.w	r2, r2, #3
 8003136:	0092      	lsls	r2, r2, #2
 8003138:	4093      	lsls	r3, r2
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4313      	orrs	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003140:	4935      	ldr	r1, [pc, #212]	@ (8003218 <HAL_GPIO_Init+0x2ec>)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	089b      	lsrs	r3, r3, #2
 8003146:	3302      	adds	r3, #2
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800314e:	4b38      	ldr	r3, [pc, #224]	@ (8003230 <HAL_GPIO_Init+0x304>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	43db      	mvns	r3, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4013      	ands	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003172:	4a2f      	ldr	r2, [pc, #188]	@ (8003230 <HAL_GPIO_Init+0x304>)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003178:	4b2d      	ldr	r3, [pc, #180]	@ (8003230 <HAL_GPIO_Init+0x304>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4313      	orrs	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800319c:	4a24      	ldr	r2, [pc, #144]	@ (8003230 <HAL_GPIO_Init+0x304>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031a2:	4b23      	ldr	r3, [pc, #140]	@ (8003230 <HAL_GPIO_Init+0x304>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003230 <HAL_GPIO_Init+0x304>)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031cc:	4b18      	ldr	r3, [pc, #96]	@ (8003230 <HAL_GPIO_Init+0x304>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003230 <HAL_GPIO_Init+0x304>)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3301      	adds	r3, #1
 80031fa:	61fb      	str	r3, [r7, #28]
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	2b0f      	cmp	r3, #15
 8003200:	f67f aea2 	bls.w	8002f48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	3724      	adds	r7, #36	@ 0x24
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	40013800 	.word	0x40013800
 800321c:	40020000 	.word	0x40020000
 8003220:	40020400 	.word	0x40020400
 8003224:	40020800 	.word	0x40020800
 8003228:	40020c00 	.word	0x40020c00
 800322c:	40021000 	.word	0x40021000
 8003230:	40013c00 	.word	0x40013c00

08003234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	807b      	strh	r3, [r7, #2]
 8003240:	4613      	mov	r3, r2
 8003242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003244:	787b      	ldrb	r3, [r7, #1]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800324a:	887a      	ldrh	r2, [r7, #2]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003250:	e003      	b.n	800325a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003252:	887b      	ldrh	r3, [r7, #2]
 8003254:	041a      	lsls	r2, r3, #16
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	619a      	str	r2, [r3, #24]
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003266:	b480      	push	{r7}
 8003268:	b085      	sub	sp, #20
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	460b      	mov	r3, r1
 8003270:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003278:	887a      	ldrh	r2, [r7, #2]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4013      	ands	r3, r2
 800327e:	041a      	lsls	r2, r3, #16
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	43d9      	mvns	r1, r3
 8003284:	887b      	ldrh	r3, [r7, #2]
 8003286:	400b      	ands	r3, r1
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	619a      	str	r2, [r3, #24]
}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e12b      	b.n	8003506 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fe f9f4 	bl	80016b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	@ 0x24
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003300:	f003 fffe 	bl	8007300 <HAL_RCC_GetPCLK1Freq>
 8003304:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4a81      	ldr	r2, [pc, #516]	@ (8003510 <HAL_I2C_Init+0x274>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d807      	bhi.n	8003320 <HAL_I2C_Init+0x84>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a80      	ldr	r2, [pc, #512]	@ (8003514 <HAL_I2C_Init+0x278>)
 8003314:	4293      	cmp	r3, r2
 8003316:	bf94      	ite	ls
 8003318:	2301      	movls	r3, #1
 800331a:	2300      	movhi	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	e006      	b.n	800332e <HAL_I2C_Init+0x92>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4a7d      	ldr	r2, [pc, #500]	@ (8003518 <HAL_I2C_Init+0x27c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	bf94      	ite	ls
 8003328:	2301      	movls	r3, #1
 800332a:	2300      	movhi	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e0e7      	b.n	8003506 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4a78      	ldr	r2, [pc, #480]	@ (800351c <HAL_I2C_Init+0x280>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0c9b      	lsrs	r3, r3, #18
 8003340:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	430a      	orrs	r2, r1
 8003354:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a6a      	ldr	r2, [pc, #424]	@ (8003510 <HAL_I2C_Init+0x274>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d802      	bhi.n	8003370 <HAL_I2C_Init+0xd4>
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	3301      	adds	r3, #1
 800336e:	e009      	b.n	8003384 <HAL_I2C_Init+0xe8>
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003376:	fb02 f303 	mul.w	r3, r2, r3
 800337a:	4a69      	ldr	r2, [pc, #420]	@ (8003520 <HAL_I2C_Init+0x284>)
 800337c:	fba2 2303 	umull	r2, r3, r2, r3
 8003380:	099b      	lsrs	r3, r3, #6
 8003382:	3301      	adds	r3, #1
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	430b      	orrs	r3, r1
 800338a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003396:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	495c      	ldr	r1, [pc, #368]	@ (8003510 <HAL_I2C_Init+0x274>)
 80033a0:	428b      	cmp	r3, r1
 80033a2:	d819      	bhi.n	80033d8 <HAL_I2C_Init+0x13c>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	1e59      	subs	r1, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80033b2:	1c59      	adds	r1, r3, #1
 80033b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033b8:	400b      	ands	r3, r1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00a      	beq.n	80033d4 <HAL_I2C_Init+0x138>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1e59      	subs	r1, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033cc:	3301      	adds	r3, #1
 80033ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d2:	e051      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 80033d4:	2304      	movs	r3, #4
 80033d6:	e04f      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d111      	bne.n	8003404 <HAL_I2C_Init+0x168>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1e58      	subs	r0, r3, #1
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6859      	ldr	r1, [r3, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	440b      	add	r3, r1
 80033ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f2:	3301      	adds	r3, #1
 80033f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e012      	b.n	800342a <HAL_I2C_Init+0x18e>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1e58      	subs	r0, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	0099      	lsls	r1, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	fbb0 f3f3 	udiv	r3, r0, r3
 800341a:	3301      	adds	r3, #1
 800341c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf0c      	ite	eq
 8003424:	2301      	moveq	r3, #1
 8003426:	2300      	movne	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_I2C_Init+0x196>
 800342e:	2301      	movs	r3, #1
 8003430:	e022      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10e      	bne.n	8003458 <HAL_I2C_Init+0x1bc>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1e58      	subs	r0, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6859      	ldr	r1, [r3, #4]
 8003442:	460b      	mov	r3, r1
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	440b      	add	r3, r1
 8003448:	fbb0 f3f3 	udiv	r3, r0, r3
 800344c:	3301      	adds	r3, #1
 800344e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003456:	e00f      	b.n	8003478 <HAL_I2C_Init+0x1dc>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	1e58      	subs	r0, r3, #1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6859      	ldr	r1, [r3, #4]
 8003460:	460b      	mov	r3, r1
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	0099      	lsls	r1, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	fbb0 f3f3 	udiv	r3, r0, r3
 800346e:	3301      	adds	r3, #1
 8003470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003474:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	6809      	ldr	r1, [r1, #0]
 800347c:	4313      	orrs	r3, r2
 800347e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69da      	ldr	r2, [r3, #28]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80034a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6911      	ldr	r1, [r2, #16]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68d2      	ldr	r2, [r2, #12]
 80034b2:	4311      	orrs	r1, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	430b      	orrs	r3, r1
 80034ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	000186a0 	.word	0x000186a0
 8003514:	001e847f 	.word	0x001e847f
 8003518:	003d08ff 	.word	0x003d08ff
 800351c:	431bde83 	.word	0x431bde83
 8003520:	10624dd3 	.word	0x10624dd3

08003524 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003536:	2b80      	cmp	r3, #128	@ 0x80
 8003538:	d103      	bne.n	8003542 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2200      	movs	r2, #0
 8003540:	611a      	str	r2, [r3, #16]
  }
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	4608      	mov	r0, r1
 800355a:	4611      	mov	r1, r2
 800355c:	461a      	mov	r2, r3
 800355e:	4603      	mov	r3, r0
 8003560:	817b      	strh	r3, [r7, #10]
 8003562:	460b      	mov	r3, r1
 8003564:	813b      	strh	r3, [r7, #8]
 8003566:	4613      	mov	r3, r2
 8003568:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800356a:	f7fe fadd 	bl	8001b28 <HAL_GetTick>
 800356e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b20      	cmp	r3, #32
 800357a:	f040 80d9 	bne.w	8003730 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2319      	movs	r3, #25
 8003584:	2201      	movs	r2, #1
 8003586:	496d      	ldr	r1, [pc, #436]	@ (800373c <HAL_I2C_Mem_Write+0x1ec>)
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f001 fe11 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003594:	2302      	movs	r3, #2
 8003596:	e0cc      	b.n	8003732 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_I2C_Mem_Write+0x56>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e0c5      	b.n	8003732 <HAL_I2C_Mem_Write+0x1e2>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d007      	beq.n	80035cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2221      	movs	r2, #33	@ 0x21
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2240      	movs	r2, #64	@ 0x40
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6a3a      	ldr	r2, [r7, #32]
 80035f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80035fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a4d      	ldr	r2, [pc, #308]	@ (8003740 <HAL_I2C_Mem_Write+0x1f0>)
 800360c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800360e:	88f8      	ldrh	r0, [r7, #6]
 8003610:	893a      	ldrh	r2, [r7, #8]
 8003612:	8979      	ldrh	r1, [r7, #10]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	4603      	mov	r3, r0
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f001 fc88 	bl	8004f34 <I2C_RequestMemoryWrite>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d052      	beq.n	80036d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e081      	b.n	8003732 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f001 fed6 	bl	80053e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00d      	beq.n	800365a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	2b04      	cmp	r3, #4
 8003644:	d107      	bne.n	8003656 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003654:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e06b      	b.n	8003732 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365e:	781a      	ldrb	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366a:	1c5a      	adds	r2, r3, #1
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b04      	cmp	r3, #4
 8003696:	d11b      	bne.n	80036d0 <HAL_I2C_Mem_Write+0x180>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800369c:	2b00      	cmp	r3, #0
 800369e:	d017      	beq.n	80036d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a4:	781a      	ldrb	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ba:	3b01      	subs	r3, #1
 80036bc:	b29a      	uxth	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1aa      	bne.n	800362e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f001 fec9 	bl	8005474 <I2C_WaitOnBTFFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00d      	beq.n	8003704 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d107      	bne.n	8003700 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e016      	b.n	8003732 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003712:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	e000      	b.n	8003732 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003730:	2302      	movs	r3, #2
  }
}
 8003732:	4618      	mov	r0, r3
 8003734:	3718      	adds	r7, #24
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	00100002 	.word	0x00100002
 8003740:	ffff0000 	.word	0xffff0000

08003744 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003764:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800376c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	2b10      	cmp	r3, #16
 8003772:	d003      	beq.n	800377c <HAL_I2C_EV_IRQHandler+0x38>
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b40      	cmp	r3, #64	@ 0x40
 8003778:	f040 80c1 	bne.w	80038fe <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10d      	bne.n	80037b2 <HAL_I2C_EV_IRQHandler+0x6e>
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800379c:	d003      	beq.n	80037a6 <HAL_I2C_EV_IRQHandler+0x62>
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80037a4:	d101      	bne.n	80037aa <HAL_I2C_EV_IRQHandler+0x66>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e000      	b.n	80037ac <HAL_I2C_EV_IRQHandler+0x68>
 80037aa:	2300      	movs	r3, #0
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	f000 8132 	beq.w	8003a16 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00c      	beq.n	80037d6 <HAL_I2C_EV_IRQHandler+0x92>
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	0a5b      	lsrs	r3, r3, #9
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d006      	beq.n	80037d6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f001 fefc 	bl	80055c6 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fd91 	bl	80042f6 <I2C_Master_SB>
 80037d4:	e092      	b.n	80038fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	08db      	lsrs	r3, r3, #3
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <HAL_I2C_EV_IRQHandler+0xb2>
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	0a5b      	lsrs	r3, r3, #9
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fe07 	bl	8004402 <I2C_Master_ADD10>
 80037f4:	e082      	b.n	80038fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	085b      	lsrs	r3, r3, #1
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <HAL_I2C_EV_IRQHandler+0xd2>
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	0a5b      	lsrs	r3, r3, #9
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fe21 	bl	8004456 <I2C_Master_ADDR>
 8003814:	e072      	b.n	80038fc <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	089b      	lsrs	r3, r3, #2
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d03b      	beq.n	800389a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800382c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003830:	f000 80f3 	beq.w	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	09db      	lsrs	r3, r3, #7
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00f      	beq.n	8003860 <HAL_I2C_EV_IRQHandler+0x11c>
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	0a9b      	lsrs	r3, r3, #10
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d009      	beq.n	8003860 <HAL_I2C_EV_IRQHandler+0x11c>
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	089b      	lsrs	r3, r3, #2
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d103      	bne.n	8003860 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f9e9 	bl	8003c30 <I2C_MasterTransmit_TXE>
 800385e:	e04d      	b.n	80038fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	089b      	lsrs	r3, r3, #2
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80d6 	beq.w	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	0a5b      	lsrs	r3, r3, #9
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 80cf 	beq.w	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800387c:	7bbb      	ldrb	r3, [r7, #14]
 800387e:	2b21      	cmp	r3, #33	@ 0x21
 8003880:	d103      	bne.n	800388a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 fa70 	bl	8003d68 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003888:	e0c7      	b.n	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800388a:	7bfb      	ldrb	r3, [r7, #15]
 800388c:	2b40      	cmp	r3, #64	@ 0x40
 800388e:	f040 80c4 	bne.w	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 fade 	bl	8003e54 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003898:	e0bf      	b.n	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038a8:	f000 80b7 	beq.w	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	099b      	lsrs	r3, r3, #6
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00f      	beq.n	80038d8 <HAL_I2C_EV_IRQHandler+0x194>
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	0a9b      	lsrs	r3, r3, #10
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d009      	beq.n	80038d8 <HAL_I2C_EV_IRQHandler+0x194>
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	089b      	lsrs	r3, r3, #2
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d103      	bne.n	80038d8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 fb57 	bl	8003f84 <I2C_MasterReceive_RXNE>
 80038d6:	e011      	b.n	80038fc <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 809a 	beq.w	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	0a5b      	lsrs	r3, r3, #9
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8093 	beq.w	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fc0d 	bl	8004114 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038fa:	e08e      	b.n	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
 80038fc:	e08d      	b.n	8003a1a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003902:	2b00      	cmp	r3, #0
 8003904:	d004      	beq.n	8003910 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	61fb      	str	r3, [r7, #28]
 800390e:	e007      	b.n	8003920 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d012      	beq.n	8003952 <HAL_I2C_EV_IRQHandler+0x20e>
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	0a5b      	lsrs	r3, r3, #9
 8003930:	f003 0301 	and.w	r3, r3, #1
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00c      	beq.n	8003952 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003948:	69b9      	ldr	r1, [r7, #24]
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 ffd2 	bl	80048f4 <I2C_Slave_ADDR>
 8003950:	e066      	b.n	8003a20 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <HAL_I2C_EV_IRQHandler+0x22e>
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	0a5b      	lsrs	r3, r3, #9
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f001 f80c 	bl	8004988 <I2C_Slave_STOPF>
 8003970:	e056      	b.n	8003a20 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003972:	7bbb      	ldrb	r3, [r7, #14]
 8003974:	2b21      	cmp	r3, #33	@ 0x21
 8003976:	d002      	beq.n	800397e <HAL_I2C_EV_IRQHandler+0x23a>
 8003978:	7bbb      	ldrb	r3, [r7, #14]
 800397a:	2b29      	cmp	r3, #41	@ 0x29
 800397c:	d125      	bne.n	80039ca <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	09db      	lsrs	r3, r3, #7
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00f      	beq.n	80039aa <HAL_I2C_EV_IRQHandler+0x266>
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	0a9b      	lsrs	r3, r3, #10
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_I2C_EV_IRQHandler+0x266>
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	089b      	lsrs	r3, r3, #2
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d103      	bne.n	80039aa <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fee8 	bl	8004778 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039a8:	e039      	b.n	8003a1e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	089b      	lsrs	r3, r3, #2
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d033      	beq.n	8003a1e <HAL_I2C_EV_IRQHandler+0x2da>
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	0a5b      	lsrs	r3, r3, #9
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d02d      	beq.n	8003a1e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 ff15 	bl	80047f2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039c8:	e029      	b.n	8003a1e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	099b      	lsrs	r3, r3, #6
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00f      	beq.n	80039f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	0a9b      	lsrs	r3, r3, #10
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d009      	beq.n	80039f6 <HAL_I2C_EV_IRQHandler+0x2b2>
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	089b      	lsrs	r3, r3, #2
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d103      	bne.n	80039f6 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 ff20 	bl	8004834 <I2C_SlaveReceive_RXNE>
 80039f4:	e014      	b.n	8003a20 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	089b      	lsrs	r3, r3, #2
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00e      	beq.n	8003a20 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	0a5b      	lsrs	r3, r3, #9
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 ff4e 	bl	80048b0 <I2C_SlaveReceive_BTF>
 8003a14:	e004      	b.n	8003a20 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003a16:	bf00      	nop
 8003a18:	e002      	b.n	8003a20 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a1a:	bf00      	nop
 8003a1c:	e000      	b.n	8003a20 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a1e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003a20:	3720      	adds	r7, #32
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b08a      	sub	sp, #40	@ 0x28
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a48:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	0a1b      	lsrs	r3, r3, #8
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00e      	beq.n	8003a74 <HAL_I2C_ER_IRQHandler+0x4e>
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	0a1b      	lsrs	r3, r3, #8
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	f043 0301 	orr.w	r3, r3, #1
 8003a68:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003a72:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	0a5b      	lsrs	r3, r3, #9
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00e      	beq.n	8003a9e <HAL_I2C_ER_IRQHandler+0x78>
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	0a1b      	lsrs	r3, r3, #8
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	f043 0302 	orr.w	r3, r3, #2
 8003a92:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003a9c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	0a9b      	lsrs	r3, r3, #10
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d03f      	beq.n	8003b2a <HAL_I2C_ER_IRQHandler+0x104>
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d039      	beq.n	8003b2a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003ab6:	7efb      	ldrb	r3, [r7, #27]
 8003ab8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ace:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003ad0:	7ebb      	ldrb	r3, [r7, #26]
 8003ad2:	2b20      	cmp	r3, #32
 8003ad4:	d112      	bne.n	8003afc <HAL_I2C_ER_IRQHandler+0xd6>
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10f      	bne.n	8003afc <HAL_I2C_ER_IRQHandler+0xd6>
 8003adc:	7cfb      	ldrb	r3, [r7, #19]
 8003ade:	2b21      	cmp	r3, #33	@ 0x21
 8003ae0:	d008      	beq.n	8003af4 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003ae2:	7cfb      	ldrb	r3, [r7, #19]
 8003ae4:	2b29      	cmp	r3, #41	@ 0x29
 8003ae6:	d005      	beq.n	8003af4 <HAL_I2C_ER_IRQHandler+0xce>
 8003ae8:	7cfb      	ldrb	r3, [r7, #19]
 8003aea:	2b28      	cmp	r3, #40	@ 0x28
 8003aec:	d106      	bne.n	8003afc <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2b21      	cmp	r3, #33	@ 0x21
 8003af2:	d103      	bne.n	8003afc <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f001 f877 	bl	8004be8 <I2C_Slave_AF>
 8003afa:	e016      	b.n	8003b2a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b04:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b08:	f043 0304 	orr.w	r3, r3, #4
 8003b0c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003b0e:	7efb      	ldrb	r3, [r7, #27]
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d002      	beq.n	8003b1a <HAL_I2C_ER_IRQHandler+0xf4>
 8003b14:	7efb      	ldrb	r3, [r7, #27]
 8003b16:	2b40      	cmp	r3, #64	@ 0x40
 8003b18:	d107      	bne.n	8003b2a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b28:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	0adb      	lsrs	r3, r3, #11
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00e      	beq.n	8003b54 <HAL_I2C_ER_IRQHandler+0x12e>
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	0a1b      	lsrs	r3, r3, #8
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d008      	beq.n	8003b54 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b44:	f043 0308 	orr.w	r3, r3, #8
 8003b48:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003b52:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d008      	beq.n	8003b6c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	431a      	orrs	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f001 f8b2 	bl	8004cd0 <I2C_ITError>
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	3728      	adds	r7, #40	@ 0x28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	70fb      	strb	r3, [r7, #3]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c3e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c46:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d150      	bne.n	8003cf8 <I2C_MasterTransmit_TXE+0xc8>
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	2b21      	cmp	r3, #33	@ 0x21
 8003c5a:	d14d      	bne.n	8003cf8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d01d      	beq.n	8003c9e <I2C_MasterTransmit_TXE+0x6e>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d01a      	beq.n	8003c9e <I2C_MasterTransmit_TXE+0x6e>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c6e:	d016      	beq.n	8003c9e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c7e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2211      	movs	r2, #17
 8003c84:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff ff6c 	bl	8003b74 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c9c:	e060      	b.n	8003d60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003cac:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cbc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b40      	cmp	r3, #64	@ 0x40
 8003cd6:	d107      	bne.n	8003ce8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7fc fc2f 	bl	8000544 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ce6:	e03b      	b.n	8003d60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff ff3f 	bl	8003b74 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cf6:	e033      	b.n	8003d60 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b21      	cmp	r3, #33	@ 0x21
 8003cfc:	d005      	beq.n	8003d0a <I2C_MasterTransmit_TXE+0xda>
 8003cfe:	7bbb      	ldrb	r3, [r7, #14]
 8003d00:	2b40      	cmp	r3, #64	@ 0x40
 8003d02:	d12d      	bne.n	8003d60 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	2b22      	cmp	r3, #34	@ 0x22
 8003d08:	d12a      	bne.n	8003d60 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d108      	bne.n	8003d26 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685a      	ldr	r2, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d22:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003d24:	e01c      	b.n	8003d60 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b40      	cmp	r3, #64	@ 0x40
 8003d30:	d103      	bne.n	8003d3a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f88e 	bl	8003e54 <I2C_MemoryTransmit_TXE_BTF>
}
 8003d38:	e012      	b.n	8003d60 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3e:	781a      	ldrb	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d5e:	e7ff      	b.n	8003d60 <I2C_MasterTransmit_TXE+0x130>
 8003d60:	bf00      	nop
 8003d62:	3710      	adds	r7, #16
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d74:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b21      	cmp	r3, #33	@ 0x21
 8003d80:	d164      	bne.n	8003e4c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d012      	beq.n	8003db2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	781a      	ldrb	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003db0:	e04c      	b.n	8003e4c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d01d      	beq.n	8003df4 <I2C_MasterTransmit_BTF+0x8c>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	d01a      	beq.n	8003df4 <I2C_MasterTransmit_BTF+0x8c>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003dc4:	d016      	beq.n	8003df4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dd4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2211      	movs	r2, #17
 8003dda:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff fec1 	bl	8003b74 <HAL_I2C_MasterTxCpltCallback>
}
 8003df2:	e02b      	b.n	8003e4c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e02:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e12:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b40      	cmp	r3, #64	@ 0x40
 8003e2c:	d107      	bne.n	8003e3e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7fc fb84 	bl	8000544 <HAL_I2C_MemTxCpltCallback>
}
 8003e3c:	e006      	b.n	8003e4c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff fe94 	bl	8003b74 <HAL_I2C_MasterTxCpltCallback>
}
 8003e4c:	bf00      	nop
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d11d      	bne.n	8003ea8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d10b      	bne.n	8003e8c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e84:	1c9a      	adds	r2, r3, #2
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003e8a:	e077      	b.n	8003f7c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	121b      	asrs	r3, r3, #8
 8003e94:	b2da      	uxtb	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ea6:	e069      	b.n	8003f7c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d10b      	bne.n	8003ec8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ec0:	1c5a      	adds	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ec6:	e059      	b.n	8003f7c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d152      	bne.n	8003f76 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003ed0:	7bfb      	ldrb	r3, [r7, #15]
 8003ed2:	2b22      	cmp	r3, #34	@ 0x22
 8003ed4:	d10d      	bne.n	8003ef2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ee4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eea:	1c5a      	adds	r2, r3, #1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ef0:	e044      	b.n	8003f7c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d015      	beq.n	8003f28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	2b21      	cmp	r3, #33	@ 0x21
 8003f00:	d112      	bne.n	8003f28 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	781a      	ldrb	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003f26:	e029      	b.n	8003f7c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d124      	bne.n	8003f7c <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	2b21      	cmp	r3, #33	@ 0x21
 8003f36:	d121      	bne.n	8003f7c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	685a      	ldr	r2, [r3, #4]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f46:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f56:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fc fae8 	bl	8000544 <HAL_I2C_MemTxCpltCallback>
}
 8003f74:	e002      	b.n	8003f7c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff fad4 	bl	8003524 <I2C_Flush_DR>
}
 8003f7c:	bf00      	nop
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b22      	cmp	r3, #34	@ 0x22
 8003f96:	f040 80b9 	bne.w	800410c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d921      	bls.n	8003ff2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	f040 8096 	bne.w	800410c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fee:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003ff0:	e08c      	b.n	800410c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d07f      	beq.n	80040fa <I2C_MasterReceive_RXNE+0x176>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d002      	beq.n	8004006 <I2C_MasterReceive_RXNE+0x82>
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d179      	bne.n	80040fa <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f001 fa7c 	bl	8005504 <I2C_WaitOnSTOPRequestThroughIT>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d14c      	bne.n	80040ac <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004020:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004030:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b40      	cmp	r3, #64	@ 0x40
 800406a:	d10a      	bne.n	8004082 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f7ff fdba 	bl	8003bf4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004080:	e044      	b.n	800410c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d002      	beq.n	8004096 <I2C_MasterReceive_RXNE+0x112>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b20      	cmp	r3, #32
 8004094:	d103      	bne.n	800409e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	631a      	str	r2, [r3, #48]	@ 0x30
 800409c:	e002      	b.n	80040a4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2212      	movs	r2, #18
 80040a2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff fd6f 	bl	8003b88 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040aa:	e02f      	b.n	800410c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691a      	ldr	r2, [r3, #16]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2220      	movs	r2, #32
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7ff fd88 	bl	8003c08 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040f8:	e008      	b.n	800410c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004108:	605a      	str	r2, [r3, #4]
}
 800410a:	e7ff      	b.n	800410c <I2C_MasterReceive_RXNE+0x188>
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004120:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b04      	cmp	r3, #4
 800412a:	d11b      	bne.n	8004164 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800413a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004158:	b29b      	uxth	r3, r3
 800415a:	3b01      	subs	r3, #1
 800415c:	b29a      	uxth	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004162:	e0c4      	b.n	80042ee <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b03      	cmp	r3, #3
 800416c:	d129      	bne.n	80041c2 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800417c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b04      	cmp	r3, #4
 8004182:	d00a      	beq.n	800419a <I2C_MasterReceive_BTF+0x86>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b02      	cmp	r3, #2
 8004188:	d007      	beq.n	800419a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004198:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80041c0:	e095      	b.n	80042ee <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d17d      	bne.n	80042c8 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d002      	beq.n	80041d8 <I2C_MasterReceive_BTF+0xc4>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b10      	cmp	r3, #16
 80041d6:	d108      	bne.n	80041ea <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	e016      	b.n	8004218 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d002      	beq.n	80041f6 <I2C_MasterReceive_BTF+0xe2>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d108      	bne.n	8004208 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	e007      	b.n	8004218 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004216:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	b2d2      	uxtb	r2, r2
 800424a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	1c5a      	adds	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004272:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b40      	cmp	r3, #64	@ 0x40
 8004286:	d10a      	bne.n	800429e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff fcac 	bl	8003bf4 <HAL_I2C_MemRxCpltCallback>
}
 800429c:	e027      	b.n	80042ee <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d002      	beq.n	80042b2 <I2C_MasterReceive_BTF+0x19e>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d103      	bne.n	80042ba <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80042b8:	e002      	b.n	80042c0 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2212      	movs	r2, #18
 80042be:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff fc61 	bl	8003b88 <HAL_I2C_MasterRxCpltCallback>
}
 80042c6:	e012      	b.n	80042ee <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691a      	ldr	r2, [r3, #16]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80042ee:	bf00      	nop
 80042f0:	3710      	adds	r7, #16
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b40      	cmp	r3, #64	@ 0x40
 8004308:	d117      	bne.n	800433a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004316:	b2db      	uxtb	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004322:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004324:	e067      	b.n	80043f6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	b2da      	uxtb	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	611a      	str	r2, [r3, #16]
}
 8004338:	e05d      	b.n	80043f6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004342:	d133      	bne.n	80043ac <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b21      	cmp	r3, #33	@ 0x21
 800434e:	d109      	bne.n	8004364 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004360:	611a      	str	r2, [r3, #16]
 8004362:	e008      	b.n	8004376 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004368:	b2db      	uxtb	r3, r3
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	b2da      	uxtb	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800437a:	2b00      	cmp	r3, #0
 800437c:	d004      	beq.n	8004388 <I2C_Master_SB+0x92>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004384:	2b00      	cmp	r3, #0
 8004386:	d108      	bne.n	800439a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800438c:	2b00      	cmp	r3, #0
 800438e:	d032      	beq.n	80043f6 <I2C_Master_SB+0x100>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d02d      	beq.n	80043f6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043a8:	605a      	str	r2, [r3, #4]
}
 80043aa:	e024      	b.n	80043f6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10e      	bne.n	80043d2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	11db      	asrs	r3, r3, #7
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	f003 0306 	and.w	r3, r3, #6
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	f063 030f 	orn	r3, r3, #15
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	611a      	str	r2, [r3, #16]
}
 80043d0:	e011      	b.n	80043f6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d10d      	bne.n	80043f6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043de:	b29b      	uxth	r3, r3
 80043e0:	11db      	asrs	r3, r3, #7
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	f003 0306 	and.w	r3, r3, #6
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	f063 030e 	orn	r3, r3, #14
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	611a      	str	r2, [r3, #16]
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440e:	b2da      	uxtb	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <I2C_Master_ADD10+0x26>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d108      	bne.n	800443a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00c      	beq.n	800444a <I2C_Master_ADD10+0x48>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004436:	2b00      	cmp	r3, #0
 8004438:	d007      	beq.n	800444a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004448:	605a      	str	r2, [r3, #4]
  }
}
 800444a:	bf00      	nop
 800444c:	370c      	adds	r7, #12
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004456:	b480      	push	{r7}
 8004458:	b091      	sub	sp, #68	@ 0x44
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004464:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004472:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b22      	cmp	r3, #34	@ 0x22
 800447e:	f040 8169 	bne.w	8004754 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10f      	bne.n	80044aa <I2C_Master_ADDR+0x54>
 800448a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800448e:	2b40      	cmp	r3, #64	@ 0x40
 8004490:	d10b      	bne.n	80044aa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004492:	2300      	movs	r3, #0
 8004494:	633b      	str	r3, [r7, #48]	@ 0x30
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	633b      	str	r3, [r7, #48]	@ 0x30
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80044a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a8:	e160      	b.n	800476c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d11d      	bne.n	80044ee <I2C_Master_ADDR+0x98>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80044ba:	d118      	bne.n	80044ee <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044bc:	2300      	movs	r3, #0
 80044be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044e0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	651a      	str	r2, [r3, #80]	@ 0x50
 80044ec:	e13e      	b.n	800476c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d113      	bne.n	8004520 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f8:	2300      	movs	r3, #0
 80044fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695b      	ldr	r3, [r3, #20]
 8004502:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800450c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e115      	b.n	800474c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004524:	b29b      	uxth	r3, r3
 8004526:	2b01      	cmp	r3, #1
 8004528:	f040 808a 	bne.w	8004640 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800452c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004532:	d137      	bne.n	80045a4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004542:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800454e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004552:	d113      	bne.n	800457c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004562:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004564:	2300      	movs	r3, #0
 8004566:	627b      	str	r3, [r7, #36]	@ 0x24
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	627b      	str	r3, [r7, #36]	@ 0x24
 8004578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457a:	e0e7      	b.n	800474c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800457c:	2300      	movs	r3, #0
 800457e:	623b      	str	r3, [r7, #32]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	623b      	str	r3, [r7, #32]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	623b      	str	r3, [r7, #32]
 8004590:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	e0d3      	b.n	800474c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80045a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d02e      	beq.n	8004608 <I2C_Master_ADDR+0x1b2>
 80045aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	d02b      	beq.n	8004608 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80045b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b2:	2b12      	cmp	r3, #18
 80045b4:	d102      	bne.n	80045bc <I2C_Master_ADDR+0x166>
 80045b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d125      	bne.n	8004608 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80045bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d00e      	beq.n	80045e0 <I2C_Master_ADDR+0x18a>
 80045c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d00b      	beq.n	80045e0 <I2C_Master_ADDR+0x18a>
 80045c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ca:	2b10      	cmp	r3, #16
 80045cc:	d008      	beq.n	80045e0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045dc:	601a      	str	r2, [r3, #0]
 80045de:	e007      	b.n	80045f0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80045ee:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f0:	2300      	movs	r3, #0
 80045f2:	61fb      	str	r3, [r7, #28]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	61fb      	str	r3, [r7, #28]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	61fb      	str	r3, [r7, #28]
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	e0a1      	b.n	800474c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004616:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004618:	2300      	movs	r3, #0
 800461a:	61bb      	str	r3, [r7, #24]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	61bb      	str	r3, [r7, #24]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	61bb      	str	r3, [r7, #24]
 800462c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	e085      	b.n	800474c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004644:	b29b      	uxth	r3, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d14d      	bne.n	80046e6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800464a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464c:	2b04      	cmp	r3, #4
 800464e:	d016      	beq.n	800467e <I2C_Master_ADDR+0x228>
 8004650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004652:	2b02      	cmp	r3, #2
 8004654:	d013      	beq.n	800467e <I2C_Master_ADDR+0x228>
 8004656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004658:	2b10      	cmp	r3, #16
 800465a:	d010      	beq.n	800467e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800466a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	e007      	b.n	800468e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800468c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004698:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800469c:	d117      	bne.n	80046ce <I2C_Master_ADDR+0x278>
 800469e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046a4:	d00b      	beq.n	80046be <I2C_Master_ADDR+0x268>
 80046a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d008      	beq.n	80046be <I2C_Master_ADDR+0x268>
 80046ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d005      	beq.n	80046be <I2C_Master_ADDR+0x268>
 80046b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b4:	2b10      	cmp	r3, #16
 80046b6:	d002      	beq.n	80046be <I2C_Master_ADDR+0x268>
 80046b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ba:	2b20      	cmp	r3, #32
 80046bc:	d107      	bne.n	80046ce <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	617b      	str	r3, [r7, #20]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	e032      	b.n	800474c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046f4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004700:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004704:	d117      	bne.n	8004736 <I2C_Master_ADDR+0x2e0>
 8004706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004708:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800470c:	d00b      	beq.n	8004726 <I2C_Master_ADDR+0x2d0>
 800470e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004710:	2b01      	cmp	r3, #1
 8004712:	d008      	beq.n	8004726 <I2C_Master_ADDR+0x2d0>
 8004714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004716:	2b08      	cmp	r3, #8
 8004718:	d005      	beq.n	8004726 <I2C_Master_ADDR+0x2d0>
 800471a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800471c:	2b10      	cmp	r3, #16
 800471e:	d002      	beq.n	8004726 <I2C_Master_ADDR+0x2d0>
 8004720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004722:	2b20      	cmp	r3, #32
 8004724:	d107      	bne.n	8004736 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004734:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004752:	e00b      	b.n	800476c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
}
 800476a:	e7ff      	b.n	800476c <I2C_Master_ADDR+0x316>
 800476c:	bf00      	nop
 800476e:	3744      	adds	r7, #68	@ 0x44
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004786:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800478c:	b29b      	uxth	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d02b      	beq.n	80047ea <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004796:	781a      	ldrb	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d114      	bne.n	80047ea <I2C_SlaveTransmit_TXE+0x72>
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	2b29      	cmp	r3, #41	@ 0x29
 80047c4:	d111      	bne.n	80047ea <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047d4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2221      	movs	r2, #33	@ 0x21
 80047da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2228      	movs	r2, #40	@ 0x28
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff f9d9 	bl	8003b9c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d011      	beq.n	8004828 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004808:	781a      	ldrb	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004842:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004848:	b29b      	uxth	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d02c      	beq.n	80048a8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004860:	1c5a      	adds	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004878:	b29b      	uxth	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d114      	bne.n	80048a8 <I2C_SlaveReceive_RXNE+0x74>
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	2b2a      	cmp	r3, #42	@ 0x2a
 8004882:	d111      	bne.n	80048a8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004892:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2222      	movs	r2, #34	@ 0x22
 8004898:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2228      	movs	r2, #40	@ 0x28
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7ff f984 	bl	8003bb0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80048a8:	bf00      	nop
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d012      	beq.n	80048e8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	691a      	ldr	r2, [r3, #16]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80048fe:	2300      	movs	r3, #0
 8004900:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800490e:	2b28      	cmp	r3, #40	@ 0x28
 8004910:	d127      	bne.n	8004962 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004920:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	089b      	lsrs	r3, r3, #2
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800492e:	2301      	movs	r3, #1
 8004930:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	09db      	lsrs	r3, r3, #7
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d103      	bne.n	8004946 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	81bb      	strh	r3, [r7, #12]
 8004944:	e002      	b.n	800494c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004954:	89ba      	ldrh	r2, [r7, #12]
 8004956:	7bfb      	ldrb	r3, [r7, #15]
 8004958:	4619      	mov	r1, r3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff f932 	bl	8003bc4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004960:	e00e      	b.n	8004980 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004962:	2300      	movs	r3, #0
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004980:	bf00      	nop
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004996:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685a      	ldr	r2, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049a6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80049a8:	2300      	movs	r3, #0
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	60bb      	str	r3, [r7, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f042 0201 	orr.w	r2, r2, #1
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049d4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049e4:	d172      	bne.n	8004acc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	2b22      	cmp	r3, #34	@ 0x22
 80049ea:	d002      	beq.n	80049f2 <I2C_Slave_STOPF+0x6a>
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80049f0:	d135      	bne.n	8004a5e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d005      	beq.n	8004a16 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0e:	f043 0204 	orr.w	r2, r3, #4
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a24:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fe f990 	bl	8002d50 <HAL_DMA_GetState>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d049      	beq.n	8004aca <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3a:	4a69      	ldr	r2, [pc, #420]	@ (8004be0 <I2C_Slave_STOPF+0x258>)
 8004a3c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fd ffd8 	bl	80029f8 <HAL_DMA_Abort_IT>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d03d      	beq.n	8004aca <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a5c:	e035      	b.n	8004aca <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7a:	f043 0204 	orr.w	r2, r3, #4
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fe f95a 	bl	8002d50 <HAL_DMA_GetState>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d014      	beq.n	8004acc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aa6:	4a4e      	ldr	r2, [pc, #312]	@ (8004be0 <I2C_Slave_STOPF+0x258>)
 8004aa8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fd ffa2 	bl	80029f8 <HAL_DMA_Abort_IT>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d008      	beq.n	8004acc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4798      	blx	r3
 8004ac8:	e000      	b.n	8004acc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004aca:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d03e      	beq.n	8004b54 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d112      	bne.n	8004b0a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	691a      	ldr	r2, [r3, #16]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b14:	2b40      	cmp	r3, #64	@ 0x40
 8004b16:	d112      	bne.n	8004b3e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29a      	uxth	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d005      	beq.n	8004b54 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4c:	f043 0204 	orr.w	r2, r3, #4
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d003      	beq.n	8004b64 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f8b7 	bl	8004cd0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004b62:	e039      	b.n	8004bd8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b68:	d109      	bne.n	8004b7e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2228      	movs	r2, #40	@ 0x28
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff f819 	bl	8003bb0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b28      	cmp	r3, #40	@ 0x28
 8004b88:	d111      	bne.n	8004bae <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a15      	ldr	r2, [pc, #84]	@ (8004be4 <I2C_Slave_STOPF+0x25c>)
 8004b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2220      	movs	r2, #32
 8004b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff f81a 	bl	8003be0 <HAL_I2C_ListenCpltCallback>
}
 8004bac:	e014      	b.n	8004bd8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb2:	2b22      	cmp	r3, #34	@ 0x22
 8004bb4:	d002      	beq.n	8004bbc <I2C_Slave_STOPF+0x234>
 8004bb6:	7bfb      	ldrb	r3, [r7, #15]
 8004bb8:	2b22      	cmp	r3, #34	@ 0x22
 8004bba:	d10d      	bne.n	8004bd8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fe ffec 	bl	8003bb0 <HAL_I2C_SlaveRxCpltCallback>
}
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	08005061 	.word	0x08005061
 8004be4:	ffff0000 	.word	0xffff0000

08004be8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d002      	beq.n	8004c0a <I2C_Slave_AF+0x22>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	d129      	bne.n	8004c5e <I2C_Slave_AF+0x76>
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	2b28      	cmp	r3, #40	@ 0x28
 8004c0e:	d126      	bne.n	8004c5e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a2e      	ldr	r2, [pc, #184]	@ (8004ccc <I2C_Slave_AF+0xe4>)
 8004c14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c24:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c2e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c3e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fe ffc2 	bl	8003be0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004c5c:	e031      	b.n	8004cc2 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
 8004c60:	2b21      	cmp	r3, #33	@ 0x21
 8004c62:	d129      	bne.n	8004cb8 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a19      	ldr	r2, [pc, #100]	@ (8004ccc <I2C_Slave_AF+0xe4>)
 8004c68:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2221      	movs	r2, #33	@ 0x21
 8004c6e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2220      	movs	r2, #32
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c8e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c98:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ca8:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fe fc3a 	bl	8003524 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f7fe ff73 	bl	8003b9c <HAL_I2C_SlaveTxCpltCallback>
}
 8004cb6:	e004      	b.n	8004cc2 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cc0:	615a      	str	r2, [r3, #20]
}
 8004cc2:	bf00      	nop
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	ffff0000 	.word	0xffff0000

08004cd0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cde:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ce6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ce8:	7bbb      	ldrb	r3, [r7, #14]
 8004cea:	2b10      	cmp	r3, #16
 8004cec:	d002      	beq.n	8004cf4 <I2C_ITError+0x24>
 8004cee:	7bbb      	ldrb	r3, [r7, #14]
 8004cf0:	2b40      	cmp	r3, #64	@ 0x40
 8004cf2:	d10a      	bne.n	8004d0a <I2C_ITError+0x3a>
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
 8004cf6:	2b22      	cmp	r3, #34	@ 0x22
 8004cf8:	d107      	bne.n	8004d0a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d08:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d10:	2b28      	cmp	r3, #40	@ 0x28
 8004d12:	d107      	bne.n	8004d24 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2228      	movs	r2, #40	@ 0x28
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004d22:	e015      	b.n	8004d50 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d32:	d00a      	beq.n	8004d4a <I2C_ITError+0x7a>
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
 8004d36:	2b60      	cmp	r3, #96	@ 0x60
 8004d38:	d007      	beq.n	8004d4a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d5e:	d162      	bne.n	8004e26 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d6e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d020      	beq.n	8004dc0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d82:	4a6a      	ldr	r2, [pc, #424]	@ (8004f2c <I2C_ITError+0x25c>)
 8004d84:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fd fe34 	bl	80029f8 <HAL_DMA_Abort_IT>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 8089 	beq.w	8004eaa <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0201 	bic.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004dba:	4610      	mov	r0, r2
 8004dbc:	4798      	blx	r3
 8004dbe:	e074      	b.n	8004eaa <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc4:	4a59      	ldr	r2, [pc, #356]	@ (8004f2c <I2C_ITError+0x25c>)
 8004dc6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f7fd fe13 	bl	80029f8 <HAL_DMA_Abort_IT>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d068      	beq.n	8004eaa <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de2:	2b40      	cmp	r3, #64	@ 0x40
 8004de4:	d10b      	bne.n	8004dfe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0201 	bic.w	r2, r2, #1
 8004e0c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2220      	movs	r2, #32
 8004e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e20:	4610      	mov	r0, r2
 8004e22:	4798      	blx	r3
 8004e24:	e041      	b.n	8004eaa <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b60      	cmp	r3, #96	@ 0x60
 8004e30:	d125      	bne.n	8004e7e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e4a:	2b40      	cmp	r3, #64	@ 0x40
 8004e4c:	d10b      	bne.n	8004e66 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e58:	b2d2      	uxtb	r2, r2
 8004e5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e60:	1c5a      	adds	r2, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0201 	bic.w	r2, r2, #1
 8004e74:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fe fed0 	bl	8003c1c <HAL_I2C_AbortCpltCallback>
 8004e7c:	e015      	b.n	8004eaa <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e88:	2b40      	cmp	r3, #64	@ 0x40
 8004e8a:	d10b      	bne.n	8004ea4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e96:	b2d2      	uxtb	r2, r2
 8004e98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7fe feaf 	bl	8003c08 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eae:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10e      	bne.n	8004ed8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d109      	bne.n	8004ed8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d104      	bne.n	8004ed8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d007      	beq.n	8004ee8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ee6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eee:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d113      	bne.n	8004f24 <I2C_ITError+0x254>
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	2b28      	cmp	r3, #40	@ 0x28
 8004f00:	d110      	bne.n	8004f24 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a0a      	ldr	r2, [pc, #40]	@ (8004f30 <I2C_ITError+0x260>)
 8004f06:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fe fe5e 	bl	8003be0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	08005061 	.word	0x08005061
 8004f30:	ffff0000 	.word	0xffff0000

08004f34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	4608      	mov	r0, r1
 8004f3e:	4611      	mov	r1, r2
 8004f40:	461a      	mov	r2, r3
 8004f42:	4603      	mov	r3, r0
 8004f44:	817b      	strh	r3, [r7, #10]
 8004f46:	460b      	mov	r3, r1
 8004f48:	813b      	strh	r3, [r7, #8]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 f920 	bl	80051b0 <I2C_WaitOnFlagUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00d      	beq.n	8004f92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f84:	d103      	bne.n	8004f8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e05f      	b.n	8005052 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f92:	897b      	ldrh	r3, [r7, #10]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fa0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	6a3a      	ldr	r2, [r7, #32]
 8004fa6:	492d      	ldr	r1, [pc, #180]	@ (800505c <I2C_RequestMemoryWrite+0x128>)
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 f97b 	bl	80052a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e04c      	b.n	8005052 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb8:	2300      	movs	r3, #0
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	617b      	str	r3, [r7, #20]
 8004fcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd0:	6a39      	ldr	r1, [r7, #32]
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 fa06 	bl	80053e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00d      	beq.n	8004ffa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d107      	bne.n	8004ff6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ff4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e02b      	b.n	8005052 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ffa:	88fb      	ldrh	r3, [r7, #6]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d105      	bne.n	800500c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005000:	893b      	ldrh	r3, [r7, #8]
 8005002:	b2da      	uxtb	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	611a      	str	r2, [r3, #16]
 800500a:	e021      	b.n	8005050 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800500c:	893b      	ldrh	r3, [r7, #8]
 800500e:	0a1b      	lsrs	r3, r3, #8
 8005010:	b29b      	uxth	r3, r3
 8005012:	b2da      	uxtb	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800501a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800501c:	6a39      	ldr	r1, [r7, #32]
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 f9e0 	bl	80053e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00d      	beq.n	8005046 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502e:	2b04      	cmp	r3, #4
 8005030:	d107      	bne.n	8005042 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005040:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e005      	b.n	8005052 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005046:	893b      	ldrh	r3, [r7, #8]
 8005048:	b2da      	uxtb	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	00010002 	.word	0x00010002

08005060 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005068:	2300      	movs	r3, #0
 800506a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005070:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005078:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800507a:	4b4b      	ldr	r3, [pc, #300]	@ (80051a8 <I2C_DMAAbort+0x148>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	08db      	lsrs	r3, r3, #3
 8005080:	4a4a      	ldr	r2, [pc, #296]	@ (80051ac <I2C_DMAAbort+0x14c>)
 8005082:	fba2 2303 	umull	r2, r3, r2, r3
 8005086:	0a1a      	lsrs	r2, r3, #8
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	00da      	lsls	r2, r3, #3
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d106      	bne.n	80050a8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509e:	f043 0220 	orr.w	r2, r3, #32
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80050a6:	e00a      	b.n	80050be <I2C_DMAAbort+0x5e>
    }
    count--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050bc:	d0ea      	beq.n	8005094 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ca:	2200      	movs	r2, #0
 80050cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050da:	2200      	movs	r2, #0
 80050dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050ec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2200      	movs	r2, #0
 80050f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005100:	2200      	movs	r2, #0
 8005102:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005110:	2200      	movs	r2, #0
 8005112:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0201 	bic.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b60      	cmp	r3, #96	@ 0x60
 800512e:	d10e      	bne.n	800514e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	2220      	movs	r2, #32
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	2200      	movs	r2, #0
 8005144:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005146:	6978      	ldr	r0, [r7, #20]
 8005148:	f7fe fd68 	bl	8003c1c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800514c:	e027      	b.n	800519e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800514e:	7cfb      	ldrb	r3, [r7, #19]
 8005150:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005154:	2b28      	cmp	r3, #40	@ 0x28
 8005156:	d117      	bne.n	8005188 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005176:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2200      	movs	r2, #0
 800517c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2228      	movs	r2, #40	@ 0x28
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005186:	e007      	b.n	8005198 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005198:	6978      	ldr	r0, [r7, #20]
 800519a:	f7fe fd35 	bl	8003c08 <HAL_I2C_ErrorCallback>
}
 800519e:	bf00      	nop
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	2000002c 	.word	0x2000002c
 80051ac:	14f8b589 	.word	0x14f8b589

080051b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	4613      	mov	r3, r2
 80051be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051c0:	e048      	b.n	8005254 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c8:	d044      	beq.n	8005254 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ca:	f7fc fcad 	bl	8001b28 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d302      	bcc.n	80051e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d139      	bne.n	8005254 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	0c1b      	lsrs	r3, r3, #16
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d10d      	bne.n	8005206 <I2C_WaitOnFlagUntilTimeout+0x56>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	43da      	mvns	r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4013      	ands	r3, r2
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	bf0c      	ite	eq
 80051fc:	2301      	moveq	r3, #1
 80051fe:	2300      	movne	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	461a      	mov	r2, r3
 8005204:	e00c      	b.n	8005220 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	43da      	mvns	r2, r3
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	4013      	ands	r3, r2
 8005212:	b29b      	uxth	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	bf0c      	ite	eq
 8005218:	2301      	moveq	r3, #1
 800521a:	2300      	movne	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	461a      	mov	r2, r3
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	429a      	cmp	r2, r3
 8005224:	d116      	bne.n	8005254 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2220      	movs	r2, #32
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005240:	f043 0220 	orr.w	r2, r3, #32
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e023      	b.n	800529c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	0c1b      	lsrs	r3, r3, #16
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b01      	cmp	r3, #1
 800525c:	d10d      	bne.n	800527a <I2C_WaitOnFlagUntilTimeout+0xca>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	43da      	mvns	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	4013      	ands	r3, r2
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	bf0c      	ite	eq
 8005270:	2301      	moveq	r3, #1
 8005272:	2300      	movne	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	461a      	mov	r2, r3
 8005278:	e00c      	b.n	8005294 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	43da      	mvns	r2, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	4013      	ands	r3, r2
 8005286:	b29b      	uxth	r3, r3
 8005288:	2b00      	cmp	r3, #0
 800528a:	bf0c      	ite	eq
 800528c:	2301      	moveq	r3, #1
 800528e:	2300      	movne	r3, #0
 8005290:	b2db      	uxtb	r3, r3
 8005292:	461a      	mov	r2, r3
 8005294:	79fb      	ldrb	r3, [r7, #7]
 8005296:	429a      	cmp	r2, r3
 8005298:	d093      	beq.n	80051c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
 80052b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052b2:	e071      	b.n	8005398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052c2:	d123      	bne.n	800530c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f8:	f043 0204 	orr.w	r2, r3, #4
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e067      	b.n	80053dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005312:	d041      	beq.n	8005398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005314:	f7fc fc08 	bl	8001b28 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	429a      	cmp	r2, r3
 8005322:	d302      	bcc.n	800532a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d136      	bne.n	8005398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	0c1b      	lsrs	r3, r3, #16
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	d10c      	bne.n	800534e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	43da      	mvns	r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4013      	ands	r3, r2
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	bf14      	ite	ne
 8005346:	2301      	movne	r3, #1
 8005348:	2300      	moveq	r3, #0
 800534a:	b2db      	uxtb	r3, r3
 800534c:	e00b      	b.n	8005366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	43da      	mvns	r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4013      	ands	r3, r2
 800535a:	b29b      	uxth	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	bf14      	ite	ne
 8005360:	2301      	movne	r3, #1
 8005362:	2300      	moveq	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d016      	beq.n	8005398 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2220      	movs	r2, #32
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005384:	f043 0220 	orr.w	r2, r3, #32
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e021      	b.n	80053dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	0c1b      	lsrs	r3, r3, #16
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d10c      	bne.n	80053bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	43da      	mvns	r2, r3
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	4013      	ands	r3, r2
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf14      	ite	ne
 80053b4:	2301      	movne	r3, #1
 80053b6:	2300      	moveq	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	e00b      	b.n	80053d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	43da      	mvns	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4013      	ands	r3, r2
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	bf14      	ite	ne
 80053ce:	2301      	movne	r3, #1
 80053d0:	2300      	moveq	r3, #0
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f47f af6d 	bne.w	80052b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053f0:	e034      	b.n	800545c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 f8b8 	bl	8005568 <I2C_IsAcknowledgeFailed>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e034      	b.n	800546c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005408:	d028      	beq.n	800545c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540a:	f7fc fb8d 	bl	8001b28 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	68ba      	ldr	r2, [r7, #8]
 8005416:	429a      	cmp	r2, r3
 8005418:	d302      	bcc.n	8005420 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d11d      	bne.n	800545c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800542a:	2b80      	cmp	r3, #128	@ 0x80
 800542c:	d016      	beq.n	800545c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005448:	f043 0220 	orr.w	r2, r3, #32
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e007      	b.n	800546c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005466:	2b80      	cmp	r3, #128	@ 0x80
 8005468:	d1c3      	bne.n	80053f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005480:	e034      	b.n	80054ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 f870 	bl	8005568 <I2C_IsAcknowledgeFailed>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e034      	b.n	80054fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005498:	d028      	beq.n	80054ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549a:	f7fc fb45 	bl	8001b28 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d302      	bcc.n	80054b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d11d      	bne.n	80054ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d016      	beq.n	80054ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d8:	f043 0220 	orr.w	r2, r3, #32
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e007      	b.n	80054fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	f003 0304 	and.w	r3, r3, #4
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d1c3      	bne.n	8005482 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005510:	4b13      	ldr	r3, [pc, #76]	@ (8005560 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	08db      	lsrs	r3, r3, #3
 8005516:	4a13      	ldr	r2, [pc, #76]	@ (8005564 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005518:	fba2 2303 	umull	r2, r3, r2, r3
 800551c:	0a1a      	lsrs	r2, r3, #8
 800551e:	4613      	mov	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3b01      	subs	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d107      	bne.n	8005542 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005536:	f043 0220 	orr.w	r2, r3, #32
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e008      	b.n	8005554 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800554c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005550:	d0e9      	beq.n	8005526 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	2000002c 	.word	0x2000002c
 8005564:	14f8b589 	.word	0x14f8b589

08005568 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	695b      	ldr	r3, [r3, #20]
 8005576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800557a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800557e:	d11b      	bne.n	80055b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005588:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a4:	f043 0204 	orr.w	r2, r3, #4
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	370c      	adds	r7, #12
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d2:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80055d6:	d103      	bne.n	80055e0 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80055de:	e007      	b.n	80055f0 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80055e8:	d102      	bne.n	80055f0 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2208      	movs	r2, #8
 80055ee:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af02      	add	r7, sp, #8
 8005602:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e101      	b.n	8005812 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d106      	bne.n	800562e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f006 f935 	bl	800b898 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2203      	movs	r2, #3
 8005632:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800563c:	d102      	bne.n	8005644 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f002 fc8c 	bl	8007f66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6818      	ldr	r0, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	7c1a      	ldrb	r2, [r3, #16]
 8005656:	f88d 2000 	strb.w	r2, [sp]
 800565a:	3304      	adds	r3, #4
 800565c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800565e:	f002 fb6b 	bl	8007d38 <USB_CoreInit>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d005      	beq.n	8005674 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e0ce      	b.n	8005812 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2100      	movs	r1, #0
 800567a:	4618      	mov	r0, r3
 800567c:	f002 fc84 	bl	8007f88 <USB_SetCurrentMode>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d005      	beq.n	8005692 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2202      	movs	r2, #2
 800568a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e0bf      	b.n	8005812 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005692:	2300      	movs	r3, #0
 8005694:	73fb      	strb	r3, [r7, #15]
 8005696:	e04a      	b.n	800572e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005698:	7bfa      	ldrb	r2, [r7, #15]
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	4613      	mov	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	4413      	add	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	440b      	add	r3, r1
 80056a6:	3315      	adds	r3, #21
 80056a8:	2201      	movs	r2, #1
 80056aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80056ac:	7bfa      	ldrb	r2, [r7, #15]
 80056ae:	6879      	ldr	r1, [r7, #4]
 80056b0:	4613      	mov	r3, r2
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	4413      	add	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	440b      	add	r3, r1
 80056ba:	3314      	adds	r3, #20
 80056bc:	7bfa      	ldrb	r2, [r7, #15]
 80056be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80056c0:	7bfa      	ldrb	r2, [r7, #15]
 80056c2:	7bfb      	ldrb	r3, [r7, #15]
 80056c4:	b298      	uxth	r0, r3
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	4613      	mov	r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	4413      	add	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	332e      	adds	r3, #46	@ 0x2e
 80056d4:	4602      	mov	r2, r0
 80056d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056d8:	7bfa      	ldrb	r2, [r7, #15]
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	4613      	mov	r3, r2
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	440b      	add	r3, r1
 80056e6:	3318      	adds	r3, #24
 80056e8:	2200      	movs	r2, #0
 80056ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056ec:	7bfa      	ldrb	r2, [r7, #15]
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	4613      	mov	r3, r2
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	331c      	adds	r3, #28
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005700:	7bfa      	ldrb	r2, [r7, #15]
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	4613      	mov	r3, r2
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	4413      	add	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	440b      	add	r3, r1
 800570e:	3320      	adds	r3, #32
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005714:	7bfa      	ldrb	r2, [r7, #15]
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	3324      	adds	r3, #36	@ 0x24
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	3301      	adds	r3, #1
 800572c:	73fb      	strb	r3, [r7, #15]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	791b      	ldrb	r3, [r3, #4]
 8005732:	7bfa      	ldrb	r2, [r7, #15]
 8005734:	429a      	cmp	r2, r3
 8005736:	d3af      	bcc.n	8005698 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005738:	2300      	movs	r3, #0
 800573a:	73fb      	strb	r3, [r7, #15]
 800573c:	e044      	b.n	80057c8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800573e:	7bfa      	ldrb	r2, [r7, #15]
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	4613      	mov	r3, r2
 8005744:	00db      	lsls	r3, r3, #3
 8005746:	4413      	add	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	440b      	add	r3, r1
 800574c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005750:	2200      	movs	r2, #0
 8005752:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005754:	7bfa      	ldrb	r2, [r7, #15]
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	4613      	mov	r3, r2
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	4413      	add	r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	440b      	add	r3, r1
 8005762:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005766:	7bfa      	ldrb	r2, [r7, #15]
 8005768:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800576a:	7bfa      	ldrb	r2, [r7, #15]
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	4413      	add	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800577c:	2200      	movs	r2, #0
 800577e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005780:	7bfa      	ldrb	r2, [r7, #15]
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	4613      	mov	r3, r2
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005796:	7bfa      	ldrb	r2, [r7, #15]
 8005798:	6879      	ldr	r1, [r7, #4]
 800579a:	4613      	mov	r3, r2
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	4413      	add	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	440b      	add	r3, r1
 80057a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80057a8:	2200      	movs	r2, #0
 80057aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057ac:	7bfa      	ldrb	r2, [r7, #15]
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	4613      	mov	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	4413      	add	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	440b      	add	r3, r1
 80057ba:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	3301      	adds	r3, #1
 80057c6:	73fb      	strb	r3, [r7, #15]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	791b      	ldrb	r3, [r3, #4]
 80057cc:	7bfa      	ldrb	r2, [r7, #15]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d3b5      	bcc.n	800573e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	7c1a      	ldrb	r2, [r3, #16]
 80057da:	f88d 2000 	strb.w	r2, [sp]
 80057de:	3304      	adds	r3, #4
 80057e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057e2:	f002 fc1d 	bl	8008020 <USB_DevInit>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d005      	beq.n	80057f8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	e00c      	b.n	8005812 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4618      	mov	r0, r3
 800580c:	f003 fc67 	bl	80090de <USB_DevDisconnect>

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800582e:	2b01      	cmp	r3, #1
 8005830:	d101      	bne.n	8005836 <HAL_PCD_Start+0x1c>
 8005832:	2302      	movs	r3, #2
 8005834:	e022      	b.n	800587c <HAL_PCD_Start+0x62>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	d009      	beq.n	800585e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800584e:	2b01      	cmp	r3, #1
 8005850:	d105      	bne.n	800585e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005856:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f002 fb6e 	bl	8007f44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4618      	mov	r0, r3
 800586e:	f003 fc15 	bl	800909c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	4618      	mov	r0, r3
 800587e:	3710      	adds	r7, #16
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005884:	b590      	push	{r4, r7, lr}
 8005886:	b08d      	sub	sp, #52	@ 0x34
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005892:	6a3b      	ldr	r3, [r7, #32]
 8005894:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f003 fcd3 	bl	8009246 <USB_GetMode>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f040 848c 	bne.w	80061c0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f003 fc37 	bl	8009120 <USB_ReadInterrupts>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 8482 	beq.w	80061be <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	0a1b      	lsrs	r3, r3, #8
 80058c4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f003 fc24 	bl	8009120 <USB_ReadInterrupts>
 80058d8:	4603      	mov	r3, r0
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d107      	bne.n	80058f2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	695a      	ldr	r2, [r3, #20]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f002 0202 	and.w	r2, r2, #2
 80058f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f003 fc12 	bl	8009120 <USB_ReadInterrupts>
 80058fc:	4603      	mov	r3, r0
 80058fe:	f003 0310 	and.w	r3, r3, #16
 8005902:	2b10      	cmp	r3, #16
 8005904:	d161      	bne.n	80059ca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699a      	ldr	r2, [r3, #24]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0210 	bic.w	r2, r2, #16
 8005914:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005916:	6a3b      	ldr	r3, [r7, #32]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	f003 020f 	and.w	r2, r3, #15
 8005922:	4613      	mov	r3, r2
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	4413      	add	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	4413      	add	r3, r2
 8005932:	3304      	adds	r3, #4
 8005934:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800593c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005940:	d124      	bne.n	800598c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005948:	4013      	ands	r3, r2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d035      	beq.n	80059ba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	091b      	lsrs	r3, r3, #4
 8005956:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005958:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800595c:	b29b      	uxth	r3, r3
 800595e:	461a      	mov	r2, r3
 8005960:	6a38      	ldr	r0, [r7, #32]
 8005962:	f003 fa49 	bl	8008df8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	091b      	lsrs	r3, r3, #4
 800596e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005972:	441a      	add	r2, r3
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	695a      	ldr	r2, [r3, #20]
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	091b      	lsrs	r3, r3, #4
 8005980:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005984:	441a      	add	r2, r3
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	615a      	str	r2, [r3, #20]
 800598a:	e016      	b.n	80059ba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005992:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005996:	d110      	bne.n	80059ba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800599e:	2208      	movs	r2, #8
 80059a0:	4619      	mov	r1, r3
 80059a2:	6a38      	ldr	r0, [r7, #32]
 80059a4:	f003 fa28 	bl	8008df8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	695a      	ldr	r2, [r3, #20]
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	091b      	lsrs	r3, r3, #4
 80059b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059b4:	441a      	add	r2, r3
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	699a      	ldr	r2, [r3, #24]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f042 0210 	orr.w	r2, r2, #16
 80059c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f003 fba6 	bl	8009120 <USB_ReadInterrupts>
 80059d4:	4603      	mov	r3, r0
 80059d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80059de:	f040 80a7 	bne.w	8005b30 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80059e2:	2300      	movs	r3, #0
 80059e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f003 fbab 	bl	8009146 <USB_ReadDevAllOutEpInterrupt>
 80059f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80059f2:	e099      	b.n	8005b28 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80059f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 808e 	beq.w	8005b1c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	4611      	mov	r1, r2
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f003 fbcf 	bl	80091ae <USB_ReadDevOutEPInterrupt>
 8005a10:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00c      	beq.n	8005a36 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a28:	461a      	mov	r2, r3
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005a2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fea3 	bl	800677c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00c      	beq.n	8005a5a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	2308      	movs	r3, #8
 8005a50:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005a52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 ff79 	bl	800694c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d008      	beq.n	8005a76 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a70:	461a      	mov	r2, r3
 8005a72:	2310      	movs	r3, #16
 8005a74:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d030      	beq.n	8005ae2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005a80:	6a3b      	ldr	r3, [r7, #32]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a88:	2b80      	cmp	r3, #128	@ 0x80
 8005a8a:	d109      	bne.n	8005aa0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	69fa      	ldr	r2, [r7, #28]
 8005a96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a9e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	4413      	add	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	78db      	ldrb	r3, [r3, #3]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d108      	bne.n	8005ad0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	4619      	mov	r1, r3
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f005 ffe0 	bl	800ba90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005adc:	461a      	mov	r2, r3
 8005ade:	2302      	movs	r3, #2
 8005ae0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f003 0320 	and.w	r3, r3, #32
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d008      	beq.n	8005afe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005af8:	461a      	mov	r2, r3
 8005afa:	2320      	movs	r3, #32
 8005afc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d009      	beq.n	8005b1c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b14:	461a      	mov	r2, r3
 8005b16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005b1a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1e:	3301      	adds	r3, #1
 8005b20:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b24:	085b      	lsrs	r3, r3, #1
 8005b26:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f47f af62 	bne.w	80059f4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4618      	mov	r0, r3
 8005b36:	f003 faf3 	bl	8009120 <USB_ReadInterrupts>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b44:	f040 80db 	bne.w	8005cfe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f003 fb14 	bl	800917a <USB_ReadDevAllInEpInterrupt>
 8005b52:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005b58:	e0cd      	b.n	8005cf6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 80c2 	beq.w	8005cea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	4611      	mov	r1, r2
 8005b70:	4618      	mov	r0, r3
 8005b72:	f003 fb3a 	bl	80091ea <USB_ReadDevInEPInterrupt>
 8005b76:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d057      	beq.n	8005c32 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b84:	f003 030f 	and.w	r3, r3, #15
 8005b88:	2201      	movs	r2, #1
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	43db      	mvns	r3, r3
 8005b9c:	69f9      	ldr	r1, [r7, #28]
 8005b9e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	799b      	ldrb	r3, [r3, #6]
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d132      	bne.n	8005c26 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005bc0:	6879      	ldr	r1, [r7, #4]
 8005bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	00db      	lsls	r3, r3, #3
 8005bc8:	4413      	add	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	440b      	add	r3, r1
 8005bce:	3320      	adds	r3, #32
 8005bd0:	6819      	ldr	r1, [r3, #0]
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4403      	add	r3, r0
 8005be0:	331c      	adds	r3, #28
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4419      	add	r1, r3
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bea:	4613      	mov	r3, r2
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4403      	add	r3, r0
 8005bf4:	3320      	adds	r3, #32
 8005bf6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d113      	bne.n	8005c26 <HAL_PCD_IRQHandler+0x3a2>
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c02:	4613      	mov	r3, r2
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	3324      	adds	r3, #36	@ 0x24
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d108      	bne.n	8005c26 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6818      	ldr	r0, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c1e:	461a      	mov	r2, r3
 8005c20:	2101      	movs	r1, #1
 8005c22:	f003 fb41 	bl	80092a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f005 feb4 	bl	800b99a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f003 0308 	and.w	r3, r3, #8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d008      	beq.n	8005c4e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c48:	461a      	mov	r2, r3
 8005c4a:	2308      	movs	r3, #8
 8005c4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f003 0310 	and.w	r3, r3, #16
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d008      	beq.n	8005c6a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c64:	461a      	mov	r2, r3
 8005c66:	2310      	movs	r3, #16
 8005c68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d008      	beq.n	8005c86 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c80:	461a      	mov	r2, r3
 8005c82:	2340      	movs	r3, #64	@ 0x40
 8005c84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d023      	beq.n	8005cd8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005c90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c92:	6a38      	ldr	r0, [r7, #32]
 8005c94:	f002 fb28 	bl	80082e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005c98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	3310      	adds	r3, #16
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	3304      	adds	r3, #4
 8005caa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	78db      	ldrb	r3, [r3, #3]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d108      	bne.n	8005cc6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f005 fef7 	bl	800bab4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005ce2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fcbd 	bl	8006664 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	3301      	adds	r3, #1
 8005cee:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf2:	085b      	lsrs	r3, r3, #1
 8005cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f47f af2e 	bne.w	8005b5a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f003 fa0c 	bl	8009120 <USB_ReadInterrupts>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d12:	d122      	bne.n	8005d5a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d22:	f023 0301 	bic.w	r3, r3, #1
 8005d26:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d108      	bne.n	8005d44 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fea3 	bl	8006a88 <HAL_PCDEx_LPM_Callback>
 8005d42:	e002      	b.n	8005d4a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f005 fe95 	bl	800ba74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	695a      	ldr	r2, [r3, #20]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005d58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f003 f9de 	bl	8009120 <USB_ReadInterrupts>
 8005d64:	4603      	mov	r3, r0
 8005d66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d6e:	d112      	bne.n	8005d96 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d102      	bne.n	8005d86 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f005 fe51 	bl	800ba28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	695a      	ldr	r2, [r3, #20]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005d94:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f003 f9c0 	bl	8009120 <USB_ReadInterrupts>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005daa:	f040 80b7 	bne.w	8005f1c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005dbc:	f023 0301 	bic.w	r3, r3, #1
 8005dc0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2110      	movs	r1, #16
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f002 fa8d 	bl	80082e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dce:	2300      	movs	r3, #0
 8005dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dd2:	e046      	b.n	8005e62 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005de0:	461a      	mov	r2, r3
 8005de2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005de6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005df8:	0151      	lsls	r1, r2, #5
 8005dfa:	69fa      	ldr	r2, [r7, #28]
 8005dfc:	440a      	add	r2, r1
 8005dfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e14:	461a      	mov	r2, r3
 8005e16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e1a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e4c:	0151      	lsls	r1, r2, #5
 8005e4e:	69fa      	ldr	r2, [r7, #28]
 8005e50:	440a      	add	r2, r1
 8005e52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e5a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5e:	3301      	adds	r3, #1
 8005e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	791b      	ldrb	r3, [r3, #4]
 8005e66:	461a      	mov	r2, r3
 8005e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d3b2      	bcc.n	8005dd4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	69fa      	ldr	r2, [r7, #28]
 8005e78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e7c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005e80:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	7bdb      	ldrb	r3, [r3, #15]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d016      	beq.n	8005eb8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e9a:	f043 030b 	orr.w	r3, r3, #11
 8005e9e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005eb0:	f043 030b 	orr.w	r3, r3, #11
 8005eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005eb6:	e015      	b.n	8005ee4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	69fa      	ldr	r2, [r7, #28]
 8005ec2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ec6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005eca:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005ece:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ede:	f043 030b 	orr.w	r3, r3, #11
 8005ee2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69fa      	ldr	r2, [r7, #28]
 8005eee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ef2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005ef6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6818      	ldr	r0, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f06:	461a      	mov	r2, r3
 8005f08:	f003 f9ce 	bl	80092a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695a      	ldr	r2, [r3, #20]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005f1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f003 f8fd 	bl	8009120 <USB_ReadInterrupts>
 8005f26:	4603      	mov	r3, r0
 8005f28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f30:	d123      	bne.n	8005f7a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f003 f993 	bl	8009262 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f002 fa4a 	bl	80083da <USB_GetDevSpeed>
 8005f46:	4603      	mov	r3, r0
 8005f48:	461a      	mov	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681c      	ldr	r4, [r3, #0]
 8005f52:	f001 f9c9 	bl	80072e8 <HAL_RCC_GetHCLKFreq>
 8005f56:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f001 ff4e 	bl	8007e00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f005 fd40 	bl	800b9ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	695a      	ldr	r2, [r3, #20]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005f78:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f003 f8ce 	bl	8009120 <USB_ReadInterrupts>
 8005f84:	4603      	mov	r3, r0
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b08      	cmp	r3, #8
 8005f8c:	d10a      	bne.n	8005fa4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f005 fd1d 	bl	800b9ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	695a      	ldr	r2, [r3, #20]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f002 0208 	and.w	r2, r2, #8
 8005fa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f003 f8b9 	bl	8009120 <USB_ReadInterrupts>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fb4:	2b80      	cmp	r3, #128	@ 0x80
 8005fb6:	d123      	bne.n	8006000 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fc8:	e014      	b.n	8005ff4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fce:	4613      	mov	r3, r2
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	440b      	add	r3, r1
 8005fd8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d105      	bne.n	8005fee <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fb0a 	bl	8006602 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	791b      	ldrb	r3, [r3, #4]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d3e4      	bcc.n	8005fca <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4618      	mov	r0, r3
 8006006:	f003 f88b 	bl	8009120 <USB_ReadInterrupts>
 800600a:	4603      	mov	r3, r0
 800600c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006010:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006014:	d13c      	bne.n	8006090 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006016:	2301      	movs	r3, #1
 8006018:	627b      	str	r3, [r7, #36]	@ 0x24
 800601a:	e02b      	b.n	8006074 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800601c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006030:	4613      	mov	r3, r2
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	4413      	add	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	440b      	add	r3, r1
 800603a:	3318      	adds	r3, #24
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d115      	bne.n	800606e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006042:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006044:	2b00      	cmp	r3, #0
 8006046:	da12      	bge.n	800606e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006048:	6879      	ldr	r1, [r7, #4]
 800604a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800604c:	4613      	mov	r3, r2
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	440b      	add	r3, r1
 8006056:	3317      	adds	r3, #23
 8006058:	2201      	movs	r2, #1
 800605a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800605c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605e:	b2db      	uxtb	r3, r3
 8006060:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006064:	b2db      	uxtb	r3, r3
 8006066:	4619      	mov	r1, r3
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 faca 	bl	8006602 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	3301      	adds	r3, #1
 8006072:	627b      	str	r3, [r7, #36]	@ 0x24
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	791b      	ldrb	r3, [r3, #4]
 8006078:	461a      	mov	r2, r3
 800607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607c:	4293      	cmp	r3, r2
 800607e:	d3cd      	bcc.n	800601c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	695a      	ldr	r2, [r3, #20]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800608e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4618      	mov	r0, r3
 8006096:	f003 f843 	bl	8009120 <USB_ReadInterrupts>
 800609a:	4603      	mov	r3, r0
 800609c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060a4:	d156      	bne.n	8006154 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060a6:	2301      	movs	r3, #1
 80060a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80060aa:	e045      	b.n	8006138 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80060ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80060bc:	6879      	ldr	r1, [r7, #4]
 80060be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060c0:	4613      	mov	r3, r2
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d12e      	bne.n	8006132 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80060d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	da2b      	bge.n	8006132 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	0c1a      	lsrs	r2, r3, #16
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80060e4:	4053      	eors	r3, r2
 80060e6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d121      	bne.n	8006132 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80060ee:	6879      	ldr	r1, [r7, #4]
 80060f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060f2:	4613      	mov	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006100:	2201      	movs	r2, #1
 8006102:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10a      	bne.n	8006132 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	69fa      	ldr	r2, [r7, #28]
 8006126:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800612a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800612e:	6053      	str	r3, [r2, #4]
            break;
 8006130:	e008      	b.n	8006144 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006134:	3301      	adds	r3, #1
 8006136:	627b      	str	r3, [r7, #36]	@ 0x24
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	791b      	ldrb	r3, [r3, #4]
 800613c:	461a      	mov	r2, r3
 800613e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006140:	4293      	cmp	r3, r2
 8006142:	d3b3      	bcc.n	80060ac <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695a      	ldr	r2, [r3, #20]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006152:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4618      	mov	r0, r3
 800615a:	f002 ffe1 	bl	8009120 <USB_ReadInterrupts>
 800615e:	4603      	mov	r3, r0
 8006160:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006168:	d10a      	bne.n	8006180 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f005 fcb4 	bl	800bad8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	695a      	ldr	r2, [r3, #20]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800617e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4618      	mov	r0, r3
 8006186:	f002 ffcb 	bl	8009120 <USB_ReadInterrupts>
 800618a:	4603      	mov	r3, r0
 800618c:	f003 0304 	and.w	r3, r3, #4
 8006190:	2b04      	cmp	r3, #4
 8006192:	d115      	bne.n	80061c0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	f003 0304 	and.w	r3, r3, #4
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f005 fca4 	bl	800baf4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6859      	ldr	r1, [r3, #4]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	605a      	str	r2, [r3, #4]
 80061bc:	e000      	b.n	80061c0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80061be:	bf00      	nop
    }
  }
}
 80061c0:	3734      	adds	r7, #52	@ 0x34
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd90      	pop	{r4, r7, pc}

080061c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b082      	sub	sp, #8
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	460b      	mov	r3, r1
 80061d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d101      	bne.n	80061e0 <HAL_PCD_SetAddress+0x1a>
 80061dc:	2302      	movs	r3, #2
 80061de:	e012      	b.n	8006206 <HAL_PCD_SetAddress+0x40>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	78fa      	ldrb	r2, [r7, #3]
 80061ec:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	78fa      	ldrb	r2, [r7, #3]
 80061f4:	4611      	mov	r1, r2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f002 ff2a 	bl	8009050 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	4608      	mov	r0, r1
 8006218:	4611      	mov	r1, r2
 800621a:	461a      	mov	r2, r3
 800621c:	4603      	mov	r3, r0
 800621e:	70fb      	strb	r3, [r7, #3]
 8006220:	460b      	mov	r3, r1
 8006222:	803b      	strh	r3, [r7, #0]
 8006224:	4613      	mov	r3, r2
 8006226:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006228:	2300      	movs	r3, #0
 800622a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800622c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006230:	2b00      	cmp	r3, #0
 8006232:	da0f      	bge.n	8006254 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006234:	78fb      	ldrb	r3, [r7, #3]
 8006236:	f003 020f 	and.w	r2, r3, #15
 800623a:	4613      	mov	r3, r2
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	4413      	add	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	3310      	adds	r3, #16
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	4413      	add	r3, r2
 8006248:	3304      	adds	r3, #4
 800624a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2201      	movs	r2, #1
 8006250:	705a      	strb	r2, [r3, #1]
 8006252:	e00f      	b.n	8006274 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006254:	78fb      	ldrb	r3, [r7, #3]
 8006256:	f003 020f 	and.w	r2, r3, #15
 800625a:	4613      	mov	r3, r2
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	4413      	add	r3, r2
 800626a:	3304      	adds	r3, #4
 800626c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2200      	movs	r2, #0
 8006272:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006274:	78fb      	ldrb	r3, [r7, #3]
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	b2da      	uxtb	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006280:	883b      	ldrh	r3, [r7, #0]
 8006282:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	78ba      	ldrb	r2, [r7, #2]
 800628e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	785b      	ldrb	r3, [r3, #1]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d004      	beq.n	80062a2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	461a      	mov	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80062a2:	78bb      	ldrb	r3, [r7, #2]
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d102      	bne.n	80062ae <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_PCD_EP_Open+0xae>
 80062b8:	2302      	movs	r3, #2
 80062ba:	e00e      	b.n	80062da <HAL_PCD_EP_Open+0xcc>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68f9      	ldr	r1, [r7, #12]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f002 f8aa 	bl	8008424 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80062d8:	7afb      	ldrb	r3, [r7, #11]
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	460b      	mov	r3, r1
 80062ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	da0f      	bge.n	8006316 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062f6:	78fb      	ldrb	r3, [r7, #3]
 80062f8:	f003 020f 	and.w	r2, r3, #15
 80062fc:	4613      	mov	r3, r2
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	3310      	adds	r3, #16
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	4413      	add	r3, r2
 800630a:	3304      	adds	r3, #4
 800630c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2201      	movs	r2, #1
 8006312:	705a      	strb	r2, [r3, #1]
 8006314:	e00f      	b.n	8006336 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006316:	78fb      	ldrb	r3, [r7, #3]
 8006318:	f003 020f 	and.w	r2, r3, #15
 800631c:	4613      	mov	r3, r2
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	4413      	add	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	4413      	add	r3, r2
 800632c:	3304      	adds	r3, #4
 800632e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006336:	78fb      	ldrb	r3, [r7, #3]
 8006338:	f003 030f 	and.w	r3, r3, #15
 800633c:	b2da      	uxtb	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_PCD_EP_Close+0x6e>
 800634c:	2302      	movs	r3, #2
 800634e:	e00e      	b.n	800636e <HAL_PCD_EP_Close+0x8c>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68f9      	ldr	r1, [r7, #12]
 800635e:	4618      	mov	r0, r3
 8006360:	f002 f8e8 	bl	8008534 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b086      	sub	sp, #24
 800637a:	af00      	add	r7, sp, #0
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	607a      	str	r2, [r7, #4]
 8006380:	603b      	str	r3, [r7, #0]
 8006382:	460b      	mov	r3, r1
 8006384:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006386:	7afb      	ldrb	r3, [r7, #11]
 8006388:	f003 020f 	and.w	r2, r3, #15
 800638c:	4613      	mov	r3, r2
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	4413      	add	r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4413      	add	r3, r2
 800639c:	3304      	adds	r3, #4
 800639e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2200      	movs	r2, #0
 80063b0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2200      	movs	r2, #0
 80063b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063b8:	7afb      	ldrb	r3, [r7, #11]
 80063ba:	f003 030f 	and.w	r3, r3, #15
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	799b      	ldrb	r3, [r3, #6]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d102      	bne.n	80063d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6818      	ldr	r0, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	799b      	ldrb	r3, [r3, #6]
 80063da:	461a      	mov	r2, r3
 80063dc:	6979      	ldr	r1, [r7, #20]
 80063de:	f002 f985 	bl	80086ec <USB_EPStartXfer>

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	460b      	mov	r3, r1
 80063f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80063f8:	78fb      	ldrb	r3, [r7, #3]
 80063fa:	f003 020f 	and.w	r2, r3, #15
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	4613      	mov	r3, r2
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	4413      	add	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	440b      	add	r3, r1
 800640a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800640e:	681b      	ldr	r3, [r3, #0]
}
 8006410:	4618      	mov	r0, r3
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	607a      	str	r2, [r7, #4]
 8006426:	603b      	str	r3, [r7, #0]
 8006428:	460b      	mov	r3, r1
 800642a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800642c:	7afb      	ldrb	r3, [r7, #11]
 800642e:	f003 020f 	and.w	r2, r3, #15
 8006432:	4613      	mov	r3, r2
 8006434:	00db      	lsls	r3, r3, #3
 8006436:	4413      	add	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	3310      	adds	r3, #16
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	4413      	add	r3, r2
 8006440:	3304      	adds	r3, #4
 8006442:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	2200      	movs	r2, #0
 8006454:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2201      	movs	r2, #1
 800645a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800645c:	7afb      	ldrb	r3, [r7, #11]
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	b2da      	uxtb	r2, r3
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	799b      	ldrb	r3, [r3, #6]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d102      	bne.n	8006476 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6818      	ldr	r0, [r3, #0]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	799b      	ldrb	r3, [r3, #6]
 800647e:	461a      	mov	r2, r3
 8006480:	6979      	ldr	r1, [r7, #20]
 8006482:	f002 f933 	bl	80086ec <USB_EPStartXfer>

  return HAL_OK;
 8006486:	2300      	movs	r3, #0
}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	460b      	mov	r3, r1
 800649a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800649c:	78fb      	ldrb	r3, [r7, #3]
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	7912      	ldrb	r2, [r2, #4]
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d901      	bls.n	80064ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e04f      	b.n	800654e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80064ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	da0f      	bge.n	80064d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064b6:	78fb      	ldrb	r3, [r7, #3]
 80064b8:	f003 020f 	and.w	r2, r3, #15
 80064bc:	4613      	mov	r3, r2
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	3310      	adds	r3, #16
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	4413      	add	r3, r2
 80064ca:	3304      	adds	r3, #4
 80064cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	705a      	strb	r2, [r3, #1]
 80064d4:	e00d      	b.n	80064f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80064d6:	78fa      	ldrb	r2, [r7, #3]
 80064d8:	4613      	mov	r3, r2
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	4413      	add	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	4413      	add	r3, r2
 80064e8:	3304      	adds	r3, #4
 80064ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2201      	movs	r2, #1
 80064f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	f003 030f 	and.w	r3, r3, #15
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <HAL_PCD_EP_SetStall+0x82>
 800650e:	2302      	movs	r3, #2
 8006510:	e01d      	b.n	800654e <HAL_PCD_EP_SetStall+0xbe>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2201      	movs	r2, #1
 8006516:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68f9      	ldr	r1, [r7, #12]
 8006520:	4618      	mov	r0, r3
 8006522:	f002 fcc1 	bl	8008ea8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006526:	78fb      	ldrb	r3, [r7, #3]
 8006528:	f003 030f 	and.w	r3, r3, #15
 800652c:	2b00      	cmp	r3, #0
 800652e:	d109      	bne.n	8006544 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6818      	ldr	r0, [r3, #0]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	7999      	ldrb	r1, [r3, #6]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800653e:	461a      	mov	r2, r3
 8006540:	f002 feb2 	bl	80092a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006556:	b580      	push	{r7, lr}
 8006558:	b084      	sub	sp, #16
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	460b      	mov	r3, r1
 8006560:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006562:	78fb      	ldrb	r3, [r7, #3]
 8006564:	f003 030f 	and.w	r3, r3, #15
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	7912      	ldrb	r2, [r2, #4]
 800656c:	4293      	cmp	r3, r2
 800656e:	d901      	bls.n	8006574 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e042      	b.n	80065fa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006574:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006578:	2b00      	cmp	r3, #0
 800657a:	da0f      	bge.n	800659c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	f003 020f 	and.w	r2, r3, #15
 8006582:	4613      	mov	r3, r2
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	3310      	adds	r3, #16
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	4413      	add	r3, r2
 8006590:	3304      	adds	r3, #4
 8006592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2201      	movs	r2, #1
 8006598:	705a      	strb	r2, [r3, #1]
 800659a:	e00f      	b.n	80065bc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	f003 020f 	and.w	r2, r3, #15
 80065a2:	4613      	mov	r3, r2
 80065a4:	00db      	lsls	r3, r3, #3
 80065a6:	4413      	add	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	4413      	add	r3, r2
 80065b2:	3304      	adds	r3, #4
 80065b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2200      	movs	r2, #0
 80065c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065c2:	78fb      	ldrb	r3, [r7, #3]
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	b2da      	uxtb	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d101      	bne.n	80065dc <HAL_PCD_EP_ClrStall+0x86>
 80065d8:	2302      	movs	r3, #2
 80065da:	e00e      	b.n	80065fa <HAL_PCD_EP_ClrStall+0xa4>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	68f9      	ldr	r1, [r7, #12]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f002 fcca 	bl	8008f84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006602:	b580      	push	{r7, lr}
 8006604:	b084      	sub	sp, #16
 8006606:	af00      	add	r7, sp, #0
 8006608:	6078      	str	r0, [r7, #4]
 800660a:	460b      	mov	r3, r1
 800660c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800660e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006612:	2b00      	cmp	r3, #0
 8006614:	da0c      	bge.n	8006630 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006616:	78fb      	ldrb	r3, [r7, #3]
 8006618:	f003 020f 	and.w	r2, r3, #15
 800661c:	4613      	mov	r3, r2
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	4413      	add	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	3310      	adds	r3, #16
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	4413      	add	r3, r2
 800662a:	3304      	adds	r3, #4
 800662c:	60fb      	str	r3, [r7, #12]
 800662e:	e00c      	b.n	800664a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	f003 020f 	and.w	r2, r3, #15
 8006636:	4613      	mov	r3, r2
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	4413      	add	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	4413      	add	r3, r2
 8006646:	3304      	adds	r3, #4
 8006648:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68f9      	ldr	r1, [r7, #12]
 8006650:	4618      	mov	r0, r3
 8006652:	f002 fae9 	bl	8008c28 <USB_EPStopXfer>
 8006656:	4603      	mov	r3, r0
 8006658:	72fb      	strb	r3, [r7, #11]

  return ret;
 800665a:	7afb      	ldrb	r3, [r7, #11]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08a      	sub	sp, #40	@ 0x28
 8006668:	af02      	add	r7, sp, #8
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006678:	683a      	ldr	r2, [r7, #0]
 800667a:	4613      	mov	r3, r2
 800667c:	00db      	lsls	r3, r3, #3
 800667e:	4413      	add	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	3310      	adds	r3, #16
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	4413      	add	r3, r2
 8006688:	3304      	adds	r3, #4
 800668a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	695a      	ldr	r2, [r3, #20]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	429a      	cmp	r2, r3
 8006696:	d901      	bls.n	800669c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e06b      	b.n	8006774 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	695b      	ldr	r3, [r3, #20]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	69fa      	ldr	r2, [r7, #28]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d902      	bls.n	80066b8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	3303      	adds	r3, #3
 80066bc:	089b      	lsrs	r3, r3, #2
 80066be:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066c0:	e02a      	b.n	8006718 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	691a      	ldr	r2, [r3, #16]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	695b      	ldr	r3, [r3, #20]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	69fa      	ldr	r2, [r7, #28]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d902      	bls.n	80066de <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	3303      	adds	r3, #3
 80066e2:	089b      	lsrs	r3, r3, #2
 80066e4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	68d9      	ldr	r1, [r3, #12]
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	b2da      	uxtb	r2, r3
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	4603      	mov	r3, r0
 80066fa:	6978      	ldr	r0, [r7, #20]
 80066fc:	f002 fb3e 	bl	8008d7c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	68da      	ldr	r2, [r3, #12]
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	441a      	add	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	695a      	ldr	r2, [r3, #20]
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	441a      	add	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	4413      	add	r3, r2
 8006720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	429a      	cmp	r2, r3
 800672c:	d809      	bhi.n	8006742 <PCD_WriteEmptyTxFifo+0xde>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	695a      	ldr	r2, [r3, #20]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006736:	429a      	cmp	r2, r3
 8006738:	d203      	bcs.n	8006742 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1bf      	bne.n	80066c2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	691a      	ldr	r2, [r3, #16]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	429a      	cmp	r2, r3
 800674c:	d811      	bhi.n	8006772 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	f003 030f 	and.w	r3, r3, #15
 8006754:	2201      	movs	r2, #1
 8006756:	fa02 f303 	lsl.w	r3, r2, r3
 800675a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006762:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	43db      	mvns	r3, r3
 8006768:	6939      	ldr	r1, [r7, #16]
 800676a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800676e:	4013      	ands	r3, r2
 8006770:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3720      	adds	r7, #32
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b088      	sub	sp, #32
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	333c      	adds	r3, #60	@ 0x3c
 8006794:	3304      	adds	r3, #4
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	015a      	lsls	r2, r3, #5
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	4413      	add	r3, r2
 80067a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	799b      	ldrb	r3, [r3, #6]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d17b      	bne.n	80068aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f003 0308 	and.w	r3, r3, #8
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d015      	beq.n	80067e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	4a61      	ldr	r2, [pc, #388]	@ (8006944 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	f240 80b9 	bls.w	8006938 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 80b3 	beq.w	8006938 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067de:	461a      	mov	r2, r3
 80067e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067e4:	6093      	str	r3, [r2, #8]
 80067e6:	e0a7      	b.n	8006938 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d009      	beq.n	8006806 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067fe:	461a      	mov	r2, r3
 8006800:	2320      	movs	r3, #32
 8006802:	6093      	str	r3, [r2, #8]
 8006804:	e098      	b.n	8006938 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800680c:	2b00      	cmp	r3, #0
 800680e:	f040 8093 	bne.w	8006938 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	4a4b      	ldr	r2, [pc, #300]	@ (8006944 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d90f      	bls.n	800683a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00a      	beq.n	800683a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006830:	461a      	mov	r2, r3
 8006832:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006836:	6093      	str	r3, [r2, #8]
 8006838:	e07e      	b.n	8006938 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	4613      	mov	r3, r2
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	4413      	add	r3, r2
 800684c:	3304      	adds	r3, #4
 800684e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6a1a      	ldr	r2, [r3, #32]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	0159      	lsls	r1, r3, #5
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	440b      	add	r3, r1
 800685c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006866:	1ad2      	subs	r2, r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d114      	bne.n	800689c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d109      	bne.n	800688e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6818      	ldr	r0, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006884:	461a      	mov	r2, r3
 8006886:	2101      	movs	r1, #1
 8006888:	f002 fd0e 	bl	80092a8 <USB_EP0_OutStart>
 800688c:	e006      	b.n	800689c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	68da      	ldr	r2, [r3, #12]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	441a      	add	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	4619      	mov	r1, r3
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f005 f85e 	bl	800b964 <HAL_PCD_DataOutStageCallback>
 80068a8:	e046      	b.n	8006938 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	4a26      	ldr	r2, [pc, #152]	@ (8006948 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d124      	bne.n	80068fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c8:	461a      	mov	r2, r3
 80068ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068ce:	6093      	str	r3, [r2, #8]
 80068d0:	e032      	b.n	8006938 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f003 0320 	and.w	r3, r3, #32
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d008      	beq.n	80068ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068e8:	461a      	mov	r2, r3
 80068ea:	2320      	movs	r3, #32
 80068ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f005 f835 	bl	800b964 <HAL_PCD_DataOutStageCallback>
 80068fa:	e01d      	b.n	8006938 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d114      	bne.n	800692c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006902:	6879      	ldr	r1, [r7, #4]
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	4613      	mov	r3, r2
 8006908:	00db      	lsls	r3, r3, #3
 800690a:	4413      	add	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	440b      	add	r3, r1
 8006910:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d108      	bne.n	800692c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6818      	ldr	r0, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006924:	461a      	mov	r2, r3
 8006926:	2100      	movs	r1, #0
 8006928:	f002 fcbe 	bl	80092a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	b2db      	uxtb	r3, r3
 8006930:	4619      	mov	r1, r3
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f005 f816 	bl	800b964 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3720      	adds	r7, #32
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	4f54300a 	.word	0x4f54300a
 8006948:	4f54310a 	.word	0x4f54310a

0800694c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	333c      	adds	r3, #60	@ 0x3c
 8006964:	3304      	adds	r3, #4
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	4413      	add	r3, r2
 8006972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	4a15      	ldr	r2, [pc, #84]	@ (80069d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d90e      	bls.n	80069a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006988:	2b00      	cmp	r3, #0
 800698a:	d009      	beq.n	80069a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006998:	461a      	mov	r2, r3
 800699a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800699e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f004 ffcd 	bl	800b940 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	4a0a      	ldr	r2, [pc, #40]	@ (80069d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d90c      	bls.n	80069c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	799b      	ldrb	r3, [r3, #6]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d108      	bne.n	80069c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6818      	ldr	r0, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80069c0:	461a      	mov	r2, r3
 80069c2:	2101      	movs	r1, #1
 80069c4:	f002 fc70 	bl	80092a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	4f54300a 	.word	0x4f54300a

080069d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	460b      	mov	r3, r1
 80069e2:	70fb      	strb	r3, [r7, #3]
 80069e4:	4613      	mov	r3, r2
 80069e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80069f0:	78fb      	ldrb	r3, [r7, #3]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d107      	bne.n	8006a06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80069f6:	883b      	ldrh	r3, [r7, #0]
 80069f8:	0419      	lsls	r1, r3, #16
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a04:	e028      	b.n	8006a58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0c:	0c1b      	lsrs	r3, r3, #16
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	4413      	add	r3, r2
 8006a12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a14:	2300      	movs	r3, #0
 8006a16:	73fb      	strb	r3, [r7, #15]
 8006a18:	e00d      	b.n	8006a36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	3340      	adds	r3, #64	@ 0x40
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	4413      	add	r3, r2
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	0c1b      	lsrs	r3, r3, #16
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a30:	7bfb      	ldrb	r3, [r7, #15]
 8006a32:	3301      	adds	r3, #1
 8006a34:	73fb      	strb	r3, [r7, #15]
 8006a36:	7bfa      	ldrb	r2, [r7, #15]
 8006a38:	78fb      	ldrb	r3, [r7, #3]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d3ec      	bcc.n	8006a1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006a40:	883b      	ldrh	r3, [r7, #0]
 8006a42:	0418      	lsls	r0, r3, #16
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6819      	ldr	r1, [r3, #0]
 8006a48:	78fb      	ldrb	r3, [r7, #3]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	4302      	orrs	r2, r0
 8006a50:	3340      	adds	r3, #64	@ 0x40
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	440b      	add	r3, r1
 8006a56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3714      	adds	r7, #20
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b083      	sub	sp, #12
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	460b      	mov	r3, r1
 8006a70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	887a      	ldrh	r2, [r7, #2]
 8006a78:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	460b      	mov	r3, r1
 8006a92:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e267      	b.n	8006f82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d075      	beq.n	8006baa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006abe:	4b88      	ldr	r3, [pc, #544]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f003 030c 	and.w	r3, r3, #12
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d00c      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aca:	4b85      	ldr	r3, [pc, #532]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006ad2:	2b08      	cmp	r3, #8
 8006ad4:	d112      	bne.n	8006afc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ad6:	4b82      	ldr	r3, [pc, #520]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ade:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ae2:	d10b      	bne.n	8006afc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ae4:	4b7e      	ldr	r3, [pc, #504]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d05b      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x108>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d157      	bne.n	8006ba8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e242      	b.n	8006f82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b04:	d106      	bne.n	8006b14 <HAL_RCC_OscConfig+0x74>
 8006b06:	4b76      	ldr	r3, [pc, #472]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a75      	ldr	r2, [pc, #468]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	e01d      	b.n	8006b50 <HAL_RCC_OscConfig+0xb0>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b1c:	d10c      	bne.n	8006b38 <HAL_RCC_OscConfig+0x98>
 8006b1e:	4b70      	ldr	r3, [pc, #448]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a6f      	ldr	r2, [pc, #444]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006b24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	4b6d      	ldr	r3, [pc, #436]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a6c      	ldr	r2, [pc, #432]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b34:	6013      	str	r3, [r2, #0]
 8006b36:	e00b      	b.n	8006b50 <HAL_RCC_OscConfig+0xb0>
 8006b38:	4b69      	ldr	r3, [pc, #420]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a68      	ldr	r2, [pc, #416]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b42:	6013      	str	r3, [r2, #0]
 8006b44:	4b66      	ldr	r3, [pc, #408]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a65      	ldr	r2, [pc, #404]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d013      	beq.n	8006b80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b58:	f7fa ffe6 	bl	8001b28 <HAL_GetTick>
 8006b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b5e:	e008      	b.n	8006b72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b60:	f7fa ffe2 	bl	8001b28 <HAL_GetTick>
 8006b64:	4602      	mov	r2, r0
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	2b64      	cmp	r3, #100	@ 0x64
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e207      	b.n	8006f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b72:	4b5b      	ldr	r3, [pc, #364]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0f0      	beq.n	8006b60 <HAL_RCC_OscConfig+0xc0>
 8006b7e:	e014      	b.n	8006baa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b80:	f7fa ffd2 	bl	8001b28 <HAL_GetTick>
 8006b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b86:	e008      	b.n	8006b9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b88:	f7fa ffce 	bl	8001b28 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b64      	cmp	r3, #100	@ 0x64
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e1f3      	b.n	8006f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b9a:	4b51      	ldr	r3, [pc, #324]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1f0      	bne.n	8006b88 <HAL_RCC_OscConfig+0xe8>
 8006ba6:	e000      	b.n	8006baa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d063      	beq.n	8006c7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006bb6:	4b4a      	ldr	r3, [pc, #296]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 030c 	and.w	r3, r3, #12
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00b      	beq.n	8006bda <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bc2:	4b47      	ldr	r3, [pc, #284]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006bca:	2b08      	cmp	r3, #8
 8006bcc:	d11c      	bne.n	8006c08 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bce:	4b44      	ldr	r3, [pc, #272]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d116      	bne.n	8006c08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bda:	4b41      	ldr	r3, [pc, #260]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d005      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x152>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d001      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e1c7      	b.n	8006f82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	4937      	ldr	r1, [pc, #220]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c06:	e03a      	b.n	8006c7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d020      	beq.n	8006c52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c10:	4b34      	ldr	r3, [pc, #208]	@ (8006ce4 <HAL_RCC_OscConfig+0x244>)
 8006c12:	2201      	movs	r2, #1
 8006c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c16:	f7fa ff87 	bl	8001b28 <HAL_GetTick>
 8006c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c1c:	e008      	b.n	8006c30 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c1e:	f7fa ff83 	bl	8001b28 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d901      	bls.n	8006c30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e1a8      	b.n	8006f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c30:	4b2b      	ldr	r3, [pc, #172]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d0f0      	beq.n	8006c1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c3c:	4b28      	ldr	r3, [pc, #160]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	00db      	lsls	r3, r3, #3
 8006c4a:	4925      	ldr	r1, [pc, #148]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	600b      	str	r3, [r1, #0]
 8006c50:	e015      	b.n	8006c7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c52:	4b24      	ldr	r3, [pc, #144]	@ (8006ce4 <HAL_RCC_OscConfig+0x244>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c58:	f7fa ff66 	bl	8001b28 <HAL_GetTick>
 8006c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c60:	f7fa ff62 	bl	8001b28 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e187      	b.n	8006f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c72:	4b1b      	ldr	r3, [pc, #108]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0302 	and.w	r3, r3, #2
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1f0      	bne.n	8006c60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0308 	and.w	r3, r3, #8
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d036      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d016      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c92:	4b15      	ldr	r3, [pc, #84]	@ (8006ce8 <HAL_RCC_OscConfig+0x248>)
 8006c94:	2201      	movs	r2, #1
 8006c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c98:	f7fa ff46 	bl	8001b28 <HAL_GetTick>
 8006c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ca0:	f7fa ff42 	bl	8001b28 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e167      	b.n	8006f82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce0 <HAL_RCC_OscConfig+0x240>)
 8006cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d0f0      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x200>
 8006cbe:	e01b      	b.n	8006cf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cc0:	4b09      	ldr	r3, [pc, #36]	@ (8006ce8 <HAL_RCC_OscConfig+0x248>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cc6:	f7fa ff2f 	bl	8001b28 <HAL_GetTick>
 8006cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ccc:	e00e      	b.n	8006cec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cce:	f7fa ff2b 	bl	8001b28 <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	2b02      	cmp	r3, #2
 8006cda:	d907      	bls.n	8006cec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e150      	b.n	8006f82 <HAL_RCC_OscConfig+0x4e2>
 8006ce0:	40023800 	.word	0x40023800
 8006ce4:	42470000 	.word	0x42470000
 8006ce8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cec:	4b88      	ldr	r3, [pc, #544]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d1ea      	bne.n	8006cce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 8097 	beq.w	8006e34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d06:	2300      	movs	r3, #0
 8006d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d0a:	4b81      	ldr	r3, [pc, #516]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10f      	bne.n	8006d36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d16:	2300      	movs	r3, #0
 8006d18:	60bb      	str	r3, [r7, #8]
 8006d1a:	4b7d      	ldr	r3, [pc, #500]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d1e:	4a7c      	ldr	r2, [pc, #496]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d26:	4b7a      	ldr	r3, [pc, #488]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d2e:	60bb      	str	r3, [r7, #8]
 8006d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d32:	2301      	movs	r3, #1
 8006d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d36:	4b77      	ldr	r3, [pc, #476]	@ (8006f14 <HAL_RCC_OscConfig+0x474>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d118      	bne.n	8006d74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d42:	4b74      	ldr	r3, [pc, #464]	@ (8006f14 <HAL_RCC_OscConfig+0x474>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a73      	ldr	r2, [pc, #460]	@ (8006f14 <HAL_RCC_OscConfig+0x474>)
 8006d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d4e:	f7fa feeb 	bl	8001b28 <HAL_GetTick>
 8006d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d54:	e008      	b.n	8006d68 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d56:	f7fa fee7 	bl	8001b28 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b02      	cmp	r3, #2
 8006d62:	d901      	bls.n	8006d68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e10c      	b.n	8006f82 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d68:	4b6a      	ldr	r3, [pc, #424]	@ (8006f14 <HAL_RCC_OscConfig+0x474>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0f0      	beq.n	8006d56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d106      	bne.n	8006d8a <HAL_RCC_OscConfig+0x2ea>
 8006d7c:	4b64      	ldr	r3, [pc, #400]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d80:	4a63      	ldr	r2, [pc, #396]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006d82:	f043 0301 	orr.w	r3, r3, #1
 8006d86:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d88:	e01c      	b.n	8006dc4 <HAL_RCC_OscConfig+0x324>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	2b05      	cmp	r3, #5
 8006d90:	d10c      	bne.n	8006dac <HAL_RCC_OscConfig+0x30c>
 8006d92:	4b5f      	ldr	r3, [pc, #380]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d96:	4a5e      	ldr	r2, [pc, #376]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006d98:	f043 0304 	orr.w	r3, r3, #4
 8006d9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d9e:	4b5c      	ldr	r3, [pc, #368]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006da2:	4a5b      	ldr	r2, [pc, #364]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006da4:	f043 0301 	orr.w	r3, r3, #1
 8006da8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006daa:	e00b      	b.n	8006dc4 <HAL_RCC_OscConfig+0x324>
 8006dac:	4b58      	ldr	r3, [pc, #352]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006db0:	4a57      	ldr	r2, [pc, #348]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006db2:	f023 0301 	bic.w	r3, r3, #1
 8006db6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006db8:	4b55      	ldr	r3, [pc, #340]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dbc:	4a54      	ldr	r2, [pc, #336]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006dbe:	f023 0304 	bic.w	r3, r3, #4
 8006dc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d015      	beq.n	8006df8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dcc:	f7fa feac 	bl	8001b28 <HAL_GetTick>
 8006dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dd2:	e00a      	b.n	8006dea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dd4:	f7fa fea8 	bl	8001b28 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e0cb      	b.n	8006f82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dea:	4b49      	ldr	r3, [pc, #292]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0ee      	beq.n	8006dd4 <HAL_RCC_OscConfig+0x334>
 8006df6:	e014      	b.n	8006e22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006df8:	f7fa fe96 	bl	8001b28 <HAL_GetTick>
 8006dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dfe:	e00a      	b.n	8006e16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e00:	f7fa fe92 	bl	8001b28 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e0b5      	b.n	8006f82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e16:	4b3e      	ldr	r3, [pc, #248]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1ee      	bne.n	8006e00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d105      	bne.n	8006e34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e28:	4b39      	ldr	r3, [pc, #228]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2c:	4a38      	ldr	r2, [pc, #224]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006e2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	699b      	ldr	r3, [r3, #24]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 80a1 	beq.w	8006f80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e3e:	4b34      	ldr	r3, [pc, #208]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 030c 	and.w	r3, r3, #12
 8006e46:	2b08      	cmp	r3, #8
 8006e48:	d05c      	beq.n	8006f04 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d141      	bne.n	8006ed6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e52:	4b31      	ldr	r3, [pc, #196]	@ (8006f18 <HAL_RCC_OscConfig+0x478>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e58:	f7fa fe66 	bl	8001b28 <HAL_GetTick>
 8006e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e5e:	e008      	b.n	8006e72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e60:	f7fa fe62 	bl	8001b28 <HAL_GetTick>
 8006e64:	4602      	mov	r2, r0
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	1ad3      	subs	r3, r2, r3
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d901      	bls.n	8006e72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e087      	b.n	8006f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e72:	4b27      	ldr	r3, [pc, #156]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1f0      	bne.n	8006e60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	69da      	ldr	r2, [r3, #28]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	431a      	orrs	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8c:	019b      	lsls	r3, r3, #6
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e94:	085b      	lsrs	r3, r3, #1
 8006e96:	3b01      	subs	r3, #1
 8006e98:	041b      	lsls	r3, r3, #16
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea0:	061b      	lsls	r3, r3, #24
 8006ea2:	491b      	ldr	r1, [pc, #108]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f18 <HAL_RCC_OscConfig+0x478>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eae:	f7fa fe3b 	bl	8001b28 <HAL_GetTick>
 8006eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eb4:	e008      	b.n	8006ec8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eb6:	f7fa fe37 	bl	8001b28 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d901      	bls.n	8006ec8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e05c      	b.n	8006f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ec8:	4b11      	ldr	r3, [pc, #68]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0f0      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x416>
 8006ed4:	e054      	b.n	8006f80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ed6:	4b10      	ldr	r3, [pc, #64]	@ (8006f18 <HAL_RCC_OscConfig+0x478>)
 8006ed8:	2200      	movs	r2, #0
 8006eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006edc:	f7fa fe24 	bl	8001b28 <HAL_GetTick>
 8006ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ee2:	e008      	b.n	8006ef6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ee4:	f7fa fe20 	bl	8001b28 <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e045      	b.n	8006f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ef6:	4b06      	ldr	r3, [pc, #24]	@ (8006f10 <HAL_RCC_OscConfig+0x470>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1f0      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x444>
 8006f02:	e03d      	b.n	8006f80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d107      	bne.n	8006f1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e038      	b.n	8006f82 <HAL_RCC_OscConfig+0x4e2>
 8006f10:	40023800 	.word	0x40023800
 8006f14:	40007000 	.word	0x40007000
 8006f18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8006f8c <HAL_RCC_OscConfig+0x4ec>)
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d028      	beq.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d121      	bne.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d11a      	bne.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d111      	bne.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f62:	085b      	lsrs	r3, r3, #1
 8006f64:	3b01      	subs	r3, #1
 8006f66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d107      	bne.n	8006f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d001      	beq.n	8006f80 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e000      	b.n	8006f82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3718      	adds	r7, #24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop
 8006f8c:	40023800 	.word	0x40023800

08006f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e0cc      	b.n	800713e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fa4:	4b68      	ldr	r3, [pc, #416]	@ (8007148 <HAL_RCC_ClockConfig+0x1b8>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d90c      	bls.n	8006fcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fb2:	4b65      	ldr	r3, [pc, #404]	@ (8007148 <HAL_RCC_ClockConfig+0x1b8>)
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	b2d2      	uxtb	r2, r2
 8006fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fba:	4b63      	ldr	r3, [pc, #396]	@ (8007148 <HAL_RCC_ClockConfig+0x1b8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0307 	and.w	r3, r3, #7
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d001      	beq.n	8006fcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e0b8      	b.n	800713e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0302 	and.w	r3, r3, #2
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d020      	beq.n	800701a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0304 	and.w	r3, r3, #4
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fe4:	4b59      	ldr	r3, [pc, #356]	@ (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	4a58      	ldr	r2, [pc, #352]	@ (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8006fea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006fee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0308 	and.w	r3, r3, #8
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d005      	beq.n	8007008 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ffc:	4b53      	ldr	r3, [pc, #332]	@ (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	4a52      	ldr	r2, [pc, #328]	@ (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8007002:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007006:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007008:	4b50      	ldr	r3, [pc, #320]	@ (800714c <HAL_RCC_ClockConfig+0x1bc>)
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	494d      	ldr	r1, [pc, #308]	@ (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8007016:	4313      	orrs	r3, r2
 8007018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b00      	cmp	r3, #0
 8007024:	d044      	beq.n	80070b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d107      	bne.n	800703e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800702e:	4b47      	ldr	r3, [pc, #284]	@ (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d119      	bne.n	800706e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e07f      	b.n	800713e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	2b02      	cmp	r3, #2
 8007044:	d003      	beq.n	800704e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800704a:	2b03      	cmp	r3, #3
 800704c:	d107      	bne.n	800705e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800704e:	4b3f      	ldr	r3, [pc, #252]	@ (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d109      	bne.n	800706e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e06f      	b.n	800713e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800705e:	4b3b      	ldr	r3, [pc, #236]	@ (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e067      	b.n	800713e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800706e:	4b37      	ldr	r3, [pc, #220]	@ (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f023 0203 	bic.w	r2, r3, #3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	4934      	ldr	r1, [pc, #208]	@ (800714c <HAL_RCC_ClockConfig+0x1bc>)
 800707c:	4313      	orrs	r3, r2
 800707e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007080:	f7fa fd52 	bl	8001b28 <HAL_GetTick>
 8007084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007086:	e00a      	b.n	800709e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007088:	f7fa fd4e 	bl	8001b28 <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007096:	4293      	cmp	r3, r2
 8007098:	d901      	bls.n	800709e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e04f      	b.n	800713e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800709e:	4b2b      	ldr	r3, [pc, #172]	@ (800714c <HAL_RCC_ClockConfig+0x1bc>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 020c 	and.w	r2, r3, #12
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d1eb      	bne.n	8007088 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070b0:	4b25      	ldr	r3, [pc, #148]	@ (8007148 <HAL_RCC_ClockConfig+0x1b8>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0307 	and.w	r3, r3, #7
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d20c      	bcs.n	80070d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070be:	4b22      	ldr	r3, [pc, #136]	@ (8007148 <HAL_RCC_ClockConfig+0x1b8>)
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	b2d2      	uxtb	r2, r2
 80070c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070c6:	4b20      	ldr	r3, [pc, #128]	@ (8007148 <HAL_RCC_ClockConfig+0x1b8>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0307 	and.w	r3, r3, #7
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d001      	beq.n	80070d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e032      	b.n	800713e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0304 	and.w	r3, r3, #4
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d008      	beq.n	80070f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070e4:	4b19      	ldr	r3, [pc, #100]	@ (800714c <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	4916      	ldr	r1, [pc, #88]	@ (800714c <HAL_RCC_ClockConfig+0x1bc>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0308 	and.w	r3, r3, #8
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d009      	beq.n	8007116 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007102:	4b12      	ldr	r3, [pc, #72]	@ (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	490e      	ldr	r1, [pc, #56]	@ (800714c <HAL_RCC_ClockConfig+0x1bc>)
 8007112:	4313      	orrs	r3, r2
 8007114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007116:	f000 f821 	bl	800715c <HAL_RCC_GetSysClockFreq>
 800711a:	4602      	mov	r2, r0
 800711c:	4b0b      	ldr	r3, [pc, #44]	@ (800714c <HAL_RCC_ClockConfig+0x1bc>)
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	091b      	lsrs	r3, r3, #4
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	490a      	ldr	r1, [pc, #40]	@ (8007150 <HAL_RCC_ClockConfig+0x1c0>)
 8007128:	5ccb      	ldrb	r3, [r1, r3]
 800712a:	fa22 f303 	lsr.w	r3, r2, r3
 800712e:	4a09      	ldr	r2, [pc, #36]	@ (8007154 <HAL_RCC_ClockConfig+0x1c4>)
 8007130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007132:	4b09      	ldr	r3, [pc, #36]	@ (8007158 <HAL_RCC_ClockConfig+0x1c8>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4618      	mov	r0, r3
 8007138:	f7fa fcb2 	bl	8001aa0 <HAL_InitTick>

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	40023c00 	.word	0x40023c00
 800714c:	40023800 	.word	0x40023800
 8007150:	0800bf74 	.word	0x0800bf74
 8007154:	2000002c 	.word	0x2000002c
 8007158:	20000030 	.word	0x20000030

0800715c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800715c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007160:	b090      	sub	sp, #64	@ 0x40
 8007162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007164:	2300      	movs	r3, #0
 8007166:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800716c:	2300      	movs	r3, #0
 800716e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007174:	4b59      	ldr	r3, [pc, #356]	@ (80072dc <HAL_RCC_GetSysClockFreq+0x180>)
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f003 030c 	and.w	r3, r3, #12
 800717c:	2b08      	cmp	r3, #8
 800717e:	d00d      	beq.n	800719c <HAL_RCC_GetSysClockFreq+0x40>
 8007180:	2b08      	cmp	r3, #8
 8007182:	f200 80a1 	bhi.w	80072c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d002      	beq.n	8007190 <HAL_RCC_GetSysClockFreq+0x34>
 800718a:	2b04      	cmp	r3, #4
 800718c:	d003      	beq.n	8007196 <HAL_RCC_GetSysClockFreq+0x3a>
 800718e:	e09b      	b.n	80072c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007190:	4b53      	ldr	r3, [pc, #332]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007192:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007194:	e09b      	b.n	80072ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007196:	4b53      	ldr	r3, [pc, #332]	@ (80072e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007198:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800719a:	e098      	b.n	80072ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800719c:	4b4f      	ldr	r3, [pc, #316]	@ (80072dc <HAL_RCC_GetSysClockFreq+0x180>)
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071a6:	4b4d      	ldr	r3, [pc, #308]	@ (80072dc <HAL_RCC_GetSysClockFreq+0x180>)
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d028      	beq.n	8007204 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071b2:	4b4a      	ldr	r3, [pc, #296]	@ (80072dc <HAL_RCC_GetSysClockFreq+0x180>)
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	099b      	lsrs	r3, r3, #6
 80071b8:	2200      	movs	r2, #0
 80071ba:	623b      	str	r3, [r7, #32]
 80071bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80071c4:	2100      	movs	r1, #0
 80071c6:	4b47      	ldr	r3, [pc, #284]	@ (80072e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80071c8:	fb03 f201 	mul.w	r2, r3, r1
 80071cc:	2300      	movs	r3, #0
 80071ce:	fb00 f303 	mul.w	r3, r0, r3
 80071d2:	4413      	add	r3, r2
 80071d4:	4a43      	ldr	r2, [pc, #268]	@ (80072e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80071d6:	fba0 1202 	umull	r1, r2, r0, r2
 80071da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071dc:	460a      	mov	r2, r1
 80071de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80071e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071e2:	4413      	add	r3, r2
 80071e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e8:	2200      	movs	r2, #0
 80071ea:	61bb      	str	r3, [r7, #24]
 80071ec:	61fa      	str	r2, [r7, #28]
 80071ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80071f6:	f7f8 ffef 	bl	80001d8 <__aeabi_uldivmod>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4613      	mov	r3, r2
 8007200:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007202:	e053      	b.n	80072ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007204:	4b35      	ldr	r3, [pc, #212]	@ (80072dc <HAL_RCC_GetSysClockFreq+0x180>)
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	099b      	lsrs	r3, r3, #6
 800720a:	2200      	movs	r2, #0
 800720c:	613b      	str	r3, [r7, #16]
 800720e:	617a      	str	r2, [r7, #20]
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007216:	f04f 0b00 	mov.w	fp, #0
 800721a:	4652      	mov	r2, sl
 800721c:	465b      	mov	r3, fp
 800721e:	f04f 0000 	mov.w	r0, #0
 8007222:	f04f 0100 	mov.w	r1, #0
 8007226:	0159      	lsls	r1, r3, #5
 8007228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800722c:	0150      	lsls	r0, r2, #5
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	ebb2 080a 	subs.w	r8, r2, sl
 8007236:	eb63 090b 	sbc.w	r9, r3, fp
 800723a:	f04f 0200 	mov.w	r2, #0
 800723e:	f04f 0300 	mov.w	r3, #0
 8007242:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007246:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800724a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800724e:	ebb2 0408 	subs.w	r4, r2, r8
 8007252:	eb63 0509 	sbc.w	r5, r3, r9
 8007256:	f04f 0200 	mov.w	r2, #0
 800725a:	f04f 0300 	mov.w	r3, #0
 800725e:	00eb      	lsls	r3, r5, #3
 8007260:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007264:	00e2      	lsls	r2, r4, #3
 8007266:	4614      	mov	r4, r2
 8007268:	461d      	mov	r5, r3
 800726a:	eb14 030a 	adds.w	r3, r4, sl
 800726e:	603b      	str	r3, [r7, #0]
 8007270:	eb45 030b 	adc.w	r3, r5, fp
 8007274:	607b      	str	r3, [r7, #4]
 8007276:	f04f 0200 	mov.w	r2, #0
 800727a:	f04f 0300 	mov.w	r3, #0
 800727e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007282:	4629      	mov	r1, r5
 8007284:	028b      	lsls	r3, r1, #10
 8007286:	4621      	mov	r1, r4
 8007288:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800728c:	4621      	mov	r1, r4
 800728e:	028a      	lsls	r2, r1, #10
 8007290:	4610      	mov	r0, r2
 8007292:	4619      	mov	r1, r3
 8007294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007296:	2200      	movs	r2, #0
 8007298:	60bb      	str	r3, [r7, #8]
 800729a:	60fa      	str	r2, [r7, #12]
 800729c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072a0:	f7f8 ff9a 	bl	80001d8 <__aeabi_uldivmod>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4613      	mov	r3, r2
 80072aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80072ac:	4b0b      	ldr	r3, [pc, #44]	@ (80072dc <HAL_RCC_GetSysClockFreq+0x180>)
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	0c1b      	lsrs	r3, r3, #16
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	3301      	adds	r3, #1
 80072b8:	005b      	lsls	r3, r3, #1
 80072ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80072bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80072be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80072c6:	e002      	b.n	80072ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072c8:	4b05      	ldr	r3, [pc, #20]	@ (80072e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80072ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80072cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3740      	adds	r7, #64	@ 0x40
 80072d4:	46bd      	mov	sp, r7
 80072d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072da:	bf00      	nop
 80072dc:	40023800 	.word	0x40023800
 80072e0:	00f42400 	.word	0x00f42400
 80072e4:	017d7840 	.word	0x017d7840

080072e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072e8:	b480      	push	{r7}
 80072ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072ec:	4b03      	ldr	r3, [pc, #12]	@ (80072fc <HAL_RCC_GetHCLKFreq+0x14>)
 80072ee:	681b      	ldr	r3, [r3, #0]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	2000002c 	.word	0x2000002c

08007300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007304:	f7ff fff0 	bl	80072e8 <HAL_RCC_GetHCLKFreq>
 8007308:	4602      	mov	r2, r0
 800730a:	4b05      	ldr	r3, [pc, #20]	@ (8007320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	0a9b      	lsrs	r3, r3, #10
 8007310:	f003 0307 	and.w	r3, r3, #7
 8007314:	4903      	ldr	r1, [pc, #12]	@ (8007324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007316:	5ccb      	ldrb	r3, [r1, r3]
 8007318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800731c:	4618      	mov	r0, r3
 800731e:	bd80      	pop	{r7, pc}
 8007320:	40023800 	.word	0x40023800
 8007324:	0800bf84 	.word	0x0800bf84

08007328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e041      	b.n	80073be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d106      	bne.n	8007354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f7fa fa6a 	bl	8001828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2202      	movs	r2, #2
 8007358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3304      	adds	r3, #4
 8007364:	4619      	mov	r1, r3
 8007366:	4610      	mov	r0, r2
 8007368:	f000 fab2 	bl	80078d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2201      	movs	r2, #1
 8007390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073bc:	2300      	movs	r3, #0
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d001      	beq.n	80073e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e044      	b.n	800746a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68da      	ldr	r2, [r3, #12]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f042 0201 	orr.w	r2, r2, #1
 80073f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a1e      	ldr	r2, [pc, #120]	@ (8007478 <HAL_TIM_Base_Start_IT+0xb0>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d018      	beq.n	8007434 <HAL_TIM_Base_Start_IT+0x6c>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800740a:	d013      	beq.n	8007434 <HAL_TIM_Base_Start_IT+0x6c>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a1a      	ldr	r2, [pc, #104]	@ (800747c <HAL_TIM_Base_Start_IT+0xb4>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d00e      	beq.n	8007434 <HAL_TIM_Base_Start_IT+0x6c>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a19      	ldr	r2, [pc, #100]	@ (8007480 <HAL_TIM_Base_Start_IT+0xb8>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d009      	beq.n	8007434 <HAL_TIM_Base_Start_IT+0x6c>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a17      	ldr	r2, [pc, #92]	@ (8007484 <HAL_TIM_Base_Start_IT+0xbc>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d004      	beq.n	8007434 <HAL_TIM_Base_Start_IT+0x6c>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a16      	ldr	r2, [pc, #88]	@ (8007488 <HAL_TIM_Base_Start_IT+0xc0>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d111      	bne.n	8007458 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f003 0307 	and.w	r3, r3, #7
 800743e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b06      	cmp	r3, #6
 8007444:	d010      	beq.n	8007468 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f042 0201 	orr.w	r2, r2, #1
 8007454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007456:	e007      	b.n	8007468 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f042 0201 	orr.w	r2, r2, #1
 8007466:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	40010000 	.word	0x40010000
 800747c:	40000400 	.word	0x40000400
 8007480:	40000800 	.word	0x40000800
 8007484:	40000c00 	.word	0x40000c00
 8007488:	40014000 	.word	0x40014000

0800748c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d020      	beq.n	80074f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d01b      	beq.n	80074f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f06f 0202 	mvn.w	r2, #2
 80074c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	f003 0303 	and.w	r3, r3, #3
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f9db 	bl	8007892 <HAL_TIM_IC_CaptureCallback>
 80074dc:	e005      	b.n	80074ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 f9cd 	bl	800787e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f9de 	bl	80078a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f003 0304 	and.w	r3, r3, #4
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d020      	beq.n	800753c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f003 0304 	and.w	r3, r3, #4
 8007500:	2b00      	cmp	r3, #0
 8007502:	d01b      	beq.n	800753c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f06f 0204 	mvn.w	r2, #4
 800750c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2202      	movs	r2, #2
 8007512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800751e:	2b00      	cmp	r3, #0
 8007520:	d003      	beq.n	800752a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f9b5 	bl	8007892 <HAL_TIM_IC_CaptureCallback>
 8007528:	e005      	b.n	8007536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f9a7 	bl	800787e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 f9b8 	bl	80078a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f003 0308 	and.w	r3, r3, #8
 8007542:	2b00      	cmp	r3, #0
 8007544:	d020      	beq.n	8007588 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f003 0308 	and.w	r3, r3, #8
 800754c:	2b00      	cmp	r3, #0
 800754e:	d01b      	beq.n	8007588 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f06f 0208 	mvn.w	r2, #8
 8007558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2204      	movs	r2, #4
 800755e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	69db      	ldr	r3, [r3, #28]
 8007566:	f003 0303 	and.w	r3, r3, #3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d003      	beq.n	8007576 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 f98f 	bl	8007892 <HAL_TIM_IC_CaptureCallback>
 8007574:	e005      	b.n	8007582 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f981 	bl	800787e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 f992 	bl	80078a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	f003 0310 	and.w	r3, r3, #16
 800758e:	2b00      	cmp	r3, #0
 8007590:	d020      	beq.n	80075d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f003 0310 	and.w	r3, r3, #16
 8007598:	2b00      	cmp	r3, #0
 800759a:	d01b      	beq.n	80075d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f06f 0210 	mvn.w	r2, #16
 80075a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2208      	movs	r2, #8
 80075aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f969 	bl	8007892 <HAL_TIM_IC_CaptureCallback>
 80075c0:	e005      	b.n	80075ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f95b 	bl	800787e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f96c 	bl	80078a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	f003 0301 	and.w	r3, r3, #1
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00c      	beq.n	80075f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d007      	beq.n	80075f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f06f 0201 	mvn.w	r2, #1
 80075f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7f8 ffb6 	bl	8000564 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00c      	beq.n	800761c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007608:	2b00      	cmp	r3, #0
 800760a:	d007      	beq.n	800761c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fb84 	bl	8007d24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00c      	beq.n	8007640 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800762c:	2b00      	cmp	r3, #0
 800762e:	d007      	beq.n	8007640 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f93d 	bl	80078ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00c      	beq.n	8007664 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f003 0320 	and.w	r3, r3, #32
 8007650:	2b00      	cmp	r3, #0
 8007652:	d007      	beq.n	8007664 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f06f 0220 	mvn.w	r2, #32
 800765c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fb56 	bl	8007d10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007664:	bf00      	nop
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007680:	2b01      	cmp	r3, #1
 8007682:	d101      	bne.n	8007688 <HAL_TIM_ConfigClockSource+0x1c>
 8007684:	2302      	movs	r3, #2
 8007686:	e0b4      	b.n	80077f2 <HAL_TIM_ConfigClockSource+0x186>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80076a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80076ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076c0:	d03e      	beq.n	8007740 <HAL_TIM_ConfigClockSource+0xd4>
 80076c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076c6:	f200 8087 	bhi.w	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 80076ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076ce:	f000 8086 	beq.w	80077de <HAL_TIM_ConfigClockSource+0x172>
 80076d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076d6:	d87f      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 80076d8:	2b70      	cmp	r3, #112	@ 0x70
 80076da:	d01a      	beq.n	8007712 <HAL_TIM_ConfigClockSource+0xa6>
 80076dc:	2b70      	cmp	r3, #112	@ 0x70
 80076de:	d87b      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 80076e0:	2b60      	cmp	r3, #96	@ 0x60
 80076e2:	d050      	beq.n	8007786 <HAL_TIM_ConfigClockSource+0x11a>
 80076e4:	2b60      	cmp	r3, #96	@ 0x60
 80076e6:	d877      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 80076e8:	2b50      	cmp	r3, #80	@ 0x50
 80076ea:	d03c      	beq.n	8007766 <HAL_TIM_ConfigClockSource+0xfa>
 80076ec:	2b50      	cmp	r3, #80	@ 0x50
 80076ee:	d873      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 80076f0:	2b40      	cmp	r3, #64	@ 0x40
 80076f2:	d058      	beq.n	80077a6 <HAL_TIM_ConfigClockSource+0x13a>
 80076f4:	2b40      	cmp	r3, #64	@ 0x40
 80076f6:	d86f      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 80076f8:	2b30      	cmp	r3, #48	@ 0x30
 80076fa:	d064      	beq.n	80077c6 <HAL_TIM_ConfigClockSource+0x15a>
 80076fc:	2b30      	cmp	r3, #48	@ 0x30
 80076fe:	d86b      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 8007700:	2b20      	cmp	r3, #32
 8007702:	d060      	beq.n	80077c6 <HAL_TIM_ConfigClockSource+0x15a>
 8007704:	2b20      	cmp	r3, #32
 8007706:	d867      	bhi.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
 8007708:	2b00      	cmp	r3, #0
 800770a:	d05c      	beq.n	80077c6 <HAL_TIM_ConfigClockSource+0x15a>
 800770c:	2b10      	cmp	r3, #16
 800770e:	d05a      	beq.n	80077c6 <HAL_TIM_ConfigClockSource+0x15a>
 8007710:	e062      	b.n	80077d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007722:	f000 fa66 	bl	8007bf2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007734:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68ba      	ldr	r2, [r7, #8]
 800773c:	609a      	str	r2, [r3, #8]
      break;
 800773e:	e04f      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007750:	f000 fa4f 	bl	8007bf2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689a      	ldr	r2, [r3, #8]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007762:	609a      	str	r2, [r3, #8]
      break;
 8007764:	e03c      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007772:	461a      	mov	r2, r3
 8007774:	f000 f9c3 	bl	8007afe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2150      	movs	r1, #80	@ 0x50
 800777e:	4618      	mov	r0, r3
 8007780:	f000 fa1c 	bl	8007bbc <TIM_ITRx_SetConfig>
      break;
 8007784:	e02c      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007792:	461a      	mov	r2, r3
 8007794:	f000 f9e2 	bl	8007b5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2160      	movs	r1, #96	@ 0x60
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 fa0c 	bl	8007bbc <TIM_ITRx_SetConfig>
      break;
 80077a4:	e01c      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077b2:	461a      	mov	r2, r3
 80077b4:	f000 f9a3 	bl	8007afe <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	2140      	movs	r1, #64	@ 0x40
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 f9fc 	bl	8007bbc <TIM_ITRx_SetConfig>
      break;
 80077c4:	e00c      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4619      	mov	r1, r3
 80077d0:	4610      	mov	r0, r2
 80077d2:	f000 f9f3 	bl	8007bbc <TIM_ITRx_SetConfig>
      break;
 80077d6:	e003      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	73fb      	strb	r3, [r7, #15]
      break;
 80077dc:	e000      	b.n	80077e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80077de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b082      	sub	sp, #8
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800780a:	2b01      	cmp	r3, #1
 800780c:	d101      	bne.n	8007812 <HAL_TIM_SlaveConfigSynchro+0x18>
 800780e:	2302      	movs	r3, #2
 8007810:	e031      	b.n	8007876 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2202      	movs	r2, #2
 800781e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f8d9 	bl	80079dc <TIM_SlaveTimer_SetConfig>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d009      	beq.n	8007844 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e018      	b.n	8007876 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68da      	ldr	r2, [r3, #12]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007852:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007862:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
	...

080078d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a37      	ldr	r2, [pc, #220]	@ (80079c0 <TIM_Base_SetConfig+0xf0>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d00f      	beq.n	8007908 <TIM_Base_SetConfig+0x38>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078ee:	d00b      	beq.n	8007908 <TIM_Base_SetConfig+0x38>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a34      	ldr	r2, [pc, #208]	@ (80079c4 <TIM_Base_SetConfig+0xf4>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d007      	beq.n	8007908 <TIM_Base_SetConfig+0x38>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a33      	ldr	r2, [pc, #204]	@ (80079c8 <TIM_Base_SetConfig+0xf8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d003      	beq.n	8007908 <TIM_Base_SetConfig+0x38>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a32      	ldr	r2, [pc, #200]	@ (80079cc <TIM_Base_SetConfig+0xfc>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d108      	bne.n	800791a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800790e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	4313      	orrs	r3, r2
 8007918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a28      	ldr	r2, [pc, #160]	@ (80079c0 <TIM_Base_SetConfig+0xf0>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d01b      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007928:	d017      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a25      	ldr	r2, [pc, #148]	@ (80079c4 <TIM_Base_SetConfig+0xf4>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d013      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a24      	ldr	r2, [pc, #144]	@ (80079c8 <TIM_Base_SetConfig+0xf8>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00f      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a23      	ldr	r2, [pc, #140]	@ (80079cc <TIM_Base_SetConfig+0xfc>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d00b      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a22      	ldr	r2, [pc, #136]	@ (80079d0 <TIM_Base_SetConfig+0x100>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d007      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a21      	ldr	r2, [pc, #132]	@ (80079d4 <TIM_Base_SetConfig+0x104>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d003      	beq.n	800795a <TIM_Base_SetConfig+0x8a>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a20      	ldr	r2, [pc, #128]	@ (80079d8 <TIM_Base_SetConfig+0x108>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d108      	bne.n	800796c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	4313      	orrs	r3, r2
 800796a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	4313      	orrs	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	689a      	ldr	r2, [r3, #8]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a0c      	ldr	r2, [pc, #48]	@ (80079c0 <TIM_Base_SetConfig+0xf0>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d103      	bne.n	800799a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	691a      	ldr	r2, [r3, #16]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f043 0204 	orr.w	r2, r3, #4
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	601a      	str	r2, [r3, #0]
}
 80079b2:	bf00      	nop
 80079b4:	3714      	adds	r7, #20
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr
 80079be:	bf00      	nop
 80079c0:	40010000 	.word	0x40010000
 80079c4:	40000400 	.word	0x40000400
 80079c8:	40000800 	.word	0x40000800
 80079cc:	40000c00 	.word	0x40000c00
 80079d0:	40014000 	.word	0x40014000
 80079d4:	40014400 	.word	0x40014400
 80079d8:	40014800 	.word	0x40014800

080079dc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079f8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	693a      	ldr	r2, [r7, #16]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	f023 0307 	bic.w	r3, r3, #7
 8007a0a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	2b70      	cmp	r3, #112	@ 0x70
 8007a24:	d01a      	beq.n	8007a5c <TIM_SlaveTimer_SetConfig+0x80>
 8007a26:	2b70      	cmp	r3, #112	@ 0x70
 8007a28:	d860      	bhi.n	8007aec <TIM_SlaveTimer_SetConfig+0x110>
 8007a2a:	2b60      	cmp	r3, #96	@ 0x60
 8007a2c:	d054      	beq.n	8007ad8 <TIM_SlaveTimer_SetConfig+0xfc>
 8007a2e:	2b60      	cmp	r3, #96	@ 0x60
 8007a30:	d85c      	bhi.n	8007aec <TIM_SlaveTimer_SetConfig+0x110>
 8007a32:	2b50      	cmp	r3, #80	@ 0x50
 8007a34:	d046      	beq.n	8007ac4 <TIM_SlaveTimer_SetConfig+0xe8>
 8007a36:	2b50      	cmp	r3, #80	@ 0x50
 8007a38:	d858      	bhi.n	8007aec <TIM_SlaveTimer_SetConfig+0x110>
 8007a3a:	2b40      	cmp	r3, #64	@ 0x40
 8007a3c:	d019      	beq.n	8007a72 <TIM_SlaveTimer_SetConfig+0x96>
 8007a3e:	2b40      	cmp	r3, #64	@ 0x40
 8007a40:	d854      	bhi.n	8007aec <TIM_SlaveTimer_SetConfig+0x110>
 8007a42:	2b30      	cmp	r3, #48	@ 0x30
 8007a44:	d055      	beq.n	8007af2 <TIM_SlaveTimer_SetConfig+0x116>
 8007a46:	2b30      	cmp	r3, #48	@ 0x30
 8007a48:	d850      	bhi.n	8007aec <TIM_SlaveTimer_SetConfig+0x110>
 8007a4a:	2b20      	cmp	r3, #32
 8007a4c:	d051      	beq.n	8007af2 <TIM_SlaveTimer_SetConfig+0x116>
 8007a4e:	2b20      	cmp	r3, #32
 8007a50:	d84c      	bhi.n	8007aec <TIM_SlaveTimer_SetConfig+0x110>
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d04d      	beq.n	8007af2 <TIM_SlaveTimer_SetConfig+0x116>
 8007a56:	2b10      	cmp	r3, #16
 8007a58:	d04b      	beq.n	8007af2 <TIM_SlaveTimer_SetConfig+0x116>
 8007a5a:	e047      	b.n	8007aec <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007a6c:	f000 f8c1 	bl	8007bf2 <TIM_ETR_SetConfig>
      break;
 8007a70:	e040      	b.n	8007af4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b05      	cmp	r3, #5
 8007a78:	d101      	bne.n	8007a7e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	e03b      	b.n	8007af6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	6a1b      	ldr	r3, [r3, #32]
 8007a84:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6a1a      	ldr	r2, [r3, #32]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f022 0201 	bic.w	r2, r2, #1
 8007a94:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007aa4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	011b      	lsls	r3, r3, #4
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	621a      	str	r2, [r3, #32]
      break;
 8007ac2:	e017      	b.n	8007af4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	f000 f814 	bl	8007afe <TIM_TI1_ConfigInputStage>
      break;
 8007ad6:	e00d      	b.n	8007af4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	f000 f839 	bl	8007b5c <TIM_TI2_ConfigInputStage>
      break;
 8007aea:	e003      	b.n	8007af4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	75fb      	strb	r3, [r7, #23]
      break;
 8007af0:	e000      	b.n	8007af4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007af2:	bf00      	nop
  }

  return status;
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b087      	sub	sp, #28
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	60f8      	str	r0, [r7, #12]
 8007b06:	60b9      	str	r1, [r7, #8]
 8007b08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6a1b      	ldr	r3, [r3, #32]
 8007b14:	f023 0201 	bic.w	r2, r3, #1
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	011b      	lsls	r3, r3, #4
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f023 030a 	bic.w	r3, r3, #10
 8007b3a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b3c:	697a      	ldr	r2, [r7, #20]
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	693a      	ldr	r2, [r7, #16]
 8007b48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	621a      	str	r2, [r3, #32]
}
 8007b50:	bf00      	nop
 8007b52:	371c      	adds	r7, #28
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6a1b      	ldr	r3, [r3, #32]
 8007b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	f023 0210 	bic.w	r2, r3, #16
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	031b      	lsls	r3, r3, #12
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	011b      	lsls	r3, r3, #4
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	693a      	ldr	r2, [r7, #16]
 8007ba8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	621a      	str	r2, [r3, #32]
}
 8007bb0:	bf00      	nop
 8007bb2:	371c      	adds	r7, #28
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bd2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	f043 0307 	orr.w	r3, r3, #7
 8007bde:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	609a      	str	r2, [r3, #8]
}
 8007be6:	bf00      	nop
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b087      	sub	sp, #28
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	60f8      	str	r0, [r7, #12]
 8007bfa:	60b9      	str	r1, [r7, #8]
 8007bfc:	607a      	str	r2, [r7, #4]
 8007bfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	021a      	lsls	r2, r3, #8
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	431a      	orrs	r2, r3
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	609a      	str	r2, [r3, #8]
}
 8007c26:	bf00      	nop
 8007c28:	371c      	adds	r7, #28
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c30:	4770      	bx	lr
	...

08007c34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d101      	bne.n	8007c4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c48:	2302      	movs	r3, #2
 8007c4a:	e050      	b.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2202      	movs	r2, #2
 8007c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8007cfc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d018      	beq.n	8007cc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c98:	d013      	beq.n	8007cc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a18      	ldr	r2, [pc, #96]	@ (8007d00 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d00e      	beq.n	8007cc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a16      	ldr	r2, [pc, #88]	@ (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d009      	beq.n	8007cc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a15      	ldr	r2, [pc, #84]	@ (8007d08 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d004      	beq.n	8007cc2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a13      	ldr	r2, [pc, #76]	@ (8007d0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d10c      	bne.n	8007cdc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	40010000 	.word	0x40010000
 8007d00:	40000400 	.word	0x40000400
 8007d04:	40000800 	.word	0x40000800
 8007d08:	40000c00 	.word	0x40000c00
 8007d0c:	40014000 	.word	0x40014000

08007d10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d38:	b084      	sub	sp, #16
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	f107 001c 	add.w	r0, r7, #28
 8007d46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d4a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d123      	bne.n	8007d9a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d56:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007d66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d105      	bne.n	8007d8e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f001 fae8 	bl	8009364 <USB_CoreReset>
 8007d94:	4603      	mov	r3, r0
 8007d96:	73fb      	strb	r3, [r7, #15]
 8007d98:	e01b      	b.n	8007dd2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 fadc 	bl	8009364 <USB_CoreReset>
 8007dac:	4603      	mov	r3, r0
 8007dae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007db0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d106      	bne.n	8007dc6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dbc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8007dc4:	e005      	b.n	8007dd2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007dd2:	7fbb      	ldrb	r3, [r7, #30]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d10b      	bne.n	8007df0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	f043 0206 	orr.w	r2, r3, #6
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f043 0220 	orr.w	r2, r3, #32
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dfc:	b004      	add	sp, #16
 8007dfe:	4770      	bx	lr

08007e00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007e0e:	79fb      	ldrb	r3, [r7, #7]
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d165      	bne.n	8007ee0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4a41      	ldr	r2, [pc, #260]	@ (8007f1c <USB_SetTurnaroundTime+0x11c>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d906      	bls.n	8007e2a <USB_SetTurnaroundTime+0x2a>
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	4a40      	ldr	r2, [pc, #256]	@ (8007f20 <USB_SetTurnaroundTime+0x120>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d202      	bcs.n	8007e2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007e24:	230f      	movs	r3, #15
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	e062      	b.n	8007ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	4a3c      	ldr	r2, [pc, #240]	@ (8007f20 <USB_SetTurnaroundTime+0x120>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d306      	bcc.n	8007e40 <USB_SetTurnaroundTime+0x40>
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	4a3b      	ldr	r2, [pc, #236]	@ (8007f24 <USB_SetTurnaroundTime+0x124>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d202      	bcs.n	8007e40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007e3a:	230e      	movs	r3, #14
 8007e3c:	617b      	str	r3, [r7, #20]
 8007e3e:	e057      	b.n	8007ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	4a38      	ldr	r2, [pc, #224]	@ (8007f24 <USB_SetTurnaroundTime+0x124>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d306      	bcc.n	8007e56 <USB_SetTurnaroundTime+0x56>
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	4a37      	ldr	r2, [pc, #220]	@ (8007f28 <USB_SetTurnaroundTime+0x128>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d202      	bcs.n	8007e56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007e50:	230d      	movs	r3, #13
 8007e52:	617b      	str	r3, [r7, #20]
 8007e54:	e04c      	b.n	8007ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	4a33      	ldr	r2, [pc, #204]	@ (8007f28 <USB_SetTurnaroundTime+0x128>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d306      	bcc.n	8007e6c <USB_SetTurnaroundTime+0x6c>
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	4a32      	ldr	r2, [pc, #200]	@ (8007f2c <USB_SetTurnaroundTime+0x12c>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d802      	bhi.n	8007e6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007e66:	230c      	movs	r3, #12
 8007e68:	617b      	str	r3, [r7, #20]
 8007e6a:	e041      	b.n	8007ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	4a2f      	ldr	r2, [pc, #188]	@ (8007f2c <USB_SetTurnaroundTime+0x12c>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d906      	bls.n	8007e82 <USB_SetTurnaroundTime+0x82>
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	4a2e      	ldr	r2, [pc, #184]	@ (8007f30 <USB_SetTurnaroundTime+0x130>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d802      	bhi.n	8007e82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007e7c:	230b      	movs	r3, #11
 8007e7e:	617b      	str	r3, [r7, #20]
 8007e80:	e036      	b.n	8007ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	4a2a      	ldr	r2, [pc, #168]	@ (8007f30 <USB_SetTurnaroundTime+0x130>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d906      	bls.n	8007e98 <USB_SetTurnaroundTime+0x98>
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	4a29      	ldr	r2, [pc, #164]	@ (8007f34 <USB_SetTurnaroundTime+0x134>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d802      	bhi.n	8007e98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007e92:	230a      	movs	r3, #10
 8007e94:	617b      	str	r3, [r7, #20]
 8007e96:	e02b      	b.n	8007ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	4a26      	ldr	r2, [pc, #152]	@ (8007f34 <USB_SetTurnaroundTime+0x134>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d906      	bls.n	8007eae <USB_SetTurnaroundTime+0xae>
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	4a25      	ldr	r2, [pc, #148]	@ (8007f38 <USB_SetTurnaroundTime+0x138>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d202      	bcs.n	8007eae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007ea8:	2309      	movs	r3, #9
 8007eaa:	617b      	str	r3, [r7, #20]
 8007eac:	e020      	b.n	8007ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	4a21      	ldr	r2, [pc, #132]	@ (8007f38 <USB_SetTurnaroundTime+0x138>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d306      	bcc.n	8007ec4 <USB_SetTurnaroundTime+0xc4>
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	4a20      	ldr	r2, [pc, #128]	@ (8007f3c <USB_SetTurnaroundTime+0x13c>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d802      	bhi.n	8007ec4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007ebe:	2308      	movs	r3, #8
 8007ec0:	617b      	str	r3, [r7, #20]
 8007ec2:	e015      	b.n	8007ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8007f3c <USB_SetTurnaroundTime+0x13c>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d906      	bls.n	8007eda <USB_SetTurnaroundTime+0xda>
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	4a1c      	ldr	r2, [pc, #112]	@ (8007f40 <USB_SetTurnaroundTime+0x140>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d202      	bcs.n	8007eda <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007ed4:	2307      	movs	r3, #7
 8007ed6:	617b      	str	r3, [r7, #20]
 8007ed8:	e00a      	b.n	8007ef0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007eda:	2306      	movs	r3, #6
 8007edc:	617b      	str	r3, [r7, #20]
 8007ede:	e007      	b.n	8007ef0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007ee0:	79fb      	ldrb	r3, [r7, #7]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d102      	bne.n	8007eec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007ee6:	2309      	movs	r3, #9
 8007ee8:	617b      	str	r3, [r7, #20]
 8007eea:	e001      	b.n	8007ef0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007eec:	2309      	movs	r3, #9
 8007eee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	68da      	ldr	r2, [r3, #12]
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	029b      	lsls	r3, r3, #10
 8007f04:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007f08:	431a      	orrs	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	371c      	adds	r7, #28
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	00d8acbf 	.word	0x00d8acbf
 8007f20:	00e4e1c0 	.word	0x00e4e1c0
 8007f24:	00f42400 	.word	0x00f42400
 8007f28:	01067380 	.word	0x01067380
 8007f2c:	011a499f 	.word	0x011a499f
 8007f30:	01312cff 	.word	0x01312cff
 8007f34:	014ca43f 	.word	0x014ca43f
 8007f38:	016e3600 	.word	0x016e3600
 8007f3c:	01a6ab1f 	.word	0x01a6ab1f
 8007f40:	01e84800 	.word	0x01e84800

08007f44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f043 0201 	orr.w	r2, r3, #1
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f023 0201 	bic.w	r2, r3, #1
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f94:	2300      	movs	r3, #0
 8007f96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007fa4:	78fb      	ldrb	r3, [r7, #3]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d115      	bne.n	8007fd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007fb6:	200a      	movs	r0, #10
 8007fb8:	f7f9 fdc2 	bl	8001b40 <HAL_Delay>
      ms += 10U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	330a      	adds	r3, #10
 8007fc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f001 f93f 	bl	8009246 <USB_GetMode>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d01e      	beq.n	800800c <USB_SetCurrentMode+0x84>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2bc7      	cmp	r3, #199	@ 0xc7
 8007fd2:	d9f0      	bls.n	8007fb6 <USB_SetCurrentMode+0x2e>
 8007fd4:	e01a      	b.n	800800c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007fd6:	78fb      	ldrb	r3, [r7, #3]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d115      	bne.n	8008008 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007fe8:	200a      	movs	r0, #10
 8007fea:	f7f9 fda9 	bl	8001b40 <HAL_Delay>
      ms += 10U;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	330a      	adds	r3, #10
 8007ff2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f001 f926 	bl	8009246 <USB_GetMode>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d005      	beq.n	800800c <USB_SetCurrentMode+0x84>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2bc7      	cmp	r3, #199	@ 0xc7
 8008004:	d9f0      	bls.n	8007fe8 <USB_SetCurrentMode+0x60>
 8008006:	e001      	b.n	800800c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e005      	b.n	8008018 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2bc8      	cmp	r3, #200	@ 0xc8
 8008010:	d101      	bne.n	8008016 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e000      	b.n	8008018 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008020:	b084      	sub	sp, #16
 8008022:	b580      	push	{r7, lr}
 8008024:	b086      	sub	sp, #24
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800802e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800803a:	2300      	movs	r3, #0
 800803c:	613b      	str	r3, [r7, #16]
 800803e:	e009      	b.n	8008054 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	3340      	adds	r3, #64	@ 0x40
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	2200      	movs	r2, #0
 800804c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	3301      	adds	r3, #1
 8008052:	613b      	str	r3, [r7, #16]
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	2b0e      	cmp	r3, #14
 8008058:	d9f2      	bls.n	8008040 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800805a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800805e:	2b00      	cmp	r3, #0
 8008060:	d11c      	bne.n	800809c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008070:	f043 0302 	orr.w	r3, r3, #2
 8008074:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800807a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008086:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008092:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	639a      	str	r2, [r3, #56]	@ 0x38
 800809a:	e00b      	b.n	80080b4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080ac:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80080ba:	461a      	mov	r2, r3
 80080bc:	2300      	movs	r3, #0
 80080be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d10d      	bne.n	80080e4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80080c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d104      	bne.n	80080da <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80080d0:	2100      	movs	r1, #0
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f968 	bl	80083a8 <USB_SetDevSpeed>
 80080d8:	e008      	b.n	80080ec <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80080da:	2101      	movs	r1, #1
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f963 	bl	80083a8 <USB_SetDevSpeed>
 80080e2:	e003      	b.n	80080ec <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80080e4:	2103      	movs	r1, #3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f95e 	bl	80083a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80080ec:	2110      	movs	r1, #16
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f8fa 	bl	80082e8 <USB_FlushTxFifo>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d001      	beq.n	80080fe <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f924 	bl	800834c <USB_FlushRxFifo>
 8008104:	4603      	mov	r3, r0
 8008106:	2b00      	cmp	r3, #0
 8008108:	d001      	beq.n	800810e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008114:	461a      	mov	r2, r3
 8008116:	2300      	movs	r3, #0
 8008118:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008120:	461a      	mov	r2, r3
 8008122:	2300      	movs	r3, #0
 8008124:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800812c:	461a      	mov	r2, r3
 800812e:	2300      	movs	r3, #0
 8008130:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008132:	2300      	movs	r3, #0
 8008134:	613b      	str	r3, [r7, #16]
 8008136:	e043      	b.n	80081c0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	015a      	lsls	r2, r3, #5
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	4413      	add	r3, r2
 8008140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800814a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800814e:	d118      	bne.n	8008182 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10a      	bne.n	800816c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	015a      	lsls	r2, r3, #5
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	4413      	add	r3, r2
 800815e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008162:	461a      	mov	r2, r3
 8008164:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008168:	6013      	str	r3, [r2, #0]
 800816a:	e013      	b.n	8008194 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008178:	461a      	mov	r2, r3
 800817a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800817e:	6013      	str	r3, [r2, #0]
 8008180:	e008      	b.n	8008194 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	015a      	lsls	r2, r3, #5
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4413      	add	r3, r2
 800818a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800818e:	461a      	mov	r2, r3
 8008190:	2300      	movs	r3, #0
 8008192:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	015a      	lsls	r2, r3, #5
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4413      	add	r3, r2
 800819c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a0:	461a      	mov	r2, r3
 80081a2:	2300      	movs	r3, #0
 80081a4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081b2:	461a      	mov	r2, r3
 80081b4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80081b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	3301      	adds	r3, #1
 80081be:	613b      	str	r3, [r7, #16]
 80081c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80081c4:	461a      	mov	r2, r3
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d3b5      	bcc.n	8008138 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081cc:	2300      	movs	r3, #0
 80081ce:	613b      	str	r3, [r7, #16]
 80081d0:	e043      	b.n	800825a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081e8:	d118      	bne.n	800821c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10a      	bne.n	8008206 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	015a      	lsls	r2, r3, #5
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4413      	add	r3, r2
 80081f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081fc:	461a      	mov	r2, r3
 80081fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008202:	6013      	str	r3, [r2, #0]
 8008204:	e013      	b.n	800822e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008212:	461a      	mov	r2, r3
 8008214:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008218:	6013      	str	r3, [r2, #0]
 800821a:	e008      	b.n	800822e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008228:	461a      	mov	r2, r3
 800822a:	2300      	movs	r3, #0
 800822c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800823a:	461a      	mov	r2, r3
 800823c:	2300      	movs	r3, #0
 800823e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	4413      	add	r3, r2
 8008248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800824c:	461a      	mov	r2, r3
 800824e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008252:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	3301      	adds	r3, #1
 8008258:	613b      	str	r3, [r7, #16]
 800825a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800825e:	461a      	mov	r2, r3
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	4293      	cmp	r3, r2
 8008264:	d3b5      	bcc.n	80081d2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	68fa      	ldr	r2, [r7, #12]
 8008270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008274:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008278:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008286:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008288:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800828c:	2b00      	cmp	r3, #0
 800828e:	d105      	bne.n	800829c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	f043 0210 	orr.w	r2, r3, #16
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	699a      	ldr	r2, [r3, #24]
 80082a0:	4b10      	ldr	r3, [pc, #64]	@ (80082e4 <USB_DevInit+0x2c4>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80082a8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d005      	beq.n	80082bc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	f043 0208 	orr.w	r2, r3, #8
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80082bc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d107      	bne.n	80082d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	699b      	ldr	r3, [r3, #24]
 80082c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082cc:	f043 0304 	orr.w	r3, r3, #4
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80082d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3718      	adds	r7, #24
 80082da:	46bd      	mov	sp, r7
 80082dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082e0:	b004      	add	sp, #16
 80082e2:	4770      	bx	lr
 80082e4:	803c3800 	.word	0x803c3800

080082e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	3301      	adds	r3, #1
 80082fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008302:	d901      	bls.n	8008308 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e01b      	b.n	8008340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	2b00      	cmp	r3, #0
 800830e:	daf2      	bge.n	80082f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008310:	2300      	movs	r3, #0
 8008312:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	019b      	lsls	r3, r3, #6
 8008318:	f043 0220 	orr.w	r2, r3, #32
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3301      	adds	r3, #1
 8008324:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800832c:	d901      	bls.n	8008332 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e006      	b.n	8008340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	f003 0320 	and.w	r3, r3, #32
 800833a:	2b20      	cmp	r3, #32
 800833c:	d0f0      	beq.n	8008320 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	3301      	adds	r3, #1
 800835c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008364:	d901      	bls.n	800836a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e018      	b.n	800839c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	daf2      	bge.n	8008358 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008372:	2300      	movs	r3, #0
 8008374:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2210      	movs	r2, #16
 800837a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	3301      	adds	r3, #1
 8008380:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008388:	d901      	bls.n	800838e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e006      	b.n	800839c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	f003 0310 	and.w	r3, r3, #16
 8008396:	2b10      	cmp	r3, #16
 8008398:	d0f0      	beq.n	800837c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	78fb      	ldrb	r3, [r7, #3]
 80083c2:	68f9      	ldr	r1, [r7, #12]
 80083c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80083c8:	4313      	orrs	r3, r2
 80083ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80083da:	b480      	push	{r7}
 80083dc:	b087      	sub	sp, #28
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f003 0306 	and.w	r3, r3, #6
 80083f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d102      	bne.n	8008400 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80083fa:	2300      	movs	r3, #0
 80083fc:	75fb      	strb	r3, [r7, #23]
 80083fe:	e00a      	b.n	8008416 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2b02      	cmp	r3, #2
 8008404:	d002      	beq.n	800840c <USB_GetDevSpeed+0x32>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2b06      	cmp	r3, #6
 800840a:	d102      	bne.n	8008412 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800840c:	2302      	movs	r3, #2
 800840e:	75fb      	strb	r3, [r7, #23]
 8008410:	e001      	b.n	8008416 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008412:	230f      	movs	r3, #15
 8008414:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008416:	7dfb      	ldrb	r3, [r7, #23]
}
 8008418:	4618      	mov	r0, r3
 800841a:	371c      	adds	r7, #28
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	785b      	ldrb	r3, [r3, #1]
 800843c:	2b01      	cmp	r3, #1
 800843e:	d13a      	bne.n	80084b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008446:	69da      	ldr	r2, [r3, #28]
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	f003 030f 	and.w	r3, r3, #15
 8008450:	2101      	movs	r1, #1
 8008452:	fa01 f303 	lsl.w	r3, r1, r3
 8008456:	b29b      	uxth	r3, r3
 8008458:	68f9      	ldr	r1, [r7, #12]
 800845a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800845e:	4313      	orrs	r3, r2
 8008460:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4413      	add	r3, r2
 800846a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d155      	bne.n	8008524 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	015a      	lsls	r2, r3, #5
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	4413      	add	r3, r2
 8008480:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	791b      	ldrb	r3, [r3, #4]
 8008492:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008494:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	059b      	lsls	r3, r3, #22
 800849a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800849c:	4313      	orrs	r3, r2
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	0151      	lsls	r1, r2, #5
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	440a      	add	r2, r1
 80084a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084b2:	6013      	str	r3, [r2, #0]
 80084b4:	e036      	b.n	8008524 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084bc:	69da      	ldr	r2, [r3, #28]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	f003 030f 	and.w	r3, r3, #15
 80084c6:	2101      	movs	r1, #1
 80084c8:	fa01 f303 	lsl.w	r3, r1, r3
 80084cc:	041b      	lsls	r3, r3, #16
 80084ce:	68f9      	ldr	r1, [r7, #12]
 80084d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084d4:	4313      	orrs	r3, r2
 80084d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d11a      	bne.n	8008524 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	015a      	lsls	r2, r3, #5
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	4413      	add	r3, r2
 80084f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	791b      	ldrb	r3, [r3, #4]
 8008508:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800850a:	430b      	orrs	r3, r1
 800850c:	4313      	orrs	r3, r2
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	0151      	lsls	r1, r2, #5
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	440a      	add	r2, r1
 8008516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800851a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800851e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008522:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
	...

08008534 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008534:	b480      	push	{r7}
 8008536:	b085      	sub	sp, #20
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	785b      	ldrb	r3, [r3, #1]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d161      	bne.n	8008614 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4413      	add	r3, r2
 8008558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008562:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008566:	d11f      	bne.n	80085a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	4413      	add	r3, r2
 8008570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	0151      	lsls	r1, r2, #5
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	440a      	add	r2, r1
 800857e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008582:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008586:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	0151      	lsls	r1, r2, #5
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	440a      	add	r2, r1
 800859e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085a2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	f003 030f 	and.w	r3, r3, #15
 80085b8:	2101      	movs	r1, #1
 80085ba:	fa01 f303 	lsl.w	r3, r1, r3
 80085be:	b29b      	uxth	r3, r3
 80085c0:	43db      	mvns	r3, r3
 80085c2:	68f9      	ldr	r1, [r7, #12]
 80085c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085c8:	4013      	ands	r3, r2
 80085ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085d2:	69da      	ldr	r2, [r3, #28]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	f003 030f 	and.w	r3, r3, #15
 80085dc:	2101      	movs	r1, #1
 80085de:	fa01 f303 	lsl.w	r3, r1, r3
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	43db      	mvns	r3, r3
 80085e6:	68f9      	ldr	r1, [r7, #12]
 80085e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085ec:	4013      	ands	r3, r2
 80085ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	0159      	lsls	r1, r3, #5
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	440b      	add	r3, r1
 8008606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800860a:	4619      	mov	r1, r3
 800860c:	4b35      	ldr	r3, [pc, #212]	@ (80086e4 <USB_DeactivateEndpoint+0x1b0>)
 800860e:	4013      	ands	r3, r2
 8008610:	600b      	str	r3, [r1, #0]
 8008612:	e060      	b.n	80086d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	4413      	add	r3, r2
 800861c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008626:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800862a:	d11f      	bne.n	800866c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	015a      	lsls	r2, r3, #5
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	4413      	add	r3, r2
 8008634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	0151      	lsls	r1, r2, #5
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	440a      	add	r2, r1
 8008642:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008646:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800864a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	015a      	lsls	r2, r3, #5
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	4413      	add	r3, r2
 8008654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	0151      	lsls	r1, r2, #5
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	440a      	add	r2, r1
 8008662:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008666:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800866a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008672:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	f003 030f 	and.w	r3, r3, #15
 800867c:	2101      	movs	r1, #1
 800867e:	fa01 f303 	lsl.w	r3, r1, r3
 8008682:	041b      	lsls	r3, r3, #16
 8008684:	43db      	mvns	r3, r3
 8008686:	68f9      	ldr	r1, [r7, #12]
 8008688:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800868c:	4013      	ands	r3, r2
 800868e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008696:	69da      	ldr	r2, [r3, #28]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	f003 030f 	and.w	r3, r3, #15
 80086a0:	2101      	movs	r1, #1
 80086a2:	fa01 f303 	lsl.w	r3, r1, r3
 80086a6:	041b      	lsls	r3, r3, #16
 80086a8:	43db      	mvns	r3, r3
 80086aa:	68f9      	ldr	r1, [r7, #12]
 80086ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086b0:	4013      	ands	r3, r2
 80086b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	0159      	lsls	r1, r3, #5
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	440b      	add	r3, r1
 80086ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ce:	4619      	mov	r1, r3
 80086d0:	4b05      	ldr	r3, [pc, #20]	@ (80086e8 <USB_DeactivateEndpoint+0x1b4>)
 80086d2:	4013      	ands	r3, r2
 80086d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	ec337800 	.word	0xec337800
 80086e8:	eff37800 	.word	0xeff37800

080086ec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08a      	sub	sp, #40	@ 0x28
 80086f0:	af02      	add	r7, sp, #8
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	4613      	mov	r3, r2
 80086f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	785b      	ldrb	r3, [r3, #1]
 8008708:	2b01      	cmp	r3, #1
 800870a:	f040 817f 	bne.w	8008a0c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d132      	bne.n	800877c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	015a      	lsls	r2, r3, #5
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	4413      	add	r3, r2
 800871e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	69ba      	ldr	r2, [r7, #24]
 8008726:	0151      	lsls	r1, r2, #5
 8008728:	69fa      	ldr	r2, [r7, #28]
 800872a:	440a      	add	r2, r1
 800872c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008730:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008734:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008738:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	015a      	lsls	r2, r3, #5
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	4413      	add	r3, r2
 8008742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	0151      	lsls	r1, r2, #5
 800874c:	69fa      	ldr	r2, [r7, #28]
 800874e:	440a      	add	r2, r1
 8008750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008754:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008758:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	4413      	add	r3, r2
 8008762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	0151      	lsls	r1, r2, #5
 800876c:	69fa      	ldr	r2, [r7, #28]
 800876e:	440a      	add	r2, r1
 8008770:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008774:	0cdb      	lsrs	r3, r3, #19
 8008776:	04db      	lsls	r3, r3, #19
 8008778:	6113      	str	r3, [r2, #16]
 800877a:	e097      	b.n	80088ac <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	015a      	lsls	r2, r3, #5
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	4413      	add	r3, r2
 8008784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	69ba      	ldr	r2, [r7, #24]
 800878c:	0151      	lsls	r1, r2, #5
 800878e:	69fa      	ldr	r2, [r7, #28]
 8008790:	440a      	add	r2, r1
 8008792:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008796:	0cdb      	lsrs	r3, r3, #19
 8008798:	04db      	lsls	r3, r3, #19
 800879a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800879c:	69bb      	ldr	r3, [r7, #24]
 800879e:	015a      	lsls	r2, r3, #5
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	69ba      	ldr	r2, [r7, #24]
 80087ac:	0151      	lsls	r1, r2, #5
 80087ae:	69fa      	ldr	r2, [r7, #28]
 80087b0:	440a      	add	r2, r1
 80087b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087b6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80087ba:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80087be:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d11a      	bne.n	80087fc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	691a      	ldr	r2, [r3, #16]
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d903      	bls.n	80087da <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	689a      	ldr	r2, [r3, #8]
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	015a      	lsls	r2, r3, #5
 80087de:	69fb      	ldr	r3, [r7, #28]
 80087e0:	4413      	add	r3, r2
 80087e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	69ba      	ldr	r2, [r7, #24]
 80087ea:	0151      	lsls	r1, r2, #5
 80087ec:	69fa      	ldr	r2, [r7, #28]
 80087ee:	440a      	add	r2, r1
 80087f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80087f8:	6113      	str	r3, [r2, #16]
 80087fa:	e044      	b.n	8008886 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	691a      	ldr	r2, [r3, #16]
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	4413      	add	r3, r2
 8008806:	1e5a      	subs	r2, r3, #1
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008810:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	015a      	lsls	r2, r3, #5
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	4413      	add	r3, r2
 800881a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800881e:	691a      	ldr	r2, [r3, #16]
 8008820:	8afb      	ldrh	r3, [r7, #22]
 8008822:	04d9      	lsls	r1, r3, #19
 8008824:	4ba4      	ldr	r3, [pc, #656]	@ (8008ab8 <USB_EPStartXfer+0x3cc>)
 8008826:	400b      	ands	r3, r1
 8008828:	69b9      	ldr	r1, [r7, #24]
 800882a:	0148      	lsls	r0, r1, #5
 800882c:	69f9      	ldr	r1, [r7, #28]
 800882e:	4401      	add	r1, r0
 8008830:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008834:	4313      	orrs	r3, r2
 8008836:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	791b      	ldrb	r3, [r3, #4]
 800883c:	2b01      	cmp	r3, #1
 800883e:	d122      	bne.n	8008886 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	4413      	add	r3, r2
 8008848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	69ba      	ldr	r2, [r7, #24]
 8008850:	0151      	lsls	r1, r2, #5
 8008852:	69fa      	ldr	r2, [r7, #28]
 8008854:	440a      	add	r2, r1
 8008856:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800885a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800885e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	4413      	add	r3, r2
 8008868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800886c:	691a      	ldr	r2, [r3, #16]
 800886e:	8afb      	ldrh	r3, [r7, #22]
 8008870:	075b      	lsls	r3, r3, #29
 8008872:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008876:	69b9      	ldr	r1, [r7, #24]
 8008878:	0148      	lsls	r0, r1, #5
 800887a:	69f9      	ldr	r1, [r7, #28]
 800887c:	4401      	add	r1, r0
 800887e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008882:	4313      	orrs	r3, r2
 8008884:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	4413      	add	r3, r2
 800888e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008892:	691a      	ldr	r2, [r3, #16]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800889c:	69b9      	ldr	r1, [r7, #24]
 800889e:	0148      	lsls	r0, r1, #5
 80088a0:	69f9      	ldr	r1, [r7, #28]
 80088a2:	4401      	add	r1, r0
 80088a4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80088a8:	4313      	orrs	r3, r2
 80088aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80088ac:	79fb      	ldrb	r3, [r7, #7]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d14b      	bne.n	800894a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	69db      	ldr	r3, [r3, #28]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d009      	beq.n	80088ce <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088c6:	461a      	mov	r2, r3
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	69db      	ldr	r3, [r3, #28]
 80088cc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	791b      	ldrb	r3, [r3, #4]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d128      	bne.n	8008928 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d110      	bne.n	8008908 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	015a      	lsls	r2, r3, #5
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	4413      	add	r3, r2
 80088ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	69ba      	ldr	r2, [r7, #24]
 80088f6:	0151      	lsls	r1, r2, #5
 80088f8:	69fa      	ldr	r2, [r7, #28]
 80088fa:	440a      	add	r2, r1
 80088fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008900:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008904:	6013      	str	r3, [r2, #0]
 8008906:	e00f      	b.n	8008928 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	4413      	add	r3, r2
 8008910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	69ba      	ldr	r2, [r7, #24]
 8008918:	0151      	lsls	r1, r2, #5
 800891a:	69fa      	ldr	r2, [r7, #28]
 800891c:	440a      	add	r2, r1
 800891e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008926:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008928:	69bb      	ldr	r3, [r7, #24]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	69ba      	ldr	r2, [r7, #24]
 8008938:	0151      	lsls	r1, r2, #5
 800893a:	69fa      	ldr	r2, [r7, #28]
 800893c:	440a      	add	r2, r1
 800893e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008942:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008946:	6013      	str	r3, [r2, #0]
 8008948:	e166      	b.n	8008c18 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	4413      	add	r3, r2
 8008952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	0151      	lsls	r1, r2, #5
 800895c:	69fa      	ldr	r2, [r7, #28]
 800895e:	440a      	add	r2, r1
 8008960:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008964:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008968:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	791b      	ldrb	r3, [r3, #4]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d015      	beq.n	800899e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	f000 814e 	beq.w	8008c18 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	f003 030f 	and.w	r3, r3, #15
 800898c:	2101      	movs	r1, #1
 800898e:	fa01 f303 	lsl.w	r3, r1, r3
 8008992:	69f9      	ldr	r1, [r7, #28]
 8008994:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008998:	4313      	orrs	r3, r2
 800899a:	634b      	str	r3, [r1, #52]	@ 0x34
 800899c:	e13c      	b.n	8008c18 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d110      	bne.n	80089d0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	69ba      	ldr	r2, [r7, #24]
 80089be:	0151      	lsls	r1, r2, #5
 80089c0:	69fa      	ldr	r2, [r7, #28]
 80089c2:	440a      	add	r2, r1
 80089c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80089cc:	6013      	str	r3, [r2, #0]
 80089ce:	e00f      	b.n	80089f0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	69ba      	ldr	r2, [r7, #24]
 80089e0:	0151      	lsls	r1, r2, #5
 80089e2:	69fa      	ldr	r2, [r7, #28]
 80089e4:	440a      	add	r2, r1
 80089e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089ee:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	68d9      	ldr	r1, [r3, #12]
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	781a      	ldrb	r2, [r3, #0]
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	b298      	uxth	r0, r3
 80089fe:	79fb      	ldrb	r3, [r7, #7]
 8008a00:	9300      	str	r3, [sp, #0]
 8008a02:	4603      	mov	r3, r0
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 f9b9 	bl	8008d7c <USB_WritePacket>
 8008a0a:	e105      	b.n	8008c18 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	015a      	lsls	r2, r3, #5
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	4413      	add	r3, r2
 8008a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a18:	691b      	ldr	r3, [r3, #16]
 8008a1a:	69ba      	ldr	r2, [r7, #24]
 8008a1c:	0151      	lsls	r1, r2, #5
 8008a1e:	69fa      	ldr	r2, [r7, #28]
 8008a20:	440a      	add	r2, r1
 8008a22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a26:	0cdb      	lsrs	r3, r3, #19
 8008a28:	04db      	lsls	r3, r3, #19
 8008a2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	015a      	lsls	r2, r3, #5
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	4413      	add	r3, r2
 8008a34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	69ba      	ldr	r2, [r7, #24]
 8008a3c:	0151      	lsls	r1, r2, #5
 8008a3e:	69fa      	ldr	r2, [r7, #28]
 8008a40:	440a      	add	r2, r1
 8008a42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a46:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008a4a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008a4e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d132      	bne.n	8008abc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d003      	beq.n	8008a66 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	689a      	ldr	r2, [r3, #8]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	689a      	ldr	r2, [r3, #8]
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	015a      	lsls	r2, r3, #5
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	4413      	add	r3, r2
 8008a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a7a:	691a      	ldr	r2, [r3, #16]
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	6a1b      	ldr	r3, [r3, #32]
 8008a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a84:	69b9      	ldr	r1, [r7, #24]
 8008a86:	0148      	lsls	r0, r1, #5
 8008a88:	69f9      	ldr	r1, [r7, #28]
 8008a8a:	4401      	add	r1, r0
 8008a8c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a90:	4313      	orrs	r3, r2
 8008a92:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	69ba      	ldr	r2, [r7, #24]
 8008aa4:	0151      	lsls	r1, r2, #5
 8008aa6:	69fa      	ldr	r2, [r7, #28]
 8008aa8:	440a      	add	r2, r1
 8008aaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008aae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ab2:	6113      	str	r3, [r2, #16]
 8008ab4:	e062      	b.n	8008b7c <USB_EPStartXfer+0x490>
 8008ab6:	bf00      	nop
 8008ab8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	691b      	ldr	r3, [r3, #16]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d123      	bne.n	8008b0c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	015a      	lsls	r2, r3, #5
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	4413      	add	r3, r2
 8008acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ad0:	691a      	ldr	r2, [r3, #16]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ada:	69b9      	ldr	r1, [r7, #24]
 8008adc:	0148      	lsls	r0, r1, #5
 8008ade:	69f9      	ldr	r1, [r7, #28]
 8008ae0:	4401      	add	r1, r0
 8008ae2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	015a      	lsls	r2, r3, #5
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	69ba      	ldr	r2, [r7, #24]
 8008afa:	0151      	lsls	r1, r2, #5
 8008afc:	69fa      	ldr	r2, [r7, #28]
 8008afe:	440a      	add	r2, r1
 8008b00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b08:	6113      	str	r3, [r2, #16]
 8008b0a:	e037      	b.n	8008b7c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	691a      	ldr	r2, [r3, #16]
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	4413      	add	r3, r2
 8008b16:	1e5a      	subs	r2, r3, #1
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b20:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	8afa      	ldrh	r2, [r7, #22]
 8008b28:	fb03 f202 	mul.w	r2, r3, r2
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b3c:	691a      	ldr	r2, [r3, #16]
 8008b3e:	8afb      	ldrh	r3, [r7, #22]
 8008b40:	04d9      	lsls	r1, r3, #19
 8008b42:	4b38      	ldr	r3, [pc, #224]	@ (8008c24 <USB_EPStartXfer+0x538>)
 8008b44:	400b      	ands	r3, r1
 8008b46:	69b9      	ldr	r1, [r7, #24]
 8008b48:	0148      	lsls	r0, r1, #5
 8008b4a:	69f9      	ldr	r1, [r7, #28]
 8008b4c:	4401      	add	r1, r0
 8008b4e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b52:	4313      	orrs	r3, r2
 8008b54:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	015a      	lsls	r2, r3, #5
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b62:	691a      	ldr	r2, [r3, #16]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	6a1b      	ldr	r3, [r3, #32]
 8008b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b6c:	69b9      	ldr	r1, [r7, #24]
 8008b6e:	0148      	lsls	r0, r1, #5
 8008b70:	69f9      	ldr	r1, [r7, #28]
 8008b72:	4401      	add	r1, r0
 8008b74:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008b7c:	79fb      	ldrb	r3, [r7, #7]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d10d      	bne.n	8008b9e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d009      	beq.n	8008b9e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	68d9      	ldr	r1, [r3, #12]
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b9a:	460a      	mov	r2, r1
 8008b9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	791b      	ldrb	r3, [r3, #4]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d128      	bne.n	8008bf8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d110      	bne.n	8008bd8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	0151      	lsls	r1, r2, #5
 8008bc8:	69fa      	ldr	r2, [r7, #28]
 8008bca:	440a      	add	r2, r1
 8008bcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bd0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	e00f      	b.n	8008bf8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	015a      	lsls	r2, r3, #5
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	4413      	add	r3, r2
 8008be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	69ba      	ldr	r2, [r7, #24]
 8008be8:	0151      	lsls	r1, r2, #5
 8008bea:	69fa      	ldr	r2, [r7, #28]
 8008bec:	440a      	add	r2, r1
 8008bee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bf6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	015a      	lsls	r2, r3, #5
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	4413      	add	r3, r2
 8008c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	69ba      	ldr	r2, [r7, #24]
 8008c08:	0151      	lsls	r1, r2, #5
 8008c0a:	69fa      	ldr	r2, [r7, #28]
 8008c0c:	440a      	add	r2, r1
 8008c0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c12:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008c16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3720      	adds	r7, #32
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	1ff80000 	.word	0x1ff80000

08008c28 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b087      	sub	sp, #28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c32:	2300      	movs	r3, #0
 8008c34:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	785b      	ldrb	r3, [r3, #1]
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d14a      	bne.n	8008cdc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c5e:	f040 8086 	bne.w	8008d6e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	015a      	lsls	r2, r3, #5
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	683a      	ldr	r2, [r7, #0]
 8008c74:	7812      	ldrb	r2, [r2, #0]
 8008c76:	0151      	lsls	r1, r2, #5
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	440a      	add	r2, r1
 8008c7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008c84:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	015a      	lsls	r2, r3, #5
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	683a      	ldr	r2, [r7, #0]
 8008c98:	7812      	ldrb	r2, [r2, #0]
 8008c9a:	0151      	lsls	r1, r2, #5
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	440a      	add	r2, r1
 8008ca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ca4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ca8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	3301      	adds	r3, #1
 8008cae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d902      	bls.n	8008cc0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	75fb      	strb	r3, [r7, #23]
          break;
 8008cbe:	e056      	b.n	8008d6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cd8:	d0e7      	beq.n	8008caa <USB_EPStopXfer+0x82>
 8008cda:	e048      	b.n	8008d6e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cf4:	d13b      	bne.n	8008d6e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	015a      	lsls	r2, r3, #5
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	4413      	add	r3, r2
 8008d00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	7812      	ldrb	r2, [r2, #0]
 8008d0a:	0151      	lsls	r1, r2, #5
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	440a      	add	r2, r1
 8008d10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d14:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d18:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	015a      	lsls	r2, r3, #5
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	683a      	ldr	r2, [r7, #0]
 8008d2c:	7812      	ldrb	r2, [r2, #0]
 8008d2e:	0151      	lsls	r1, r2, #5
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	440a      	add	r2, r1
 8008d34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d3c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	3301      	adds	r3, #1
 8008d42:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d902      	bls.n	8008d54 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	75fb      	strb	r3, [r7, #23]
          break;
 8008d52:	e00c      	b.n	8008d6e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	015a      	lsls	r2, r3, #5
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d6c:	d0e7      	beq.n	8008d3e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	371c      	adds	r7, #28
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b089      	sub	sp, #36	@ 0x24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	4611      	mov	r1, r2
 8008d88:	461a      	mov	r2, r3
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	71fb      	strb	r3, [r7, #7]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008d9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d123      	bne.n	8008dea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008da2:	88bb      	ldrh	r3, [r7, #4]
 8008da4:	3303      	adds	r3, #3
 8008da6:	089b      	lsrs	r3, r3, #2
 8008da8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008daa:	2300      	movs	r3, #0
 8008dac:	61bb      	str	r3, [r7, #24]
 8008dae:	e018      	b.n	8008de2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008db0:	79fb      	ldrb	r3, [r7, #7]
 8008db2:	031a      	lsls	r2, r3, #12
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	4413      	add	r3, r2
 8008db8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ddc:	69bb      	ldr	r3, [r7, #24]
 8008dde:	3301      	adds	r3, #1
 8008de0:	61bb      	str	r3, [r7, #24]
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d3e2      	bcc.n	8008db0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008dea:	2300      	movs	r3, #0
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3724      	adds	r7, #36	@ 0x24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b08b      	sub	sp, #44	@ 0x2c
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	4613      	mov	r3, r2
 8008e04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e0e:	88fb      	ldrh	r3, [r7, #6]
 8008e10:	089b      	lsrs	r3, r3, #2
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e16:	88fb      	ldrh	r3, [r7, #6]
 8008e18:	f003 0303 	and.w	r3, r3, #3
 8008e1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e1e:	2300      	movs	r3, #0
 8008e20:	623b      	str	r3, [r7, #32]
 8008e22:	e014      	b.n	8008e4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e32:	3301      	adds	r3, #1
 8008e34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e38:	3301      	adds	r3, #1
 8008e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3e:	3301      	adds	r3, #1
 8008e40:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e44:	3301      	adds	r3, #1
 8008e46:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008e48:	6a3b      	ldr	r3, [r7, #32]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	623b      	str	r3, [r7, #32]
 8008e4e:	6a3a      	ldr	r2, [r7, #32]
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d3e6      	bcc.n	8008e24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e56:	8bfb      	ldrh	r3, [r7, #30]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d01e      	beq.n	8008e9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e66:	461a      	mov	r2, r3
 8008e68:	f107 0310 	add.w	r3, r7, #16
 8008e6c:	6812      	ldr	r2, [r2, #0]
 8008e6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	6a3b      	ldr	r3, [r7, #32]
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	00db      	lsls	r3, r3, #3
 8008e78:	fa22 f303 	lsr.w	r3, r2, r3
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e80:	701a      	strb	r2, [r3, #0]
      i++;
 8008e82:	6a3b      	ldr	r3, [r7, #32]
 8008e84:	3301      	adds	r3, #1
 8008e86:	623b      	str	r3, [r7, #32]
      pDest++;
 8008e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008e8e:	8bfb      	ldrh	r3, [r7, #30]
 8008e90:	3b01      	subs	r3, #1
 8008e92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008e94:	8bfb      	ldrh	r3, [r7, #30]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d1ea      	bne.n	8008e70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	372c      	adds	r7, #44	@ 0x2c
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	785b      	ldrb	r3, [r3, #1]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d12c      	bne.n	8008f1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	015a      	lsls	r2, r3, #5
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	4413      	add	r3, r2
 8008ecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	db12      	blt.n	8008efc <USB_EPSetStall+0x54>
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00f      	beq.n	8008efc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	0151      	lsls	r1, r2, #5
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	440a      	add	r2, r1
 8008ef2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ef6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008efa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	015a      	lsls	r2, r3, #5
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	4413      	add	r3, r2
 8008f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	0151      	lsls	r1, r2, #5
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	440a      	add	r2, r1
 8008f12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f1a:	6013      	str	r3, [r2, #0]
 8008f1c:	e02b      	b.n	8008f76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	015a      	lsls	r2, r3, #5
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	4413      	add	r3, r2
 8008f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	db12      	blt.n	8008f56 <USB_EPSetStall+0xae>
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00f      	beq.n	8008f56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	015a      	lsls	r2, r3, #5
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	0151      	lsls	r1, r2, #5
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	440a      	add	r2, r1
 8008f4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	015a      	lsls	r2, r3, #5
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	0151      	lsls	r1, r2, #5
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	440a      	add	r2, r1
 8008f6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f70:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3714      	adds	r7, #20
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr

08008f84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b085      	sub	sp, #20
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	785b      	ldrb	r3, [r3, #1]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d128      	bne.n	8008ff2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	015a      	lsls	r2, r3, #5
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	0151      	lsls	r1, r2, #5
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	440a      	add	r2, r1
 8008fb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008fbe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	791b      	ldrb	r3, [r3, #4]
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	d003      	beq.n	8008fd0 <USB_EPClearStall+0x4c>
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	791b      	ldrb	r3, [r3, #4]
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d138      	bne.n	8009042 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	015a      	lsls	r2, r3, #5
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	0151      	lsls	r1, r2, #5
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	440a      	add	r2, r1
 8008fe6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	e027      	b.n	8009042 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	015a      	lsls	r2, r3, #5
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68ba      	ldr	r2, [r7, #8]
 8009002:	0151      	lsls	r1, r2, #5
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	440a      	add	r2, r1
 8009008:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800900c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009010:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	791b      	ldrb	r3, [r3, #4]
 8009016:	2b03      	cmp	r3, #3
 8009018:	d003      	beq.n	8009022 <USB_EPClearStall+0x9e>
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	791b      	ldrb	r3, [r3, #4]
 800901e:	2b02      	cmp	r3, #2
 8009020:	d10f      	bne.n	8009042 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	015a      	lsls	r2, r3, #5
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	4413      	add	r3, r2
 800902a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	0151      	lsls	r1, r2, #5
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	440a      	add	r2, r1
 8009038:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800903c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009040:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3714      	adds	r7, #20
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	460b      	mov	r3, r1
 800905a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800906e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009072:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	78fb      	ldrb	r3, [r7, #3]
 800907e:	011b      	lsls	r3, r3, #4
 8009080:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009084:	68f9      	ldr	r1, [r7, #12]
 8009086:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800908a:	4313      	orrs	r3, r2
 800908c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800908e:	2300      	movs	r3, #0
}
 8009090:	4618      	mov	r0, r3
 8009092:	3714      	adds	r7, #20
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68fa      	ldr	r2, [r7, #12]
 80090b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80090b6:	f023 0303 	bic.w	r3, r3, #3
 80090ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090ca:	f023 0302 	bic.w	r3, r3, #2
 80090ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090d0:	2300      	movs	r3, #0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3714      	adds	r7, #20
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr

080090de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80090de:	b480      	push	{r7}
 80090e0:	b085      	sub	sp, #20
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80090f8:	f023 0303 	bic.w	r3, r3, #3
 80090fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	68fa      	ldr	r2, [r7, #12]
 8009108:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800910c:	f043 0302 	orr.w	r3, r3, #2
 8009110:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3714      	adds	r7, #20
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	699b      	ldr	r3, [r3, #24]
 8009132:	68fa      	ldr	r2, [r7, #12]
 8009134:	4013      	ands	r3, r2
 8009136:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009138:	68fb      	ldr	r3, [r7, #12]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009146:	b480      	push	{r7}
 8009148:	b085      	sub	sp, #20
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009158:	699b      	ldr	r3, [r3, #24]
 800915a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	68ba      	ldr	r2, [r7, #8]
 8009166:	4013      	ands	r3, r2
 8009168:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	0c1b      	lsrs	r3, r3, #16
}
 800916e:	4618      	mov	r0, r3
 8009170:	3714      	adds	r7, #20
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800917a:	b480      	push	{r7}
 800917c:	b085      	sub	sp, #20
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800918c:	699b      	ldr	r3, [r3, #24]
 800918e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009196:	69db      	ldr	r3, [r3, #28]
 8009198:	68ba      	ldr	r2, [r7, #8]
 800919a:	4013      	ands	r3, r2
 800919c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	b29b      	uxth	r3, r3
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3714      	adds	r7, #20
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr

080091ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091ae:	b480      	push	{r7}
 80091b0:	b085      	sub	sp, #20
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	460b      	mov	r3, r1
 80091b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80091be:	78fb      	ldrb	r3, [r7, #3]
 80091c0:	015a      	lsls	r2, r3, #5
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	4413      	add	r3, r2
 80091c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091d4:	695b      	ldr	r3, [r3, #20]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	4013      	ands	r3, r2
 80091da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80091dc:	68bb      	ldr	r3, [r7, #8]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3714      	adds	r7, #20
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr

080091ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091ea:	b480      	push	{r7}
 80091ec:	b087      	sub	sp, #28
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	460b      	mov	r3, r1
 80091f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009200:	691b      	ldr	r3, [r3, #16]
 8009202:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800920a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800920c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800920e:	78fb      	ldrb	r3, [r7, #3]
 8009210:	f003 030f 	and.w	r3, r3, #15
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	fa22 f303 	lsr.w	r3, r2, r3
 800921a:	01db      	lsls	r3, r3, #7
 800921c:	b2db      	uxtb	r3, r3
 800921e:	693a      	ldr	r2, [r7, #16]
 8009220:	4313      	orrs	r3, r2
 8009222:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009224:	78fb      	ldrb	r3, [r7, #3]
 8009226:	015a      	lsls	r2, r3, #5
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	4413      	add	r3, r2
 800922c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	4013      	ands	r3, r2
 8009236:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009238:	68bb      	ldr	r3, [r7, #8]
}
 800923a:	4618      	mov	r0, r3
 800923c:	371c      	adds	r7, #28
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr

08009246 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009246:	b480      	push	{r7}
 8009248:	b083      	sub	sp, #12
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	695b      	ldr	r3, [r3, #20]
 8009252:	f003 0301 	and.w	r3, r3, #1
}
 8009256:	4618      	mov	r0, r3
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009262:	b480      	push	{r7}
 8009264:	b085      	sub	sp, #20
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68fa      	ldr	r2, [r7, #12]
 8009278:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800927c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009280:	f023 0307 	bic.w	r3, r3, #7
 8009284:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009298:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800929a:	2300      	movs	r3, #0
}
 800929c:	4618      	mov	r0, r3
 800929e:	3714      	adds	r7, #20
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b087      	sub	sp, #28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	460b      	mov	r3, r1
 80092b2:	607a      	str	r2, [r7, #4]
 80092b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	333c      	adds	r3, #60	@ 0x3c
 80092be:	3304      	adds	r3, #4
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	4a26      	ldr	r2, [pc, #152]	@ (8009360 <USB_EP0_OutStart+0xb8>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d90a      	bls.n	80092e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092dc:	d101      	bne.n	80092e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	e037      	b.n	8009352 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092e8:	461a      	mov	r2, r3
 80092ea:	2300      	movs	r3, #0
 80092ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80092fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009310:	f043 0318 	orr.w	r3, r3, #24
 8009314:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009324:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009328:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800932a:	7afb      	ldrb	r3, [r7, #11]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d10f      	bne.n	8009350 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009336:	461a      	mov	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800934a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800934e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	371c      	adds	r7, #28
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	4f54300a 	.word	0x4f54300a

08009364 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800936c:	2300      	movs	r3, #0
 800936e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	3301      	adds	r3, #1
 8009374:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800937c:	d901      	bls.n	8009382 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800937e:	2303      	movs	r3, #3
 8009380:	e022      	b.n	80093c8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	daf2      	bge.n	8009370 <USB_CoreReset+0xc>

  count = 10U;
 800938a:	230a      	movs	r3, #10
 800938c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800938e:	e002      	b.n	8009396 <USB_CoreReset+0x32>
  {
    count--;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	3b01      	subs	r3, #1
 8009394:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1f9      	bne.n	8009390 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	f043 0201 	orr.w	r2, r3, #1
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	3301      	adds	r3, #1
 80093ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093b4:	d901      	bls.n	80093ba <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80093b6:	2303      	movs	r3, #3
 80093b8:	e006      	b.n	80093c8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	f003 0301 	and.w	r3, r3, #1
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d0f0      	beq.n	80093a8 <USB_CoreReset+0x44>

  return HAL_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3714      	adds	r7, #20
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	460b      	mov	r3, r1
 80093de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80093e0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80093e4:	f002 fd1e 	bl	800be24 <USBD_static_malloc>
 80093e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d109      	bne.n	8009404 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	32b0      	adds	r2, #176	@ 0xb0
 80093fa:	2100      	movs	r1, #0
 80093fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009400:	2302      	movs	r3, #2
 8009402:	e0d4      	b.n	80095ae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009404:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009408:	2100      	movs	r1, #0
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f002 fd4e 	bl	800beac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	32b0      	adds	r2, #176	@ 0xb0
 800941a:	68f9      	ldr	r1, [r7, #12]
 800941c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	32b0      	adds	r2, #176	@ 0xb0
 800942a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	7c1b      	ldrb	r3, [r3, #16]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d138      	bne.n	80094ae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800943c:	4b5e      	ldr	r3, [pc, #376]	@ (80095b8 <USBD_CDC_Init+0x1e4>)
 800943e:	7819      	ldrb	r1, [r3, #0]
 8009440:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009444:	2202      	movs	r2, #2
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f002 fbc9 	bl	800bbde <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800944c:	4b5a      	ldr	r3, [pc, #360]	@ (80095b8 <USBD_CDC_Init+0x1e4>)
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	f003 020f 	and.w	r2, r3, #15
 8009454:	6879      	ldr	r1, [r7, #4]
 8009456:	4613      	mov	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	440b      	add	r3, r1
 8009460:	3323      	adds	r3, #35	@ 0x23
 8009462:	2201      	movs	r2, #1
 8009464:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009466:	4b55      	ldr	r3, [pc, #340]	@ (80095bc <USBD_CDC_Init+0x1e8>)
 8009468:	7819      	ldrb	r1, [r3, #0]
 800946a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800946e:	2202      	movs	r2, #2
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f002 fbb4 	bl	800bbde <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009476:	4b51      	ldr	r3, [pc, #324]	@ (80095bc <USBD_CDC_Init+0x1e8>)
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	f003 020f 	and.w	r2, r3, #15
 800947e:	6879      	ldr	r1, [r7, #4]
 8009480:	4613      	mov	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	440b      	add	r3, r1
 800948a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800948e:	2201      	movs	r2, #1
 8009490:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009492:	4b4b      	ldr	r3, [pc, #300]	@ (80095c0 <USBD_CDC_Init+0x1ec>)
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	f003 020f 	and.w	r2, r3, #15
 800949a:	6879      	ldr	r1, [r7, #4]
 800949c:	4613      	mov	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4413      	add	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	440b      	add	r3, r1
 80094a6:	331c      	adds	r3, #28
 80094a8:	2210      	movs	r2, #16
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	e035      	b.n	800951a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80094ae:	4b42      	ldr	r3, [pc, #264]	@ (80095b8 <USBD_CDC_Init+0x1e4>)
 80094b0:	7819      	ldrb	r1, [r3, #0]
 80094b2:	2340      	movs	r3, #64	@ 0x40
 80094b4:	2202      	movs	r2, #2
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f002 fb91 	bl	800bbde <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80094bc:	4b3e      	ldr	r3, [pc, #248]	@ (80095b8 <USBD_CDC_Init+0x1e4>)
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	f003 020f 	and.w	r2, r3, #15
 80094c4:	6879      	ldr	r1, [r7, #4]
 80094c6:	4613      	mov	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	440b      	add	r3, r1
 80094d0:	3323      	adds	r3, #35	@ 0x23
 80094d2:	2201      	movs	r2, #1
 80094d4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80094d6:	4b39      	ldr	r3, [pc, #228]	@ (80095bc <USBD_CDC_Init+0x1e8>)
 80094d8:	7819      	ldrb	r1, [r3, #0]
 80094da:	2340      	movs	r3, #64	@ 0x40
 80094dc:	2202      	movs	r2, #2
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f002 fb7d 	bl	800bbde <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80094e4:	4b35      	ldr	r3, [pc, #212]	@ (80095bc <USBD_CDC_Init+0x1e8>)
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	f003 020f 	and.w	r2, r3, #15
 80094ec:	6879      	ldr	r1, [r7, #4]
 80094ee:	4613      	mov	r3, r2
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	440b      	add	r3, r1
 80094f8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80094fc:	2201      	movs	r2, #1
 80094fe:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009500:	4b2f      	ldr	r3, [pc, #188]	@ (80095c0 <USBD_CDC_Init+0x1ec>)
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	f003 020f 	and.w	r2, r3, #15
 8009508:	6879      	ldr	r1, [r7, #4]
 800950a:	4613      	mov	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4413      	add	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	440b      	add	r3, r1
 8009514:	331c      	adds	r3, #28
 8009516:	2210      	movs	r2, #16
 8009518:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800951a:	4b29      	ldr	r3, [pc, #164]	@ (80095c0 <USBD_CDC_Init+0x1ec>)
 800951c:	7819      	ldrb	r1, [r3, #0]
 800951e:	2308      	movs	r3, #8
 8009520:	2203      	movs	r2, #3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f002 fb5b 	bl	800bbde <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009528:	4b25      	ldr	r3, [pc, #148]	@ (80095c0 <USBD_CDC_Init+0x1ec>)
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	f003 020f 	and.w	r2, r3, #15
 8009530:	6879      	ldr	r1, [r7, #4]
 8009532:	4613      	mov	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4413      	add	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	440b      	add	r3, r1
 800953c:	3323      	adds	r3, #35	@ 0x23
 800953e:	2201      	movs	r2, #1
 8009540:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	33b0      	adds	r3, #176	@ 0xb0
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4413      	add	r3, r2
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009574:	2b00      	cmp	r3, #0
 8009576:	d101      	bne.n	800957c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009578:	2302      	movs	r3, #2
 800957a:	e018      	b.n	80095ae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	7c1b      	ldrb	r3, [r3, #16]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d10a      	bne.n	800959a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009584:	4b0d      	ldr	r3, [pc, #52]	@ (80095bc <USBD_CDC_Init+0x1e8>)
 8009586:	7819      	ldrb	r1, [r3, #0]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800958e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f002 fc12 	bl	800bdbc <USBD_LL_PrepareReceive>
 8009598:	e008      	b.n	80095ac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800959a:	4b08      	ldr	r3, [pc, #32]	@ (80095bc <USBD_CDC_Init+0x1e8>)
 800959c:	7819      	ldrb	r1, [r3, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80095a4:	2340      	movs	r3, #64	@ 0x40
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f002 fc08 	bl	800bdbc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	200000bf 	.word	0x200000bf
 80095bc:	200000c0 	.word	0x200000c0
 80095c0:	200000c1 	.word	0x200000c1

080095c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80095d0:	4b3a      	ldr	r3, [pc, #232]	@ (80096bc <USBD_CDC_DeInit+0xf8>)
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	4619      	mov	r1, r3
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f002 fb27 	bl	800bc2a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80095dc:	4b37      	ldr	r3, [pc, #220]	@ (80096bc <USBD_CDC_DeInit+0xf8>)
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	f003 020f 	and.w	r2, r3, #15
 80095e4:	6879      	ldr	r1, [r7, #4]
 80095e6:	4613      	mov	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	440b      	add	r3, r1
 80095f0:	3323      	adds	r3, #35	@ 0x23
 80095f2:	2200      	movs	r2, #0
 80095f4:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80095f6:	4b32      	ldr	r3, [pc, #200]	@ (80096c0 <USBD_CDC_DeInit+0xfc>)
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	4619      	mov	r1, r3
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f002 fb14 	bl	800bc2a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009602:	4b2f      	ldr	r3, [pc, #188]	@ (80096c0 <USBD_CDC_DeInit+0xfc>)
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	f003 020f 	and.w	r2, r3, #15
 800960a:	6879      	ldr	r1, [r7, #4]
 800960c:	4613      	mov	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	4413      	add	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	440b      	add	r3, r1
 8009616:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800961a:	2200      	movs	r2, #0
 800961c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800961e:	4b29      	ldr	r3, [pc, #164]	@ (80096c4 <USBD_CDC_DeInit+0x100>)
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	4619      	mov	r1, r3
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f002 fb00 	bl	800bc2a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800962a:	4b26      	ldr	r3, [pc, #152]	@ (80096c4 <USBD_CDC_DeInit+0x100>)
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	f003 020f 	and.w	r2, r3, #15
 8009632:	6879      	ldr	r1, [r7, #4]
 8009634:	4613      	mov	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	4413      	add	r3, r2
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	440b      	add	r3, r1
 800963e:	3323      	adds	r3, #35	@ 0x23
 8009640:	2200      	movs	r2, #0
 8009642:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009644:	4b1f      	ldr	r3, [pc, #124]	@ (80096c4 <USBD_CDC_DeInit+0x100>)
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	f003 020f 	and.w	r2, r3, #15
 800964c:	6879      	ldr	r1, [r7, #4]
 800964e:	4613      	mov	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	4413      	add	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	440b      	add	r3, r1
 8009658:	331c      	adds	r3, #28
 800965a:	2200      	movs	r2, #0
 800965c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	32b0      	adds	r2, #176	@ 0xb0
 8009668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d01f      	beq.n	80096b0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	33b0      	adds	r3, #176	@ 0xb0
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4413      	add	r3, r2
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	32b0      	adds	r2, #176	@ 0xb0
 800968e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009692:	4618      	mov	r0, r3
 8009694:	f002 fbd4 	bl	800be40 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	32b0      	adds	r2, #176	@ 0xb0
 80096a2:	2100      	movs	r1, #0
 80096a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	200000bf 	.word	0x200000bf
 80096c0:	200000c0 	.word	0x200000c0
 80096c4:	200000c1 	.word	0x200000c1

080096c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	32b0      	adds	r2, #176	@ 0xb0
 80096dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80096e2:	2300      	movs	r3, #0
 80096e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80096e6:	2300      	movs	r3, #0
 80096e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d101      	bne.n	80096f8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80096f4:	2303      	movs	r3, #3
 80096f6:	e0bf      	b.n	8009878 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009700:	2b00      	cmp	r3, #0
 8009702:	d050      	beq.n	80097a6 <USBD_CDC_Setup+0xde>
 8009704:	2b20      	cmp	r3, #32
 8009706:	f040 80af 	bne.w	8009868 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	88db      	ldrh	r3, [r3, #6]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d03a      	beq.n	8009788 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	b25b      	sxtb	r3, r3
 8009718:	2b00      	cmp	r3, #0
 800971a:	da1b      	bge.n	8009754 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	33b0      	adds	r3, #176	@ 0xb0
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	4413      	add	r3, r2
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	683a      	ldr	r2, [r7, #0]
 8009730:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009732:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009734:	683a      	ldr	r2, [r7, #0]
 8009736:	88d2      	ldrh	r2, [r2, #6]
 8009738:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	88db      	ldrh	r3, [r3, #6]
 800973e:	2b07      	cmp	r3, #7
 8009740:	bf28      	it	cs
 8009742:	2307      	movcs	r3, #7
 8009744:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	89fa      	ldrh	r2, [r7, #14]
 800974a:	4619      	mov	r1, r3
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f001 fda9 	bl	800b2a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009752:	e090      	b.n	8009876 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	785a      	ldrb	r2, [r3, #1]
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	88db      	ldrh	r3, [r3, #6]
 8009762:	2b3f      	cmp	r3, #63	@ 0x3f
 8009764:	d803      	bhi.n	800976e <USBD_CDC_Setup+0xa6>
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	88db      	ldrh	r3, [r3, #6]
 800976a:	b2da      	uxtb	r2, r3
 800976c:	e000      	b.n	8009770 <USBD_CDC_Setup+0xa8>
 800976e:	2240      	movs	r2, #64	@ 0x40
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009776:	6939      	ldr	r1, [r7, #16]
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800977e:	461a      	mov	r2, r3
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f001 fdbe 	bl	800b302 <USBD_CtlPrepareRx>
      break;
 8009786:	e076      	b.n	8009876 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	33b0      	adds	r3, #176	@ 0xb0
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4413      	add	r3, r2
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	683a      	ldr	r2, [r7, #0]
 800979c:	7850      	ldrb	r0, [r2, #1]
 800979e:	2200      	movs	r2, #0
 80097a0:	6839      	ldr	r1, [r7, #0]
 80097a2:	4798      	blx	r3
      break;
 80097a4:	e067      	b.n	8009876 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	785b      	ldrb	r3, [r3, #1]
 80097aa:	2b0b      	cmp	r3, #11
 80097ac:	d851      	bhi.n	8009852 <USBD_CDC_Setup+0x18a>
 80097ae:	a201      	add	r2, pc, #4	@ (adr r2, 80097b4 <USBD_CDC_Setup+0xec>)
 80097b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b4:	080097e5 	.word	0x080097e5
 80097b8:	08009861 	.word	0x08009861
 80097bc:	08009853 	.word	0x08009853
 80097c0:	08009853 	.word	0x08009853
 80097c4:	08009853 	.word	0x08009853
 80097c8:	08009853 	.word	0x08009853
 80097cc:	08009853 	.word	0x08009853
 80097d0:	08009853 	.word	0x08009853
 80097d4:	08009853 	.word	0x08009853
 80097d8:	08009853 	.word	0x08009853
 80097dc:	0800980f 	.word	0x0800980f
 80097e0:	08009839 	.word	0x08009839
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	2b03      	cmp	r3, #3
 80097ee:	d107      	bne.n	8009800 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80097f0:	f107 030a 	add.w	r3, r7, #10
 80097f4:	2202      	movs	r2, #2
 80097f6:	4619      	mov	r1, r3
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f001 fd53 	bl	800b2a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097fe:	e032      	b.n	8009866 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f001 fcd1 	bl	800b1aa <USBD_CtlError>
            ret = USBD_FAIL;
 8009808:	2303      	movs	r3, #3
 800980a:	75fb      	strb	r3, [r7, #23]
          break;
 800980c:	e02b      	b.n	8009866 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009814:	b2db      	uxtb	r3, r3
 8009816:	2b03      	cmp	r3, #3
 8009818:	d107      	bne.n	800982a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800981a:	f107 030d 	add.w	r3, r7, #13
 800981e:	2201      	movs	r2, #1
 8009820:	4619      	mov	r1, r3
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f001 fd3e 	bl	800b2a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009828:	e01d      	b.n	8009866 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800982a:	6839      	ldr	r1, [r7, #0]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f001 fcbc 	bl	800b1aa <USBD_CtlError>
            ret = USBD_FAIL;
 8009832:	2303      	movs	r3, #3
 8009834:	75fb      	strb	r3, [r7, #23]
          break;
 8009836:	e016      	b.n	8009866 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800983e:	b2db      	uxtb	r3, r3
 8009840:	2b03      	cmp	r3, #3
 8009842:	d00f      	beq.n	8009864 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f001 fcaf 	bl	800b1aa <USBD_CtlError>
            ret = USBD_FAIL;
 800984c:	2303      	movs	r3, #3
 800984e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009850:	e008      	b.n	8009864 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009852:	6839      	ldr	r1, [r7, #0]
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f001 fca8 	bl	800b1aa <USBD_CtlError>
          ret = USBD_FAIL;
 800985a:	2303      	movs	r3, #3
 800985c:	75fb      	strb	r3, [r7, #23]
          break;
 800985e:	e002      	b.n	8009866 <USBD_CDC_Setup+0x19e>
          break;
 8009860:	bf00      	nop
 8009862:	e008      	b.n	8009876 <USBD_CDC_Setup+0x1ae>
          break;
 8009864:	bf00      	nop
      }
      break;
 8009866:	e006      	b.n	8009876 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f001 fc9d 	bl	800b1aa <USBD_CtlError>
      ret = USBD_FAIL;
 8009870:	2303      	movs	r3, #3
 8009872:	75fb      	strb	r3, [r7, #23]
      break;
 8009874:	bf00      	nop
  }

  return (uint8_t)ret;
 8009876:	7dfb      	ldrb	r3, [r7, #23]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3718      	adds	r7, #24
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	460b      	mov	r3, r1
 800988a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009892:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	32b0      	adds	r2, #176	@ 0xb0
 800989e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d101      	bne.n	80098aa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80098a6:	2303      	movs	r3, #3
 80098a8:	e065      	b.n	8009976 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	32b0      	adds	r2, #176	@ 0xb0
 80098b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80098ba:	78fb      	ldrb	r3, [r7, #3]
 80098bc:	f003 020f 	and.w	r2, r3, #15
 80098c0:	6879      	ldr	r1, [r7, #4]
 80098c2:	4613      	mov	r3, r2
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	4413      	add	r3, r2
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	440b      	add	r3, r1
 80098cc:	3314      	adds	r3, #20
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d02f      	beq.n	8009934 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80098d4:	78fb      	ldrb	r3, [r7, #3]
 80098d6:	f003 020f 	and.w	r2, r3, #15
 80098da:	6879      	ldr	r1, [r7, #4]
 80098dc:	4613      	mov	r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4413      	add	r3, r2
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	440b      	add	r3, r1
 80098e6:	3314      	adds	r3, #20
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	78fb      	ldrb	r3, [r7, #3]
 80098ec:	f003 010f 	and.w	r1, r3, #15
 80098f0:	68f8      	ldr	r0, [r7, #12]
 80098f2:	460b      	mov	r3, r1
 80098f4:	00db      	lsls	r3, r3, #3
 80098f6:	440b      	add	r3, r1
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	4403      	add	r3, r0
 80098fc:	331c      	adds	r3, #28
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	fbb2 f1f3 	udiv	r1, r2, r3
 8009904:	fb01 f303 	mul.w	r3, r1, r3
 8009908:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800990a:	2b00      	cmp	r3, #0
 800990c:	d112      	bne.n	8009934 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800990e:	78fb      	ldrb	r3, [r7, #3]
 8009910:	f003 020f 	and.w	r2, r3, #15
 8009914:	6879      	ldr	r1, [r7, #4]
 8009916:	4613      	mov	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	4413      	add	r3, r2
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	440b      	add	r3, r1
 8009920:	3314      	adds	r3, #20
 8009922:	2200      	movs	r2, #0
 8009924:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009926:	78f9      	ldrb	r1, [r7, #3]
 8009928:	2300      	movs	r3, #0
 800992a:	2200      	movs	r2, #0
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f002 fa24 	bl	800bd7a <USBD_LL_Transmit>
 8009932:	e01f      	b.n	8009974 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	2200      	movs	r2, #0
 8009938:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	33b0      	adds	r3, #176	@ 0xb0
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	4413      	add	r3, r2
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d010      	beq.n	8009974 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	33b0      	adds	r3, #176	@ 0xb0
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009970:	78fa      	ldrb	r2, [r7, #3]
 8009972:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b084      	sub	sp, #16
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
 8009986:	460b      	mov	r3, r1
 8009988:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	32b0      	adds	r2, #176	@ 0xb0
 8009994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009998:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	32b0      	adds	r2, #176	@ 0xb0
 80099a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d101      	bne.n	80099b0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80099ac:	2303      	movs	r3, #3
 80099ae:	e01a      	b.n	80099e6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f002 fa22 	bl	800bdfe <USBD_LL_GetRxDataSize>
 80099ba:	4602      	mov	r2, r0
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	33b0      	adds	r3, #176	@ 0xb0
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	4413      	add	r3, r2
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80099da:	68fa      	ldr	r2, [r7, #12]
 80099dc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80099e0:	4611      	mov	r1, r2
 80099e2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}

080099ee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80099ee:	b580      	push	{r7, lr}
 80099f0:	b084      	sub	sp, #16
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	32b0      	adds	r2, #176	@ 0xb0
 8009a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	e024      	b.n	8009a5a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	33b0      	adds	r3, #176	@ 0xb0
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	4413      	add	r3, r2
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d019      	beq.n	8009a58 <USBD_CDC_EP0_RxReady+0x6a>
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009a2a:	2bff      	cmp	r3, #255	@ 0xff
 8009a2c:	d014      	beq.n	8009a58 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	33b0      	adds	r3, #176	@ 0xb0
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4413      	add	r3, r2
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009a46:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a4e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	22ff      	movs	r2, #255	@ 0xff
 8009a54:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
	...

08009a64 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b086      	sub	sp, #24
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a6c:	2182      	movs	r1, #130	@ 0x82
 8009a6e:	4818      	ldr	r0, [pc, #96]	@ (8009ad0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a70:	f000 fd62 	bl	800a538 <USBD_GetEpDesc>
 8009a74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a76:	2101      	movs	r1, #1
 8009a78:	4815      	ldr	r0, [pc, #84]	@ (8009ad0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a7a:	f000 fd5d 	bl	800a538 <USBD_GetEpDesc>
 8009a7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a80:	2181      	movs	r1, #129	@ 0x81
 8009a82:	4813      	ldr	r0, [pc, #76]	@ (8009ad0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a84:	f000 fd58 	bl	800a538 <USBD_GetEpDesc>
 8009a88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d002      	beq.n	8009a96 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	2210      	movs	r2, #16
 8009a94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d006      	beq.n	8009aaa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009aa4:	711a      	strb	r2, [r3, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d006      	beq.n	8009abe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ab8:	711a      	strb	r2, [r3, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2243      	movs	r2, #67	@ 0x43
 8009ac2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ac4:	4b02      	ldr	r3, [pc, #8]	@ (8009ad0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3718      	adds	r7, #24
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	2000007c 	.word	0x2000007c

08009ad4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009adc:	2182      	movs	r1, #130	@ 0x82
 8009ade:	4818      	ldr	r0, [pc, #96]	@ (8009b40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ae0:	f000 fd2a 	bl	800a538 <USBD_GetEpDesc>
 8009ae4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ae6:	2101      	movs	r1, #1
 8009ae8:	4815      	ldr	r0, [pc, #84]	@ (8009b40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009aea:	f000 fd25 	bl	800a538 <USBD_GetEpDesc>
 8009aee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009af0:	2181      	movs	r1, #129	@ 0x81
 8009af2:	4813      	ldr	r0, [pc, #76]	@ (8009b40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009af4:	f000 fd20 	bl	800a538 <USBD_GetEpDesc>
 8009af8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009b00:	697b      	ldr	r3, [r7, #20]
 8009b02:	2210      	movs	r2, #16
 8009b04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d006      	beq.n	8009b1a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	711a      	strb	r2, [r3, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	f042 0202 	orr.w	r2, r2, #2
 8009b18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d006      	beq.n	8009b2e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	711a      	strb	r2, [r3, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f042 0202 	orr.w	r2, r2, #2
 8009b2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2243      	movs	r2, #67	@ 0x43
 8009b32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b34:	4b02      	ldr	r3, [pc, #8]	@ (8009b40 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3718      	adds	r7, #24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	2000007c 	.word	0x2000007c

08009b44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b4c:	2182      	movs	r1, #130	@ 0x82
 8009b4e:	4818      	ldr	r0, [pc, #96]	@ (8009bb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b50:	f000 fcf2 	bl	800a538 <USBD_GetEpDesc>
 8009b54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b56:	2101      	movs	r1, #1
 8009b58:	4815      	ldr	r0, [pc, #84]	@ (8009bb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b5a:	f000 fced 	bl	800a538 <USBD_GetEpDesc>
 8009b5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b60:	2181      	movs	r1, #129	@ 0x81
 8009b62:	4813      	ldr	r0, [pc, #76]	@ (8009bb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b64:	f000 fce8 	bl	800a538 <USBD_GetEpDesc>
 8009b68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d002      	beq.n	8009b76 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	2210      	movs	r2, #16
 8009b74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d006      	beq.n	8009b8a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b84:	711a      	strb	r2, [r3, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d006      	beq.n	8009b9e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b98:	711a      	strb	r2, [r3, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2243      	movs	r2, #67	@ 0x43
 8009ba2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ba4:	4b02      	ldr	r3, [pc, #8]	@ (8009bb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3718      	adds	r7, #24
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	2000007c 	.word	0x2000007c

08009bb4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	220a      	movs	r2, #10
 8009bc0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009bc2:	4b03      	ldr	r3, [pc, #12]	@ (8009bd0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	370c      	adds	r7, #12
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr
 8009bd0:	20000038 	.word	0x20000038

08009bd4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d101      	bne.n	8009be8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009be4:	2303      	movs	r3, #3
 8009be6:	e009      	b.n	8009bfc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	33b0      	adds	r3, #176	@ 0xb0
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4413      	add	r3, r2
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b087      	sub	sp, #28
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	60b9      	str	r1, [r7, #8]
 8009c12:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	32b0      	adds	r2, #176	@ 0xb0
 8009c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c22:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e008      	b.n	8009c40 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	371c      	adds	r7, #28
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	32b0      	adds	r2, #176	@ 0xb0
 8009c60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c64:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e004      	b.n	8009c7a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3714      	adds	r7, #20
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
	...

08009c88 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	32b0      	adds	r2, #176	@ 0xb0
 8009c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c9e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d101      	bne.n	8009cae <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009caa:	2303      	movs	r3, #3
 8009cac:	e025      	b.n	8009cfa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d11f      	bne.n	8009cf8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009cc0:	4b10      	ldr	r3, [pc, #64]	@ (8009d04 <USBD_CDC_TransmitPacket+0x7c>)
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	f003 020f 	and.w	r2, r3, #15
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4413      	add	r3, r2
 8009cd6:	009b      	lsls	r3, r3, #2
 8009cd8:	4403      	add	r3, r0
 8009cda:	3314      	adds	r3, #20
 8009cdc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009cde:	4b09      	ldr	r3, [pc, #36]	@ (8009d04 <USBD_CDC_TransmitPacket+0x7c>)
 8009ce0:	7819      	ldrb	r1, [r3, #0]
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f002 f843 	bl	800bd7a <USBD_LL_Transmit>

    ret = USBD_OK;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	200000bf 	.word	0x200000bf

08009d08 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	32b0      	adds	r2, #176	@ 0xb0
 8009d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d1e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	32b0      	adds	r2, #176	@ 0xb0
 8009d2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d101      	bne.n	8009d36 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009d32:	2303      	movs	r3, #3
 8009d34:	e018      	b.n	8009d68 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	7c1b      	ldrb	r3, [r3, #16]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d10a      	bne.n	8009d54 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8009d70 <USBD_CDC_ReceivePacket+0x68>)
 8009d40:	7819      	ldrb	r1, [r3, #0]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f002 f835 	bl	800bdbc <USBD_LL_PrepareReceive>
 8009d52:	e008      	b.n	8009d66 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d54:	4b06      	ldr	r3, [pc, #24]	@ (8009d70 <USBD_CDC_ReceivePacket+0x68>)
 8009d56:	7819      	ldrb	r1, [r3, #0]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d5e:	2340      	movs	r3, #64	@ 0x40
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f002 f82b 	bl	800bdbc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	200000c0 	.word	0x200000c0

08009d74 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b086      	sub	sp, #24
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	e01f      	b.n	8009dcc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d003      	beq.n	8009db2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	68ba      	ldr	r2, [r7, #8]
 8009dae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	79fa      	ldrb	r2, [r7, #7]
 8009dbe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f001 fea5 	bl	800bb10 <USBD_LL_Init>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3718      	adds	r7, #24
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
 8009ddc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009dde:	2300      	movs	r3, #0
 8009de0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d101      	bne.n	8009dec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e025      	b.n	8009e38 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	32ae      	adds	r2, #174	@ 0xae
 8009dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00f      	beq.n	8009e28 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	32ae      	adds	r2, #174	@ 0xae
 8009e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e18:	f107 020e 	add.w	r2, r7, #14
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	4798      	blx	r3
 8009e20:	4602      	mov	r2, r0
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f001 fead 	bl	800bba8 <USBD_LL_Start>
 8009e4e:	4603      	mov	r3, r0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3708      	adds	r7, #8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e60:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	370c      	adds	r7, #12
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	460b      	mov	r3, r1
 8009e78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d009      	beq.n	8009e9c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	78fa      	ldrb	r2, [r7, #3]
 8009e92:	4611      	mov	r1, r2
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	4798      	blx	r3
 8009e98:	4603      	mov	r3, r0
 8009e9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b084      	sub	sp, #16
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	460b      	mov	r3, r1
 8009eb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	78fa      	ldrb	r2, [r7, #3]
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	4798      	blx	r3
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d001      	beq.n	8009ed0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b084      	sub	sp, #16
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
 8009ee2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009eea:	6839      	ldr	r1, [r7, #0]
 8009eec:	4618      	mov	r0, r3
 8009eee:	f001 f922 	bl	800b136 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009f00:	461a      	mov	r2, r3
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009f0e:	f003 031f 	and.w	r3, r3, #31
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d01a      	beq.n	8009f4c <USBD_LL_SetupStage+0x72>
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d822      	bhi.n	8009f60 <USBD_LL_SetupStage+0x86>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <USBD_LL_SetupStage+0x4a>
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d00a      	beq.n	8009f38 <USBD_LL_SetupStage+0x5e>
 8009f22:	e01d      	b.n	8009f60 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 fb77 	bl	800a620 <USBD_StdDevReq>
 8009f32:	4603      	mov	r3, r0
 8009f34:	73fb      	strb	r3, [r7, #15]
      break;
 8009f36:	e020      	b.n	8009f7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f3e:	4619      	mov	r1, r3
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 fbdf 	bl	800a704 <USBD_StdItfReq>
 8009f46:	4603      	mov	r3, r0
 8009f48:	73fb      	strb	r3, [r7, #15]
      break;
 8009f4a:	e016      	b.n	8009f7a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f52:	4619      	mov	r1, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fc41 	bl	800a7dc <USBD_StdEPReq>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f5e:	e00c      	b.n	8009f7a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009f66:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f001 fe7a 	bl	800bc68 <USBD_LL_StallEP>
 8009f74:	4603      	mov	r3, r0
 8009f76:	73fb      	strb	r3, [r7, #15]
      break;
 8009f78:	bf00      	nop
  }

  return ret;
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3710      	adds	r7, #16
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	607a      	str	r2, [r7, #4]
 8009f90:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8009f96:	7afb      	ldrb	r3, [r7, #11]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d177      	bne.n	800a08c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009fa2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009faa:	2b03      	cmp	r3, #3
 8009fac:	f040 80a1 	bne.w	800a0f2 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	693a      	ldr	r2, [r7, #16]
 8009fb6:	8992      	ldrh	r2, [r2, #12]
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d91c      	bls.n	8009ff6 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	693a      	ldr	r2, [r7, #16]
 8009fc2:	8992      	ldrh	r2, [r2, #12]
 8009fc4:	1a9a      	subs	r2, r3, r2
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	693a      	ldr	r2, [r7, #16]
 8009fd0:	8992      	ldrh	r2, [r2, #12]
 8009fd2:	441a      	add	r2, r3
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	6919      	ldr	r1, [r3, #16]
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	899b      	ldrh	r3, [r3, #12]
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	bf38      	it	cc
 8009fea:	4613      	movcc	r3, r2
 8009fec:	461a      	mov	r2, r3
 8009fee:	68f8      	ldr	r0, [r7, #12]
 8009ff0:	f001 f9a8 	bl	800b344 <USBD_CtlContinueRx>
 8009ff4:	e07d      	b.n	800a0f2 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009ffc:	f003 031f 	and.w	r3, r3, #31
 800a000:	2b02      	cmp	r3, #2
 800a002:	d014      	beq.n	800a02e <USBD_LL_DataOutStage+0xaa>
 800a004:	2b02      	cmp	r3, #2
 800a006:	d81d      	bhi.n	800a044 <USBD_LL_DataOutStage+0xc0>
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <USBD_LL_DataOutStage+0x8e>
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d003      	beq.n	800a018 <USBD_LL_DataOutStage+0x94>
 800a010:	e018      	b.n	800a044 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a012:	2300      	movs	r3, #0
 800a014:	75bb      	strb	r3, [r7, #22]
            break;
 800a016:	e018      	b.n	800a04a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	4619      	mov	r1, r3
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f000 fa6e 	bl	800a504 <USBD_CoreFindIF>
 800a028:	4603      	mov	r3, r0
 800a02a:	75bb      	strb	r3, [r7, #22]
            break;
 800a02c:	e00d      	b.n	800a04a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a034:	b2db      	uxtb	r3, r3
 800a036:	4619      	mov	r1, r3
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f000 fa70 	bl	800a51e <USBD_CoreFindEP>
 800a03e:	4603      	mov	r3, r0
 800a040:	75bb      	strb	r3, [r7, #22]
            break;
 800a042:	e002      	b.n	800a04a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a044:	2300      	movs	r3, #0
 800a046:	75bb      	strb	r3, [r7, #22]
            break;
 800a048:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a04a:	7dbb      	ldrb	r3, [r7, #22]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d119      	bne.n	800a084 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a056:	b2db      	uxtb	r3, r3
 800a058:	2b03      	cmp	r3, #3
 800a05a:	d113      	bne.n	800a084 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a05c:	7dba      	ldrb	r2, [r7, #22]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	32ae      	adds	r2, #174	@ 0xae
 800a062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d00b      	beq.n	800a084 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800a06c:	7dba      	ldrb	r2, [r7, #22]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a074:	7dba      	ldrb	r2, [r7, #22]
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	32ae      	adds	r2, #174	@ 0xae
 800a07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	68f8      	ldr	r0, [r7, #12]
 800a082:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f001 f96e 	bl	800b366 <USBD_CtlSendStatus>
 800a08a:	e032      	b.n	800a0f2 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a08c:	7afb      	ldrb	r3, [r7, #11]
 800a08e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a092:	b2db      	uxtb	r3, r3
 800a094:	4619      	mov	r1, r3
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f000 fa41 	bl	800a51e <USBD_CoreFindEP>
 800a09c:	4603      	mov	r3, r0
 800a09e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0a0:	7dbb      	ldrb	r3, [r7, #22]
 800a0a2:	2bff      	cmp	r3, #255	@ 0xff
 800a0a4:	d025      	beq.n	800a0f2 <USBD_LL_DataOutStage+0x16e>
 800a0a6:	7dbb      	ldrb	r3, [r7, #22]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d122      	bne.n	800a0f2 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b03      	cmp	r3, #3
 800a0b6:	d117      	bne.n	800a0e8 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a0b8:	7dba      	ldrb	r2, [r7, #22]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	32ae      	adds	r2, #174	@ 0xae
 800a0be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c2:	699b      	ldr	r3, [r3, #24]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d00f      	beq.n	800a0e8 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800a0c8:	7dba      	ldrb	r2, [r7, #22]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a0d0:	7dba      	ldrb	r2, [r7, #22]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	32ae      	adds	r2, #174	@ 0xae
 800a0d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0da:	699b      	ldr	r3, [r3, #24]
 800a0dc:	7afa      	ldrb	r2, [r7, #11]
 800a0de:	4611      	mov	r1, r2
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	4798      	blx	r3
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a0e8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d001      	beq.n	800a0f2 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800a0ee:	7dfb      	ldrb	r3, [r7, #23]
 800a0f0:	e000      	b.n	800a0f4 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3718      	adds	r7, #24
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	460b      	mov	r3, r1
 800a106:	607a      	str	r2, [r7, #4]
 800a108:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a10a:	7afb      	ldrb	r3, [r7, #11]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d178      	bne.n	800a202 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	3314      	adds	r3, #20
 800a114:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	d163      	bne.n	800a1e8 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	8992      	ldrh	r2, [r2, #12]
 800a128:	4293      	cmp	r3, r2
 800a12a:	d91c      	bls.n	800a166 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800a12c:	693b      	ldr	r3, [r7, #16]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	693a      	ldr	r2, [r7, #16]
 800a132:	8992      	ldrh	r2, [r2, #12]
 800a134:	1a9a      	subs	r2, r3, r2
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	8992      	ldrh	r2, [r2, #12]
 800a142:	441a      	add	r2, r3
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	6919      	ldr	r1, [r3, #16]
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	461a      	mov	r2, r3
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f001 f8c4 	bl	800b2e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a158:	2300      	movs	r3, #0
 800a15a:	2200      	movs	r2, #0
 800a15c:	2100      	movs	r1, #0
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f001 fe2c 	bl	800bdbc <USBD_LL_PrepareReceive>
 800a164:	e040      	b.n	800a1e8 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	899b      	ldrh	r3, [r3, #12]
 800a16a:	461a      	mov	r2, r3
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	429a      	cmp	r2, r3
 800a172:	d11c      	bne.n	800a1ae <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	693a      	ldr	r2, [r7, #16]
 800a17a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d316      	bcc.n	800a1ae <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d20f      	bcs.n	800a1ae <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a18e:	2200      	movs	r2, #0
 800a190:	2100      	movs	r1, #0
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f001 f8a4 	bl	800b2e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f001 fe08 	bl	800bdbc <USBD_LL_PrepareReceive>
 800a1ac:	e01c      	b.n	800a1e8 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	2b03      	cmp	r3, #3
 800a1b8:	d10f      	bne.n	800a1da <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d009      	beq.n	800a1da <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1da:	2180      	movs	r1, #128	@ 0x80
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f001 fd43 	bl	800bc68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f001 f8d2 	bl	800b38c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d03a      	beq.n	800a268 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f7ff fe30 	bl	8009e58 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a200:	e032      	b.n	800a268 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a202:	7afb      	ldrb	r3, [r7, #11]
 800a204:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	4619      	mov	r1, r3
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f000 f986 	bl	800a51e <USBD_CoreFindEP>
 800a212:	4603      	mov	r3, r0
 800a214:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a216:	7dfb      	ldrb	r3, [r7, #23]
 800a218:	2bff      	cmp	r3, #255	@ 0xff
 800a21a:	d025      	beq.n	800a268 <USBD_LL_DataInStage+0x16c>
 800a21c:	7dfb      	ldrb	r3, [r7, #23]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d122      	bne.n	800a268 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a228:	b2db      	uxtb	r3, r3
 800a22a:	2b03      	cmp	r3, #3
 800a22c:	d11c      	bne.n	800a268 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a22e:	7dfa      	ldrb	r2, [r7, #23]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	32ae      	adds	r2, #174	@ 0xae
 800a234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a238:	695b      	ldr	r3, [r3, #20]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d014      	beq.n	800a268 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800a23e:	7dfa      	ldrb	r2, [r7, #23]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a246:	7dfa      	ldrb	r2, [r7, #23]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	32ae      	adds	r2, #174	@ 0xae
 800a24c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	7afa      	ldrb	r2, [r7, #11]
 800a254:	4611      	mov	r1, r2
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	4798      	blx	r3
 800a25a:	4603      	mov	r3, r0
 800a25c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a25e:	7dbb      	ldrb	r3, [r7, #22]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d001      	beq.n	800a268 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800a264:	7dbb      	ldrb	r3, [r7, #22]
 800a266:	e000      	b.n	800a26a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3718      	adds	r7, #24
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a272:	b580      	push	{r7, lr}
 800a274:	b084      	sub	sp, #16
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a27a:	2300      	movs	r3, #0
 800a27c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2201      	movs	r2, #1
 800a282:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d014      	beq.n	800a2d8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00e      	beq.n	800a2d8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	6852      	ldr	r2, [r2, #4]
 800a2c6:	b2d2      	uxtb	r2, r2
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	4798      	blx	r3
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d001      	beq.n	800a2d8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2d8:	2340      	movs	r3, #64	@ 0x40
 800a2da:	2200      	movs	r2, #0
 800a2dc:	2100      	movs	r1, #0
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f001 fc7d 	bl	800bbde <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2240      	movs	r2, #64	@ 0x40
 800a2f0:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2f4:	2340      	movs	r3, #64	@ 0x40
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	2180      	movs	r1, #128	@ 0x80
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f001 fc6f 	bl	800bbde <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2240      	movs	r2, #64	@ 0x40
 800a30c:	841a      	strh	r2, [r3, #32]

  return ret;
 800a30e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a318:	b480      	push	{r7}
 800a31a:	b083      	sub	sp, #12
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	460b      	mov	r3, r1
 800a322:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	78fa      	ldrb	r2, [r7, #3]
 800a328:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a346:	b2db      	uxtb	r3, r3
 800a348:	2b04      	cmp	r3, #4
 800a34a:	d006      	beq.n	800a35a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a352:	b2da      	uxtb	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2204      	movs	r2, #4
 800a35e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	2b04      	cmp	r3, #4
 800a382:	d106      	bne.n	800a392 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a38a:	b2da      	uxtb	r2, r3
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d110      	bne.n	800a3d6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d00b      	beq.n	800a3d6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3c4:	69db      	ldr	r3, [r3, #28]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d005      	beq.n	800a3d6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3d0:	69db      	ldr	r3, [r3, #28]
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3708      	adds	r7, #8
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	32ae      	adds	r2, #174	@ 0xae
 800a3f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d101      	bne.n	800a402 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a3fe:	2303      	movs	r3, #3
 800a400:	e01c      	b.n	800a43c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	d115      	bne.n	800a43a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	32ae      	adds	r2, #174	@ 0xae
 800a418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a41c:	6a1b      	ldr	r3, [r3, #32]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00b      	beq.n	800a43a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	32ae      	adds	r2, #174	@ 0xae
 800a42c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a430:	6a1b      	ldr	r3, [r3, #32]
 800a432:	78fa      	ldrb	r2, [r7, #3]
 800a434:	4611      	mov	r1, r2
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3708      	adds	r7, #8
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	32ae      	adds	r2, #174	@ 0xae
 800a45a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a462:	2303      	movs	r3, #3
 800a464:	e01c      	b.n	800a4a0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2b03      	cmp	r3, #3
 800a470:	d115      	bne.n	800a49e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	32ae      	adds	r2, #174	@ 0xae
 800a47c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00b      	beq.n	800a49e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	32ae      	adds	r2, #174	@ 0xae
 800a490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a496:	78fa      	ldrb	r2, [r7, #3]
 800a498:	4611      	mov	r1, r2
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3708      	adds	r7, #8
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}

0800a4a8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr

0800a4be <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b084      	sub	sp, #16
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00e      	beq.n	800a4fa <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	6852      	ldr	r2, [r2, #4]
 800a4e8:	b2d2      	uxtb	r2, r2
 800a4ea:	4611      	mov	r1, r2
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	4798      	blx	r3
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d001      	beq.n	800a4fa <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	460b      	mov	r3, r1
 800a50e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a510:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a512:	4618      	mov	r0, r3
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a51e:	b480      	push	{r7}
 800a520:	b083      	sub	sp, #12
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
 800a526:	460b      	mov	r3, r1
 800a528:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a52a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b086      	sub	sp, #24
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a54c:	2300      	movs	r3, #0
 800a54e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	885b      	ldrh	r3, [r3, #2]
 800a554:	b29b      	uxth	r3, r3
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	7812      	ldrb	r2, [r2, #0]
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d91f      	bls.n	800a59e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a564:	e013      	b.n	800a58e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a566:	f107 030a 	add.w	r3, r7, #10
 800a56a:	4619      	mov	r1, r3
 800a56c:	6978      	ldr	r0, [r7, #20]
 800a56e:	f000 f81b 	bl	800a5a8 <USBD_GetNextDesc>
 800a572:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	785b      	ldrb	r3, [r3, #1]
 800a578:	2b05      	cmp	r3, #5
 800a57a:	d108      	bne.n	800a58e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	789b      	ldrb	r3, [r3, #2]
 800a584:	78fa      	ldrb	r2, [r7, #3]
 800a586:	429a      	cmp	r2, r3
 800a588:	d008      	beq.n	800a59c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a58a:	2300      	movs	r3, #0
 800a58c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	885b      	ldrh	r3, [r3, #2]
 800a592:	b29a      	uxth	r2, r3
 800a594:	897b      	ldrh	r3, [r7, #10]
 800a596:	429a      	cmp	r2, r3
 800a598:	d8e5      	bhi.n	800a566 <USBD_GetEpDesc+0x2e>
 800a59a:	e000      	b.n	800a59e <USBD_GetEpDesc+0x66>
          break;
 800a59c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a59e:	693b      	ldr	r3, [r7, #16]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3718      	adds	r7, #24
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	881b      	ldrh	r3, [r3, #0]
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	7812      	ldrb	r2, [r2, #0]
 800a5be:	4413      	add	r3, r2
 800a5c0:	b29a      	uxth	r2, r3
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3714      	adds	r7, #20
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr

0800a5e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b087      	sub	sp, #28
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a5fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a602:	021b      	lsls	r3, r3, #8
 800a604:	b21a      	sxth	r2, r3
 800a606:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a60a:	4313      	orrs	r3, r2
 800a60c:	b21b      	sxth	r3, r3
 800a60e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a610:	89fb      	ldrh	r3, [r7, #14]
}
 800a612:	4618      	mov	r0, r3
 800a614:	371c      	adds	r7, #28
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr
	...

0800a620 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a62a:	2300      	movs	r3, #0
 800a62c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a636:	2b40      	cmp	r3, #64	@ 0x40
 800a638:	d005      	beq.n	800a646 <USBD_StdDevReq+0x26>
 800a63a:	2b40      	cmp	r3, #64	@ 0x40
 800a63c:	d857      	bhi.n	800a6ee <USBD_StdDevReq+0xce>
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00f      	beq.n	800a662 <USBD_StdDevReq+0x42>
 800a642:	2b20      	cmp	r3, #32
 800a644:	d153      	bne.n	800a6ee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	32ae      	adds	r2, #174	@ 0xae
 800a650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	6839      	ldr	r1, [r7, #0]
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	4798      	blx	r3
 800a65c:	4603      	mov	r3, r0
 800a65e:	73fb      	strb	r3, [r7, #15]
      break;
 800a660:	e04a      	b.n	800a6f8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	785b      	ldrb	r3, [r3, #1]
 800a666:	2b09      	cmp	r3, #9
 800a668:	d83b      	bhi.n	800a6e2 <USBD_StdDevReq+0xc2>
 800a66a:	a201      	add	r2, pc, #4	@ (adr r2, 800a670 <USBD_StdDevReq+0x50>)
 800a66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a670:	0800a6c5 	.word	0x0800a6c5
 800a674:	0800a6d9 	.word	0x0800a6d9
 800a678:	0800a6e3 	.word	0x0800a6e3
 800a67c:	0800a6cf 	.word	0x0800a6cf
 800a680:	0800a6e3 	.word	0x0800a6e3
 800a684:	0800a6a3 	.word	0x0800a6a3
 800a688:	0800a699 	.word	0x0800a699
 800a68c:	0800a6e3 	.word	0x0800a6e3
 800a690:	0800a6bb 	.word	0x0800a6bb
 800a694:	0800a6ad 	.word	0x0800a6ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a698:	6839      	ldr	r1, [r7, #0]
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fa3e 	bl	800ab1c <USBD_GetDescriptor>
          break;
 800a6a0:	e024      	b.n	800a6ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a6a2:	6839      	ldr	r1, [r7, #0]
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 fba3 	bl	800adf0 <USBD_SetAddress>
          break;
 800a6aa:	e01f      	b.n	800a6ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a6ac:	6839      	ldr	r1, [r7, #0]
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 fbe2 	bl	800ae78 <USBD_SetConfig>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	73fb      	strb	r3, [r7, #15]
          break;
 800a6b8:	e018      	b.n	800a6ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a6ba:	6839      	ldr	r1, [r7, #0]
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fc85 	bl	800afcc <USBD_GetConfig>
          break;
 800a6c2:	e013      	b.n	800a6ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a6c4:	6839      	ldr	r1, [r7, #0]
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 fcb6 	bl	800b038 <USBD_GetStatus>
          break;
 800a6cc:	e00e      	b.n	800a6ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a6ce:	6839      	ldr	r1, [r7, #0]
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f000 fce5 	bl	800b0a0 <USBD_SetFeature>
          break;
 800a6d6:	e009      	b.n	800a6ec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a6d8:	6839      	ldr	r1, [r7, #0]
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 fd09 	bl	800b0f2 <USBD_ClrFeature>
          break;
 800a6e0:	e004      	b.n	800a6ec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a6e2:	6839      	ldr	r1, [r7, #0]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f000 fd60 	bl	800b1aa <USBD_CtlError>
          break;
 800a6ea:	bf00      	nop
      }
      break;
 800a6ec:	e004      	b.n	800a6f8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a6ee:	6839      	ldr	r1, [r7, #0]
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 fd5a 	bl	800b1aa <USBD_CtlError>
      break;
 800a6f6:	bf00      	nop
  }

  return ret;
 800a6f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop

0800a704 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a70e:	2300      	movs	r3, #0
 800a710:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a71a:	2b40      	cmp	r3, #64	@ 0x40
 800a71c:	d005      	beq.n	800a72a <USBD_StdItfReq+0x26>
 800a71e:	2b40      	cmp	r3, #64	@ 0x40
 800a720:	d852      	bhi.n	800a7c8 <USBD_StdItfReq+0xc4>
 800a722:	2b00      	cmp	r3, #0
 800a724:	d001      	beq.n	800a72a <USBD_StdItfReq+0x26>
 800a726:	2b20      	cmp	r3, #32
 800a728:	d14e      	bne.n	800a7c8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a730:	b2db      	uxtb	r3, r3
 800a732:	3b01      	subs	r3, #1
 800a734:	2b02      	cmp	r3, #2
 800a736:	d840      	bhi.n	800a7ba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	889b      	ldrh	r3, [r3, #4]
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d836      	bhi.n	800a7b0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	889b      	ldrh	r3, [r3, #4]
 800a746:	b2db      	uxtb	r3, r3
 800a748:	4619      	mov	r1, r3
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f7ff feda 	bl	800a504 <USBD_CoreFindIF>
 800a750:	4603      	mov	r3, r0
 800a752:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a754:	7bbb      	ldrb	r3, [r7, #14]
 800a756:	2bff      	cmp	r3, #255	@ 0xff
 800a758:	d01d      	beq.n	800a796 <USBD_StdItfReq+0x92>
 800a75a:	7bbb      	ldrb	r3, [r7, #14]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d11a      	bne.n	800a796 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a760:	7bba      	ldrb	r2, [r7, #14]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	32ae      	adds	r2, #174	@ 0xae
 800a766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00f      	beq.n	800a790 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a770:	7bba      	ldrb	r2, [r7, #14]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a778:	7bba      	ldrb	r2, [r7, #14]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	32ae      	adds	r2, #174	@ 0xae
 800a77e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a782:	689b      	ldr	r3, [r3, #8]
 800a784:	6839      	ldr	r1, [r7, #0]
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	4798      	blx	r3
 800a78a:	4603      	mov	r3, r0
 800a78c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a78e:	e004      	b.n	800a79a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a790:	2303      	movs	r3, #3
 800a792:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a794:	e001      	b.n	800a79a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a796:	2303      	movs	r3, #3
 800a798:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	88db      	ldrh	r3, [r3, #6]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d110      	bne.n	800a7c4 <USBD_StdItfReq+0xc0>
 800a7a2:	7bfb      	ldrb	r3, [r7, #15]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10d      	bne.n	800a7c4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 fddc 	bl	800b366 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a7ae:	e009      	b.n	800a7c4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a7b0:	6839      	ldr	r1, [r7, #0]
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fcf9 	bl	800b1aa <USBD_CtlError>
          break;
 800a7b8:	e004      	b.n	800a7c4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a7ba:	6839      	ldr	r1, [r7, #0]
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 fcf4 	bl	800b1aa <USBD_CtlError>
          break;
 800a7c2:	e000      	b.n	800a7c6 <USBD_StdItfReq+0xc2>
          break;
 800a7c4:	bf00      	nop
      }
      break;
 800a7c6:	e004      	b.n	800a7d2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a7c8:	6839      	ldr	r1, [r7, #0]
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fced 	bl	800b1aa <USBD_CtlError>
      break;
 800a7d0:	bf00      	nop
  }

  return ret;
 800a7d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3710      	adds	r7, #16
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	889b      	ldrh	r3, [r3, #4]
 800a7ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a7f8:	2b40      	cmp	r3, #64	@ 0x40
 800a7fa:	d007      	beq.n	800a80c <USBD_StdEPReq+0x30>
 800a7fc:	2b40      	cmp	r3, #64	@ 0x40
 800a7fe:	f200 8181 	bhi.w	800ab04 <USBD_StdEPReq+0x328>
 800a802:	2b00      	cmp	r3, #0
 800a804:	d02a      	beq.n	800a85c <USBD_StdEPReq+0x80>
 800a806:	2b20      	cmp	r3, #32
 800a808:	f040 817c 	bne.w	800ab04 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
 800a80e:	4619      	mov	r1, r3
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7ff fe84 	bl	800a51e <USBD_CoreFindEP>
 800a816:	4603      	mov	r3, r0
 800a818:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a81a:	7b7b      	ldrb	r3, [r7, #13]
 800a81c:	2bff      	cmp	r3, #255	@ 0xff
 800a81e:	f000 8176 	beq.w	800ab0e <USBD_StdEPReq+0x332>
 800a822:	7b7b      	ldrb	r3, [r7, #13]
 800a824:	2b00      	cmp	r3, #0
 800a826:	f040 8172 	bne.w	800ab0e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800a82a:	7b7a      	ldrb	r2, [r7, #13]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a832:	7b7a      	ldrb	r2, [r7, #13]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	32ae      	adds	r2, #174	@ 0xae
 800a838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f000 8165 	beq.w	800ab0e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a844:	7b7a      	ldrb	r2, [r7, #13]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	32ae      	adds	r2, #174	@ 0xae
 800a84a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	6839      	ldr	r1, [r7, #0]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	4798      	blx	r3
 800a856:	4603      	mov	r3, r0
 800a858:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a85a:	e158      	b.n	800ab0e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	785b      	ldrb	r3, [r3, #1]
 800a860:	2b03      	cmp	r3, #3
 800a862:	d008      	beq.n	800a876 <USBD_StdEPReq+0x9a>
 800a864:	2b03      	cmp	r3, #3
 800a866:	f300 8147 	bgt.w	800aaf8 <USBD_StdEPReq+0x31c>
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	f000 809b 	beq.w	800a9a6 <USBD_StdEPReq+0x1ca>
 800a870:	2b01      	cmp	r3, #1
 800a872:	d03c      	beq.n	800a8ee <USBD_StdEPReq+0x112>
 800a874:	e140      	b.n	800aaf8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d002      	beq.n	800a888 <USBD_StdEPReq+0xac>
 800a882:	2b03      	cmp	r3, #3
 800a884:	d016      	beq.n	800a8b4 <USBD_StdEPReq+0xd8>
 800a886:	e02c      	b.n	800a8e2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a888:	7bbb      	ldrb	r3, [r7, #14]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00d      	beq.n	800a8aa <USBD_StdEPReq+0xce>
 800a88e:	7bbb      	ldrb	r3, [r7, #14]
 800a890:	2b80      	cmp	r3, #128	@ 0x80
 800a892:	d00a      	beq.n	800a8aa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a894:	7bbb      	ldrb	r3, [r7, #14]
 800a896:	4619      	mov	r1, r3
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f001 f9e5 	bl	800bc68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a89e:	2180      	movs	r1, #128	@ 0x80
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f001 f9e1 	bl	800bc68 <USBD_LL_StallEP>
 800a8a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8a8:	e020      	b.n	800a8ec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a8aa:	6839      	ldr	r1, [r7, #0]
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 fc7c 	bl	800b1aa <USBD_CtlError>
              break;
 800a8b2:	e01b      	b.n	800a8ec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	885b      	ldrh	r3, [r3, #2]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10e      	bne.n	800a8da <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a8bc:	7bbb      	ldrb	r3, [r7, #14]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d00b      	beq.n	800a8da <USBD_StdEPReq+0xfe>
 800a8c2:	7bbb      	ldrb	r3, [r7, #14]
 800a8c4:	2b80      	cmp	r3, #128	@ 0x80
 800a8c6:	d008      	beq.n	800a8da <USBD_StdEPReq+0xfe>
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	88db      	ldrh	r3, [r3, #6]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d104      	bne.n	800a8da <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8d0:	7bbb      	ldrb	r3, [r7, #14]
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f001 f9c7 	bl	800bc68 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f000 fd43 	bl	800b366 <USBD_CtlSendStatus>

              break;
 800a8e0:	e004      	b.n	800a8ec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a8e2:	6839      	ldr	r1, [r7, #0]
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 fc60 	bl	800b1aa <USBD_CtlError>
              break;
 800a8ea:	bf00      	nop
          }
          break;
 800a8ec:	e109      	b.n	800ab02 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	2b02      	cmp	r3, #2
 800a8f8:	d002      	beq.n	800a900 <USBD_StdEPReq+0x124>
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d016      	beq.n	800a92c <USBD_StdEPReq+0x150>
 800a8fe:	e04b      	b.n	800a998 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a900:	7bbb      	ldrb	r3, [r7, #14]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00d      	beq.n	800a922 <USBD_StdEPReq+0x146>
 800a906:	7bbb      	ldrb	r3, [r7, #14]
 800a908:	2b80      	cmp	r3, #128	@ 0x80
 800a90a:	d00a      	beq.n	800a922 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a90c:	7bbb      	ldrb	r3, [r7, #14]
 800a90e:	4619      	mov	r1, r3
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f001 f9a9 	bl	800bc68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a916:	2180      	movs	r1, #128	@ 0x80
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f001 f9a5 	bl	800bc68 <USBD_LL_StallEP>
 800a91e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a920:	e040      	b.n	800a9a4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a922:	6839      	ldr	r1, [r7, #0]
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fc40 	bl	800b1aa <USBD_CtlError>
              break;
 800a92a:	e03b      	b.n	800a9a4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	885b      	ldrh	r3, [r3, #2]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d136      	bne.n	800a9a2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a934:	7bbb      	ldrb	r3, [r7, #14]
 800a936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d004      	beq.n	800a948 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a93e:	7bbb      	ldrb	r3, [r7, #14]
 800a940:	4619      	mov	r1, r3
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f001 f9af 	bl	800bca6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fd0c 	bl	800b366 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
 800a950:	4619      	mov	r1, r3
 800a952:	6878      	ldr	r0, [r7, #4]
 800a954:	f7ff fde3 	bl	800a51e <USBD_CoreFindEP>
 800a958:	4603      	mov	r3, r0
 800a95a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a95c:	7b7b      	ldrb	r3, [r7, #13]
 800a95e:	2bff      	cmp	r3, #255	@ 0xff
 800a960:	d01f      	beq.n	800a9a2 <USBD_StdEPReq+0x1c6>
 800a962:	7b7b      	ldrb	r3, [r7, #13]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d11c      	bne.n	800a9a2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a968:	7b7a      	ldrb	r2, [r7, #13]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a970:	7b7a      	ldrb	r2, [r7, #13]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	32ae      	adds	r2, #174	@ 0xae
 800a976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d010      	beq.n	800a9a2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a980:	7b7a      	ldrb	r2, [r7, #13]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	32ae      	adds	r2, #174	@ 0xae
 800a986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	6839      	ldr	r1, [r7, #0]
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	4798      	blx	r3
 800a992:	4603      	mov	r3, r0
 800a994:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a996:	e004      	b.n	800a9a2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a998:	6839      	ldr	r1, [r7, #0]
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 fc05 	bl	800b1aa <USBD_CtlError>
              break;
 800a9a0:	e000      	b.n	800a9a4 <USBD_StdEPReq+0x1c8>
              break;
 800a9a2:	bf00      	nop
          }
          break;
 800a9a4:	e0ad      	b.n	800ab02 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b02      	cmp	r3, #2
 800a9b0:	d002      	beq.n	800a9b8 <USBD_StdEPReq+0x1dc>
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d033      	beq.n	800aa1e <USBD_StdEPReq+0x242>
 800a9b6:	e099      	b.n	800aaec <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9b8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d007      	beq.n	800a9ce <USBD_StdEPReq+0x1f2>
 800a9be:	7bbb      	ldrb	r3, [r7, #14]
 800a9c0:	2b80      	cmp	r3, #128	@ 0x80
 800a9c2:	d004      	beq.n	800a9ce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a9c4:	6839      	ldr	r1, [r7, #0]
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 fbef 	bl	800b1aa <USBD_CtlError>
                break;
 800a9cc:	e093      	b.n	800aaf6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	da0b      	bge.n	800a9ee <USBD_StdEPReq+0x212>
 800a9d6:	7bbb      	ldrb	r3, [r7, #14]
 800a9d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a9dc:	4613      	mov	r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4413      	add	r3, r2
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	3310      	adds	r3, #16
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	4413      	add	r3, r2
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	e00b      	b.n	800aa06 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a9ee:	7bbb      	ldrb	r3, [r7, #14]
 800a9f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4413      	add	r3, r2
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	4413      	add	r3, r2
 800aa04:	3304      	adds	r3, #4
 800aa06:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	330e      	adds	r3, #14
 800aa12:	2202      	movs	r2, #2
 800aa14:	4619      	mov	r1, r3
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 fc44 	bl	800b2a4 <USBD_CtlSendData>
              break;
 800aa1c:	e06b      	b.n	800aaf6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aa1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	da11      	bge.n	800aa4a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aa26:	7bbb      	ldrb	r3, [r7, #14]
 800aa28:	f003 020f 	and.w	r2, r3, #15
 800aa2c:	6879      	ldr	r1, [r7, #4]
 800aa2e:	4613      	mov	r3, r2
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	4413      	add	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	440b      	add	r3, r1
 800aa38:	3323      	adds	r3, #35	@ 0x23
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d117      	bne.n	800aa70 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800aa40:	6839      	ldr	r1, [r7, #0]
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fbb1 	bl	800b1aa <USBD_CtlError>
                  break;
 800aa48:	e055      	b.n	800aaf6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa4a:	7bbb      	ldrb	r3, [r7, #14]
 800aa4c:	f003 020f 	and.w	r2, r3, #15
 800aa50:	6879      	ldr	r1, [r7, #4]
 800aa52:	4613      	mov	r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	4413      	add	r3, r2
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	440b      	add	r3, r1
 800aa5c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d104      	bne.n	800aa70 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800aa66:	6839      	ldr	r1, [r7, #0]
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 fb9e 	bl	800b1aa <USBD_CtlError>
                  break;
 800aa6e:	e042      	b.n	800aaf6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	da0b      	bge.n	800aa90 <USBD_StdEPReq+0x2b4>
 800aa78:	7bbb      	ldrb	r3, [r7, #14]
 800aa7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa7e:	4613      	mov	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4413      	add	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	3310      	adds	r3, #16
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	e00b      	b.n	800aaa8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa90:	7bbb      	ldrb	r3, [r7, #14]
 800aa92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa96:	4613      	mov	r3, r2
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	4413      	add	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	3304      	adds	r3, #4
 800aaa8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aaaa:	7bbb      	ldrb	r3, [r7, #14]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d002      	beq.n	800aab6 <USBD_StdEPReq+0x2da>
 800aab0:	7bbb      	ldrb	r3, [r7, #14]
 800aab2:	2b80      	cmp	r3, #128	@ 0x80
 800aab4:	d103      	bne.n	800aabe <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	2200      	movs	r2, #0
 800aaba:	739a      	strb	r2, [r3, #14]
 800aabc:	e00e      	b.n	800aadc <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aabe:	7bbb      	ldrb	r3, [r7, #14]
 800aac0:	4619      	mov	r1, r3
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f001 f90e 	bl	800bce4 <USBD_LL_IsStallEP>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d003      	beq.n	800aad6 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	2201      	movs	r2, #1
 800aad2:	739a      	strb	r2, [r3, #14]
 800aad4:	e002      	b.n	800aadc <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	2200      	movs	r2, #0
 800aada:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	330e      	adds	r3, #14
 800aae0:	2202      	movs	r2, #2
 800aae2:	4619      	mov	r1, r3
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 fbdd 	bl	800b2a4 <USBD_CtlSendData>
              break;
 800aaea:	e004      	b.n	800aaf6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800aaec:	6839      	ldr	r1, [r7, #0]
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fb5b 	bl	800b1aa <USBD_CtlError>
              break;
 800aaf4:	bf00      	nop
          }
          break;
 800aaf6:	e004      	b.n	800ab02 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800aaf8:	6839      	ldr	r1, [r7, #0]
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fb55 	bl	800b1aa <USBD_CtlError>
          break;
 800ab00:	bf00      	nop
      }
      break;
 800ab02:	e005      	b.n	800ab10 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800ab04:	6839      	ldr	r1, [r7, #0]
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fb4f 	bl	800b1aa <USBD_CtlError>
      break;
 800ab0c:	e000      	b.n	800ab10 <USBD_StdEPReq+0x334>
      break;
 800ab0e:	bf00      	nop
  }

  return ret;
 800ab10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3710      	adds	r7, #16
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
	...

0800ab1c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ab26:	2300      	movs	r3, #0
 800ab28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	885b      	ldrh	r3, [r3, #2]
 800ab36:	0a1b      	lsrs	r3, r3, #8
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	3b01      	subs	r3, #1
 800ab3c:	2b06      	cmp	r3, #6
 800ab3e:	f200 8128 	bhi.w	800ad92 <USBD_GetDescriptor+0x276>
 800ab42:	a201      	add	r2, pc, #4	@ (adr r2, 800ab48 <USBD_GetDescriptor+0x2c>)
 800ab44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab48:	0800ab65 	.word	0x0800ab65
 800ab4c:	0800ab7d 	.word	0x0800ab7d
 800ab50:	0800abbd 	.word	0x0800abbd
 800ab54:	0800ad93 	.word	0x0800ad93
 800ab58:	0800ad93 	.word	0x0800ad93
 800ab5c:	0800ad33 	.word	0x0800ad33
 800ab60:	0800ad5f 	.word	0x0800ad5f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	7c12      	ldrb	r2, [r2, #16]
 800ab70:	f107 0108 	add.w	r1, r7, #8
 800ab74:	4610      	mov	r0, r2
 800ab76:	4798      	blx	r3
 800ab78:	60f8      	str	r0, [r7, #12]
      break;
 800ab7a:	e112      	b.n	800ada2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	7c1b      	ldrb	r3, [r3, #16]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10d      	bne.n	800aba0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab8c:	f107 0208 	add.w	r2, r7, #8
 800ab90:	4610      	mov	r0, r2
 800ab92:	4798      	blx	r3
 800ab94:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	3301      	adds	r3, #1
 800ab9a:	2202      	movs	r2, #2
 800ab9c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ab9e:	e100      	b.n	800ada2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aba8:	f107 0208 	add.w	r2, r7, #8
 800abac:	4610      	mov	r0, r2
 800abae:	4798      	blx	r3
 800abb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	3301      	adds	r3, #1
 800abb6:	2202      	movs	r2, #2
 800abb8:	701a      	strb	r2, [r3, #0]
      break;
 800abba:	e0f2      	b.n	800ada2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	885b      	ldrh	r3, [r3, #2]
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	2b05      	cmp	r3, #5
 800abc4:	f200 80ac 	bhi.w	800ad20 <USBD_GetDescriptor+0x204>
 800abc8:	a201      	add	r2, pc, #4	@ (adr r2, 800abd0 <USBD_GetDescriptor+0xb4>)
 800abca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abce:	bf00      	nop
 800abd0:	0800abe9 	.word	0x0800abe9
 800abd4:	0800ac1d 	.word	0x0800ac1d
 800abd8:	0800ac51 	.word	0x0800ac51
 800abdc:	0800ac85 	.word	0x0800ac85
 800abe0:	0800acb9 	.word	0x0800acb9
 800abe4:	0800aced 	.word	0x0800aced
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00b      	beq.n	800ac0c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	7c12      	ldrb	r2, [r2, #16]
 800ac00:	f107 0108 	add.w	r1, r7, #8
 800ac04:	4610      	mov	r0, r2
 800ac06:	4798      	blx	r3
 800ac08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac0a:	e091      	b.n	800ad30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac0c:	6839      	ldr	r1, [r7, #0]
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 facb 	bl	800b1aa <USBD_CtlError>
            err++;
 800ac14:	7afb      	ldrb	r3, [r7, #11]
 800ac16:	3301      	adds	r3, #1
 800ac18:	72fb      	strb	r3, [r7, #11]
          break;
 800ac1a:	e089      	b.n	800ad30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d00b      	beq.n	800ac40 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	687a      	ldr	r2, [r7, #4]
 800ac32:	7c12      	ldrb	r2, [r2, #16]
 800ac34:	f107 0108 	add.w	r1, r7, #8
 800ac38:	4610      	mov	r0, r2
 800ac3a:	4798      	blx	r3
 800ac3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac3e:	e077      	b.n	800ad30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac40:	6839      	ldr	r1, [r7, #0]
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fab1 	bl	800b1aa <USBD_CtlError>
            err++;
 800ac48:	7afb      	ldrb	r3, [r7, #11]
 800ac4a:	3301      	adds	r3, #1
 800ac4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ac4e:	e06f      	b.n	800ad30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d00b      	beq.n	800ac74 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	7c12      	ldrb	r2, [r2, #16]
 800ac68:	f107 0108 	add.w	r1, r7, #8
 800ac6c:	4610      	mov	r0, r2
 800ac6e:	4798      	blx	r3
 800ac70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac72:	e05d      	b.n	800ad30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac74:	6839      	ldr	r1, [r7, #0]
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 fa97 	bl	800b1aa <USBD_CtlError>
            err++;
 800ac7c:	7afb      	ldrb	r3, [r7, #11]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	72fb      	strb	r3, [r7, #11]
          break;
 800ac82:	e055      	b.n	800ad30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac8a:	691b      	ldr	r3, [r3, #16]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00b      	beq.n	800aca8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac96:	691b      	ldr	r3, [r3, #16]
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	7c12      	ldrb	r2, [r2, #16]
 800ac9c:	f107 0108 	add.w	r1, r7, #8
 800aca0:	4610      	mov	r0, r2
 800aca2:	4798      	blx	r3
 800aca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aca6:	e043      	b.n	800ad30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aca8:	6839      	ldr	r1, [r7, #0]
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fa7d 	bl	800b1aa <USBD_CtlError>
            err++;
 800acb0:	7afb      	ldrb	r3, [r7, #11]
 800acb2:	3301      	adds	r3, #1
 800acb4:	72fb      	strb	r3, [r7, #11]
          break;
 800acb6:	e03b      	b.n	800ad30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acbe:	695b      	ldr	r3, [r3, #20]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00b      	beq.n	800acdc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acca:	695b      	ldr	r3, [r3, #20]
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	7c12      	ldrb	r2, [r2, #16]
 800acd0:	f107 0108 	add.w	r1, r7, #8
 800acd4:	4610      	mov	r0, r2
 800acd6:	4798      	blx	r3
 800acd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acda:	e029      	b.n	800ad30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acdc:	6839      	ldr	r1, [r7, #0]
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fa63 	bl	800b1aa <USBD_CtlError>
            err++;
 800ace4:	7afb      	ldrb	r3, [r7, #11]
 800ace6:	3301      	adds	r3, #1
 800ace8:	72fb      	strb	r3, [r7, #11]
          break;
 800acea:	e021      	b.n	800ad30 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acf2:	699b      	ldr	r3, [r3, #24]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d00b      	beq.n	800ad10 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acfe:	699b      	ldr	r3, [r3, #24]
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	7c12      	ldrb	r2, [r2, #16]
 800ad04:	f107 0108 	add.w	r1, r7, #8
 800ad08:	4610      	mov	r0, r2
 800ad0a:	4798      	blx	r3
 800ad0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad0e:	e00f      	b.n	800ad30 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad10:	6839      	ldr	r1, [r7, #0]
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fa49 	bl	800b1aa <USBD_CtlError>
            err++;
 800ad18:	7afb      	ldrb	r3, [r7, #11]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad1e:	e007      	b.n	800ad30 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ad20:	6839      	ldr	r1, [r7, #0]
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 fa41 	bl	800b1aa <USBD_CtlError>
          err++;
 800ad28:	7afb      	ldrb	r3, [r7, #11]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ad2e:	bf00      	nop
      }
      break;
 800ad30:	e037      	b.n	800ada2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	7c1b      	ldrb	r3, [r3, #16]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d109      	bne.n	800ad4e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad42:	f107 0208 	add.w	r2, r7, #8
 800ad46:	4610      	mov	r0, r2
 800ad48:	4798      	blx	r3
 800ad4a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad4c:	e029      	b.n	800ada2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad4e:	6839      	ldr	r1, [r7, #0]
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 fa2a 	bl	800b1aa <USBD_CtlError>
        err++;
 800ad56:	7afb      	ldrb	r3, [r7, #11]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	72fb      	strb	r3, [r7, #11]
      break;
 800ad5c:	e021      	b.n	800ada2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	7c1b      	ldrb	r3, [r3, #16]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10d      	bne.n	800ad82 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad6e:	f107 0208 	add.w	r2, r7, #8
 800ad72:	4610      	mov	r0, r2
 800ad74:	4798      	blx	r3
 800ad76:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	2207      	movs	r2, #7
 800ad7e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad80:	e00f      	b.n	800ada2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad82:	6839      	ldr	r1, [r7, #0]
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 fa10 	bl	800b1aa <USBD_CtlError>
        err++;
 800ad8a:	7afb      	ldrb	r3, [r7, #11]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	72fb      	strb	r3, [r7, #11]
      break;
 800ad90:	e007      	b.n	800ada2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ad92:	6839      	ldr	r1, [r7, #0]
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 fa08 	bl	800b1aa <USBD_CtlError>
      err++;
 800ad9a:	7afb      	ldrb	r3, [r7, #11]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	72fb      	strb	r3, [r7, #11]
      break;
 800ada0:	bf00      	nop
  }

  if (err != 0U)
 800ada2:	7afb      	ldrb	r3, [r7, #11]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d11e      	bne.n	800ade6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	88db      	ldrh	r3, [r3, #6]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d016      	beq.n	800adde <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800adb0:	893b      	ldrh	r3, [r7, #8]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d00e      	beq.n	800add4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	88da      	ldrh	r2, [r3, #6]
 800adba:	893b      	ldrh	r3, [r7, #8]
 800adbc:	4293      	cmp	r3, r2
 800adbe:	bf28      	it	cs
 800adc0:	4613      	movcs	r3, r2
 800adc2:	b29b      	uxth	r3, r3
 800adc4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800adc6:	893b      	ldrh	r3, [r7, #8]
 800adc8:	461a      	mov	r2, r3
 800adca:	68f9      	ldr	r1, [r7, #12]
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 fa69 	bl	800b2a4 <USBD_CtlSendData>
 800add2:	e009      	b.n	800ade8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800add4:	6839      	ldr	r1, [r7, #0]
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f9e7 	bl	800b1aa <USBD_CtlError>
 800addc:	e004      	b.n	800ade8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 fac1 	bl	800b366 <USBD_CtlSendStatus>
 800ade4:	e000      	b.n	800ade8 <USBD_GetDescriptor+0x2cc>
    return;
 800ade6:	bf00      	nop
  }
}
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop

0800adf0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	889b      	ldrh	r3, [r3, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d131      	bne.n	800ae66 <USBD_SetAddress+0x76>
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	88db      	ldrh	r3, [r3, #6]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d12d      	bne.n	800ae66 <USBD_SetAddress+0x76>
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	885b      	ldrh	r3, [r3, #2]
 800ae0e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ae10:	d829      	bhi.n	800ae66 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	885b      	ldrh	r3, [r3, #2]
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	2b03      	cmp	r3, #3
 800ae28:	d104      	bne.n	800ae34 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ae2a:	6839      	ldr	r1, [r7, #0]
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 f9bc 	bl	800b1aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae32:	e01d      	b.n	800ae70 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	7bfa      	ldrb	r2, [r7, #15]
 800ae38:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae3c:	7bfb      	ldrb	r3, [r7, #15]
 800ae3e:	4619      	mov	r1, r3
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 ff7b 	bl	800bd3c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 fa8d 	bl	800b366 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae4c:	7bfb      	ldrb	r3, [r7, #15]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d004      	beq.n	800ae5c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2202      	movs	r2, #2
 800ae56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae5a:	e009      	b.n	800ae70 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2201      	movs	r2, #1
 800ae60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae64:	e004      	b.n	800ae70 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae66:	6839      	ldr	r1, [r7, #0]
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 f99e 	bl	800b1aa <USBD_CtlError>
  }
}
 800ae6e:	bf00      	nop
 800ae70:	bf00      	nop
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	885b      	ldrh	r3, [r3, #2]
 800ae8a:	b2da      	uxtb	r2, r3
 800ae8c:	4b4e      	ldr	r3, [pc, #312]	@ (800afc8 <USBD_SetConfig+0x150>)
 800ae8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ae90:	4b4d      	ldr	r3, [pc, #308]	@ (800afc8 <USBD_SetConfig+0x150>)
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d905      	bls.n	800aea4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ae98:	6839      	ldr	r1, [r7, #0]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 f985 	bl	800b1aa <USBD_CtlError>
    return USBD_FAIL;
 800aea0:	2303      	movs	r3, #3
 800aea2:	e08c      	b.n	800afbe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	d002      	beq.n	800aeb6 <USBD_SetConfig+0x3e>
 800aeb0:	2b03      	cmp	r3, #3
 800aeb2:	d029      	beq.n	800af08 <USBD_SetConfig+0x90>
 800aeb4:	e075      	b.n	800afa2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aeb6:	4b44      	ldr	r3, [pc, #272]	@ (800afc8 <USBD_SetConfig+0x150>)
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d020      	beq.n	800af00 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aebe:	4b42      	ldr	r3, [pc, #264]	@ (800afc8 <USBD_SetConfig+0x150>)
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	461a      	mov	r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aec8:	4b3f      	ldr	r3, [pc, #252]	@ (800afc8 <USBD_SetConfig+0x150>)
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	4619      	mov	r1, r3
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f7fe ffcd 	bl	8009e6e <USBD_SetClassConfig>
 800aed4:	4603      	mov	r3, r0
 800aed6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aed8:	7bfb      	ldrb	r3, [r7, #15]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d008      	beq.n	800aef0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 f962 	bl	800b1aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2202      	movs	r2, #2
 800aeea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aeee:	e065      	b.n	800afbc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fa38 	bl	800b366 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2203      	movs	r2, #3
 800aefa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aefe:	e05d      	b.n	800afbc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 fa30 	bl	800b366 <USBD_CtlSendStatus>
      break;
 800af06:	e059      	b.n	800afbc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800af08:	4b2f      	ldr	r3, [pc, #188]	@ (800afc8 <USBD_SetConfig+0x150>)
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d112      	bne.n	800af36 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2202      	movs	r2, #2
 800af14:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800af18:	4b2b      	ldr	r3, [pc, #172]	@ (800afc8 <USBD_SetConfig+0x150>)
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	461a      	mov	r2, r3
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af22:	4b29      	ldr	r3, [pc, #164]	@ (800afc8 <USBD_SetConfig+0x150>)
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	4619      	mov	r1, r3
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f7fe ffbc 	bl	8009ea6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fa19 	bl	800b366 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af34:	e042      	b.n	800afbc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800af36:	4b24      	ldr	r3, [pc, #144]	@ (800afc8 <USBD_SetConfig+0x150>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	429a      	cmp	r2, r3
 800af42:	d02a      	beq.n	800af9a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	b2db      	uxtb	r3, r3
 800af4a:	4619      	mov	r1, r3
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f7fe ffaa 	bl	8009ea6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800af52:	4b1d      	ldr	r3, [pc, #116]	@ (800afc8 <USBD_SetConfig+0x150>)
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	461a      	mov	r2, r3
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af5c:	4b1a      	ldr	r3, [pc, #104]	@ (800afc8 <USBD_SetConfig+0x150>)
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	4619      	mov	r1, r3
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7fe ff83 	bl	8009e6e <USBD_SetClassConfig>
 800af68:	4603      	mov	r3, r0
 800af6a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800af6c:	7bfb      	ldrb	r3, [r7, #15]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d00f      	beq.n	800af92 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800af72:	6839      	ldr	r1, [r7, #0]
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 f918 	bl	800b1aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	4619      	mov	r1, r3
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7fe ff8f 	bl	8009ea6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2202      	movs	r2, #2
 800af8c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800af90:	e014      	b.n	800afbc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af92:	6878      	ldr	r0, [r7, #4]
 800af94:	f000 f9e7 	bl	800b366 <USBD_CtlSendStatus>
      break;
 800af98:	e010      	b.n	800afbc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f9e3 	bl	800b366 <USBD_CtlSendStatus>
      break;
 800afa0:	e00c      	b.n	800afbc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800afa2:	6839      	ldr	r1, [r7, #0]
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 f900 	bl	800b1aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afaa:	4b07      	ldr	r3, [pc, #28]	@ (800afc8 <USBD_SetConfig+0x150>)
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	4619      	mov	r1, r3
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f7fe ff78 	bl	8009ea6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800afb6:	2303      	movs	r3, #3
 800afb8:	73fb      	strb	r3, [r7, #15]
      break;
 800afba:	bf00      	nop
  }

  return ret;
 800afbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	2000099c 	.word	0x2000099c

0800afcc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	88db      	ldrh	r3, [r3, #6]
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d004      	beq.n	800afe8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800afde:	6839      	ldr	r1, [r7, #0]
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 f8e2 	bl	800b1aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800afe6:	e023      	b.n	800b030 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	2b02      	cmp	r3, #2
 800aff2:	dc02      	bgt.n	800affa <USBD_GetConfig+0x2e>
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	dc03      	bgt.n	800b000 <USBD_GetConfig+0x34>
 800aff8:	e015      	b.n	800b026 <USBD_GetConfig+0x5a>
 800affa:	2b03      	cmp	r3, #3
 800affc:	d00b      	beq.n	800b016 <USBD_GetConfig+0x4a>
 800affe:	e012      	b.n	800b026 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	3308      	adds	r3, #8
 800b00a:	2201      	movs	r2, #1
 800b00c:	4619      	mov	r1, r3
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f948 	bl	800b2a4 <USBD_CtlSendData>
        break;
 800b014:	e00c      	b.n	800b030 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	3304      	adds	r3, #4
 800b01a:	2201      	movs	r2, #1
 800b01c:	4619      	mov	r1, r3
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 f940 	bl	800b2a4 <USBD_CtlSendData>
        break;
 800b024:	e004      	b.n	800b030 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b026:	6839      	ldr	r1, [r7, #0]
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 f8be 	bl	800b1aa <USBD_CtlError>
        break;
 800b02e:	bf00      	nop
}
 800b030:	bf00      	nop
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	3b01      	subs	r3, #1
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	d81e      	bhi.n	800b08e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	88db      	ldrh	r3, [r3, #6]
 800b054:	2b02      	cmp	r3, #2
 800b056:	d004      	beq.n	800b062 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b058:	6839      	ldr	r1, [r7, #0]
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 f8a5 	bl	800b1aa <USBD_CtlError>
        break;
 800b060:	e01a      	b.n	800b098 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2201      	movs	r2, #1
 800b066:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d005      	beq.n	800b07e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	f043 0202 	orr.w	r2, r3, #2
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	330c      	adds	r3, #12
 800b082:	2202      	movs	r2, #2
 800b084:	4619      	mov	r1, r3
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 f90c 	bl	800b2a4 <USBD_CtlSendData>
      break;
 800b08c:	e004      	b.n	800b098 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b08e:	6839      	ldr	r1, [r7, #0]
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 f88a 	bl	800b1aa <USBD_CtlError>
      break;
 800b096:	bf00      	nop
  }
}
 800b098:	bf00      	nop
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}

0800b0a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	885b      	ldrh	r3, [r3, #2]
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d107      	bne.n	800b0c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 f953 	bl	800b366 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b0c0:	e013      	b.n	800b0ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	885b      	ldrh	r3, [r3, #2]
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d10b      	bne.n	800b0e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	889b      	ldrh	r3, [r3, #4]
 800b0ce:	0a1b      	lsrs	r3, r3, #8
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	b2da      	uxtb	r2, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f000 f943 	bl	800b366 <USBD_CtlSendStatus>
}
 800b0e0:	e003      	b.n	800b0ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f860 	bl	800b1aa <USBD_CtlError>
}
 800b0ea:	bf00      	nop
 800b0ec:	3708      	adds	r7, #8
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b082      	sub	sp, #8
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b102:	b2db      	uxtb	r3, r3
 800b104:	3b01      	subs	r3, #1
 800b106:	2b02      	cmp	r3, #2
 800b108:	d80b      	bhi.n	800b122 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	885b      	ldrh	r3, [r3, #2]
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d10c      	bne.n	800b12c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2200      	movs	r2, #0
 800b116:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 f923 	bl	800b366 <USBD_CtlSendStatus>
      }
      break;
 800b120:	e004      	b.n	800b12c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b122:	6839      	ldr	r1, [r7, #0]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 f840 	bl	800b1aa <USBD_CtlError>
      break;
 800b12a:	e000      	b.n	800b12e <USBD_ClrFeature+0x3c>
      break;
 800b12c:	bf00      	nop
  }
}
 800b12e:	bf00      	nop
 800b130:	3708      	adds	r7, #8
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b084      	sub	sp, #16
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
 800b13e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	781a      	ldrb	r2, [r3, #0]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	3301      	adds	r3, #1
 800b150:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	781a      	ldrb	r2, [r3, #0]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	3301      	adds	r3, #1
 800b15e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b160:	68f8      	ldr	r0, [r7, #12]
 800b162:	f7ff fa3d 	bl	800a5e0 <SWAPBYTE>
 800b166:	4603      	mov	r3, r0
 800b168:	461a      	mov	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	3301      	adds	r3, #1
 800b172:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	3301      	adds	r3, #1
 800b178:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f7ff fa30 	bl	800a5e0 <SWAPBYTE>
 800b180:	4603      	mov	r3, r0
 800b182:	461a      	mov	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	3301      	adds	r3, #1
 800b18c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	3301      	adds	r3, #1
 800b192:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f7ff fa23 	bl	800a5e0 <SWAPBYTE>
 800b19a:	4603      	mov	r3, r0
 800b19c:	461a      	mov	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	80da      	strh	r2, [r3, #6]
}
 800b1a2:	bf00      	nop
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b082      	sub	sp, #8
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1b4:	2180      	movs	r1, #128	@ 0x80
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fd56 	bl	800bc68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b1bc:	2100      	movs	r1, #0
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fd52 	bl	800bc68 <USBD_LL_StallEP>
}
 800b1c4:	bf00      	nop
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b086      	sub	sp, #24
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d042      	beq.n	800b268 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b1e6:	6938      	ldr	r0, [r7, #16]
 800b1e8:	f000 f842 	bl	800b270 <USBD_GetLen>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	005b      	lsls	r3, r3, #1
 800b1f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1f6:	d808      	bhi.n	800b20a <USBD_GetString+0x3e>
 800b1f8:	6938      	ldr	r0, [r7, #16]
 800b1fa:	f000 f839 	bl	800b270 <USBD_GetLen>
 800b1fe:	4603      	mov	r3, r0
 800b200:	3301      	adds	r3, #1
 800b202:	b29b      	uxth	r3, r3
 800b204:	005b      	lsls	r3, r3, #1
 800b206:	b29a      	uxth	r2, r3
 800b208:	e001      	b.n	800b20e <USBD_GetString+0x42>
 800b20a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b212:	7dfb      	ldrb	r3, [r7, #23]
 800b214:	68ba      	ldr	r2, [r7, #8]
 800b216:	4413      	add	r3, r2
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	7812      	ldrb	r2, [r2, #0]
 800b21c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b21e:	7dfb      	ldrb	r3, [r7, #23]
 800b220:	3301      	adds	r3, #1
 800b222:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b224:	7dfb      	ldrb	r3, [r7, #23]
 800b226:	68ba      	ldr	r2, [r7, #8]
 800b228:	4413      	add	r3, r2
 800b22a:	2203      	movs	r2, #3
 800b22c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b22e:	7dfb      	ldrb	r3, [r7, #23]
 800b230:	3301      	adds	r3, #1
 800b232:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b234:	e013      	b.n	800b25e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b236:	7dfb      	ldrb	r3, [r7, #23]
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	4413      	add	r3, r2
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	7812      	ldrb	r2, [r2, #0]
 800b240:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	3301      	adds	r3, #1
 800b246:	613b      	str	r3, [r7, #16]
    idx++;
 800b248:	7dfb      	ldrb	r3, [r7, #23]
 800b24a:	3301      	adds	r3, #1
 800b24c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b24e:	7dfb      	ldrb	r3, [r7, #23]
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	4413      	add	r3, r2
 800b254:	2200      	movs	r2, #0
 800b256:	701a      	strb	r2, [r3, #0]
    idx++;
 800b258:	7dfb      	ldrb	r3, [r7, #23]
 800b25a:	3301      	adds	r3, #1
 800b25c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1e7      	bne.n	800b236 <USBD_GetString+0x6a>
 800b266:	e000      	b.n	800b26a <USBD_GetString+0x9e>
    return;
 800b268:	bf00      	nop
  }
}
 800b26a:	3718      	adds	r7, #24
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b278:	2300      	movs	r3, #0
 800b27a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b280:	e005      	b.n	800b28e <USBD_GetLen+0x1e>
  {
    len++;
 800b282:	7bfb      	ldrb	r3, [r7, #15]
 800b284:	3301      	adds	r3, #1
 800b286:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	3301      	adds	r3, #1
 800b28c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1f5      	bne.n	800b282 <USBD_GetLen+0x12>
  }

  return len;
 800b296:	7bfb      	ldrb	r3, [r7, #15]
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	68f8      	ldr	r0, [r7, #12]
 800b2d2:	f000 fd52 	bl	800bd7a <USBD_LL_Transmit>

  return USBD_OK;
 800b2d6:	2300      	movs	r3, #0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	60f8      	str	r0, [r7, #12]
 800b2e8:	60b9      	str	r1, [r7, #8]
 800b2ea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	68ba      	ldr	r2, [r7, #8]
 800b2f0:	2100      	movs	r1, #0
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f000 fd41 	bl	800bd7a <USBD_LL_Transmit>

  return USBD_OK;
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b302:	b580      	push	{r7, lr}
 800b304:	b084      	sub	sp, #16
 800b306:	af00      	add	r7, sp, #0
 800b308:	60f8      	str	r0, [r7, #12]
 800b30a:	60b9      	str	r1, [r7, #8]
 800b30c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2203      	movs	r2, #3
 800b312:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	68ba      	ldr	r2, [r7, #8]
 800b322:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	68ba      	ldr	r2, [r7, #8]
 800b332:	2100      	movs	r1, #0
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f000 fd41 	bl	800bdbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b33a:	2300      	movs	r3, #0
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3710      	adds	r7, #16
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	60b9      	str	r1, [r7, #8]
 800b34e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	68ba      	ldr	r2, [r7, #8]
 800b354:	2100      	movs	r1, #0
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f000 fd30 	bl	800bdbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3710      	adds	r7, #16
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b082      	sub	sp, #8
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2204      	movs	r2, #4
 800b372:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b376:	2300      	movs	r3, #0
 800b378:	2200      	movs	r2, #0
 800b37a:	2100      	movs	r1, #0
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 fcfc 	bl	800bd7a <USBD_LL_Transmit>

  return USBD_OK;
 800b382:	2300      	movs	r3, #0
}
 800b384:	4618      	mov	r0, r3
 800b386:	3708      	adds	r7, #8
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2205      	movs	r2, #5
 800b398:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b39c:	2300      	movs	r3, #0
 800b39e:	2200      	movs	r2, #0
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 fd0a 	bl	800bdbc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b3a8:	2300      	movs	r3, #0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3708      	adds	r7, #8
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
	...

0800b3b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	4912      	ldr	r1, [pc, #72]	@ (800b404 <MX_USB_DEVICE_Init+0x50>)
 800b3bc:	4812      	ldr	r0, [pc, #72]	@ (800b408 <MX_USB_DEVICE_Init+0x54>)
 800b3be:	f7fe fcd9 	bl	8009d74 <USBD_Init>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d001      	beq.n	800b3cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b3c8:	f7f5 fcb8 	bl	8000d3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b3cc:	490f      	ldr	r1, [pc, #60]	@ (800b40c <MX_USB_DEVICE_Init+0x58>)
 800b3ce:	480e      	ldr	r0, [pc, #56]	@ (800b408 <MX_USB_DEVICE_Init+0x54>)
 800b3d0:	f7fe fd00 	bl	8009dd4 <USBD_RegisterClass>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d001      	beq.n	800b3de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b3da:	f7f5 fcaf 	bl	8000d3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b3de:	490c      	ldr	r1, [pc, #48]	@ (800b410 <MX_USB_DEVICE_Init+0x5c>)
 800b3e0:	4809      	ldr	r0, [pc, #36]	@ (800b408 <MX_USB_DEVICE_Init+0x54>)
 800b3e2:	f7fe fbf7 	bl	8009bd4 <USBD_CDC_RegisterInterface>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d001      	beq.n	800b3f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b3ec:	f7f5 fca6 	bl	8000d3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b3f0:	4805      	ldr	r0, [pc, #20]	@ (800b408 <MX_USB_DEVICE_Init+0x54>)
 800b3f2:	f7fe fd25 	bl	8009e40 <USBD_Start>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d001      	beq.n	800b400 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b3fc:	f7f5 fc9e 	bl	8000d3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b400:	bf00      	nop
 800b402:	bd80      	pop	{r7, pc}
 800b404:	200000e0 	.word	0x200000e0
 800b408:	200009a0 	.word	0x200009a0
 800b40c:	20000044 	.word	0x20000044
 800b410:	200000cc 	.word	0x200000cc

0800b414 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b418:	2200      	movs	r2, #0
 800b41a:	4905      	ldr	r1, [pc, #20]	@ (800b430 <CDC_Init_FS+0x1c>)
 800b41c:	4805      	ldr	r0, [pc, #20]	@ (800b434 <CDC_Init_FS+0x20>)
 800b41e:	f7fe fbf3 	bl	8009c08 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b422:	4905      	ldr	r1, [pc, #20]	@ (800b438 <CDC_Init_FS+0x24>)
 800b424:	4803      	ldr	r0, [pc, #12]	@ (800b434 <CDC_Init_FS+0x20>)
 800b426:	f7fe fc11 	bl	8009c4c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b42a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	20000e7c 	.word	0x20000e7c
 800b434:	200009a0 	.word	0x200009a0
 800b438:	20000c7c 	.word	0x20000c7c

0800b43c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b43c:	b480      	push	{r7}
 800b43e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b440:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b442:	4618      	mov	r0, r3
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	4603      	mov	r3, r0
 800b454:	6039      	str	r1, [r7, #0]
 800b456:	71fb      	strb	r3, [r7, #7]
 800b458:	4613      	mov	r3, r2
 800b45a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b45c:	79fb      	ldrb	r3, [r7, #7]
 800b45e:	2b23      	cmp	r3, #35	@ 0x23
 800b460:	f200 8098 	bhi.w	800b594 <CDC_Control_FS+0x148>
 800b464:	a201      	add	r2, pc, #4	@ (adr r2, 800b46c <CDC_Control_FS+0x20>)
 800b466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b46a:	bf00      	nop
 800b46c:	0800b595 	.word	0x0800b595
 800b470:	0800b595 	.word	0x0800b595
 800b474:	0800b595 	.word	0x0800b595
 800b478:	0800b595 	.word	0x0800b595
 800b47c:	0800b595 	.word	0x0800b595
 800b480:	0800b595 	.word	0x0800b595
 800b484:	0800b595 	.word	0x0800b595
 800b488:	0800b595 	.word	0x0800b595
 800b48c:	0800b595 	.word	0x0800b595
 800b490:	0800b595 	.word	0x0800b595
 800b494:	0800b595 	.word	0x0800b595
 800b498:	0800b595 	.word	0x0800b595
 800b49c:	0800b595 	.word	0x0800b595
 800b4a0:	0800b595 	.word	0x0800b595
 800b4a4:	0800b595 	.word	0x0800b595
 800b4a8:	0800b595 	.word	0x0800b595
 800b4ac:	0800b595 	.word	0x0800b595
 800b4b0:	0800b595 	.word	0x0800b595
 800b4b4:	0800b595 	.word	0x0800b595
 800b4b8:	0800b595 	.word	0x0800b595
 800b4bc:	0800b595 	.word	0x0800b595
 800b4c0:	0800b595 	.word	0x0800b595
 800b4c4:	0800b595 	.word	0x0800b595
 800b4c8:	0800b595 	.word	0x0800b595
 800b4cc:	0800b595 	.word	0x0800b595
 800b4d0:	0800b595 	.word	0x0800b595
 800b4d4:	0800b595 	.word	0x0800b595
 800b4d8:	0800b595 	.word	0x0800b595
 800b4dc:	0800b595 	.word	0x0800b595
 800b4e0:	0800b595 	.word	0x0800b595
 800b4e4:	0800b595 	.word	0x0800b595
 800b4e8:	0800b595 	.word	0x0800b595
 800b4ec:	0800b4fd 	.word	0x0800b4fd
 800b4f0:	0800b541 	.word	0x0800b541
 800b4f4:	0800b595 	.word	0x0800b595
 800b4f8:	0800b595 	.word	0x0800b595
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	461a      	mov	r2, r3
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	3301      	adds	r3, #1
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	021b      	lsls	r3, r3, #8
 800b50a:	431a      	orrs	r2, r3
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	3302      	adds	r3, #2
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	041b      	lsls	r3, r3, #16
 800b514:	431a      	orrs	r2, r3
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	3303      	adds	r3, #3
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	061b      	lsls	r3, r3, #24
 800b51e:	4313      	orrs	r3, r2
 800b520:	461a      	mov	r2, r3
 800b522:	4b20      	ldr	r3, [pc, #128]	@ (800b5a4 <CDC_Control_FS+0x158>)
 800b524:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	791a      	ldrb	r2, [r3, #4]
 800b52a:	4b1e      	ldr	r3, [pc, #120]	@ (800b5a4 <CDC_Control_FS+0x158>)
 800b52c:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	795a      	ldrb	r2, [r3, #5]
 800b532:	4b1c      	ldr	r3, [pc, #112]	@ (800b5a4 <CDC_Control_FS+0x158>)
 800b534:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	799a      	ldrb	r2, [r3, #6]
 800b53a:	4b1a      	ldr	r3, [pc, #104]	@ (800b5a4 <CDC_Control_FS+0x158>)
 800b53c:	719a      	strb	r2, [r3, #6]
    break;
 800b53e:	e02a      	b.n	800b596 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800b540:	4b18      	ldr	r3, [pc, #96]	@ (800b5a4 <CDC_Control_FS+0x158>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	b2da      	uxtb	r2, r3
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800b54a:	4b16      	ldr	r3, [pc, #88]	@ (800b5a4 <CDC_Control_FS+0x158>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	0a1a      	lsrs	r2, r3, #8
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	3301      	adds	r3, #1
 800b554:	b2d2      	uxtb	r2, r2
 800b556:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800b558:	4b12      	ldr	r3, [pc, #72]	@ (800b5a4 <CDC_Control_FS+0x158>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	0c1a      	lsrs	r2, r3, #16
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	3302      	adds	r3, #2
 800b562:	b2d2      	uxtb	r2, r2
 800b564:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800b566:	4b0f      	ldr	r3, [pc, #60]	@ (800b5a4 <CDC_Control_FS+0x158>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	0e1a      	lsrs	r2, r3, #24
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	3303      	adds	r3, #3
 800b570:	b2d2      	uxtb	r2, r2
 800b572:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	3304      	adds	r3, #4
 800b578:	4a0a      	ldr	r2, [pc, #40]	@ (800b5a4 <CDC_Control_FS+0x158>)
 800b57a:	7912      	ldrb	r2, [r2, #4]
 800b57c:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	3305      	adds	r3, #5
 800b582:	4a08      	ldr	r2, [pc, #32]	@ (800b5a4 <CDC_Control_FS+0x158>)
 800b584:	7952      	ldrb	r2, [r2, #5]
 800b586:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	3306      	adds	r3, #6
 800b58c:	4a05      	ldr	r2, [pc, #20]	@ (800b5a4 <CDC_Control_FS+0x158>)
 800b58e:	7992      	ldrb	r2, [r2, #6]
 800b590:	701a      	strb	r2, [r3, #0]
    break;
 800b592:	e000      	b.n	800b596 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b594:	bf00      	nop
  }

  return (USBD_OK);
 800b596:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b598:	4618      	mov	r0, r3
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr
 800b5a4:	200000c4 	.word	0x200000c4

0800b5a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800b5b2:	4b0b      	ldr	r3, [pc, #44]	@ (800b5e0 <CDC_Receive_FS+0x38>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d006      	beq.n	800b5c8 <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800b5ba:	4b09      	ldr	r3, [pc, #36]	@ (800b5e0 <CDC_Receive_FS+0x38>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	6812      	ldr	r2, [r2, #0]
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b5c8:	6879      	ldr	r1, [r7, #4]
 800b5ca:	4806      	ldr	r0, [pc, #24]	@ (800b5e4 <CDC_Receive_FS+0x3c>)
 800b5cc:	f7fe fb3e 	bl	8009c4c <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b5d0:	4804      	ldr	r0, [pc, #16]	@ (800b5e4 <CDC_Receive_FS+0x3c>)
 800b5d2:	f7fe fb99 	bl	8009d08 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800b5d6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	2000107c 	.word	0x2000107c
 800b5e4:	200009a0 	.word	0x200009a0

0800b5e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b5f8:	4b0d      	ldr	r3, [pc, #52]	@ (800b630 <CDC_Transmit_FS+0x48>)
 800b5fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b5fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b606:	2b00      	cmp	r3, #0
 800b608:	d001      	beq.n	800b60e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b60a:	2301      	movs	r3, #1
 800b60c:	e00b      	b.n	800b626 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b60e:	887b      	ldrh	r3, [r7, #2]
 800b610:	461a      	mov	r2, r3
 800b612:	6879      	ldr	r1, [r7, #4]
 800b614:	4806      	ldr	r0, [pc, #24]	@ (800b630 <CDC_Transmit_FS+0x48>)
 800b616:	f7fe faf7 	bl	8009c08 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b61a:	4805      	ldr	r0, [pc, #20]	@ (800b630 <CDC_Transmit_FS+0x48>)
 800b61c:	f7fe fb34 	bl	8009c88 <USBD_CDC_TransmitPacket>
 800b620:	4603      	mov	r3, r0
 800b622:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b624:	7bfb      	ldrb	r3, [r7, #15]
}
 800b626:	4618      	mov	r0, r3
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	200009a0 	.word	0x200009a0

0800b634 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b634:	b480      	push	{r7}
 800b636:	b087      	sub	sp, #28
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	4613      	mov	r3, r2
 800b640:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b642:	2300      	movs	r3, #0
 800b644:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b646:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	371c      	adds	r7, #28
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr
	...

0800b658 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800b660:	4a04      	ldr	r2, [pc, #16]	@ (800b674 <CDC_Attach_Rx+0x1c>)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6013      	str	r3, [r2, #0]
}
 800b666:	bf00      	nop
 800b668:	370c      	adds	r7, #12
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop
 800b674:	2000107c 	.word	0x2000107c

0800b678 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	4603      	mov	r3, r0
 800b680:	6039      	str	r1, [r7, #0]
 800b682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	2212      	movs	r2, #18
 800b688:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b68a:	4b03      	ldr	r3, [pc, #12]	@ (800b698 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr
 800b698:	200000fc 	.word	0x200000fc

0800b69c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	6039      	str	r1, [r7, #0]
 800b6a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	2204      	movs	r2, #4
 800b6ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b6ae:	4b03      	ldr	r3, [pc, #12]	@ (800b6bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr
 800b6bc:	20000110 	.word	0x20000110

0800b6c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	6039      	str	r1, [r7, #0]
 800b6ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6cc:	79fb      	ldrb	r3, [r7, #7]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d105      	bne.n	800b6de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b6d2:	683a      	ldr	r2, [r7, #0]
 800b6d4:	4907      	ldr	r1, [pc, #28]	@ (800b6f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b6d6:	4808      	ldr	r0, [pc, #32]	@ (800b6f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b6d8:	f7ff fd78 	bl	800b1cc <USBD_GetString>
 800b6dc:	e004      	b.n	800b6e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b6de:	683a      	ldr	r2, [r7, #0]
 800b6e0:	4904      	ldr	r1, [pc, #16]	@ (800b6f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800b6e2:	4805      	ldr	r0, [pc, #20]	@ (800b6f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800b6e4:	f7ff fd72 	bl	800b1cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b6e8:	4b02      	ldr	r3, [pc, #8]	@ (800b6f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	20001080 	.word	0x20001080
 800b6f8:	0800bf1c 	.word	0x0800bf1c

0800b6fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	4603      	mov	r3, r0
 800b704:	6039      	str	r1, [r7, #0]
 800b706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b708:	683a      	ldr	r2, [r7, #0]
 800b70a:	4904      	ldr	r1, [pc, #16]	@ (800b71c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b70c:	4804      	ldr	r0, [pc, #16]	@ (800b720 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b70e:	f7ff fd5d 	bl	800b1cc <USBD_GetString>
  return USBD_StrDesc;
 800b712:	4b02      	ldr	r3, [pc, #8]	@ (800b71c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b714:	4618      	mov	r0, r3
 800b716:	3708      	adds	r7, #8
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	20001080 	.word	0x20001080
 800b720:	0800bf34 	.word	0x0800bf34

0800b724 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	4603      	mov	r3, r0
 800b72c:	6039      	str	r1, [r7, #0]
 800b72e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	221a      	movs	r2, #26
 800b734:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b736:	f000 f843 	bl	800b7c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b73a:	4b02      	ldr	r3, [pc, #8]	@ (800b744 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	20000114 	.word	0x20000114

0800b748 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	4603      	mov	r3, r0
 800b750:	6039      	str	r1, [r7, #0]
 800b752:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b754:	79fb      	ldrb	r3, [r7, #7]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d105      	bne.n	800b766 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	4907      	ldr	r1, [pc, #28]	@ (800b77c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b75e:	4808      	ldr	r0, [pc, #32]	@ (800b780 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b760:	f7ff fd34 	bl	800b1cc <USBD_GetString>
 800b764:	e004      	b.n	800b770 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	4904      	ldr	r1, [pc, #16]	@ (800b77c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b76a:	4805      	ldr	r0, [pc, #20]	@ (800b780 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b76c:	f7ff fd2e 	bl	800b1cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b770:	4b02      	ldr	r3, [pc, #8]	@ (800b77c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b772:	4618      	mov	r0, r3
 800b774:	3708      	adds	r7, #8
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	20001080 	.word	0x20001080
 800b780:	0800bf48 	.word	0x0800bf48

0800b784 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	4603      	mov	r3, r0
 800b78c:	6039      	str	r1, [r7, #0]
 800b78e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b790:	79fb      	ldrb	r3, [r7, #7]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d105      	bne.n	800b7a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b796:	683a      	ldr	r2, [r7, #0]
 800b798:	4907      	ldr	r1, [pc, #28]	@ (800b7b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b79a:	4808      	ldr	r0, [pc, #32]	@ (800b7bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b79c:	f7ff fd16 	bl	800b1cc <USBD_GetString>
 800b7a0:	e004      	b.n	800b7ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7a2:	683a      	ldr	r2, [r7, #0]
 800b7a4:	4904      	ldr	r1, [pc, #16]	@ (800b7b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b7a6:	4805      	ldr	r0, [pc, #20]	@ (800b7bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b7a8:	f7ff fd10 	bl	800b1cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7ac:	4b02      	ldr	r3, [pc, #8]	@ (800b7b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3708      	adds	r7, #8
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	20001080 	.word	0x20001080
 800b7bc:	0800bf54 	.word	0x0800bf54

0800b7c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b084      	sub	sp, #16
 800b7c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b7c6:	4b0f      	ldr	r3, [pc, #60]	@ (800b804 <Get_SerialNum+0x44>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b7cc:	4b0e      	ldr	r3, [pc, #56]	@ (800b808 <Get_SerialNum+0x48>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b7d2:	4b0e      	ldr	r3, [pc, #56]	@ (800b80c <Get_SerialNum+0x4c>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b7d8:	68fa      	ldr	r2, [r7, #12]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4413      	add	r3, r2
 800b7de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d009      	beq.n	800b7fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b7e6:	2208      	movs	r2, #8
 800b7e8:	4909      	ldr	r1, [pc, #36]	@ (800b810 <Get_SerialNum+0x50>)
 800b7ea:	68f8      	ldr	r0, [r7, #12]
 800b7ec:	f000 f814 	bl	800b818 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b7f0:	2204      	movs	r2, #4
 800b7f2:	4908      	ldr	r1, [pc, #32]	@ (800b814 <Get_SerialNum+0x54>)
 800b7f4:	68b8      	ldr	r0, [r7, #8]
 800b7f6:	f000 f80f 	bl	800b818 <IntToUnicode>
  }
}
 800b7fa:	bf00      	nop
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	1fff7a10 	.word	0x1fff7a10
 800b808:	1fff7a14 	.word	0x1fff7a14
 800b80c:	1fff7a18 	.word	0x1fff7a18
 800b810:	20000116 	.word	0x20000116
 800b814:	20000126 	.word	0x20000126

0800b818 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b818:	b480      	push	{r7}
 800b81a:	b087      	sub	sp, #28
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	60f8      	str	r0, [r7, #12]
 800b820:	60b9      	str	r1, [r7, #8]
 800b822:	4613      	mov	r3, r2
 800b824:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b826:	2300      	movs	r3, #0
 800b828:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b82a:	2300      	movs	r3, #0
 800b82c:	75fb      	strb	r3, [r7, #23]
 800b82e:	e027      	b.n	800b880 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	0f1b      	lsrs	r3, r3, #28
 800b834:	2b09      	cmp	r3, #9
 800b836:	d80b      	bhi.n	800b850 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	0f1b      	lsrs	r3, r3, #28
 800b83c:	b2da      	uxtb	r2, r3
 800b83e:	7dfb      	ldrb	r3, [r7, #23]
 800b840:	005b      	lsls	r3, r3, #1
 800b842:	4619      	mov	r1, r3
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	440b      	add	r3, r1
 800b848:	3230      	adds	r2, #48	@ 0x30
 800b84a:	b2d2      	uxtb	r2, r2
 800b84c:	701a      	strb	r2, [r3, #0]
 800b84e:	e00a      	b.n	800b866 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	0f1b      	lsrs	r3, r3, #28
 800b854:	b2da      	uxtb	r2, r3
 800b856:	7dfb      	ldrb	r3, [r7, #23]
 800b858:	005b      	lsls	r3, r3, #1
 800b85a:	4619      	mov	r1, r3
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	440b      	add	r3, r1
 800b860:	3237      	adds	r2, #55	@ 0x37
 800b862:	b2d2      	uxtb	r2, r2
 800b864:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	011b      	lsls	r3, r3, #4
 800b86a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b86c:	7dfb      	ldrb	r3, [r7, #23]
 800b86e:	005b      	lsls	r3, r3, #1
 800b870:	3301      	adds	r3, #1
 800b872:	68ba      	ldr	r2, [r7, #8]
 800b874:	4413      	add	r3, r2
 800b876:	2200      	movs	r2, #0
 800b878:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b87a:	7dfb      	ldrb	r3, [r7, #23]
 800b87c:	3301      	adds	r3, #1
 800b87e:	75fb      	strb	r3, [r7, #23]
 800b880:	7dfa      	ldrb	r2, [r7, #23]
 800b882:	79fb      	ldrb	r3, [r7, #7]
 800b884:	429a      	cmp	r2, r3
 800b886:	d3d3      	bcc.n	800b830 <IntToUnicode+0x18>
  }
}
 800b888:	bf00      	nop
 800b88a:	bf00      	nop
 800b88c:	371c      	adds	r7, #28
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr
	...

0800b898 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b08a      	sub	sp, #40	@ 0x28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8a0:	f107 0314 	add.w	r3, r7, #20
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	601a      	str	r2, [r3, #0]
 800b8a8:	605a      	str	r2, [r3, #4]
 800b8aa:	609a      	str	r2, [r3, #8]
 800b8ac:	60da      	str	r2, [r3, #12]
 800b8ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b8b8:	d13a      	bne.n	800b930 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	613b      	str	r3, [r7, #16]
 800b8be:	4b1e      	ldr	r3, [pc, #120]	@ (800b938 <HAL_PCD_MspInit+0xa0>)
 800b8c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8c2:	4a1d      	ldr	r2, [pc, #116]	@ (800b938 <HAL_PCD_MspInit+0xa0>)
 800b8c4:	f043 0301 	orr.w	r3, r3, #1
 800b8c8:	6313      	str	r3, [r2, #48]	@ 0x30
 800b8ca:	4b1b      	ldr	r3, [pc, #108]	@ (800b938 <HAL_PCD_MspInit+0xa0>)
 800b8cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8ce:	f003 0301 	and.w	r3, r3, #1
 800b8d2:	613b      	str	r3, [r7, #16]
 800b8d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b8d6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b8da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b8dc:	2302      	movs	r3, #2
 800b8de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b8e4:	2303      	movs	r3, #3
 800b8e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b8e8:	230a      	movs	r3, #10
 800b8ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b8ec:	f107 0314 	add.w	r3, r7, #20
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	4812      	ldr	r0, [pc, #72]	@ (800b93c <HAL_PCD_MspInit+0xa4>)
 800b8f4:	f7f7 fb1a 	bl	8002f2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b8f8:	4b0f      	ldr	r3, [pc, #60]	@ (800b938 <HAL_PCD_MspInit+0xa0>)
 800b8fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8fc:	4a0e      	ldr	r2, [pc, #56]	@ (800b938 <HAL_PCD_MspInit+0xa0>)
 800b8fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b902:	6353      	str	r3, [r2, #52]	@ 0x34
 800b904:	2300      	movs	r3, #0
 800b906:	60fb      	str	r3, [r7, #12]
 800b908:	4b0b      	ldr	r3, [pc, #44]	@ (800b938 <HAL_PCD_MspInit+0xa0>)
 800b90a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b90c:	4a0a      	ldr	r2, [pc, #40]	@ (800b938 <HAL_PCD_MspInit+0xa0>)
 800b90e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b912:	6453      	str	r3, [r2, #68]	@ 0x44
 800b914:	4b08      	ldr	r3, [pc, #32]	@ (800b938 <HAL_PCD_MspInit+0xa0>)
 800b916:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b918:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b91c:	60fb      	str	r3, [r7, #12]
 800b91e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b920:	2200      	movs	r2, #0
 800b922:	2100      	movs	r1, #0
 800b924:	2043      	movs	r0, #67	@ 0x43
 800b926:	f7f6 ff2a 	bl	800277e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b92a:	2043      	movs	r0, #67	@ 0x43
 800b92c:	f7f6 ff43 	bl	80027b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b930:	bf00      	nop
 800b932:	3728      	adds	r7, #40	@ 0x28
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	40023800 	.word	0x40023800
 800b93c:	40020000 	.word	0x40020000

0800b940 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b954:	4619      	mov	r1, r3
 800b956:	4610      	mov	r0, r2
 800b958:	f7fe fabf 	bl	8009eda <USBD_LL_SetupStage>
}
 800b95c:	bf00      	nop
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	460b      	mov	r3, r1
 800b96e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b976:	78fa      	ldrb	r2, [r7, #3]
 800b978:	6879      	ldr	r1, [r7, #4]
 800b97a:	4613      	mov	r3, r2
 800b97c:	00db      	lsls	r3, r3, #3
 800b97e:	4413      	add	r3, r2
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	440b      	add	r3, r1
 800b984:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	78fb      	ldrb	r3, [r7, #3]
 800b98c:	4619      	mov	r1, r3
 800b98e:	f7fe faf9 	bl	8009f84 <USBD_LL_DataOutStage>
}
 800b992:	bf00      	nop
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b082      	sub	sp, #8
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b9ac:	78fa      	ldrb	r2, [r7, #3]
 800b9ae:	6879      	ldr	r1, [r7, #4]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	00db      	lsls	r3, r3, #3
 800b9b4:	4413      	add	r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	440b      	add	r3, r1
 800b9ba:	3320      	adds	r3, #32
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	78fb      	ldrb	r3, [r7, #3]
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	f7fe fb9b 	bl	800a0fc <USBD_LL_DataInStage>
}
 800b9c6:	bf00      	nop
 800b9c8:	3708      	adds	r7, #8
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}

0800b9ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b082      	sub	sp, #8
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7fe fcdf 	bl	800a3a0 <USBD_LL_SOF>
}
 800b9e2:	bf00      	nop
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b084      	sub	sp, #16
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	79db      	ldrb	r3, [r3, #7]
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	d001      	beq.n	800ba02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b9fe:	f7f5 f99d 	bl	8000d3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba08:	7bfa      	ldrb	r2, [r7, #15]
 800ba0a:	4611      	mov	r1, r2
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7fe fc83 	bl	800a318 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7fe fc2a 	bl	800a272 <USBD_LL_Reset>
}
 800ba1e:	bf00      	nop
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
	...

0800ba28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fe fc7e 	bl	800a338 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	6812      	ldr	r2, [r2, #0]
 800ba4a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ba4e:	f043 0301 	orr.w	r3, r3, #1
 800ba52:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	7adb      	ldrb	r3, [r3, #11]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d005      	beq.n	800ba68 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba5c:	4b04      	ldr	r3, [pc, #16]	@ (800ba70 <HAL_PCD_SuspendCallback+0x48>)
 800ba5e:	691b      	ldr	r3, [r3, #16]
 800ba60:	4a03      	ldr	r2, [pc, #12]	@ (800ba70 <HAL_PCD_SuspendCallback+0x48>)
 800ba62:	f043 0306 	orr.w	r3, r3, #6
 800ba66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ba68:	bf00      	nop
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	e000ed00 	.word	0xe000ed00

0800ba74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7fe fc74 	bl	800a370 <USBD_LL_Resume>
}
 800ba88:	bf00      	nop
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800baa2:	78fa      	ldrb	r2, [r7, #3]
 800baa4:	4611      	mov	r1, r2
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7fe fccc 	bl	800a444 <USBD_LL_IsoOUTIncomplete>
}
 800baac:	bf00      	nop
 800baae:	3708      	adds	r7, #8
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	460b      	mov	r3, r1
 800babe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bac6:	78fa      	ldrb	r2, [r7, #3]
 800bac8:	4611      	mov	r1, r2
 800baca:	4618      	mov	r0, r3
 800bacc:	f7fe fc88 	bl	800a3e0 <USBD_LL_IsoINIncomplete>
}
 800bad0:	bf00      	nop
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b082      	sub	sp, #8
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7fe fcde 	bl	800a4a8 <USBD_LL_DevConnected>
}
 800baec:	bf00      	nop
 800baee:	3708      	adds	r7, #8
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fe fcdb 	bl	800a4be <USBD_LL_DevDisconnected>
}
 800bb08:	bf00      	nop
 800bb0a:	3708      	adds	r7, #8
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b082      	sub	sp, #8
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d13c      	bne.n	800bb9a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bb20:	4a20      	ldr	r2, [pc, #128]	@ (800bba4 <USBD_LL_Init+0x94>)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4a1e      	ldr	r2, [pc, #120]	@ (800bba4 <USBD_LL_Init+0x94>)
 800bb2c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bb30:	4b1c      	ldr	r3, [pc, #112]	@ (800bba4 <USBD_LL_Init+0x94>)
 800bb32:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bb36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bb38:	4b1a      	ldr	r3, [pc, #104]	@ (800bba4 <USBD_LL_Init+0x94>)
 800bb3a:	2204      	movs	r2, #4
 800bb3c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bb3e:	4b19      	ldr	r3, [pc, #100]	@ (800bba4 <USBD_LL_Init+0x94>)
 800bb40:	2202      	movs	r2, #2
 800bb42:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bb44:	4b17      	ldr	r3, [pc, #92]	@ (800bba4 <USBD_LL_Init+0x94>)
 800bb46:	2200      	movs	r2, #0
 800bb48:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bb4a:	4b16      	ldr	r3, [pc, #88]	@ (800bba4 <USBD_LL_Init+0x94>)
 800bb4c:	2202      	movs	r2, #2
 800bb4e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bb50:	4b14      	ldr	r3, [pc, #80]	@ (800bba4 <USBD_LL_Init+0x94>)
 800bb52:	2200      	movs	r2, #0
 800bb54:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bb56:	4b13      	ldr	r3, [pc, #76]	@ (800bba4 <USBD_LL_Init+0x94>)
 800bb58:	2200      	movs	r2, #0
 800bb5a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bb5c:	4b11      	ldr	r3, [pc, #68]	@ (800bba4 <USBD_LL_Init+0x94>)
 800bb5e:	2200      	movs	r2, #0
 800bb60:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bb62:	4b10      	ldr	r3, [pc, #64]	@ (800bba4 <USBD_LL_Init+0x94>)
 800bb64:	2200      	movs	r2, #0
 800bb66:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bb68:	4b0e      	ldr	r3, [pc, #56]	@ (800bba4 <USBD_LL_Init+0x94>)
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bb6e:	480d      	ldr	r0, [pc, #52]	@ (800bba4 <USBD_LL_Init+0x94>)
 800bb70:	f7f9 fd44 	bl	80055fc <HAL_PCD_Init>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d001      	beq.n	800bb7e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bb7a:	f7f5 f8df 	bl	8000d3c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bb7e:	2180      	movs	r1, #128	@ 0x80
 800bb80:	4808      	ldr	r0, [pc, #32]	@ (800bba4 <USBD_LL_Init+0x94>)
 800bb82:	f7fa ff70 	bl	8006a66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bb86:	2240      	movs	r2, #64	@ 0x40
 800bb88:	2100      	movs	r1, #0
 800bb8a:	4806      	ldr	r0, [pc, #24]	@ (800bba4 <USBD_LL_Init+0x94>)
 800bb8c:	f7fa ff24 	bl	80069d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bb90:	2280      	movs	r2, #128	@ 0x80
 800bb92:	2101      	movs	r1, #1
 800bb94:	4803      	ldr	r0, [pc, #12]	@ (800bba4 <USBD_LL_Init+0x94>)
 800bb96:	f7fa ff1f 	bl	80069d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bb9a:	2300      	movs	r3, #0
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3708      	adds	r7, #8
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	20001280 	.word	0x20001280

0800bba8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b084      	sub	sp, #16
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7f9 fe2b 	bl	800581a <HAL_PCD_Start>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbc8:	7bfb      	ldrb	r3, [r7, #15]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f000 f942 	bl	800be54 <USBD_Get_USB_Status>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbd4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b084      	sub	sp, #16
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
 800bbe6:	4608      	mov	r0, r1
 800bbe8:	4611      	mov	r1, r2
 800bbea:	461a      	mov	r2, r3
 800bbec:	4603      	mov	r3, r0
 800bbee:	70fb      	strb	r3, [r7, #3]
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	70bb      	strb	r3, [r7, #2]
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bc06:	78bb      	ldrb	r3, [r7, #2]
 800bc08:	883a      	ldrh	r2, [r7, #0]
 800bc0a:	78f9      	ldrb	r1, [r7, #3]
 800bc0c:	f7fa faff 	bl	800620e <HAL_PCD_EP_Open>
 800bc10:	4603      	mov	r3, r0
 800bc12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc14:	7bfb      	ldrb	r3, [r7, #15]
 800bc16:	4618      	mov	r0, r3
 800bc18:	f000 f91c 	bl	800be54 <USBD_Get_USB_Status>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc20:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b084      	sub	sp, #16
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
 800bc32:	460b      	mov	r3, r1
 800bc34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc36:	2300      	movs	r3, #0
 800bc38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bc44:	78fa      	ldrb	r2, [r7, #3]
 800bc46:	4611      	mov	r1, r2
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7fa fb4a 	bl	80062e2 <HAL_PCD_EP_Close>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc52:	7bfb      	ldrb	r3, [r7, #15]
 800bc54:	4618      	mov	r0, r3
 800bc56:	f000 f8fd 	bl	800be54 <USBD_Get_USB_Status>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3710      	adds	r7, #16
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	460b      	mov	r3, r1
 800bc72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc74:	2300      	movs	r3, #0
 800bc76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bc82:	78fa      	ldrb	r2, [r7, #3]
 800bc84:	4611      	mov	r1, r2
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7fa fc02 	bl	8006490 <HAL_PCD_EP_SetStall>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc90:	7bfb      	ldrb	r3, [r7, #15]
 800bc92:	4618      	mov	r0, r3
 800bc94:	f000 f8de 	bl	800be54 <USBD_Get_USB_Status>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b084      	sub	sp, #16
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	460b      	mov	r3, r1
 800bcb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bcc0:	78fa      	ldrb	r2, [r7, #3]
 800bcc2:	4611      	mov	r1, r2
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7fa fc46 	bl	8006556 <HAL_PCD_EP_ClrStall>
 800bcca:	4603      	mov	r3, r0
 800bccc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcce:	7bfb      	ldrb	r3, [r7, #15]
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f000 f8bf 	bl	800be54 <USBD_Get_USB_Status>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcda:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3710      	adds	r7, #16
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}

0800bce4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b085      	sub	sp, #20
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
 800bcec:	460b      	mov	r3, r1
 800bcee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bcf6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bcf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	da0b      	bge.n	800bd18 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bd00:	78fb      	ldrb	r3, [r7, #3]
 800bd02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd06:	68f9      	ldr	r1, [r7, #12]
 800bd08:	4613      	mov	r3, r2
 800bd0a:	00db      	lsls	r3, r3, #3
 800bd0c:	4413      	add	r3, r2
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	440b      	add	r3, r1
 800bd12:	3316      	adds	r3, #22
 800bd14:	781b      	ldrb	r3, [r3, #0]
 800bd16:	e00b      	b.n	800bd30 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bd18:	78fb      	ldrb	r3, [r7, #3]
 800bd1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd1e:	68f9      	ldr	r1, [r7, #12]
 800bd20:	4613      	mov	r3, r2
 800bd22:	00db      	lsls	r3, r3, #3
 800bd24:	4413      	add	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	440b      	add	r3, r1
 800bd2a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bd2e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3714      	adds	r7, #20
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	460b      	mov	r3, r1
 800bd46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd56:	78fa      	ldrb	r2, [r7, #3]
 800bd58:	4611      	mov	r1, r2
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7fa fa33 	bl	80061c6 <HAL_PCD_SetAddress>
 800bd60:	4603      	mov	r3, r0
 800bd62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd64:	7bfb      	ldrb	r3, [r7, #15]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f000 f874 	bl	800be54 <USBD_Get_USB_Status>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd70:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}

0800bd7a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd7a:	b580      	push	{r7, lr}
 800bd7c:	b086      	sub	sp, #24
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	60f8      	str	r0, [r7, #12]
 800bd82:	607a      	str	r2, [r7, #4]
 800bd84:	603b      	str	r3, [r7, #0]
 800bd86:	460b      	mov	r3, r1
 800bd88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bd98:	7af9      	ldrb	r1, [r7, #11]
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	f7fa fb3d 	bl	800641c <HAL_PCD_EP_Transmit>
 800bda2:	4603      	mov	r3, r0
 800bda4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bda6:	7dfb      	ldrb	r3, [r7, #23]
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f000 f853 	bl	800be54 <USBD_Get_USB_Status>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bdb2:	7dbb      	ldrb	r3, [r7, #22]
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3718      	adds	r7, #24
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b086      	sub	sp, #24
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	607a      	str	r2, [r7, #4]
 800bdc6:	603b      	str	r3, [r7, #0]
 800bdc8:	460b      	mov	r3, r1
 800bdca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bdda:	7af9      	ldrb	r1, [r7, #11]
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	f7fa fac9 	bl	8006376 <HAL_PCD_EP_Receive>
 800bde4:	4603      	mov	r3, r0
 800bde6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bde8:	7dfb      	ldrb	r3, [r7, #23]
 800bdea:	4618      	mov	r0, r3
 800bdec:	f000 f832 	bl	800be54 <USBD_Get_USB_Status>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bdf4:	7dbb      	ldrb	r3, [r7, #22]
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3718      	adds	r7, #24
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}

0800bdfe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdfe:	b580      	push	{r7, lr}
 800be00:	b082      	sub	sp, #8
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
 800be06:	460b      	mov	r3, r1
 800be08:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be10:	78fa      	ldrb	r2, [r7, #3]
 800be12:	4611      	mov	r1, r2
 800be14:	4618      	mov	r0, r3
 800be16:	f7fa fae9 	bl	80063ec <HAL_PCD_EP_GetRxCount>
 800be1a:	4603      	mov	r3, r0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3708      	adds	r7, #8
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800be2c:	4b03      	ldr	r3, [pc, #12]	@ (800be3c <USBD_static_malloc+0x18>)
}
 800be2e:	4618      	mov	r0, r3
 800be30:	370c      	adds	r7, #12
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr
 800be3a:	bf00      	nop
 800be3c:	20001764 	.word	0x20001764

0800be40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]

}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800be54:	b480      	push	{r7}
 800be56:	b085      	sub	sp, #20
 800be58:	af00      	add	r7, sp, #0
 800be5a:	4603      	mov	r3, r0
 800be5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be5e:	2300      	movs	r3, #0
 800be60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800be62:	79fb      	ldrb	r3, [r7, #7]
 800be64:	2b03      	cmp	r3, #3
 800be66:	d817      	bhi.n	800be98 <USBD_Get_USB_Status+0x44>
 800be68:	a201      	add	r2, pc, #4	@ (adr r2, 800be70 <USBD_Get_USB_Status+0x1c>)
 800be6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be6e:	bf00      	nop
 800be70:	0800be81 	.word	0x0800be81
 800be74:	0800be87 	.word	0x0800be87
 800be78:	0800be8d 	.word	0x0800be8d
 800be7c:	0800be93 	.word	0x0800be93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800be80:	2300      	movs	r3, #0
 800be82:	73fb      	strb	r3, [r7, #15]
    break;
 800be84:	e00b      	b.n	800be9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be86:	2303      	movs	r3, #3
 800be88:	73fb      	strb	r3, [r7, #15]
    break;
 800be8a:	e008      	b.n	800be9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be8c:	2301      	movs	r3, #1
 800be8e:	73fb      	strb	r3, [r7, #15]
    break;
 800be90:	e005      	b.n	800be9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be92:	2303      	movs	r3, #3
 800be94:	73fb      	strb	r3, [r7, #15]
    break;
 800be96:	e002      	b.n	800be9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800be98:	2303      	movs	r3, #3
 800be9a:	73fb      	strb	r3, [r7, #15]
    break;
 800be9c:	bf00      	nop
  }
  return usb_status;
 800be9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3714      	adds	r7, #20
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr

0800beac <memset>:
 800beac:	4402      	add	r2, r0
 800beae:	4603      	mov	r3, r0
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d100      	bne.n	800beb6 <memset+0xa>
 800beb4:	4770      	bx	lr
 800beb6:	f803 1b01 	strb.w	r1, [r3], #1
 800beba:	e7f9      	b.n	800beb0 <memset+0x4>

0800bebc <__libc_init_array>:
 800bebc:	b570      	push	{r4, r5, r6, lr}
 800bebe:	4d0d      	ldr	r5, [pc, #52]	@ (800bef4 <__libc_init_array+0x38>)
 800bec0:	4c0d      	ldr	r4, [pc, #52]	@ (800bef8 <__libc_init_array+0x3c>)
 800bec2:	1b64      	subs	r4, r4, r5
 800bec4:	10a4      	asrs	r4, r4, #2
 800bec6:	2600      	movs	r6, #0
 800bec8:	42a6      	cmp	r6, r4
 800beca:	d109      	bne.n	800bee0 <__libc_init_array+0x24>
 800becc:	4d0b      	ldr	r5, [pc, #44]	@ (800befc <__libc_init_array+0x40>)
 800bece:	4c0c      	ldr	r4, [pc, #48]	@ (800bf00 <__libc_init_array+0x44>)
 800bed0:	f000 f818 	bl	800bf04 <_init>
 800bed4:	1b64      	subs	r4, r4, r5
 800bed6:	10a4      	asrs	r4, r4, #2
 800bed8:	2600      	movs	r6, #0
 800beda:	42a6      	cmp	r6, r4
 800bedc:	d105      	bne.n	800beea <__libc_init_array+0x2e>
 800bede:	bd70      	pop	{r4, r5, r6, pc}
 800bee0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bee4:	4798      	blx	r3
 800bee6:	3601      	adds	r6, #1
 800bee8:	e7ee      	b.n	800bec8 <__libc_init_array+0xc>
 800beea:	f855 3b04 	ldr.w	r3, [r5], #4
 800beee:	4798      	blx	r3
 800bef0:	3601      	adds	r6, #1
 800bef2:	e7f2      	b.n	800beda <__libc_init_array+0x1e>
 800bef4:	0800bf9c 	.word	0x0800bf9c
 800bef8:	0800bf9c 	.word	0x0800bf9c
 800befc:	0800bf9c 	.word	0x0800bf9c
 800bf00:	0800bfa0 	.word	0x0800bfa0

0800bf04 <_init>:
 800bf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf06:	bf00      	nop
 800bf08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf0a:	bc08      	pop	{r3}
 800bf0c:	469e      	mov	lr, r3
 800bf0e:	4770      	bx	lr

0800bf10 <_fini>:
 800bf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf12:	bf00      	nop
 800bf14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf16:	bc08      	pop	{r3}
 800bf18:	469e      	mov	lr, r3
 800bf1a:	4770      	bx	lr
